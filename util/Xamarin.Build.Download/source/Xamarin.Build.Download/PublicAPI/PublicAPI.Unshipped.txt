#nullable enable
Xamarin.Build.Download.ArchiveKind
Xamarin.Build.Download.ArchiveKind.Tgz = 2 -> Xamarin.Build.Download.ArchiveKind
Xamarin.Build.Download.ArchiveKind.Uncompressed = 3 -> Xamarin.Build.Download.ArchiveKind
Xamarin.Build.Download.ArchiveKind.Unknown = 0 -> Xamarin.Build.Download.ArchiveKind
Xamarin.Build.Download.ArchiveKind.Zip = 1 -> Xamarin.Build.Download.ArchiveKind
Xamarin.Build.Download.AsyncTask
Xamarin.Build.Download.AsyncTask.AsyncTask() -> void
Xamarin.Build.Download.AsyncTask.Cancel() -> void
Xamarin.Build.Download.AsyncTask.Complete() -> void
~Xamarin.Build.Download.AsyncTask.LogCodedError(string code, string message, params object[] messageArgs) -> void
~Xamarin.Build.Download.AsyncTask.LogDebugMessage(string message, params object[] messageArgs) -> void
~Xamarin.Build.Download.AsyncTask.LogDebugTaskItems(string message, Microsoft.Build.Framework.ITaskItem[] items) -> void
~Xamarin.Build.Download.AsyncTask.LogDebugTaskItems(string message, params string[] items) -> void
~Xamarin.Build.Download.AsyncTask.LogError(string code, string message) -> void
~Xamarin.Build.Download.AsyncTask.LogErrorFromException(System.Exception exception) -> void
~Xamarin.Build.Download.AsyncTask.LogMessage(string message, Microsoft.Build.Framework.MessageImportance importance = Microsoft.Build.Framework.MessageImportance.Normal) -> void
~Xamarin.Build.Download.AsyncTask.LogMessage(string message, params object[] messageArgs) -> void
~Xamarin.Build.Download.AsyncTask.LogWarning(string message) -> void
~Xamarin.Build.Download.AsyncTask.LogWarning(string message, params object[] messageArgs) -> void
Xamarin.Build.Download.AsyncTask.Token.get -> System.Threading.CancellationToken
Xamarin.Build.Download.AsyncTask.WaitForCompletion() -> void
Xamarin.Build.Download.AsyncTask.YieldDuringExecution.get -> bool
Xamarin.Build.Download.AsyncTask.YieldDuringExecution.set -> void
Xamarin.Build.Download.Crc64
Xamarin.Build.Download.Crc64.Crc64() -> void
Xamarin.Build.Download.DownloadUtils
~Xamarin.Build.Download.DownloadUtils.CacheDir.get -> string
~Xamarin.Build.Download.DownloadUtils.DownloadUtils(Xamarin.Build.Download.ILogger logger, string cacheDir) -> void
~Xamarin.Build.Download.DownloadUtils.EnsureSecureUrl(Microsoft.Build.Framework.ITaskItem item, string url, bool allowUnsecureUrls) -> bool
~Xamarin.Build.Download.DownloadUtils.GetKind(string urlMetadata, string kindMetadata) -> Xamarin.Build.Download.ArchiveKind
~Xamarin.Build.Download.DownloadUtils.IsAlreadyDownloaded(Xamarin.Build.Download.XamarinBuildDownload xbd) -> bool
~Xamarin.Build.Download.DownloadUtils.IsAlreadyDownloaded(string cacheDirectory, Xamarin.Build.Download.PartialZipDownload partialZipDownload) -> bool
~Xamarin.Build.Download.DownloadUtils.Log.get -> Xamarin.Build.Download.ILogger
~Xamarin.Build.Download.DownloadUtils.ParseDownloadItems(Microsoft.Build.Framework.ITaskItem[] items, bool allowUnsecureUrls) -> System.Collections.Generic.IEnumerable<Xamarin.Build.Download.XamarinBuildDownload>
~Xamarin.Build.Download.DownloadUtils.ParsePartialZipDownloadItems(Microsoft.Build.Framework.ITaskItem[] items, bool allowUnsecureUrls) -> System.Collections.Generic.List<Xamarin.Build.Download.PartialZipDownload>
Xamarin.Build.Download.ErrorCodes
Xamarin.Build.Download.ILogger
~Xamarin.Build.Download.ILogger.LogCodedError(string code, string message, params object[] messageArgs) -> void
~Xamarin.Build.Download.ILogger.LogErrorFromException(System.Exception exception) -> void
Xamarin.Build.Download.PartialZipDownload
~Xamarin.Build.Download.PartialZipDownload.CustomErrorCode.get -> string
~Xamarin.Build.Download.PartialZipDownload.CustomErrorCode.set -> void
~Xamarin.Build.Download.PartialZipDownload.CustomErrorMessage.get -> string
~Xamarin.Build.Download.PartialZipDownload.CustomErrorMessage.set -> void
~Xamarin.Build.Download.PartialZipDownload.Id.get -> string
~Xamarin.Build.Download.PartialZipDownload.Id.set -> void
Xamarin.Build.Download.PartialZipDownload.PartialZipDownload() -> void
Xamarin.Build.Download.PartialZipDownload.RangeEnd.get -> long
Xamarin.Build.Download.PartialZipDownload.RangeEnd.set -> void
Xamarin.Build.Download.PartialZipDownload.RangeStart.get -> long
Xamarin.Build.Download.PartialZipDownload.RangeStart.set -> void
~Xamarin.Build.Download.PartialZipDownload.Sha256.get -> string
~Xamarin.Build.Download.PartialZipDownload.Sha256.set -> void
~Xamarin.Build.Download.PartialZipDownload.ToFile.get -> string
~Xamarin.Build.Download.PartialZipDownload.ToFile.set -> void
~Xamarin.Build.Download.PartialZipDownload.Url.get -> string
~Xamarin.Build.Download.PartialZipDownload.Url.set -> void
Xamarin.Build.Download.VS7ZipLocator
Xamarin.Build.Download.XamarinBuildCastAssemblyResources
~Xamarin.Build.Download.XamarinBuildCastAssemblyResources.BundleResources.get -> Microsoft.Build.Framework.ITaskItem[]
~Xamarin.Build.Download.XamarinBuildCastAssemblyResources.BundleResources.set -> void
~Xamarin.Build.Download.XamarinBuildCastAssemblyResources.RestoreAssemblyResources.get -> Microsoft.Build.Framework.ITaskItem[]
~Xamarin.Build.Download.XamarinBuildCastAssemblyResources.RestoreAssemblyResources.set -> void
Xamarin.Build.Download.XamarinBuildCastAssemblyResources.XamarinBuildCastAssemblyResources() -> void
Xamarin.Build.Download.XamarinBuildDownload
~Xamarin.Build.Download.XamarinBuildDownload.CacheFile.get -> string
~Xamarin.Build.Download.XamarinBuildDownload.CacheFile.set -> void
~Xamarin.Build.Download.XamarinBuildDownload.CustomErrorCode.get -> string
~Xamarin.Build.Download.XamarinBuildDownload.CustomErrorCode.set -> void
~Xamarin.Build.Download.XamarinBuildDownload.CustomErrorMessage.get -> string
~Xamarin.Build.Download.XamarinBuildDownload.CustomErrorMessage.set -> void
~Xamarin.Build.Download.XamarinBuildDownload.DestinationDir.get -> string
~Xamarin.Build.Download.XamarinBuildDownload.DestinationDir.set -> void
Xamarin.Build.Download.XamarinBuildDownload.ExclusiveLockTimeout.get -> int
Xamarin.Build.Download.XamarinBuildDownload.ExclusiveLockTimeout.set -> void
~Xamarin.Build.Download.XamarinBuildDownload.Id.get -> string
~Xamarin.Build.Download.XamarinBuildDownload.Id.set -> void
Xamarin.Build.Download.XamarinBuildDownload.Kind.get -> Xamarin.Build.Download.ArchiveKind
Xamarin.Build.Download.XamarinBuildDownload.Kind.set -> void
~Xamarin.Build.Download.XamarinBuildDownload.Sha256.get -> string
~Xamarin.Build.Download.XamarinBuildDownload.Sha256.set -> void
~Xamarin.Build.Download.XamarinBuildDownload.ToFile.get -> string
~Xamarin.Build.Download.XamarinBuildDownload.ToFile.set -> void
~Xamarin.Build.Download.XamarinBuildDownload.Url.get -> string
~Xamarin.Build.Download.XamarinBuildDownload.Url.set -> void
Xamarin.Build.Download.XamarinBuildDownload.XamarinBuildDownload() -> void
Xamarin.Build.Download.XamarinBuildGetArchivesToDownload
Xamarin.Build.Download.XamarinBuildGetArchivesToDownload.AllowUnsecureUrls.get -> bool
Xamarin.Build.Download.XamarinBuildGetArchivesToDownload.AllowUnsecureUrls.set -> void
~Xamarin.Build.Download.XamarinBuildGetArchivesToDownload.Archives.get -> Microsoft.Build.Framework.ITaskItem[]
~Xamarin.Build.Download.XamarinBuildGetArchivesToDownload.ArchivesToDownload.get -> Microsoft.Build.Framework.ITaskItem[]
~Xamarin.Build.Download.XamarinBuildGetArchivesToDownload.CacheDirectory.get -> string
~Xamarin.Build.Download.XamarinBuildGetArchivesToDownload.CacheDirectory.set -> void
~Xamarin.Build.Download.XamarinBuildGetArchivesToDownload.DestinationBase.get -> string
~Xamarin.Build.Download.XamarinBuildGetArchivesToDownload.DestinationBase.set -> void
~Xamarin.Build.Download.XamarinBuildGetArchivesToDownload.LogCodedError(string code, string message, params object[] messageArgs) -> void
~Xamarin.Build.Download.XamarinBuildGetArchivesToDownload.LogErrorFromException(System.Exception exception) -> void
~Xamarin.Build.Download.XamarinBuildGetArchivesToDownload.PartialZipDownloads.get -> Microsoft.Build.Framework.ITaskItem[]
Xamarin.Build.Download.XamarinBuildGetArchivesToDownload.XamarinBuildGetArchivesToDownload() -> void
Xamarin.Build.Download.XamarinDownloadArchives
Xamarin.Build.Download.XamarinDownloadArchives.AllowUnsecureUrls.get -> bool
Xamarin.Build.Download.XamarinDownloadArchives.AllowUnsecureUrls.set -> void
~Xamarin.Build.Download.XamarinDownloadArchives.Archives.get -> Microsoft.Build.Framework.ITaskItem[]
~Xamarin.Build.Download.XamarinDownloadArchives.CacheDirectory.get -> string
~Xamarin.Build.Download.XamarinDownloadArchives.CacheDirectory.set -> void
~Xamarin.Build.Download.XamarinDownloadArchives.DestinationBase.get -> string
~Xamarin.Build.Download.XamarinDownloadArchives.DestinationBase.set -> void
Xamarin.Build.Download.XamarinDownloadArchives.IsAndroid.get -> bool
Xamarin.Build.Download.XamarinDownloadArchives.IsAndroid.set -> void
~Xamarin.Build.Download.XamarinDownloadArchives.User7ZipPath.get -> string
~Xamarin.Build.Download.XamarinDownloadArchives.User7ZipPath.set -> void
~Xamarin.Build.Download.XamarinDownloadArchives.VsInstallRoot.get -> string
~Xamarin.Build.Download.XamarinDownloadArchives.VsInstallRoot.set -> void
Xamarin.Build.Download.XamarinDownloadArchives.XamarinDownloadArchives() -> void
Xamarin.Build.Download.XamarinDownloadPartialZips
Xamarin.Build.Download.XamarinDownloadPartialZips.AllowUnsecureUrls.get -> bool
Xamarin.Build.Download.XamarinDownloadPartialZips.AllowUnsecureUrls.set -> void
~Xamarin.Build.Download.XamarinDownloadPartialZips.CacheDirectory.get -> string
~Xamarin.Build.Download.XamarinDownloadPartialZips.CacheDirectory.set -> void
~Xamarin.Build.Download.XamarinDownloadPartialZips.DestinationBase.get -> string
~Xamarin.Build.Download.XamarinDownloadPartialZips.DestinationBase.set -> void
Xamarin.Build.Download.XamarinDownloadPartialZips.IsAndroid.get -> bool
Xamarin.Build.Download.XamarinDownloadPartialZips.IsAndroid.set -> void
~Xamarin.Build.Download.XamarinDownloadPartialZips.Parts.get -> Microsoft.Build.Framework.ITaskItem[]
Xamarin.Build.Download.XamarinDownloadPartialZips.XamarinDownloadPartialZips() -> void
Xamarin.Components.Ide.Activation.ProcessUtils
Xamarin.MacDev.IPValueObject
~Xamarin.MacDev.IPValueObject.TrySetValueFromString(string text, System.IFormatProvider formatProvider) -> bool
~Xamarin.MacDev.IPValueObject.Value.get -> object
~Xamarin.MacDev.IPValueObject.Value.set -> void
Xamarin.MacDev.PArray
~Xamarin.MacDev.PArray.Add(Xamarin.MacDev.PObject obj) -> void
~Xamarin.MacDev.PArray.AssignStringList(string strList) -> void
Xamarin.MacDev.PArray.Clear() -> void
~Xamarin.MacDev.PArray.GetEnumerator() -> System.Collections.Generic.IEnumerator<Xamarin.MacDev.PObject>
~Xamarin.MacDev.PArray.Insert(int index, Xamarin.MacDev.PObject obj) -> void
Xamarin.MacDev.PArray.PArray() -> void
~Xamarin.MacDev.PArray.Remove(Xamarin.MacDev.PObject obj) -> void
~Xamarin.MacDev.PArray.Replace(Xamarin.MacDev.PObject oldObj, Xamarin.MacDev.PObject newObject) -> void
~Xamarin.MacDev.PArray.ToStringArray() -> string[]
~Xamarin.MacDev.PArray.ToStringList() -> string
~Xamarin.MacDev.PArray.this[int i].get -> Xamarin.MacDev.PObject
~Xamarin.MacDev.PArray.this[int i].set -> void
Xamarin.MacDev.PBoolean
Xamarin.MacDev.PBoolean.PBoolean(bool value) -> void
Xamarin.MacDev.PData
~Xamarin.MacDev.PData.PData(byte[] value) -> void
Xamarin.MacDev.PDate
Xamarin.MacDev.PDate.PDate(System.DateTime value) -> void
Xamarin.MacDev.PDictionary
~Xamarin.MacDev.PDictionary.Add(string key, Xamarin.MacDev.PObject value) -> void
~Xamarin.MacDev.PDictionary.ChangeKey(Xamarin.MacDev.PObject obj, string newKey) -> bool
~Xamarin.MacDev.PDictionary.ChangeKey(Xamarin.MacDev.PObject obj, string newKey, Xamarin.MacDev.PObject newValue) -> bool
Xamarin.MacDev.PDictionary.Clear() -> void
~Xamarin.MacDev.PDictionary.ContainsKey(string name) -> bool
~Xamarin.MacDev.PDictionary.Get<T>(string key) -> T
~Xamarin.MacDev.PDictionary.GetArray(string key) -> Xamarin.MacDev.PArray
~Xamarin.MacDev.PDictionary.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<string, Xamarin.MacDev.PObject>>
~Xamarin.MacDev.PDictionary.GetKey(Xamarin.MacDev.PObject obj) -> string
~Xamarin.MacDev.PDictionary.GetString(string key) -> Xamarin.MacDev.PString
~Xamarin.MacDev.PDictionary.InsertAfter(string keyBefore, string key, Xamarin.MacDev.PObject value) -> void
Xamarin.MacDev.PDictionary.PDictionary() -> void
~Xamarin.MacDev.PDictionary.Remove(string key) -> bool
~Xamarin.MacDev.PDictionary.SetString(string key, string value) -> void
~Xamarin.MacDev.PDictionary.TryGetValue<T>(string key, out T value) -> bool
~Xamarin.MacDev.PDictionary.this[string key].get -> Xamarin.MacDev.PObject
~Xamarin.MacDev.PDictionary.this[string key].set -> void
Xamarin.MacDev.PNumber
Xamarin.MacDev.PNumber.PNumber(int value) -> void
Xamarin.MacDev.PObject
Xamarin.MacDev.PObject.Changed -> System.EventHandler
~Xamarin.MacDev.PObject.Key.get -> string
Xamarin.MacDev.PObject.PObject() -> void
~Xamarin.MacDev.PObject.Parent.get -> Xamarin.MacDev.PObjectContainer
~Xamarin.MacDev.PObject.Parent.set -> void
Xamarin.MacDev.PObject.Remove() -> void
~Xamarin.MacDev.PObject.Replace(Xamarin.MacDev.PObject newObject) -> void
Xamarin.MacDev.PObject.SuppressChangeEvents.get -> bool
Xamarin.MacDev.PObject.SuppressChangeEvents.set -> void
~Xamarin.MacDev.PObject.ToByteArray(bool binary) -> byte[]
~Xamarin.MacDev.PObject.ToXml() -> string
Xamarin.MacDev.PObjectContainer
Xamarin.MacDev.PObjectContainer.CollectionChanged -> System.EventHandler<Xamarin.MacDev.PObjectContainerEventArgs>
~Xamarin.MacDev.PObjectContainer.OnChildAdded(string key, Xamarin.MacDev.PObject child) -> void
~Xamarin.MacDev.PObjectContainer.OnChildRemoved(string key, Xamarin.MacDev.PObject child) -> void
~Xamarin.MacDev.PObjectContainer.OnChildReplaced(string key, Xamarin.MacDev.PObject oldChild, Xamarin.MacDev.PObject newChild) -> void
Xamarin.MacDev.PObjectContainer.OnCleared() -> void
~Xamarin.MacDev.PObjectContainer.OnCollectionChanged(Xamarin.MacDev.PObjectContainerAction action, string key, Xamarin.MacDev.PObject oldChild, Xamarin.MacDev.PObject newChild) -> void
Xamarin.MacDev.PObjectContainer.PObjectContainer() -> void
~Xamarin.MacDev.PObjectContainer.Reload(string fileName) -> bool
~Xamarin.MacDev.PObjectContainer.Save(string filename, bool atomic = false, bool binary = false) -> void
~Xamarin.MacDev.PObjectContainer.SaveAsync(string filename, bool atomic = false, bool binary = false) -> System.Threading.Tasks.Task
Xamarin.MacDev.PObjectContainerAction
Xamarin.MacDev.PObjectContainerAction.Added = 0 -> Xamarin.MacDev.PObjectContainerAction
Xamarin.MacDev.PObjectContainerAction.Changed = 1 -> Xamarin.MacDev.PObjectContainerAction
Xamarin.MacDev.PObjectContainerAction.Cleared = 4 -> Xamarin.MacDev.PObjectContainerAction
Xamarin.MacDev.PObjectContainerAction.Removed = 2 -> Xamarin.MacDev.PObjectContainerAction
Xamarin.MacDev.PObjectContainerAction.Replaced = 3 -> Xamarin.MacDev.PObjectContainerAction
Xamarin.MacDev.PObjectContainerEventArgs
Xamarin.MacDev.PObjectContainerEventArgs.Action.get -> Xamarin.MacDev.PObjectContainerAction
~Xamarin.MacDev.PObjectContainerEventArgs.Key.get -> string
~Xamarin.MacDev.PObjectContainerEventArgs.NewItem.get -> Xamarin.MacDev.PObject
~Xamarin.MacDev.PObjectContainerEventArgs.OldItem.get -> Xamarin.MacDev.PObject
Xamarin.MacDev.PObjectType
Xamarin.MacDev.PObjectType.Array = 1 -> Xamarin.MacDev.PObjectType
Xamarin.MacDev.PObjectType.Boolean = 4 -> Xamarin.MacDev.PObjectType
Xamarin.MacDev.PObjectType.Data = 5 -> Xamarin.MacDev.PObjectType
Xamarin.MacDev.PObjectType.Date = 7 -> Xamarin.MacDev.PObjectType
Xamarin.MacDev.PObjectType.Dictionary = 0 -> Xamarin.MacDev.PObjectType
Xamarin.MacDev.PObjectType.Number = 3 -> Xamarin.MacDev.PObjectType
Xamarin.MacDev.PObjectType.Real = 2 -> Xamarin.MacDev.PObjectType
Xamarin.MacDev.PObjectType.String = 6 -> Xamarin.MacDev.PObjectType
Xamarin.MacDev.PReal
Xamarin.MacDev.PReal.PReal(double value) -> void
Xamarin.MacDev.PString
~Xamarin.MacDev.PString.PString(string value) -> void
Xamarin.MacDev.PValueObject<T>
Xamarin.MacDev.PValueObject<T>.PValueObject() -> void
Xamarin.MacDev.PValueObject<T>.PValueObject(T value) -> void
Xamarin.MacDev.PValueObject<T>.Value.get -> T
Xamarin.MacDev.PValueObject<T>.Value.set -> void
Xamarin.MacDev.PropertyListFormat
Xamarin.MacDev.PropertyListFormat.PropertyListFormat() -> void
Xamarin.MacDev.PropertyListFormat.ReadWriteContext
Xamarin.MacDev.PropertyListFormat.ReadWriteContext.CurrentType.get -> Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType
Xamarin.MacDev.PropertyListFormat.ReadWriteContext.CurrentType.set -> void
Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType
Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType.array = 160 -> Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType
Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType.data = 64 -> Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType
Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType.date = 48 -> Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType
Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType.dict = 208 -> Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType
Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType.false = 8 -> Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType
Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType.fill = 15 -> Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType
Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType.integer = 16 -> Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType
Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType.null = 0 -> Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType
Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType.real = 32 -> Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType
Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType.string = 80 -> Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType
Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType.true = 9 -> Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType
Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType.wideString = 96 -> Xamarin.MacDev.PropertyListFormat.ReadWriteContext.PlistType
~Xamarin.MacDev.PropertyListFormat.ReadWriteContext.ReadObject() -> Xamarin.MacDev.PObject
Xamarin.MacDev.PropertyListFormat.ReadWriteContext.ReadWriteContext() -> void
~Xamarin.MacDev.PropertyListFormat.StartReading(byte[] array) -> Xamarin.MacDev.PropertyListFormat.ReadWriteContext
~Xamarin.MacDev.PropertyListFormat.StartReading(byte[] array, int startIndex, int length) -> Xamarin.MacDev.PropertyListFormat.ReadWriteContext
~abstract Xamarin.MacDev.PObject.Clone() -> Xamarin.MacDev.PObject
abstract Xamarin.MacDev.PObject.Type.get -> Xamarin.MacDev.PObjectType
abstract Xamarin.MacDev.PObjectContainer.Count.get -> int
~abstract Xamarin.MacDev.PObjectContainer.Reload(Xamarin.MacDev.PropertyListFormat.ReadWriteContext ctx) -> bool
~abstract Xamarin.MacDev.PValueObject<T>.TrySetValueFromString(string text, System.IFormatProvider formatProvider) -> bool
abstract Xamarin.MacDev.PropertyListFormat.ReadWriteContext.Dispose() -> void
~abstract Xamarin.MacDev.PropertyListFormat.ReadWriteContext.ReadArray(Xamarin.MacDev.PArray array) -> bool
abstract Xamarin.MacDev.PropertyListFormat.ReadWriteContext.ReadBool() -> bool
~abstract Xamarin.MacDev.PropertyListFormat.ReadWriteContext.ReadData() -> byte[]
abstract Xamarin.MacDev.PropertyListFormat.ReadWriteContext.ReadDate() -> System.DateTime
~abstract Xamarin.MacDev.PropertyListFormat.ReadWriteContext.ReadDict(Xamarin.MacDev.PDictionary dict) -> bool
abstract Xamarin.MacDev.PropertyListFormat.ReadWriteContext.ReadInteger() -> long
abstract Xamarin.MacDev.PropertyListFormat.ReadWriteContext.ReadObjectHead() -> void
abstract Xamarin.MacDev.PropertyListFormat.ReadWriteContext.ReadReal() -> double
~abstract Xamarin.MacDev.PropertyListFormat.ReadWriteContext.ReadString() -> string
~abstract Xamarin.MacDev.PropertyListFormat.ReadWriteContext.Write(Xamarin.MacDev.PArray array) -> void
~abstract Xamarin.MacDev.PropertyListFormat.ReadWriteContext.Write(Xamarin.MacDev.PBoolean boolean) -> void
~abstract Xamarin.MacDev.PropertyListFormat.ReadWriteContext.Write(Xamarin.MacDev.PData data) -> void
~abstract Xamarin.MacDev.PropertyListFormat.ReadWriteContext.Write(Xamarin.MacDev.PDate date) -> void
~abstract Xamarin.MacDev.PropertyListFormat.ReadWriteContext.Write(Xamarin.MacDev.PDictionary dict) -> void
~abstract Xamarin.MacDev.PropertyListFormat.ReadWriteContext.Write(Xamarin.MacDev.PNumber number) -> void
~abstract Xamarin.MacDev.PropertyListFormat.ReadWriteContext.Write(Xamarin.MacDev.PReal real) -> void
~abstract Xamarin.MacDev.PropertyListFormat.ReadWriteContext.Write(Xamarin.MacDev.PString str) -> void
~abstract Xamarin.MacDev.PropertyListFormat.StartReading(System.IO.Stream input) -> Xamarin.MacDev.PropertyListFormat.ReadWriteContext
~abstract Xamarin.MacDev.PropertyListFormat.StartWriting(System.IO.Stream output) -> Xamarin.MacDev.PropertyListFormat.ReadWriteContext
~const Xamarin.Build.Download.ErrorCodes.DirectoryCreateFailed = "XBD005" -> string
~const Xamarin.Build.Download.ErrorCodes.DirectoryDeleteFailed = "XBD006" -> string
~const Xamarin.Build.Download.ErrorCodes.DownloadFailed = "XBD001" -> string
~const Xamarin.Build.Download.ErrorCodes.DownloadedFileMissing = "XBD003" -> string
~const Xamarin.Build.Download.ErrorCodes.ExclusiveLockTimeout = "XBD008" -> string
~const Xamarin.Build.Download.ErrorCodes.ExtractionFailed = "XBD002" -> string
~const Xamarin.Build.Download.ErrorCodes.PartialDownloadFailed = "XBD009" -> string
~const Xamarin.Build.Download.ErrorCodes.UnknownArchiveType = "XBD010" -> string
~const Xamarin.Build.Download.ErrorCodes.XbdInvalidItemId = "XBD020" -> string
~const Xamarin.Build.Download.ErrorCodes.XbdInvalidRange = "XBD030" -> string
~const Xamarin.Build.Download.ErrorCodes.XbdInvalidRangeEnd = "XBD032" -> string
~const Xamarin.Build.Download.ErrorCodes.XbdInvalidRangeStart = "XBD031" -> string
~const Xamarin.Build.Download.ErrorCodes.XbdInvalidToFile = "XBD022" -> string
~const Xamarin.Build.Download.ErrorCodes.XbdInvalidUrl = "XBD021" -> string
~const Xamarin.Build.Download.ErrorCodes.XbdUnsecureUrl = "XBD040" -> string
~const Xamarin.Build.Download.ErrorCodes.XbdUnsupportedItemGroup = "XBD100" -> string
override Xamarin.Build.Download.AsyncTask.Execute() -> bool
~override Xamarin.Build.Download.Crc64.HashCore(byte[] array, int ibStart, int cbSize) -> void
~override Xamarin.Build.Download.Crc64.HashFinal() -> byte[]
override Xamarin.Build.Download.Crc64.Initialize() -> void
override Xamarin.Build.Download.XamarinBuildCastAssemblyResources.Execute() -> bool
override Xamarin.Build.Download.XamarinBuildGetArchivesToDownload.Execute() -> bool
override Xamarin.Build.Download.XamarinDownloadArchives.Execute() -> bool
override Xamarin.Build.Download.XamarinDownloadPartialZips.Execute() -> bool
~override Xamarin.MacDev.PArray.Clone() -> Xamarin.MacDev.PObject
override Xamarin.MacDev.PArray.Count.get -> int
~override Xamarin.MacDev.PArray.Reload(Xamarin.MacDev.PropertyListFormat.ReadWriteContext ctx) -> bool
~override Xamarin.MacDev.PArray.ToString() -> string
override Xamarin.MacDev.PArray.Type.get -> Xamarin.MacDev.PObjectType
~override Xamarin.MacDev.PBoolean.Clone() -> Xamarin.MacDev.PObject
~override Xamarin.MacDev.PBoolean.TrySetValueFromString(string text, System.IFormatProvider formatProvider) -> bool
override Xamarin.MacDev.PBoolean.Type.get -> Xamarin.MacDev.PObjectType
~override Xamarin.MacDev.PData.Clone() -> Xamarin.MacDev.PObject
~override Xamarin.MacDev.PData.TrySetValueFromString(string text, System.IFormatProvider formatProvider) -> bool
override Xamarin.MacDev.PData.Type.get -> Xamarin.MacDev.PObjectType
~override Xamarin.MacDev.PDate.Clone() -> Xamarin.MacDev.PObject
~override Xamarin.MacDev.PDate.TrySetValueFromString(string text, System.IFormatProvider formatProvider) -> bool
override Xamarin.MacDev.PDate.Type.get -> Xamarin.MacDev.PObjectType
~override Xamarin.MacDev.PDictionary.Clone() -> Xamarin.MacDev.PObject
override Xamarin.MacDev.PDictionary.Count.get -> int
~override Xamarin.MacDev.PDictionary.Reload(Xamarin.MacDev.PropertyListFormat.ReadWriteContext ctx) -> bool
~override Xamarin.MacDev.PDictionary.ToString() -> string
override Xamarin.MacDev.PDictionary.Type.get -> Xamarin.MacDev.PObjectType
~override Xamarin.MacDev.PNumber.Clone() -> Xamarin.MacDev.PObject
~override Xamarin.MacDev.PNumber.TrySetValueFromString(string text, System.IFormatProvider formatProvider) -> bool
override Xamarin.MacDev.PNumber.Type.get -> Xamarin.MacDev.PObjectType
~override Xamarin.MacDev.PReal.Clone() -> Xamarin.MacDev.PObject
~override Xamarin.MacDev.PReal.TrySetValueFromString(string text, System.IFormatProvider formatProvider) -> bool
override Xamarin.MacDev.PReal.Type.get -> Xamarin.MacDev.PObjectType
~override Xamarin.MacDev.PString.Clone() -> Xamarin.MacDev.PObject
~override Xamarin.MacDev.PString.TrySetValueFromString(string text, System.IFormatProvider formatProvider) -> bool
override Xamarin.MacDev.PString.Type.get -> Xamarin.MacDev.PObjectType
~static Xamarin.Build.Download.DownloadUtils.Crc64(string s) -> string
~static Xamarin.Build.Download.DownloadUtils.GetCacheDir(string overrideCacheDir = null) -> string
~static Xamarin.Build.Download.DownloadUtils.HashBytes(byte[] bytes) -> string
~static Xamarin.Build.Download.DownloadUtils.HashSha256(System.IO.Stream value) -> string
~static Xamarin.Build.Download.DownloadUtils.HashSha256(byte[] value) -> string
~static Xamarin.Build.Download.DownloadUtils.HashSha256(string value) -> string
~static Xamarin.Build.Download.DownloadUtils.ObtainExclusiveFileLock(string file, System.Threading.CancellationToken cancelToken, System.TimeSpan timeout, Xamarin.Build.Download.ILogger log = null) -> System.IO.Stream
~static Xamarin.Build.Download.DownloadUtils.ToHexString(byte[] hash) -> string
~static Xamarin.Build.Download.DownloadUtils.ValidateId(string id) -> bool
~static Xamarin.Build.Download.VS7ZipLocator.Locate7Zip(string vsInstallRoot) -> string
~static Xamarin.Build.Download.XamarinDownloadArchives.HashFile(string filename, System.Security.Cryptography.HashAlgorithm hashAlg) -> string
~static Xamarin.Build.Download.XamarinDownloadArchives.Sha256HashFile(string filename) -> string
~static Xamarin.Components.Ide.Activation.ProcessUtils.StartProcess(System.Diagnostics.ProcessStartInfo psi, System.IO.TextWriter stdout, System.IO.TextWriter stderr, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<int>
~static Xamarin.MacDev.PDictionary.FromBinaryXml(byte[] array) -> Xamarin.MacDev.PDictionary
~static Xamarin.MacDev.PDictionary.FromBinaryXml(string fileName) -> Xamarin.MacDev.PDictionary
~static Xamarin.MacDev.PDictionary.FromByteArray(byte[] array, int startIndex, int length, out bool isBinary) -> Xamarin.MacDev.PDictionary
~static Xamarin.MacDev.PDictionary.FromByteArray(byte[] array, out bool isBinary) -> Xamarin.MacDev.PDictionary
~static Xamarin.MacDev.PDictionary.FromFile(string fileName) -> Xamarin.MacDev.PDictionary
~static Xamarin.MacDev.PDictionary.FromFile(string fileName, out bool isBinary) -> Xamarin.MacDev.PDictionary
~static Xamarin.MacDev.PDictionary.FromFileAsync(string fileName) -> System.Threading.Tasks.Task<Xamarin.MacDev.PDictionary>
~static Xamarin.MacDev.PDictionary.Load(string fileName) -> Xamarin.MacDev.PDictionary
~static Xamarin.MacDev.PObject.Create(Xamarin.MacDev.PObjectType type) -> Xamarin.MacDev.PObject
~static Xamarin.MacDev.PObject.FromByteArray(byte[] array, int startIndex, int length, out bool isBinary) -> Xamarin.MacDev.PObject
~static Xamarin.MacDev.PObject.FromByteArray(byte[] array, out bool isBinary) -> Xamarin.MacDev.PObject
~static Xamarin.MacDev.PObject.FromStream(System.IO.Stream stream) -> Xamarin.MacDev.PObject
~static Xamarin.MacDev.PObject.FromString(string str) -> Xamarin.MacDev.PObject
~static Xamarin.MacDev.PObject.ToEnumerable(Xamarin.MacDev.PObject obj) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, Xamarin.MacDev.PObject>>
~static Xamarin.MacDev.PObject.implicit operator Xamarin.MacDev.PObject(System.DateTime value) -> Xamarin.MacDev.PObject
~static Xamarin.MacDev.PObject.implicit operator Xamarin.MacDev.PObject(bool value) -> Xamarin.MacDev.PObject
~static Xamarin.MacDev.PObject.implicit operator Xamarin.MacDev.PObject(byte[] value) -> Xamarin.MacDev.PObject
~static Xamarin.MacDev.PObject.implicit operator Xamarin.MacDev.PObject(double value) -> Xamarin.MacDev.PObject
~static Xamarin.MacDev.PObject.implicit operator Xamarin.MacDev.PObject(int value) -> Xamarin.MacDev.PObject
~static Xamarin.MacDev.PObject.implicit operator Xamarin.MacDev.PObject(string value) -> Xamarin.MacDev.PObject
~static Xamarin.MacDev.PValueObject<T>.implicit operator T(Xamarin.MacDev.PValueObject<T> pObj) -> T
~static Xamarin.MacDev.PropertyListFormat.CreateReadContext(System.IO.Stream input) -> Xamarin.MacDev.PropertyListFormat.ReadWriteContext
~static Xamarin.MacDev.PropertyListFormat.CreateReadContext(byte[] array) -> Xamarin.MacDev.PropertyListFormat.ReadWriteContext
~static Xamarin.MacDev.PropertyListFormat.CreateReadContext(byte[] array, int startIndex, int length) -> Xamarin.MacDev.PropertyListFormat.ReadWriteContext
~static readonly Xamarin.MacDev.PropertyListFormat.Binary -> Xamarin.MacDev.PropertyListFormat
~static readonly Xamarin.MacDev.PropertyListFormat.Xml -> Xamarin.MacDev.PropertyListFormat
~virtual Xamarin.MacDev.PObject.OnChanged(System.EventArgs e) -> void
~virtual Xamarin.MacDev.PropertyListFormat.ReadWriteContext.WriteObject(Xamarin.MacDev.PObject value) -> void
