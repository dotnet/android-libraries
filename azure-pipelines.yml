trigger:
  - master
  - refs/tags/*

pr:
  - master
  
variables:
  BUILD_NUMBER: $(Build.BuildNumber)
  BUILD_COMMIT: $(Build.SourceVersion)
  PRE_RESTORE_PROJECTS: true  # Windows is having an issue on CI right now
#   XAMARIN_ANDROID_PATH: <path to Xamarin.Android>

  SIGNING_VM_NAME: VSEng-MicroBuildVS2019
  SIGNING_TYPE: Test
  SIGNING_TEAM_NAME: Xamarin
  SIGNING_ARTIFACT_NAME: nuget

resources:
  repositories:
    - repository: internal-templates
      type: github
      name: xamarin/yaml-templates
      endpoint: xamarin
    - repository: components
      type: github
      name: xamarin/XamarinComponents
      endpoint: xamarin

jobs:
 - job: test_sign
   pool:
     name: $(SIGNING_VM_NAME)
     demands: 
       - msbuild
   steps:
     - checkout: none
     - task: DownloadBuildArtifacts@0
       displayName: 'Download Unsigned Artifacts'
       inputs:
         buildType: 'specific'
         project: '$(System.TeamProjectId)'
         pipeline: '$(System.DefinitionId)'
         buildVersionToDownload: 'specific'
         buildId: 4050789 # $(Build.BuildId)
         downloadType: 'single'
         artifactName: '$(SIGNING_ARTIFACT_NAME)'
         downloadPath: 'unsigned'

     - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:
        - task: MicroBuildSigningPlugin@2
          displayName: 'Prepare Signing Tools'
          inputs:
            signType: '$(SIGNING_TYPE)'
          env:
            TeamName: '$(SIGNING_TEAM_NAME)'

        - powershell: |
            gci env:* | sort-object name| select Name
            dir $env:MICROBUILDPLUGINDIRECTORY
            # <Import Project="$(MicroBuildPluginDirectory)\MicroBuild.Plugins.*\**\build\MicroBuild.Plugins.*.targets" />

        - powershell: |
            $downloader = New-Object System.Net.WebClient
            $downloader.Headers["Authorization"] = 'token $(Github.Token)'
            $downloader.DownloadFile(
              "https://raw.githubusercontent.com/xamarin/yaml-templates/mattleibow/v2-sign-artifacts/sign-artifacts/steps/v2-SignFiles.proj",
              "SignFiles.proj")
            $downloader.DownloadFile(
              "https://raw.githubusercontent.com/xamarin/yaml-templates/mattleibow/v2-sign-artifacts/sign-artifacts/steps/v2-ExtractNupkgs.ps1",
              "ExtractNupkgs.ps1")
          displayName: 'Download Signing Scripts'

        - powershell: .\ExtractNupkgs.ps1 -SourceDir "unsigned" -DestinationDir "working\extracted"
          displayName: 'Extract NuGet Packages'

        - task: MSBuild@1
          displayName: 'Sign Package Contents'
          inputs:
            solution: SignFiles.proj
            msbuildArguments: /t:SignFiles /p:SignType=$(SIGNING_TYPE) /p:MicroBuildPluginDirectory=$(MicroBuildOverridePluginDirectory) /p:WorkingDir="working\extracted"

        - task: NuGetCommand@2
          displayName: 'Repack NuGet Packages'
          inputs:
            command: 'pack'
            packagesToPack: 'working\extracted\*\*.nuspec'
            packDestination: 'working\packed'

        - task: MSBuild@1
          displayName: 'Sign NuGet Packages'
          inputs:
            solution: SignFiles.proj
            msbuildArguments: /t:SignFiles /p:SignType=$(SIGNING_TYPE) /p:MicroBuildPluginDirectory=$(MicroBuildOverridePluginDirectory) /p:WorkingDir="working\packed"

        - task: NuGetCommand@2
          displayName: 'Verify NuGet Packages'
          inputs:
            command: 'custom'
            arguments: 'verify -All working\packed\*.nupkg'

        - task: CopyFiles@2
          displayName: 'Copy Signed Output'
          inputs:
            sourceFolder: 'working\packed'
            targetFolder: 'signed'

        - task: MicroBuildCleanup@1
          displayName: 'Clean Up Signing Tools'
          env:
            TeamName: '$(SIGNING_TEAM_NAME)'

        - task: PublishBuildArtifacts@1
          inputs:
            pathToPublish: 'signed'
            artifactName: 'nuget-signed'
