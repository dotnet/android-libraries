#nullable enable
AndroidX.Navigation.ActivityKt
AndroidX.Navigation.ActivityNavArgsLazyKt
AndroidX.Navigation.ActivityNavigator
AndroidX.Navigation.ActivityNavigator.ActivityNavigator(Android.Content.Context! context) -> void
AndroidX.Navigation.ActivityNavigator.ActivityNavigator(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Navigation.ActivityNavigator.Companion
AndroidX.Navigation.ActivityNavigator.Companion.ApplyPopAnimationsToPendingTransition(Android.App.Activity! activity) -> void
AndroidX.Navigation.ActivityNavigator.Context.get -> Android.Content.Context!
AndroidX.Navigation.ActivityNavigator.Destination
AndroidX.Navigation.ActivityNavigator.Destination.Action.get -> string?
AndroidX.Navigation.ActivityNavigator.Destination.Component.get -> Android.Content.ComponentName?
AndroidX.Navigation.ActivityNavigator.Destination.Data.get -> Android.Net.Uri?
AndroidX.Navigation.ActivityNavigator.Destination.DataPattern.get -> string?
AndroidX.Navigation.ActivityNavigator.Destination.Destination(AndroidX.Navigation.Navigator! activityNavigator) -> void
AndroidX.Navigation.ActivityNavigator.Destination.Destination(AndroidX.Navigation.NavigatorProvider! navigatorProvider) -> void
AndroidX.Navigation.ActivityNavigator.Destination.Destination(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Navigation.ActivityNavigator.Destination.Intent.get -> Android.Content.Intent?
AndroidX.Navigation.ActivityNavigator.Destination.SetAction(string? action) -> AndroidX.Navigation.ActivityNavigator.Destination!
AndroidX.Navigation.ActivityNavigator.Destination.SetComponentName(Android.Content.ComponentName? name) -> AndroidX.Navigation.ActivityNavigator.Destination!
AndroidX.Navigation.ActivityNavigator.Destination.SetData(Android.Net.Uri? data) -> AndroidX.Navigation.ActivityNavigator.Destination!
AndroidX.Navigation.ActivityNavigator.Destination.SetDataPattern(string? dataPattern) -> AndroidX.Navigation.ActivityNavigator.Destination!
AndroidX.Navigation.ActivityNavigator.Destination.SetIntent(Android.Content.Intent? intent) -> AndroidX.Navigation.ActivityNavigator.Destination!
AndroidX.Navigation.ActivityNavigator.Destination.SetTargetPackage(string? packageName) -> AndroidX.Navigation.ActivityNavigator.Destination!
AndroidX.Navigation.ActivityNavigator.Destination.TargetPackage.get -> string?
AndroidX.Navigation.ActivityNavigator.Extras
AndroidX.Navigation.ActivityNavigator.Extras.ActivityOptions.get -> AndroidX.Core.App.ActivityOptionsCompat?
AndroidX.Navigation.ActivityNavigator.Extras.Builder
AndroidX.Navigation.ActivityNavigator.Extras.Builder.AddFlags(int flags) -> AndroidX.Navigation.ActivityNavigator.Extras.Builder!
AndroidX.Navigation.ActivityNavigator.Extras.Builder.Build() -> AndroidX.Navigation.ActivityNavigator.Extras!
AndroidX.Navigation.ActivityNavigator.Extras.Builder.Builder() -> void
AndroidX.Navigation.ActivityNavigator.Extras.Builder.SetActivityOptions(AndroidX.Core.App.ActivityOptionsCompat! activityOptions) -> AndroidX.Navigation.ActivityNavigator.Extras.Builder!
AndroidX.Navigation.ActivityNavigator.Extras.Flags.get -> int
AndroidX.Navigation.ActivityNavigatorDestinationBuilder
AndroidX.Navigation.ActivityNavigatorDestinationBuilder.Action.get -> string?
AndroidX.Navigation.ActivityNavigatorDestinationBuilder.Action.set -> void
AndroidX.Navigation.ActivityNavigatorDestinationBuilder.ActivityClass.get -> Kotlin.Reflect.IKClass?
AndroidX.Navigation.ActivityNavigatorDestinationBuilder.ActivityClass.set -> void
AndroidX.Navigation.ActivityNavigatorDestinationBuilder.ActivityNavigatorDestinationBuilder(AndroidX.Navigation.ActivityNavigator! navigator, Kotlin.Reflect.IKClass! route, System.Collections.Generic.IDictionary<Kotlin.Reflect.IKType!, AndroidX.Navigation.NavType!>! typeMap) -> void
AndroidX.Navigation.ActivityNavigatorDestinationBuilder.ActivityNavigatorDestinationBuilder(AndroidX.Navigation.ActivityNavigator! navigator, int id) -> void
AndroidX.Navigation.ActivityNavigatorDestinationBuilder.ActivityNavigatorDestinationBuilder(AndroidX.Navigation.ActivityNavigator! navigator, string! route) -> void
AndroidX.Navigation.ActivityNavigatorDestinationBuilder.Data.get -> Android.Net.Uri?
AndroidX.Navigation.ActivityNavigatorDestinationBuilder.Data.set -> void
AndroidX.Navigation.ActivityNavigatorDestinationBuilder.DataPattern.get -> string?
AndroidX.Navigation.ActivityNavigatorDestinationBuilder.DataPattern.set -> void
AndroidX.Navigation.ActivityNavigatorDestinationBuilder.TargetPackage.get -> string?
AndroidX.Navigation.ActivityNavigatorDestinationBuilder.TargetPackage.set -> void
AndroidX.Navigation.ActivityNavigatorDestinationBuilderKt
AndroidX.Navigation.ActivityNavigatorExtrasKt
AndroidX.Navigation.INavDeepLinkSaveStateControl
AndroidX.Navigation.INavHost
AndroidX.Navigation.INavHost.NavController.get -> AndroidX.Navigation.NavController!
AndroidX.Navigation.Internal.Utils_jvmCommonKt
AndroidX.Navigation.NavController
AndroidX.Navigation.NavController.ClearBackStack(Java.Lang.Object! route) -> bool
AndroidX.Navigation.NavController.ClearBackStack(Kotlin.Reflect.IKClass! route) -> bool
AndroidX.Navigation.NavController.ClearBackStack(int destinationId) -> bool
AndroidX.Navigation.NavController.ClearBackStack(string! route) -> bool
AndroidX.Navigation.NavController.Companion
AndroidX.Navigation.NavController.Companion.EnableDeepLinkSaveState(bool saveState) -> void
AndroidX.Navigation.NavController.Context.get -> Android.Content.Context!
AndroidX.Navigation.NavController.CurrentBackStack.get -> Xamarin.KotlinX.Coroutines.Flow.IStateFlow!
AndroidX.Navigation.NavController.CurrentBackStackEntryFlow.get -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
AndroidX.Navigation.NavController.DestinationChanged -> System.EventHandler<AndroidX.Navigation.NavController.DestinationChangedEventArgs!>!
AndroidX.Navigation.NavController.DestinationChangedEventArgs
AndroidX.Navigation.NavController.DestinationChangedEventArgs.Arguments.get -> Android.OS.Bundle?
AndroidX.Navigation.NavController.DestinationChangedEventArgs.Controller.get -> AndroidX.Navigation.NavController!
AndroidX.Navigation.NavController.DestinationChangedEventArgs.Destination.get -> AndroidX.Navigation.NavDestination!
AndroidX.Navigation.NavController.DestinationChangedEventArgs.DestinationChangedEventArgs(AndroidX.Navigation.NavController! controller, AndroidX.Navigation.NavDestination! destination, Android.OS.Bundle? arguments) -> void
AndroidX.Navigation.NavController.FindDestination(int destinationId, AndroidX.Navigation.NavDestination? matchingDest) -> AndroidX.Navigation.NavDestination?
AndroidX.Navigation.NavController.FindDestination(string! route) -> AndroidX.Navigation.NavDestination?
AndroidX.Navigation.NavController.FindDestinationComprehensive(AndroidX.Navigation.NavDestination! _this_findDestinationComprehensive, int destinationId, bool searchChildren, AndroidX.Navigation.NavDestination? matchingDest) -> AndroidX.Navigation.NavDestination?
AndroidX.Navigation.NavController.GetBackStackEntry(Java.Lang.Object! route) -> AndroidX.Navigation.NavBackStackEntry!
AndroidX.Navigation.NavController.GetBackStackEntry(Kotlin.Reflect.IKClass! route) -> AndroidX.Navigation.NavBackStackEntry!
AndroidX.Navigation.NavController.GetBackStackEntry(string! route) -> AndroidX.Navigation.NavBackStackEntry!
AndroidX.Navigation.NavController.HandleDeepLink(AndroidX.Navigation.NavDeepLinkRequest! request) -> bool
AndroidX.Navigation.NavController.IOnDestinationChangedListener
AndroidX.Navigation.NavController.IOnDestinationChangedListener.OnDestinationChanged(AndroidX.Navigation.NavController! controller, AndroidX.Navigation.NavDestination! destination, Android.OS.Bundle? arguments) -> void
AndroidX.Navigation.NavController.NavController(Android.Content.Context! context) -> void
AndroidX.Navigation.NavController.NavController(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Navigation.NavController.Navigate(Java.Lang.Object! route) -> void
AndroidX.Navigation.NavController.Navigate(Java.Lang.Object! route, AndroidX.Navigation.NavOptions? navOptions) -> void
AndroidX.Navigation.NavController.Navigate(Java.Lang.Object! route, AndroidX.Navigation.NavOptions? navOptions, AndroidX.Navigation.Navigator.IExtras? navigatorExtras) -> void
AndroidX.Navigation.NavController.Navigate(Java.Lang.Object! route, Kotlin.Jvm.Functions.IFunction1! builder) -> void
AndroidX.Navigation.NavController.Navigate(string! route) -> void
AndroidX.Navigation.NavController.Navigate(string! route, AndroidX.Navigation.NavOptions? navOptions) -> void
AndroidX.Navigation.NavController.Navigate(string! route, AndroidX.Navigation.NavOptions? navOptions, AndroidX.Navigation.Navigator.IExtras? navigatorExtras) -> void
AndroidX.Navigation.NavController.Navigate(string! route, Kotlin.Jvm.Functions.IFunction1! builder) -> void
AndroidX.Navigation.NavController.PopBackStack(Java.Lang.Object! route, bool inclusive) -> bool
AndroidX.Navigation.NavController.PopBackStack(Java.Lang.Object! route, bool inclusive, bool saveState) -> bool
AndroidX.Navigation.NavController.PopBackStack(Kotlin.Reflect.IKClass! route, bool inclusive) -> bool
AndroidX.Navigation.NavController.PopBackStack(Kotlin.Reflect.IKClass! route, bool inclusive, bool saveState) -> bool
AndroidX.Navigation.NavController.PopBackStack(string! route, bool inclusive) -> bool
AndroidX.Navigation.NavController.PopBackStack(string! route, bool inclusive, bool saveState) -> bool
AndroidX.Navigation.NavController.VisibleEntries.get -> Xamarin.KotlinX.Coroutines.Flow.IStateFlow!
AndroidX.Navigation.NavControllerKt
AndroidX.Navigation.NavControllerViewModelKt
AndroidX.Navigation.NavDeepLinkBuilder
AndroidX.Navigation.NavDeepLinkBuilder.AddDestination(int destId) -> AndroidX.Navigation.NavDeepLinkBuilder!
AndroidX.Navigation.NavDeepLinkBuilder.AddDestination(int destId, Android.OS.Bundle? args) -> AndroidX.Navigation.NavDeepLinkBuilder!
AndroidX.Navigation.NavDeepLinkBuilder.AddDestination(string! route) -> AndroidX.Navigation.NavDeepLinkBuilder!
AndroidX.Navigation.NavDeepLinkBuilder.AddDestination(string! route, Android.OS.Bundle? args) -> AndroidX.Navigation.NavDeepLinkBuilder!
AndroidX.Navigation.NavDeepLinkBuilder.CreatePendingIntent() -> Android.App.PendingIntent!
AndroidX.Navigation.NavDeepLinkBuilder.CreateTaskStackBuilder() -> AndroidX.Core.App.TaskStackBuilder!
AndroidX.Navigation.NavDeepLinkBuilder.NavDeepLinkBuilder(Android.Content.Context! context) -> void
AndroidX.Navigation.NavDeepLinkBuilder.SetArguments(Android.OS.Bundle? args) -> AndroidX.Navigation.NavDeepLinkBuilder!
AndroidX.Navigation.NavDeepLinkBuilder.SetComponentName(Android.Content.ComponentName! componentName) -> AndroidX.Navigation.NavDeepLinkBuilder!
AndroidX.Navigation.NavDeepLinkBuilder.SetComponentName(Java.Lang.Class! activityClass) -> AndroidX.Navigation.NavDeepLinkBuilder!
AndroidX.Navigation.NavDeepLinkBuilder.SetDestination(int destId) -> AndroidX.Navigation.NavDeepLinkBuilder!
AndroidX.Navigation.NavDeepLinkBuilder.SetDestination(int destId, Android.OS.Bundle? args) -> AndroidX.Navigation.NavDeepLinkBuilder!
AndroidX.Navigation.NavDeepLinkBuilder.SetDestination(string! destRoute) -> AndroidX.Navigation.NavDeepLinkBuilder!
AndroidX.Navigation.NavDeepLinkBuilder.SetDestination(string! destRoute, Android.OS.Bundle? args) -> AndroidX.Navigation.NavDeepLinkBuilder!
AndroidX.Navigation.NavDeepLinkBuilder.SetGraph(AndroidX.Navigation.NavGraph! navGraph) -> AndroidX.Navigation.NavDeepLinkBuilder!
AndroidX.Navigation.NavDeepLinkBuilder.SetGraph(int navGraphId) -> AndroidX.Navigation.NavDeepLinkBuilder!
AndroidX.Navigation.NavDeepLinkSaveStateControlAttribute
AndroidX.Navigation.NavDeepLinkSaveStateControlAttribute.NavDeepLinkSaveStateControlAttribute() -> void
AndroidX.Navigation.NavHostController
AndroidX.Navigation.NavHostController.NavHostController(Android.Content.Context! context) -> void
AndroidX.Navigation.NavHostController.NavHostController(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Navigation.NavHostKt
AndroidX.Navigation.NavInflater
AndroidX.Navigation.NavInflater.Companion
AndroidX.Navigation.NavInflater.Inflate(int graphResId) -> AndroidX.Navigation.NavGraph!
AndroidX.Navigation.NavInflater.NavInflater(Android.Content.Context! context, AndroidX.Navigation.NavigatorProvider! navigatorProvider) -> void
AndroidX.Navigation.Navigation
AndroidX.Navigation.ViewKt
const AndroidX.Navigation.NavController.KeyDeepLinkArgs = "android-support-nav:controller:deepLinkArgs" -> string!
const AndroidX.Navigation.NavController.KeyDeepLinkExtras = "android-support-nav:controller:deepLinkExtras" -> string!
const AndroidX.Navigation.NavController.KeyDeepLinkHandled = "android-support-nav:controller:deepLinkHandled" -> string!
const AndroidX.Navigation.NavController.KeyDeepLinkIds = "android-support-nav:controller:deepLinkIds" -> string!
const AndroidX.Navigation.NavController.KeyDeepLinkIntent = "android-support-nav:controller:deepLinkIntent" -> string!
const AndroidX.Navigation.NavInflater.ApplicationIdPlaceholder = "${applicationId}" -> string!
override AndroidX.Navigation.ActivityKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Navigation.ActivityNavArgsLazyKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Navigation.ActivityNavigator.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Navigation.ActivityNavigator.CreateDestination() -> Java.Lang.Object!
override AndroidX.Navigation.ActivityNavigator.Destination.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Navigation.ActivityNavigator.Destination.ThresholdClass.get -> nint
override AndroidX.Navigation.ActivityNavigator.Destination.ThresholdType.get -> System.Type!
override AndroidX.Navigation.ActivityNavigator.Extras.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Navigation.ActivityNavigator.Extras.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Navigation.ActivityNavigator.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Navigation.ActivityNavigator.ThresholdClass.get -> nint
override AndroidX.Navigation.ActivityNavigator.ThresholdType.get -> System.Type!
override AndroidX.Navigation.ActivityNavigatorDestinationBuilder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Navigation.ActivityNavigatorDestinationBuilderKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Navigation.ActivityNavigatorExtrasKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Navigation.Internal.Utils_jvmCommonKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Navigation.NavController.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Navigation.NavController.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Navigation.NavController.ThresholdClass.get -> nint
override AndroidX.Navigation.NavController.ThresholdType.get -> System.Type!
override AndroidX.Navigation.NavControllerKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Navigation.NavControllerViewModelKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Navigation.NavDeepLinkBuilder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Navigation.NavHostController.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Navigation.NavHostController.ThresholdClass.get -> nint
override AndroidX.Navigation.NavHostController.ThresholdType.get -> System.Type!
override AndroidX.Navigation.NavHostKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Navigation.NavInflater.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Navigation.NavInflater.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Navigation.Navigation.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Navigation.ViewKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override sealed AndroidX.Navigation.NavHostController.EnableOnBackPressed(bool enabled) -> void
override sealed AndroidX.Navigation.NavHostController.SetLifecycleOwner(AndroidX.Lifecycle.ILifecycleOwner! owner) -> void
override sealed AndroidX.Navigation.NavHostController.SetOnBackPressedDispatcher(AndroidX.Activity.OnBackPressedDispatcher! dispatcher) -> void
override sealed AndroidX.Navigation.NavHostController.SetViewModelStore(AndroidX.Lifecycle.ViewModelStore! viewModelStore) -> void
static AndroidX.Navigation.ActivityKt.FindNavController(Android.App.Activity! _this_findNavController, int viewId) -> AndroidX.Navigation.NavController!
static AndroidX.Navigation.ActivityNavigator.ApplyPopAnimationsToPendingTransition(Android.App.Activity! activity) -> void
static AndroidX.Navigation.ActivityNavigatorDestinationBuilderKt.Activity(AndroidX.Navigation.NavGraphBuilder! _this_activity, int id, Kotlin.Jvm.Functions.IFunction1! builder) -> void
static AndroidX.Navigation.ActivityNavigatorDestinationBuilderKt.Activity(AndroidX.Navigation.NavGraphBuilder! _this_activity, string! route, Kotlin.Jvm.Functions.IFunction1! builder) -> void
static AndroidX.Navigation.ActivityNavigatorExtrasKt.ActivityNavigatorExtras(AndroidX.Core.App.ActivityOptionsCompat? activityOptions, int flags) -> AndroidX.Navigation.ActivityNavigator.Extras!
static AndroidX.Navigation.NavController.EnableDeepLinkSaveState(bool saveState) -> void
static AndroidX.Navigation.NavControllerKt.CreateGraph(AndroidX.Navigation.NavController! _this_createGraph, Java.Lang.Object! startDestination, Kotlin.Reflect.IKClass? route, System.Collections.Generic.IDictionary<Kotlin.Reflect.IKType!, AndroidX.Navigation.NavType!>! typeMap, Kotlin.Jvm.Functions.IFunction1! builder) -> AndroidX.Navigation.NavGraph!
static AndroidX.Navigation.NavControllerKt.CreateGraph(AndroidX.Navigation.NavController! _this_createGraph, Kotlin.Reflect.IKClass! startDestination, Kotlin.Reflect.IKClass? route, System.Collections.Generic.IDictionary<Kotlin.Reflect.IKType!, AndroidX.Navigation.NavType!>! typeMap, Kotlin.Jvm.Functions.IFunction1! builder) -> AndroidX.Navigation.NavGraph!
static AndroidX.Navigation.NavControllerKt.CreateGraph(AndroidX.Navigation.NavController! _this_createGraph, int id, int startDestination, Kotlin.Jvm.Functions.IFunction1! builder) -> AndroidX.Navigation.NavGraph!
static AndroidX.Navigation.NavControllerKt.CreateGraph(AndroidX.Navigation.NavController! _this_createGraph, string! startDestination, string? route, Kotlin.Jvm.Functions.IFunction1! builder) -> AndroidX.Navigation.NavGraph!
static AndroidX.Navigation.NavControllerKt.NavDeepLinkRequest(Android.Content.Intent! intent) -> AndroidX.Navigation.NavDeepLinkRequest!
static AndroidX.Navigation.NavHostKt.CreateGraph(AndroidX.Navigation.INavHost! _this_createGraph, Java.Lang.Object! startDestination, Kotlin.Reflect.IKClass? route, System.Collections.Generic.IDictionary<Kotlin.Reflect.IKType!, AndroidX.Navigation.NavType!>! typeMap, Kotlin.Jvm.Functions.IFunction1! builder) -> AndroidX.Navigation.NavGraph!
static AndroidX.Navigation.NavHostKt.CreateGraph(AndroidX.Navigation.INavHost! _this_createGraph, Kotlin.Reflect.IKClass! startDestination, Kotlin.Reflect.IKClass? route, System.Collections.Generic.IDictionary<Kotlin.Reflect.IKType!, AndroidX.Navigation.NavType!>! typeMap, Kotlin.Jvm.Functions.IFunction1! builder) -> AndroidX.Navigation.NavGraph!
static AndroidX.Navigation.NavHostKt.CreateGraph(AndroidX.Navigation.INavHost! _this_createGraph, int id, int startDestination, Kotlin.Jvm.Functions.IFunction1! builder) -> AndroidX.Navigation.NavGraph!
static AndroidX.Navigation.NavHostKt.CreateGraph(AndroidX.Navigation.INavHost! _this_createGraph, string! startDestination, string? route, Kotlin.Jvm.Functions.IFunction1! builder) -> AndroidX.Navigation.NavGraph!
static AndroidX.Navigation.Navigation.CreateNavigateOnClickListener(AndroidX.Navigation.INavDirections! directions) -> Android.Views.View.IOnClickListener!
static AndroidX.Navigation.Navigation.CreateNavigateOnClickListener(int resId) -> Android.Views.View.IOnClickListener!
static AndroidX.Navigation.Navigation.CreateNavigateOnClickListener(int resId, Android.OS.Bundle? args) -> Android.Views.View.IOnClickListener!
static AndroidX.Navigation.Navigation.FindNavController(Android.App.Activity! activity, int viewId) -> AndroidX.Navigation.NavController!
static AndroidX.Navigation.Navigation.FindNavController(Android.Views.View! view) -> AndroidX.Navigation.NavController!
static AndroidX.Navigation.Navigation.Instance.get -> AndroidX.Navigation.Navigation!
static AndroidX.Navigation.Navigation.SetViewNavController(Android.Views.View! view, AndroidX.Navigation.NavController? controller) -> void
static AndroidX.Navigation.ViewKt.FindNavController(Android.Views.View! _this_findNavController) -> AndroidX.Navigation.NavController!
virtual AndroidX.Navigation.ActivityNavigator.Navigate(AndroidX.Navigation.ActivityNavigator.Destination! destination, Android.OS.Bundle? args, AndroidX.Navigation.NavOptions? navOptions, AndroidX.Navigation.Navigator.IExtras? navigatorExtras) -> AndroidX.Navigation.NavDestination?
virtual AndroidX.Navigation.NavController.AddOnDestinationChangedListener(AndroidX.Navigation.NavController.IOnDestinationChangedListener! listener) -> void
virtual AndroidX.Navigation.NavController.CreateDeepLink() -> AndroidX.Navigation.NavDeepLinkBuilder!
virtual AndroidX.Navigation.NavController.CurrentBackStackEntry.get -> AndroidX.Navigation.NavBackStackEntry?
virtual AndroidX.Navigation.NavController.CurrentDestination.get -> AndroidX.Navigation.NavDestination?
virtual AndroidX.Navigation.NavController.EnableOnBackPressed(bool enabled) -> void
virtual AndroidX.Navigation.NavController.GetBackStackEntry(int destinationId) -> AndroidX.Navigation.NavBackStackEntry!
virtual AndroidX.Navigation.NavController.GetViewModelStoreOwner(int navGraphId) -> AndroidX.Lifecycle.IViewModelStoreOwner!
virtual AndroidX.Navigation.NavController.Graph.get -> AndroidX.Navigation.NavGraph!
virtual AndroidX.Navigation.NavController.Graph.set -> void
virtual AndroidX.Navigation.NavController.HandleDeepLink(Android.Content.Intent? intent) -> bool
virtual AndroidX.Navigation.NavController.NavInflater.get -> AndroidX.Navigation.NavInflater!
virtual AndroidX.Navigation.NavController.Navigate(Android.Net.Uri! deepLink) -> void
virtual AndroidX.Navigation.NavController.Navigate(Android.Net.Uri! deepLink, AndroidX.Navigation.NavOptions? navOptions) -> void
virtual AndroidX.Navigation.NavController.Navigate(Android.Net.Uri! deepLink, AndroidX.Navigation.NavOptions? navOptions, AndroidX.Navigation.Navigator.IExtras? navigatorExtras) -> void
virtual AndroidX.Navigation.NavController.Navigate(AndroidX.Navigation.INavDirections! directions) -> void
virtual AndroidX.Navigation.NavController.Navigate(AndroidX.Navigation.INavDirections! directions, AndroidX.Navigation.NavOptions? navOptions) -> void
virtual AndroidX.Navigation.NavController.Navigate(AndroidX.Navigation.INavDirections! directions, AndroidX.Navigation.Navigator.IExtras! navigatorExtras) -> void
virtual AndroidX.Navigation.NavController.Navigate(AndroidX.Navigation.NavDeepLinkRequest! request) -> void
virtual AndroidX.Navigation.NavController.Navigate(AndroidX.Navigation.NavDeepLinkRequest! request, AndroidX.Navigation.NavOptions? navOptions) -> void
virtual AndroidX.Navigation.NavController.Navigate(AndroidX.Navigation.NavDeepLinkRequest! request, AndroidX.Navigation.NavOptions? navOptions, AndroidX.Navigation.Navigator.IExtras? navigatorExtras) -> void
virtual AndroidX.Navigation.NavController.Navigate(int resId) -> void
virtual AndroidX.Navigation.NavController.Navigate(int resId, Android.OS.Bundle? args) -> void
virtual AndroidX.Navigation.NavController.Navigate(int resId, Android.OS.Bundle? args, AndroidX.Navigation.NavOptions? navOptions) -> void
virtual AndroidX.Navigation.NavController.Navigate(int resId, Android.OS.Bundle? args, AndroidX.Navigation.NavOptions? navOptions, AndroidX.Navigation.Navigator.IExtras? navigatorExtras) -> void
virtual AndroidX.Navigation.NavController.NavigateUp() -> bool
virtual AndroidX.Navigation.NavController.NavigatorProvider.get -> AndroidX.Navigation.NavigatorProvider!
virtual AndroidX.Navigation.NavController.NavigatorProvider.set -> void
virtual AndroidX.Navigation.NavController.PopBackStack() -> bool
virtual AndroidX.Navigation.NavController.PopBackStack(int destinationId, bool inclusive) -> bool
virtual AndroidX.Navigation.NavController.PopBackStack(int destinationId, bool inclusive, bool saveState) -> bool
virtual AndroidX.Navigation.NavController.PreviousBackStackEntry.get -> AndroidX.Navigation.NavBackStackEntry?
virtual AndroidX.Navigation.NavController.RemoveOnDestinationChangedListener(AndroidX.Navigation.NavController.IOnDestinationChangedListener! listener) -> void
virtual AndroidX.Navigation.NavController.RestoreState(Android.OS.Bundle? navState) -> void
virtual AndroidX.Navigation.NavController.SaveState() -> Android.OS.Bundle?
virtual AndroidX.Navigation.NavController.SetGraph(AndroidX.Navigation.NavGraph! graph, Android.OS.Bundle? startDestinationArgs) -> void
virtual AndroidX.Navigation.NavController.SetGraph(int graphResId) -> void
virtual AndroidX.Navigation.NavController.SetGraph(int graphResId, Android.OS.Bundle? startDestinationArgs) -> void
virtual AndroidX.Navigation.NavController.SetLifecycleOwner(AndroidX.Lifecycle.ILifecycleOwner! owner) -> void
virtual AndroidX.Navigation.NavController.SetOnBackPressedDispatcher(AndroidX.Activity.OnBackPressedDispatcher! dispatcher) -> void
virtual AndroidX.Navigation.NavController.SetViewModelStore(AndroidX.Lifecycle.ViewModelStore! viewModelStore) -> void
