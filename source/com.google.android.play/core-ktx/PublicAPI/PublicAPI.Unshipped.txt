#nullable enable
Xamarin.Google.Android.Play.Core.Ktx.AppUpdateManagerKtxKt
Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult
Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.AppUpdateResult(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.Available
Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.Available.Available(Xamarin.Google.Android.Play.Core.AppUpdate.IAppUpdateManager! appUpdateManager, Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo! updateInfo) -> void
Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.Available.StartFlexibleUpdate(Android.App.Activity! activity, int requestCode) -> bool
Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.Available.StartFlexibleUpdate(AndroidX.Fragment.App.Fragment! fragment, int requestCode) -> bool
Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.Available.StartImmediateUpdate(Android.App.Activity! activity, int requestCode) -> bool
Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.Available.StartImmediateUpdate(AndroidX.Fragment.App.Fragment! fragment, int requestCode) -> bool
Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.Available.UpdateInfo.get -> Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo!
Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.Downloaded
Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.Downloaded.CompleteUpdate(Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.Downloaded.Downloaded(Xamarin.Google.Android.Play.Core.AppUpdate.IAppUpdateManager! appUpdateManager) -> void
Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.InProgress
Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.InProgress.InProgress(Xamarin.Google.Android.Play.Core.Install.InstallState! installState) -> void
Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.InProgress.InstallState.get -> Xamarin.Google.Android.Play.Core.Install.InstallState!
Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.NotAvailable
Xamarin.Google.Android.Play.Core.Ktx.AssetPackManagerKtxKt
Xamarin.Google.Android.Play.Core.Ktx.BuildConfig
Xamarin.Google.Android.Play.Core.Ktx.BuildConfig.BuildConfig() -> void
Xamarin.Google.Android.Play.Core.Ktx.ReviewManagerKtxKt
Xamarin.Google.Android.Play.Core.Ktx.SplitInstallManagerKtxKt
Xamarin.Google.Android.Play.Core.Ktx.TaskUtilsKt
const Xamarin.Google.Android.Play.Core.Ktx.BuildConfig.BuildType = "release" -> string!
const Xamarin.Google.Android.Play.Core.Ktx.BuildConfig.Debug = false -> bool
const Xamarin.Google.Android.Play.Core.Ktx.BuildConfig.LibraryPackageName = "com.google.android.play.core.ktx" -> string!
const Xamarin.Google.Android.Play.Core.Ktx.BuildConfig.VersionCode = -1 -> int
const Xamarin.Google.Android.Play.Core.Ktx.BuildConfig.VersionName = "" -> string!
override Xamarin.Google.Android.Play.Core.Ktx.AppUpdateManagerKtxKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.Available.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.Downloaded.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.InProgress.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.NotAvailable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.Ktx.AssetPackManagerKtxKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.Ktx.BuildConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.Ktx.ReviewManagerKtxKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.Ktx.SplitInstallManagerKtxKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.Ktx.TaskUtilsKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
static Xamarin.Google.Android.Play.Core.Ktx.AppUpdateManagerKtxKt.GetBytesDownloaded(Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo! obj) -> long
static Xamarin.Google.Android.Play.Core.Ktx.AppUpdateManagerKtxKt.GetBytesDownloaded(Xamarin.Google.Android.Play.Core.Install.InstallState! obj) -> long
static Xamarin.Google.Android.Play.Core.Ktx.AppUpdateManagerKtxKt.GetClientVersionStalenessDays(Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo! obj) -> Java.Lang.Integer?
static Xamarin.Google.Android.Play.Core.Ktx.AppUpdateManagerKtxKt.GetHasTerminalStatus(Xamarin.Google.Android.Play.Core.Install.InstallState! obj) -> bool
static Xamarin.Google.Android.Play.Core.Ktx.AppUpdateManagerKtxKt.GetInstallErrorCode(Xamarin.Google.Android.Play.Core.Install.InstallState! obj) -> int
static Xamarin.Google.Android.Play.Core.Ktx.AppUpdateManagerKtxKt.GetInstallStatus(Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo! obj) -> int
static Xamarin.Google.Android.Play.Core.Ktx.AppUpdateManagerKtxKt.GetInstallStatus(Xamarin.Google.Android.Play.Core.Install.InstallState! obj) -> int
static Xamarin.Google.Android.Play.Core.Ktx.AppUpdateManagerKtxKt.GetPackageName(Xamarin.Google.Android.Play.Core.Install.InstallState! obj) -> string!
static Xamarin.Google.Android.Play.Core.Ktx.AppUpdateManagerKtxKt.GetTotalBytesToDownload(Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo! obj) -> long
static Xamarin.Google.Android.Play.Core.Ktx.AppUpdateManagerKtxKt.GetTotalBytesToDownload(Xamarin.Google.Android.Play.Core.Install.InstallState! obj) -> long
static Xamarin.Google.Android.Play.Core.Ktx.AppUpdateManagerKtxKt.GetUpdatePriority(Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo! obj) -> int
static Xamarin.Google.Android.Play.Core.Ktx.AppUpdateManagerKtxKt.IsFlexibleUpdateAllowed(Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo! obj) -> bool
static Xamarin.Google.Android.Play.Core.Ktx.AppUpdateManagerKtxKt.IsImmediateUpdateAllowed(Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo! obj) -> bool
static Xamarin.Google.Android.Play.Core.Ktx.AppUpdateManagerKtxKt.RequestAppUpdateInfo(Xamarin.Google.Android.Play.Core.AppUpdate.IAppUpdateManager! obj, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.Google.Android.Play.Core.Ktx.AppUpdateManagerKtxKt.RequestCompleteUpdate(Xamarin.Google.Android.Play.Core.AppUpdate.IAppUpdateManager! obj, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.Google.Android.Play.Core.Ktx.AppUpdateManagerKtxKt.RequestUpdateFlow(Xamarin.Google.Android.Play.Core.AppUpdate.IAppUpdateManager! obj) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.Google.Android.Play.Core.Ktx.AppUpdateManagerKtxKt.StartUpdateFlowForResult(Xamarin.Google.Android.Play.Core.AppUpdate.IAppUpdateManager! obj, Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo! appUpdateInfo, int appUpdateType, AndroidX.Fragment.App.Fragment! fragment, int requestCode) -> bool
static Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.NotAvailable.Instance.get -> Xamarin.Google.Android.Play.Core.Ktx.AppUpdateResult.NotAvailable?
static Xamarin.Google.Android.Play.Core.Ktx.AssetPackManagerKtxKt.GetAssetsPath(Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackLocation! obj) -> string?
static Xamarin.Google.Android.Play.Core.Ktx.AssetPackManagerKtxKt.GetBytesDownloaded(Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState! obj) -> long
static Xamarin.Google.Android.Play.Core.Ktx.AssetPackManagerKtxKt.GetErrorCode(Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState! obj) -> int
static Xamarin.Google.Android.Play.Core.Ktx.AssetPackManagerKtxKt.GetName(Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState! obj) -> string!
static Xamarin.Google.Android.Play.Core.Ktx.AssetPackManagerKtxKt.GetOffset(Xamarin.Google.Android.Play.Core.AssetPacks.AssetLocation! obj) -> long
static Xamarin.Google.Android.Play.Core.Ktx.AssetPackManagerKtxKt.GetPackStates(Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStates! obj) -> System.Collections.Generic.IDictionary<string!, Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState!>!
static Xamarin.Google.Android.Play.Core.Ktx.AssetPackManagerKtxKt.GetPackStorageMethod(Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackLocation! obj) -> int
static Xamarin.Google.Android.Play.Core.Ktx.AssetPackManagerKtxKt.GetPath(Xamarin.Google.Android.Play.Core.AssetPacks.AssetLocation! obj) -> string!
static Xamarin.Google.Android.Play.Core.Ktx.AssetPackManagerKtxKt.GetPath(Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackLocation! obj) -> string?
static Xamarin.Google.Android.Play.Core.Ktx.AssetPackManagerKtxKt.GetSize(Xamarin.Google.Android.Play.Core.AssetPacks.AssetLocation! obj) -> long
static Xamarin.Google.Android.Play.Core.Ktx.AssetPackManagerKtxKt.GetStatus(Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState! obj) -> int
static Xamarin.Google.Android.Play.Core.Ktx.AssetPackManagerKtxKt.GetTotalBytes(Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStates! obj) -> long
static Xamarin.Google.Android.Play.Core.Ktx.AssetPackManagerKtxKt.GetTotalBytesToDownload(Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState! obj) -> long
static Xamarin.Google.Android.Play.Core.Ktx.AssetPackManagerKtxKt.GetTransferProgressPercentage(Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState! obj) -> int
static Xamarin.Google.Android.Play.Core.Ktx.AssetPackManagerKtxKt.RequestCellularDataConfirmation(Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackManager! obj, Android.App.Activity! activity, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.Google.Android.Play.Core.Ktx.AssetPackManagerKtxKt.RequestFetch(Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackManager! obj, System.Collections.Generic.IList<string!>! packs, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.Google.Android.Play.Core.Ktx.AssetPackManagerKtxKt.RequestPackStates(Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackManager! obj, System.Collections.Generic.IList<string!>! packs, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.Google.Android.Play.Core.Ktx.AssetPackManagerKtxKt.RequestProgressFlow(Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackManager! obj, System.Collections.Generic.IList<string!>! packs) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.Google.Android.Play.Core.Ktx.AssetPackManagerKtxKt.RequestRemovePack(Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackManager! obj, string! packName, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.Google.Android.Play.Core.Ktx.ReviewManagerKtxKt.LaunchReview(Xamarin.Google.Android.Play.Core.Review.IReviewManager! obj, Android.App.Activity! activity, Xamarin.Google.Android.Play.Core.Review.ReviewInfo! reviewInfo, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.Google.Android.Play.Core.Ktx.ReviewManagerKtxKt.RequestReview(Xamarin.Google.Android.Play.Core.Review.IReviewManager! obj, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.Google.Android.Play.Core.Ktx.SplitInstallManagerKtxKt.GetBytesDownloaded(Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState! obj) -> long
static Xamarin.Google.Android.Play.Core.Ktx.SplitInstallManagerKtxKt.GetErrorCode(Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState! obj) -> int
static Xamarin.Google.Android.Play.Core.Ktx.SplitInstallManagerKtxKt.GetHasTerminalStatus(Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState! obj) -> bool
static Xamarin.Google.Android.Play.Core.Ktx.SplitInstallManagerKtxKt.GetLanguages(Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState! obj) -> System.Collections.Generic.IList<string!>!
static Xamarin.Google.Android.Play.Core.Ktx.SplitInstallManagerKtxKt.GetModuleNames(Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState! obj) -> System.Collections.Generic.IList<string!>!
static Xamarin.Google.Android.Play.Core.Ktx.SplitInstallManagerKtxKt.GetSessionId(Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState! obj) -> int
static Xamarin.Google.Android.Play.Core.Ktx.SplitInstallManagerKtxKt.GetStatus(Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState! obj) -> int
static Xamarin.Google.Android.Play.Core.Ktx.SplitInstallManagerKtxKt.GetTotalBytesToDownload(Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState! obj) -> long
static Xamarin.Google.Android.Play.Core.Ktx.SplitInstallManagerKtxKt.RequestCancelInstall(Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager! obj, int sessionId, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.Google.Android.Play.Core.Ktx.SplitInstallManagerKtxKt.RequestDeferredInstall(Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager! obj, System.Collections.Generic.IList<string!>! moduleNames, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.Google.Android.Play.Core.Ktx.SplitInstallManagerKtxKt.RequestDeferredLanguageInstall(Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager! obj, System.Collections.Generic.IList<Java.Util.Locale!>! languages, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.Google.Android.Play.Core.Ktx.SplitInstallManagerKtxKt.RequestDeferredLanguageUninstall(Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager! obj, System.Collections.Generic.IList<Java.Util.Locale!>! languages, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.Google.Android.Play.Core.Ktx.SplitInstallManagerKtxKt.RequestDeferredUninstall(Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager! obj, System.Collections.Generic.IList<string!>! moduleNames, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.Google.Android.Play.Core.Ktx.SplitInstallManagerKtxKt.RequestInstall(Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager! obj, System.Collections.Generic.IList<string!>! modules, System.Collections.Generic.IList<string!>! languages, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.Google.Android.Play.Core.Ktx.SplitInstallManagerKtxKt.RequestProgressFlow(Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager! obj) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.Google.Android.Play.Core.Ktx.SplitInstallManagerKtxKt.RequestSessionState(Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager! obj, int sessionId, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.Google.Android.Play.Core.Ktx.SplitInstallManagerKtxKt.RequestSessionStates(Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager! obj, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.Google.Android.Play.Core.Ktx.SplitInstallManagerKtxKt.SplitInstallStateUpdatedListener(Kotlin.Jvm.Functions.IFunction1! onRequiresConfirmation, Kotlin.Jvm.Functions.IFunction1! onInstalled, Kotlin.Jvm.Functions.IFunction1! onFailed, Kotlin.Jvm.Functions.IFunction1! onPending, Kotlin.Jvm.Functions.IFunction1! onDownloaded, Kotlin.Jvm.Functions.IFunction1! onDownloading, Kotlin.Jvm.Functions.IFunction1! onInstalling, Kotlin.Jvm.Functions.IFunction1! onCanceling, Kotlin.Jvm.Functions.IFunction1! onCanceled, Kotlin.Jvm.Functions.IFunction1! onNonTerminalStatus, Kotlin.Jvm.Functions.IFunction1! onTerminalStatus) -> Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallStateUpdatedListener!
static Xamarin.Google.Android.Play.Core.Ktx.SplitInstallManagerKtxKt.StartConfirmationDialogForResult(Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager! obj, Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState! sessionState, AndroidX.Fragment.App.Fragment! fragment, int requestCode) -> bool
