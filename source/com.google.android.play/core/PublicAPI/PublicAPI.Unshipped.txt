#nullable enable
Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo
Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo.AppUpdateInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateManagerFactory
Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions
Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions.AppUpdateOptions() -> void
Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions.AppUpdateOptions(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions.Builder
Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions.Builder.Builder() -> void
Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.AppUpdate.IAppUpdateManager
Xamarin.Google.Android.Play.Core.AppUpdate.IAppUpdateManager.AppUpdateInfo.get -> Xamarin.Google.Android.Play.Core.Tasks.Task!
Xamarin.Google.Android.Play.Core.AppUpdate.IAppUpdateManager.CompleteUpdate() -> Xamarin.Google.Android.Play.Core.Tasks.Task!
Xamarin.Google.Android.Play.Core.AppUpdate.IAppUpdateManager.RegisterListener(Xamarin.Google.Android.Play.Core.Install.IInstallStateUpdatedListener! p0) -> void
Xamarin.Google.Android.Play.Core.AppUpdate.IAppUpdateManager.StartUpdateFlow(Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo! p0, Android.App.Activity! p1, Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions! p2) -> Xamarin.Google.Android.Play.Core.Tasks.Task?
Xamarin.Google.Android.Play.Core.AppUpdate.IAppUpdateManager.StartUpdateFlowForResult(Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo! p0, Android.App.Activity! p1, Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions! p2, int p3) -> bool
Xamarin.Google.Android.Play.Core.AppUpdate.IAppUpdateManager.StartUpdateFlowForResult(Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo! p0, Xamarin.Google.Android.Play.Core.Common.IIntentSenderForResultStarter! p1, Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions! p2, int p3) -> bool
Xamarin.Google.Android.Play.Core.AppUpdate.IAppUpdateManager.StartUpdateFlowForResult(Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo! p0, int p1, Android.App.Activity! p2, int p3) -> bool
Xamarin.Google.Android.Play.Core.AppUpdate.IAppUpdateManager.StartUpdateFlowForResult(Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo! p0, int p1, Xamarin.Google.Android.Play.Core.Common.IIntentSenderForResultStarter! p2, int p3) -> bool
Xamarin.Google.Android.Play.Core.AppUpdate.IAppUpdateManager.UnregisterListener(Xamarin.Google.Android.Play.Core.Install.IInstallStateUpdatedListener! p0) -> void
Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager
Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.FakeAppUpdateManager(Android.Content.Context? context) -> void
Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.FakeAppUpdateManager(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.StartUpdateFlow(Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo? p0, Android.App.Activity? p1, Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions? p2) -> Xamarin.Google.Android.Play.Core.Tasks.Task?
Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.StartUpdateFlowForResult(Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo? p0, Android.App.Activity? p1, Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions? p2, int p3) -> bool
Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.StartUpdateFlowForResult(Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo? p0, Xamarin.Google.Android.Play.Core.Common.IIntentSenderForResultStarter? p1, Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions? p2, int p3) -> bool
Xamarin.Google.Android.Play.Core.AssetPacks.AssetLocation
Xamarin.Google.Android.Play.Core.AssetPacks.AssetLocation.AssetLocation() -> void
Xamarin.Google.Android.Play.Core.AssetPacks.AssetLocation.AssetLocation(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackExtractionService
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackExtractionService.AssetPackExtractionService() -> void
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackExtractionService.AssetPackExtractionService(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackLocation
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackLocation.AssetPackLocation() -> void
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackLocation.AssetPackLocation(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackManagerFactory
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState.AssetPackState() -> void
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState.AssetPackState(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStateUpdateListenerWrapper
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStateUpdateListenerWrapper.AssetPackStateEventArgs
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStateUpdateListenerWrapper.AssetPackStateEventArgs.AssetPackStateEventArgs(Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState? state) -> void
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStateUpdateListenerWrapper.AssetPackStateEventArgs.State.get -> Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState?
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStateUpdateListenerWrapper.AssetPackStateUpdateListenerWrapper() -> void
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStateUpdateListenerWrapper.AssetPackStateUpdateListenerWrapper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStateUpdateListenerWrapper.IAssetPackStateListener
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStateUpdateListenerWrapper.IAssetPackStateListener.OnStateUpdate(Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState? state) -> void
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStateUpdateListenerWrapper.StateUpdate -> System.EventHandler<Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStateUpdateListenerWrapper.AssetPackStateEventArgs!>!
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStates
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStates.AssetPackStates() -> void
Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStates.AssetPackStates(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.AssetPacks.ExtractionForegroundService
Xamarin.Google.Android.Play.Core.AssetPacks.ExtractionForegroundService.ExtractionForegroundService() -> void
Xamarin.Google.Android.Play.Core.AssetPacks.ExtractionForegroundService.ExtractionForegroundService(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.AssetPacks.ExtractionForegroundService.Zza() -> void
Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackManager
Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackManager.Cancel(System.Collections.Generic.IList<string!>! p0) -> Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStates?
Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackManager.ClearListeners() -> void
Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackManager.Fetch(System.Collections.Generic.IList<string!>? p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task?
Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackManager.GetAssetLocation(string! p0, string! p1) -> Xamarin.Google.Android.Play.Core.AssetPacks.AssetLocation?
Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackManager.GetPackLocation(string! p0) -> Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackLocation?
Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackManager.GetPackStates(System.Collections.Generic.IList<string!>? p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task?
Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackManager.PackLocations.get -> System.Collections.Generic.IDictionary<string!, Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackLocation!>?
Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackManager.RegisterListener(Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackStateUpdateListener! p0) -> void
Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackManager.RemovePack(string! p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task?
Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackManager.ShowCellularDataConfirmation(Android.App.Activity! p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task?
Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackManager.UnregisterListener(Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackStateUpdateListener! p0) -> void
Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackStateUpdateListener
Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackErrorCode
Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackErrorCodeAttribute
Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackErrorCodeAttribute.AssetPackErrorCodeAttribute() -> void
Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackErrorCodeConsts
Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackStatus
Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackStatusAttribute
Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackStatusAttribute.AssetPackStatusAttribute() -> void
Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackStatusConsts
Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackStorageMethod
Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackStorageMethodAttribute
Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackStorageMethodAttribute.AssetPackStorageMethodAttribute() -> void
Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackStorageMethodConsts
Xamarin.Google.Android.Play.Core.AssetPacks.Model.IAssetPackErrorCode
Xamarin.Google.Android.Play.Core.AssetPacks.Model.IAssetPackStatus
Xamarin.Google.Android.Play.Core.AssetPacks.Model.IAssetPackStorageMethod
Xamarin.Google.Android.Play.Core.AssetPacks.NativeAssetPackStateUpdateListener
Xamarin.Google.Android.Play.Core.AssetPacks.NativeAssetPackStateUpdateListener.NativeAssetPackStateUpdateListener() -> void
Xamarin.Google.Android.Play.Core.AssetPacks.NativeAssetPackStateUpdateListener.NativeAssetPackStateUpdateListener(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.Common.IIntentSenderForResultStarter
Xamarin.Google.Android.Play.Core.Common.IIntentSenderForResultStarter.StartIntentSenderForResult(Android.Content.IntentSender! p0, int p1, Android.Content.Intent? p2, int p3, int p4, int p5, Android.OS.Bundle? p6) -> void
Xamarin.Google.Android.Play.Core.Common.LocalTestingException
Xamarin.Google.Android.Play.Core.Common.LocalTestingException.LocalTestingException(string? p0) -> void
Xamarin.Google.Android.Play.Core.Common.LocalTestingException.LocalTestingException(string? p0, Java.Lang.Throwable? p1) -> void
Xamarin.Google.Android.Play.Core.Common.PlayCoreDialogWrapperActivity
Xamarin.Google.Android.Play.Core.Common.PlayCoreDialogWrapperActivity.PlayCoreDialogWrapperActivity() -> void
Xamarin.Google.Android.Play.Core.Common.PlayCoreDialogWrapperActivity.PlayCoreDialogWrapperActivity(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.Common.PlayCoreVersion
Xamarin.Google.Android.Play.Core.Common.PlayCoreVersion.PlayCoreVersion(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.Install.IInstallStateUpdatedListener
Xamarin.Google.Android.Play.Core.Install.IInstallStateUpdatedListener.OnStateUpdate(Xamarin.Google.Android.Play.Core.Install.InstallState? state) -> void
Xamarin.Google.Android.Play.Core.Install.InstallState
Xamarin.Google.Android.Play.Core.Install.InstallState.InstallState() -> void
Xamarin.Google.Android.Play.Core.Install.InstallState.InstallState(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.Install.InstallStateUpdatedEventArgs
Xamarin.Google.Android.Play.Core.Install.InstallStateUpdatedEventArgs.InstallStateUpdatedEventArgs(Xamarin.Google.Android.Play.Core.Install.InstallState? state) -> void
Xamarin.Google.Android.Play.Core.Install.InstallStateUpdatedEventArgs.State.get -> Xamarin.Google.Android.Play.Core.Install.InstallState?
Xamarin.Google.Android.Play.Core.Install.Model.ActivityResult
Xamarin.Google.Android.Play.Core.Install.Model.AppUpdateType
Xamarin.Google.Android.Play.Core.Install.Model.AppUpdateTypeAttribute
Xamarin.Google.Android.Play.Core.Install.Model.AppUpdateTypeAttribute.AppUpdateTypeAttribute() -> void
Xamarin.Google.Android.Play.Core.Install.Model.AppUpdateTypeConsts
Xamarin.Google.Android.Play.Core.Install.Model.IAppUpdateType
Xamarin.Google.Android.Play.Core.Install.Model.IInstallErrorCode
Xamarin.Google.Android.Play.Core.Install.Model.IInstallStatus
Xamarin.Google.Android.Play.Core.Install.Model.IUpdateAvailability
Xamarin.Google.Android.Play.Core.Install.Model.InstallErrorCode
Xamarin.Google.Android.Play.Core.Install.Model.InstallErrorCodeAttribute
Xamarin.Google.Android.Play.Core.Install.Model.InstallErrorCodeAttribute.InstallErrorCodeAttribute() -> void
Xamarin.Google.Android.Play.Core.Install.Model.InstallErrorCodeConsts
Xamarin.Google.Android.Play.Core.Install.Model.InstallStatus
Xamarin.Google.Android.Play.Core.Install.Model.InstallStatusAttribute
Xamarin.Google.Android.Play.Core.Install.Model.InstallStatusAttribute.InstallStatusAttribute() -> void
Xamarin.Google.Android.Play.Core.Install.Model.InstallStatusConsts
Xamarin.Google.Android.Play.Core.Install.Model.UpdateAvailability
Xamarin.Google.Android.Play.Core.Install.Model.UpdateAvailabilityAttribute
Xamarin.Google.Android.Play.Core.Install.Model.UpdateAvailabilityAttribute.UpdateAvailabilityAttribute() -> void
Xamarin.Google.Android.Play.Core.Install.Model.UpdateAvailabilityConsts
Xamarin.Google.Android.Play.Core.Listener.IStateUpdatedListener
Xamarin.Google.Android.Play.Core.Listener.IStateUpdatedListener.OnStateUpdate(Java.Lang.Object! p0) -> void
Xamarin.Google.Android.Play.Core.Listener.StateUpdatedEventArgs
Xamarin.Google.Android.Play.Core.Listener.StateUpdatedEventArgs.P0.get -> Java.Lang.Object!
Xamarin.Google.Android.Play.Core.Listener.StateUpdatedEventArgs.StateUpdatedEventArgs(Java.Lang.Object! p0) -> void
Xamarin.Google.Android.Play.Core.MissingSplits.IMissingSplitsManager
Xamarin.Google.Android.Play.Core.MissingSplits.IMissingSplitsManager.DisableAppIfMissingRequiredSplits() -> bool
Xamarin.Google.Android.Play.Core.MissingSplits.IMissingSplitsManager.IsMissingRequiredSplits.get -> bool
Xamarin.Google.Android.Play.Core.MissingSplits.MissingSplitsDetectingApplication
Xamarin.Google.Android.Play.Core.MissingSplits.MissingSplitsDetectingApplication.MissingSplitsDetectingApplication() -> void
Xamarin.Google.Android.Play.Core.MissingSplits.MissingSplitsDetectingApplication.MissingSplitsDetectingApplication(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.MissingSplits.MissingSplitsManagerFactory
Xamarin.Google.Android.Play.Core.MissingSplits.PlayCoreMissingSplitsActivity
Xamarin.Google.Android.Play.Core.MissingSplits.PlayCoreMissingSplitsActivity.OnClick(Android.Content.IDialogInterface? p0, int p1) -> void
Xamarin.Google.Android.Play.Core.MissingSplits.PlayCoreMissingSplitsActivity.PlayCoreMissingSplitsActivity() -> void
Xamarin.Google.Android.Play.Core.MissingSplits.PlayCoreMissingSplitsActivity.PlayCoreMissingSplitsActivity(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.Review.IReviewManager
Xamarin.Google.Android.Play.Core.Review.IReviewManager.LaunchReviewFlow(Android.App.Activity! p0, Xamarin.Google.Android.Play.Core.Review.ReviewInfo! p1) -> Xamarin.Google.Android.Play.Core.Tasks.Task!
Xamarin.Google.Android.Play.Core.Review.IReviewManager.RequestReviewFlow() -> Xamarin.Google.Android.Play.Core.Tasks.Task!
Xamarin.Google.Android.Play.Core.Review.Model.IReviewErrorCode
Xamarin.Google.Android.Play.Core.Review.Model.ReviewErrorCode
Xamarin.Google.Android.Play.Core.Review.Model.ReviewErrorCodeAttribute
Xamarin.Google.Android.Play.Core.Review.Model.ReviewErrorCodeAttribute.ReviewErrorCodeAttribute() -> void
Xamarin.Google.Android.Play.Core.Review.Model.ReviewErrorCodeConsts
Xamarin.Google.Android.Play.Core.Review.ReviewInfo
Xamarin.Google.Android.Play.Core.Review.ReviewInfo.DescribeContents() -> int
Xamarin.Google.Android.Play.Core.Review.ReviewInfo.ReviewInfo() -> void
Xamarin.Google.Android.Play.Core.Review.ReviewInfo.ReviewInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.Review.ReviewInfo.WriteToParcel(Android.OS.Parcel? p0, Android.OS.ParcelableWriteFlags p1) -> void
Xamarin.Google.Android.Play.Core.Review.ReviewManagerFactory
Xamarin.Google.Android.Play.Core.Review.ReviewManagerFactory.ReviewManagerFactory(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.Review.Testing.FakeReviewManager
Xamarin.Google.Android.Play.Core.Review.Testing.FakeReviewManager.FakeReviewManager(Android.Content.Context? context) -> void
Xamarin.Google.Android.Play.Core.Review.Testing.FakeReviewManager.FakeReviewManager(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.SplitCompat.SplitCompat
Xamarin.Google.Android.Play.Core.SplitCompat.SplitCompat.SplitCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.SplitCompat.SplitCompatApplication
Xamarin.Google.Android.Play.Core.SplitCompat.SplitCompatApplication.SplitCompatApplication() -> void
Xamarin.Google.Android.Play.Core.SplitCompat.SplitCompatApplication.SplitCompatApplication(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager
Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager.CancelInstall(int p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task!
Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager.DeferredInstall(System.Collections.Generic.IList<string!>? p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task!
Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager.DeferredLanguageInstall(System.Collections.Generic.IList<Java.Util.Locale!>? p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task!
Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager.DeferredLanguageUninstall(System.Collections.Generic.IList<Java.Util.Locale!>? p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task!
Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager.DeferredUninstall(System.Collections.Generic.IList<string!>? p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task!
Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager.GetSessionState(int p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task!
Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager.InstalledLanguages.get -> System.Collections.Generic.ICollection<string!>!
Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager.InstalledModules.get -> System.Collections.Generic.ICollection<string!>!
Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager.RegisterListener(Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallStateUpdatedListener! p0) -> void
Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager.SessionStates.get -> Xamarin.Google.Android.Play.Core.Tasks.Task!
Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager.StartConfirmationDialogForResult(Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState! p0, Android.App.Activity! p1, int p2) -> bool
Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager.StartConfirmationDialogForResult(Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState! p0, Xamarin.Google.Android.Play.Core.Common.IIntentSenderForResultStarter! p1, int p2) -> bool
Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager.StartInstall(Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest! p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task?
Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager.UnregisterListener(Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallStateUpdatedListener! p0) -> void
Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager.Zza(Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallStateUpdatedListener! p0) -> void
Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager.Zzb(Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallStateUpdatedListener! p0) -> void
Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallStateUpdatedListener
Xamarin.Google.Android.Play.Core.SplitInstall.InternalFrameworkListenerExtensions
Xamarin.Google.Android.Play.Core.SplitInstall.Model.ISplitInstallErrorCode
Xamarin.Google.Android.Play.Core.SplitInstall.Model.ISplitInstallSessionStatus
Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallErrorCode
Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallErrorCodeAttribute
Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallErrorCodeAttribute.SplitInstallErrorCodeAttribute() -> void
Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallErrorCodeConsts
Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallSessionStatus
Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallSessionStatusAttribute
Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallSessionStatusAttribute.SplitInstallSessionStatusAttribute() -> void
Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallSessionStatusConsts
Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallHelper
Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallHelper.SplitInstallHelper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallManagerFactory
Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest
Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest.Builder
Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest.SplitInstallRequest(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState
Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState.SplitInstallSessionState() -> void
Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState.SplitInstallSessionState(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallStateUpdatedListenerWrapper
Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallStateUpdatedListenerWrapper.IStateUpdateListener
Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallStateUpdatedListenerWrapper.IStateUpdateListener.OnStateUpdate(Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState? p0) -> void
Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallStateUpdatedListenerWrapper.SplitInstallStateUpdatedListenerWrapper() -> void
Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallStateUpdatedListenerWrapper.SplitInstallStateUpdatedListenerWrapper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallStateUpdatedListenerWrapper.StateUpdate -> System.EventHandler<Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallStateUpdatedListenerWrapper.StateUpdateEventArgs!>!
Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallStateUpdatedListenerWrapper.StateUpdateEventArgs
Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallStateUpdatedListenerWrapper.StateUpdateEventArgs.P0.get -> Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState?
Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallStateUpdatedListenerWrapper.StateUpdateEventArgs.StateUpdateEventArgs(Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState? p0) -> void
Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager
Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.CancelInstall(int p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task?
Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.DeferredInstall(System.Collections.Generic.IList<string!>? p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task?
Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.DeferredLanguageInstall(System.Collections.Generic.IList<Java.Util.Locale!>? p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task?
Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.DeferredLanguageUninstall(System.Collections.Generic.IList<Java.Util.Locale!>? p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task?
Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.DeferredUninstall(System.Collections.Generic.IList<string!>? p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task?
Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.FakeSplitInstallManager(Android.Content.Context? context, Java.IO.File? splitsDir) -> void
Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.FakeSplitInstallManager(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.GetSessionState(int p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task?
Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.InstalledLanguages.get -> System.Collections.Generic.ICollection<string!>?
Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.InstalledModules.get -> System.Collections.Generic.ICollection<string!>?
Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.RegisterListener(Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallStateUpdatedListener? p0) -> void
Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.SessionStates.get -> Xamarin.Google.Android.Play.Core.Tasks.Task?
Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.StartConfirmationDialogForResult(Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState? p0, Android.App.Activity? p1, int p2) -> bool
Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.StartConfirmationDialogForResult(Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState? p0, Xamarin.Google.Android.Play.Core.Common.IIntentSenderForResultStarter? p1, int p2) -> bool
Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.StartInstall(Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest? p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task?
Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.UnregisterListener(Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallStateUpdatedListener? p0) -> void
Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.Zza(Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallStateUpdatedListener? p0) -> void
Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.Zzb(Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallStateUpdatedListener? p0) -> void
Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManagerFactory
Xamarin.Google.Android.Play.Core.Tasks.CompleteEventArgs
Xamarin.Google.Android.Play.Core.Tasks.CompleteEventArgs.CompleteEventArgs(Xamarin.Google.Android.Play.Core.Tasks.Task! p0) -> void
Xamarin.Google.Android.Play.Core.Tasks.CompleteEventArgs.P0.get -> Xamarin.Google.Android.Play.Core.Tasks.Task!
Xamarin.Google.Android.Play.Core.Tasks.FailureEventArgs
Xamarin.Google.Android.Play.Core.Tasks.FailureEventArgs.FailureEventArgs(Java.Lang.Exception? p0) -> void
Xamarin.Google.Android.Play.Core.Tasks.FailureEventArgs.P0.get -> Java.Lang.Exception?
Xamarin.Google.Android.Play.Core.Tasks.IOnCompleteListener
Xamarin.Google.Android.Play.Core.Tasks.IOnCompleteListener.OnComplete(Xamarin.Google.Android.Play.Core.Tasks.Task! p0) -> void
Xamarin.Google.Android.Play.Core.Tasks.IOnFailureListener
Xamarin.Google.Android.Play.Core.Tasks.IOnFailureListener.OnFailure(Java.Lang.Exception? p0) -> void
Xamarin.Google.Android.Play.Core.Tasks.IOnSuccessListener
Xamarin.Google.Android.Play.Core.Tasks.IOnSuccessListener.OnSuccess(Java.Lang.Object? p0) -> void
Xamarin.Google.Android.Play.Core.Tasks.SuccessEventArgs
Xamarin.Google.Android.Play.Core.Tasks.SuccessEventArgs.P0.get -> Java.Lang.Object?
Xamarin.Google.Android.Play.Core.Tasks.SuccessEventArgs.SuccessEventArgs(Java.Lang.Object? p0) -> void
Xamarin.Google.Android.Play.Core.Tasks.Task
Xamarin.Google.Android.Play.Core.Tasks.Task.Task() -> void
Xamarin.Google.Android.Play.Core.Tasks.Task.Task(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Google.Android.Play.Core.Tasks.TaskExecutors
Xamarin.Google.Android.Play.Core.Tasks.Tasks
abstract Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions.AllowAssetPackDeletion() -> bool
abstract Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions.AppUpdateType() -> int
abstract Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions.Builder.Build() -> Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions!
abstract Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions.Builder.SetAllowAssetPackDeletion(bool p0) -> Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions.Builder!
abstract Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions.Builder.SetAppUpdateType(int p0) -> Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions.Builder!
abstract Xamarin.Google.Android.Play.Core.AssetPacks.AssetLocation.Offset() -> long
abstract Xamarin.Google.Android.Play.Core.AssetPacks.AssetLocation.Path() -> string?
abstract Xamarin.Google.Android.Play.Core.AssetPacks.AssetLocation.Size() -> long
abstract Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackLocation.AssetsPath() -> string?
abstract Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackLocation.PackStorageMethod() -> int
abstract Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackLocation.Path() -> string?
abstract Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState.BytesDownloaded() -> long
abstract Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState.ErrorCode() -> int
abstract Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState.Name() -> string?
abstract Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState.Status() -> int
abstract Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState.TotalBytesToDownload() -> long
abstract Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState.TransferProgressPercentage() -> int
abstract Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState.Zza() -> int
abstract Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState.Zzd() -> string?
abstract Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState.Zze() -> string?
abstract Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStates.PackStates() -> System.Collections.Generic.IDictionary<string!, Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState!>?
abstract Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStates.TotalBytes() -> long
abstract Xamarin.Google.Android.Play.Core.Install.InstallState.BytesDownloaded() -> long
abstract Xamarin.Google.Android.Play.Core.Install.InstallState.InstallErrorCode() -> int
abstract Xamarin.Google.Android.Play.Core.Install.InstallState.InstallStatus() -> int
abstract Xamarin.Google.Android.Play.Core.Install.InstallState.PackageName() -> string?
abstract Xamarin.Google.Android.Play.Core.Install.InstallState.TotalBytesToDownload() -> long
abstract Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState.BytesDownloaded() -> long
abstract Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState.ErrorCode() -> int
abstract Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState.ResolutionIntent() -> Android.App.PendingIntent?
abstract Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState.SessionId() -> int
abstract Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState.Status() -> int
abstract Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState.TotalBytesToDownload() -> long
abstract Xamarin.Google.Android.Play.Core.Tasks.Task.AddOnCompleteListener(Java.Util.Concurrent.IExecutor! p0, Xamarin.Google.Android.Play.Core.Tasks.IOnCompleteListener! p1) -> Xamarin.Google.Android.Play.Core.Tasks.Task!
abstract Xamarin.Google.Android.Play.Core.Tasks.Task.AddOnCompleteListener(Xamarin.Google.Android.Play.Core.Tasks.IOnCompleteListener! p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task!
abstract Xamarin.Google.Android.Play.Core.Tasks.Task.AddOnFailureListener(Java.Util.Concurrent.IExecutor! p0, Xamarin.Google.Android.Play.Core.Tasks.IOnFailureListener! p1) -> Xamarin.Google.Android.Play.Core.Tasks.Task!
abstract Xamarin.Google.Android.Play.Core.Tasks.Task.AddOnFailureListener(Xamarin.Google.Android.Play.Core.Tasks.IOnFailureListener! p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task!
abstract Xamarin.Google.Android.Play.Core.Tasks.Task.AddOnSuccessListener(Java.Util.Concurrent.IExecutor! p0, Xamarin.Google.Android.Play.Core.Tasks.IOnSuccessListener! p1) -> Xamarin.Google.Android.Play.Core.Tasks.Task!
abstract Xamarin.Google.Android.Play.Core.Tasks.Task.AddOnSuccessListener(Xamarin.Google.Android.Play.Core.Tasks.IOnSuccessListener? p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task!
abstract Xamarin.Google.Android.Play.Core.Tasks.Task.Exception.get -> Java.Lang.Exception?
abstract Xamarin.Google.Android.Play.Core.Tasks.Task.GetResult(Java.Lang.Class? p0) -> Java.Lang.Object?
abstract Xamarin.Google.Android.Play.Core.Tasks.Task.IsComplete.get -> bool
abstract Xamarin.Google.Android.Play.Core.Tasks.Task.IsSuccessful.get -> bool
abstract Xamarin.Google.Android.Play.Core.Tasks.Task.RawResult.get -> Java.Lang.Object!
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackErrorCode.AccessDenied = -7 -> int
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackErrorCode.ApiNotAvailable = -5 -> int
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackErrorCode.AppNotOwned = -13 -> int
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackErrorCode.AppUnavailable = -1 -> int
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackErrorCode.DownloadNotFound = -4 -> int
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackErrorCode.InsufficientStorage = -10 -> int
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackErrorCode.InternalError = -100 -> int
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackErrorCode.InvalidRequest = -3 -> int
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackErrorCode.NetworkError = -6 -> int
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackErrorCode.NoError = 0 -> int
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackErrorCode.PackUnavailable = -2 -> int
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackStatus.Canceled = 6 -> int
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackStatus.Completed = 4 -> int
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackStatus.Downloading = 2 -> int
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackStatus.Failed = 5 -> int
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackStatus.NotInstalled = 8 -> int
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackStatus.Pending = 1 -> int
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackStatus.Transferring = 3 -> int
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackStatus.Unknown = 0 -> int
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackStatus.WaitingForWifi = 7 -> int
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackStorageMethod.ApkAssets = 1 -> int
const Xamarin.Google.Android.Play.Core.AssetPacks.Model.AssetPackStorageMethod.StorageFiles = 0 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.ActivityResult.ResultInAppUpdateFailed = 1 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.AppUpdateType.Flexible = 0 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.AppUpdateType.Immediate = 1 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.InstallErrorCode.ErrorApiNotAvailable = -3 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.InstallErrorCode.ErrorAppNotOwned = -10 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.InstallErrorCode.ErrorDownloadNotPresent = -7 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.InstallErrorCode.ErrorInstallNotAllowed = -6 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.InstallErrorCode.ErrorInstallUnavailable = -5 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.InstallErrorCode.ErrorInternalError = -100 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.InstallErrorCode.ErrorInvalidRequest = -4 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.InstallErrorCode.ErrorPlayStoreNotFound = -9 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.InstallErrorCode.ErrorUnknown = -2 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.InstallErrorCode.NoError = 0 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.InstallErrorCode.NoErrorPartiallyAllowed = 1 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.InstallStatus.Canceled = 6 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.InstallStatus.Downloaded = 11 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.InstallStatus.Downloading = 2 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.InstallStatus.Failed = 5 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.InstallStatus.Installed = 4 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.InstallStatus.Installing = 3 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.InstallStatus.Pending = 1 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.InstallStatus.RequiresUiIntent = 10 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.InstallStatus.Unknown = 0 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.UpdateAvailability.DeveloperTriggeredUpdateInProgress = 3 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.UpdateAvailability.Unknown = 0 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.UpdateAvailability.UpdateAvailable = 2 -> int
const Xamarin.Google.Android.Play.Core.Install.Model.UpdateAvailability.UpdateNotAvailable = 1 -> int
const Xamarin.Google.Android.Play.Core.Review.Model.ReviewErrorCode.InvalidRequest = -2 -> int
const Xamarin.Google.Android.Play.Core.Review.Model.ReviewErrorCode.NoError = 0 -> int
const Xamarin.Google.Android.Play.Core.Review.Model.ReviewErrorCode.PlayStoreNotFound = -1 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallErrorCode.AccessDenied = -7 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallErrorCode.ActiveSessionsLimitExceeded = -1 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallErrorCode.ApiNotAvailable = -5 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallErrorCode.AppNotOwned = -15 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallErrorCode.IncompatibleWithExistingSession = -8 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallErrorCode.InsufficientStorage = -10 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallErrorCode.InternalError = -100 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallErrorCode.InvalidRequest = -3 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallErrorCode.ModuleUnavailable = -2 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallErrorCode.NetworkError = -6 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallErrorCode.NoError = 0 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallErrorCode.PlayStoreNotFound = -14 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallErrorCode.ServiceDied = -9 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallErrorCode.SessionNotFound = -4 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallErrorCode.SplitcompatCopyError = -13 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallErrorCode.SplitcompatEmulationError = -12 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallErrorCode.SplitcompatVerificationError = -11 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallSessionStatus.Canceled = 7 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallSessionStatus.Canceling = 9 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallSessionStatus.Downloaded = 3 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallSessionStatus.Downloading = 2 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallSessionStatus.Failed = 6 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallSessionStatus.Installed = 5 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallSessionStatus.Installing = 4 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallSessionStatus.Pending = 1 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallSessionStatus.RequiresUserConfirmation = 8 -> int
const Xamarin.Google.Android.Play.Core.SplitInstall.Model.SplitInstallSessionStatus.Unknown = 0 -> int
override Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateManagerFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions.Builder.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions.Builder.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.AssetPacks.AssetLocation.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.AssetPacks.AssetLocation.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.AssetPacks.AssetLocation.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackExtractionService.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackExtractionService.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackExtractionService.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackLocation.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackLocation.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackLocation.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackManagerFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStateUpdateListenerWrapper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStateUpdateListenerWrapper.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStateUpdateListenerWrapper.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStates.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStates.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStates.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.AssetPacks.ExtractionForegroundService.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.AssetPacks.ExtractionForegroundService.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.AssetPacks.ExtractionForegroundService.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.AssetPacks.NativeAssetPackStateUpdateListener.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.AssetPacks.NativeAssetPackStateUpdateListener.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.AssetPacks.NativeAssetPackStateUpdateListener.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.Common.LocalTestingException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.Common.PlayCoreDialogWrapperActivity.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.Common.PlayCoreDialogWrapperActivity.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.Common.PlayCoreDialogWrapperActivity.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.Common.PlayCoreVersion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.Common.PlayCoreVersion.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.Common.PlayCoreVersion.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.Install.InstallState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.Install.InstallState.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.Install.InstallState.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.Install.Model.ActivityResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.MissingSplits.MissingSplitsDetectingApplication.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.MissingSplits.MissingSplitsDetectingApplication.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.MissingSplits.MissingSplitsDetectingApplication.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.MissingSplits.MissingSplitsManagerFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.MissingSplits.PlayCoreMissingSplitsActivity.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.MissingSplits.PlayCoreMissingSplitsActivity.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.MissingSplits.PlayCoreMissingSplitsActivity.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.Review.ReviewInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.Review.ReviewInfo.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.Review.ReviewInfo.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.Review.ReviewManagerFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.Review.ReviewManagerFactory.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.Review.ReviewManagerFactory.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.Review.Testing.FakeReviewManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.Review.Testing.FakeReviewManager.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.Review.Testing.FakeReviewManager.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.SplitCompat.SplitCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.SplitCompat.SplitCompat.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.SplitCompat.SplitCompat.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.SplitCompat.SplitCompatApplication.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.SplitCompat.SplitCompatApplication.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.SplitCompat.SplitCompatApplication.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.SplitInstall.InternalFrameworkListenerExtensions.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallHelper.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallHelper.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallManagerFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest.Builder.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest.Builder.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallStateUpdatedListenerWrapper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallStateUpdatedListenerWrapper.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallStateUpdatedListenerWrapper.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManagerFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.Tasks.Task.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.Tasks.Task.ThresholdClass.get -> nint
override Xamarin.Google.Android.Play.Core.Tasks.Task.ThresholdType.get -> System.Type!
override Xamarin.Google.Android.Play.Core.Tasks.TaskExecutors.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Google.Android.Play.Core.Tasks.Tasks.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override sealed Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackExtractionService.OnBind(Android.Content.Intent? p0) -> Android.OS.IBinder?
override sealed Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackExtractionService.OnCreate() -> void
override sealed Xamarin.Google.Android.Play.Core.AssetPacks.ExtractionForegroundService.OnBind(Android.Content.Intent? p0) -> Android.OS.IBinder?
override sealed Xamarin.Google.Android.Play.Core.Common.PlayCoreDialogWrapperActivity.OnActivityResult(int p0, Android.App.Result p1, Android.Content.Intent? p2) -> void
override sealed Xamarin.Google.Android.Play.Core.Common.PlayCoreDialogWrapperActivity.OnCreate(Android.OS.Bundle? p0) -> void
override sealed Xamarin.Google.Android.Play.Core.Common.PlayCoreDialogWrapperActivity.OnSaveInstanceState(Android.OS.Bundle? p0) -> void
override sealed Xamarin.Google.Android.Play.Core.MissingSplits.MissingSplitsDetectingApplication.OnCreate() -> void
override sealed Xamarin.Google.Android.Play.Core.MissingSplits.PlayCoreMissingSplitsActivity.OnCreate(Android.OS.Bundle? p0) -> void
static Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo.Zzb(string! p0, int p1, int p2, int p3, Java.Lang.Integer? p4, int p5, long p6, long p7, long p8, long p9, Android.App.PendingIntent? p10, Android.App.PendingIntent? p11, Android.App.PendingIntent? p12, Android.App.PendingIntent? p13) -> Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo?
static Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateManagerFactory.Create(Android.Content.Context! context) -> Xamarin.Google.Android.Play.Core.AppUpdate.IAppUpdateManager!
static Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions.DefaultOptions(int appUpdateType) -> Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions!
static Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions.NewBuilder(int appUpdateType) -> Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions.Builder!
static Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackManagerFactory.GetInstance(Android.Content.Context! applicationContext) -> Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackManager!
static Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState.Zzb(string! p0, int p1, int p2, long p3, long p4, double p5, int p6, string? p7, string? p8) -> Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackState?
static Xamarin.Google.Android.Play.Core.Common.PlayCoreVersion.AddVersion(string? moduleName, string? platformName, int version) -> void
static Xamarin.Google.Android.Play.Core.Common.PlayCoreVersion.Zza(string? p0) -> Android.OS.Bundle?
static Xamarin.Google.Android.Play.Core.Common.PlayCoreVersion.Zzb(string? p0) -> System.Collections.IDictionary?
static Xamarin.Google.Android.Play.Core.Install.InstallState.Zza(int p0, long p1, long p2, int p3, string! p4) -> Xamarin.Google.Android.Play.Core.Install.InstallState?
static Xamarin.Google.Android.Play.Core.MissingSplits.MissingSplitsManagerFactory.Create(Android.Content.Context! context) -> Xamarin.Google.Android.Play.Core.MissingSplits.IMissingSplitsManager!
static Xamarin.Google.Android.Play.Core.Review.ReviewInfo.Creator.get -> Android.OS.IParcelableCreator?
static Xamarin.Google.Android.Play.Core.Review.ReviewInfo.Zzc(Android.App.PendingIntent? p0, bool p1) -> Xamarin.Google.Android.Play.Core.Review.ReviewInfo?
static Xamarin.Google.Android.Play.Core.Review.ReviewManagerFactory.Create(Android.Content.Context! context) -> Xamarin.Google.Android.Play.Core.Review.IReviewManager!
static Xamarin.Google.Android.Play.Core.SplitCompat.SplitCompat.Install(Android.Content.Context! context) -> bool
static Xamarin.Google.Android.Play.Core.SplitCompat.SplitCompat.InstallActivity(Android.Content.Context! context) -> bool
static Xamarin.Google.Android.Play.Core.SplitCompat.SplitCompat.Zza.get -> int
static Xamarin.Google.Android.Play.Core.SplitCompat.SplitCompat.Zzd(Android.Content.Context? p0) -> bool
static Xamarin.Google.Android.Play.Core.SplitCompat.SplitCompat.Zze() -> bool
static Xamarin.Google.Android.Play.Core.SplitInstall.InternalFrameworkListenerExtensions.RegisterFrameworkListener(Android.Content.Context? applicationContext, Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallStateUpdatedListener? listener) -> void
static Xamarin.Google.Android.Play.Core.SplitInstall.InternalFrameworkListenerExtensions.UnregisterFrameworkListener(Android.Content.Context? applicationContext, Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallStateUpdatedListener? listener) -> void
static Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallHelper.LoadLibrary(Android.Content.Context! context, string! libName) -> void
static Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallHelper.UpdateAppInfo(Android.Content.Context! context) -> void
static Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallManagerFactory.Create(Android.Content.Context! context) -> Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallManager!
static Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest.NewBuilder() -> Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest.Builder!
static Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState.Create(int sessionId, int status, int errorCode, long bytesDownloaded, long totalBytesToDownload, System.Collections.Generic.IList<string!>? moduleNames, System.Collections.Generic.IList<string!>? languages) -> Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState?
static Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState.Zzd(Android.OS.Bundle? p0) -> Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState?
static Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManagerFactory.Create(Android.Content.Context? context) -> Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager?
static Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManagerFactory.Create(Android.Content.Context? context, Java.IO.File? modulesDirectory) -> Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager?
static Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManagerFactory.CreateNewInstance(Android.Content.Context? context, Java.IO.File? modulesDirectory) -> Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager?
static Xamarin.Google.Android.Play.Core.Tasks.TaskExecutors.MainThread.get -> Java.Util.Concurrent.IExecutor?
static Xamarin.Google.Android.Play.Core.Tasks.Tasks.Await(Xamarin.Google.Android.Play.Core.Tasks.Task! task) -> Java.Lang.Object?
static Xamarin.Google.Android.Play.Core.Tasks.Tasks.Await(Xamarin.Google.Android.Play.Core.Tasks.Task! task, long timeout, Java.Util.Concurrent.TimeUnit! unit) -> Java.Lang.Object?
static Xamarin.Google.Android.Play.Core.Tasks.Tasks.WhenAll(System.Collections.Generic.ICollection<Xamarin.Google.Android.Play.Core.Tasks.Task!>? tasks) -> Xamarin.Google.Android.Play.Core.Tasks.Task?
static Xamarin.Google.Android.Play.Core.Tasks.Tasks.Zza(Java.Lang.Exception? p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task?
static Xamarin.Google.Android.Play.Core.Tasks.Tasks.Zzb(Java.Lang.Object? p0) -> Xamarin.Google.Android.Play.Core.Tasks.Task?
virtual Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo.AvailableVersionCode() -> int
virtual Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo.BytesDownloaded() -> long
virtual Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo.ClientVersionStalenessDays() -> Java.Lang.Integer?
virtual Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo.InstallStatus() -> int
virtual Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo.IsUpdateTypeAllowed(Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateOptions! appUpdateOptions) -> bool
virtual Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo.IsUpdateTypeAllowed(int updateType) -> bool
virtual Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo.PackageName() -> string!
virtual Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo.TotalBytesToDownload() -> long
virtual Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo.UpdateAvailability() -> int
virtual Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo.UpdatePriority() -> int
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.AppUpdateInfo.get -> Xamarin.Google.Android.Play.Core.Tasks.Task?
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.CompleteUpdate() -> Xamarin.Google.Android.Play.Core.Tasks.Task?
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.DownloadCompletes() -> void
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.DownloadFails() -> void
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.DownloadStarts() -> void
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.InstallCompletes() -> void
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.InstallFails() -> void
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.IsConfirmationDialogVisible.get -> bool
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.IsImmediateFlowVisible.get -> bool
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.IsInstallSplashScreenVisible.get -> bool
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.RegisterListener(Xamarin.Google.Android.Play.Core.Install.IInstallStateUpdatedListener? listener) -> void
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.SetBytesDownloaded(long bytesDownloaded) -> void
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.SetClientVersionStalenessDays(Java.Lang.Integer? clientVersionStaleness) -> void
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.SetInstallErrorCode(int installErrorCode) -> void
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.SetTotalBytesToDownload(long totalBytesToDownload) -> void
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.SetUpdateAvailable(int availableVersionCode) -> void
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.SetUpdateAvailable(int availableVersionCode, int appUpdateType) -> void
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.SetUpdateNotAvailable() -> void
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.SetUpdatePriority(int updatePriority) -> void
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.StartUpdateFlowForResult(Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo? appUpdateInfo, int p1, Android.App.Activity? p2, int appUpdateType) -> bool
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.StartUpdateFlowForResult(Xamarin.Google.Android.Play.Core.AppUpdate.AppUpdateInfo? appUpdateInfo, int p1, Xamarin.Google.Android.Play.Core.Common.IIntentSenderForResultStarter? p2, int appUpdateType) -> bool
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.TypeForUpdateInProgress.get -> Java.Lang.Integer?
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.UnregisterListener(Xamarin.Google.Android.Play.Core.Install.IInstallStateUpdatedListener? listener) -> void
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.UserAcceptsUpdate() -> void
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.UserCancelsDownload() -> void
virtual Xamarin.Google.Android.Play.Core.AppUpdate.Testing.FakeAppUpdateManager.UserRejectsUpdate() -> void
virtual Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStateUpdateListenerWrapper.Listener.get -> Xamarin.Google.Android.Play.Core.AssetPacks.IAssetPackStateUpdateListener?
virtual Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStateUpdateListenerWrapper.SetStateUpdateListener(Xamarin.Google.Android.Play.Core.AssetPacks.AssetPackStateUpdateListenerWrapper.IAssetPackStateListener? listener) -> void
virtual Xamarin.Google.Android.Play.Core.AssetPacks.NativeAssetPackStateUpdateListener.OnStateUpdate(Java.Lang.Object? p0) -> void
virtual Xamarin.Google.Android.Play.Core.MissingSplits.MissingSplitsDetectingApplication.OnCreateCustom() -> void
virtual Xamarin.Google.Android.Play.Core.Review.Testing.FakeReviewManager.LaunchReviewFlow(Android.App.Activity! p0, Xamarin.Google.Android.Play.Core.Review.ReviewInfo! reviewInfo) -> Xamarin.Google.Android.Play.Core.Tasks.Task!
virtual Xamarin.Google.Android.Play.Core.Review.Testing.FakeReviewManager.RequestReviewFlow() -> Xamarin.Google.Android.Play.Core.Tasks.Task!
virtual Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest.Builder.AddLanguage(Java.Util.Locale? language) -> Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest.Builder!
virtual Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest.Builder.AddModule(string? moduleName) -> Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest.Builder?
virtual Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest.Builder.Build() -> Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest!
virtual Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest.Languages.get -> System.Collections.Generic.IList<Java.Util.Locale!>?
virtual Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallRequest.ModuleNames.get -> System.Collections.Generic.IList<string!>?
virtual Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState.HasTerminalStatus.get -> bool
virtual Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState.Languages() -> System.Collections.Generic.IList<string!>!
virtual Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallSessionState.ModuleNames() -> System.Collections.Generic.IList<string!>!
virtual Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallStateUpdatedListenerWrapper.Listener.get -> Xamarin.Google.Android.Play.Core.SplitInstall.ISplitInstallStateUpdatedListener?
virtual Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallStateUpdatedListenerWrapper.SetStateUpdateListener(Xamarin.Google.Android.Play.Core.SplitInstall.SplitInstallStateUpdatedListenerWrapper.IStateUpdateListener? listener) -> void
virtual Xamarin.Google.Android.Play.Core.SplitInstall.Testing.FakeSplitInstallManager.SetShouldNetworkError(bool shouldNetworkError) -> void
