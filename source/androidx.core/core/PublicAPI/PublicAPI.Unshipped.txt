#nullable enable
Android.Support.V4.App.INotificationSideChannel
Android.Support.V4.App.INotificationSideChannel.Cancel(string? packageName, int id, string? tag) -> void
Android.Support.V4.App.INotificationSideChannel.CancelAll(string? packageName) -> void
Android.Support.V4.App.INotificationSideChannel.Descriptor.get -> string?
Android.Support.V4.App.INotificationSideChannel.Notify(string? packageName, int id, string? tag, Android.App.Notification? notification) -> void
Android.Support.V4.App.NotificationSideChannel
Android.Support.V4.App.NotificationSideChannelConsts
Android.Support.V4.App.NotificationSideChannelDefault
Android.Support.V4.App.NotificationSideChannelDefault.InterfaceConsts
Android.Support.V4.App.NotificationSideChannelDefault.NotificationSideChannelDefault() -> void
Android.Support.V4.App.NotificationSideChannelDefault.NotificationSideChannelDefault(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.App.NotificationSideChannelStub
Android.Support.V4.App.NotificationSideChannelStub.InterfaceConsts
Android.Support.V4.App.NotificationSideChannelStub.NotificationSideChannelStub() -> void
Android.Support.V4.App.NotificationSideChannelStub.NotificationSideChannelStub(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.App.NotificationSideChannel_Parcel
Android.Support.V4.App.NotificationSideChannel_Parcel.NotificationSideChannel_Parcel() -> void
Android.Support.V4.App.NotificationSideChannel_Parcel.NotificationSideChannel_Parcel(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.App.RemoteActionCompatParcelizer
Android.Support.V4.App.RemoteActionCompatParcelizer.RemoteActionCompatParcelizer() -> void
Android.Support.V4.Graphics.Drawable.IconCompatParcelizer
Android.Support.V4.Graphics.Drawable.IconCompatParcelizer.IconCompatParcelizer() -> void
Android.Support.V4.OS.IResultReceiver
Android.Support.V4.OS.IResultReceiver.Descriptor.get -> string?
Android.Support.V4.OS.IResultReceiver.Send(int resultCode, Android.OS.Bundle? resultData) -> void
Android.Support.V4.OS.IResultReceiver2
Android.Support.V4.OS.IResultReceiver2.Descriptor.get -> string?
Android.Support.V4.OS.IResultReceiver2.Send(int p0, Android.OS.Bundle? p1) -> void
Android.Support.V4.OS.ResultReceiver
Android.Support.V4.OS.ResultReceiver.ResultReceiver(Android.OS.Handler? handler) -> void
Android.Support.V4.OS.ResultReceiver.ResultReceiver(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.OS.ResultReceiver2
Android.Support.V4.OS.ResultReceiver2Consts
Android.Support.V4.OS.ResultReceiver2Default
Android.Support.V4.OS.ResultReceiver2Default.InterfaceConsts
Android.Support.V4.OS.ResultReceiver2Default.ResultReceiver2Default() -> void
Android.Support.V4.OS.ResultReceiver2Default.ResultReceiver2Default(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.OS.ResultReceiver2Stub
Android.Support.V4.OS.ResultReceiver2Stub.InterfaceConsts
Android.Support.V4.OS.ResultReceiver2Stub.ResultReceiver2Stub() -> void
Android.Support.V4.OS.ResultReceiver2Stub.ResultReceiver2Stub(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.OS.ResultReceiver2_Parcel
Android.Support.V4.OS.ResultReceiver2_Parcel.ResultReceiver2_Parcel() -> void
Android.Support.V4.OS.ResultReceiver2_Parcel.ResultReceiver2_Parcel(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.OS.ResultReceiverDefault
Android.Support.V4.OS.ResultReceiverDefault.InterfaceConsts
Android.Support.V4.OS.ResultReceiverDefault.ResultReceiverDefault() -> void
Android.Support.V4.OS.ResultReceiverDefault.ResultReceiverDefault(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.OS.ResultReceiverStub
Android.Support.V4.OS.ResultReceiverStub.InterfaceConsts
Android.Support.V4.OS.ResultReceiverStub.ResultReceiverStub() -> void
Android.Support.V4.OS.ResultReceiverStub.ResultReceiverStub(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.OS.ResultReceiver_Parcel
Android.Support.V4.OS.ResultReceiver_Parcel.ResultReceiver_Parcel() -> void
Android.Support.V4.OS.ResultReceiver_Parcel.ResultReceiver_Parcel(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.AccessibilityService.AccessibilityServiceInfoCompat
AndroidX.Core.App.ActivityCompat
AndroidX.Core.App.ActivityCompat.ActivityCompat() -> void
AndroidX.Core.App.ActivityCompat.ActivityCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.ActivityCompat.IOnRequestPermissionsResultCallback
AndroidX.Core.App.ActivityCompat.IOnRequestPermissionsResultCallback.OnRequestPermissionsResult(int requestCode, string![]? permissions, Android.Content.PM.Permission[]? grantResults) -> void
AndroidX.Core.App.ActivityCompat.IPermissionCompatDelegate
AndroidX.Core.App.ActivityCompat.IPermissionCompatDelegate.OnActivityResult(Android.App.Activity? activity, int requestCode, int resultCode, Android.Content.Intent? data) -> bool
AndroidX.Core.App.ActivityCompat.IPermissionCompatDelegate.RequestPermissions(Android.App.Activity? activity, string![]? permissions, int requestCode) -> bool
AndroidX.Core.App.ActivityCompat.IRequestPermissionsRequestCodeValidator
AndroidX.Core.App.ActivityCompat.IRequestPermissionsRequestCodeValidator.ValidateRequestPermissionsRequestCode(int requestCode) -> void
AndroidX.Core.App.ActivityManagerCompat
AndroidX.Core.App.ActivityOptionsCompat
AndroidX.Core.App.ActivityOptionsCompat.ActivityOptionsCompat() -> void
AndroidX.Core.App.ActivityOptionsCompat.ActivityOptionsCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.ActivityOptionsCompat.IBackgroundActivityStartMode
AndroidX.Core.App.AlarmManagerCompat
AndroidX.Core.App.AppComponentFactory
AndroidX.Core.App.AppComponentFactory.AppComponentFactory() -> void
AndroidX.Core.App.AppComponentFactory.AppComponentFactory(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.AppLaunchChecker
AndroidX.Core.App.AppLaunchChecker.AppLaunchChecker() -> void
AndroidX.Core.App.AppLaunchChecker.AppLaunchChecker(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.AppLocalesStorageHelper
AndroidX.Core.App.AppLocalesStorageHelper.AppLocalesStorageHelper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.AppOpsManagerCompat
AndroidX.Core.App.BundleCompat
AndroidX.Core.App.ComponentActivity
AndroidX.Core.App.ComponentActivity.ComponentActivity() -> void
AndroidX.Core.App.ComponentActivity.ComponentActivity(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.ComponentActivity.ExtraData
AndroidX.Core.App.ComponentActivity.ExtraData.ExtraData() -> void
AndroidX.Core.App.ComponentActivity.ExtraData.ExtraData(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.ComponentActivity.ShouldDumpInternalState(string![]? args) -> bool
AndroidX.Core.App.CoreComponentFactory
AndroidX.Core.App.CoreComponentFactory.CoreComponentFactory() -> void
AndroidX.Core.App.CoreComponentFactory.CoreComponentFactory(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.CoreComponentFactory.ICompatWrapped
AndroidX.Core.App.CoreComponentFactory.ICompatWrapped.Wrapper.get -> Java.Lang.Object?
AndroidX.Core.App.DialogCompat
AndroidX.Core.App.DialogCompat.DialogCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.FrameMetricsAggregator
AndroidX.Core.App.FrameMetricsAggregator.FrameMetricsAggregator() -> void
AndroidX.Core.App.FrameMetricsAggregator.FrameMetricsAggregator(int metricTypeFlags) -> void
AndroidX.Core.App.FrameMetricsAggregator.FrameMetricsAggregator(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.FrameMetricsAggregator.IMetricType
AndroidX.Core.App.GrammaticalInflectionManagerCompat
AndroidX.Core.App.GrammaticalInflectionManagerCompat.IGrammaticalGender
AndroidX.Core.App.INotificationBuilderWithBuilderAccessor
AndroidX.Core.App.INotificationBuilderWithBuilderAccessor.Builder.get -> Android.App.Notification.Builder?
AndroidX.Core.App.IOnMultiWindowModeChangedProvider
AndroidX.Core.App.IOnMultiWindowModeChangedProvider.AddOnMultiWindowModeChangedListener(AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Core.App.IOnMultiWindowModeChangedProvider.RemoveOnMultiWindowModeChangedListener(AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Core.App.IOnNewIntentProvider
AndroidX.Core.App.IOnNewIntentProvider.AddOnNewIntentListener(AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Core.App.IOnNewIntentProvider.RemoveOnNewIntentListener(AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Core.App.IOnPictureInPictureModeChangedProvider
AndroidX.Core.App.IOnPictureInPictureModeChangedProvider.AddOnPictureInPictureModeChangedListener(AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Core.App.IOnPictureInPictureModeChangedProvider.RemoveOnPictureInPictureModeChangedListener(AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Core.App.IOnUserLeaveHintProvider
AndroidX.Core.App.IOnUserLeaveHintProvider.AddOnUserLeaveHintListener(Java.Lang.IRunnable! listener) -> void
AndroidX.Core.App.IOnUserLeaveHintProvider.RemoveOnUserLeaveHintListener(Java.Lang.IRunnable! listener) -> void
AndroidX.Core.App.JobIntentService
AndroidX.Core.App.JobIntentService.JobIntentService() -> void
AndroidX.Core.App.JobIntentService.JobIntentService(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.LocaleManagerCompat
AndroidX.Core.App.MultiWindowModeChangedInfo
AndroidX.Core.App.MultiWindowModeChangedInfo.IsInMultiWindowMode.get -> bool
AndroidX.Core.App.MultiWindowModeChangedInfo.MultiWindowModeChangedInfo(bool isInMultiWindowMode) -> void
AndroidX.Core.App.MultiWindowModeChangedInfo.MultiWindowModeChangedInfo(bool isInMultiWindowMode, Android.Content.Res.Configuration! newConfig) -> void
AndroidX.Core.App.MultiWindowModeChangedInfo.NewConfig.get -> Android.Content.Res.Configuration!
AndroidX.Core.App.NavUtils
AndroidX.Core.App.NotificationChannelCompat
AndroidX.Core.App.NotificationChannelCompat.Builder
AndroidX.Core.App.NotificationChannelCompat.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationChannelCompat.Builder.Builder(string? id, int importance) -> void
AndroidX.Core.App.NotificationChannelCompat.Builder.SetName(string? name) -> AndroidX.Core.App.NotificationChannelCompat.Builder?
AndroidX.Core.App.NotificationChannelCompat.Name.get -> string?
AndroidX.Core.App.NotificationChannelCompat.NotificationChannelCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationChannelGroupCompat
AndroidX.Core.App.NotificationChannelGroupCompat.Builder
AndroidX.Core.App.NotificationChannelGroupCompat.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationChannelGroupCompat.Builder.Builder(string? id) -> void
AndroidX.Core.App.NotificationChannelGroupCompat.Builder.SetName(string? name) -> AndroidX.Core.App.NotificationChannelGroupCompat.Builder?
AndroidX.Core.App.NotificationChannelGroupCompat.Name.get -> string?
AndroidX.Core.App.NotificationChannelGroupCompat.NotificationChannelGroupCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationCompat
AndroidX.Core.App.NotificationCompat.Action
AndroidX.Core.App.NotificationCompat.Action.Action(AndroidX.Core.Graphics.Drawable.IconCompat? icon, Java.Lang.ICharSequence? title, Android.App.PendingIntent? intent) -> void
AndroidX.Core.App.NotificationCompat.Action.Action(AndroidX.Core.Graphics.Drawable.IconCompat? icon, string? title, Android.App.PendingIntent? intent) -> void
AndroidX.Core.App.NotificationCompat.Action.Action(int icon, Java.Lang.ICharSequence? title, Android.App.PendingIntent? intent) -> void
AndroidX.Core.App.NotificationCompat.Action.Action(int icon, string? title, Android.App.PendingIntent? intent) -> void
AndroidX.Core.App.NotificationCompat.Action.Action(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationCompat.Action.ActionIntentData.get -> Android.App.PendingIntent?
AndroidX.Core.App.NotificationCompat.Action.ActionIntentData.set -> void
AndroidX.Core.App.NotificationCompat.Action.Builder
AndroidX.Core.App.NotificationCompat.Action.Builder.AddExtras(Android.OS.Bundle? extras) -> AndroidX.Core.App.NotificationCompat.Action.Builder?
AndroidX.Core.App.NotificationCompat.Action.Builder.AddRemoteInput(AndroidX.Core.App.RemoteInput? remoteInput) -> AndroidX.Core.App.NotificationCompat.Action.Builder?
AndroidX.Core.App.NotificationCompat.Action.Builder.Api31Impl
AndroidX.Core.App.NotificationCompat.Action.Builder.Api31Impl.Api31Impl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationCompat.Action.Builder.Build() -> AndroidX.Core.App.NotificationCompat.Action?
AndroidX.Core.App.NotificationCompat.Action.Builder.Builder(AndroidX.Core.App.NotificationCompat.Action? action) -> void
AndroidX.Core.App.NotificationCompat.Action.Builder.Builder(AndroidX.Core.Graphics.Drawable.IconCompat? icon, Java.Lang.ICharSequence? title, Android.App.PendingIntent? intent) -> void
AndroidX.Core.App.NotificationCompat.Action.Builder.Builder(AndroidX.Core.Graphics.Drawable.IconCompat? icon, string? title, Android.App.PendingIntent? intent) -> void
AndroidX.Core.App.NotificationCompat.Action.Builder.Builder(int icon, Java.Lang.ICharSequence? title, Android.App.PendingIntent? intent) -> void
AndroidX.Core.App.NotificationCompat.Action.Builder.Builder(int icon, string? title, Android.App.PendingIntent? intent) -> void
AndroidX.Core.App.NotificationCompat.Action.Builder.Extend(AndroidX.Core.App.NotificationCompat.Action.IExtender? extender) -> AndroidX.Core.App.NotificationCompat.Action.Builder?
AndroidX.Core.App.NotificationCompat.Action.Builder.Extras.get -> Android.OS.Bundle?
AndroidX.Core.App.NotificationCompat.Action.Builder.SetAllowGeneratedReplies(bool allowGeneratedReplies) -> AndroidX.Core.App.NotificationCompat.Action.Builder?
AndroidX.Core.App.NotificationCompat.Action.Builder.SetAuthenticationRequired(bool authenticationRequired) -> AndroidX.Core.App.NotificationCompat.Action.Builder?
AndroidX.Core.App.NotificationCompat.Action.Builder.SetContextual(bool isContextual) -> AndroidX.Core.App.NotificationCompat.Action.Builder?
AndroidX.Core.App.NotificationCompat.Action.Builder.SetSemanticAction(int semanticAction) -> AndroidX.Core.App.NotificationCompat.Action.Builder?
AndroidX.Core.App.NotificationCompat.Action.Builder.SetShowsUserInterface(bool showsUserInterface) -> AndroidX.Core.App.NotificationCompat.Action.Builder?
AndroidX.Core.App.NotificationCompat.Action.IExtender
AndroidX.Core.App.NotificationCompat.Action.IExtender.Extend(AndroidX.Core.App.NotificationCompat.Action.Builder? builder) -> AndroidX.Core.App.NotificationCompat.Action.Builder?
AndroidX.Core.App.NotificationCompat.Action.ISemanticAction
AndroidX.Core.App.NotificationCompat.Action.IconData.get -> int
AndroidX.Core.App.NotificationCompat.Action.IconData.set -> void
AndroidX.Core.App.NotificationCompat.Action.Title.get -> string?
AndroidX.Core.App.NotificationCompat.Action.TitleData.get -> Java.Lang.ICharSequence?
AndroidX.Core.App.NotificationCompat.Action.TitleData.set -> void
AndroidX.Core.App.NotificationCompat.Action.WearableExtender
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.CancelLabel.get -> string?
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.CancelLabelFormatted.get -> Java.Lang.ICharSequence?
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.Clone() -> AndroidX.Core.App.NotificationCompat.Action.WearableExtender?
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.ConfirmLabel.get -> string?
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.ConfirmLabelFormatted.get -> Java.Lang.ICharSequence?
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.Extend(AndroidX.Core.App.NotificationCompat.Action.Builder? builder) -> AndroidX.Core.App.NotificationCompat.Action.Builder?
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.HintDisplayActionInline.get -> bool
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.HintLaunchesActivity.get -> bool
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.InProgressLabel.get -> string?
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.InProgressLabelFormatted.get -> Java.Lang.ICharSequence?
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.IsAvailableOffline.get -> bool
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.SetAvailableOffline(bool availableOffline) -> AndroidX.Core.App.NotificationCompat.Action.WearableExtender?
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.SetCancelLabel(Java.Lang.ICharSequence? label) -> AndroidX.Core.App.NotificationCompat.Action.WearableExtender?
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.SetCancelLabel(string? label) -> AndroidX.Core.App.NotificationCompat.Action.WearableExtender?
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.SetConfirmLabel(Java.Lang.ICharSequence? label) -> AndroidX.Core.App.NotificationCompat.Action.WearableExtender?
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.SetConfirmLabel(string? label) -> AndroidX.Core.App.NotificationCompat.Action.WearableExtender?
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.SetHintDisplayActionInline(bool hintDisplayInline) -> AndroidX.Core.App.NotificationCompat.Action.WearableExtender?
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.SetHintLaunchesActivity(bool hintLaunchesActivity) -> AndroidX.Core.App.NotificationCompat.Action.WearableExtender?
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.SetInProgressLabel(Java.Lang.ICharSequence? label) -> AndroidX.Core.App.NotificationCompat.Action.WearableExtender?
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.SetInProgressLabel(string? label) -> AndroidX.Core.App.NotificationCompat.Action.WearableExtender?
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.WearableExtender() -> void
AndroidX.Core.App.NotificationCompat.Action.WearableExtender.WearableExtender(AndroidX.Core.App.NotificationCompat.Action? action) -> void
AndroidX.Core.App.NotificationCompat.BigPictureStyle
AndroidX.Core.App.NotificationCompat.BigPictureStyle.BigPictureStyle() -> void
AndroidX.Core.App.NotificationCompat.BigPictureStyle.BigPictureStyle(AndroidX.Core.App.NotificationCompat.Builder? builder) -> void
AndroidX.Core.App.NotificationCompat.BigPictureStyle.BigPictureStyle(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationCompat.BigPictureStyle.SetBigContentTitle(string? title) -> AndroidX.Core.App.NotificationCompat.BigPictureStyle?
AndroidX.Core.App.NotificationCompat.BigPictureStyle.SetContentDescription(string? contentDescription) -> AndroidX.Core.App.NotificationCompat.BigPictureStyle?
AndroidX.Core.App.NotificationCompat.BigPictureStyle.SetSummaryText(string? cs) -> AndroidX.Core.App.NotificationCompat.BigPictureStyle?
AndroidX.Core.App.NotificationCompat.BigTextStyle
AndroidX.Core.App.NotificationCompat.BigTextStyle.BigText(string? cs) -> AndroidX.Core.App.NotificationCompat.BigTextStyle?
AndroidX.Core.App.NotificationCompat.BigTextStyle.BigTextStyle() -> void
AndroidX.Core.App.NotificationCompat.BigTextStyle.BigTextStyle(AndroidX.Core.App.NotificationCompat.Builder? builder) -> void
AndroidX.Core.App.NotificationCompat.BigTextStyle.BigTextStyle(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationCompat.BigTextStyle.SetBigContentTitle(string? title) -> AndroidX.Core.App.NotificationCompat.BigTextStyle?
AndroidX.Core.App.NotificationCompat.BigTextStyle.SetSummaryText(string? cs) -> AndroidX.Core.App.NotificationCompat.BigTextStyle?
AndroidX.Core.App.NotificationCompat.BubbleMetadata
AndroidX.Core.App.NotificationCompat.BubbleMetadata.AutoExpandBubble.get -> bool
AndroidX.Core.App.NotificationCompat.BubbleMetadata.Builder
AndroidX.Core.App.NotificationCompat.BubbleMetadata.Builder.Build() -> AndroidX.Core.App.NotificationCompat.BubbleMetadata?
AndroidX.Core.App.NotificationCompat.BubbleMetadata.Builder.Builder() -> void
AndroidX.Core.App.NotificationCompat.BubbleMetadata.Builder.Builder(Android.App.PendingIntent? intent, AndroidX.Core.Graphics.Drawable.IconCompat? icon) -> void
AndroidX.Core.App.NotificationCompat.BubbleMetadata.Builder.Builder(string? shortcutId) -> void
AndroidX.Core.App.NotificationCompat.BubbleMetadata.Builder.SetAutoExpandBubble(bool shouldExpand) -> AndroidX.Core.App.NotificationCompat.BubbleMetadata.Builder?
AndroidX.Core.App.NotificationCompat.BubbleMetadata.Builder.SetDeleteIntent(Android.App.PendingIntent? deleteIntent) -> AndroidX.Core.App.NotificationCompat.BubbleMetadata.Builder?
AndroidX.Core.App.NotificationCompat.BubbleMetadata.Builder.SetDesiredHeight(int height) -> AndroidX.Core.App.NotificationCompat.BubbleMetadata.Builder?
AndroidX.Core.App.NotificationCompat.BubbleMetadata.Builder.SetDesiredHeightResId(int heightResId) -> AndroidX.Core.App.NotificationCompat.BubbleMetadata.Builder?
AndroidX.Core.App.NotificationCompat.BubbleMetadata.Builder.SetIcon(AndroidX.Core.Graphics.Drawable.IconCompat? icon) -> AndroidX.Core.App.NotificationCompat.BubbleMetadata.Builder?
AndroidX.Core.App.NotificationCompat.BubbleMetadata.Builder.SetIntent(Android.App.PendingIntent? intent) -> AndroidX.Core.App.NotificationCompat.BubbleMetadata.Builder?
AndroidX.Core.App.NotificationCompat.BubbleMetadata.Builder.SetSuppressNotification(bool shouldSuppressNotif) -> AndroidX.Core.App.NotificationCompat.BubbleMetadata.Builder?
AndroidX.Core.App.NotificationCompat.BubbleMetadata.DeleteIntent.get -> Android.App.PendingIntent?
AndroidX.Core.App.NotificationCompat.BubbleMetadata.DesiredHeight.get -> int
AndroidX.Core.App.NotificationCompat.BubbleMetadata.DesiredHeightResId.get -> int
AndroidX.Core.App.NotificationCompat.BubbleMetadata.Icon.get -> AndroidX.Core.Graphics.Drawable.IconCompat?
AndroidX.Core.App.NotificationCompat.BubbleMetadata.Intent.get -> Android.App.PendingIntent?
AndroidX.Core.App.NotificationCompat.BubbleMetadata.IsNotificationSuppressed.get -> bool
AndroidX.Core.App.NotificationCompat.BubbleMetadata.SetFlags(int flags) -> void
AndroidX.Core.App.NotificationCompat.BubbleMetadata.ShortcutId.get -> string?
AndroidX.Core.App.NotificationCompat.Builder
AndroidX.Core.App.NotificationCompat.Builder.AddAction(int icon, string? title, Android.App.PendingIntent? intent) -> AndroidX.Core.App.NotificationCompat.Builder?
AndroidX.Core.App.NotificationCompat.Builder.AddInvisibleAction(int icon, string? title, Android.App.PendingIntent? intent) -> AndroidX.Core.App.NotificationCompat.Builder?
AndroidX.Core.App.NotificationCompat.Builder.Builder(Android.Content.Context? context) -> void
AndroidX.Core.App.NotificationCompat.Builder.Builder(Android.Content.Context? context, Android.App.Notification? notification) -> void
AndroidX.Core.App.NotificationCompat.Builder.Builder(Android.Content.Context? context, string? channelId) -> void
AndroidX.Core.App.NotificationCompat.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationCompat.Builder.MActions.get -> System.Collections.IList?
AndroidX.Core.App.NotificationCompat.Builder.MActions.set -> void
AndroidX.Core.App.NotificationCompat.Builder.MContext.get -> Android.Content.Context?
AndroidX.Core.App.NotificationCompat.Builder.MContext.set -> void
AndroidX.Core.App.NotificationCompat.Builder.MPeople.get -> System.Collections.IList?
AndroidX.Core.App.NotificationCompat.Builder.MPeople.set -> void
AndroidX.Core.App.NotificationCompat.Builder.MPersonList.get -> System.Collections.IList?
AndroidX.Core.App.NotificationCompat.Builder.MPersonList.set -> void
AndroidX.Core.App.NotificationCompat.Builder.SetContentInfo(string? info) -> AndroidX.Core.App.NotificationCompat.Builder?
AndroidX.Core.App.NotificationCompat.Builder.SetContentText(string? text) -> AndroidX.Core.App.NotificationCompat.Builder?
AndroidX.Core.App.NotificationCompat.Builder.SetContentTitle(string? title) -> AndroidX.Core.App.NotificationCompat.Builder?
AndroidX.Core.App.NotificationCompat.Builder.SetRemoteInputHistory(string![]? text) -> AndroidX.Core.App.NotificationCompat.Builder?
AndroidX.Core.App.NotificationCompat.Builder.SetSettingsText(string? text) -> AndroidX.Core.App.NotificationCompat.Builder?
AndroidX.Core.App.NotificationCompat.Builder.SetSubText(string? text) -> AndroidX.Core.App.NotificationCompat.Builder?
AndroidX.Core.App.NotificationCompat.Builder.SetTicker(string? tickerText) -> AndroidX.Core.App.NotificationCompat.Builder?
AndroidX.Core.App.NotificationCompat.Builder.SetTicker(string? tickerText, Android.Widget.RemoteViews? views) -> AndroidX.Core.App.NotificationCompat.Builder?
AndroidX.Core.App.NotificationCompat.CallStyle
AndroidX.Core.App.NotificationCompat.CallStyle.Api31Impl
AndroidX.Core.App.NotificationCompat.CallStyle.Api31Impl.Api31Impl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationCompat.CallStyle.CallStyle() -> void
AndroidX.Core.App.NotificationCompat.CallStyle.CallStyle(AndroidX.Core.App.NotificationCompat.Builder? builder) -> void
AndroidX.Core.App.NotificationCompat.CallStyle.CallStyle(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationCompat.CallStyle.ICallType
AndroidX.Core.App.NotificationCompat.CallStyle.SetVerificationText(string? verificationText) -> AndroidX.Core.App.NotificationCompat.CallStyle?
AndroidX.Core.App.NotificationCompat.CarExtender
AndroidX.Core.App.NotificationCompat.CarExtender.CarExtender() -> void
AndroidX.Core.App.NotificationCompat.CarExtender.CarExtender(Android.App.Notification? notification) -> void
AndroidX.Core.App.NotificationCompat.CarExtender.Color.get -> int
AndroidX.Core.App.NotificationCompat.CarExtender.Extend(AndroidX.Core.App.NotificationCompat.Builder? builder) -> AndroidX.Core.App.NotificationCompat.Builder?
AndroidX.Core.App.NotificationCompat.CarExtender.GetUnreadConversation() -> AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation?
AndroidX.Core.App.NotificationCompat.CarExtender.LargeIcon.get -> Android.Graphics.Bitmap?
AndroidX.Core.App.NotificationCompat.CarExtender.SetColor(int color) -> AndroidX.Core.App.NotificationCompat.CarExtender?
AndroidX.Core.App.NotificationCompat.CarExtender.SetLargeIcon(Android.Graphics.Bitmap? largeIcon) -> AndroidX.Core.App.NotificationCompat.CarExtender?
AndroidX.Core.App.NotificationCompat.CarExtender.SetUnreadConversation(AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation? unreadConversation) -> AndroidX.Core.App.NotificationCompat.CarExtender?
AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation
AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.Builder
AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.Builder.Builder(string? name) -> void
AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.UnreadConversation(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationCompat.DecoratedCustomViewStyle
AndroidX.Core.App.NotificationCompat.DecoratedCustomViewStyle.DecoratedCustomViewStyle() -> void
AndroidX.Core.App.NotificationCompat.DecoratedCustomViewStyle.DecoratedCustomViewStyle(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationCompat.IBadgeIconType
AndroidX.Core.App.NotificationCompat.IExtender
AndroidX.Core.App.NotificationCompat.IExtender.Extend(AndroidX.Core.App.NotificationCompat.Builder? builder) -> AndroidX.Core.App.NotificationCompat.Builder?
AndroidX.Core.App.NotificationCompat.IGroupAlertBehavior
AndroidX.Core.App.NotificationCompat.INotificationVisibility
AndroidX.Core.App.NotificationCompat.IServiceNotificationBehavior
AndroidX.Core.App.NotificationCompat.IStreamType
AndroidX.Core.App.NotificationCompat.InboxStyle
AndroidX.Core.App.NotificationCompat.InboxStyle.AddLine(string? cs) -> AndroidX.Core.App.NotificationCompat.InboxStyle?
AndroidX.Core.App.NotificationCompat.InboxStyle.InboxStyle() -> void
AndroidX.Core.App.NotificationCompat.InboxStyle.InboxStyle(AndroidX.Core.App.NotificationCompat.Builder? builder) -> void
AndroidX.Core.App.NotificationCompat.InboxStyle.InboxStyle(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationCompat.InboxStyle.SetBigContentTitle(string? title) -> AndroidX.Core.App.NotificationCompat.InboxStyle?
AndroidX.Core.App.NotificationCompat.InboxStyle.SetSummaryText(string? cs) -> AndroidX.Core.App.NotificationCompat.InboxStyle?
AndroidX.Core.App.NotificationCompat.MessagingStyle
AndroidX.Core.App.NotificationCompat.MessagingStyle.AddMessage(string? text, long timestamp, AndroidX.Core.App.Person? person) -> AndroidX.Core.App.NotificationCompat.MessagingStyle?
AndroidX.Core.App.NotificationCompat.MessagingStyle.AddMessage(string? text, long timestamp, string? sender) -> AndroidX.Core.App.NotificationCompat.MessagingStyle?
AndroidX.Core.App.NotificationCompat.MessagingStyle.ConversationTitle.get -> string?
AndroidX.Core.App.NotificationCompat.MessagingStyle.Message
AndroidX.Core.App.NotificationCompat.MessagingStyle.Message.DataMimeType.get -> string?
AndroidX.Core.App.NotificationCompat.MessagingStyle.Message.DataUri.get -> Android.Net.Uri?
AndroidX.Core.App.NotificationCompat.MessagingStyle.Message.Extras.get -> Android.OS.Bundle?
AndroidX.Core.App.NotificationCompat.MessagingStyle.Message.Message(Java.Lang.ICharSequence? text, long timestamp, AndroidX.Core.App.Person? person) -> void
AndroidX.Core.App.NotificationCompat.MessagingStyle.Message.Message(Java.Lang.ICharSequence? text, long timestamp, Java.Lang.ICharSequence? sender) -> void
AndroidX.Core.App.NotificationCompat.MessagingStyle.Message.Message(string? text, long timestamp, AndroidX.Core.App.Person? person) -> void
AndroidX.Core.App.NotificationCompat.MessagingStyle.Message.Message(string? text, long timestamp, string? sender) -> void
AndroidX.Core.App.NotificationCompat.MessagingStyle.Message.Person.get -> AndroidX.Core.App.Person?
AndroidX.Core.App.NotificationCompat.MessagingStyle.Message.Sender.get -> string?
AndroidX.Core.App.NotificationCompat.MessagingStyle.Message.SenderFormatted.get -> Java.Lang.ICharSequence?
AndroidX.Core.App.NotificationCompat.MessagingStyle.Message.SetData(string? dataMimeType, Android.Net.Uri? dataUri) -> AndroidX.Core.App.NotificationCompat.MessagingStyle.Message?
AndroidX.Core.App.NotificationCompat.MessagingStyle.Message.Text.get -> string?
AndroidX.Core.App.NotificationCompat.MessagingStyle.Message.TextFormatted.get -> Java.Lang.ICharSequence?
AndroidX.Core.App.NotificationCompat.MessagingStyle.Message.Timestamp.get -> long
AndroidX.Core.App.NotificationCompat.MessagingStyle.MessagingStyle(AndroidX.Core.App.Person? user) -> void
AndroidX.Core.App.NotificationCompat.MessagingStyle.MessagingStyle(Java.Lang.ICharSequence? userDisplayName) -> void
AndroidX.Core.App.NotificationCompat.MessagingStyle.MessagingStyle(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationCompat.MessagingStyle.MessagingStyle(string? userDisplayName) -> void
AndroidX.Core.App.NotificationCompat.MessagingStyle.SetConversationTitle(string? conversationTitle) -> AndroidX.Core.App.NotificationCompat.MessagingStyle?
AndroidX.Core.App.NotificationCompat.MessagingStyle.UserDisplayName.get -> string?
AndroidX.Core.App.NotificationCompat.NotificationCompat() -> void
AndroidX.Core.App.NotificationCompat.NotificationCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationCompat.ProgressStyle
AndroidX.Core.App.NotificationCompat.ProgressStyle.Point
AndroidX.Core.App.NotificationCompat.ProgressStyle.Point.Color.get -> int
AndroidX.Core.App.NotificationCompat.ProgressStyle.Point.Id.get -> int
AndroidX.Core.App.NotificationCompat.ProgressStyle.Point.Point(int position) -> void
AndroidX.Core.App.NotificationCompat.ProgressStyle.Point.Position.get -> int
AndroidX.Core.App.NotificationCompat.ProgressStyle.Point.SetColor(int color) -> AndroidX.Core.App.NotificationCompat.ProgressStyle.Point?
AndroidX.Core.App.NotificationCompat.ProgressStyle.Point.SetId(int id) -> AndroidX.Core.App.NotificationCompat.ProgressStyle.Point?
AndroidX.Core.App.NotificationCompat.ProgressStyle.ProgressStyle() -> void
AndroidX.Core.App.NotificationCompat.ProgressStyle.ProgressStyle(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationCompat.ProgressStyle.Segment
AndroidX.Core.App.NotificationCompat.ProgressStyle.Segment.Color.get -> int
AndroidX.Core.App.NotificationCompat.ProgressStyle.Segment.Id.get -> int
AndroidX.Core.App.NotificationCompat.ProgressStyle.Segment.Length.get -> int
AndroidX.Core.App.NotificationCompat.ProgressStyle.Segment.Segment(int length) -> void
AndroidX.Core.App.NotificationCompat.ProgressStyle.Segment.SetColor(int color) -> AndroidX.Core.App.NotificationCompat.ProgressStyle.Segment?
AndroidX.Core.App.NotificationCompat.ProgressStyle.Segment.SetId(int id) -> AndroidX.Core.App.NotificationCompat.ProgressStyle.Segment?
AndroidX.Core.App.NotificationCompat.Style
AndroidX.Core.App.NotificationCompat.Style.MBuilder.get -> AndroidX.Core.App.NotificationCompat.Builder?
AndroidX.Core.App.NotificationCompat.Style.MBuilder.set -> void
AndroidX.Core.App.NotificationCompat.Style.Style() -> void
AndroidX.Core.App.NotificationCompat.Style.Style(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationCompat.TvExtender
AndroidX.Core.App.NotificationCompat.TvExtender.ChannelId.get -> string?
AndroidX.Core.App.NotificationCompat.TvExtender.ContentIntent.get -> Android.App.PendingIntent?
AndroidX.Core.App.NotificationCompat.TvExtender.DeleteIntent.get -> Android.App.PendingIntent?
AndroidX.Core.App.NotificationCompat.TvExtender.Extend(AndroidX.Core.App.NotificationCompat.Builder? builder) -> AndroidX.Core.App.NotificationCompat.Builder?
AndroidX.Core.App.NotificationCompat.TvExtender.IsAvailableOnTv.get -> bool
AndroidX.Core.App.NotificationCompat.TvExtender.IsSuppressShowOverApps.get -> bool
AndroidX.Core.App.NotificationCompat.TvExtender.SetChannelId(string? channelId) -> AndroidX.Core.App.NotificationCompat.TvExtender?
AndroidX.Core.App.NotificationCompat.TvExtender.SetContentIntent(Android.App.PendingIntent? intent) -> AndroidX.Core.App.NotificationCompat.TvExtender?
AndroidX.Core.App.NotificationCompat.TvExtender.SetDeleteIntent(Android.App.PendingIntent? intent) -> AndroidX.Core.App.NotificationCompat.TvExtender?
AndroidX.Core.App.NotificationCompat.TvExtender.SetSuppressShowOverApps(bool suppress) -> AndroidX.Core.App.NotificationCompat.TvExtender?
AndroidX.Core.App.NotificationCompat.TvExtender.TvExtender() -> void
AndroidX.Core.App.NotificationCompat.TvExtender.TvExtender(Android.App.Notification? notif) -> void
AndroidX.Core.App.NotificationCompat.WearableExtender
AndroidX.Core.App.NotificationCompat.WearableExtender.Actions.get -> System.Collections.Generic.IList<AndroidX.Core.App.NotificationCompat.Action!>?
AndroidX.Core.App.NotificationCompat.WearableExtender.AddAction(AndroidX.Core.App.NotificationCompat.Action? action) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.AddActions(System.Collections.Generic.IList<AndroidX.Core.App.NotificationCompat.Action!>? actions) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.AddPage(Android.App.Notification? page) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.AddPages(System.Collections.Generic.IList<Android.App.Notification!>? pages) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.Api31Impl
AndroidX.Core.App.NotificationCompat.WearableExtender.Api31Impl.Api31Impl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationCompat.WearableExtender.Background.get -> Android.Graphics.Bitmap?
AndroidX.Core.App.NotificationCompat.WearableExtender.BridgeTag.get -> string?
AndroidX.Core.App.NotificationCompat.WearableExtender.ClearActions() -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.ClearPages() -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.Clone() -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.ContentAction.get -> int
AndroidX.Core.App.NotificationCompat.WearableExtender.ContentIcon.get -> int
AndroidX.Core.App.NotificationCompat.WearableExtender.ContentIconGravity.get -> int
AndroidX.Core.App.NotificationCompat.WearableExtender.ContentIntentAvailableOffline.get -> bool
AndroidX.Core.App.NotificationCompat.WearableExtender.CustomContentHeight.get -> int
AndroidX.Core.App.NotificationCompat.WearableExtender.CustomSizePreset.get -> int
AndroidX.Core.App.NotificationCompat.WearableExtender.DismissalId.get -> string?
AndroidX.Core.App.NotificationCompat.WearableExtender.DisplayIntent.get -> Android.App.PendingIntent?
AndroidX.Core.App.NotificationCompat.WearableExtender.Extend(AndroidX.Core.App.NotificationCompat.Builder? builder) -> AndroidX.Core.App.NotificationCompat.Builder?
AndroidX.Core.App.NotificationCompat.WearableExtender.Gravity.get -> int
AndroidX.Core.App.NotificationCompat.WearableExtender.HintAmbientBigPicture.get -> bool
AndroidX.Core.App.NotificationCompat.WearableExtender.HintAvoidBackgroundClipping.get -> bool
AndroidX.Core.App.NotificationCompat.WearableExtender.HintContentIntentLaunchesActivity.get -> bool
AndroidX.Core.App.NotificationCompat.WearableExtender.HintHideIcon.get -> bool
AndroidX.Core.App.NotificationCompat.WearableExtender.HintScreenTimeout.get -> int
AndroidX.Core.App.NotificationCompat.WearableExtender.HintShowBackgroundOnly.get -> bool
AndroidX.Core.App.NotificationCompat.WearableExtender.Pages.get -> System.Collections.Generic.IList<Android.App.Notification!>?
AndroidX.Core.App.NotificationCompat.WearableExtender.SetBackground(Android.Graphics.Bitmap? background) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.SetBridgeTag(string? bridgeTag) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.SetContentAction(int actionIndex) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.SetContentIcon(int icon) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.SetContentIconGravity(int contentIconGravity) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.SetContentIntentAvailableOffline(bool contentIntentAvailableOffline) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.SetCustomContentHeight(int height) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.SetCustomSizePreset(int sizePreset) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.SetDismissalId(string? dismissalId) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.SetDisplayIntent(Android.App.PendingIntent? intent) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.SetGravity(int gravity) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.SetHintAmbientBigPicture(bool hintAmbientBigPicture) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.SetHintAvoidBackgroundClipping(bool hintAvoidBackgroundClipping) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.SetHintContentIntentLaunchesActivity(bool hintContentIntentLaunchesActivity) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.SetHintHideIcon(bool hintHideIcon) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.SetHintScreenTimeout(int timeout) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.SetHintShowBackgroundOnly(bool hintShowBackgroundOnly) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.SetStartScrollBottom(bool startScrollBottom) -> AndroidX.Core.App.NotificationCompat.WearableExtender?
AndroidX.Core.App.NotificationCompat.WearableExtender.StartScrollBottom.get -> bool
AndroidX.Core.App.NotificationCompat.WearableExtender.WearableExtender() -> void
AndroidX.Core.App.NotificationCompat.WearableExtender.WearableExtender(Android.App.Notification? notification) -> void
AndroidX.Core.App.NotificationCompatExtras
AndroidX.Core.App.NotificationCompatSideChannelService
AndroidX.Core.App.NotificationCompatSideChannelService.NotificationCompatSideChannelService() -> void
AndroidX.Core.App.NotificationCompatSideChannelService.NotificationCompatSideChannelService(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationManagerCompat
AndroidX.Core.App.NotificationManagerCompat.ActiveNotifications.get -> System.Collections.Generic.IList<Android.Service.Notification.StatusBarNotification!>?
AndroidX.Core.App.NotificationManagerCompat.AreNotificationsEnabled() -> bool
AndroidX.Core.App.NotificationManagerCompat.CanPostPromotedNotifications() -> bool
AndroidX.Core.App.NotificationManagerCompat.CanUseFullScreenIntent() -> bool
AndroidX.Core.App.NotificationManagerCompat.Cancel(int id) -> void
AndroidX.Core.App.NotificationManagerCompat.Cancel(string? tag, int id) -> void
AndroidX.Core.App.NotificationManagerCompat.CancelAll() -> void
AndroidX.Core.App.NotificationManagerCompat.CreateNotificationChannel(Android.App.NotificationChannel? channel) -> void
AndroidX.Core.App.NotificationManagerCompat.CreateNotificationChannel(AndroidX.Core.App.NotificationChannelCompat? channel) -> void
AndroidX.Core.App.NotificationManagerCompat.CreateNotificationChannelGroup(Android.App.NotificationChannelGroup? group) -> void
AndroidX.Core.App.NotificationManagerCompat.CreateNotificationChannelGroup(AndroidX.Core.App.NotificationChannelGroupCompat? group) -> void
AndroidX.Core.App.NotificationManagerCompat.CreateNotificationChannelGroups(System.Collections.Generic.IList<Android.App.NotificationChannelGroup!>? groups) -> void
AndroidX.Core.App.NotificationManagerCompat.CreateNotificationChannelGroupsCompat(System.Collections.Generic.IList<AndroidX.Core.App.NotificationChannelGroupCompat!>? groups) -> void
AndroidX.Core.App.NotificationManagerCompat.CreateNotificationChannels(System.Collections.Generic.IList<Android.App.NotificationChannel!>? channels) -> void
AndroidX.Core.App.NotificationManagerCompat.CreateNotificationChannelsCompat(System.Collections.Generic.IList<AndroidX.Core.App.NotificationChannelCompat!>? channels) -> void
AndroidX.Core.App.NotificationManagerCompat.CurrentInterruptionFilter.get -> int
AndroidX.Core.App.NotificationManagerCompat.DeleteNotificationChannel(string? channelId) -> void
AndroidX.Core.App.NotificationManagerCompat.DeleteNotificationChannelGroup(string? groupId) -> void
AndroidX.Core.App.NotificationManagerCompat.DeleteUnlistedNotificationChannels(System.Collections.Generic.ICollection<string!>? channelIds) -> void
AndroidX.Core.App.NotificationManagerCompat.GetNotificationChannel(string? channelId) -> Android.App.NotificationChannel?
AndroidX.Core.App.NotificationManagerCompat.GetNotificationChannel(string? channelId, string? conversationId) -> Android.App.NotificationChannel?
AndroidX.Core.App.NotificationManagerCompat.GetNotificationChannelCompat(string? channelId) -> AndroidX.Core.App.NotificationChannelCompat?
AndroidX.Core.App.NotificationManagerCompat.GetNotificationChannelCompat(string? channelId, string? conversationId) -> AndroidX.Core.App.NotificationChannelCompat?
AndroidX.Core.App.NotificationManagerCompat.GetNotificationChannelGroup(string? channelGroupId) -> Android.App.NotificationChannelGroup?
AndroidX.Core.App.NotificationManagerCompat.GetNotificationChannelGroupCompat(string? channelGroupId) -> AndroidX.Core.App.NotificationChannelGroupCompat?
AndroidX.Core.App.NotificationManagerCompat.IInterruptionFilter
AndroidX.Core.App.NotificationManagerCompat.Importance.get -> int
AndroidX.Core.App.NotificationManagerCompat.NotificationChannelGroups.get -> System.Collections.Generic.IList<Android.App.NotificationChannelGroup!>?
AndroidX.Core.App.NotificationManagerCompat.NotificationChannelGroupsCompat.get -> System.Collections.Generic.IList<AndroidX.Core.App.NotificationChannelGroupCompat!>?
AndroidX.Core.App.NotificationManagerCompat.NotificationChannels.get -> System.Collections.Generic.IList<Android.App.NotificationChannel!>?
AndroidX.Core.App.NotificationManagerCompat.NotificationChannelsCompat.get -> System.Collections.Generic.IList<AndroidX.Core.App.NotificationChannelCompat!>?
AndroidX.Core.App.NotificationManagerCompat.NotificationWithIdAndTag
AndroidX.Core.App.NotificationManagerCompat.NotificationWithIdAndTag.NotificationWithIdAndTag(int id, Android.App.Notification? notification) -> void
AndroidX.Core.App.NotificationManagerCompat.NotificationWithIdAndTag.NotificationWithIdAndTag(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.NotificationManagerCompat.NotificationWithIdAndTag.NotificationWithIdAndTag(string? tag, int id, Android.App.Notification? notification) -> void
AndroidX.Core.App.NotificationManagerCompat.Notify(System.Collections.Generic.IList<AndroidX.Core.App.NotificationManagerCompat.NotificationWithIdAndTag!>? notificationWithIdAndTags) -> void
AndroidX.Core.App.NotificationManagerCompat.Notify(int id, Android.App.Notification? notification) -> void
AndroidX.Core.App.NotificationManagerCompat.Notify(string? tag, int id, Android.App.Notification? notification) -> void
AndroidX.Core.App.PendingIntentCompat
AndroidX.Core.App.PendingIntentCompat.IFlags
AndroidX.Core.App.Person
AndroidX.Core.App.Person.Builder
AndroidX.Core.App.Person.Builder.Builder() -> void
AndroidX.Core.App.Person.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.Person.Builder.SetName(string? name) -> AndroidX.Core.App.Person.Builder?
AndroidX.Core.App.Person.Name.get -> string?
AndroidX.Core.App.Person.Person(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.PictureInPictureModeChangedInfo
AndroidX.Core.App.PictureInPictureModeChangedInfo.IsInPictureInPictureMode.get -> bool
AndroidX.Core.App.PictureInPictureModeChangedInfo.NewConfig.get -> Android.Content.Res.Configuration!
AndroidX.Core.App.PictureInPictureModeChangedInfo.PictureInPictureModeChangedInfo(bool isInPictureInPictureMode) -> void
AndroidX.Core.App.PictureInPictureModeChangedInfo.PictureInPictureModeChangedInfo(bool isInPictureInPictureMode, Android.Content.Res.Configuration! newConfig) -> void
AndroidX.Core.App.RemoteActionCompat
AndroidX.Core.App.RemoteActionCompat.ActionIntent.get -> Android.App.PendingIntent?
AndroidX.Core.App.RemoteActionCompat.ContentDescription.get -> string?
AndroidX.Core.App.RemoteActionCompat.ContentDescriptionFormatted.get -> Java.Lang.ICharSequence?
AndroidX.Core.App.RemoteActionCompat.Enabled.get -> bool
AndroidX.Core.App.RemoteActionCompat.Enabled.set -> void
AndroidX.Core.App.RemoteActionCompat.Icon.get -> AndroidX.Core.Graphics.Drawable.IconCompat?
AndroidX.Core.App.RemoteActionCompat.MActionIntent.get -> Android.App.PendingIntent?
AndroidX.Core.App.RemoteActionCompat.MActionIntent.set -> void
AndroidX.Core.App.RemoteActionCompat.MContentDescription.get -> Java.Lang.ICharSequence?
AndroidX.Core.App.RemoteActionCompat.MContentDescription.set -> void
AndroidX.Core.App.RemoteActionCompat.MEnabled.get -> bool
AndroidX.Core.App.RemoteActionCompat.MEnabled.set -> void
AndroidX.Core.App.RemoteActionCompat.MIcon.get -> AndroidX.Core.Graphics.Drawable.IconCompat?
AndroidX.Core.App.RemoteActionCompat.MIcon.set -> void
AndroidX.Core.App.RemoteActionCompat.MShouldShowIcon.get -> bool
AndroidX.Core.App.RemoteActionCompat.MShouldShowIcon.set -> void
AndroidX.Core.App.RemoteActionCompat.MTitle.get -> Java.Lang.ICharSequence?
AndroidX.Core.App.RemoteActionCompat.MTitle.set -> void
AndroidX.Core.App.RemoteActionCompat.RemoteActionCompat() -> void
AndroidX.Core.App.RemoteActionCompat.RemoteActionCompat(AndroidX.Core.App.RemoteActionCompat? other) -> void
AndroidX.Core.App.RemoteActionCompat.RemoteActionCompat(AndroidX.Core.Graphics.Drawable.IconCompat? icon, Java.Lang.ICharSequence? title, Java.Lang.ICharSequence? contentDescription, Android.App.PendingIntent? intent) -> void
AndroidX.Core.App.RemoteActionCompat.RemoteActionCompat(AndroidX.Core.Graphics.Drawable.IconCompat? icon, string? title, string? contentDescription, Android.App.PendingIntent? intent) -> void
AndroidX.Core.App.RemoteActionCompat.SetShouldShowIcon(bool shouldShowIcon) -> void
AndroidX.Core.App.RemoteActionCompat.ShouldShowIcon() -> bool
AndroidX.Core.App.RemoteActionCompat.Title.get -> string?
AndroidX.Core.App.RemoteActionCompat.TitleFormatted.get -> Java.Lang.ICharSequence?
AndroidX.Core.App.RemoteActionCompat.ToRemoteAction() -> Android.App.RemoteAction?
AndroidX.Core.App.RemoteActionCompatParcelizer
AndroidX.Core.App.RemoteActionCompatParcelizer.RemoteActionCompatParcelizer() -> void
AndroidX.Core.App.RemoteActionCompatParcelizer.RemoteActionCompatParcelizer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.RemoteInput
AndroidX.Core.App.RemoteInput.Builder
AndroidX.Core.App.RemoteInput.Builder.AddExtras(Android.OS.Bundle? extras) -> AndroidX.Core.App.RemoteInput.Builder?
AndroidX.Core.App.RemoteInput.Builder.Build() -> AndroidX.Core.App.RemoteInput?
AndroidX.Core.App.RemoteInput.Builder.Builder(string? resultKey) -> void
AndroidX.Core.App.RemoteInput.Builder.Extras.get -> Android.OS.Bundle?
AndroidX.Core.App.RemoteInput.Builder.SetAllowDataType(string? mimeType, bool doAllow) -> AndroidX.Core.App.RemoteInput.Builder?
AndroidX.Core.App.RemoteInput.Builder.SetAllowFreeFormInput(bool allowFreeFormTextInput) -> AndroidX.Core.App.RemoteInput.Builder?
AndroidX.Core.App.RemoteInput.Builder.SetChoices(Java.Lang.ICharSequence![]? choices) -> AndroidX.Core.App.RemoteInput.Builder?
AndroidX.Core.App.RemoteInput.Builder.SetChoices(string![]? choices) -> AndroidX.Core.App.RemoteInput.Builder?
AndroidX.Core.App.RemoteInput.Builder.SetEditChoicesBeforeSending(int editChoicesBeforeSending) -> AndroidX.Core.App.RemoteInput.Builder?
AndroidX.Core.App.RemoteInput.Builder.SetLabel(Java.Lang.ICharSequence? label) -> AndroidX.Core.App.RemoteInput.Builder?
AndroidX.Core.App.RemoteInput.Builder.SetLabel(string? label) -> AndroidX.Core.App.RemoteInput.Builder?
AndroidX.Core.App.RemoteInput.EditChoicesBeforeSending.get -> int
AndroidX.Core.App.RemoteInput.IEditChoicesBeforeSending
AndroidX.Core.App.RemoteInput.ISource
AndroidX.Core.App.RemoteInput.IsDataOnly.get -> bool
AndroidX.Core.App.ServiceCompat
AndroidX.Core.App.ServiceCompat.IStopForegroundFlags
AndroidX.Core.App.ShareCompat
AndroidX.Core.App.ShareCompat.IntentBuilder
AndroidX.Core.App.ShareCompat.IntentBuilder.IntentBuilder(Android.Content.Context? launchingContext) -> void
AndroidX.Core.App.ShareCompat.IntentBuilder.IntentBuilder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.ShareCompat.IntentBuilder.SetChooserTitle(string? title) -> AndroidX.Core.App.ShareCompat.IntentBuilder?
AndroidX.Core.App.ShareCompat.IntentBuilder.SetText(string? text) -> AndroidX.Core.App.ShareCompat.IntentBuilder?
AndroidX.Core.App.ShareCompat.IntentReader
AndroidX.Core.App.ShareCompat.IntentReader.CallingApplicationLabel.get -> string?
AndroidX.Core.App.ShareCompat.IntentReader.IntentReader(Android.App.Activity? activity) -> void
AndroidX.Core.App.ShareCompat.IntentReader.IntentReader(Android.Content.Context? context, Android.Content.Intent? intent) -> void
AndroidX.Core.App.ShareCompat.IntentReader.IntentReader(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.ShareCompat.IntentReader.Text.get -> string?
AndroidX.Core.App.SharedElementCallback
AndroidX.Core.App.SharedElementCallback.IOnSharedElementsReadyListener
AndroidX.Core.App.SharedElementCallback.IOnSharedElementsReadyListener.OnSharedElementsReady() -> void
AndroidX.Core.App.SharedElementCallback.SharedElementCallback() -> void
AndroidX.Core.App.SharedElementCallback.SharedElementCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.TaskStackBuilder
AndroidX.Core.App.TaskStackBuilder.AddNextIntent(Android.Content.Intent? nextIntent) -> AndroidX.Core.App.TaskStackBuilder?
AndroidX.Core.App.TaskStackBuilder.AddNextIntentWithParentStack(Android.Content.Intent? nextIntent) -> AndroidX.Core.App.TaskStackBuilder?
AndroidX.Core.App.TaskStackBuilder.AddParentStack(Android.App.Activity? sourceActivity) -> AndroidX.Core.App.TaskStackBuilder?
AndroidX.Core.App.TaskStackBuilder.AddParentStack(Android.Content.ComponentName? sourceActivityName) -> AndroidX.Core.App.TaskStackBuilder?
AndroidX.Core.App.TaskStackBuilder.AddParentStack(Java.Lang.Class? sourceActivityClass) -> AndroidX.Core.App.TaskStackBuilder?
AndroidX.Core.App.TaskStackBuilder.EditIntentAt(int index) -> Android.Content.Intent?
AndroidX.Core.App.TaskStackBuilder.GetIntent(int index) -> Android.Content.Intent?
AndroidX.Core.App.TaskStackBuilder.GetIntents() -> Android.Content.Intent![]?
AndroidX.Core.App.TaskStackBuilder.GetPendingIntent(int requestCode, int flags) -> Android.App.PendingIntent?
AndroidX.Core.App.TaskStackBuilder.GetPendingIntent(int requestCode, int flags, Android.OS.Bundle? options) -> Android.App.PendingIntent?
AndroidX.Core.App.TaskStackBuilder.GetPendingIntent(int requestCode, int flags, Android.OS.Bundle? options, bool isMutable) -> Android.App.PendingIntent?
AndroidX.Core.App.TaskStackBuilder.GetPendingIntent(int requestCode, int flags, bool isMutable) -> Android.App.PendingIntent?
AndroidX.Core.App.TaskStackBuilder.ISupportParentable
AndroidX.Core.App.TaskStackBuilder.ISupportParentable.SupportParentActivityIntent.get -> Android.Content.Intent?
AndroidX.Core.App.TaskStackBuilder.IntentCount.get -> int
AndroidX.Core.App.TaskStackBuilder.Iterator() -> Java.Util.IIterator?
AndroidX.Core.App.TaskStackBuilder.StartActivities() -> void
AndroidX.Core.App.TaskStackBuilder.StartActivities(Android.OS.Bundle? options) -> void
AndroidX.Core.App.UnusedAppRestrictions.IUnusedAppRestrictionsBackportCallback
AndroidX.Core.App.UnusedAppRestrictions.IUnusedAppRestrictionsBackportCallback.Descriptor.get -> string?
AndroidX.Core.App.UnusedAppRestrictions.IUnusedAppRestrictionsBackportCallback.OnIsPermissionRevocationEnabledForAppResult(bool p0, bool p1) -> void
AndroidX.Core.App.UnusedAppRestrictions.IUnusedAppRestrictionsBackportService
AndroidX.Core.App.UnusedAppRestrictions.IUnusedAppRestrictionsBackportService.Descriptor.get -> string?
AndroidX.Core.App.UnusedAppRestrictions.IUnusedAppRestrictionsBackportService.IsPermissionRevocationEnabledForApp(AndroidX.Core.App.UnusedAppRestrictions.IUnusedAppRestrictionsBackportCallback? p0) -> void
AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallback
AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackConsts
AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackDefault
AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackDefault.InterfaceConsts
AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackDefault.UnusedAppRestrictionsBackportCallbackDefault() -> void
AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackDefault.UnusedAppRestrictionsBackportCallbackDefault(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackStub
AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackStub.InterfaceConsts
AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackStub.UnusedAppRestrictionsBackportCallbackStub() -> void
AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackStub.UnusedAppRestrictionsBackportCallbackStub(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportService
AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceConsts
AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceDefault
AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceDefault.InterfaceConsts
AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceDefault.UnusedAppRestrictionsBackportServiceDefault() -> void
AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceDefault.UnusedAppRestrictionsBackportServiceDefault(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceStub
AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceStub.InterfaceConsts
AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceStub.UnusedAppRestrictionsBackportServiceStub() -> void
AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceStub.UnusedAppRestrictionsBackportServiceStub(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Content.ContentProviderCompat
AndroidX.Core.Content.ContentResolverCompat
AndroidX.Core.Content.ContextCompat
AndroidX.Core.Content.ContextCompat.ContextCompat() -> void
AndroidX.Core.Content.ContextCompat.ContextCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Content.ContextCompat.IRegisterReceiverFlags
AndroidX.Core.Content.FileProvider
AndroidX.Core.Content.FileProvider.FileProvider() -> void
AndroidX.Core.Content.FileProvider.FileProvider(int resourceId) -> void
AndroidX.Core.Content.FileProvider.FileProvider(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Content.IOnConfigurationChangedProvider
AndroidX.Core.Content.IOnConfigurationChangedProvider.AddOnConfigurationChangedListener(AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Core.Content.IOnConfigurationChangedProvider.RemoveOnConfigurationChangedListener(AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Core.Content.IOnTrimMemoryProvider
AndroidX.Core.Content.IOnTrimMemoryProvider.AddOnTrimMemoryListener(AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Core.Content.IOnTrimMemoryProvider.RemoveOnTrimMemoryListener(AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Core.Content.IntentCompat
AndroidX.Core.Content.IntentSanitizer
AndroidX.Core.Content.IntentSanitizer.Builder
AndroidX.Core.Content.IntentSanitizer.Builder.AllowAction(AndroidX.Core.Util.IPredicate? filter) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowAction(string? action) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowAnyComponent() -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowCategory(AndroidX.Core.Util.IPredicate? filter) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowCategory(string? category) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowClipData(AndroidX.Core.Util.IPredicate? filter) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowClipDataText() -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowClipDataUri(AndroidX.Core.Util.IPredicate? filter) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowClipDataUriWithAuthority(string? authority) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowComponent(Android.Content.ComponentName? component) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowComponent(AndroidX.Core.Util.IPredicate? filter) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowComponentWithPackage(string? packageName) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowData(AndroidX.Core.Util.IPredicate? filter) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowDataWithAuthority(string? authority) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowExtra(string? key, AndroidX.Core.Util.IPredicate? filter) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowExtra(string? key, Java.Lang.Class? clazz) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowExtra(string? key, Java.Lang.Class? clazz, AndroidX.Core.Util.IPredicate? valueFilter) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowExtraOutput(AndroidX.Core.Util.IPredicate? filter) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowExtraOutput(string? uriAuthority) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowExtraStream(AndroidX.Core.Util.IPredicate? filter) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowExtraStreamUriWithAuthority(string? uriAuthority) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowFlags(int flags) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowHistoryStackFlags() -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowIdentifier() -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowPackage(AndroidX.Core.Util.IPredicate? filter) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowPackage(string? packageName) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowReceiverFlags() -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowSelector() -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowSourceBounds() -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowType(AndroidX.Core.Util.IPredicate? filter) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.AllowType(string? type) -> AndroidX.Core.Content.IntentSanitizer.Builder?
AndroidX.Core.Content.IntentSanitizer.Builder.Build() -> AndroidX.Core.Content.IntentSanitizer?
AndroidX.Core.Content.IntentSanitizer.Builder.Builder() -> void
AndroidX.Core.Content.IntentSanitizer.IntentSanitizer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Content.LocusIdCompat
AndroidX.Core.Content.LocusIdCompat.Id.get -> string?
AndroidX.Core.Content.LocusIdCompat.LocusIdCompat(string? id) -> void
AndroidX.Core.Content.LocusIdCompat.ToLocusId() -> Android.Content.LocusId?
AndroidX.Core.Content.MimeTypeFilter
AndroidX.Core.Content.PM.ActivityInfoCompat
AndroidX.Core.Content.PM.PackageInfoCompat
AndroidX.Core.Content.PM.PermissionInfoCompat
AndroidX.Core.Content.PM.PermissionInfoCompat.IProtection
AndroidX.Core.Content.PM.PermissionInfoCompat.IProtectionFlags
AndroidX.Core.Content.PM.ShortcutInfoChangeListener
AndroidX.Core.Content.PM.ShortcutInfoChangeListener.ShortcutInfoChangeListener() -> void
AndroidX.Core.Content.PM.ShortcutInfoChangeListener.ShortcutInfoChangeListener(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Content.PM.ShortcutInfoCompat
AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder
AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.Builder(Android.Content.Context? context, Android.Content.PM.ShortcutInfo? shortcutInfo) -> void
AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.Builder(Android.Content.Context? context, string? id) -> void
AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.Builder(AndroidX.Core.Content.PM.ShortcutInfoCompat? shortcutInfo) -> void
AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetDisabledMessage(string? disabledMessage) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetLongLabel(string? longLabel) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetShortLabel(string? shortLabel) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
AndroidX.Core.Content.PM.ShortcutInfoCompat.DisabledMessage.get -> string?
AndroidX.Core.Content.PM.ShortcutInfoCompat.ISurface
AndroidX.Core.Content.PM.ShortcutInfoCompat.LongLabel.get -> string?
AndroidX.Core.Content.PM.ShortcutInfoCompat.ShortLabel.get -> string?
AndroidX.Core.Content.PM.ShortcutInfoCompat.ShortcutInfoCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Content.PM.ShortcutInfoCompatSaver
AndroidX.Core.Content.PM.ShortcutInfoCompatSaver.NoopImpl
AndroidX.Core.Content.PM.ShortcutInfoCompatSaver.NoopImpl.NoopImpl() -> void
AndroidX.Core.Content.PM.ShortcutInfoCompatSaver.NoopImpl.NoopImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Content.PM.ShortcutInfoCompatSaver.ShortcutInfoCompatSaver() -> void
AndroidX.Core.Content.PM.ShortcutInfoCompatSaver.ShortcutInfoCompatSaver(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Content.PM.ShortcutManagerCompat
AndroidX.Core.Content.PM.ShortcutManagerCompat.IShortcutMatchFlags
AndroidX.Core.Content.PM.ShortcutManagerCompat.ShortcutManagerCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Content.PM.ShortcutXmlParser
AndroidX.Core.Content.PM.ShortcutXmlParser.ShortcutXmlParser(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Content.PackageManagerCompat
AndroidX.Core.Content.PackageManagerCompat.IUnusedAppRestrictionsStatus
AndroidX.Core.Content.PermissionChecker
AndroidX.Core.Content.PermissionChecker.IPermissionResult
AndroidX.Core.Content.Resources.CamColor
AndroidX.Core.Content.Resources.CamColor.CamColor(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Content.Resources.ColorStateListInflaterCompat
AndroidX.Core.Content.Resources.ComplexColorCompat
AndroidX.Core.Content.Resources.ComplexColorCompat.Color.get -> int
AndroidX.Core.Content.Resources.ComplexColorCompat.Color.set -> void
AndroidX.Core.Content.Resources.ComplexColorCompat.IsGradient.get -> bool
AndroidX.Core.Content.Resources.ComplexColorCompat.IsStateful.get -> bool
AndroidX.Core.Content.Resources.ComplexColorCompat.OnStateChanged(int[]? stateSet) -> bool
AndroidX.Core.Content.Resources.ComplexColorCompat.Shader.get -> Android.Graphics.Shader?
AndroidX.Core.Content.Resources.ComplexColorCompat.WillDraw() -> bool
AndroidX.Core.Content.Resources.ConfigurationHelper
AndroidX.Core.Content.Resources.FontResourcesParserCompat
AndroidX.Core.Content.Resources.FontResourcesParserCompat.FontFamilyFilesResourceEntry
AndroidX.Core.Content.Resources.FontResourcesParserCompat.FontFamilyFilesResourceEntry.FontFamilyFilesResourceEntry(AndroidX.Core.Content.Resources.FontResourcesParserCompat.FontFileResourceEntry![]? entries) -> void
AndroidX.Core.Content.Resources.FontResourcesParserCompat.FontFamilyFilesResourceEntry.GetEntries() -> AndroidX.Core.Content.Resources.FontResourcesParserCompat.FontFileResourceEntry![]?
AndroidX.Core.Content.Resources.FontResourcesParserCompat.FontFileResourceEntry
AndroidX.Core.Content.Resources.FontResourcesParserCompat.FontFileResourceEntry.FileName.get -> string?
AndroidX.Core.Content.Resources.FontResourcesParserCompat.FontFileResourceEntry.FontFileResourceEntry(string? fileName, int weight, bool italic, string? variationSettings, int ttcIndex, int resourceId) -> void
AndroidX.Core.Content.Resources.FontResourcesParserCompat.FontFileResourceEntry.IsItalic.get -> bool
AndroidX.Core.Content.Resources.FontResourcesParserCompat.FontFileResourceEntry.ResourceId.get -> int
AndroidX.Core.Content.Resources.FontResourcesParserCompat.FontFileResourceEntry.TtcIndex.get -> int
AndroidX.Core.Content.Resources.FontResourcesParserCompat.FontFileResourceEntry.VariationSettings.get -> string?
AndroidX.Core.Content.Resources.FontResourcesParserCompat.FontFileResourceEntry.Weight.get -> int
AndroidX.Core.Content.Resources.FontResourcesParserCompat.FontResourcesParserCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Content.Resources.FontResourcesParserCompat.IFamilyResourceEntry
AndroidX.Core.Content.Resources.FontResourcesParserCompat.IFetchStrategy
AndroidX.Core.Content.Resources.FontResourcesParserCompat.ProviderResourceEntry
AndroidX.Core.Content.Resources.FontResourcesParserCompat.ProviderResourceEntry.FallbackRequest.get -> AndroidX.Core.Provider.FontRequest?
AndroidX.Core.Content.Resources.FontResourcesParserCompat.ProviderResourceEntry.FetchStrategy.get -> int
AndroidX.Core.Content.Resources.FontResourcesParserCompat.ProviderResourceEntry.ProviderResourceEntry(AndroidX.Core.Provider.FontRequest? request, int strategy, int timeoutMs) -> void
AndroidX.Core.Content.Resources.FontResourcesParserCompat.ProviderResourceEntry.ProviderResourceEntry(System.Collections.Generic.IList<AndroidX.Core.Provider.FontRequest!>? requests, int strategy, int timeoutMs, string? systemFontFamilyName) -> void
AndroidX.Core.Content.Resources.FontResourcesParserCompat.ProviderResourceEntry.Request.get -> AndroidX.Core.Provider.FontRequest?
AndroidX.Core.Content.Resources.FontResourcesParserCompat.ProviderResourceEntry.Requests.get -> System.Collections.Generic.IList<AndroidX.Core.Provider.FontRequest!>?
AndroidX.Core.Content.Resources.FontResourcesParserCompat.ProviderResourceEntry.SystemFontFamilyName.get -> string?
AndroidX.Core.Content.Resources.FontResourcesParserCompat.ProviderResourceEntry.Timeout.get -> int
AndroidX.Core.Content.Resources.ResourcesCompat
AndroidX.Core.Content.Resources.ResourcesCompat.FontCallback
AndroidX.Core.Content.Resources.ResourcesCompat.FontCallback.CallbackFailAsync(int reason, Android.OS.Handler? handler) -> void
AndroidX.Core.Content.Resources.ResourcesCompat.FontCallback.CallbackSuccessAsync(Android.Graphics.Typeface? typeface, Android.OS.Handler? handler) -> void
AndroidX.Core.Content.Resources.ResourcesCompat.FontCallback.FontCallback() -> void
AndroidX.Core.Content.Resources.ResourcesCompat.FontCallback.FontCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Content.Resources.ResourcesCompat.ThemeCompat
AndroidX.Core.Content.Resources.TypedArrayUtils
AndroidX.Core.Content.Resources.TypedArrayUtils.TypedArrayUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Content.SharedPreferencesCompat
AndroidX.Core.Content.SharedPreferencesCompat.EditorCompat
AndroidX.Core.Content.SharedPreferencesCompat.EditorCompat.Apply(Android.Content.ISharedPreferencesEditor? editor) -> void
AndroidX.Core.Content.UnusedAppRestrictionsBackportCallback
AndroidX.Core.Content.UnusedAppRestrictionsBackportCallback.UnusedAppRestrictionsBackportCallback(AndroidX.Core.App.UnusedAppRestrictions.IUnusedAppRestrictionsBackportCallback? callback) -> void
AndroidX.Core.Content.UnusedAppRestrictionsBackportCallback.UnusedAppRestrictionsBackportCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Content.UnusedAppRestrictionsBackportService
AndroidX.Core.Content.UnusedAppRestrictionsBackportService.UnusedAppRestrictionsBackportService() -> void
AndroidX.Core.Content.UnusedAppRestrictionsBackportService.UnusedAppRestrictionsBackportService(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Content.UnusedAppRestrictionsConstants
AndroidX.Core.Content.UriMatcherCompat
AndroidX.Core.Content.UriMatcherCompat.UriMatcherCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Database.CursorWindowCompat
AndroidX.Core.Database.DatabaseUtilsCompat
AndroidX.Core.Database.SqlLite.SQLiteCursorCompat
AndroidX.Core.Flagging.AconfigPackageCompat
AndroidX.Core.Flagging.AconfigPackageCompatCompanion
AndroidX.Core.Flagging.AconfigPackageCompatCompanion.Load(string! packageName) -> AndroidX.Core.Flagging.IAconfigPackageCompat!
AndroidX.Core.Flagging.AconfigPackageCompatConsts
AndroidX.Core.Flagging.Flags
AndroidX.Core.Flagging.Flags.Companion
AndroidX.Core.Flagging.Flags.Companion.GetBooleanFlagValue(string! packageName, string! flagName) -> bool
AndroidX.Core.Flagging.Flags.Companion.GetBooleanFlagValue(string! packageName, string! flagName, bool defaultValue) -> bool
AndroidX.Core.Flagging.Flags.Flags() -> void
AndroidX.Core.Flagging.IAconfigPackageCompat
AndroidX.Core.Flagging.IAconfigPackageCompat.Companion.get -> AndroidX.Core.Flagging.AconfigPackageCompatCompanion!
AndroidX.Core.Flagging.IAconfigPackageCompat.GetBooleanFlagValue(string! flagName, bool defaultValue) -> bool
AndroidX.Core.Flagging.IAconfigPackageCompat.Load(string! packageName) -> AndroidX.Core.Flagging.IAconfigPackageCompat!
AndroidX.Core.Graphics.BitmapCompat
AndroidX.Core.Graphics.BlendModeColorFilterCompat
AndroidX.Core.Graphics.BlendModeColorFilterCompat.BlendModeColorFilterCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Graphics.BlendModeCompat
AndroidX.Core.Graphics.ColorUtils
AndroidX.Core.Graphics.Drawable.DrawableCompat
AndroidX.Core.Graphics.Drawable.ITintAwareDrawable
AndroidX.Core.Graphics.Drawable.ITintAwareDrawable.SetTint(int tint) -> void
AndroidX.Core.Graphics.Drawable.ITintAwareDrawable.SetTintList(Android.Content.Res.ColorStateList? tint) -> void
AndroidX.Core.Graphics.Drawable.ITintAwareDrawable.SetTintMode(Android.Graphics.PorterDuff.Mode? tintMode) -> void
AndroidX.Core.Graphics.Drawable.IWrappedDrawable
AndroidX.Core.Graphics.Drawable.IWrappedDrawable.WrappedDrawable.get -> Android.Graphics.Drawables.Drawable?
AndroidX.Core.Graphics.Drawable.IWrappedDrawable.WrappedDrawable.set -> void
AndroidX.Core.Graphics.Drawable.IconCompat
AndroidX.Core.Graphics.Drawable.IconCompat.IIconType
AndroidX.Core.Graphics.Drawable.IconCompat.IconCompat() -> void
AndroidX.Core.Graphics.Drawable.IconCompat.IconCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Graphics.Drawable.IconCompat.MData.get -> System.Collections.Generic.IList<byte>?
AndroidX.Core.Graphics.Drawable.IconCompat.MData.set -> void
AndroidX.Core.Graphics.Drawable.IconCompat.MInt1.get -> int
AndroidX.Core.Graphics.Drawable.IconCompat.MInt1.set -> void
AndroidX.Core.Graphics.Drawable.IconCompat.MInt2.get -> int
AndroidX.Core.Graphics.Drawable.IconCompat.MInt2.set -> void
AndroidX.Core.Graphics.Drawable.IconCompat.MParcelable.get -> Android.OS.IParcelable?
AndroidX.Core.Graphics.Drawable.IconCompat.MParcelable.set -> void
AndroidX.Core.Graphics.Drawable.IconCompat.MString1.get -> string?
AndroidX.Core.Graphics.Drawable.IconCompat.MString1.set -> void
AndroidX.Core.Graphics.Drawable.IconCompat.MTintList.get -> Android.Content.Res.ColorStateList?
AndroidX.Core.Graphics.Drawable.IconCompat.MTintList.set -> void
AndroidX.Core.Graphics.Drawable.IconCompat.MTintModeStr.get -> string?
AndroidX.Core.Graphics.Drawable.IconCompat.MTintModeStr.set -> void
AndroidX.Core.Graphics.Drawable.IconCompat.MType.get -> int
AndroidX.Core.Graphics.Drawable.IconCompat.MType.set -> void
AndroidX.Core.Graphics.Drawable.IconCompatParcelizer
AndroidX.Core.Graphics.Drawable.IconCompatParcelizer.IconCompatParcelizer() -> void
AndroidX.Core.Graphics.Drawable.IconCompatParcelizer.IconCompatParcelizer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable
AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.Bitmap.get -> Android.Graphics.Bitmap?
AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.Paint.get -> Android.Graphics.Paint?
AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.RoundedBitmapDrawable(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawableFactory
AndroidX.Core.Graphics.Insets
AndroidX.Core.Graphics.Insets.Bottom.get -> int
AndroidX.Core.Graphics.Insets.Bottom.set -> void
AndroidX.Core.Graphics.Insets.Left.get -> int
AndroidX.Core.Graphics.Insets.Left.set -> void
AndroidX.Core.Graphics.Insets.Right.get -> int
AndroidX.Core.Graphics.Insets.Right.set -> void
AndroidX.Core.Graphics.Insets.ToPlatformInsets() -> Android.Graphics.Insets?
AndroidX.Core.Graphics.Insets.Top.get -> int
AndroidX.Core.Graphics.Insets.Top.set -> void
AndroidX.Core.Graphics.PaintCompat
AndroidX.Core.Graphics.PathParser
AndroidX.Core.Graphics.PathParser.PathDataNode
AndroidX.Core.Graphics.PathParser.PathDataNode.PathDataNode(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Graphics.PathSegment
AndroidX.Core.Graphics.PathSegment.End.get -> Android.Graphics.PointF?
AndroidX.Core.Graphics.PathSegment.EndFraction.get -> float
AndroidX.Core.Graphics.PathSegment.PathSegment(Android.Graphics.PointF? start, float startFraction, Android.Graphics.PointF? end, float endFraction) -> void
AndroidX.Core.Graphics.PathSegment.Start.get -> Android.Graphics.PointF?
AndroidX.Core.Graphics.PathSegment.StartFraction.get -> float
AndroidX.Core.Graphics.PathUtils
AndroidX.Core.Graphics.TypefaceCompat
AndroidX.Core.Graphics.TypefaceCompat.ResourcesCallbackAdapter
AndroidX.Core.Graphics.TypefaceCompat.ResourcesCallbackAdapter.ResourcesCallbackAdapter(AndroidX.Core.Content.Resources.ResourcesCompat.FontCallback? fontCallback) -> void
AndroidX.Core.Graphics.TypefaceCompat.ResourcesCallbackAdapter.ResourcesCallbackAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Graphics.TypefaceCompat.TypefaceCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Graphics.TypefaceCompatUtil
AndroidX.Core.Graphics.TypefaceCompatUtil.TypefaceCompatUtil(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Hardware.Display.DisplayManagerCompat
AndroidX.Core.Hardware.Display.DisplayManagerCompat.GetDisplay(int displayId) -> Android.Views.Display?
AndroidX.Core.Hardware.Display.DisplayManagerCompat.GetDisplays() -> Android.Views.Display![]?
AndroidX.Core.Hardware.Display.DisplayManagerCompat.GetDisplays(string? category) -> Android.Views.Display![]?
AndroidX.Core.Hardware.Display.ExperimentalDisplayApiAttribute
AndroidX.Core.Hardware.Display.ExperimentalDisplayApiAttribute.ExperimentalDisplayApiAttribute() -> void
AndroidX.Core.Hardware.Display.IExperimentalDisplayApi
AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat
AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.AuthenticationCallback
AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.AuthenticationCallback.AuthenticationCallback() -> void
AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.AuthenticationCallback.AuthenticationCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.AuthenticationCallback.OnAuthenticationError(int errMsgId, string? errString) -> void
AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.AuthenticationCallback.OnAuthenticationHelp(int helpMsgId, string? helpString) -> void
AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.AuthenticationResult
AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.AuthenticationResult.AuthenticationResult(AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.CryptoObject? crypto) -> void
AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.AuthenticationResult.CryptoObject.get -> AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.CryptoObject?
AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.CryptoObject
AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.CryptoObject.CryptoObject(Java.Security.Signature? signature) -> void
AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.CryptoObject.CryptoObject(Javax.Crypto.Cipher? cipher) -> void
AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.CryptoObject.CryptoObject(Javax.Crypto.Mac? mac) -> void
AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.CryptoObject.CryptoObject(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.FingerprintManagerCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Internal.View.ISupportMenu
AndroidX.Core.Internal.View.ISupportMenu.SetGroupDividerEnabled(bool isEnabled) -> void
AndroidX.Core.Internal.View.ISupportMenuItem
AndroidX.Core.Internal.View.ISupportMenuItem.ActionView.get -> Android.Views.View?
AndroidX.Core.Internal.View.ISupportMenuItem.AlphabeticModifiers.get -> int
AndroidX.Core.Internal.View.ISupportMenuItem.CollapseActionView() -> bool
AndroidX.Core.Internal.View.ISupportMenuItem.ContentDescriptionFormatted.get -> Java.Lang.ICharSequence?
AndroidX.Core.Internal.View.ISupportMenuItem.ExpandActionView() -> bool
AndroidX.Core.Internal.View.ISupportMenuItem.IconTintList.get -> Android.Content.Res.ColorStateList?
AndroidX.Core.Internal.View.ISupportMenuItem.IconTintMode.get -> Android.Graphics.PorterDuff.Mode?
AndroidX.Core.Internal.View.ISupportMenuItem.IsActionViewExpanded.get -> bool
AndroidX.Core.Internal.View.ISupportMenuItem.NumericModifiers.get -> int
AndroidX.Core.Internal.View.ISupportMenuItem.RequiresActionButton() -> bool
AndroidX.Core.Internal.View.ISupportMenuItem.RequiresOverflow() -> bool
AndroidX.Core.Internal.View.ISupportMenuItem.SetActionView(Android.Views.View? view) -> Android.Views.IMenuItem?
AndroidX.Core.Internal.View.ISupportMenuItem.SetActionView(int resId) -> Android.Views.IMenuItem?
AndroidX.Core.Internal.View.ISupportMenuItem.SetAlphabeticShortcut(char alphaChar, int alphaModifiers) -> Android.Views.IMenuItem?
AndroidX.Core.Internal.View.ISupportMenuItem.SetContentDescription(Java.Lang.ICharSequence? contentDescription) -> AndroidX.Core.Internal.View.ISupportMenuItem?
AndroidX.Core.Internal.View.ISupportMenuItem.SetIconTintList(Android.Content.Res.ColorStateList? tint) -> Android.Views.IMenuItem?
AndroidX.Core.Internal.View.ISupportMenuItem.SetIconTintMode(Android.Graphics.PorterDuff.Mode? tintMode) -> Android.Views.IMenuItem?
AndroidX.Core.Internal.View.ISupportMenuItem.SetNumericShortcut(char numericChar, int numericModifiers) -> Android.Views.IMenuItem?
AndroidX.Core.Internal.View.ISupportMenuItem.SetShortcut(char numericChar, char alphaChar, int numericModifiers, int alphaModifiers) -> Android.Views.IMenuItem?
AndroidX.Core.Internal.View.ISupportMenuItem.SetShowAsAction(Android.Views.ShowAsAction actionEnum) -> void
AndroidX.Core.Internal.View.ISupportMenuItem.SetShowAsActionFlags(Android.Views.ShowAsAction actionEnum) -> Android.Views.IMenuItem?
AndroidX.Core.Internal.View.ISupportMenuItem.SetSupportActionProvider(AndroidX.Core.View.ActionProvider? actionProvider) -> AndroidX.Core.Internal.View.ISupportMenuItem?
AndroidX.Core.Internal.View.ISupportMenuItem.SetTooltipText(Java.Lang.ICharSequence? tooltipText) -> AndroidX.Core.Internal.View.ISupportMenuItem?
AndroidX.Core.Internal.View.ISupportMenuItem.SupportActionProvider.get -> AndroidX.Core.View.ActionProvider?
AndroidX.Core.Internal.View.ISupportMenuItem.TooltipTextFormatted.get -> Java.Lang.ICharSequence?
AndroidX.Core.Internal.View.ISupportMenuItemExtensions
AndroidX.Core.Internal.View.ISupportSubMenu
AndroidX.Core.Internal.View.SupportMenu
AndroidX.Core.Internal.View.SupportMenuConsts
AndroidX.Core.Internal.View.SupportMenuItem
AndroidX.Core.Internal.View.SupportMenuItemConsts
AndroidX.Core.Location.GnssStatusCompat
AndroidX.Core.Location.GnssStatusCompat.Callback
AndroidX.Core.Location.GnssStatusCompat.Callback.Callback() -> void
AndroidX.Core.Location.GnssStatusCompat.Callback.Callback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Location.GnssStatusCompat.GnssStatusCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Location.GnssStatusCompat.IConstellationType
AndroidX.Core.Location.ILocationListenerCompat
AndroidX.Core.Location.ILocationListenerCompat.OnLocationChanged(System.Collections.Generic.IList<Android.Locations.Location!>? locations) -> void
AndroidX.Core.Location.ILocationListenerCompat.OnStatusChanged(string? provider, int status, Android.OS.Bundle? extras) -> void
AndroidX.Core.Location.LocationCompat
AndroidX.Core.Location.LocationManagerCompat
AndroidX.Core.Location.LocationRequestCompat
AndroidX.Core.Location.LocationRequestCompat.Builder
AndroidX.Core.Location.LocationRequestCompat.Builder.Build() -> AndroidX.Core.Location.LocationRequestCompat?
AndroidX.Core.Location.LocationRequestCompat.Builder.Builder(AndroidX.Core.Location.LocationRequestCompat? locationRequest) -> void
AndroidX.Core.Location.LocationRequestCompat.Builder.Builder(long intervalMillis) -> void
AndroidX.Core.Location.LocationRequestCompat.Builder.ClearMinUpdateIntervalMillis() -> AndroidX.Core.Location.LocationRequestCompat.Builder?
AndroidX.Core.Location.LocationRequestCompat.Builder.SetDurationMillis(long durationMillis) -> AndroidX.Core.Location.LocationRequestCompat.Builder?
AndroidX.Core.Location.LocationRequestCompat.Builder.SetIntervalMillis(long intervalMillis) -> AndroidX.Core.Location.LocationRequestCompat.Builder?
AndroidX.Core.Location.LocationRequestCompat.Builder.SetMaxUpdateDelayMillis(long maxUpdateDelayMillis) -> AndroidX.Core.Location.LocationRequestCompat.Builder?
AndroidX.Core.Location.LocationRequestCompat.Builder.SetMaxUpdates(int maxUpdates) -> AndroidX.Core.Location.LocationRequestCompat.Builder?
AndroidX.Core.Location.LocationRequestCompat.Builder.SetMinUpdateDistanceMeters(float minUpdateDistanceMeters) -> AndroidX.Core.Location.LocationRequestCompat.Builder?
AndroidX.Core.Location.LocationRequestCompat.Builder.SetMinUpdateIntervalMillis(long minUpdateIntervalMillis) -> AndroidX.Core.Location.LocationRequestCompat.Builder?
AndroidX.Core.Location.LocationRequestCompat.Builder.SetQuality(int quality) -> AndroidX.Core.Location.LocationRequestCompat.Builder?
AndroidX.Core.Location.LocationRequestCompat.DurationMillis.get -> long
AndroidX.Core.Location.LocationRequestCompat.IQuality
AndroidX.Core.Location.LocationRequestCompat.IntervalMillis.get -> long
AndroidX.Core.Location.LocationRequestCompat.MaxUpdateDelayMillis.get -> long
AndroidX.Core.Location.LocationRequestCompat.MaxUpdates.get -> int
AndroidX.Core.Location.LocationRequestCompat.MinUpdateDistanceMeters.get -> float
AndroidX.Core.Location.LocationRequestCompat.MinUpdateIntervalMillis.get -> long
AndroidX.Core.Location.LocationRequestCompat.Quality.get -> int
AndroidX.Core.Location.LocationRequestCompat.ToLocationRequest() -> Android.Locations.LocationRequest?
AndroidX.Core.Location.LocationRequestCompat.ToLocationRequest(string? provider) -> Android.Locations.LocationRequest?
AndroidX.Core.Math.MathUtils
AndroidX.Core.Math.MathUtils.MathUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Net.ConnectivityManagerCompat
AndroidX.Core.Net.ConnectivityManagerCompat.IRestrictBackgroundStatus
AndroidX.Core.Net.MailTo
AndroidX.Core.Net.MailTo.Bcc.get -> string?
AndroidX.Core.Net.MailTo.Body.get -> string?
AndroidX.Core.Net.MailTo.Cc.get -> string?
AndroidX.Core.Net.MailTo.Headers.get -> System.Collections.Generic.IDictionary<string!, string!>?
AndroidX.Core.Net.MailTo.Subject.get -> string?
AndroidX.Core.Net.MailTo.To.get -> string?
AndroidX.Core.Net.ParseException
AndroidX.Core.Net.ParseException.ParseException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Net.ParseException.Response.get -> string?
AndroidX.Core.Net.ParseException.Response.set -> void
AndroidX.Core.Net.TrafficStatsCompat
AndroidX.Core.Net.UriCompat
AndroidX.Core.OS.BufferFillPolicy
AndroidX.Core.OS.BufferFillPolicy.BufferFillPolicy(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.OS.BufferFillPolicy.Companion
AndroidX.Core.OS.BuildCompat
AndroidX.Core.OS.BuildCompat.IPrereleaseSdkCheck
AndroidX.Core.OS.BundleCompat
AndroidX.Core.OS.CancellationSignal
AndroidX.Core.OS.CancellationSignal.Cancel() -> void
AndroidX.Core.OS.CancellationSignal.CancelEvent -> System.EventHandler!
AndroidX.Core.OS.CancellationSignal.CancellationSignal() -> void
AndroidX.Core.OS.CancellationSignal.CancellationSignalObject.get -> Java.Lang.Object?
AndroidX.Core.OS.CancellationSignal.IOnCancelListener
AndroidX.Core.OS.CancellationSignal.IOnCancelListener.OnCancel() -> void
AndroidX.Core.OS.CancellationSignal.IsCanceled.get -> bool
AndroidX.Core.OS.CancellationSignal.SetOnCancelListener(AndroidX.Core.OS.CancellationSignal.IOnCancelListener? listener) -> void
AndroidX.Core.OS.CancellationSignal.ThrowIfCanceled() -> void
AndroidX.Core.OS.ConfigurationCompat
AndroidX.Core.OS.EnvironmentCompat
AndroidX.Core.OS.ExecutorCompat
AndroidX.Core.OS.HandlerCompat
AndroidX.Core.OS.HeapProfileRequestBuilder
AndroidX.Core.OS.HeapProfileRequestBuilder.HeapProfileRequestBuilder() -> void
AndroidX.Core.OS.HeapProfileRequestBuilder.SetBufferSizeKb(int bufferSizeKb) -> AndroidX.Core.OS.HeapProfileRequestBuilder!
AndroidX.Core.OS.HeapProfileRequestBuilder.SetDurationMs(int durationMs) -> AndroidX.Core.OS.HeapProfileRequestBuilder!
AndroidX.Core.OS.HeapProfileRequestBuilder.SetSamplingIntervalBytes(long samplingIntervalBytes) -> AndroidX.Core.OS.HeapProfileRequestBuilder!
AndroidX.Core.OS.HeapProfileRequestBuilder.SetTrackJavaAllocations(bool traceJavaAllocations) -> AndroidX.Core.OS.HeapProfileRequestBuilder!
AndroidX.Core.OS.IOutcomeReceiverCompat
AndroidX.Core.OS.IOutcomeReceiverCompat.OnError(Java.Lang.Object? error) -> void
AndroidX.Core.OS.IOutcomeReceiverCompat.OnResult(Java.Lang.Object? p0) -> void
AndroidX.Core.OS.IParcelableCompatCreatorCallbacks
AndroidX.Core.OS.IParcelableCompatCreatorCallbacks.CreateFromParcel(Android.OS.Parcel? in, Java.Lang.ClassLoader? loader) -> Java.Lang.Object?
AndroidX.Core.OS.IParcelableCompatCreatorCallbacks.NewArray(int size) -> Java.Lang.Object![]?
AndroidX.Core.OS.JavaHeapDumpRequestBuilder
AndroidX.Core.OS.JavaHeapDumpRequestBuilder.JavaHeapDumpRequestBuilder() -> void
AndroidX.Core.OS.JavaHeapDumpRequestBuilder.SetBufferSizeKb(int bufferSizeKb) -> AndroidX.Core.OS.JavaHeapDumpRequestBuilder!
AndroidX.Core.OS.LocaleListCompat
AndroidX.Core.OS.LocaleListCompat.Get(int index) -> Java.Util.Locale?
AndroidX.Core.OS.LocaleListCompat.GetFirstMatch(string![]? supportedLocales) -> Java.Util.Locale?
AndroidX.Core.OS.LocaleListCompat.IndexOf(Java.Util.Locale? locale) -> int
AndroidX.Core.OS.LocaleListCompat.IsEmpty.get -> bool
AndroidX.Core.OS.LocaleListCompat.Size() -> int
AndroidX.Core.OS.LocaleListCompat.ToLanguageTags() -> string?
AndroidX.Core.OS.LocaleListCompat.Unwrap() -> Java.Lang.Object?
AndroidX.Core.OS.MessageCompat
AndroidX.Core.OS.OperationCanceledException
AndroidX.Core.OS.OperationCanceledException.OperationCanceledException() -> void
AndroidX.Core.OS.OperationCanceledException.OperationCanceledException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.OS.OperationCanceledException.OperationCanceledException(string? message) -> void
AndroidX.Core.OS.ParcelCompat
AndroidX.Core.OS.ParcelableCompat
AndroidX.Core.OS.ProcessCompat
AndroidX.Core.OS.Profiling
AndroidX.Core.OS.ProfilingRequest
AndroidX.Core.OS.ProfilingRequest.CancellationSignal.get -> Android.OS.CancellationSignal?
AndroidX.Core.OS.ProfilingRequest.Params.get -> Android.OS.Bundle!
AndroidX.Core.OS.ProfilingRequest.ProfilingType.get -> int
AndroidX.Core.OS.ProfilingRequest.Tag.get -> string?
AndroidX.Core.OS.ProfilingRequestBuilder
AndroidX.Core.OS.ProfilingRequestBuilder.Build() -> AndroidX.Core.OS.ProfilingRequest!
AndroidX.Core.OS.ProfilingRequestBuilder.ProfilingRequestBuilder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.OS.ProfilingRequestBuilder.SetCancellationSignal(Android.OS.CancellationSignal! cancellationSignal) -> Java.Lang.Object!
AndroidX.Core.OS.ProfilingRequestBuilder.SetTag(string! tag) -> Java.Lang.Object!
AndroidX.Core.OS.StackSamplingRequestBuilder
AndroidX.Core.OS.StackSamplingRequestBuilder.SetBufferSizeKb(int bufferSizeKb) -> AndroidX.Core.OS.StackSamplingRequestBuilder!
AndroidX.Core.OS.StackSamplingRequestBuilder.SetDurationMs(int durationMs) -> AndroidX.Core.OS.StackSamplingRequestBuilder!
AndroidX.Core.OS.StackSamplingRequestBuilder.SetSamplingFrequencyHz(int samplingFrequencyHz) -> AndroidX.Core.OS.StackSamplingRequestBuilder!
AndroidX.Core.OS.StackSamplingRequestBuilder.StackSamplingRequestBuilder() -> void
AndroidX.Core.OS.SystemTraceRequestBuilder
AndroidX.Core.OS.SystemTraceRequestBuilder.SetBufferFillPolicy(AndroidX.Core.OS.BufferFillPolicy! bufferFillPolicy) -> AndroidX.Core.OS.SystemTraceRequestBuilder!
AndroidX.Core.OS.SystemTraceRequestBuilder.SetBufferSizeKb(int bufferSizeKb) -> AndroidX.Core.OS.SystemTraceRequestBuilder!
AndroidX.Core.OS.SystemTraceRequestBuilder.SetDurationMs(int durationMs) -> AndroidX.Core.OS.SystemTraceRequestBuilder!
AndroidX.Core.OS.SystemTraceRequestBuilder.SystemTraceRequestBuilder() -> void
AndroidX.Core.OS.TraceCompat
AndroidX.Core.OS.UserHandleCompat
AndroidX.Core.OS.UserHandleCompat.UserHandleCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.OS.UserManagerCompat
AndroidX.Core.OS.UserManagerCompat.UserManagerCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Provider.DocumentsContractCompat
AndroidX.Core.Provider.DocumentsContractCompat.DocumentCompat
AndroidX.Core.Provider.FontRequest
AndroidX.Core.Provider.FontRequest.Certificates.get -> System.Collections.Generic.IList<System.Collections.Generic.IList<byte[]!>!>?
AndroidX.Core.Provider.FontRequest.CertificatesArrayResId.get -> int
AndroidX.Core.Provider.FontRequest.FontRequest(string? providerAuthority, string? providerPackage, string? query, System.Collections.Generic.IList<System.Collections.Generic.IList<byte[]!>!>? certificates) -> void
AndroidX.Core.Provider.FontRequest.FontRequest(string? providerAuthority, string? providerPackage, string? query, System.Collections.Generic.IList<System.Collections.Generic.IList<byte[]!>!>? certificates, string? systemFont, string? variationSettings) -> void
AndroidX.Core.Provider.FontRequest.FontRequest(string? providerAuthority, string? providerPackage, string? query, int certificates) -> void
AndroidX.Core.Provider.FontRequest.Identifier.get -> string?
AndroidX.Core.Provider.FontRequest.ProviderAuthority.get -> string?
AndroidX.Core.Provider.FontRequest.ProviderPackage.get -> string?
AndroidX.Core.Provider.FontRequest.Query.get -> string?
AndroidX.Core.Provider.FontRequest.SystemFont.get -> string?
AndroidX.Core.Provider.FontRequest.VariationSettings.get -> string?
AndroidX.Core.Provider.FontsContractCompat
AndroidX.Core.Provider.FontsContractCompat.FontFamilyResult
AndroidX.Core.Provider.FontsContractCompat.FontFamilyResult.FontFamilyResult(int statusCode, AndroidX.Core.Provider.FontsContractCompat.FontInfo![]? fonts) -> void
AndroidX.Core.Provider.FontsContractCompat.FontFamilyResult.FontFamilyResult(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Provider.FontsContractCompat.FontInfo
AndroidX.Core.Provider.FontsContractCompat.FontInfo.FontInfo(Android.Net.Uri? uri, int ttcIndex, int weight, bool italic, int resultCode) -> void
AndroidX.Core.Provider.FontsContractCompat.FontInfo.FontInfo(Android.Net.Uri? uri, int ttcIndex, int weight, bool italic, string? variationSettings, int resultCode) -> void
AndroidX.Core.Provider.FontsContractCompat.FontInfo.FontInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Provider.FontsContractCompat.FontInfo.FontInfo(string? systemFont, string? variationSettings) -> void
AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback
AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback.FontRequestCallback() -> void
AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback.FontRequestCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback.IFontRequestFailReason
AndroidX.Core.Provider.FontsContractCompat.FontsContractCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Provider.FontsContractCompat.ITypefaceStyle
AndroidX.Core.Provider.SelfDestructiveThread
AndroidX.Core.Provider.SelfDestructiveThread.IReplyCallback
AndroidX.Core.Provider.SelfDestructiveThread.IReplyCallback.OnReply(Java.Lang.Object? value) -> void
AndroidX.Core.Provider.SelfDestructiveThread.SelfDestructiveThread(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Provider.SelfDestructiveThread.SelfDestructiveThread(string? threadName, int priority, int destructAfterMillisec) -> void
AndroidX.Core.Service.QuickSettings.PendingIntentActivityWrapper
AndroidX.Core.Service.QuickSettings.PendingIntentActivityWrapper.PendingIntentActivityWrapper(Android.Content.Context? context, int requestCode, Android.Content.Intent? intent, int flags, Android.OS.Bundle? options, bool isMutable) -> void
AndroidX.Core.Service.QuickSettings.PendingIntentActivityWrapper.PendingIntentActivityWrapper(Android.Content.Context? context, int requestCode, Android.Content.Intent? intent, int flags, bool isMutable) -> void
AndroidX.Core.Service.QuickSettings.PendingIntentActivityWrapper.PendingIntentActivityWrapper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Service.QuickSettings.TileServiceCompat
AndroidX.Core.Service.QuickSettings.TileServiceCompat.TileServiceCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Telephony.Mbms.MbmsHelper
AndroidX.Core.Telephony.SubscriptionManagerCompat
AndroidX.Core.Telephony.SubscriptionManagerCompat.SubscriptionManagerCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Telephony.TelephonyManagerCompat
AndroidX.Core.Telephony.TelephonyManagerCompat.TelephonyManagerCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Text.BidiFormatter
AndroidX.Core.Text.BidiFormatter.Builder
AndroidX.Core.Text.BidiFormatter.Builder.Build() -> AndroidX.Core.Text.BidiFormatter?
AndroidX.Core.Text.BidiFormatter.Builder.Builder() -> void
AndroidX.Core.Text.BidiFormatter.Builder.Builder(Java.Util.Locale? locale) -> void
AndroidX.Core.Text.BidiFormatter.Builder.Builder(bool rtlContext) -> void
AndroidX.Core.Text.BidiFormatter.Builder.SetTextDirectionHeuristic(AndroidX.Core.Text.ITextDirectionHeuristicCompat? heuristic) -> AndroidX.Core.Text.BidiFormatter.Builder?
AndroidX.Core.Text.BidiFormatter.Builder.StereoReset(bool stereoReset) -> AndroidX.Core.Text.BidiFormatter.Builder?
AndroidX.Core.Text.BidiFormatter.IsRtl(Java.Lang.ICharSequence? str) -> bool
AndroidX.Core.Text.BidiFormatter.IsRtl(string? str) -> bool
AndroidX.Core.Text.BidiFormatter.IsRtlContext.get -> bool
AndroidX.Core.Text.BidiFormatter.StereoReset.get -> bool
AndroidX.Core.Text.BidiFormatter.UnicodeWrap(string? str) -> string?
AndroidX.Core.Text.BidiFormatter.UnicodeWrap(string? str, AndroidX.Core.Text.ITextDirectionHeuristicCompat? heuristic) -> string?
AndroidX.Core.Text.BidiFormatter.UnicodeWrap(string? str, AndroidX.Core.Text.ITextDirectionHeuristicCompat? heuristic, bool isolate) -> string?
AndroidX.Core.Text.BidiFormatter.UnicodeWrap(string? str, bool isolate) -> string?
AndroidX.Core.Text.BidiFormatter.UnicodeWrapFormatted(Java.Lang.ICharSequence? str) -> Java.Lang.ICharSequence?
AndroidX.Core.Text.BidiFormatter.UnicodeWrapFormatted(Java.Lang.ICharSequence? str, AndroidX.Core.Text.ITextDirectionHeuristicCompat? heuristic) -> Java.Lang.ICharSequence?
AndroidX.Core.Text.BidiFormatter.UnicodeWrapFormatted(Java.Lang.ICharSequence? str, AndroidX.Core.Text.ITextDirectionHeuristicCompat? heuristic, bool isolate) -> Java.Lang.ICharSequence?
AndroidX.Core.Text.BidiFormatter.UnicodeWrapFormatted(Java.Lang.ICharSequence? str, bool isolate) -> Java.Lang.ICharSequence?
AndroidX.Core.Text.HtmlCompat
AndroidX.Core.Text.ICUCompat
AndroidX.Core.Text.ITextDirectionHeuristicCompat
AndroidX.Core.Text.ITextDirectionHeuristicCompat.IsRtl(Java.Lang.ICharSequence? cs, int start, int count) -> bool
AndroidX.Core.Text.ITextDirectionHeuristicCompat.IsRtl(char[]? array, int start, int count) -> bool
AndroidX.Core.Text.ITextDirectionHeuristicCompatExtensions
AndroidX.Core.Text.Method.LinkMovementMethodCompat
AndroidX.Core.Text.Method.LinkMovementMethodCompat.LinkMovementMethodCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Text.PrecomputedTextCompat
AndroidX.Core.Text.PrecomputedTextCompat.GetEnumerator() -> System.Collections.Generic.IEnumerator<char>!
AndroidX.Core.Text.PrecomputedTextCompat.Params
AndroidX.Core.Text.PrecomputedTextCompat.Params.BreakStrategy.get -> int
AndroidX.Core.Text.PrecomputedTextCompat.Params.Builder
AndroidX.Core.Text.PrecomputedTextCompat.Params.Builder.Builder(Android.Text.TextPaint? paint) -> void
AndroidX.Core.Text.PrecomputedTextCompat.Params.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Text.PrecomputedTextCompat.Params.EqualsWithoutTextDirection(AndroidX.Core.Text.PrecomputedTextCompat.Params? other) -> bool
AndroidX.Core.Text.PrecomputedTextCompat.Params.HyphenationFrequency.get -> int
AndroidX.Core.Text.PrecomputedTextCompat.Params.TextDirection.get -> Android.Text.ITextDirectionHeuristic?
AndroidX.Core.Text.PrecomputedTextCompat.Params.TextPaint.get -> Android.Text.TextPaint?
AndroidX.Core.Text.PrecomputedTextCompat.PrecomputedTextCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Text.PrecomputedTextCompat.SubSequence(int start, int end) -> string?
AndroidX.Core.Text.TextDirectionHeuristicsCompat
AndroidX.Core.Text.TextUtilsCompat
AndroidX.Core.Text.Util.LinkifyCompat
AndroidX.Core.Text.Util.LinkifyCompat.ILinkifyMask
AndroidX.Core.Text.Util.LocalePreferences
AndroidX.Core.Text.Util.LocalePreferences.CalendarType
AndroidX.Core.Text.Util.LocalePreferences.CalendarType.CalendarType(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Text.Util.LocalePreferences.CalendarType.ICalendarTypes
AndroidX.Core.Text.Util.LocalePreferences.FirstDayOfWeek
AndroidX.Core.Text.Util.LocalePreferences.FirstDayOfWeek.FirstDayOfWeek(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Text.Util.LocalePreferences.FirstDayOfWeek.IDays
AndroidX.Core.Text.Util.LocalePreferences.HourCycle
AndroidX.Core.Text.Util.LocalePreferences.HourCycle.HourCycle(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Text.Util.LocalePreferences.HourCycle.IHourCycleTypes
AndroidX.Core.Text.Util.LocalePreferences.TemperatureUnit
AndroidX.Core.Text.Util.LocalePreferences.TemperatureUnit.ITemperatureUnits
AndroidX.Core.Text.Util.LocalePreferences.TemperatureUnit.TemperatureUnit(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Util.AtomicFile
AndroidX.Core.Util.AtomicFile.AtomicFile(Java.IO.File? baseName) -> void
AndroidX.Core.Util.AtomicFile.AtomicFile(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Util.DebugUtils
AndroidX.Core.Util.DebugUtils.DebugUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Util.IConsumer
AndroidX.Core.Util.IConsumer.Accept(Java.Lang.Object? t) -> void
AndroidX.Core.Util.IFunction
AndroidX.Core.Util.IFunction.Apply(Java.Lang.Object? value) -> Java.Lang.Object?
AndroidX.Core.Util.IPredicate
AndroidX.Core.Util.IPredicate.And(AndroidX.Core.Util.IPredicate? other) -> AndroidX.Core.Util.IPredicate?
AndroidX.Core.Util.IPredicate.IsEqual(Java.Lang.Object? targetRef) -> AndroidX.Core.Util.IPredicate?
AndroidX.Core.Util.IPredicate.Negate() -> AndroidX.Core.Util.IPredicate?
AndroidX.Core.Util.IPredicate.Not(AndroidX.Core.Util.IPredicate? target) -> AndroidX.Core.Util.IPredicate?
AndroidX.Core.Util.IPredicate.Or(AndroidX.Core.Util.IPredicate? other) -> AndroidX.Core.Util.IPredicate?
AndroidX.Core.Util.IPredicate.Test(Java.Lang.Object? t) -> bool
AndroidX.Core.Util.ISupplier
AndroidX.Core.Util.ISupplier.Get() -> Java.Lang.Object?
AndroidX.Core.Util.LogWriter
AndroidX.Core.Util.LogWriter.LogWriter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Util.LogWriter.LogWriter(string? tag) -> void
AndroidX.Core.Util.ObjectsCompat
AndroidX.Core.Util.ObjectsCompat.ObjectsCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Util.Pair
AndroidX.Core.Util.Pair.First.get -> Java.Lang.Object?
AndroidX.Core.Util.Pair.First.set -> void
AndroidX.Core.Util.Pair.Pair(Java.Lang.Object? first, Java.Lang.Object? second) -> void
AndroidX.Core.Util.Pair.Pair(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Util.Pair.Second.get -> Java.Lang.Object?
AndroidX.Core.Util.Pair.Second.set -> void
AndroidX.Core.Util.PatternsCompat
AndroidX.Core.Util.Pools
AndroidX.Core.Util.Pools.IPool
AndroidX.Core.Util.Pools.IPool.Acquire() -> Java.Lang.Object?
AndroidX.Core.Util.Pools.IPool.Release(Java.Lang.Object! instance) -> bool
AndroidX.Core.Util.Pools.SimplePool
AndroidX.Core.Util.Pools.SimplePool.SimplePool(int maxPoolSize) -> void
AndroidX.Core.Util.Pools.SimplePool.SimplePool(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Util.Pools.SynchronizedPool
AndroidX.Core.Util.Pools.SynchronizedPool.SynchronizedPool(int maxPoolSize) -> void
AndroidX.Core.Util.Pools.SynchronizedPool.SynchronizedPool(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Util.Preconditions
AndroidX.Core.Util.Predicate
AndroidX.Core.Util.PredicateConsts
AndroidX.Core.Util.SizeFCompat
AndroidX.Core.Util.SizeFCompat.Height.get -> float
AndroidX.Core.Util.SizeFCompat.SizeFCompat(float width, float height) -> void
AndroidX.Core.Util.SizeFCompat.ToSizeF() -> Android.Util.SizeF?
AndroidX.Core.Util.SizeFCompat.Width.get -> float
AndroidX.Core.Util.TimeUtils
AndroidX.Core.Util.TypedValueCompat
AndroidX.Core.Util.TypedValueCompat.IComplexDimensionUnit
AndroidX.Core.Util.TypedValueCompat.TypedValueCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.Accessibility.AccessibilityClickableSpanCompat
AndroidX.Core.View.Accessibility.AccessibilityClickableSpanCompat.AccessibilityClickableSpanCompat(int originalClickableSpanId, AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat? nodeInfoCompat, int clickableSpanActionId) -> void
AndroidX.Core.View.Accessibility.AccessibilityEventCompat
AndroidX.Core.View.Accessibility.AccessibilityEventCompat.IContentChangeType
AndroidX.Core.View.Accessibility.AccessibilityManagerCompat
AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.AccessibilityStateChangeEventArgs
AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.AccessibilityStateChangeEventArgs.AccessibilityStateChangeEventArgs(bool enabled) -> void
AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.AccessibilityStateChangeEventArgs.Enabled.get -> bool
AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.AccessibilityStateChangeListenerCompat
AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.AccessibilityStateChangeListenerCompat.AccessibilityStateChangeListenerCompat() -> void
AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.AccessibilityStateChangeListenerCompat.AccessibilityStateChangeListenerCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.IAccessibilityStateChangeListener
AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.IAccessibilityStateChangeListener.OnAccessibilityStateChanged(bool enabled) -> void
AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.ITouchExplorationStateChangeListener
AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.ITouchExplorationStateChangeListener.OnTouchExplorationStateChanged(bool enabled) -> void
AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.TouchExplorationStateChangeEventArgs
AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.TouchExplorationStateChangeEventArgs.Enabled.get -> bool
AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.TouchExplorationStateChangeEventArgs.TouchExplorationStateChangeEventArgs(bool enabled) -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.AccessibilityActionCompat(int actionId, Java.Lang.ICharSequence? label) -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.AccessibilityActionCompat(int actionId, Java.Lang.ICharSequence? label, AndroidX.Core.View.Accessibility.IAccessibilityViewCommand? command) -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.AccessibilityActionCompat(int actionId, string? label) -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.AccessibilityActionCompat(int actionId, string? label, AndroidX.Core.View.Accessibility.IAccessibilityViewCommand? command) -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.AccessibilityActionCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.CreateReplacementAction(string? label, AndroidX.Core.View.Accessibility.IAccessibilityViewCommand? command) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.Label.get -> string?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.MCommand.get -> AndroidX.Core.View.Accessibility.IAccessibilityViewCommand?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.MCommand.set -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityNodeInfoCompat(Java.Lang.Object? info) -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityNodeInfoCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AddSpansToExtras(string? text, Android.Views.View? view) -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ClassName.get -> string?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ClassName.set -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.Builder
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.Builder.Build() -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.Builder.Builder() -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.Builder.SetColumnCount(int columnCount) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.Builder?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.Builder.SetHierarchical(bool hierarchical) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.Builder?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.Builder.SetImportantForAccessibilityItemCount(int importantForAccessibilityItemCount) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.Builder?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.Builder.SetItemCount(int itemCount) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.Builder?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.Builder.SetRowCount(int rowCount) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.Builder?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.Builder.SetSelectionMode(int selectionMode) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.Builder?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.CollectionInfoCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Builder
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Builder.Build() -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Builder.Builder() -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Builder.SetColumnIndex(int columnIndex) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Builder?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Builder.SetColumnSpan(int columnSpan) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Builder?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Builder.SetColumnTitle(string? columnTitle) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Builder?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Builder.SetHeading(bool heading) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Builder?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Builder.SetRowIndex(int rowIndex) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Builder?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Builder.SetRowSpan(int rowSpan) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Builder?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Builder.SetRowTitle(string? rowTitle) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Builder?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Builder.SetSelected(bool selected) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Builder?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.CollectionItemInfoCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ContainerTitle.get -> string?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ContainerTitle.set -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ContentDescription.get -> string?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ContentDescription.set -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Error.get -> string?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Error.set -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.HintText.get -> string?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.HintText.set -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.MParentVirtualDescendantId.get -> int
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.MParentVirtualDescendantId.set -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.PackageName.get -> string?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.PackageName.set -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.PaneTitle.get -> string?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.PaneTitle.set -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat.RangeInfoCompat(int type, float min, float max, float current) -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat.RangeInfoCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RoleDescription.get -> string?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RoleDescription.set -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.StateDescription.get -> string?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.StateDescription.set -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SupplementalDescription.get -> string?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SupplementalDescription.set -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Text.get -> string?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Text.set -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TooltipText.get -> string?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TooltipText.set -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TouchDelegateInfoCompat
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TouchDelegateInfoCompat.GetRegionAt(int index) -> Android.Graphics.Region?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TouchDelegateInfoCompat.GetTargetForRegion(Android.Graphics.Region? region) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TouchDelegateInfoCompat.RegionCount.get -> int
AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TouchDelegateInfoCompat.TouchDelegateInfoCompat(System.Collections.Generic.IDictionary<Android.Graphics.Region!, Android.Views.View!>? targetMap) -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeProviderCompat
AndroidX.Core.View.Accessibility.AccessibilityNodeProviderCompat.AccessibilityNodeProviderCompat() -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeProviderCompat.AccessibilityNodeProviderCompat(Java.Lang.Object? provider) -> void
AndroidX.Core.View.Accessibility.AccessibilityNodeProviderCompat.AccessibilityNodeProviderCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.Accessibility.AccessibilityRecordCompat
AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.AccessibilityRecordCompat(Java.Lang.Object? record) -> void
AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.AccessibilityRecordCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.BeforeText.get -> string?
AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.BeforeText.set -> void
AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.ClassName.get -> string?
AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.ClassName.set -> void
AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.ContentDescription.get -> string?
AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.ContentDescription.set -> void
AndroidX.Core.View.Accessibility.AccessibilityViewCommandCommandArguments
AndroidX.Core.View.Accessibility.AccessibilityViewCommandCommandArguments.AccessibilityViewCommandCommandArguments() -> void
AndroidX.Core.View.Accessibility.AccessibilityViewCommandCommandArguments.AccessibilityViewCommandCommandArguments(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.Accessibility.AccessibilityViewCommandMoveAtGranularityArguments
AndroidX.Core.View.Accessibility.AccessibilityViewCommandMoveAtGranularityArguments.AccessibilityViewCommandMoveAtGranularityArguments() -> void
AndroidX.Core.View.Accessibility.AccessibilityViewCommandMoveAtGranularityArguments.ExtendSelection.get -> bool
AndroidX.Core.View.Accessibility.AccessibilityViewCommandMoveAtGranularityArguments.Granularity.get -> int
AndroidX.Core.View.Accessibility.AccessibilityViewCommandMoveHtmlArguments
AndroidX.Core.View.Accessibility.AccessibilityViewCommandMoveHtmlArguments.AccessibilityViewCommandMoveHtmlArguments() -> void
AndroidX.Core.View.Accessibility.AccessibilityViewCommandMoveHtmlArguments.HTMLElement.get -> string?
AndroidX.Core.View.Accessibility.AccessibilityViewCommandMoveWindowArguments
AndroidX.Core.View.Accessibility.AccessibilityViewCommandMoveWindowArguments.AccessibilityViewCommandMoveWindowArguments() -> void
AndroidX.Core.View.Accessibility.AccessibilityViewCommandMoveWindowArguments.GetX() -> int
AndroidX.Core.View.Accessibility.AccessibilityViewCommandMoveWindowArguments.GetY() -> int
AndroidX.Core.View.Accessibility.AccessibilityViewCommandScrollToPositionArguments
AndroidX.Core.View.Accessibility.AccessibilityViewCommandScrollToPositionArguments.AccessibilityViewCommandScrollToPositionArguments() -> void
AndroidX.Core.View.Accessibility.AccessibilityViewCommandScrollToPositionArguments.Column.get -> int
AndroidX.Core.View.Accessibility.AccessibilityViewCommandScrollToPositionArguments.Row.get -> int
AndroidX.Core.View.Accessibility.AccessibilityViewCommandSetProgressArguments
AndroidX.Core.View.Accessibility.AccessibilityViewCommandSetProgressArguments.AccessibilityViewCommandSetProgressArguments() -> void
AndroidX.Core.View.Accessibility.AccessibilityViewCommandSetProgressArguments.Progress.get -> float
AndroidX.Core.View.Accessibility.AccessibilityViewCommandSetSelectionArguments
AndroidX.Core.View.Accessibility.AccessibilityViewCommandSetSelectionArguments.AccessibilityViewCommandSetSelectionArguments() -> void
AndroidX.Core.View.Accessibility.AccessibilityViewCommandSetSelectionArguments.End.get -> int
AndroidX.Core.View.Accessibility.AccessibilityViewCommandSetSelectionArguments.Start.get -> int
AndroidX.Core.View.Accessibility.AccessibilityViewCommandSetTextArguments
AndroidX.Core.View.Accessibility.AccessibilityViewCommandSetTextArguments.AccessibilityViewCommandSetTextArguments() -> void
AndroidX.Core.View.Accessibility.AccessibilityViewCommandSetTextArguments.Text.get -> string?
AndroidX.Core.View.Accessibility.AccessibilityViewCommandSetTextArguments.TextFormatted.get -> Java.Lang.ICharSequence?
AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat
AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.AccessibilityWindowInfoCompat() -> void
AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.AccessibilityWindowInfoCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.Title.get -> string?
AndroidX.Core.View.Accessibility.IAccessibilityViewCommand
AndroidX.Core.View.Accessibility.IAccessibilityViewCommand.Perform(Android.Views.View? view, AndroidX.Core.View.Accessibility.AccessibilityViewCommandCommandArguments? arguments) -> bool
AndroidX.Core.View.AccessibilityDelegateCompat
AndroidX.Core.View.AccessibilityDelegateCompat.AccessibilityDelegateCompat() -> void
AndroidX.Core.View.AccessibilityDelegateCompat.AccessibilityDelegateCompat(Android.Views.View.AccessibilityDelegate? originalDelegate) -> void
AndroidX.Core.View.AccessibilityDelegateCompat.AccessibilityDelegateCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.ActionProvider
AndroidX.Core.View.ActionProvider.ActionProvider(Android.Content.Context? context) -> void
AndroidX.Core.View.ActionProvider.ActionProvider(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.ActionProvider.ISubUiVisibilityListener
AndroidX.Core.View.ActionProvider.ISubUiVisibilityListener.OnSubUiVisibilityChanged(bool isVisible) -> void
AndroidX.Core.View.ActionProvider.IVisibilityListener
AndroidX.Core.View.ActionProvider.IVisibilityListener.OnActionProviderVisibilityChanged(bool isVisible) -> void
AndroidX.Core.View.ActionProvider.SubUiVisibility -> System.EventHandler<AndroidX.Core.View.ActionProvider.SubUiVisibilityEventArgs!>!
AndroidX.Core.View.ActionProvider.SubUiVisibilityEventArgs
AndroidX.Core.View.ActionProvider.SubUiVisibilityEventArgs.IsVisible.get -> bool
AndroidX.Core.View.ActionProvider.SubUiVisibilityEventArgs.SubUiVisibilityEventArgs(bool isVisible) -> void
AndroidX.Core.View.ActionProvider.Visibility -> System.EventHandler<AndroidX.Core.View.ActionProvider.VisibilityEventArgs!>!
AndroidX.Core.View.ActionProvider.VisibilityEventArgs
AndroidX.Core.View.ActionProvider.VisibilityEventArgs.IsVisible.get -> bool
AndroidX.Core.View.ActionProvider.VisibilityEventArgs.VisibilityEventArgs(bool isVisible) -> void
AndroidX.Core.View.Animation.PathInterpolatorCompat
AndroidX.Core.View.AnimationCancelEventArgs
AndroidX.Core.View.AnimationCancelEventArgs.AnimationCancelEventArgs(Android.Views.View? view) -> void
AndroidX.Core.View.AnimationCancelEventArgs.View.get -> Android.Views.View?
AndroidX.Core.View.AnimationEndEventArgs
AndroidX.Core.View.AnimationEndEventArgs.AnimationEndEventArgs(Android.Views.View? view) -> void
AndroidX.Core.View.AnimationEndEventArgs.View.get -> Android.Views.View?
AndroidX.Core.View.AnimationStartEventArgs
AndroidX.Core.View.AnimationStartEventArgs.AnimationStartEventArgs(Android.Views.View? view) -> void
AndroidX.Core.View.AnimationStartEventArgs.View.get -> Android.Views.View?
AndroidX.Core.View.ApplyWindowInsetsHandler
AndroidX.Core.View.AutoFill.AutofillIdCompat
AndroidX.Core.View.AutoFill.AutofillIdCompat.AutofillIdCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.ContentCapture.ContentCaptureSessionCompat
AndroidX.Core.View.ContentCapture.ContentCaptureSessionCompat.ContentCaptureSessionCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.ContentCapture.ContentCaptureSessionCompat.NotifyViewTextChanged(Android.Views.Autofill.AutofillId? id, string? text) -> void
AndroidX.Core.View.ContentInfoCompat
AndroidX.Core.View.ContentInfoCompat.Builder
AndroidX.Core.View.ContentInfoCompat.Builder.Build() -> AndroidX.Core.View.ContentInfoCompat?
AndroidX.Core.View.ContentInfoCompat.Builder.Builder(Android.Content.ClipData? clip, int source) -> void
AndroidX.Core.View.ContentInfoCompat.Builder.Builder(AndroidX.Core.View.ContentInfoCompat? other) -> void
AndroidX.Core.View.ContentInfoCompat.Builder.SetClip(Android.Content.ClipData? clip) -> AndroidX.Core.View.ContentInfoCompat.Builder?
AndroidX.Core.View.ContentInfoCompat.Builder.SetExtras(Android.OS.Bundle? extras) -> AndroidX.Core.View.ContentInfoCompat.Builder?
AndroidX.Core.View.ContentInfoCompat.Builder.SetFlags(int flags) -> AndroidX.Core.View.ContentInfoCompat.Builder?
AndroidX.Core.View.ContentInfoCompat.Builder.SetLinkUri(Android.Net.Uri? linkUri) -> AndroidX.Core.View.ContentInfoCompat.Builder?
AndroidX.Core.View.ContentInfoCompat.Builder.SetSource(int source) -> AndroidX.Core.View.ContentInfoCompat.Builder?
AndroidX.Core.View.ContentInfoCompat.Clip.get -> Android.Content.ClipData?
AndroidX.Core.View.ContentInfoCompat.Extras.get -> Android.OS.Bundle?
AndroidX.Core.View.ContentInfoCompat.Flags.get -> int
AndroidX.Core.View.ContentInfoCompat.IFlags
AndroidX.Core.View.ContentInfoCompat.ISource
AndroidX.Core.View.ContentInfoCompat.LinkUri.get -> Android.Net.Uri?
AndroidX.Core.View.ContentInfoCompat.Partition(AndroidX.Core.Util.IPredicate? itemPredicate) -> Android.Util.Pair?
AndroidX.Core.View.ContentInfoCompat.Source.get -> int
AndroidX.Core.View.ContentInfoCompat.ToContentInfo() -> Android.Views.ContentInfo?
AndroidX.Core.View.DifferentialMotionFlingController
AndroidX.Core.View.DifferentialMotionFlingController.DifferentialMotionFlingController(Android.Content.Context? context, AndroidX.Core.View.IDifferentialMotionFlingTarget? target) -> void
AndroidX.Core.View.DifferentialMotionFlingController.DifferentialMotionFlingController(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.DisplayCompat
AndroidX.Core.View.DisplayCompat.ModeCompat
AndroidX.Core.View.DisplayCompat.ModeCompat.IsNative.get -> bool
AndroidX.Core.View.DisplayCompat.ModeCompat.PhysicalHeight.get -> int
AndroidX.Core.View.DisplayCompat.ModeCompat.PhysicalWidth.get -> int
AndroidX.Core.View.DisplayCompat.ModeCompat.ToMode() -> Android.Views.Display.Mode?
AndroidX.Core.View.DisplayCutoutCompat
AndroidX.Core.View.DisplayCutoutCompat.BoundingRects.get -> System.Collections.Generic.IList<Android.Graphics.Rect!>?
AndroidX.Core.View.DisplayCutoutCompat.CutoutPath.get -> Android.Graphics.Path?
AndroidX.Core.View.DisplayCutoutCompat.DisplayCutoutCompat(Android.Graphics.Rect? safeInsets, System.Collections.Generic.IList<Android.Graphics.Rect!>? boundingRects) -> void
AndroidX.Core.View.DisplayCutoutCompat.DisplayCutoutCompat(AndroidX.Core.Graphics.Insets? safeInsets, Android.Graphics.Rect? boundLeft, Android.Graphics.Rect? boundTop, Android.Graphics.Rect? boundRight, Android.Graphics.Rect? boundBottom, AndroidX.Core.Graphics.Insets? waterfallInsets) -> void
AndroidX.Core.View.DisplayCutoutCompat.DisplayCutoutCompat(AndroidX.Core.Graphics.Insets? safeInsets, Android.Graphics.Rect? boundLeft, Android.Graphics.Rect? boundTop, Android.Graphics.Rect? boundRight, Android.Graphics.Rect? boundBottom, AndroidX.Core.Graphics.Insets? waterfallInsets, Android.Graphics.Path? cutoutPath) -> void
AndroidX.Core.View.DisplayCutoutCompat.SafeInsetBottom.get -> int
AndroidX.Core.View.DisplayCutoutCompat.SafeInsetLeft.get -> int
AndroidX.Core.View.DisplayCutoutCompat.SafeInsetRight.get -> int
AndroidX.Core.View.DisplayCutoutCompat.SafeInsetTop.get -> int
AndroidX.Core.View.DisplayCutoutCompat.WaterfallInsets.get -> AndroidX.Core.Graphics.Insets?
AndroidX.Core.View.DragAndDropPermissionsCompat
AndroidX.Core.View.DragAndDropPermissionsCompat.Release() -> void
AndroidX.Core.View.DragStartHelper
AndroidX.Core.View.DragStartHelper.DragStartEventArgs
AndroidX.Core.View.DragStartHelper.DragStartEventArgs.DragStartEventArgs(bool handled, Android.Views.View? v, AndroidX.Core.View.DragStartHelper? helper) -> void
AndroidX.Core.View.DragStartHelper.DragStartEventArgs.Handled.get -> bool
AndroidX.Core.View.DragStartHelper.DragStartEventArgs.Handled.set -> void
AndroidX.Core.View.DragStartHelper.DragStartEventArgs.Helper.get -> AndroidX.Core.View.DragStartHelper?
AndroidX.Core.View.DragStartHelper.DragStartEventArgs.V.get -> Android.Views.View?
AndroidX.Core.View.DragStartHelper.DragStartHelper(Android.Views.View? view, AndroidX.Core.View.DragStartHelper.IOnDragStartListener? listener) -> void
AndroidX.Core.View.DragStartHelper.DragStartHelper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.DragStartHelper.IOnDragStartListener
AndroidX.Core.View.DragStartHelper.IOnDragStartListener.OnDragStart(Android.Views.View? v, AndroidX.Core.View.DragStartHelper? helper) -> bool
AndroidX.Core.View.GestureDetectorCompat
AndroidX.Core.View.GestureDetectorCompat.GestureDetectorCompat(Android.Content.Context? context, Android.Views.GestureDetector.IOnGestureListener? listener) -> void
AndroidX.Core.View.GestureDetectorCompat.GestureDetectorCompat(Android.Content.Context? context, Android.Views.GestureDetector.IOnGestureListener? listener, Android.OS.Handler? handler) -> void
AndroidX.Core.View.GestureDetectorCompat.IsLongpressEnabled.get -> bool
AndroidX.Core.View.GestureDetectorCompat.IsLongpressEnabled.set -> void
AndroidX.Core.View.GestureDetectorCompat.OnTouchEvent(Android.Views.MotionEvent? e) -> bool
AndroidX.Core.View.GestureDetectorCompat.SetOnDoubleTapListener(Android.Views.GestureDetector.IOnDoubleTapListener? listener) -> void
AndroidX.Core.View.GravityCompat
AndroidX.Core.View.HapticFeedbackConstantsCompat
AndroidX.Core.View.HapticFeedbackConstantsCompat.IHapticFeedbackFlags
AndroidX.Core.View.HapticFeedbackConstantsCompat.IHapticFeedbackType
AndroidX.Core.View.IDifferentialMotionFlingTarget
AndroidX.Core.View.IDifferentialMotionFlingTarget.ScaledScrollFactor.get -> float
AndroidX.Core.View.IDifferentialMotionFlingTarget.StartDifferentialMotionFling(float p0) -> bool
AndroidX.Core.View.IDifferentialMotionFlingTarget.StopDifferentialMotionFling() -> void
AndroidX.Core.View.ILayoutInflaterFactory
AndroidX.Core.View.ILayoutInflaterFactory.OnCreateView(Android.Views.View? parent, string? name, Android.Content.Context? context, Android.Util.IAttributeSet? attrs) -> Android.Views.View?
AndroidX.Core.View.IMenuHost
AndroidX.Core.View.IMenuHost.AddMenuProvider(AndroidX.Core.View.IMenuProvider? p0) -> void
AndroidX.Core.View.IMenuHost.AddMenuProvider(AndroidX.Core.View.IMenuProvider? p0, AndroidX.Lifecycle.ILifecycleOwner? p1) -> void
AndroidX.Core.View.IMenuHost.AddMenuProvider(AndroidX.Core.View.IMenuProvider? p0, AndroidX.Lifecycle.ILifecycleOwner? p1, AndroidX.Lifecycle.Lifecycle.State? p2) -> void
AndroidX.Core.View.IMenuHost.InvalidateMenu() -> void
AndroidX.Core.View.IMenuHost.RemoveMenuProvider(AndroidX.Core.View.IMenuProvider? p0) -> void
AndroidX.Core.View.IMenuProvider
AndroidX.Core.View.IMenuProvider.OnCreateMenu(Android.Views.IMenu? p0, Android.Views.MenuInflater? p1) -> void
AndroidX.Core.View.IMenuProvider.OnMenuClosed(Android.Views.IMenu? menu) -> void
AndroidX.Core.View.IMenuProvider.OnMenuItemSelected(Android.Views.IMenuItem? p0) -> bool
AndroidX.Core.View.IMenuProvider.OnPrepareMenu(Android.Views.IMenu? menu) -> void
AndroidX.Core.View.INestedScrollingChild
AndroidX.Core.View.INestedScrollingChild.DispatchNestedFling(float velocityX, float velocityY, bool consumed) -> bool
AndroidX.Core.View.INestedScrollingChild.DispatchNestedPreFling(float velocityX, float velocityY) -> bool
AndroidX.Core.View.INestedScrollingChild.DispatchNestedPreScroll(int dx, int dy, int[]? consumed, int[]? offsetInWindow) -> bool
AndroidX.Core.View.INestedScrollingChild.DispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[]? offsetInWindow) -> bool
AndroidX.Core.View.INestedScrollingChild.HasNestedScrollingParent.get -> bool
AndroidX.Core.View.INestedScrollingChild.NestedScrollingEnabled.get -> bool
AndroidX.Core.View.INestedScrollingChild.NestedScrollingEnabled.set -> void
AndroidX.Core.View.INestedScrollingChild.StartNestedScroll(Android.Views.ScrollAxis axes) -> bool
AndroidX.Core.View.INestedScrollingChild.StopNestedScroll() -> void
AndroidX.Core.View.INestedScrollingChild2
AndroidX.Core.View.INestedScrollingChild2.DispatchNestedPreScroll(int dx, int dy, int[]? consumed, int[]? offsetInWindow, int type) -> bool
AndroidX.Core.View.INestedScrollingChild2.DispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[]? offsetInWindow, int type) -> bool
AndroidX.Core.View.INestedScrollingChild2.InvokeHasNestedScrollingParent(int type) -> bool
AndroidX.Core.View.INestedScrollingChild2.StartNestedScroll(Android.Views.ScrollAxis axes, int type) -> bool
AndroidX.Core.View.INestedScrollingChild2.StopNestedScroll(int type) -> void
AndroidX.Core.View.INestedScrollingChild3
AndroidX.Core.View.INestedScrollingChild3.DispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[]? offsetInWindow, int type, int[]? consumed) -> void
AndroidX.Core.View.INestedScrollingParent
AndroidX.Core.View.INestedScrollingParent.NestedScrollAxes.get -> Android.Views.ScrollAxis
AndroidX.Core.View.INestedScrollingParent.OnNestedFling(Android.Views.View? target, float velocityX, float velocityY, bool consumed) -> bool
AndroidX.Core.View.INestedScrollingParent.OnNestedPreFling(Android.Views.View? target, float velocityX, float velocityY) -> bool
AndroidX.Core.View.INestedScrollingParent.OnNestedPreScroll(Android.Views.View? target, int dx, int dy, int[]? consumed) -> void
AndroidX.Core.View.INestedScrollingParent.OnNestedScroll(Android.Views.View? target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) -> void
AndroidX.Core.View.INestedScrollingParent.OnNestedScrollAccepted(Android.Views.View? child, Android.Views.View? target, Android.Views.ScrollAxis axes) -> void
AndroidX.Core.View.INestedScrollingParent.OnStartNestedScroll(Android.Views.View? child, Android.Views.View? target, Android.Views.ScrollAxis axes) -> bool
AndroidX.Core.View.INestedScrollingParent.OnStopNestedScroll(Android.Views.View? target) -> void
AndroidX.Core.View.INestedScrollingParent2
AndroidX.Core.View.INestedScrollingParent2.OnNestedPreScroll(Android.Views.View? target, int dx, int dy, int[]? consumed, int type) -> void
AndroidX.Core.View.INestedScrollingParent2.OnNestedScroll(Android.Views.View? target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int type) -> void
AndroidX.Core.View.INestedScrollingParent2.OnNestedScrollAccepted(Android.Views.View! child, Android.Views.View! target, int axis, int type) -> void
AndroidX.Core.View.INestedScrollingParent2.OnNestedScrollAccepted(Android.Views.View? child, Android.Views.View? target, Android.Views.ScrollAxis axes, int type) -> void
AndroidX.Core.View.INestedScrollingParent2.OnStartNestedScroll(Android.Views.View! child, Android.Views.View! target, int axis, int type) -> bool
AndroidX.Core.View.INestedScrollingParent2.OnStartNestedScroll(Android.Views.View? child, Android.Views.View? target, Android.Views.ScrollAxis axes, int type) -> bool
AndroidX.Core.View.INestedScrollingParent2.OnStopNestedScroll(Android.Views.View? target, int type) -> void
AndroidX.Core.View.INestedScrollingParent3
AndroidX.Core.View.INestedScrollingParent3.OnNestedScroll(Android.Views.View? target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int type, int[]? consumed) -> void
AndroidX.Core.View.IOnApplyWindowInsetsListener
AndroidX.Core.View.IOnApplyWindowInsetsListener.OnApplyWindowInsets(Android.Views.View? v, AndroidX.Core.View.WindowInsetsCompat? insets) -> AndroidX.Core.View.WindowInsetsCompat?
AndroidX.Core.View.IOnReceiveContentListener
AndroidX.Core.View.IOnReceiveContentListener.OnReceiveContent(Android.Views.View? view, AndroidX.Core.View.ContentInfoCompat? payload) -> AndroidX.Core.View.ContentInfoCompat?
AndroidX.Core.View.IOnReceiveContentViewBehavior
AndroidX.Core.View.IOnReceiveContentViewBehavior.OnReceiveContent(AndroidX.Core.View.ContentInfoCompat? payload) -> AndroidX.Core.View.ContentInfoCompat?
AndroidX.Core.View.IScrollingView
AndroidX.Core.View.IScrollingView.ComputeHorizontalScrollExtent() -> int
AndroidX.Core.View.IScrollingView.ComputeHorizontalScrollOffset() -> int
AndroidX.Core.View.IScrollingView.ComputeHorizontalScrollRange() -> int
AndroidX.Core.View.IScrollingView.ComputeVerticalScrollExtent() -> int
AndroidX.Core.View.IScrollingView.ComputeVerticalScrollOffset() -> int
AndroidX.Core.View.IScrollingView.ComputeVerticalScrollRange() -> int
AndroidX.Core.View.ITintableBackgroundView
AndroidX.Core.View.ITintableBackgroundView.SupportBackgroundTintList.get -> Android.Content.Res.ColorStateList?
AndroidX.Core.View.ITintableBackgroundView.SupportBackgroundTintList.set -> void
AndroidX.Core.View.ITintableBackgroundView.SupportBackgroundTintMode.get -> Android.Graphics.PorterDuff.Mode?
AndroidX.Core.View.ITintableBackgroundView.SupportBackgroundTintMode.set -> void
AndroidX.Core.View.IViewPropertyAnimatorListener
AndroidX.Core.View.IViewPropertyAnimatorListener.OnAnimationCancel(Android.Views.View? view) -> void
AndroidX.Core.View.IViewPropertyAnimatorListener.OnAnimationEnd(Android.Views.View? view) -> void
AndroidX.Core.View.IViewPropertyAnimatorListener.OnAnimationStart(Android.Views.View? view) -> void
AndroidX.Core.View.IViewPropertyAnimatorUpdateListener
AndroidX.Core.View.IViewPropertyAnimatorUpdateListener.OnAnimationUpdate(Android.Views.View? view) -> void
AndroidX.Core.View.IWindowInsetsAnimationControlListenerCompat
AndroidX.Core.View.IWindowInsetsAnimationControlListenerCompat.OnCancelled(AndroidX.Core.View.WindowInsetsAnimationControllerCompat? controller) -> void
AndroidX.Core.View.IWindowInsetsAnimationControlListenerCompat.OnFinished(AndroidX.Core.View.WindowInsetsAnimationControllerCompat? controller) -> void
AndroidX.Core.View.IWindowInsetsAnimationControlListenerCompat.OnReady(AndroidX.Core.View.WindowInsetsAnimationControllerCompat? controller, int types) -> void
AndroidX.Core.View.InputDeviceCompat
AndroidX.Core.View.InputMethod.EditorInfoCompat
AndroidX.Core.View.InputMethod.EditorInfoCompat.EditorInfoCompat() -> void
AndroidX.Core.View.InputMethod.InputConnectionCompat
AndroidX.Core.View.InputMethod.InputConnectionCompat.CommitContentEventArgs
AndroidX.Core.View.InputMethod.InputConnectionCompat.CommitContentEventArgs.CommitContentEventArgs(bool handled, AndroidX.Core.View.InputMethod.InputContentInfoCompat? inputContentInfo, int flags, Android.OS.Bundle? opts) -> void
AndroidX.Core.View.InputMethod.InputConnectionCompat.CommitContentEventArgs.Flags.get -> int
AndroidX.Core.View.InputMethod.InputConnectionCompat.CommitContentEventArgs.Handled.get -> bool
AndroidX.Core.View.InputMethod.InputConnectionCompat.CommitContentEventArgs.Handled.set -> void
AndroidX.Core.View.InputMethod.InputConnectionCompat.CommitContentEventArgs.InputContentInfo.get -> AndroidX.Core.View.InputMethod.InputContentInfoCompat?
AndroidX.Core.View.InputMethod.InputConnectionCompat.CommitContentEventArgs.Opts.get -> Android.OS.Bundle?
AndroidX.Core.View.InputMethod.InputConnectionCompat.IOnCommitContentListener
AndroidX.Core.View.InputMethod.InputConnectionCompat.IOnCommitContentListener.OnCommitContent(AndroidX.Core.View.InputMethod.InputContentInfoCompat? inputContentInfo, int flags, Android.OS.Bundle? opts) -> bool
AndroidX.Core.View.InputMethod.InputConnectionCompat.InputConnectionCompat() -> void
AndroidX.Core.View.InputMethod.InputContentInfoCompat
AndroidX.Core.View.InputMethod.InputContentInfoCompat.ContentUri.get -> Android.Net.Uri?
AndroidX.Core.View.InputMethod.InputContentInfoCompat.Description.get -> Android.Content.ClipDescription?
AndroidX.Core.View.InputMethod.InputContentInfoCompat.InputContentInfoCompat(Android.Net.Uri? contentUri, Android.Content.ClipDescription? description, Android.Net.Uri? linkUri) -> void
AndroidX.Core.View.InputMethod.InputContentInfoCompat.LinkUri.get -> Android.Net.Uri?
AndroidX.Core.View.InputMethod.InputContentInfoCompat.ReleasePermission() -> void
AndroidX.Core.View.InputMethod.InputContentInfoCompat.RequestPermission() -> void
AndroidX.Core.View.InputMethod.InputContentInfoCompat.Unwrap() -> Java.Lang.Object?
AndroidX.Core.View.Insets.ColorProtection
AndroidX.Core.View.Insets.ColorProtection.ColorProtection(int side) -> void
AndroidX.Core.View.Insets.ColorProtection.ColorProtection(int side, int color) -> void
AndroidX.Core.View.Insets.ColorProtection.ColorProtection(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.Insets.GradientProtection
AndroidX.Core.View.Insets.GradientProtection.GradientProtection(int side) -> void
AndroidX.Core.View.Insets.GradientProtection.GradientProtection(int side, int color) -> void
AndroidX.Core.View.Insets.GradientProtection.GradientProtection(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.Insets.Protection
AndroidX.Core.View.Insets.Protection.Protection(int side) -> void
AndroidX.Core.View.Insets.Protection.Protection(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.Insets.ProtectionLayout
AndroidX.Core.View.Insets.ProtectionLayout.ProtectionLayout(Android.Content.Context? context) -> void
AndroidX.Core.View.Insets.ProtectionLayout.ProtectionLayout(Android.Content.Context? context, Android.Util.IAttributeSet? attrs) -> void
AndroidX.Core.View.Insets.ProtectionLayout.ProtectionLayout(Android.Content.Context? context, Android.Util.IAttributeSet? attrs, int defStyleAttr) -> void
AndroidX.Core.View.Insets.ProtectionLayout.ProtectionLayout(Android.Content.Context? context, Android.Util.IAttributeSet? attrs, int defStyleAttr, int defStyleRes) -> void
AndroidX.Core.View.Insets.ProtectionLayout.ProtectionLayout(Android.Content.Context? context, System.Collections.Generic.IList<AndroidX.Core.View.Insets.Protection!>? protections) -> void
AndroidX.Core.View.Insets.ProtectionLayout.ProtectionLayout(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.KeyEventDispatcher
AndroidX.Core.View.KeyEventDispatcher.IComponent
AndroidX.Core.View.KeyEventDispatcher.IComponent.SuperDispatchKeyEvent(Android.Views.KeyEvent? e) -> bool
AndroidX.Core.View.KeyEventDispatcher.KeyEventDispatcher(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.LayoutInflaterCompat
AndroidX.Core.View.MarginLayoutParamsCompat
AndroidX.Core.View.MenuCompat
AndroidX.Core.View.MenuHostHelper
AndroidX.Core.View.MenuHostHelper.MenuHostHelper(Java.Lang.IRunnable? onInvalidateMenuCallback) -> void
AndroidX.Core.View.MenuHostHelper.MenuHostHelper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.MenuItemCompat
AndroidX.Core.View.MenuItemCompat.IOnActionExpandListener
AndroidX.Core.View.MenuItemCompat.IOnActionExpandListener.OnMenuItemActionCollapse(Android.Views.IMenuItem? item) -> bool
AndroidX.Core.View.MenuItemCompat.IOnActionExpandListener.OnMenuItemActionExpand(Android.Views.IMenuItem? item) -> bool
AndroidX.Core.View.MenuItemCompat.MenuItemActionCollapseEventArgs
AndroidX.Core.View.MenuItemCompat.MenuItemActionCollapseEventArgs.Handled.get -> bool
AndroidX.Core.View.MenuItemCompat.MenuItemActionCollapseEventArgs.Handled.set -> void
AndroidX.Core.View.MenuItemCompat.MenuItemActionCollapseEventArgs.Item.get -> Android.Views.IMenuItem?
AndroidX.Core.View.MenuItemCompat.MenuItemActionCollapseEventArgs.MenuItemActionCollapseEventArgs(bool handled, Android.Views.IMenuItem? item) -> void
AndroidX.Core.View.MenuItemCompat.MenuItemActionExpandEventArgs
AndroidX.Core.View.MenuItemCompat.MenuItemActionExpandEventArgs.Handled.get -> bool
AndroidX.Core.View.MenuItemCompat.MenuItemActionExpandEventArgs.Handled.set -> void
AndroidX.Core.View.MenuItemCompat.MenuItemActionExpandEventArgs.Item.get -> Android.Views.IMenuItem?
AndroidX.Core.View.MenuItemCompat.MenuItemActionExpandEventArgs.MenuItemActionExpandEventArgs(bool handled, Android.Views.IMenuItem? item) -> void
AndroidX.Core.View.MotionEventCompat
AndroidX.Core.View.NestedScrollingChildHelper
AndroidX.Core.View.NestedScrollingChildHelper.NestedScrollingChildHelper(Android.Views.View? view) -> void
AndroidX.Core.View.NestedScrollingChildHelper.NestedScrollingChildHelper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.NestedScrollingParentHelper
AndroidX.Core.View.NestedScrollingParentHelper.NestedScrollingParentHelper(Android.Views.ViewGroup? viewGroup) -> void
AndroidX.Core.View.NestedScrollingParentHelper.NestedScrollingParentHelper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.OneShotPreDrawListener
AndroidX.Core.View.OneShotPreDrawListener.OnPreDraw() -> bool
AndroidX.Core.View.OneShotPreDrawListener.OnViewAttachedToWindow(Android.Views.View? v) -> void
AndroidX.Core.View.OneShotPreDrawListener.OnViewDetachedFromWindow(Android.Views.View? v) -> void
AndroidX.Core.View.OneShotPreDrawListener.RemoveListener() -> void
AndroidX.Core.View.PointerIconCompat
AndroidX.Core.View.PointerIconCompat.PointerIcon.get -> Java.Lang.Object?
AndroidX.Core.View.ReceiveContentHandler
AndroidX.Core.View.RoundedCornerCompat
AndroidX.Core.View.RoundedCornerCompat.Center.get -> Android.Graphics.Point?
AndroidX.Core.View.RoundedCornerCompat.CenterX.get -> int
AndroidX.Core.View.RoundedCornerCompat.CenterY.get -> int
AndroidX.Core.View.RoundedCornerCompat.IPosition
AndroidX.Core.View.RoundedCornerCompat.Position.get -> int
AndroidX.Core.View.RoundedCornerCompat.Radius.get -> int
AndroidX.Core.View.RoundedCornerCompat.RoundedCornerCompat(int position, int radius, int centerX, int centerY) -> void
AndroidX.Core.View.ScaleGestureDetectorCompat
AndroidX.Core.View.ScrollFeedbackProviderCompat
AndroidX.Core.View.ScrollFeedbackProviderCompat.ScrollFeedbackProviderCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.SoftwareKeyboardControllerCompat
AndroidX.Core.View.SoftwareKeyboardControllerCompat.Hide() -> void
AndroidX.Core.View.SoftwareKeyboardControllerCompat.Show() -> void
AndroidX.Core.View.SoftwareKeyboardControllerCompat.SoftwareKeyboardControllerCompat(Android.Views.View? view) -> void
AndroidX.Core.View.VelocityTrackerCompat
AndroidX.Core.View.VelocityTrackerCompat.IVelocityTrackableMotionEventAxis
AndroidX.Core.View.ViewCompat
AndroidX.Core.View.ViewCompat.IFocusDirection
AndroidX.Core.View.ViewCompat.IFocusRealDirection
AndroidX.Core.View.ViewCompat.IFocusRelativeDirection
AndroidX.Core.View.ViewCompat.INestedScrollType
AndroidX.Core.View.ViewCompat.IOnUnhandledKeyEventListenerCompat
AndroidX.Core.View.ViewCompat.IOnUnhandledKeyEventListenerCompat.OnUnhandledKeyEvent(Android.Views.View? v, Android.Views.KeyEvent? e) -> bool
AndroidX.Core.View.ViewCompat.IScrollAxis
AndroidX.Core.View.ViewCompat.IScrollIndicators
AndroidX.Core.View.ViewCompat.ViewCompat() -> void
AndroidX.Core.View.ViewCompat.ViewCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.ViewConfigurationCompat
AndroidX.Core.View.ViewGroupCompat
AndroidX.Core.View.ViewParentCompat
AndroidX.Core.View.ViewPropertyAnimatorCompat
AndroidX.Core.View.ViewPropertyAnimatorCompat.Alpha(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.AlphaBy(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.Cancel() -> void
AndroidX.Core.View.ViewPropertyAnimatorCompat.Duration.get -> long
AndroidX.Core.View.ViewPropertyAnimatorCompat.Interpolator.get -> Android.Views.Animations.IInterpolator?
AndroidX.Core.View.ViewPropertyAnimatorCompat.Rotation(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.RotationBy(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.RotationX(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.RotationXBy(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.RotationY(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.RotationYBy(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.ScaleX(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.ScaleXBy(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.ScaleY(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.ScaleYBy(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.SetDuration(long value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.SetInterpolator(Android.Views.Animations.IInterpolator? value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.SetListener(AndroidX.Core.View.IViewPropertyAnimatorListener? listener) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.SetStartDelay(long value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.SetUpdateListener(AndroidX.Core.View.IViewPropertyAnimatorUpdateListener? listener) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.Start() -> void
AndroidX.Core.View.ViewPropertyAnimatorCompat.StartDelay.get -> long
AndroidX.Core.View.ViewPropertyAnimatorCompat.TranslationX(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.TranslationXBy(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.TranslationY(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.TranslationYBy(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.TranslationZ(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.TranslationZBy(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.WithEndAction(Java.Lang.IRunnable? runnable) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.WithLayer() -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.WithStartAction(Java.Lang.IRunnable? runnable) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.X(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.XBy(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.Y(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.YBy(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.Z(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorCompat.ZBy(float value) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
AndroidX.Core.View.ViewPropertyAnimatorListenerAdapter
AndroidX.Core.View.ViewPropertyAnimatorListenerAdapter.ViewPropertyAnimatorListenerAdapter() -> void
AndroidX.Core.View.ViewPropertyAnimatorListenerAdapter.ViewPropertyAnimatorListenerAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.ViewPropertyAnimatorUpdateEventArgs
AndroidX.Core.View.ViewPropertyAnimatorUpdateEventArgs.View.get -> Android.Views.View?
AndroidX.Core.View.ViewPropertyAnimatorUpdateEventArgs.ViewPropertyAnimatorUpdateEventArgs(Android.Views.View? view) -> void
AndroidX.Core.View.ViewStructureCompat
AndroidX.Core.View.ViewStructureCompat.SetContentDescription(string? charSequence) -> void
AndroidX.Core.View.ViewStructureCompat.SetText(string? charSequence) -> void
AndroidX.Core.View.ViewStructureCompat.ViewStructureCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.WindowCompat
AndroidX.Core.View.WindowInsetsAnimationCompat
AndroidX.Core.View.WindowInsetsAnimationCompat.Alpha.get -> float
AndroidX.Core.View.WindowInsetsAnimationCompat.Alpha.set -> void
AndroidX.Core.View.WindowInsetsAnimationCompat.BoundsCompat
AndroidX.Core.View.WindowInsetsAnimationCompat.BoundsCompat.BoundsCompat(AndroidX.Core.Graphics.Insets? lowerBound, AndroidX.Core.Graphics.Insets? upperBound) -> void
AndroidX.Core.View.WindowInsetsAnimationCompat.BoundsCompat.Inset(AndroidX.Core.Graphics.Insets? insets) -> AndroidX.Core.View.WindowInsetsAnimationCompat.BoundsCompat?
AndroidX.Core.View.WindowInsetsAnimationCompat.BoundsCompat.LowerBound.get -> AndroidX.Core.Graphics.Insets?
AndroidX.Core.View.WindowInsetsAnimationCompat.BoundsCompat.ToBounds() -> Android.Views.WindowInsetsAnimation.Bounds?
AndroidX.Core.View.WindowInsetsAnimationCompat.BoundsCompat.UpperBound.get -> AndroidX.Core.Graphics.Insets?
AndroidX.Core.View.WindowInsetsAnimationCompat.Callback
AndroidX.Core.View.WindowInsetsAnimationCompat.Callback.Callback(int dispatchMode) -> void
AndroidX.Core.View.WindowInsetsAnimationCompat.Callback.Callback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.WindowInsetsAnimationCompat.Callback.DispatchMode.get -> int
AndroidX.Core.View.WindowInsetsAnimationCompat.Callback.IDispatchMode
AndroidX.Core.View.WindowInsetsAnimationCompat.DurationMillis.get -> long
AndroidX.Core.View.WindowInsetsAnimationCompat.Fraction.get -> float
AndroidX.Core.View.WindowInsetsAnimationCompat.Fraction.set -> void
AndroidX.Core.View.WindowInsetsAnimationCompat.InterpolatedFraction.get -> float
AndroidX.Core.View.WindowInsetsAnimationCompat.Interpolator.get -> Android.Views.Animations.IInterpolator?
AndroidX.Core.View.WindowInsetsAnimationCompat.TypeMask.get -> int
AndroidX.Core.View.WindowInsetsAnimationCompat.WindowInsetsAnimationCompat(int typeMask, Android.Views.Animations.IInterpolator? interpolator, long durationMillis) -> void
AndroidX.Core.View.WindowInsetsAnimationControllerCompat
AndroidX.Core.View.WindowInsetsAnimationControllerCompat.CurrentAlpha.get -> float
AndroidX.Core.View.WindowInsetsAnimationControllerCompat.CurrentFraction.get -> float
AndroidX.Core.View.WindowInsetsAnimationControllerCompat.CurrentInsets.get -> AndroidX.Core.Graphics.Insets?
AndroidX.Core.View.WindowInsetsAnimationControllerCompat.Finish(bool shown) -> void
AndroidX.Core.View.WindowInsetsAnimationControllerCompat.HiddenStateInsets.get -> AndroidX.Core.Graphics.Insets?
AndroidX.Core.View.WindowInsetsAnimationControllerCompat.IsCancelled.get -> bool
AndroidX.Core.View.WindowInsetsAnimationControllerCompat.IsFinished.get -> bool
AndroidX.Core.View.WindowInsetsAnimationControllerCompat.IsReady.get -> bool
AndroidX.Core.View.WindowInsetsAnimationControllerCompat.SetInsetsAndAlpha(AndroidX.Core.Graphics.Insets? insets, float alpha, float fraction) -> void
AndroidX.Core.View.WindowInsetsAnimationControllerCompat.ShownStateInsets.get -> AndroidX.Core.Graphics.Insets?
AndroidX.Core.View.WindowInsetsAnimationControllerCompat.Types.get -> int
AndroidX.Core.View.WindowInsetsCompat
AndroidX.Core.View.WindowInsetsCompat.Builder
AndroidX.Core.View.WindowInsetsCompat.Builder.Build() -> AndroidX.Core.View.WindowInsetsCompat?
AndroidX.Core.View.WindowInsetsCompat.Builder.Builder() -> void
AndroidX.Core.View.WindowInsetsCompat.Builder.Builder(AndroidX.Core.View.WindowInsetsCompat? insets) -> void
AndroidX.Core.View.WindowInsetsCompat.Builder.SetDisplayCutout(AndroidX.Core.View.DisplayCutoutCompat? displayCutout) -> AndroidX.Core.View.WindowInsetsCompat.Builder?
AndroidX.Core.View.WindowInsetsCompat.Builder.SetInsets(int typeMask, AndroidX.Core.Graphics.Insets? insets) -> AndroidX.Core.View.WindowInsetsCompat.Builder?
AndroidX.Core.View.WindowInsetsCompat.Builder.SetInsetsIgnoringVisibility(int typeMask, AndroidX.Core.Graphics.Insets? insets) -> AndroidX.Core.View.WindowInsetsCompat.Builder?
AndroidX.Core.View.WindowInsetsCompat.Builder.SetMandatorySystemGestureInsets(AndroidX.Core.Graphics.Insets? insets) -> AndroidX.Core.View.WindowInsetsCompat.Builder?
AndroidX.Core.View.WindowInsetsCompat.Builder.SetPrivacyIndicatorBounds(Android.Graphics.Rect? bounds) -> AndroidX.Core.View.WindowInsetsCompat.Builder?
AndroidX.Core.View.WindowInsetsCompat.Builder.SetRoundedCorner(int position, AndroidX.Core.View.RoundedCornerCompat? roundedCorner) -> AndroidX.Core.View.WindowInsetsCompat.Builder?
AndroidX.Core.View.WindowInsetsCompat.Builder.SetStableInsets(AndroidX.Core.Graphics.Insets? insets) -> AndroidX.Core.View.WindowInsetsCompat.Builder?
AndroidX.Core.View.WindowInsetsCompat.Builder.SetSystemGestureInsets(AndroidX.Core.Graphics.Insets? insets) -> AndroidX.Core.View.WindowInsetsCompat.Builder?
AndroidX.Core.View.WindowInsetsCompat.Builder.SetSystemWindowInsets(AndroidX.Core.Graphics.Insets? insets) -> AndroidX.Core.View.WindowInsetsCompat.Builder?
AndroidX.Core.View.WindowInsetsCompat.Builder.SetTappableElementInsets(AndroidX.Core.Graphics.Insets? insets) -> AndroidX.Core.View.WindowInsetsCompat.Builder?
AndroidX.Core.View.WindowInsetsCompat.Builder.SetVisible(int typeMask, bool visible) -> AndroidX.Core.View.WindowInsetsCompat.Builder?
AndroidX.Core.View.WindowInsetsCompat.Side
AndroidX.Core.View.WindowInsetsCompat.Side.IInsetsSide
AndroidX.Core.View.WindowInsetsCompat.Type
AndroidX.Core.View.WindowInsetsCompat.Type.IInsetsType
AndroidX.Core.View.WindowInsetsCompat.WindowInsetsCompat(AndroidX.Core.View.WindowInsetsCompat? src) -> void
AndroidX.Core.View.WindowInsetsCompat.WindowInsetsCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.View.WindowInsetsControllerCompat
AndroidX.Core.View.WindowInsetsControllerCompat.AddOnControllableInsetsChangedListener(AndroidX.Core.View.WindowInsetsControllerCompat.IOnControllableInsetsChangedListener? listener) -> void
AndroidX.Core.View.WindowInsetsControllerCompat.AppearanceLightNavigationBars.get -> bool
AndroidX.Core.View.WindowInsetsControllerCompat.AppearanceLightNavigationBars.set -> void
AndroidX.Core.View.WindowInsetsControllerCompat.AppearanceLightStatusBars.get -> bool
AndroidX.Core.View.WindowInsetsControllerCompat.AppearanceLightStatusBars.set -> void
AndroidX.Core.View.WindowInsetsControllerCompat.ControlWindowInsetsAnimation(int types, long durationMillis, Android.Views.Animations.IInterpolator? interpolator, Android.OS.CancellationSignal? cancellationSignal, AndroidX.Core.View.IWindowInsetsAnimationControlListenerCompat? listener) -> void
AndroidX.Core.View.WindowInsetsControllerCompat.ControllableInsetsChanged -> System.EventHandler<AndroidX.Core.View.WindowInsetsControllerCompat.ControllableInsetsChangedEventArgs!>!
AndroidX.Core.View.WindowInsetsControllerCompat.ControllableInsetsChangedEventArgs
AndroidX.Core.View.WindowInsetsControllerCompat.ControllableInsetsChangedEventArgs.ControllableInsetsChangedEventArgs(AndroidX.Core.View.WindowInsetsControllerCompat? controller, int typeMask) -> void
AndroidX.Core.View.WindowInsetsControllerCompat.ControllableInsetsChangedEventArgs.Controller.get -> AndroidX.Core.View.WindowInsetsControllerCompat?
AndroidX.Core.View.WindowInsetsControllerCompat.ControllableInsetsChangedEventArgs.TypeMask.get -> int
AndroidX.Core.View.WindowInsetsControllerCompat.Hide(int types) -> void
AndroidX.Core.View.WindowInsetsControllerCompat.IOnControllableInsetsChangedListener
AndroidX.Core.View.WindowInsetsControllerCompat.IOnControllableInsetsChangedListener.OnControllableInsetsChanged(AndroidX.Core.View.WindowInsetsControllerCompat? controller, int typeMask) -> void
AndroidX.Core.View.WindowInsetsControllerCompat.RemoveOnControllableInsetsChangedListener(AndroidX.Core.View.WindowInsetsControllerCompat.IOnControllableInsetsChangedListener? listener) -> void
AndroidX.Core.View.WindowInsetsControllerCompat.Show(int types) -> void
AndroidX.Core.View.WindowInsetsControllerCompat.SystemBarsBehavior.get -> int
AndroidX.Core.View.WindowInsetsControllerCompat.SystemBarsBehavior.set -> void
AndroidX.Core.View.WindowInsetsControllerCompat.WindowInsetsControllerCompat(Android.Views.Window? window, Android.Views.View? view) -> void
AndroidX.Core.Widget.AutoScrollHelper
AndroidX.Core.Widget.AutoScrollHelper.AutoScrollHelper(Android.Views.View? target) -> void
AndroidX.Core.Widget.AutoScrollHelper.AutoScrollHelper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Widget.AutoSizeableTextView
AndroidX.Core.Widget.AutoSizeableTextViewConsts
AndroidX.Core.Widget.CheckedTextViewCompat
AndroidX.Core.Widget.CompoundButtonCompat
AndroidX.Core.Widget.ContentLoadingProgressBar
AndroidX.Core.Widget.ContentLoadingProgressBar.ContentLoadingProgressBar(Android.Content.Context? context) -> void
AndroidX.Core.Widget.ContentLoadingProgressBar.ContentLoadingProgressBar(Android.Content.Context? context, Android.Util.IAttributeSet? attrs) -> void
AndroidX.Core.Widget.ContentLoadingProgressBar.ContentLoadingProgressBar(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Widget.EdgeEffectCompat
AndroidX.Core.Widget.EdgeEffectCompat.Draw(Android.Graphics.Canvas? canvas) -> bool
AndroidX.Core.Widget.EdgeEffectCompat.EdgeEffectCompat(Android.Content.Context? context) -> void
AndroidX.Core.Widget.EdgeEffectCompat.Finish() -> void
AndroidX.Core.Widget.EdgeEffectCompat.IsFinished.get -> bool
AndroidX.Core.Widget.EdgeEffectCompat.OnAbsorb(int velocity) -> bool
AndroidX.Core.Widget.EdgeEffectCompat.OnPull(float deltaDistance) -> bool
AndroidX.Core.Widget.EdgeEffectCompat.OnPull(float deltaDistance, float displacement) -> bool
AndroidX.Core.Widget.EdgeEffectCompat.OnRelease() -> bool
AndroidX.Core.Widget.EdgeEffectCompat.SetSize(int width, int height) -> void
AndroidX.Core.Widget.IAutoSizeableTextView
AndroidX.Core.Widget.IAutoSizeableTextView.AutoSizeMaxTextSize.get -> int
AndroidX.Core.Widget.IAutoSizeableTextView.AutoSizeMinTextSize.get -> int
AndroidX.Core.Widget.IAutoSizeableTextView.AutoSizeStepGranularity.get -> int
AndroidX.Core.Widget.IAutoSizeableTextView.AutoSizeTextType.get -> Android.Widget.AutoSizeTextType
AndroidX.Core.Widget.IAutoSizeableTextView.GetAutoSizeTextAvailableSizes() -> int[]?
AndroidX.Core.Widget.IAutoSizeableTextView.PlatformSupportsAutosize.get -> bool
AndroidX.Core.Widget.IAutoSizeableTextView.SetAutoSizeTextTypeUniformWithConfiguration(int autoSizeMinTextSize, int autoSizeMaxTextSize, int autoSizeStepGranularity, int unit) -> void
AndroidX.Core.Widget.IAutoSizeableTextView.SetAutoSizeTextTypeUniformWithPresetSizes(int[]? presetSizes, int unit) -> void
AndroidX.Core.Widget.IAutoSizeableTextView.SetAutoSizeTextTypeWithDefaults(Android.Widget.AutoSizeTextType autoSizeTextType) -> void
AndroidX.Core.Widget.ITintableCheckedTextView
AndroidX.Core.Widget.ITintableCheckedTextView.SupportCheckMarkTintList.get -> Android.Content.Res.ColorStateList?
AndroidX.Core.Widget.ITintableCheckedTextView.SupportCheckMarkTintList.set -> void
AndroidX.Core.Widget.ITintableCheckedTextView.SupportCheckMarkTintMode.get -> Android.Graphics.PorterDuff.Mode?
AndroidX.Core.Widget.ITintableCheckedTextView.SupportCheckMarkTintMode.set -> void
AndroidX.Core.Widget.ITintableCompoundButton
AndroidX.Core.Widget.ITintableCompoundButton.SupportButtonTintList.get -> Android.Content.Res.ColorStateList?
AndroidX.Core.Widget.ITintableCompoundButton.SupportButtonTintList.set -> void
AndroidX.Core.Widget.ITintableCompoundButton.SupportButtonTintMode.get -> Android.Graphics.PorterDuff.Mode?
AndroidX.Core.Widget.ITintableCompoundButton.SupportButtonTintMode.set -> void
AndroidX.Core.Widget.ITintableCompoundDrawablesView
AndroidX.Core.Widget.ITintableCompoundDrawablesView.SupportCompoundDrawablesTintList.get -> Android.Content.Res.ColorStateList?
AndroidX.Core.Widget.ITintableCompoundDrawablesView.SupportCompoundDrawablesTintList.set -> void
AndroidX.Core.Widget.ITintableCompoundDrawablesView.SupportCompoundDrawablesTintMode.get -> Android.Graphics.PorterDuff.Mode?
AndroidX.Core.Widget.ITintableCompoundDrawablesView.SupportCompoundDrawablesTintMode.set -> void
AndroidX.Core.Widget.ITintableImageSourceView
AndroidX.Core.Widget.ITintableImageSourceView.SupportImageTintList.get -> Android.Content.Res.ColorStateList?
AndroidX.Core.Widget.ITintableImageSourceView.SupportImageTintList.set -> void
AndroidX.Core.Widget.ITintableImageSourceView.SupportImageTintMode.get -> Android.Graphics.PorterDuff.Mode?
AndroidX.Core.Widget.ITintableImageSourceView.SupportImageTintMode.set -> void
AndroidX.Core.Widget.ImageViewCompat
AndroidX.Core.Widget.ImageViewCompat.ImageViewCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Widget.ListPopupWindowCompat
AndroidX.Core.Widget.ListViewAutoScrollHelper
AndroidX.Core.Widget.ListViewAutoScrollHelper.ListViewAutoScrollHelper(Android.Widget.ListView? target) -> void
AndroidX.Core.Widget.ListViewAutoScrollHelper.ListViewAutoScrollHelper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Widget.ListViewCompat
AndroidX.Core.Widget.NestedScrollView
AndroidX.Core.Widget.NestedScrollView.IOnScrollChangeListener
AndroidX.Core.Widget.NestedScrollView.IOnScrollChangeListener.OnScrollChange(AndroidX.Core.Widget.NestedScrollView? v, int scrollX, int scrollY, int oldScrollX, int oldScrollY) -> void
AndroidX.Core.Widget.NestedScrollView.MEdgeGlowBottom.get -> Android.Widget.EdgeEffect?
AndroidX.Core.Widget.NestedScrollView.MEdgeGlowBottom.set -> void
AndroidX.Core.Widget.NestedScrollView.MEdgeGlowTop.get -> Android.Widget.EdgeEffect?
AndroidX.Core.Widget.NestedScrollView.MEdgeGlowTop.set -> void
AndroidX.Core.Widget.NestedScrollView.NestedScrollView(Android.Content.Context? context) -> void
AndroidX.Core.Widget.NestedScrollView.NestedScrollView(Android.Content.Context? context, Android.Util.IAttributeSet? attrs) -> void
AndroidX.Core.Widget.NestedScrollView.NestedScrollView(Android.Content.Context? context, Android.Util.IAttributeSet? attrs, int defStyleAttr) -> void
AndroidX.Core.Widget.NestedScrollView.NestedScrollView(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Core.Widget.NestedScrollView.ScrollChange -> System.EventHandler<AndroidX.Core.Widget.NestedScrollView.ScrollChangeEventArgs!>!
AndroidX.Core.Widget.NestedScrollView.ScrollChangeEventArgs
AndroidX.Core.Widget.NestedScrollView.ScrollChangeEventArgs.OldScrollX.get -> int
AndroidX.Core.Widget.NestedScrollView.ScrollChangeEventArgs.OldScrollY.get -> int
AndroidX.Core.Widget.NestedScrollView.ScrollChangeEventArgs.ScrollChangeEventArgs(AndroidX.Core.Widget.NestedScrollView? v, int scrollX, int scrollY, int oldScrollX, int oldScrollY) -> void
AndroidX.Core.Widget.NestedScrollView.ScrollChangeEventArgs.ScrollX.get -> int
AndroidX.Core.Widget.NestedScrollView.ScrollChangeEventArgs.ScrollY.get -> int
AndroidX.Core.Widget.NestedScrollView.ScrollChangeEventArgs.V.get -> AndroidX.Core.Widget.NestedScrollView?
AndroidX.Core.Widget.NestedScrollView.SmoothScrollBy(int dx, int dy) -> void
AndroidX.Core.Widget.NestedScrollView.SmoothScrollBy(int dx, int dy, int scrollDurationMs) -> void
AndroidX.Core.Widget.NestedScrollView.SmoothScrollTo(int x, int y) -> void
AndroidX.Core.Widget.NestedScrollView.SmoothScrollTo(int x, int y, int scrollDurationMs) -> void
AndroidX.Core.Widget.PopupMenuCompat
AndroidX.Core.Widget.PopupWindowCompat
AndroidX.Core.Widget.ScrollerCompat
AndroidX.Core.Widget.ScrollerCompat.AbortAnimation() -> void
AndroidX.Core.Widget.ScrollerCompat.ComputeScrollOffset() -> bool
AndroidX.Core.Widget.ScrollerCompat.CurrVelocity.get -> float
AndroidX.Core.Widget.ScrollerCompat.CurrX.get -> int
AndroidX.Core.Widget.ScrollerCompat.CurrY.get -> int
AndroidX.Core.Widget.ScrollerCompat.FinalX.get -> int
AndroidX.Core.Widget.ScrollerCompat.FinalY.get -> int
AndroidX.Core.Widget.ScrollerCompat.Fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY) -> void
AndroidX.Core.Widget.ScrollerCompat.Fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY, int overX, int overY) -> void
AndroidX.Core.Widget.ScrollerCompat.IsFinished.get -> bool
AndroidX.Core.Widget.ScrollerCompat.IsOverScrolled.get -> bool
AndroidX.Core.Widget.ScrollerCompat.NotifyHorizontalEdgeReached(int startX, int finalX, int overX) -> void
AndroidX.Core.Widget.ScrollerCompat.NotifyVerticalEdgeReached(int startY, int finalY, int overY) -> void
AndroidX.Core.Widget.ScrollerCompat.SpringBack(int startX, int startY, int minX, int maxX, int minY, int maxY) -> bool
AndroidX.Core.Widget.ScrollerCompat.StartScroll(int startX, int startY, int dx, int dy) -> void
AndroidX.Core.Widget.ScrollerCompat.StartScroll(int startX, int startY, int dx, int dy, int duration) -> void
AndroidX.Core.Widget.TextViewCompat
AndroidX.Core.Widget.TextViewCompat.IAutoSizeTextType
AndroidX.Core.Widget.TextViewOnReceiveContentListener
AndroidX.Core.Widget.TextViewOnReceiveContentListener.OnReceiveContent(Android.Views.View? view, AndroidX.Core.View.ContentInfoCompat? payload) -> AndroidX.Core.View.ContentInfoCompat?
AndroidX.Core.Widget.TextViewOnReceiveContentListener.TextViewOnReceiveContentListener() -> void
abstract Android.Support.V4.App.NotificationSideChannelStub.Cancel(string? packageName, int id, string? tag) -> void
abstract Android.Support.V4.App.NotificationSideChannelStub.CancelAll(string? packageName) -> void
abstract Android.Support.V4.App.NotificationSideChannelStub.Notify(string? packageName, int id, string? tag, Android.App.Notification? notification) -> void
abstract Android.Support.V4.OS.ResultReceiver2Stub.Send(int p0, Android.OS.Bundle? p1) -> void
abstract Android.Support.V4.OS.ResultReceiverStub.Send(int resultCode, Android.OS.Bundle? resultData) -> void
abstract AndroidX.Core.App.JobIntentService.OnHandleWork(Android.Content.Intent? intent) -> void
abstract AndroidX.Core.App.NotificationCompatSideChannelService.Cancel(string? packageName, int id, string? tag) -> void
abstract AndroidX.Core.App.NotificationCompatSideChannelService.CancelAll(string? packageName) -> void
abstract AndroidX.Core.App.NotificationCompatSideChannelService.Notify(string? packageName, int id, string? tag, Android.App.Notification? notification) -> void
abstract AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackStub.OnIsPermissionRevocationEnabledForAppResult(bool p0, bool p1) -> void
abstract AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceStub.IsPermissionRevocationEnabledForApp(AndroidX.Core.App.UnusedAppRestrictions.IUnusedAppRestrictionsBackportCallback? p0) -> void
abstract AndroidX.Core.Content.PM.ShortcutInfoCompatSaver.AddShortcuts(System.Collections.Generic.IList<AndroidX.Core.Content.PM.ShortcutInfoCompat!>? shortcuts) -> Java.Lang.Object?
abstract AndroidX.Core.Content.PM.ShortcutInfoCompatSaver.RemoveAllShortcuts() -> Java.Lang.Object?
abstract AndroidX.Core.Content.PM.ShortcutInfoCompatSaver.RemoveShortcuts(System.Collections.Generic.IList<string!>? shortcutIds) -> Java.Lang.Object?
abstract AndroidX.Core.Content.Resources.ResourcesCompat.FontCallback.OnFontRetrievalFailed(int reason) -> void
abstract AndroidX.Core.Content.Resources.ResourcesCompat.FontCallback.OnFontRetrieved(Android.Graphics.Typeface? typeface) -> void
abstract AndroidX.Core.Content.UnusedAppRestrictionsBackportService.IsPermissionRevocationEnabled(AndroidX.Core.Content.UnusedAppRestrictionsBackportCallback? p0) -> void
abstract AndroidX.Core.Location.GnssStatusCompat.GetAzimuthDegrees(int satelliteIndex) -> float
abstract AndroidX.Core.Location.GnssStatusCompat.GetBasebandCn0DbHz(int satelliteIndex) -> float
abstract AndroidX.Core.Location.GnssStatusCompat.GetCarrierFrequencyHz(int satelliteIndex) -> float
abstract AndroidX.Core.Location.GnssStatusCompat.GetCn0DbHz(int satelliteIndex) -> float
abstract AndroidX.Core.Location.GnssStatusCompat.GetConstellationType(int satelliteIndex) -> int
abstract AndroidX.Core.Location.GnssStatusCompat.GetElevationDegrees(int satelliteIndex) -> float
abstract AndroidX.Core.Location.GnssStatusCompat.GetSvid(int satelliteIndex) -> int
abstract AndroidX.Core.Location.GnssStatusCompat.HasAlmanacData(int satelliteIndex) -> bool
abstract AndroidX.Core.Location.GnssStatusCompat.HasBasebandCn0DbHz(int satelliteIndex) -> bool
abstract AndroidX.Core.Location.GnssStatusCompat.HasCarrierFrequencyHz(int satelliteIndex) -> bool
abstract AndroidX.Core.Location.GnssStatusCompat.HasEphemerisData(int satelliteIndex) -> bool
abstract AndroidX.Core.Location.GnssStatusCompat.SatelliteCount.get -> int
abstract AndroidX.Core.Location.GnssStatusCompat.UsedInFix(int satelliteIndex) -> bool
abstract AndroidX.Core.OS.ProfilingRequestBuilder.Params.get -> Android.OS.Bundle!
abstract AndroidX.Core.OS.ProfilingRequestBuilder.ProfilingType.get -> int
abstract AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.AccessibilityStateChangeListenerCompat.OnAccessibilityStateChanged(bool enabled) -> void
abstract AndroidX.Core.View.ActionProvider.OnCreateActionView() -> Android.Views.View?
abstract AndroidX.Core.View.WindowInsetsAnimationCompat.Callback.OnProgress(AndroidX.Core.View.WindowInsetsCompat? insets, System.Collections.Generic.IList<AndroidX.Core.View.WindowInsetsAnimationCompat!>? runningAnimations) -> AndroidX.Core.View.WindowInsetsCompat?
abstract AndroidX.Core.Widget.AutoScrollHelper.CanTargetScrollHorizontally(int direction) -> bool
abstract AndroidX.Core.Widget.AutoScrollHelper.CanTargetScrollVertically(int direction) -> bool
abstract AndroidX.Core.Widget.AutoScrollHelper.ScrollTargetBy(int deltaX, int deltaY) -> void
const AndroidX.Core.AccessibilityService.AccessibilityServiceInfoCompat.CapabilityCanFilterKeyEvents = 8 -> int
const AndroidX.Core.AccessibilityService.AccessibilityServiceInfoCompat.CapabilityCanRequestEnhancedWebAccessibility = 4 -> int
const AndroidX.Core.AccessibilityService.AccessibilityServiceInfoCompat.CapabilityCanRequestTouchExploration = 2 -> int
const AndroidX.Core.AccessibilityService.AccessibilityServiceInfoCompat.CapabilityCanRetrieveWindowContent = 1 -> int
const AndroidX.Core.AccessibilityService.AccessibilityServiceInfoCompat.FeedbackAllMask = -1 -> int
const AndroidX.Core.AccessibilityService.AccessibilityServiceInfoCompat.FeedbackBraille = 32 -> int
const AndroidX.Core.AccessibilityService.AccessibilityServiceInfoCompat.FlagIncludeNotImportantViews = 2 -> int
const AndroidX.Core.AccessibilityService.AccessibilityServiceInfoCompat.FlagReportViewIds = 16 -> int
const AndroidX.Core.AccessibilityService.AccessibilityServiceInfoCompat.FlagRequestEnhancedWebAccessibility = 8 -> int
const AndroidX.Core.AccessibilityService.AccessibilityServiceInfoCompat.FlagRequestFilterKeyEvents = 32 -> int
const AndroidX.Core.AccessibilityService.AccessibilityServiceInfoCompat.FlagRequestTouchExplorationMode = 4 -> int
const AndroidX.Core.App.ActivityOptionsCompat.ExtraUsageTimeReport = "android.activity.usage_time" -> string!
const AndroidX.Core.App.ActivityOptionsCompat.ExtraUsageTimeReportPackages = "android.usage_time_packages" -> string!
const AndroidX.Core.App.AppOpsManagerCompat.ModeAllowed = 0 -> int
const AndroidX.Core.App.AppOpsManagerCompat.ModeDefault = 3 -> int
const AndroidX.Core.App.AppOpsManagerCompat.ModeErrored = 2 -> int
const AndroidX.Core.App.AppOpsManagerCompat.ModeIgnored = 1 -> int
const AndroidX.Core.App.FrameMetricsAggregator.AnimationDuration = 256 -> int
const AndroidX.Core.App.FrameMetricsAggregator.AnimationIndex = 8 -> int
const AndroidX.Core.App.FrameMetricsAggregator.CommandDuration = 32 -> int
const AndroidX.Core.App.FrameMetricsAggregator.CommandIndex = 5 -> int
const AndroidX.Core.App.FrameMetricsAggregator.DelayDuration = 128 -> int
const AndroidX.Core.App.FrameMetricsAggregator.DelayIndex = 7 -> int
const AndroidX.Core.App.FrameMetricsAggregator.DrawDuration = 8 -> int
const AndroidX.Core.App.FrameMetricsAggregator.DrawIndex = 3 -> int
const AndroidX.Core.App.FrameMetricsAggregator.EveryDuration = 511 -> int
const AndroidX.Core.App.FrameMetricsAggregator.InputDuration = 2 -> int
const AndroidX.Core.App.FrameMetricsAggregator.InputIndex = 1 -> int
const AndroidX.Core.App.FrameMetricsAggregator.LayoutMeasureDuration = 4 -> int
const AndroidX.Core.App.FrameMetricsAggregator.LayoutMeasureIndex = 2 -> int
const AndroidX.Core.App.FrameMetricsAggregator.SwapDuration = 64 -> int
const AndroidX.Core.App.FrameMetricsAggregator.SwapIndex = 6 -> int
const AndroidX.Core.App.FrameMetricsAggregator.SyncDuration = 16 -> int
const AndroidX.Core.App.FrameMetricsAggregator.SyncIndex = 4 -> int
const AndroidX.Core.App.FrameMetricsAggregator.TotalDuration = 1 -> int
const AndroidX.Core.App.FrameMetricsAggregator.TotalIndex = 0 -> int
const AndroidX.Core.App.GrammaticalInflectionManagerCompat.GrammaticalGenderFeminine = 2 -> int
const AndroidX.Core.App.GrammaticalInflectionManagerCompat.GrammaticalGenderMasculine = 3 -> int
const AndroidX.Core.App.GrammaticalInflectionManagerCompat.GrammaticalGenderNeutral = 1 -> int
const AndroidX.Core.App.GrammaticalInflectionManagerCompat.GrammaticalGenderNotSpecified = 0 -> int
const AndroidX.Core.App.NavUtils.ParentActivity = "android.support.PARENT_ACTIVITY" -> string!
const AndroidX.Core.App.NotificationChannelCompat.DefaultChannelId = "miscellaneous" -> string!
const AndroidX.Core.App.NotificationCompat.Action.SemanticActionArchive = 5 -> int
const AndroidX.Core.App.NotificationCompat.Action.SemanticActionCall = 10 -> int
const AndroidX.Core.App.NotificationCompat.Action.SemanticActionDelete = 4 -> int
const AndroidX.Core.App.NotificationCompat.Action.SemanticActionMarkAsRead = 2 -> int
const AndroidX.Core.App.NotificationCompat.Action.SemanticActionMarkAsUnread = 3 -> int
const AndroidX.Core.App.NotificationCompat.Action.SemanticActionMute = 6 -> int
const AndroidX.Core.App.NotificationCompat.Action.SemanticActionNone = 0 -> int
const AndroidX.Core.App.NotificationCompat.Action.SemanticActionReply = 1 -> int
const AndroidX.Core.App.NotificationCompat.Action.SemanticActionThumbsDown = 9 -> int
const AndroidX.Core.App.NotificationCompat.Action.SemanticActionThumbsUp = 8 -> int
const AndroidX.Core.App.NotificationCompat.Action.SemanticActionUnmute = 7 -> int
const AndroidX.Core.App.NotificationCompat.BadgeIconLarge = 2 -> int
const AndroidX.Core.App.NotificationCompat.BadgeIconNone = 0 -> int
const AndroidX.Core.App.NotificationCompat.BadgeIconSmall = 1 -> int
const AndroidX.Core.App.NotificationCompat.CallStyle.CallTypeIncoming = 1 -> int
const AndroidX.Core.App.NotificationCompat.CallStyle.CallTypeOngoing = 2 -> int
const AndroidX.Core.App.NotificationCompat.CallStyle.CallTypeScreening = 3 -> int
const AndroidX.Core.App.NotificationCompat.CallStyle.CallTypeUnknown = 0 -> int
const AndroidX.Core.App.NotificationCompat.CategoryAlarm = "alarm" -> string!
const AndroidX.Core.App.NotificationCompat.CategoryCall = "call" -> string!
const AndroidX.Core.App.NotificationCompat.CategoryEmail = "email" -> string!
const AndroidX.Core.App.NotificationCompat.CategoryError = "err" -> string!
const AndroidX.Core.App.NotificationCompat.CategoryEvent = "event" -> string!
const AndroidX.Core.App.NotificationCompat.CategoryLocationSharing = "location_sharing" -> string!
const AndroidX.Core.App.NotificationCompat.CategoryMessage = "msg" -> string!
const AndroidX.Core.App.NotificationCompat.CategoryMissedCall = "missed_call" -> string!
const AndroidX.Core.App.NotificationCompat.CategoryNavigation = "navigation" -> string!
const AndroidX.Core.App.NotificationCompat.CategoryProgress = "progress" -> string!
const AndroidX.Core.App.NotificationCompat.CategoryPromo = "promo" -> string!
const AndroidX.Core.App.NotificationCompat.CategoryRecommendation = "recommendation" -> string!
const AndroidX.Core.App.NotificationCompat.CategoryReminder = "reminder" -> string!
const AndroidX.Core.App.NotificationCompat.CategoryService = "service" -> string!
const AndroidX.Core.App.NotificationCompat.CategorySocial = "social" -> string!
const AndroidX.Core.App.NotificationCompat.CategoryStatus = "status" -> string!
const AndroidX.Core.App.NotificationCompat.CategoryStopwatch = "stopwatch" -> string!
const AndroidX.Core.App.NotificationCompat.CategorySystem = "sys" -> string!
const AndroidX.Core.App.NotificationCompat.CategoryTransport = "transport" -> string!
const AndroidX.Core.App.NotificationCompat.CategoryVoicemail = "voicemail" -> string!
const AndroidX.Core.App.NotificationCompat.CategoryWorkout = "workout" -> string!
const AndroidX.Core.App.NotificationCompat.ColorDefault = 0 -> int
const AndroidX.Core.App.NotificationCompat.DefaultAll = -1 -> int
const AndroidX.Core.App.NotificationCompat.DefaultLights = 4 -> int
const AndroidX.Core.App.NotificationCompat.DefaultSound = 1 -> int
const AndroidX.Core.App.NotificationCompat.DefaultVibrate = 2 -> int
const AndroidX.Core.App.NotificationCompat.ExtraAnswerColor = "android.answerColor" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraAnswerIntent = "android.answerIntent" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraAudioContentsUri = "android.audioContents" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraBackgroundImageUri = "android.backgroundImageUri" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraBigText = "android.bigText" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraCallIsVideo = "android.callIsVideo" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraCallPerson = "android.callPerson" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraCallPersonCompat = "android.callPersonCompat" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraCallType = "android.callType" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraChannelGroupId = "android.intent.extra.CHANNEL_GROUP_ID" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraChannelId = "android.intent.extra.CHANNEL_ID" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraChronometerCountDown = "android.chronometerCountDown" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraColorized = "android.colorized" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraCompactActions = "android.compactActions" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraCompatTemplate = "androidx.core.app.extra.COMPAT_TEMPLATE" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraConversationTitle = "android.conversationTitle" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraDeclineColor = "android.declineColor" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraDeclineIntent = "android.declineIntent" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraHangUpIntent = "android.hangUpIntent" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraHiddenConversationTitle = "android.hiddenConversationTitle" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraHistoricMessages = "android.messages.historic" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraInfoText = "android.infoText" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraIsGroupConversation = "android.isGroupConversation" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraLargeIcon = "android.largeIcon" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraLargeIconBig = "android.largeIcon.big" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraMediaSession = "android.mediaSession" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraMessages = "android.messages" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraMessagingStyleUser = "android.messagingStyleUser" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraNotificationId = "android.intent.extra.NOTIFICATION_ID" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraNotificationTag = "android.intent.extra.NOTIFICATION_TAG" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraPeople = "android.people" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraPeopleList = "android.people.list" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraPicture = "android.picture" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraPictureContentDescription = "android.pictureContentDescription" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraPictureIcon = "android.pictureIcon" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraProgress = "android.progress" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraProgressEndIcon = "android.progressEndIcon" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraProgressIndeterminate = "android.progressIndeterminate" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraProgressMax = "android.progressMax" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraProgressPoints = "android.progressPoints" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraProgressSegments = "android.progressSegments" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraProgressStartIcon = "android.progressStartIcon" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraProgressTrackerIcon = "android.progressTrackerIcon" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraRemoteInputHistory = "android.remoteInputHistory" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraRequestPromotedOngoing = "android.requestPromotedOngoing" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraSelfDisplayName = "android.selfDisplayName" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraShortCriticalText = "android.shortCriticalText" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraShowBigPictureWhenCollapsed = "android.showBigPictureWhenCollapsed" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraShowChronometer = "android.showChronometer" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraShowWhen = "android.showWhen" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraSmallIcon = "android.icon" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraStyledByProgress = "android.styledByProgress" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraSubText = "android.subText" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraSummaryText = "android.summaryText" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraTemplate = "android.template" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraText = "android.text" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraTextLines = "android.textLines" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraTitle = "android.title" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraTitleBig = "android.title.big" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraVerificationIcon = "android.verificationIcon" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraVerificationIconCompat = "android.verificationIconCompat" -> string!
const AndroidX.Core.App.NotificationCompat.ExtraVerificationText = "android.verificationText" -> string!
const AndroidX.Core.App.NotificationCompat.FlagAutoCancel = 16 -> int
const AndroidX.Core.App.NotificationCompat.FlagBubble = 4096 -> int
const AndroidX.Core.App.NotificationCompat.FlagForegroundService = 64 -> int
const AndroidX.Core.App.NotificationCompat.FlagGroupSummary = 512 -> int
const AndroidX.Core.App.NotificationCompat.FlagHighPriority = 128 -> int
const AndroidX.Core.App.NotificationCompat.FlagInsistent = 4 -> int
const AndroidX.Core.App.NotificationCompat.FlagLocalOnly = 256 -> int
const AndroidX.Core.App.NotificationCompat.FlagNoClear = 32 -> int
const AndroidX.Core.App.NotificationCompat.FlagOngoingEvent = 2 -> int
const AndroidX.Core.App.NotificationCompat.FlagOnlyAlertOnce = 8 -> int
const AndroidX.Core.App.NotificationCompat.FlagShowLights = 1 -> int
const AndroidX.Core.App.NotificationCompat.ForegroundServiceDefault = 0 -> int
const AndroidX.Core.App.NotificationCompat.ForegroundServiceDeferred = 2 -> int
const AndroidX.Core.App.NotificationCompat.ForegroundServiceImmediate = 1 -> int
const AndroidX.Core.App.NotificationCompat.GroupAlertAll = 0 -> int
const AndroidX.Core.App.NotificationCompat.GroupAlertChildren = 2 -> int
const AndroidX.Core.App.NotificationCompat.GroupAlertSummary = 1 -> int
const AndroidX.Core.App.NotificationCompat.GroupKeySilent = "silent" -> string!
const AndroidX.Core.App.NotificationCompat.IntentCategoryNotificationPreferences = "android.intent.category.NOTIFICATION_PREFERENCES" -> string!
const AndroidX.Core.App.NotificationCompat.MaxActionButtons = 3 -> int
const AndroidX.Core.App.NotificationCompat.MessagingStyle.MaximumRetainedMessages = 25 -> int
const AndroidX.Core.App.NotificationCompat.PriorityDefault = 0 -> int
const AndroidX.Core.App.NotificationCompat.PriorityHigh = 1 -> int
const AndroidX.Core.App.NotificationCompat.PriorityLow = -1 -> int
const AndroidX.Core.App.NotificationCompat.PriorityMax = 2 -> int
const AndroidX.Core.App.NotificationCompat.PriorityMin = -2 -> int
const AndroidX.Core.App.NotificationCompat.StreamDefault = -1 -> int
const AndroidX.Core.App.NotificationCompat.VisibilityPrivate = 0 -> int
const AndroidX.Core.App.NotificationCompat.VisibilityPublic = 1 -> int
const AndroidX.Core.App.NotificationCompat.VisibilitySecret = -1 -> int
const AndroidX.Core.App.NotificationCompat.WearableExtender.ScreenTimeoutLong = -1 -> int
const AndroidX.Core.App.NotificationCompat.WearableExtender.ScreenTimeoutShort = 0 -> int
const AndroidX.Core.App.NotificationCompat.WearableExtender.SizeDefault = 0 -> int
const AndroidX.Core.App.NotificationCompat.WearableExtender.SizeFullScreen = 5 -> int
const AndroidX.Core.App.NotificationCompat.WearableExtender.SizeLarge = 4 -> int
const AndroidX.Core.App.NotificationCompat.WearableExtender.SizeMedium = 3 -> int
const AndroidX.Core.App.NotificationCompat.WearableExtender.SizeSmall = 2 -> int
const AndroidX.Core.App.NotificationCompat.WearableExtender.SizeXsmall = 1 -> int
const AndroidX.Core.App.NotificationCompat.WearableExtender.UnsetActionIndex = -1 -> int
const AndroidX.Core.App.NotificationCompatExtras.ExtraActionExtras = "android.support.actionExtras" -> string!
const AndroidX.Core.App.NotificationCompatExtras.ExtraGroupKey = "android.support.groupKey" -> string!
const AndroidX.Core.App.NotificationCompatExtras.ExtraGroupSummary = "android.support.isGroupSummary" -> string!
const AndroidX.Core.App.NotificationCompatExtras.ExtraLocalOnly = "android.support.localOnly" -> string!
const AndroidX.Core.App.NotificationCompatExtras.ExtraRemoteInputs = "android.support.remoteInputs" -> string!
const AndroidX.Core.App.NotificationCompatExtras.ExtraSortKey = "android.support.sortKey" -> string!
const AndroidX.Core.App.NotificationManagerCompat.ActionBindSideChannel = "android.support.BIND_NOTIFICATION_SIDE_CHANNEL" -> string!
const AndroidX.Core.App.NotificationManagerCompat.ExtraUseSideChannel = "android.support.useSideChannel" -> string!
const AndroidX.Core.App.NotificationManagerCompat.ImportanceDefault = 3 -> int
const AndroidX.Core.App.NotificationManagerCompat.ImportanceHigh = 4 -> int
const AndroidX.Core.App.NotificationManagerCompat.ImportanceLow = 2 -> int
const AndroidX.Core.App.NotificationManagerCompat.ImportanceMax = 5 -> int
const AndroidX.Core.App.NotificationManagerCompat.ImportanceMin = 1 -> int
const AndroidX.Core.App.NotificationManagerCompat.ImportanceNone = 0 -> int
const AndroidX.Core.App.NotificationManagerCompat.ImportanceUnspecified = -1000 -> int
const AndroidX.Core.App.NotificationManagerCompat.InterruptionFilterAlarms = 4 -> int
const AndroidX.Core.App.NotificationManagerCompat.InterruptionFilterAll = 1 -> int
const AndroidX.Core.App.NotificationManagerCompat.InterruptionFilterNone = 3 -> int
const AndroidX.Core.App.NotificationManagerCompat.InterruptionFilterPriority = 2 -> int
const AndroidX.Core.App.NotificationManagerCompat.InterruptionFilterUnknown = 0 -> int
const AndroidX.Core.App.RemoteInput.EditChoicesBeforeSendingAuto = 0 -> int
const AndroidX.Core.App.RemoteInput.EditChoicesBeforeSendingDisabled = 1 -> int
const AndroidX.Core.App.RemoteInput.EditChoicesBeforeSendingEnabled = 2 -> int
const AndroidX.Core.App.RemoteInput.ExtraResultsData = "android.remoteinput.resultsData" -> string!
const AndroidX.Core.App.RemoteInput.ResultsClipLabel = "android.remoteinput.results" -> string!
const AndroidX.Core.App.RemoteInput.SourceChoice = 1 -> int
const AndroidX.Core.App.RemoteInput.SourceFreeFormInput = 0 -> int
const AndroidX.Core.App.ServiceCompat.StartSticky = 1 -> int
const AndroidX.Core.App.ServiceCompat.StopForegroundDetach = 2 -> int
const AndroidX.Core.App.ServiceCompat.StopForegroundRemove = 1 -> int
const AndroidX.Core.App.ShareCompat.ExtraCallingActivity = "androidx.core.app.EXTRA_CALLING_ACTIVITY" -> string!
const AndroidX.Core.App.ShareCompat.ExtraCallingActivityInterop = "android.support.v4.app.EXTRA_CALLING_ACTIVITY" -> string!
const AndroidX.Core.App.ShareCompat.ExtraCallingPackage = "androidx.core.app.EXTRA_CALLING_PACKAGE" -> string!
const AndroidX.Core.App.ShareCompat.ExtraCallingPackageInterop = "android.support.v4.app.EXTRA_CALLING_PACKAGE" -> string!
const AndroidX.Core.Content.ContextCompat.ReceiverExported = 2 -> int
const AndroidX.Core.Content.ContextCompat.ReceiverNotExported = 4 -> int
const AndroidX.Core.Content.ContextCompat.ReceiverVisibleToInstantApps = 1 -> int
const AndroidX.Core.Content.IntentCompat.ActionCreateReminder = "android.intent.action.CREATE_REMINDER" -> string!
const AndroidX.Core.Content.IntentCompat.CategoryLeanbackLauncher = "android.intent.category.LEANBACK_LAUNCHER" -> string!
const AndroidX.Core.Content.IntentCompat.ExtraHtmlText = "android.intent.extra.HTML_TEXT" -> string!
const AndroidX.Core.Content.IntentCompat.ExtraStartPlayback = "android.intent.extra.START_PLAYBACK" -> string!
const AndroidX.Core.Content.IntentCompat.ExtraTime = "android.intent.extra.TIME" -> string!
const AndroidX.Core.Content.PM.ActivityInfoCompat.ConfigUiMode = 512 -> int
const AndroidX.Core.Content.PM.ShortcutInfoCompat.SurfaceLauncher = 1 -> int
const AndroidX.Core.Content.PM.ShortcutManagerCompat.ExtraShortcutId = "android.intent.extra.shortcut.ID" -> string!
const AndroidX.Core.Content.PM.ShortcutManagerCompat.FlagMatchCached = 8 -> int
const AndroidX.Core.Content.PM.ShortcutManagerCompat.FlagMatchDynamic = 2 -> int
const AndroidX.Core.Content.PM.ShortcutManagerCompat.FlagMatchManifest = 1 -> int
const AndroidX.Core.Content.PM.ShortcutManagerCompat.FlagMatchPinned = 4 -> int
const AndroidX.Core.Content.PackageManagerCompat.ActionPermissionRevocationSettings = "android.intent.action.AUTO_REVOKE_PERMISSIONS" -> string!
const AndroidX.Core.Content.PackageManagerCompat.LogTag = "PackageManagerCompat" -> string!
const AndroidX.Core.Content.PermissionChecker.PermissionDenied = -1 -> int
const AndroidX.Core.Content.PermissionChecker.PermissionDeniedAppOp = -2 -> int
const AndroidX.Core.Content.PermissionChecker.PermissionGranted = 0 -> int
const AndroidX.Core.Content.Resources.FontResourcesParserCompat.FetchStrategyAsync = 1 -> int
const AndroidX.Core.Content.Resources.FontResourcesParserCompat.FetchStrategyBlocking = 0 -> int
const AndroidX.Core.Content.Resources.FontResourcesParserCompat.InfiniteTimeoutValue = -1 -> int
const AndroidX.Core.Content.Resources.ResourcesCompat.IdNull = 0 -> int
const AndroidX.Core.Content.UnusedAppRestrictionsBackportService.ActionUnusedAppRestrictionsBackportConnection = "android.support.unusedapprestrictions.action.CustomUnusedAppRestrictionsBackportService" -> string!
const AndroidX.Core.Content.UnusedAppRestrictionsConstants.Api30 = 4 -> int
const AndroidX.Core.Content.UnusedAppRestrictionsConstants.Api30Backport = 3 -> int
const AndroidX.Core.Content.UnusedAppRestrictionsConstants.Api31 = 5 -> int
const AndroidX.Core.Content.UnusedAppRestrictionsConstants.Disabled = 2 -> int
const AndroidX.Core.Content.UnusedAppRestrictionsConstants.Error = 0 -> int
const AndroidX.Core.Content.UnusedAppRestrictionsConstants.FeatureNotAvailable = 1 -> int
const AndroidX.Core.Graphics.Drawable.IconCompat.TypeAdaptiveBitmap = 5 -> int
const AndroidX.Core.Graphics.Drawable.IconCompat.TypeBitmap = 1 -> int
const AndroidX.Core.Graphics.Drawable.IconCompat.TypeData = 3 -> int
const AndroidX.Core.Graphics.Drawable.IconCompat.TypeResource = 2 -> int
const AndroidX.Core.Graphics.Drawable.IconCompat.TypeUnknown = -1 -> int
const AndroidX.Core.Graphics.Drawable.IconCompat.TypeUri = 4 -> int
const AndroidX.Core.Graphics.Drawable.IconCompat.TypeUriAdaptiveBitmap = 6 -> int
const AndroidX.Core.Graphics.TypefaceCompat.DownloadableFallbackDebug = false -> bool
const AndroidX.Core.Graphics.TypefaceCompat.DownloadableFontTracing = true -> bool
const AndroidX.Core.Hardware.Display.DisplayManagerCompat.DisplayCategoryBuiltInDisplays = "android.hardware.display.category.BUILT_IN_DISPLAYS" -> string!
const AndroidX.Core.Hardware.Display.DisplayManagerCompat.DisplayCategoryPresentation = "android.hardware.display.category.PRESENTATION" -> string!
const AndroidX.Core.Internal.View.SupportMenu.CategoryMask = -65536 -> int
const AndroidX.Core.Internal.View.SupportMenu.CategoryShift = 16 -> int
const AndroidX.Core.Internal.View.SupportMenu.FlagKeepOpenOnSubmenuOpened = 4 -> int
const AndroidX.Core.Internal.View.SupportMenu.SupportedModifiersMask = 69647 -> int
const AndroidX.Core.Internal.View.SupportMenu.UserMask = 65535 -> int
const AndroidX.Core.Internal.View.SupportMenu.UserShift = 0 -> int
const AndroidX.Core.Internal.View.SupportMenuItem.ShowAsActionAlways = 2 -> int
const AndroidX.Core.Internal.View.SupportMenuItem.ShowAsActionCollapseActionView = 8 -> int
const AndroidX.Core.Internal.View.SupportMenuItem.ShowAsActionIfRoom = 1 -> int
const AndroidX.Core.Internal.View.SupportMenuItem.ShowAsActionNever = 0 -> int
const AndroidX.Core.Internal.View.SupportMenuItem.ShowAsActionWithText = 4 -> int
const AndroidX.Core.Location.GnssStatusCompat.ConstellationBeidou = 5 -> int
const AndroidX.Core.Location.GnssStatusCompat.ConstellationGalileo = 6 -> int
const AndroidX.Core.Location.GnssStatusCompat.ConstellationGlonass = 3 -> int
const AndroidX.Core.Location.GnssStatusCompat.ConstellationGps = 1 -> int
const AndroidX.Core.Location.GnssStatusCompat.ConstellationIrnss = 7 -> int
const AndroidX.Core.Location.GnssStatusCompat.ConstellationQzss = 4 -> int
const AndroidX.Core.Location.GnssStatusCompat.ConstellationSbas = 2 -> int
const AndroidX.Core.Location.GnssStatusCompat.ConstellationUnknown = 0 -> int
const AndroidX.Core.Location.LocationCompat.ExtraBearingAccuracy = "bearingAccuracy" -> string!
const AndroidX.Core.Location.LocationCompat.ExtraIsMock = "mockLocation" -> string!
const AndroidX.Core.Location.LocationCompat.ExtraMslAltitude = "androidx.core.location.extra.MSL_ALTITUDE" -> string!
const AndroidX.Core.Location.LocationCompat.ExtraMslAltitudeAccuracy = "androidx.core.location.extra.MSL_ALTITUDE_ACCURACY" -> string!
const AndroidX.Core.Location.LocationCompat.ExtraSpeedAccuracy = "speedAccuracy" -> string!
const AndroidX.Core.Location.LocationCompat.ExtraVerticalAccuracy = "verticalAccuracy" -> string!
const AndroidX.Core.Location.LocationRequestCompat.PassiveInterval = 9223372036854775807 -> long
const AndroidX.Core.Location.LocationRequestCompat.QualityBalancedPowerAccuracy = 102 -> int
const AndroidX.Core.Location.LocationRequestCompat.QualityHighAccuracy = 100 -> int
const AndroidX.Core.Location.LocationRequestCompat.QualityLowPower = 104 -> int
const AndroidX.Core.Net.ConnectivityManagerCompat.RestrictBackgroundStatusDisabled = 1 -> int
const AndroidX.Core.Net.ConnectivityManagerCompat.RestrictBackgroundStatusEnabled = 3 -> int
const AndroidX.Core.Net.ConnectivityManagerCompat.RestrictBackgroundStatusWhitelisted = 2 -> int
const AndroidX.Core.Net.MailTo.MailtoScheme = "mailto:" -> string!
const AndroidX.Core.OS.EnvironmentCompat.MediaUnknown = "unknown" -> string!
const AndroidX.Core.Provider.DocumentsContractCompat.DocumentCompat.FlagVirtualDocument = 512 -> int
const AndroidX.Core.Provider.FontsContractCompat.FontFamilyResult.StatusOk = 0 -> int
const AndroidX.Core.Provider.FontsContractCompat.FontFamilyResult.StatusUnexpectedDataProvided = 2 -> int
const AndroidX.Core.Provider.FontsContractCompat.FontFamilyResult.StatusWrongCertificates = 1 -> int
const AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback.FailReasonFontLoadError = -3 -> int
const AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback.FailReasonFontNotFound = 1 -> int
const AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback.FailReasonFontUnavailable = 2 -> int
const AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback.FailReasonMalformedQuery = 3 -> int
const AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback.FailReasonProviderNotFound = -1 -> int
const AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback.FailReasonSecurityViolation = -4 -> int
const AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback.FailReasonWrongCertificates = -2 -> int
const AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback.ResultOk = 0 -> int
const AndroidX.Core.Provider.FontsContractCompat.ParcelFontResults = "font_results" -> string!
const AndroidX.Core.Text.HtmlCompat.FromHtmlModeCompact = 63 -> int
const AndroidX.Core.Text.HtmlCompat.FromHtmlModeLegacy = 0 -> int
const AndroidX.Core.Text.HtmlCompat.FromHtmlOptionUseCssColors = 256 -> int
const AndroidX.Core.Text.HtmlCompat.FromHtmlSeparatorLineBreakBlockquote = 32 -> int
const AndroidX.Core.Text.HtmlCompat.FromHtmlSeparatorLineBreakDiv = 16 -> int
const AndroidX.Core.Text.HtmlCompat.FromHtmlSeparatorLineBreakHeading = 2 -> int
const AndroidX.Core.Text.HtmlCompat.FromHtmlSeparatorLineBreakList = 8 -> int
const AndroidX.Core.Text.HtmlCompat.FromHtmlSeparatorLineBreakListItem = 4 -> int
const AndroidX.Core.Text.HtmlCompat.FromHtmlSeparatorLineBreakParagraph = 1 -> int
const AndroidX.Core.Text.HtmlCompat.ToHtmlParagraphLinesConsecutive = 0 -> int
const AndroidX.Core.Text.HtmlCompat.ToHtmlParagraphLinesIndividual = 1 -> int
const AndroidX.Core.Text.Util.LocalePreferences.CalendarType.Chinese = "chinese" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.CalendarType.Dangi = "dangi" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.CalendarType.Default = "" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.CalendarType.Gregorian = "gregorian" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.CalendarType.Hebrew = "hebrew" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.CalendarType.Indian = "indian" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.CalendarType.Islamic = "islamic" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.CalendarType.IslamicCivil = "islamic-civil" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.CalendarType.IslamicRgsa = "islamic-rgsa" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.CalendarType.IslamicTbla = "islamic-tbla" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.CalendarType.IslamicUmalqura = "islamic-umalqura" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.CalendarType.Persian = "persian" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.FirstDayOfWeek.Default = "" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.FirstDayOfWeek.Friday = "fri" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.FirstDayOfWeek.Monday = "mon" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.FirstDayOfWeek.Saturday = "sat" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.FirstDayOfWeek.Sunday = "sun" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.FirstDayOfWeek.Thursday = "thu" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.FirstDayOfWeek.Tuesday = "tue" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.FirstDayOfWeek.Wednesday = "wed" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.HourCycle.Default = "" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.HourCycle.H11 = "h11" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.HourCycle.H12 = "h12" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.HourCycle.H23 = "h23" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.HourCycle.H24 = "h24" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.TemperatureUnit.Celsius = "celsius" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.TemperatureUnit.Default = "" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.TemperatureUnit.Fahrenheit = "fahrenhe" -> string!
const AndroidX.Core.Text.Util.LocalePreferences.TemperatureUnit.Kelvin = "kelvin" -> string!
const AndroidX.Core.Util.TimeUtils.HundredDayFieldLen = 19 -> int
const AndroidX.Core.View.Accessibility.AccessibilityClickableSpanCompat.SpanId = "ACCESSIBILITY_CLICKABLE_SPAN_ID" -> string!
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.ContentChangeTypeContentDescription = 4 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.ContentChangeTypeContentInvalid = 1024 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.ContentChangeTypeDragCancelled = 512 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.ContentChangeTypeDragDropped = 256 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.ContentChangeTypeDragStarted = 128 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.ContentChangeTypeEnabled = 4096 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.ContentChangeTypeError = 2048 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.ContentChangeTypePaneAppeared = 16 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.ContentChangeTypePaneDisappeared = 32 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.ContentChangeTypePaneTitle = 8 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.ContentChangeTypeStateDescription = 64 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.ContentChangeTypeSubtree = 1 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.ContentChangeTypeText = 2 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.ContentChangeTypeUndefined = 0 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.TypeAnnouncement = 16384 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.TypeAssistReadingContext = 16777216 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.TypeGestureDetectionEnd = 524288 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.TypeGestureDetectionStart = 262144 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.TypeTouchExplorationGestureEnd = 1024 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.TypeTouchExplorationGestureStart = 512 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.TypeTouchInteractionEnd = 2097152 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.TypeTouchInteractionStart = 1048576 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.TypeViewAccessibilityFocusCleared = 65536 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.TypeViewAccessibilityFocused = 32768 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.TypeViewContextClicked = 8388608 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.TypeViewHoverEnter = 128 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.TypeViewHoverExit = 256 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.TypeViewScrolled = 4096 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.TypeViewTargetedByScroll = 67108864 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.TypeViewTextSelectionChanged = 8192 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.TypeViewTextTraversedAtMovementGranularity = 131072 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.TypeWindowContentChanged = 2048 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.TypeWindowsChanged = 4194304 -> int
const AndroidX.Core.View.Accessibility.AccessibilityEventCompat.TypesAllMask = -1 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionAccessibilityFocus = 64 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionArgumentColumnInt = "android.view.accessibility.action.ARGUMENT_COLUMN_INT" -> string!
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionArgumentDirectionInt = "androidx.core.view.accessibility.action.ARGUMENT_DIRECTION_INT" -> string!
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionArgumentExtendSelectionBoolean = "ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN" -> string!
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionArgumentHtmlElementString = "ACTION_ARGUMENT_HTML_ELEMENT_STRING" -> string!
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionArgumentMoveWindowX = "ACTION_ARGUMENT_MOVE_WINDOW_X" -> string!
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionArgumentMoveWindowY = "ACTION_ARGUMENT_MOVE_WINDOW_Y" -> string!
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionArgumentMovementGranularityInt = "ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT" -> string!
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionArgumentPressAndHoldDurationMillisInt = "android.view.accessibility.action.ARGUMENT_PRESS_AND_HOLD_DURATION_MILLIS_INT" -> string!
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionArgumentProgressValue = "android.view.accessibility.action.ARGUMENT_PROGRESS_VALUE" -> string!
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionArgumentRowInt = "android.view.accessibility.action.ARGUMENT_ROW_INT" -> string!
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionArgumentScrollAmountFloat = "androidx.core.view.accessibility.action.ARGUMENT_SCROLL_AMOUNT_FLOAT" -> string!
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionArgumentSelectionEndInt = "ACTION_ARGUMENT_SELECTION_END_INT" -> string!
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionArgumentSelectionStartInt = "ACTION_ARGUMENT_SELECTION_START_INT" -> string!
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionArgumentSetTextCharsequence = "ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE" -> string!
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionClearAccessibilityFocus = 128 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionClearFocus = 2 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionClearSelection = 8 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionClick = 16 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionCollapse = 524288 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionCopy = 16384 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionCut = 65536 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionDismiss = 1048576 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionExpand = 262144 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionFocus = 1 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionLongClick = 32 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionNextAtMovementGranularity = 256 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionNextHtmlElement = 1024 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionPaste = 32768 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionPreviousAtMovementGranularity = 512 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionPreviousHtmlElement = 2048 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionScrollBackward = 8192 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionScrollForward = 4096 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionSelect = 4 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionSetSelection = 131072 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionSetText = 2097152 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.SelectionModeMultiple = 2 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.SelectionModeNone = 0 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.SelectionModeSingle = 1 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.Undefined = -1 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ExtraDataTextCharacterLocationArgLength = "android.view.accessibility.extra.DATA_TEXT_CHARACTER_LOCATION_ARG_LENGTH" -> string!
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ExtraDataTextCharacterLocationArgMaxLength = 20000 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ExtraDataTextCharacterLocationArgStartIndex = "android.view.accessibility.extra.DATA_TEXT_CHARACTER_LOCATION_ARG_START_INDEX" -> string!
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ExtraDataTextCharacterLocationInWindowKey = "android.view.accessibility.extra.DATA_TEXT_CHARACTER_LOCATION_IN_WINDOW_KEY" -> string!
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ExtraDataTextCharacterLocationKey = "android.view.accessibility.extra.DATA_TEXT_CHARACTER_LOCATION_KEY" -> string!
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.FlagPrefetchAncestors = 1 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.FlagPrefetchDescendantsBreadthFirst = 16 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.FlagPrefetchDescendantsDepthFirst = 8 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.FlagPrefetchDescendantsHybrid = 4 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.FlagPrefetchSiblings = 2 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.FlagPrefetchUninterruptible = 32 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.FocusAccessibility = 2 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.FocusInput = 1 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.MaxNumberOfPrefetchedNodes = 50 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.MovementGranularityCharacter = 1 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.MovementGranularityLine = 4 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.MovementGranularityPage = 16 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.MovementGranularityParagraph = 8 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.MovementGranularityWord = 2 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat.RangeTypeFloat = 1 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat.RangeTypeInt = 0 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat.RangeTypePercent = 2 -> int
const AndroidX.Core.View.Accessibility.AccessibilityNodeProviderCompat.HostViewId = -1 -> int
const AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.TypeAccessibilityOverlay = 4 -> int
const AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.TypeApplication = 1 -> int
const AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.TypeInputMethod = 2 -> int
const AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.TypeMagnificationOverlay = 6 -> int
const AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.TypeSplitScreenDivider = 5 -> int
const AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.TypeSystem = 3 -> int
const AndroidX.Core.View.ContentInfoCompat.FlagConvertToPlainText = 1 -> int
const AndroidX.Core.View.ContentInfoCompat.SourceApp = 0 -> int
const AndroidX.Core.View.ContentInfoCompat.SourceAutofill = 4 -> int
const AndroidX.Core.View.ContentInfoCompat.SourceClipboard = 1 -> int
const AndroidX.Core.View.ContentInfoCompat.SourceDragAndDrop = 3 -> int
const AndroidX.Core.View.ContentInfoCompat.SourceInputMethod = 2 -> int
const AndroidX.Core.View.ContentInfoCompat.SourceProcessText = 5 -> int
const AndroidX.Core.View.GravityCompat.End = 8388613 -> int
const AndroidX.Core.View.GravityCompat.RelativeHorizontalGravityMask = 8388615 -> int
const AndroidX.Core.View.GravityCompat.RelativeLayoutDirection = 8388608 -> int
const AndroidX.Core.View.GravityCompat.Start = 8388611 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.ClockTick = 4 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.Confirm = 16 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.ContextClick = 6 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.DragStart = 25 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.FlagIgnoreViewSetting = 1 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.GestureEnd = 13 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.GestureStart = 12 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.GestureThresholdActivate = 23 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.GestureThresholdDeactivate = 24 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.KeyboardPress = 3 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.KeyboardRelease = 7 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.KeyboardTap = 3 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.LongPress = 0 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.NoHaptics = -1 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.Reject = 17 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.SegmentFrequentTick = 27 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.SegmentTick = 26 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.TextHandleMove = 9 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.ToggleOff = 22 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.ToggleOn = 21 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.VirtualKey = 1 -> int
const AndroidX.Core.View.HapticFeedbackConstantsCompat.VirtualKeyRelease = 8 -> int
const AndroidX.Core.View.InputDeviceCompat.SourceAny = -256 -> int
const AndroidX.Core.View.InputDeviceCompat.SourceClassButton = 1 -> int
const AndroidX.Core.View.InputDeviceCompat.SourceClassJoystick = 16 -> int
const AndroidX.Core.View.InputDeviceCompat.SourceClassMask = 255 -> int
const AndroidX.Core.View.InputDeviceCompat.SourceClassNone = 0 -> int
const AndroidX.Core.View.InputDeviceCompat.SourceClassPointer = 2 -> int
const AndroidX.Core.View.InputDeviceCompat.SourceClassPosition = 8 -> int
const AndroidX.Core.View.InputDeviceCompat.SourceClassTrackball = 4 -> int
const AndroidX.Core.View.InputDeviceCompat.SourceDpad = 513 -> int
const AndroidX.Core.View.InputDeviceCompat.SourceGamepad = 1025 -> int
const AndroidX.Core.View.InputDeviceCompat.SourceHdmi = 33554433 -> int
const AndroidX.Core.View.InputDeviceCompat.SourceJoystick = 16777232 -> int
const AndroidX.Core.View.InputDeviceCompat.SourceKeyboard = 257 -> int
const AndroidX.Core.View.InputDeviceCompat.SourceMouse = 8194 -> int
const AndroidX.Core.View.InputDeviceCompat.SourceRotaryEncoder = 4194304 -> int
const AndroidX.Core.View.InputDeviceCompat.SourceStylus = 16386 -> int
const AndroidX.Core.View.InputDeviceCompat.SourceTouchNavigation = 2097152 -> int
const AndroidX.Core.View.InputDeviceCompat.SourceTouchpad = 1048584 -> int
const AndroidX.Core.View.InputDeviceCompat.SourceTouchscreen = 4098 -> int
const AndroidX.Core.View.InputDeviceCompat.SourceTrackball = 65540 -> int
const AndroidX.Core.View.InputDeviceCompat.SourceUnknown = 0 -> int
const AndroidX.Core.View.InputMethod.EditorInfoCompat.ImeFlagForceAscii = -2147483648 -> int
const AndroidX.Core.View.InputMethod.EditorInfoCompat.ImeFlagNoPersonalizedLearning = 16777216 -> int
const AndroidX.Core.View.InputMethod.InputConnectionCompat.InputContentGrantReadUriPermission = 1 -> int
const AndroidX.Core.View.MenuItemCompat.ShowAsActionAlways = 2 -> int
const AndroidX.Core.View.MenuItemCompat.ShowAsActionCollapseActionView = 8 -> int
const AndroidX.Core.View.MenuItemCompat.ShowAsActionIfRoom = 1 -> int
const AndroidX.Core.View.MenuItemCompat.ShowAsActionNever = 0 -> int
const AndroidX.Core.View.MenuItemCompat.ShowAsActionWithText = 4 -> int
const AndroidX.Core.View.MotionEventCompat.ActionHoverEnter = 9 -> int
const AndroidX.Core.View.MotionEventCompat.ActionHoverExit = 10 -> int
const AndroidX.Core.View.MotionEventCompat.ActionHoverMove = 7 -> int
const AndroidX.Core.View.MotionEventCompat.ActionMask = 255 -> int
const AndroidX.Core.View.MotionEventCompat.ActionPointerDown = 5 -> int
const AndroidX.Core.View.MotionEventCompat.ActionPointerIndexMask = 65280 -> int
const AndroidX.Core.View.MotionEventCompat.ActionPointerIndexShift = 8 -> int
const AndroidX.Core.View.MotionEventCompat.ActionPointerUp = 6 -> int
const AndroidX.Core.View.MotionEventCompat.ActionScroll = 8 -> int
const AndroidX.Core.View.MotionEventCompat.AxisBrake = 23 -> int
const AndroidX.Core.View.MotionEventCompat.AxisDistance = 24 -> int
const AndroidX.Core.View.MotionEventCompat.AxisGas = 22 -> int
const AndroidX.Core.View.MotionEventCompat.AxisGeneric1 = 32 -> int
const AndroidX.Core.View.MotionEventCompat.AxisGeneric10 = 41 -> int
const AndroidX.Core.View.MotionEventCompat.AxisGeneric11 = 42 -> int
const AndroidX.Core.View.MotionEventCompat.AxisGeneric12 = 43 -> int
const AndroidX.Core.View.MotionEventCompat.AxisGeneric13 = 44 -> int
const AndroidX.Core.View.MotionEventCompat.AxisGeneric14 = 45 -> int
const AndroidX.Core.View.MotionEventCompat.AxisGeneric15 = 46 -> int
const AndroidX.Core.View.MotionEventCompat.AxisGeneric16 = 47 -> int
const AndroidX.Core.View.MotionEventCompat.AxisGeneric2 = 33 -> int
const AndroidX.Core.View.MotionEventCompat.AxisGeneric3 = 34 -> int
const AndroidX.Core.View.MotionEventCompat.AxisGeneric4 = 35 -> int
const AndroidX.Core.View.MotionEventCompat.AxisGeneric5 = 36 -> int
const AndroidX.Core.View.MotionEventCompat.AxisGeneric6 = 37 -> int
const AndroidX.Core.View.MotionEventCompat.AxisGeneric7 = 38 -> int
const AndroidX.Core.View.MotionEventCompat.AxisGeneric8 = 39 -> int
const AndroidX.Core.View.MotionEventCompat.AxisGeneric9 = 40 -> int
const AndroidX.Core.View.MotionEventCompat.AxisHatX = 15 -> int
const AndroidX.Core.View.MotionEventCompat.AxisHatY = 16 -> int
const AndroidX.Core.View.MotionEventCompat.AxisHscroll = 10 -> int
const AndroidX.Core.View.MotionEventCompat.AxisLtrigger = 17 -> int
const AndroidX.Core.View.MotionEventCompat.AxisOrientation = 8 -> int
const AndroidX.Core.View.MotionEventCompat.AxisPressure = 2 -> int
const AndroidX.Core.View.MotionEventCompat.AxisRelativeX = 27 -> int
const AndroidX.Core.View.MotionEventCompat.AxisRelativeY = 28 -> int
const AndroidX.Core.View.MotionEventCompat.AxisRtrigger = 18 -> int
const AndroidX.Core.View.MotionEventCompat.AxisRudder = 20 -> int
const AndroidX.Core.View.MotionEventCompat.AxisRx = 12 -> int
const AndroidX.Core.View.MotionEventCompat.AxisRy = 13 -> int
const AndroidX.Core.View.MotionEventCompat.AxisRz = 14 -> int
const AndroidX.Core.View.MotionEventCompat.AxisScroll = 26 -> int
const AndroidX.Core.View.MotionEventCompat.AxisSize = 3 -> int
const AndroidX.Core.View.MotionEventCompat.AxisThrottle = 19 -> int
const AndroidX.Core.View.MotionEventCompat.AxisTilt = 25 -> int
const AndroidX.Core.View.MotionEventCompat.AxisToolMajor = 6 -> int
const AndroidX.Core.View.MotionEventCompat.AxisToolMinor = 7 -> int
const AndroidX.Core.View.MotionEventCompat.AxisTouchMajor = 4 -> int
const AndroidX.Core.View.MotionEventCompat.AxisTouchMinor = 5 -> int
const AndroidX.Core.View.MotionEventCompat.AxisVscroll = 9 -> int
const AndroidX.Core.View.MotionEventCompat.AxisWheel = 21 -> int
const AndroidX.Core.View.MotionEventCompat.AxisX = 0 -> int
const AndroidX.Core.View.MotionEventCompat.AxisY = 1 -> int
const AndroidX.Core.View.MotionEventCompat.AxisZ = 11 -> int
const AndroidX.Core.View.MotionEventCompat.ButtonPrimary = 1 -> int
const AndroidX.Core.View.PointerIconCompat.TypeAlias = 1010 -> int
const AndroidX.Core.View.PointerIconCompat.TypeAllScroll = 1013 -> int
const AndroidX.Core.View.PointerIconCompat.TypeArrow = 1000 -> int
const AndroidX.Core.View.PointerIconCompat.TypeCell = 1006 -> int
const AndroidX.Core.View.PointerIconCompat.TypeContextMenu = 1001 -> int
const AndroidX.Core.View.PointerIconCompat.TypeCopy = 1011 -> int
const AndroidX.Core.View.PointerIconCompat.TypeCrosshair = 1007 -> int
const AndroidX.Core.View.PointerIconCompat.TypeDefault = 1000 -> int
const AndroidX.Core.View.PointerIconCompat.TypeGrab = 1020 -> int
const AndroidX.Core.View.PointerIconCompat.TypeGrabbing = 1021 -> int
const AndroidX.Core.View.PointerIconCompat.TypeHand = 1002 -> int
const AndroidX.Core.View.PointerIconCompat.TypeHelp = 1003 -> int
const AndroidX.Core.View.PointerIconCompat.TypeHorizontalDoubleArrow = 1014 -> int
const AndroidX.Core.View.PointerIconCompat.TypeNoDrop = 1012 -> int
const AndroidX.Core.View.PointerIconCompat.TypeNull = 0 -> int
const AndroidX.Core.View.PointerIconCompat.TypeText = 1008 -> int
const AndroidX.Core.View.PointerIconCompat.TypeTopLeftDiagonalDoubleArrow = 1017 -> int
const AndroidX.Core.View.PointerIconCompat.TypeTopRightDiagonalDoubleArrow = 1016 -> int
const AndroidX.Core.View.PointerIconCompat.TypeVerticalDoubleArrow = 1015 -> int
const AndroidX.Core.View.PointerIconCompat.TypeVerticalText = 1009 -> int
const AndroidX.Core.View.PointerIconCompat.TypeWait = 1004 -> int
const AndroidX.Core.View.PointerIconCompat.TypeZoomIn = 1018 -> int
const AndroidX.Core.View.PointerIconCompat.TypeZoomOut = 1019 -> int
const AndroidX.Core.View.RoundedCornerCompat.PositionBottomLeft = 3 -> int
const AndroidX.Core.View.RoundedCornerCompat.PositionBottomRight = 2 -> int
const AndroidX.Core.View.RoundedCornerCompat.PositionTopLeft = 0 -> int
const AndroidX.Core.View.RoundedCornerCompat.PositionTopRight = 1 -> int
const AndroidX.Core.View.ViewCompat.AccessibilityLiveRegionAssertive = 2 -> int
const AndroidX.Core.View.ViewCompat.AccessibilityLiveRegionNone = 0 -> int
const AndroidX.Core.View.ViewCompat.AccessibilityLiveRegionPolite = 1 -> int
const AndroidX.Core.View.ViewCompat.ImportantForAccessibilityAuto = 0 -> int
const AndroidX.Core.View.ViewCompat.ImportantForAccessibilityNo = 2 -> int
const AndroidX.Core.View.ViewCompat.ImportantForAccessibilityNoHideDescendants = 4 -> int
const AndroidX.Core.View.ViewCompat.ImportantForAccessibilityYes = 1 -> int
const AndroidX.Core.View.ViewCompat.ImportantForContentCaptureAuto = 0 -> int
const AndroidX.Core.View.ViewCompat.ImportantForContentCaptureNo = 2 -> int
const AndroidX.Core.View.ViewCompat.ImportantForContentCaptureNoExcludeDescendants = 8 -> int
const AndroidX.Core.View.ViewCompat.ImportantForContentCaptureYes = 1 -> int
const AndroidX.Core.View.ViewCompat.ImportantForContentCaptureYesExcludeDescendants = 4 -> int
const AndroidX.Core.View.ViewCompat.LayerTypeHardware = 2 -> int
const AndroidX.Core.View.ViewCompat.LayerTypeNone = 0 -> int
const AndroidX.Core.View.ViewCompat.LayerTypeSoftware = 1 -> int
const AndroidX.Core.View.ViewCompat.LayoutDirectionInherit = 2 -> int
const AndroidX.Core.View.ViewCompat.LayoutDirectionLocale = 3 -> int
const AndroidX.Core.View.ViewCompat.LayoutDirectionLtr = 0 -> int
const AndroidX.Core.View.ViewCompat.LayoutDirectionRtl = 1 -> int
const AndroidX.Core.View.ViewCompat.MeasuredHeightStateShift = 16 -> int
const AndroidX.Core.View.ViewCompat.MeasuredSizeMask = 16777215 -> int
const AndroidX.Core.View.ViewCompat.MeasuredStateMask = -16777216 -> int
const AndroidX.Core.View.ViewCompat.MeasuredStateTooSmall = 16777216 -> int
const AndroidX.Core.View.ViewCompat.OverScrollAlways = 0 -> int
const AndroidX.Core.View.ViewCompat.OverScrollIfContentScrolls = 1 -> int
const AndroidX.Core.View.ViewCompat.OverScrollNever = 2 -> int
const AndroidX.Core.View.ViewCompat.ScrollAxisHorizontal = 1 -> int
const AndroidX.Core.View.ViewCompat.ScrollAxisNone = 0 -> int
const AndroidX.Core.View.ViewCompat.ScrollAxisVertical = 2 -> int
const AndroidX.Core.View.ViewCompat.ScrollIndicatorBottom = 2 -> int
const AndroidX.Core.View.ViewCompat.ScrollIndicatorEnd = 32 -> int
const AndroidX.Core.View.ViewCompat.ScrollIndicatorLeft = 4 -> int
const AndroidX.Core.View.ViewCompat.ScrollIndicatorRight = 8 -> int
const AndroidX.Core.View.ViewCompat.ScrollIndicatorStart = 16 -> int
const AndroidX.Core.View.ViewCompat.ScrollIndicatorTop = 1 -> int
const AndroidX.Core.View.ViewCompat.TypeNonTouch = 1 -> int
const AndroidX.Core.View.ViewCompat.TypeTouch = 0 -> int
const AndroidX.Core.View.ViewGroupCompat.LayoutModeClipBounds = 0 -> int
const AndroidX.Core.View.ViewGroupCompat.LayoutModeOpticalBounds = 1 -> int
const AndroidX.Core.View.WindowCompat.FeatureActionBar = 8 -> int
const AndroidX.Core.View.WindowCompat.FeatureActionBarOverlay = 9 -> int
const AndroidX.Core.View.WindowCompat.FeatureActionModeOverlay = 10 -> int
const AndroidX.Core.View.WindowInsetsAnimationCompat.Callback.DispatchModeContinueOnSubtree = 1 -> int
const AndroidX.Core.View.WindowInsetsAnimationCompat.Callback.DispatchModeStop = 0 -> int
const AndroidX.Core.View.WindowInsetsCompat.Side.Bottom = 8 -> int
const AndroidX.Core.View.WindowInsetsCompat.Side.Left = 1 -> int
const AndroidX.Core.View.WindowInsetsCompat.Side.Right = 4 -> int
const AndroidX.Core.View.WindowInsetsCompat.Side.Top = 2 -> int
const AndroidX.Core.View.WindowInsetsControllerCompat.BehaviorDefault = 1 -> int
const AndroidX.Core.View.WindowInsetsControllerCompat.BehaviorShowBarsBySwipe = 1 -> int
const AndroidX.Core.View.WindowInsetsControllerCompat.BehaviorShowBarsByTouch = 0 -> int
const AndroidX.Core.View.WindowInsetsControllerCompat.BehaviorShowTransientBarsBySwipe = 2 -> int
const AndroidX.Core.Widget.AutoScrollHelper.EdgeTypeInside = 0 -> int
const AndroidX.Core.Widget.AutoScrollHelper.EdgeTypeInsideExtend = 1 -> int
const AndroidX.Core.Widget.AutoScrollHelper.EdgeTypeOutside = 2 -> int
const AndroidX.Core.Widget.AutoScrollHelper.NoMax = 3.4028235E+38 -> float
const AndroidX.Core.Widget.AutoScrollHelper.NoMin = 0 -> float
const AndroidX.Core.Widget.AutoScrollHelper.RelativeUnspecified = 0 -> float
const AndroidX.Core.Widget.TextViewCompat.AutoSizeTextTypeNone = 0 -> int
const AndroidX.Core.Widget.TextViewCompat.AutoSizeTextTypeUniform = 1 -> int
override Android.Support.V4.App.NotificationSideChannelDefault.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.App.NotificationSideChannelDefault.ThresholdClass.get -> nint
override Android.Support.V4.App.NotificationSideChannelDefault.ThresholdType.get -> System.Type!
override Android.Support.V4.App.NotificationSideChannelStub.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.App.NotificationSideChannelStub.ThresholdClass.get -> nint
override Android.Support.V4.App.NotificationSideChannelStub.ThresholdType.get -> System.Type!
override Android.Support.V4.App.NotificationSideChannel_Parcel.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.App.NotificationSideChannel_Parcel.ThresholdClass.get -> nint
override Android.Support.V4.App.NotificationSideChannel_Parcel.ThresholdType.get -> System.Type!
override Android.Support.V4.App.RemoteActionCompatParcelizer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Graphics.Drawable.IconCompatParcelizer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.OS.ResultReceiver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.OS.ResultReceiver.ThresholdClass.get -> nint
override Android.Support.V4.OS.ResultReceiver.ThresholdType.get -> System.Type!
override Android.Support.V4.OS.ResultReceiver2Default.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.OS.ResultReceiver2Default.ThresholdClass.get -> nint
override Android.Support.V4.OS.ResultReceiver2Default.ThresholdType.get -> System.Type!
override Android.Support.V4.OS.ResultReceiver2Stub.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.OS.ResultReceiver2Stub.ThresholdClass.get -> nint
override Android.Support.V4.OS.ResultReceiver2Stub.ThresholdType.get -> System.Type!
override Android.Support.V4.OS.ResultReceiver2_Parcel.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.OS.ResultReceiver2_Parcel.ThresholdClass.get -> nint
override Android.Support.V4.OS.ResultReceiver2_Parcel.ThresholdType.get -> System.Type!
override Android.Support.V4.OS.ResultReceiverDefault.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.OS.ResultReceiverDefault.ThresholdClass.get -> nint
override Android.Support.V4.OS.ResultReceiverDefault.ThresholdType.get -> System.Type!
override Android.Support.V4.OS.ResultReceiverStub.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.OS.ResultReceiverStub.ThresholdClass.get -> nint
override Android.Support.V4.OS.ResultReceiverStub.ThresholdType.get -> System.Type!
override Android.Support.V4.OS.ResultReceiver_Parcel.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.OS.ResultReceiver_Parcel.ThresholdClass.get -> nint
override Android.Support.V4.OS.ResultReceiver_Parcel.ThresholdType.get -> System.Type!
override AndroidX.Core.AccessibilityService.AccessibilityServiceInfoCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.ActivityCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.ActivityCompat.ThresholdClass.get -> nint
override AndroidX.Core.App.ActivityCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.App.ActivityManagerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.ActivityOptionsCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.ActivityOptionsCompat.ThresholdClass.get -> nint
override AndroidX.Core.App.ActivityOptionsCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.App.AlarmManagerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.AppComponentFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.AppComponentFactory.ThresholdClass.get -> nint
override AndroidX.Core.App.AppComponentFactory.ThresholdType.get -> System.Type!
override AndroidX.Core.App.AppLaunchChecker.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.AppLaunchChecker.ThresholdClass.get -> nint
override AndroidX.Core.App.AppLaunchChecker.ThresholdType.get -> System.Type!
override AndroidX.Core.App.AppLocalesStorageHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.AppLocalesStorageHelper.ThresholdClass.get -> nint
override AndroidX.Core.App.AppLocalesStorageHelper.ThresholdType.get -> System.Type!
override AndroidX.Core.App.AppOpsManagerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.BundleCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.ComponentActivity.ExtraData.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.ComponentActivity.ExtraData.ThresholdClass.get -> nint
override AndroidX.Core.App.ComponentActivity.ExtraData.ThresholdType.get -> System.Type!
override AndroidX.Core.App.ComponentActivity.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.ComponentActivity.ThresholdClass.get -> nint
override AndroidX.Core.App.ComponentActivity.ThresholdType.get -> System.Type!
override AndroidX.Core.App.CoreComponentFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.CoreComponentFactory.ThresholdClass.get -> nint
override AndroidX.Core.App.CoreComponentFactory.ThresholdType.get -> System.Type!
override AndroidX.Core.App.DialogCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.DialogCompat.ThresholdClass.get -> nint
override AndroidX.Core.App.DialogCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.App.FrameMetricsAggregator.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.FrameMetricsAggregator.ThresholdClass.get -> nint
override AndroidX.Core.App.FrameMetricsAggregator.ThresholdType.get -> System.Type!
override AndroidX.Core.App.GrammaticalInflectionManagerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.JobIntentService.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.JobIntentService.OnBind(Android.Content.Intent? intent) -> Android.OS.IBinder?
override AndroidX.Core.App.JobIntentService.ThresholdClass.get -> nint
override AndroidX.Core.App.JobIntentService.ThresholdType.get -> System.Type!
override AndroidX.Core.App.LocaleManagerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.MultiWindowModeChangedInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NavUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationChannelCompat.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationChannelCompat.Builder.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationChannelCompat.Builder.ThresholdType.get -> System.Type!
override AndroidX.Core.App.NotificationChannelCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationChannelCompat.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationChannelCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.App.NotificationChannelGroupCompat.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationChannelGroupCompat.Builder.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationChannelGroupCompat.Builder.ThresholdType.get -> System.Type!
override AndroidX.Core.App.NotificationChannelGroupCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationChannelGroupCompat.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationChannelGroupCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.App.NotificationCompat.Action.Builder.Api31Impl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.Action.Builder.Api31Impl.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationCompat.Action.Builder.Api31Impl.ThresholdType.get -> System.Type!
override AndroidX.Core.App.NotificationCompat.Action.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.Action.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.Action.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationCompat.Action.ThresholdType.get -> System.Type!
override AndroidX.Core.App.NotificationCompat.Action.WearableExtender.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.BigPictureStyle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.BigPictureStyle.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationCompat.BigPictureStyle.ThresholdType.get -> System.Type!
override AndroidX.Core.App.NotificationCompat.BigTextStyle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.BigTextStyle.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationCompat.BigTextStyle.ThresholdType.get -> System.Type!
override AndroidX.Core.App.NotificationCompat.BubbleMetadata.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.BubbleMetadata.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.Builder.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationCompat.Builder.ThresholdType.get -> System.Type!
override AndroidX.Core.App.NotificationCompat.CallStyle.Api31Impl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.CallStyle.Api31Impl.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationCompat.CallStyle.Api31Impl.ThresholdType.get -> System.Type!
override AndroidX.Core.App.NotificationCompat.CallStyle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.CallStyle.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationCompat.CallStyle.ThresholdType.get -> System.Type!
override AndroidX.Core.App.NotificationCompat.CarExtender.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.Builder.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.Builder.ThresholdType.get -> System.Type!
override AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.ThresholdType.get -> System.Type!
override AndroidX.Core.App.NotificationCompat.DecoratedCustomViewStyle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.DecoratedCustomViewStyle.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationCompat.DecoratedCustomViewStyle.ThresholdType.get -> System.Type!
override AndroidX.Core.App.NotificationCompat.InboxStyle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.InboxStyle.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationCompat.InboxStyle.ThresholdType.get -> System.Type!
override AndroidX.Core.App.NotificationCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.MessagingStyle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.MessagingStyle.Message.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.MessagingStyle.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationCompat.MessagingStyle.ThresholdType.get -> System.Type!
override AndroidX.Core.App.NotificationCompat.ProgressStyle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.ProgressStyle.Point.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.ProgressStyle.Segment.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.ProgressStyle.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationCompat.ProgressStyle.ThresholdType.get -> System.Type!
override AndroidX.Core.App.NotificationCompat.Style.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.Style.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationCompat.Style.ThresholdType.get -> System.Type!
override AndroidX.Core.App.NotificationCompat.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.App.NotificationCompat.TvExtender.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.WearableExtender.Api31Impl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompat.WearableExtender.Api31Impl.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationCompat.WearableExtender.Api31Impl.ThresholdType.get -> System.Type!
override AndroidX.Core.App.NotificationCompat.WearableExtender.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompatExtras.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompatSideChannelService.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationCompatSideChannelService.OnBind(Android.Content.Intent? intent) -> Android.OS.IBinder?
override AndroidX.Core.App.NotificationCompatSideChannelService.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationCompatSideChannelService.ThresholdType.get -> System.Type!
override AndroidX.Core.App.NotificationManagerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationManagerCompat.NotificationWithIdAndTag.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.NotificationManagerCompat.NotificationWithIdAndTag.ThresholdClass.get -> nint
override AndroidX.Core.App.NotificationManagerCompat.NotificationWithIdAndTag.ThresholdType.get -> System.Type!
override AndroidX.Core.App.PendingIntentCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.Person.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.Person.Builder.ThresholdClass.get -> nint
override AndroidX.Core.App.Person.Builder.ThresholdType.get -> System.Type!
override AndroidX.Core.App.Person.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.Person.ThresholdClass.get -> nint
override AndroidX.Core.App.Person.ThresholdType.get -> System.Type!
override AndroidX.Core.App.PictureInPictureModeChangedInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.RemoteActionCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.RemoteActionCompatParcelizer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.RemoteActionCompatParcelizer.ThresholdClass.get -> nint
override AndroidX.Core.App.RemoteActionCompatParcelizer.ThresholdType.get -> System.Type!
override AndroidX.Core.App.RemoteInput.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.RemoteInput.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.ServiceCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.ShareCompat.IntentBuilder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.ShareCompat.IntentBuilder.ThresholdClass.get -> nint
override AndroidX.Core.App.ShareCompat.IntentBuilder.ThresholdType.get -> System.Type!
override AndroidX.Core.App.ShareCompat.IntentReader.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.ShareCompat.IntentReader.ThresholdClass.get -> nint
override AndroidX.Core.App.ShareCompat.IntentReader.ThresholdType.get -> System.Type!
override AndroidX.Core.App.ShareCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.SharedElementCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.SharedElementCallback.ThresholdClass.get -> nint
override AndroidX.Core.App.SharedElementCallback.ThresholdType.get -> System.Type!
override AndroidX.Core.App.TaskStackBuilder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackDefault.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackDefault.ThresholdClass.get -> nint
override AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackDefault.ThresholdType.get -> System.Type!
override AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackStub.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackStub.ThresholdClass.get -> nint
override AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackStub.ThresholdType.get -> System.Type!
override AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceDefault.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceDefault.ThresholdClass.get -> nint
override AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceDefault.ThresholdType.get -> System.Type!
override AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceStub.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceStub.ThresholdClass.get -> nint
override AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceStub.ThresholdType.get -> System.Type!
override AndroidX.Core.Content.ContentProviderCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.ContentResolverCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.ContextCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.ContextCompat.ThresholdClass.get -> nint
override AndroidX.Core.Content.ContextCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.Content.FileProvider.Delete(Android.Net.Uri? uri, string? selection, string![]? selectionArgs) -> int
override AndroidX.Core.Content.FileProvider.GetType(Android.Net.Uri? uri) -> string?
override AndroidX.Core.Content.FileProvider.Insert(Android.Net.Uri? uri, Android.Content.ContentValues? values) -> Android.Net.Uri?
override AndroidX.Core.Content.FileProvider.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.FileProvider.OnCreate() -> bool
override AndroidX.Core.Content.FileProvider.Query(Android.Net.Uri? uri, string![]? projection, string? selection, string![]? selectionArgs, string? sortOrder) -> Android.Database.ICursor?
override AndroidX.Core.Content.FileProvider.ThresholdClass.get -> nint
override AndroidX.Core.Content.FileProvider.ThresholdType.get -> System.Type!
override AndroidX.Core.Content.FileProvider.Update(Android.Net.Uri? uri, Android.Content.ContentValues? values, string? selection, string![]? selectionArgs) -> int
override AndroidX.Core.Content.IntentCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.IntentSanitizer.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.IntentSanitizer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.IntentSanitizer.ThresholdClass.get -> nint
override AndroidX.Core.Content.IntentSanitizer.ThresholdType.get -> System.Type!
override AndroidX.Core.Content.LocusIdCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.MimeTypeFilter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.PM.ActivityInfoCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.PM.PackageInfoCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.PM.PermissionInfoCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.PM.ShortcutInfoChangeListener.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.PM.ShortcutInfoChangeListener.ThresholdClass.get -> nint
override AndroidX.Core.Content.PM.ShortcutInfoChangeListener.ThresholdType.get -> System.Type!
override AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.ThresholdClass.get -> nint
override AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.ThresholdType.get -> System.Type!
override AndroidX.Core.Content.PM.ShortcutInfoCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.PM.ShortcutInfoCompat.ThresholdClass.get -> nint
override AndroidX.Core.Content.PM.ShortcutInfoCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.Content.PM.ShortcutInfoCompatSaver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.PM.ShortcutInfoCompatSaver.NoopImpl.AddShortcuts(System.Collections.Generic.IList<AndroidX.Core.Content.PM.ShortcutInfoCompat!>? shortcuts) -> Java.Lang.Object?
override AndroidX.Core.Content.PM.ShortcutInfoCompatSaver.NoopImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.PM.ShortcutInfoCompatSaver.NoopImpl.RemoveAllShortcuts() -> Java.Lang.Object?
override AndroidX.Core.Content.PM.ShortcutInfoCompatSaver.NoopImpl.RemoveShortcuts(System.Collections.Generic.IList<string!>? shortcutIds) -> Java.Lang.Object?
override AndroidX.Core.Content.PM.ShortcutInfoCompatSaver.NoopImpl.ThresholdClass.get -> nint
override AndroidX.Core.Content.PM.ShortcutInfoCompatSaver.NoopImpl.ThresholdType.get -> System.Type!
override AndroidX.Core.Content.PM.ShortcutInfoCompatSaver.ThresholdClass.get -> nint
override AndroidX.Core.Content.PM.ShortcutInfoCompatSaver.ThresholdType.get -> System.Type!
override AndroidX.Core.Content.PM.ShortcutManagerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.PM.ShortcutManagerCompat.ThresholdClass.get -> nint
override AndroidX.Core.Content.PM.ShortcutManagerCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.Content.PM.ShortcutXmlParser.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.PM.ShortcutXmlParser.ThresholdClass.get -> nint
override AndroidX.Core.Content.PM.ShortcutXmlParser.ThresholdType.get -> System.Type!
override AndroidX.Core.Content.PackageManagerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.PermissionChecker.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.Resources.CamColor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.Resources.CamColor.ThresholdClass.get -> nint
override AndroidX.Core.Content.Resources.CamColor.ThresholdType.get -> System.Type!
override AndroidX.Core.Content.Resources.ColorStateListInflaterCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.Resources.ComplexColorCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.Resources.ConfigurationHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.Resources.FontResourcesParserCompat.FontFamilyFilesResourceEntry.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.Resources.FontResourcesParserCompat.FontFileResourceEntry.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.Resources.FontResourcesParserCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.Resources.FontResourcesParserCompat.ProviderResourceEntry.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.Resources.FontResourcesParserCompat.ThresholdClass.get -> nint
override AndroidX.Core.Content.Resources.FontResourcesParserCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.Content.Resources.ResourcesCompat.FontCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.Resources.ResourcesCompat.FontCallback.ThresholdClass.get -> nint
override AndroidX.Core.Content.Resources.ResourcesCompat.FontCallback.ThresholdType.get -> System.Type!
override AndroidX.Core.Content.Resources.ResourcesCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.Resources.ResourcesCompat.ThemeCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.Resources.TypedArrayUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.Resources.TypedArrayUtils.ThresholdClass.get -> nint
override AndroidX.Core.Content.Resources.TypedArrayUtils.ThresholdType.get -> System.Type!
override AndroidX.Core.Content.SharedPreferencesCompat.EditorCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.SharedPreferencesCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.UnusedAppRestrictionsBackportCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.UnusedAppRestrictionsBackportCallback.ThresholdClass.get -> nint
override AndroidX.Core.Content.UnusedAppRestrictionsBackportCallback.ThresholdType.get -> System.Type!
override AndroidX.Core.Content.UnusedAppRestrictionsBackportService.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.UnusedAppRestrictionsBackportService.OnBind(Android.Content.Intent? intent) -> Android.OS.IBinder?
override AndroidX.Core.Content.UnusedAppRestrictionsBackportService.ThresholdClass.get -> nint
override AndroidX.Core.Content.UnusedAppRestrictionsBackportService.ThresholdType.get -> System.Type!
override AndroidX.Core.Content.UnusedAppRestrictionsConstants.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.UriMatcherCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Content.UriMatcherCompat.ThresholdClass.get -> nint
override AndroidX.Core.Content.UriMatcherCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.Database.CursorWindowCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Database.DatabaseUtilsCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Database.SqlLite.SQLiteCursorCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Flagging.AconfigPackageCompatCompanion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Flagging.Flags.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Flagging.Flags.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Graphics.BitmapCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Graphics.BlendModeColorFilterCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Graphics.BlendModeColorFilterCompat.ThresholdClass.get -> nint
override AndroidX.Core.Graphics.BlendModeColorFilterCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.Graphics.BlendModeCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Graphics.ColorUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Graphics.Drawable.DrawableCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Graphics.Drawable.IconCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Graphics.Drawable.IconCompat.ThresholdClass.get -> nint
override AndroidX.Core.Graphics.Drawable.IconCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.Graphics.Drawable.IconCompatParcelizer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Graphics.Drawable.IconCompatParcelizer.ThresholdClass.get -> nint
override AndroidX.Core.Graphics.Drawable.IconCompatParcelizer.ThresholdType.get -> System.Type!
override AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.Draw(Android.Graphics.Canvas? canvas) -> void
override AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.Opacity.get -> int
override AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.SetAlpha(int alpha) -> void
override AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.SetColorFilter(Android.Graphics.ColorFilter? cf) -> void
override AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.ThresholdClass.get -> nint
override AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.ThresholdType.get -> System.Type!
override AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawableFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Graphics.Insets.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Graphics.PaintCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Graphics.PathParser.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Graphics.PathParser.PathDataNode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Graphics.PathParser.PathDataNode.ThresholdClass.get -> nint
override AndroidX.Core.Graphics.PathParser.PathDataNode.ThresholdType.get -> System.Type!
override AndroidX.Core.Graphics.PathSegment.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Graphics.PathUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Graphics.TypefaceCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Graphics.TypefaceCompat.ResourcesCallbackAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Graphics.TypefaceCompat.ResourcesCallbackAdapter.ThresholdClass.get -> nint
override AndroidX.Core.Graphics.TypefaceCompat.ResourcesCallbackAdapter.ThresholdType.get -> System.Type!
override AndroidX.Core.Graphics.TypefaceCompat.ThresholdClass.get -> nint
override AndroidX.Core.Graphics.TypefaceCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.Graphics.TypefaceCompatUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Graphics.TypefaceCompatUtil.ThresholdClass.get -> nint
override AndroidX.Core.Graphics.TypefaceCompatUtil.ThresholdType.get -> System.Type!
override AndroidX.Core.Hardware.Display.DisplayManagerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.AuthenticationCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.AuthenticationCallback.ThresholdClass.get -> nint
override AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.AuthenticationCallback.ThresholdType.get -> System.Type!
override AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.AuthenticationResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.CryptoObject.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.CryptoObject.ThresholdClass.get -> nint
override AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.CryptoObject.ThresholdType.get -> System.Type!
override AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.ThresholdClass.get -> nint
override AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.Location.GnssStatusCompat.Callback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Location.GnssStatusCompat.Callback.ThresholdClass.get -> nint
override AndroidX.Core.Location.GnssStatusCompat.Callback.ThresholdType.get -> System.Type!
override AndroidX.Core.Location.GnssStatusCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Location.GnssStatusCompat.ThresholdClass.get -> nint
override AndroidX.Core.Location.GnssStatusCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.Location.LocationCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Location.LocationManagerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Location.LocationRequestCompat.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Location.LocationRequestCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Math.MathUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Math.MathUtils.ThresholdClass.get -> nint
override AndroidX.Core.Math.MathUtils.ThresholdType.get -> System.Type!
override AndroidX.Core.Net.ConnectivityManagerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Net.MailTo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Net.ParseException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Net.ParseException.ThresholdClass.get -> nint
override AndroidX.Core.Net.ParseException.ThresholdType.get -> System.Type!
override AndroidX.Core.Net.TrafficStatsCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Net.UriCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.BufferFillPolicy.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.BufferFillPolicy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.BufferFillPolicy.ThresholdClass.get -> nint
override AndroidX.Core.OS.BufferFillPolicy.ThresholdType.get -> System.Type!
override AndroidX.Core.OS.BuildCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.BundleCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.CancellationSignal.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.ConfigurationCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.EnvironmentCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.ExecutorCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.HandlerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.HeapProfileRequestBuilder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.JavaHeapDumpRequestBuilder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.LocaleListCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.MessageCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.OperationCanceledException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.OperationCanceledException.ThresholdClass.get -> nint
override AndroidX.Core.OS.OperationCanceledException.ThresholdType.get -> System.Type!
override AndroidX.Core.OS.ParcelCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.ParcelableCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.ProcessCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.Profiling.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.ProfilingRequest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.ProfilingRequestBuilder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.ProfilingRequestBuilder.ThresholdClass.get -> nint
override AndroidX.Core.OS.ProfilingRequestBuilder.ThresholdType.get -> System.Type!
override AndroidX.Core.OS.StackSamplingRequestBuilder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.SystemTraceRequestBuilder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.TraceCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.UserHandleCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.UserHandleCompat.ThresholdClass.get -> nint
override AndroidX.Core.OS.UserHandleCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.OS.UserManagerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.OS.UserManagerCompat.ThresholdClass.get -> nint
override AndroidX.Core.OS.UserManagerCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.Provider.DocumentsContractCompat.DocumentCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Provider.DocumentsContractCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Provider.FontRequest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Provider.FontsContractCompat.FontFamilyResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Provider.FontsContractCompat.FontFamilyResult.ThresholdClass.get -> nint
override AndroidX.Core.Provider.FontsContractCompat.FontFamilyResult.ThresholdType.get -> System.Type!
override AndroidX.Core.Provider.FontsContractCompat.FontInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Provider.FontsContractCompat.FontInfo.ThresholdClass.get -> nint
override AndroidX.Core.Provider.FontsContractCompat.FontInfo.ThresholdType.get -> System.Type!
override AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback.ThresholdClass.get -> nint
override AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback.ThresholdType.get -> System.Type!
override AndroidX.Core.Provider.FontsContractCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Provider.FontsContractCompat.ThresholdClass.get -> nint
override AndroidX.Core.Provider.FontsContractCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.Provider.SelfDestructiveThread.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Provider.SelfDestructiveThread.ThresholdClass.get -> nint
override AndroidX.Core.Provider.SelfDestructiveThread.ThresholdType.get -> System.Type!
override AndroidX.Core.Service.QuickSettings.PendingIntentActivityWrapper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Service.QuickSettings.PendingIntentActivityWrapper.ThresholdClass.get -> nint
override AndroidX.Core.Service.QuickSettings.PendingIntentActivityWrapper.ThresholdType.get -> System.Type!
override AndroidX.Core.Service.QuickSettings.TileServiceCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Service.QuickSettings.TileServiceCompat.ThresholdClass.get -> nint
override AndroidX.Core.Service.QuickSettings.TileServiceCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.Telephony.Mbms.MbmsHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Telephony.SubscriptionManagerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Telephony.SubscriptionManagerCompat.ThresholdClass.get -> nint
override AndroidX.Core.Telephony.SubscriptionManagerCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.Telephony.TelephonyManagerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Telephony.TelephonyManagerCompat.ThresholdClass.get -> nint
override AndroidX.Core.Telephony.TelephonyManagerCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.Text.BidiFormatter.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Text.BidiFormatter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Text.HtmlCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Text.ICUCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Text.Method.LinkMovementMethodCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Text.Method.LinkMovementMethodCompat.ThresholdClass.get -> nint
override AndroidX.Core.Text.Method.LinkMovementMethodCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.Text.PrecomputedTextCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Text.PrecomputedTextCompat.Params.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Text.PrecomputedTextCompat.Params.Builder.ThresholdClass.get -> nint
override AndroidX.Core.Text.PrecomputedTextCompat.Params.Builder.ThresholdType.get -> System.Type!
override AndroidX.Core.Text.PrecomputedTextCompat.Params.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Text.PrecomputedTextCompat.ThresholdClass.get -> nint
override AndroidX.Core.Text.PrecomputedTextCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.Text.TextDirectionHeuristicsCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Text.TextUtilsCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Text.Util.LinkifyCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Text.Util.LocalePreferences.CalendarType.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Text.Util.LocalePreferences.CalendarType.ThresholdClass.get -> nint
override AndroidX.Core.Text.Util.LocalePreferences.CalendarType.ThresholdType.get -> System.Type!
override AndroidX.Core.Text.Util.LocalePreferences.FirstDayOfWeek.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Text.Util.LocalePreferences.FirstDayOfWeek.ThresholdClass.get -> nint
override AndroidX.Core.Text.Util.LocalePreferences.FirstDayOfWeek.ThresholdType.get -> System.Type!
override AndroidX.Core.Text.Util.LocalePreferences.HourCycle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Text.Util.LocalePreferences.HourCycle.ThresholdClass.get -> nint
override AndroidX.Core.Text.Util.LocalePreferences.HourCycle.ThresholdType.get -> System.Type!
override AndroidX.Core.Text.Util.LocalePreferences.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Text.Util.LocalePreferences.TemperatureUnit.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Text.Util.LocalePreferences.TemperatureUnit.ThresholdClass.get -> nint
override AndroidX.Core.Text.Util.LocalePreferences.TemperatureUnit.ThresholdType.get -> System.Type!
override AndroidX.Core.Util.AtomicFile.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Util.AtomicFile.ThresholdClass.get -> nint
override AndroidX.Core.Util.AtomicFile.ThresholdType.get -> System.Type!
override AndroidX.Core.Util.DebugUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Util.DebugUtils.ThresholdClass.get -> nint
override AndroidX.Core.Util.DebugUtils.ThresholdType.get -> System.Type!
override AndroidX.Core.Util.LogWriter.Close() -> void
override AndroidX.Core.Util.LogWriter.Flush() -> void
override AndroidX.Core.Util.LogWriter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Util.LogWriter.ThresholdClass.get -> nint
override AndroidX.Core.Util.LogWriter.ThresholdType.get -> System.Type!
override AndroidX.Core.Util.LogWriter.Write(char[]? buf, int offset, int count) -> void
override AndroidX.Core.Util.ObjectsCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Util.ObjectsCompat.ThresholdClass.get -> nint
override AndroidX.Core.Util.ObjectsCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.Util.Pair.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Util.Pair.ThresholdClass.get -> nint
override AndroidX.Core.Util.Pair.ThresholdType.get -> System.Type!
override AndroidX.Core.Util.PatternsCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Util.Pools.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Util.Pools.SimplePool.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Util.Pools.SimplePool.ThresholdClass.get -> nint
override AndroidX.Core.Util.Pools.SimplePool.ThresholdType.get -> System.Type!
override AndroidX.Core.Util.Pools.SynchronizedPool.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Util.Pools.SynchronizedPool.ThresholdClass.get -> nint
override AndroidX.Core.Util.Pools.SynchronizedPool.ThresholdType.get -> System.Type!
override AndroidX.Core.Util.Preconditions.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Util.SizeFCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Util.TimeUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Util.TypedValueCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Util.TypedValueCompat.ThresholdClass.get -> nint
override AndroidX.Core.Util.TypedValueCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.View.Accessibility.AccessibilityClickableSpanCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityClickableSpanCompat.OnClick(Android.Views.View? unused) -> void
override AndroidX.Core.View.Accessibility.AccessibilityEventCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.AccessibilityStateChangeListenerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.AccessibilityStateChangeListenerCompat.ThresholdClass.get -> nint
override AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.AccessibilityStateChangeListenerCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ThresholdClass.get -> nint
override AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.ThresholdClass.get -> nint
override AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.ThresholdClass.get -> nint
override AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat.ThresholdClass.get -> nint
override AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ThresholdClass.get -> nint
override AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TouchDelegateInfoCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityNodeProviderCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityNodeProviderCompat.ThresholdClass.get -> nint
override AndroidX.Core.View.Accessibility.AccessibilityNodeProviderCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.ThresholdClass.get -> nint
override AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.View.Accessibility.AccessibilityViewCommandCommandArguments.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityViewCommandCommandArguments.ThresholdClass.get -> nint
override AndroidX.Core.View.Accessibility.AccessibilityViewCommandCommandArguments.ThresholdType.get -> System.Type!
override AndroidX.Core.View.Accessibility.AccessibilityViewCommandMoveAtGranularityArguments.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityViewCommandMoveHtmlArguments.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityViewCommandMoveWindowArguments.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityViewCommandScrollToPositionArguments.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityViewCommandSetProgressArguments.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityViewCommandSetSelectionArguments.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityViewCommandSetTextArguments.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.ThresholdClass.get -> nint
override AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.View.AccessibilityDelegateCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.AccessibilityDelegateCompat.ThresholdClass.get -> nint
override AndroidX.Core.View.AccessibilityDelegateCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.View.ActionProvider.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.ActionProvider.ThresholdClass.get -> nint
override AndroidX.Core.View.ActionProvider.ThresholdType.get -> System.Type!
override AndroidX.Core.View.Animation.PathInterpolatorCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.AutoFill.AutofillIdCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.AutoFill.AutofillIdCompat.ThresholdClass.get -> nint
override AndroidX.Core.View.AutoFill.AutofillIdCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.View.ContentCapture.ContentCaptureSessionCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.ContentCapture.ContentCaptureSessionCompat.ThresholdClass.get -> nint
override AndroidX.Core.View.ContentCapture.ContentCaptureSessionCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.View.ContentInfoCompat.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.ContentInfoCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.DifferentialMotionFlingController.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.DifferentialMotionFlingController.ThresholdClass.get -> nint
override AndroidX.Core.View.DifferentialMotionFlingController.ThresholdType.get -> System.Type!
override AndroidX.Core.View.DisplayCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.DisplayCompat.ModeCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.DisplayCutoutCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.DragAndDropPermissionsCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.DragStartHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.DragStartHelper.ThresholdClass.get -> nint
override AndroidX.Core.View.DragStartHelper.ThresholdType.get -> System.Type!
override AndroidX.Core.View.GestureDetectorCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.GravityCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.HapticFeedbackConstantsCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.InputDeviceCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.InputMethod.EditorInfoCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.InputMethod.InputConnectionCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.InputMethod.InputContentInfoCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Insets.ColorProtection.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Insets.ColorProtection.ThresholdClass.get -> nint
override AndroidX.Core.View.Insets.ColorProtection.ThresholdType.get -> System.Type!
override AndroidX.Core.View.Insets.GradientProtection.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Insets.GradientProtection.ThresholdClass.get -> nint
override AndroidX.Core.View.Insets.GradientProtection.ThresholdType.get -> System.Type!
override AndroidX.Core.View.Insets.Protection.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Insets.Protection.ThresholdClass.get -> nint
override AndroidX.Core.View.Insets.Protection.ThresholdType.get -> System.Type!
override AndroidX.Core.View.Insets.ProtectionLayout.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.Insets.ProtectionLayout.ThresholdClass.get -> nint
override AndroidX.Core.View.Insets.ProtectionLayout.ThresholdType.get -> System.Type!
override AndroidX.Core.View.KeyEventDispatcher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.KeyEventDispatcher.ThresholdClass.get -> nint
override AndroidX.Core.View.KeyEventDispatcher.ThresholdType.get -> System.Type!
override AndroidX.Core.View.LayoutInflaterCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.MarginLayoutParamsCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.MenuCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.MenuHostHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.MenuHostHelper.ThresholdClass.get -> nint
override AndroidX.Core.View.MenuHostHelper.ThresholdType.get -> System.Type!
override AndroidX.Core.View.MenuItemCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.MotionEventCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.NestedScrollingChildHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.NestedScrollingChildHelper.ThresholdClass.get -> nint
override AndroidX.Core.View.NestedScrollingChildHelper.ThresholdType.get -> System.Type!
override AndroidX.Core.View.NestedScrollingParentHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.NestedScrollingParentHelper.ThresholdClass.get -> nint
override AndroidX.Core.View.NestedScrollingParentHelper.ThresholdType.get -> System.Type!
override AndroidX.Core.View.OneShotPreDrawListener.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.PointerIconCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.RoundedCornerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.ScaleGestureDetectorCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.ScrollFeedbackProviderCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.ScrollFeedbackProviderCompat.ThresholdClass.get -> nint
override AndroidX.Core.View.ScrollFeedbackProviderCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.View.SoftwareKeyboardControllerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.VelocityTrackerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.ViewCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.ViewCompat.ThresholdClass.get -> nint
override AndroidX.Core.View.ViewCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.View.ViewConfigurationCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.ViewGroupCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.ViewParentCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.ViewPropertyAnimatorCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.ViewPropertyAnimatorListenerAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.ViewPropertyAnimatorListenerAdapter.ThresholdClass.get -> nint
override AndroidX.Core.View.ViewPropertyAnimatorListenerAdapter.ThresholdType.get -> System.Type!
override AndroidX.Core.View.ViewStructureCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.ViewStructureCompat.ThresholdClass.get -> nint
override AndroidX.Core.View.ViewStructureCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.View.WindowCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.WindowInsetsAnimationCompat.BoundsCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.WindowInsetsAnimationCompat.Callback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.WindowInsetsAnimationCompat.Callback.ThresholdClass.get -> nint
override AndroidX.Core.View.WindowInsetsAnimationCompat.Callback.ThresholdType.get -> System.Type!
override AndroidX.Core.View.WindowInsetsAnimationCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.WindowInsetsAnimationControllerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.WindowInsetsCompat.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.WindowInsetsCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.WindowInsetsCompat.Side.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.WindowInsetsCompat.ThresholdClass.get -> nint
override AndroidX.Core.View.WindowInsetsCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.View.WindowInsetsCompat.Type.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.View.WindowInsetsControllerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Widget.AutoScrollHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Widget.AutoScrollHelper.ThresholdClass.get -> nint
override AndroidX.Core.Widget.AutoScrollHelper.ThresholdType.get -> System.Type!
override AndroidX.Core.Widget.CheckedTextViewCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Widget.CompoundButtonCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Widget.ContentLoadingProgressBar.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Widget.ContentLoadingProgressBar.ThresholdClass.get -> nint
override AndroidX.Core.Widget.ContentLoadingProgressBar.ThresholdType.get -> System.Type!
override AndroidX.Core.Widget.EdgeEffectCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Widget.ImageViewCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Widget.ImageViewCompat.ThresholdClass.get -> nint
override AndroidX.Core.Widget.ImageViewCompat.ThresholdType.get -> System.Type!
override AndroidX.Core.Widget.ListPopupWindowCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Widget.ListViewAutoScrollHelper.CanTargetScrollHorizontally(int direction) -> bool
override AndroidX.Core.Widget.ListViewAutoScrollHelper.CanTargetScrollVertically(int direction) -> bool
override AndroidX.Core.Widget.ListViewAutoScrollHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Widget.ListViewAutoScrollHelper.ScrollTargetBy(int deltaX, int deltaY) -> void
override AndroidX.Core.Widget.ListViewAutoScrollHelper.ThresholdClass.get -> nint
override AndroidX.Core.Widget.ListViewAutoScrollHelper.ThresholdType.get -> System.Type!
override AndroidX.Core.Widget.ListViewCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Widget.NestedScrollView.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Widget.NestedScrollView.OnNestedScrollAccepted(Android.Views.View! child, Android.Views.View! target, Android.Views.ScrollAxis axes) -> void
override AndroidX.Core.Widget.NestedScrollView.ThresholdClass.get -> nint
override AndroidX.Core.Widget.NestedScrollView.ThresholdType.get -> System.Type!
override AndroidX.Core.Widget.PopupMenuCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Widget.PopupWindowCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Widget.ScrollerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Widget.TextViewCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Core.Widget.TextViewOnReceiveContentListener.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override sealed AndroidX.Core.App.AppComponentFactory.InstantiateActivity(Java.Lang.ClassLoader? cl, string? className, Android.Content.Intent? intent) -> Android.App.Activity?
override sealed AndroidX.Core.App.AppComponentFactory.InstantiateApplication(Java.Lang.ClassLoader? cl, string? className) -> Android.App.Application?
override sealed AndroidX.Core.App.AppComponentFactory.InstantiateProvider(Java.Lang.ClassLoader? cl, string? className) -> Android.Content.ContentProvider?
override sealed AndroidX.Core.App.AppComponentFactory.InstantiateReceiver(Java.Lang.ClassLoader? cl, string? className, Android.Content.Intent? intent) -> Android.Content.BroadcastReceiver?
override sealed AndroidX.Core.App.AppComponentFactory.InstantiateService(Java.Lang.ClassLoader? cl, string? className, Android.Content.Intent? intent) -> Android.App.Service?
static Android.Support.V4.App.NotificationSideChannel.Descriptor.get -> string?
static Android.Support.V4.App.NotificationSideChannelDefault.InterfaceConsts.Descriptor.get -> string?
static Android.Support.V4.App.NotificationSideChannelStub.AsInterface(Android.OS.IBinder? obj) -> Android.Support.V4.App.INotificationSideChannel?
static Android.Support.V4.App.NotificationSideChannelStub.InterfaceConsts.Descriptor.get -> string?
static Android.Support.V4.App.RemoteActionCompatParcelizer.Read(AndroidX.VersionedParcelable.VersionedParcel? parcel) -> AndroidX.Core.App.RemoteActionCompat?
static Android.Support.V4.App.RemoteActionCompatParcelizer.Write(AndroidX.Core.App.RemoteActionCompat? obj, AndroidX.VersionedParcelable.VersionedParcel? parcel) -> void
static Android.Support.V4.Graphics.Drawable.IconCompatParcelizer.Read(AndroidX.VersionedParcelable.VersionedParcel? parcel) -> AndroidX.Core.Graphics.Drawable.IconCompat?
static Android.Support.V4.Graphics.Drawable.IconCompatParcelizer.Write(AndroidX.Core.Graphics.Drawable.IconCompat? obj, AndroidX.VersionedParcelable.VersionedParcel? parcel) -> void
static Android.Support.V4.OS.ResultReceiver.Creator.get -> Android.OS.IParcelableCreator?
static Android.Support.V4.OS.ResultReceiver2.Descriptor.get -> string?
static Android.Support.V4.OS.ResultReceiver2Default.InterfaceConsts.Descriptor.get -> string?
static Android.Support.V4.OS.ResultReceiver2Stub.AsInterface(Android.OS.IBinder? obj) -> Android.Support.V4.OS.IResultReceiver2?
static Android.Support.V4.OS.ResultReceiver2Stub.InterfaceConsts.Descriptor.get -> string?
static Android.Support.V4.OS.ResultReceiverDefault.InterfaceConsts.Descriptor.get -> string?
static Android.Support.V4.OS.ResultReceiverStub.AsInterface(Android.OS.IBinder? obj) -> Android.Support.V4.OS.IResultReceiver?
static Android.Support.V4.OS.ResultReceiverStub.InterfaceConsts.Descriptor.get -> string?
static AndroidX.Core.AccessibilityService.AccessibilityServiceInfoCompat.CapabilityToString(int capability) -> string?
static AndroidX.Core.AccessibilityService.AccessibilityServiceInfoCompat.FeedbackTypeToString(int feedbackType) -> string?
static AndroidX.Core.AccessibilityService.AccessibilityServiceInfoCompat.FlagToString(int flag) -> string?
static AndroidX.Core.AccessibilityService.AccessibilityServiceInfoCompat.GetCapabilities(Android.AccessibilityServices.AccessibilityServiceInfo? info) -> int
static AndroidX.Core.AccessibilityService.AccessibilityServiceInfoCompat.LoadDescription(Android.AccessibilityServices.AccessibilityServiceInfo? info, Android.Content.PM.PackageManager? packageManager) -> string?
static AndroidX.Core.App.ActivityCompat.FinishAffinity(Android.App.Activity? activity) -> void
static AndroidX.Core.App.ActivityCompat.FinishAfterTransition(Android.App.Activity? activity) -> void
static AndroidX.Core.App.ActivityCompat.GetReferrer(Android.App.Activity? activity) -> Android.Net.Uri?
static AndroidX.Core.App.ActivityCompat.InvalidateOptionsMenu(Android.App.Activity? activity) -> bool
static AndroidX.Core.App.ActivityCompat.IsLaunchedFromBubble(Android.App.Activity? activity) -> bool
static AndroidX.Core.App.ActivityCompat.PermissionCompatDelegate.get -> AndroidX.Core.App.ActivityCompat.IPermissionCompatDelegate?
static AndroidX.Core.App.ActivityCompat.PermissionCompatDelegate.set -> void
static AndroidX.Core.App.ActivityCompat.PostponeEnterTransition(Android.App.Activity? activity) -> void
static AndroidX.Core.App.ActivityCompat.Recreate(Android.App.Activity? activity) -> void
static AndroidX.Core.App.ActivityCompat.RequestDragAndDropPermissions(Android.App.Activity? activity, Android.Views.DragEvent? dragEvent) -> AndroidX.Core.View.DragAndDropPermissionsCompat?
static AndroidX.Core.App.ActivityCompat.RequestPermissions(Android.App.Activity? activity, string![]? permissions, int requestCode) -> void
static AndroidX.Core.App.ActivityCompat.RequireViewById(Android.App.Activity? activity, int id) -> Java.Lang.Object?
static AndroidX.Core.App.ActivityCompat.SetEnterSharedElementCallback(Android.App.Activity? activity, AndroidX.Core.App.SharedElementCallback? callback) -> void
static AndroidX.Core.App.ActivityCompat.SetExitSharedElementCallback(Android.App.Activity? activity, AndroidX.Core.App.SharedElementCallback? callback) -> void
static AndroidX.Core.App.ActivityCompat.SetLocusContext(Android.App.Activity? activity, AndroidX.Core.Content.LocusIdCompat? locusId, Android.OS.Bundle? bundle) -> void
static AndroidX.Core.App.ActivityCompat.ShouldShowRequestPermissionRationale(Android.App.Activity? activity, string? permission) -> bool
static AndroidX.Core.App.ActivityCompat.StartActivityForResult(Android.App.Activity? activity, Android.Content.Intent? intent, int requestCode, Android.OS.Bundle? options) -> void
static AndroidX.Core.App.ActivityCompat.StartIntentSenderForResult(Android.App.Activity? activity, Android.Content.IntentSender? intent, int requestCode, Android.Content.Intent? fillInIntent, int flagsMask, int flagsValues, int extraFlags, Android.OS.Bundle? options) -> void
static AndroidX.Core.App.ActivityCompat.StartPostponedEnterTransition(Android.App.Activity? activity) -> void
static AndroidX.Core.App.ActivityManagerCompat.IsLowRamDevice(Android.App.ActivityManager? activityManager) -> bool
static AndroidX.Core.App.ActivityOptionsCompat.MakeBasic() -> AndroidX.Core.App.ActivityOptionsCompat?
static AndroidX.Core.App.ActivityOptionsCompat.MakeClipRevealAnimation(Android.Views.View? source, int startX, int startY, int width, int height) -> AndroidX.Core.App.ActivityOptionsCompat?
static AndroidX.Core.App.ActivityOptionsCompat.MakeCustomAnimation(Android.Content.Context? context, int enterResId, int exitResId) -> AndroidX.Core.App.ActivityOptionsCompat?
static AndroidX.Core.App.ActivityOptionsCompat.MakeScaleUpAnimation(Android.Views.View? source, int startX, int startY, int startWidth, int startHeight) -> AndroidX.Core.App.ActivityOptionsCompat?
static AndroidX.Core.App.ActivityOptionsCompat.MakeSceneTransitionAnimation(Android.App.Activity? activity, Android.Views.View? sharedElement, string? sharedElementName) -> AndroidX.Core.App.ActivityOptionsCompat?
static AndroidX.Core.App.ActivityOptionsCompat.MakeSceneTransitionAnimation(Android.App.Activity? activity, params AndroidX.Core.Util.Pair![]? sharedElements) -> AndroidX.Core.App.ActivityOptionsCompat?
static AndroidX.Core.App.ActivityOptionsCompat.MakeTaskLaunchBehind() -> AndroidX.Core.App.ActivityOptionsCompat?
static AndroidX.Core.App.ActivityOptionsCompat.MakeThumbnailScaleUpAnimation(Android.Views.View? source, Android.Graphics.Bitmap? thumbnail, int startX, int startY) -> AndroidX.Core.App.ActivityOptionsCompat?
static AndroidX.Core.App.AlarmManagerCompat.CanScheduleExactAlarms(Android.App.AlarmManager? alarmManager) -> bool
static AndroidX.Core.App.AlarmManagerCompat.SetAlarmClock(Android.App.AlarmManager? alarmManager, long triggerTime, Android.App.PendingIntent? showIntent, Android.App.PendingIntent? operation) -> void
static AndroidX.Core.App.AlarmManagerCompat.SetAndAllowWhileIdle(Android.App.AlarmManager? alarmManager, int type, long triggerAtMillis, Android.App.PendingIntent? operation) -> void
static AndroidX.Core.App.AlarmManagerCompat.SetExact(Android.App.AlarmManager? alarmManager, int type, long triggerAtMillis, Android.App.PendingIntent? operation) -> void
static AndroidX.Core.App.AlarmManagerCompat.SetExactAndAllowWhileIdle(Android.App.AlarmManager? alarmManager, int type, long triggerAtMillis, Android.App.PendingIntent? operation) -> void
static AndroidX.Core.App.AppLaunchChecker.HasStartedFromLauncher(Android.Content.Context? context) -> bool
static AndroidX.Core.App.AppLaunchChecker.OnActivityCreate(Android.App.Activity? activity) -> void
static AndroidX.Core.App.AppLocalesStorageHelper.PersistLocales(Android.Content.Context? context, string? locales) -> void
static AndroidX.Core.App.AppLocalesStorageHelper.ReadLocales(Android.Content.Context? context) -> string?
static AndroidX.Core.App.AppOpsManagerCompat.CheckOrNoteProxyOp(Android.Content.Context? context, int proxyUid, string? op, string? proxiedPackageName) -> int
static AndroidX.Core.App.AppOpsManagerCompat.NoteOp(Android.Content.Context? context, string? op, int uid, string? packageName) -> int
static AndroidX.Core.App.AppOpsManagerCompat.NoteOpNoThrow(Android.Content.Context? context, string? op, int uid, string? packageName) -> int
static AndroidX.Core.App.AppOpsManagerCompat.NoteProxyOp(Android.Content.Context? context, string? op, string? proxiedPackageName) -> int
static AndroidX.Core.App.AppOpsManagerCompat.NoteProxyOpNoThrow(Android.Content.Context? context, string? op, string? proxiedPackageName) -> int
static AndroidX.Core.App.AppOpsManagerCompat.PermissionToOp(string? permission) -> string?
static AndroidX.Core.App.BundleCompat.GetBinder(Android.OS.Bundle? bundle, string? key) -> Android.OS.IBinder?
static AndroidX.Core.App.BundleCompat.PutBinder(Android.OS.Bundle? bundle, string? key, Android.OS.IBinder? binder) -> void
static AndroidX.Core.App.DialogCompat.RequireViewById(Android.App.Dialog? dialog, int id) -> Android.Views.View?
static AndroidX.Core.App.GrammaticalInflectionManagerCompat.GetApplicationGrammaticalGender(Android.Content.Context? context) -> int
static AndroidX.Core.App.GrammaticalInflectionManagerCompat.SetRequestedApplicationGrammaticalGender(Android.Content.Context? context, int grammaticalGender) -> void
static AndroidX.Core.App.JobIntentService.EnqueueWork(Android.Content.Context? context, Android.Content.ComponentName? component, int jobId, Android.Content.Intent? work) -> void
static AndroidX.Core.App.JobIntentService.EnqueueWork(Android.Content.Context? context, Java.Lang.Class? cls, int jobId, Android.Content.Intent? work) -> void
static AndroidX.Core.App.LocaleManagerCompat.GetApplicationLocales(Android.Content.Context? context) -> AndroidX.Core.OS.LocaleListCompat?
static AndroidX.Core.App.LocaleManagerCompat.GetSystemLocales(Android.Content.Context? context) -> AndroidX.Core.OS.LocaleListCompat?
static AndroidX.Core.App.NavUtils.GetParentActivityIntent(Android.App.Activity? sourceActivity) -> Android.Content.Intent?
static AndroidX.Core.App.NavUtils.GetParentActivityIntent(Android.Content.Context? context, Android.Content.ComponentName? componentName) -> Android.Content.Intent?
static AndroidX.Core.App.NavUtils.GetParentActivityIntent(Android.Content.Context? context, Java.Lang.Class? sourceActivityClass) -> Android.Content.Intent?
static AndroidX.Core.App.NavUtils.GetParentActivityName(Android.App.Activity? sourceActivity) -> string?
static AndroidX.Core.App.NavUtils.GetParentActivityName(Android.Content.Context? context, Android.Content.ComponentName? componentName) -> string?
static AndroidX.Core.App.NavUtils.NavigateUpFromSameTask(Android.App.Activity? sourceActivity) -> void
static AndroidX.Core.App.NavUtils.NavigateUpTo(Android.App.Activity? sourceActivity, Android.Content.Intent? upIntent) -> void
static AndroidX.Core.App.NavUtils.ShouldUpRecreateTask(Android.App.Activity? sourceActivity, Android.Content.Intent? targetIntent) -> bool
static AndroidX.Core.App.NotificationCompat.Action.Builder.FromAndroidAction(Android.App.Notification.Action? action) -> AndroidX.Core.App.NotificationCompat.Action.Builder?
static AndroidX.Core.App.NotificationCompat.BigPictureStyle.GetPictureIcon(Android.OS.Bundle? extras) -> AndroidX.Core.Graphics.Drawable.IconCompat?
static AndroidX.Core.App.NotificationCompat.BubbleMetadata.FromPlatform(Android.App.Notification.BubbleMetadata? platformMetadata) -> AndroidX.Core.App.NotificationCompat.BubbleMetadata?
static AndroidX.Core.App.NotificationCompat.BubbleMetadata.ToPlatform(AndroidX.Core.App.NotificationCompat.BubbleMetadata? compatMetadata) -> Android.App.Notification.BubbleMetadata?
static AndroidX.Core.App.NotificationCompat.Builder.LimitCharSequenceLength(string? cs) -> string?
static AndroidX.Core.App.NotificationCompat.Builder.LimitCharSequenceLengthFormatted(Java.Lang.ICharSequence? cs) -> Java.Lang.ICharSequence?
static AndroidX.Core.App.NotificationCompat.CallStyle.ForIncomingCall(AndroidX.Core.App.Person? person, Android.App.PendingIntent? declineIntent, Android.App.PendingIntent? answerIntent) -> AndroidX.Core.App.NotificationCompat.CallStyle?
static AndroidX.Core.App.NotificationCompat.CallStyle.ForOngoingCall(AndroidX.Core.App.Person? person, Android.App.PendingIntent? hangUpIntent) -> AndroidX.Core.App.NotificationCompat.CallStyle?
static AndroidX.Core.App.NotificationCompat.CallStyle.ForScreeningCall(AndroidX.Core.App.Person? person, Android.App.PendingIntent? hangUpIntent, Android.App.PendingIntent? answerIntent) -> AndroidX.Core.App.NotificationCompat.CallStyle?
static AndroidX.Core.App.NotificationCompat.DecoratedCustomViewStyle.GetTextsFromContentView(Android.Content.Context? context, Android.App.Notification? notification) -> System.Collections.Generic.IList<Java.Lang.ICharSequence!>?
static AndroidX.Core.App.NotificationCompat.GetAction(Android.App.Notification? notification, int actionIndex) -> AndroidX.Core.App.NotificationCompat.Action?
static AndroidX.Core.App.NotificationCompat.GetActionCount(Android.App.Notification? notification) -> int
static AndroidX.Core.App.NotificationCompat.GetAllowSystemGeneratedContextualActions(Android.App.Notification? notification) -> bool
static AndroidX.Core.App.NotificationCompat.GetAutoCancel(Android.App.Notification? notification) -> bool
static AndroidX.Core.App.NotificationCompat.GetBadgeIconType(Android.App.Notification? notification) -> int
static AndroidX.Core.App.NotificationCompat.GetBubbleMetadata(Android.App.Notification? notification) -> AndroidX.Core.App.NotificationCompat.BubbleMetadata?
static AndroidX.Core.App.NotificationCompat.GetCategory(Android.App.Notification? notification) -> string?
static AndroidX.Core.App.NotificationCompat.GetChannelId(Android.App.Notification? notification) -> string?
static AndroidX.Core.App.NotificationCompat.GetColor(Android.App.Notification? notification) -> int
static AndroidX.Core.App.NotificationCompat.GetContentInfo(Android.App.Notification? notification) -> string?
static AndroidX.Core.App.NotificationCompat.GetContentInfoFormatted(Android.App.Notification? notification) -> Java.Lang.ICharSequence?
static AndroidX.Core.App.NotificationCompat.GetContentText(Android.App.Notification? notification) -> string?
static AndroidX.Core.App.NotificationCompat.GetContentTextFormatted(Android.App.Notification? notification) -> Java.Lang.ICharSequence?
static AndroidX.Core.App.NotificationCompat.GetContentTitle(Android.App.Notification? notification) -> string?
static AndroidX.Core.App.NotificationCompat.GetContentTitleFormatted(Android.App.Notification? notification) -> Java.Lang.ICharSequence?
static AndroidX.Core.App.NotificationCompat.GetExtras(Android.App.Notification? notification) -> Android.OS.Bundle?
static AndroidX.Core.App.NotificationCompat.GetGroup(Android.App.Notification? notification) -> string?
static AndroidX.Core.App.NotificationCompat.GetGroupAlertBehavior(Android.App.Notification? notification) -> int
static AndroidX.Core.App.NotificationCompat.GetInvisibleActions(Android.App.Notification? notification) -> System.Collections.Generic.IList<AndroidX.Core.App.NotificationCompat.Action!>?
static AndroidX.Core.App.NotificationCompat.GetLocalOnly(Android.App.Notification? notification) -> bool
static AndroidX.Core.App.NotificationCompat.GetLocusId(Android.App.Notification? notification) -> AndroidX.Core.Content.LocusIdCompat?
static AndroidX.Core.App.NotificationCompat.GetOngoing(Android.App.Notification? notification) -> bool
static AndroidX.Core.App.NotificationCompat.GetOnlyAlertOnce(Android.App.Notification? notification) -> bool
static AndroidX.Core.App.NotificationCompat.GetPeople(Android.App.Notification? notification) -> System.Collections.Generic.IList<AndroidX.Core.App.Person!>?
static AndroidX.Core.App.NotificationCompat.GetPublicVersion(Android.App.Notification? notification) -> Android.App.Notification?
static AndroidX.Core.App.NotificationCompat.GetSettingsText(Android.App.Notification? notification) -> string?
static AndroidX.Core.App.NotificationCompat.GetSettingsTextFormatted(Android.App.Notification? notification) -> Java.Lang.ICharSequence?
static AndroidX.Core.App.NotificationCompat.GetShortCriticalText(Android.App.Notification? notification) -> string?
static AndroidX.Core.App.NotificationCompat.GetShortcutId(Android.App.Notification? notification) -> string?
static AndroidX.Core.App.NotificationCompat.GetShowWhen(Android.App.Notification? notification) -> bool
static AndroidX.Core.App.NotificationCompat.GetSortKey(Android.App.Notification? notification) -> string?
static AndroidX.Core.App.NotificationCompat.GetSubText(Android.App.Notification? notification) -> string?
static AndroidX.Core.App.NotificationCompat.GetSubTextFormatted(Android.App.Notification? notification) -> Java.Lang.ICharSequence?
static AndroidX.Core.App.NotificationCompat.GetTimeoutAfter(Android.App.Notification? notification) -> long
static AndroidX.Core.App.NotificationCompat.GetUsesChronometer(Android.App.Notification? notification) -> bool
static AndroidX.Core.App.NotificationCompat.GetVisibility(Android.App.Notification? notification) -> int
static AndroidX.Core.App.NotificationCompat.HasPromotableCharacteristics(Android.App.Notification? notification) -> bool
static AndroidX.Core.App.NotificationCompat.IsGroupSummary(Android.App.Notification? notification) -> bool
static AndroidX.Core.App.NotificationCompat.IsRequestPromotedOngoing(Android.App.Notification? notification) -> bool
static AndroidX.Core.App.NotificationCompat.MessagingStyle.ExtractMessagingStyleFromNotification(Android.App.Notification? notification) -> AndroidX.Core.App.NotificationCompat.MessagingStyle?
static AndroidX.Core.App.NotificationCompat.ReduceLargeIconSize(Android.Content.Context? context, Android.Graphics.Bitmap? icon) -> Android.Graphics.Bitmap?
static AndroidX.Core.App.NotificationCompat.Style.ExtractStyleFromNotification(Android.App.Notification? notification) -> AndroidX.Core.App.NotificationCompat.Style?
static AndroidX.Core.App.NotificationManagerCompat.From(Android.Content.Context? context) -> AndroidX.Core.App.NotificationManagerCompat?
static AndroidX.Core.App.NotificationManagerCompat.GetEnabledListenerPackages(Android.Content.Context? context) -> System.Collections.Generic.ICollection<string!>?
static AndroidX.Core.App.PendingIntentCompat.GetActivities(Android.Content.Context? context, int requestCode, Android.Content.Intent![]? intents, int flags, Android.OS.Bundle? options, bool isMutable) -> Android.App.PendingIntent?
static AndroidX.Core.App.PendingIntentCompat.GetActivities(Android.Content.Context? context, int requestCode, Android.Content.Intent![]? intents, int flags, bool isMutable) -> Android.App.PendingIntent?
static AndroidX.Core.App.PendingIntentCompat.GetActivity(Android.Content.Context? context, int requestCode, Android.Content.Intent? intent, int flags, Android.OS.Bundle? options, bool isMutable) -> Android.App.PendingIntent?
static AndroidX.Core.App.PendingIntentCompat.GetActivity(Android.Content.Context? context, int requestCode, Android.Content.Intent? intent, int flags, bool isMutable) -> Android.App.PendingIntent?
static AndroidX.Core.App.PendingIntentCompat.GetBroadcast(Android.Content.Context? context, int requestCode, Android.Content.Intent? intent, int flags, bool isMutable) -> Android.App.PendingIntent?
static AndroidX.Core.App.PendingIntentCompat.GetForegroundService(Android.Content.Context? context, int requestCode, Android.Content.Intent? intent, int flags, bool isMutable) -> Android.App.PendingIntent?
static AndroidX.Core.App.PendingIntentCompat.GetService(Android.Content.Context? context, int requestCode, Android.Content.Intent? intent, int flags, bool isMutable) -> Android.App.PendingIntent?
static AndroidX.Core.App.PendingIntentCompat.Send(Android.App.PendingIntent? pendingIntent, Android.Content.Context? context, int code, Android.Content.Intent? intent, Android.App.PendingIntent.IOnFinished? onFinished, Android.OS.Handler? handler) -> void
static AndroidX.Core.App.PendingIntentCompat.Send(Android.App.PendingIntent? pendingIntent, Android.Content.Context? context, int code, Android.Content.Intent? intent, Android.App.PendingIntent.IOnFinished? onFinished, Android.OS.Handler? handler, string? requiredPermissions, Android.OS.Bundle? options) -> void
static AndroidX.Core.App.PendingIntentCompat.Send(Android.App.PendingIntent? pendingIntent, int code, Android.App.PendingIntent.IOnFinished? onFinished, Android.OS.Handler? handler) -> void
static AndroidX.Core.App.Person.FromAndroidPerson(Android.App.Person? person) -> AndroidX.Core.App.Person?
static AndroidX.Core.App.Person.FromBundle(Android.OS.Bundle? bundle) -> AndroidX.Core.App.Person?
static AndroidX.Core.App.Person.FromPersistableBundle(Android.OS.PersistableBundle? bundle) -> AndroidX.Core.App.Person?
static AndroidX.Core.App.RemoteActionCompat.CreateFromRemoteAction(Android.App.RemoteAction? remoteAction) -> AndroidX.Core.App.RemoteActionCompat?
static AndroidX.Core.App.RemoteActionCompatParcelizer.Read(AndroidX.VersionedParcelable.VersionedParcel? parcel) -> AndroidX.Core.App.RemoteActionCompat?
static AndroidX.Core.App.RemoteActionCompatParcelizer.Write(AndroidX.Core.App.RemoteActionCompat? obj, AndroidX.VersionedParcelable.VersionedParcel? parcel) -> void
static AndroidX.Core.App.RemoteInput.AddDataResultToIntent(AndroidX.Core.App.RemoteInput? remoteInput, Android.Content.Intent? intent, System.Collections.Generic.IDictionary<string!, Android.Net.Uri!>? results) -> void
static AndroidX.Core.App.RemoteInput.AddResultsToIntent(AndroidX.Core.App.RemoteInput![]? remoteInputs, Android.Content.Intent? intent, Android.OS.Bundle? results) -> void
static AndroidX.Core.App.RemoteInput.GetDataResultsFromIntent(Android.Content.Intent? intent, string? remoteInputResultKey) -> System.Collections.Generic.IDictionary<string!, Android.Net.Uri!>?
static AndroidX.Core.App.RemoteInput.GetResultsFromIntent(Android.Content.Intent? intent) -> Android.OS.Bundle?
static AndroidX.Core.App.RemoteInput.GetResultsSource(Android.Content.Intent? intent) -> int
static AndroidX.Core.App.RemoteInput.SetResultsSource(Android.Content.Intent? intent, int source) -> void
static AndroidX.Core.App.ServiceCompat.StartForeground(Android.App.Service? service, int id, Android.App.Notification? notification, int foregroundServiceType) -> void
static AndroidX.Core.App.ServiceCompat.StopForeground(Android.App.Service? service, int flags) -> void
static AndroidX.Core.App.ShareCompat.ConfigureMenuItem(Android.Views.IMenu? menu, int menuItemId, AndroidX.Core.App.ShareCompat.IntentBuilder? shareIntent) -> void
static AndroidX.Core.App.ShareCompat.ConfigureMenuItem(Android.Views.IMenuItem? item, AndroidX.Core.App.ShareCompat.IntentBuilder? shareIntent) -> void
static AndroidX.Core.App.ShareCompat.GetCallingActivity(Android.App.Activity? calledActivity) -> Android.Content.ComponentName?
static AndroidX.Core.App.ShareCompat.GetCallingPackage(Android.App.Activity? calledActivity) -> string?
static AndroidX.Core.App.ShareCompat.IntentBuilder.From(Android.App.Activity? launchingActivity) -> AndroidX.Core.App.ShareCompat.IntentBuilder?
static AndroidX.Core.App.ShareCompat.IntentReader.From(Android.App.Activity? activity) -> AndroidX.Core.App.ShareCompat.IntentReader?
static AndroidX.Core.App.TaskStackBuilder.Create(Android.Content.Context? context) -> AndroidX.Core.App.TaskStackBuilder?
static AndroidX.Core.App.TaskStackBuilder.From(Android.Content.Context? context) -> AndroidX.Core.App.TaskStackBuilder?
static AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallback.Descriptor.get -> string?
static AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackDefault.InterfaceConsts.Descriptor.get -> string?
static AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackStub.AsInterface(Android.OS.IBinder? obj) -> AndroidX.Core.App.UnusedAppRestrictions.IUnusedAppRestrictionsBackportCallback?
static AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackStub.InterfaceConsts.Descriptor.get -> string?
static AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportService.Descriptor.get -> string?
static AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceDefault.InterfaceConsts.Descriptor.get -> string?
static AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceStub.AsInterface(Android.OS.IBinder? obj) -> AndroidX.Core.App.UnusedAppRestrictions.IUnusedAppRestrictionsBackportService?
static AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceStub.InterfaceConsts.Descriptor.get -> string?
static AndroidX.Core.Content.ContentProviderCompat.RequireContext(Android.Content.ContentProvider? provider) -> Android.Content.Context?
static AndroidX.Core.Content.ContentResolverCompat.Query(Android.Content.ContentResolver? resolver, Android.Net.Uri? uri, string![]? projection, string? selection, string![]? selectionArgs, string? sortOrder, Android.OS.CancellationSignal? cancellationSignal) -> Android.Database.ICursor?
static AndroidX.Core.Content.ContentResolverCompat.Query(Android.Content.ContentResolver? resolver, Android.Net.Uri? uri, string![]? projection, string? selection, string![]? selectionArgs, string? sortOrder, AndroidX.Core.OS.CancellationSignal? cancellationSignal) -> Android.Database.ICursor?
static AndroidX.Core.Content.ContextCompat.CheckSelfPermission(Android.Content.Context? context, string? permission) -> Android.Content.PM.Permission
static AndroidX.Core.Content.ContextCompat.CreateAttributionContext(Android.Content.Context? context, string? attributionTag) -> Android.Content.Context?
static AndroidX.Core.Content.ContextCompat.CreateDeviceProtectedStorageContext(Android.Content.Context? context) -> Android.Content.Context?
static AndroidX.Core.Content.ContextCompat.GetAttributionTag(Android.Content.Context? context) -> string?
static AndroidX.Core.Content.ContextCompat.GetCodeCacheDir(Android.Content.Context? context) -> Java.IO.File?
static AndroidX.Core.Content.ContextCompat.GetColor(Android.Content.Context? context, int id) -> int
static AndroidX.Core.Content.ContextCompat.GetColorStateList(Android.Content.Context? context, int id) -> Android.Content.Res.ColorStateList?
static AndroidX.Core.Content.ContextCompat.GetContextForLanguage(Android.Content.Context? context) -> Android.Content.Context?
static AndroidX.Core.Content.ContextCompat.GetDataDir(Android.Content.Context? context) -> Java.IO.File?
static AndroidX.Core.Content.ContextCompat.GetDisplayOrDefault(Android.Content.Context? context) -> Android.Views.Display?
static AndroidX.Core.Content.ContextCompat.GetDrawable(Android.Content.Context? context, int id) -> Android.Graphics.Drawables.Drawable?
static AndroidX.Core.Content.ContextCompat.GetExternalCacheDirs(Android.Content.Context? context) -> Java.IO.File![]?
static AndroidX.Core.Content.ContextCompat.GetExternalFilesDirs(Android.Content.Context? context, string? type) -> Java.IO.File![]?
static AndroidX.Core.Content.ContextCompat.GetMainExecutor(Android.Content.Context? context) -> Java.Util.Concurrent.IExecutor?
static AndroidX.Core.Content.ContextCompat.GetNoBackupFilesDir(Android.Content.Context? context) -> Java.IO.File?
static AndroidX.Core.Content.ContextCompat.GetObbDirs(Android.Content.Context? context) -> Java.IO.File![]?
static AndroidX.Core.Content.ContextCompat.GetString(Android.Content.Context? context, int resId) -> string?
static AndroidX.Core.Content.ContextCompat.GetSystemService(Android.Content.Context? context, Java.Lang.Class? serviceClass) -> Java.Lang.Object?
static AndroidX.Core.Content.ContextCompat.GetSystemServiceName(Android.Content.Context? context, Java.Lang.Class? serviceClass) -> string?
static AndroidX.Core.Content.ContextCompat.IsDeviceProtectedStorage(Android.Content.Context? context) -> bool
static AndroidX.Core.Content.ContextCompat.RegisterReceiver(Android.Content.Context? context, Android.Content.BroadcastReceiver? receiver, Android.Content.IntentFilter? filter, int flags) -> Android.Content.Intent?
static AndroidX.Core.Content.ContextCompat.RegisterReceiver(Android.Content.Context? context, Android.Content.BroadcastReceiver? receiver, Android.Content.IntentFilter? filter, string? broadcastPermission, Android.OS.Handler? scheduler, int flags) -> Android.Content.Intent?
static AndroidX.Core.Content.ContextCompat.StartActivities(Android.Content.Context? context, Android.Content.Intent![]? intents) -> bool
static AndroidX.Core.Content.ContextCompat.StartActivities(Android.Content.Context? context, Android.Content.Intent![]? intents, Android.OS.Bundle? options) -> bool
static AndroidX.Core.Content.ContextCompat.StartActivity(Android.Content.Context? context, Android.Content.Intent? intent, Android.OS.Bundle? options) -> void
static AndroidX.Core.Content.ContextCompat.StartForegroundService(Android.Content.Context? context, Android.Content.Intent? intent) -> void
static AndroidX.Core.Content.FileProvider.GetUriForFile(Android.Content.Context? context, string? authority, Java.IO.File? file) -> Android.Net.Uri?
static AndroidX.Core.Content.FileProvider.GetUriForFile(Android.Content.Context? context, string? authority, Java.IO.File? file, string? displayName) -> Android.Net.Uri?
static AndroidX.Core.Content.IntentCompat.CreateManageUnusedAppRestrictionsIntent(Android.Content.Context? context, string? packageName) -> Android.Content.Intent?
static AndroidX.Core.Content.IntentCompat.GetParcelableArrayExtra(Android.Content.Intent? in, string? name, Java.Lang.Class? clazz) -> Android.OS.IParcelable![]?
static AndroidX.Core.Content.IntentCompat.GetParcelableArrayListExtra(Android.Content.Intent? in, string? name, Java.Lang.Class? clazz) -> System.Collections.IList?
static AndroidX.Core.Content.IntentCompat.GetParcelableExtra(Android.Content.Intent? in, string? name, Java.Lang.Class? clazz) -> Java.Lang.Object?
static AndroidX.Core.Content.IntentCompat.GetSerializableExtra(Android.Content.Intent? in, string? key, Java.Lang.Class? clazz) -> Java.Lang.Object?
static AndroidX.Core.Content.IntentCompat.MakeMainSelectorActivity(string? selectorAction, string? selectorCategory) -> Android.Content.Intent?
static AndroidX.Core.Content.LocusIdCompat.ToLocusIdCompat(Android.Content.LocusId? locusId) -> AndroidX.Core.Content.LocusIdCompat?
static AndroidX.Core.Content.MimeTypeFilter.Matches(string![]? mimeTypes, string? filter) -> string?
static AndroidX.Core.Content.MimeTypeFilter.Matches(string? mimeType, string![]? filters) -> string?
static AndroidX.Core.Content.MimeTypeFilter.Matches(string? mimeType, string? filter) -> bool
static AndroidX.Core.Content.MimeTypeFilter.MatchesMany(string![]? mimeTypes, string? filter) -> string![]?
static AndroidX.Core.Content.PM.PackageInfoCompat.GetLongVersionCode(Android.Content.PM.PackageInfo? info) -> long
static AndroidX.Core.Content.PM.PackageInfoCompat.GetSignatures(Android.Content.PM.PackageManager? packageManager, string? packageName) -> System.Collections.Generic.IList<Android.Content.PM.Signature!>?
static AndroidX.Core.Content.PM.PackageInfoCompat.HasSignatures(Android.Content.PM.PackageManager? packageManager, string? packageName, System.Collections.Generic.IDictionary<byte[]!, Java.Lang.Integer!>? certificatesAndType, bool matchExact) -> bool
static AndroidX.Core.Content.PM.PermissionInfoCompat.GetProtection(Android.Content.PM.PermissionInfo? permissionInfo) -> int
static AndroidX.Core.Content.PM.PermissionInfoCompat.GetProtectionFlags(Android.Content.PM.PermissionInfo? permissionInfo) -> int
static AndroidX.Core.Content.PM.ShortcutManagerCompat.AddDynamicShortcuts(Android.Content.Context? context, System.Collections.Generic.IList<AndroidX.Core.Content.PM.ShortcutInfoCompat!>? shortcutInfoList) -> bool
static AndroidX.Core.Content.PM.ShortcutManagerCompat.CreateShortcutResultIntent(Android.Content.Context? context, AndroidX.Core.Content.PM.ShortcutInfoCompat? shortcut) -> Android.Content.Intent?
static AndroidX.Core.Content.PM.ShortcutManagerCompat.DisableShortcuts(Android.Content.Context? context, System.Collections.Generic.IList<string!>? shortcutIds, Java.Lang.ICharSequence? disabledMessage) -> void
static AndroidX.Core.Content.PM.ShortcutManagerCompat.DisableShortcuts(Android.Content.Context? context, System.Collections.Generic.IList<string!>? shortcutIds, string? disabledMessage) -> void
static AndroidX.Core.Content.PM.ShortcutManagerCompat.EnableShortcuts(Android.Content.Context? context, System.Collections.Generic.IList<AndroidX.Core.Content.PM.ShortcutInfoCompat!>? shortcutInfoList) -> void
static AndroidX.Core.Content.PM.ShortcutManagerCompat.GetDynamicShortcuts(Android.Content.Context? context) -> System.Collections.Generic.IList<AndroidX.Core.Content.PM.ShortcutInfoCompat!>?
static AndroidX.Core.Content.PM.ShortcutManagerCompat.GetIconMaxHeight(Android.Content.Context? context) -> int
static AndroidX.Core.Content.PM.ShortcutManagerCompat.GetIconMaxWidth(Android.Content.Context? context) -> int
static AndroidX.Core.Content.PM.ShortcutManagerCompat.GetMaxShortcutCountPerActivity(Android.Content.Context? context) -> int
static AndroidX.Core.Content.PM.ShortcutManagerCompat.GetShortcuts(Android.Content.Context? context, int matchFlags) -> System.Collections.Generic.IList<AndroidX.Core.Content.PM.ShortcutInfoCompat!>?
static AndroidX.Core.Content.PM.ShortcutManagerCompat.IsRateLimitingActive(Android.Content.Context? context) -> bool
static AndroidX.Core.Content.PM.ShortcutManagerCompat.IsRequestPinShortcutSupported(Android.Content.Context? context) -> bool
static AndroidX.Core.Content.PM.ShortcutManagerCompat.PushDynamicShortcut(Android.Content.Context? context, AndroidX.Core.Content.PM.ShortcutInfoCompat? shortcut) -> bool
static AndroidX.Core.Content.PM.ShortcutManagerCompat.RemoveAllDynamicShortcuts(Android.Content.Context? context) -> void
static AndroidX.Core.Content.PM.ShortcutManagerCompat.RemoveDynamicShortcuts(Android.Content.Context? context, System.Collections.Generic.IList<string!>? shortcutIds) -> void
static AndroidX.Core.Content.PM.ShortcutManagerCompat.RemoveLongLivedShortcuts(Android.Content.Context? context, System.Collections.Generic.IList<string!>? shortcutIds) -> void
static AndroidX.Core.Content.PM.ShortcutManagerCompat.ReportShortcutUsed(Android.Content.Context? context, string? shortcutId) -> void
static AndroidX.Core.Content.PM.ShortcutManagerCompat.RequestPinShortcut(Android.Content.Context? context, AndroidX.Core.Content.PM.ShortcutInfoCompat? shortcut, Android.Content.IntentSender? callback) -> bool
static AndroidX.Core.Content.PM.ShortcutManagerCompat.SetDynamicShortcuts(Android.Content.Context? context, System.Collections.Generic.IList<AndroidX.Core.Content.PM.ShortcutInfoCompat!>? shortcutInfoList) -> bool
static AndroidX.Core.Content.PM.ShortcutManagerCompat.UpdateShortcuts(Android.Content.Context? context, System.Collections.Generic.IList<AndroidX.Core.Content.PM.ShortcutInfoCompat!>? shortcutInfoList) -> bool
static AndroidX.Core.Content.PM.ShortcutXmlParser.GetShortcutIds(Android.Content.Context? context) -> System.Collections.Generic.IList<string!>?
static AndroidX.Core.Content.PM.ShortcutXmlParser.ParseShortcutIds(System.Xml.XmlReader? parser) -> System.Collections.Generic.IList<string!>?
static AndroidX.Core.Content.PackageManagerCompat.AreUnusedAppRestrictionsAvailable(Android.Content.PM.PackageManager? packageManager) -> bool
static AndroidX.Core.Content.PackageManagerCompat.GetPermissionRevocationVerifierApp(Android.Content.PM.PackageManager? packageManager) -> string?
static AndroidX.Core.Content.PackageManagerCompat.GetUnusedAppRestrictionsStatus(Android.Content.Context? context) -> Google.Common.Util.Concurrent.IListenableFuture?
static AndroidX.Core.Content.PermissionChecker.CheckCallingOrSelfPermission(Android.Content.Context? context, string? permission) -> int
static AndroidX.Core.Content.PermissionChecker.CheckCallingPermission(Android.Content.Context? context, string? permission, string? packageName) -> int
static AndroidX.Core.Content.PermissionChecker.CheckPermission(Android.Content.Context? context, string? permission, int pid, int uid, string? packageName) -> int
static AndroidX.Core.Content.PermissionChecker.CheckSelfPermission(Android.Content.Context? context, string? permission) -> int
static AndroidX.Core.Content.Resources.CamColor.GetM3HCTfromColor(int color, float[]? outM3HCT) -> void
static AndroidX.Core.Content.Resources.CamColor.ToColor(float hue, float chroma, float lStar) -> int
static AndroidX.Core.Content.Resources.ColorStateListInflaterCompat.CreateFromXml(Android.Content.Res.Resources? r, System.Xml.XmlReader? parser, Android.Content.Res.Resources.Theme? theme) -> Android.Content.Res.ColorStateList?
static AndroidX.Core.Content.Resources.ColorStateListInflaterCompat.CreateFromXmlInner(Android.Content.Res.Resources? r, System.Xml.XmlReader? parser, Android.Util.IAttributeSet? attrs, Android.Content.Res.Resources.Theme? theme) -> Android.Content.Res.ColorStateList?
static AndroidX.Core.Content.Resources.ColorStateListInflaterCompat.Inflate(Android.Content.Res.Resources? resources, int resId, Android.Content.Res.Resources.Theme? theme) -> Android.Content.Res.ColorStateList?
static AndroidX.Core.Content.Resources.ComplexColorCompat.Inflate(Android.Content.Res.Resources? resources, int resId, Android.Content.Res.Resources.Theme? theme) -> AndroidX.Core.Content.Resources.ComplexColorCompat?
static AndroidX.Core.Content.Resources.ConfigurationHelper.GetDensityDpi(Android.Content.Res.Resources? resources) -> int
static AndroidX.Core.Content.Resources.FontResourcesParserCompat.Parse(System.Xml.XmlReader? parser, Android.Content.Res.Resources? resources) -> AndroidX.Core.Content.Resources.FontResourcesParserCompat.IFamilyResourceEntry?
static AndroidX.Core.Content.Resources.FontResourcesParserCompat.ReadCerts(Android.Content.Res.Resources? resources, int certsId) -> System.Collections.Generic.IList<System.Collections.Generic.IList<byte[]!>!>?
static AndroidX.Core.Content.Resources.ResourcesCompat.ClearCachesForTheme(Android.Content.Res.Resources.Theme? theme) -> void
static AndroidX.Core.Content.Resources.ResourcesCompat.FontCallback.GetHandler(Android.OS.Handler? handler) -> Android.OS.Handler?
static AndroidX.Core.Content.Resources.ResourcesCompat.GetCachedFont(Android.Content.Context? context, int id) -> Android.Graphics.Typeface?
static AndroidX.Core.Content.Resources.ResourcesCompat.GetColor(Android.Content.Res.Resources? res, int id, Android.Content.Res.Resources.Theme? theme) -> int
static AndroidX.Core.Content.Resources.ResourcesCompat.GetColorStateList(Android.Content.Res.Resources? res, int id, Android.Content.Res.Resources.Theme? theme) -> Android.Content.Res.ColorStateList?
static AndroidX.Core.Content.Resources.ResourcesCompat.GetDrawable(Android.Content.Res.Resources? res, int id, Android.Content.Res.Resources.Theme? theme) -> Android.Graphics.Drawables.Drawable?
static AndroidX.Core.Content.Resources.ResourcesCompat.GetDrawableForDensity(Android.Content.Res.Resources? res, int id, int density, Android.Content.Res.Resources.Theme? theme) -> Android.Graphics.Drawables.Drawable?
static AndroidX.Core.Content.Resources.ResourcesCompat.GetFloat(Android.Content.Res.Resources? res, int id) -> float
static AndroidX.Core.Content.Resources.ResourcesCompat.GetFont(Android.Content.Context? context, int id) -> Android.Graphics.Typeface?
static AndroidX.Core.Content.Resources.ResourcesCompat.GetFont(Android.Content.Context? context, int id, Android.Util.TypedValue? value, int style, AndroidX.Core.Content.Resources.ResourcesCompat.FontCallback? fontCallback) -> Android.Graphics.Typeface?
static AndroidX.Core.Content.Resources.ResourcesCompat.GetFont(Android.Content.Context? context, int id, AndroidX.Core.Content.Resources.ResourcesCompat.FontCallback? fontCallback, Android.OS.Handler? handler) -> void
static AndroidX.Core.Content.Resources.ResourcesCompat.ThemeCompat.Rebase(Android.Content.Res.Resources.Theme? theme) -> void
static AndroidX.Core.Content.Resources.TypedArrayUtils.GetAttr(Android.Content.Context? context, int attr, int fallbackAttr) -> int
static AndroidX.Core.Content.Resources.TypedArrayUtils.GetBoolean(Android.Content.Res.TypedArray? a, int index, int fallbackIndex, bool defaultValue) -> bool
static AndroidX.Core.Content.Resources.TypedArrayUtils.GetDrawable(Android.Content.Res.TypedArray? a, int index, int fallbackIndex) -> Android.Graphics.Drawables.Drawable?
static AndroidX.Core.Content.Resources.TypedArrayUtils.GetInt(Android.Content.Res.TypedArray? a, int index, int fallbackIndex, int defaultValue) -> int
static AndroidX.Core.Content.Resources.TypedArrayUtils.GetNamedBoolean(Android.Content.Res.TypedArray? a, System.Xml.XmlReader? parser, string? attrName, int resId, bool defaultValue) -> bool
static AndroidX.Core.Content.Resources.TypedArrayUtils.GetNamedColor(Android.Content.Res.TypedArray? a, System.Xml.XmlReader? parser, string? attrName, int resId, int defaultValue) -> int
static AndroidX.Core.Content.Resources.TypedArrayUtils.GetNamedColorStateList(Android.Content.Res.TypedArray? a, System.Xml.XmlReader? parser, Android.Content.Res.Resources.Theme? theme, string? attrName, int resId) -> Android.Content.Res.ColorStateList?
static AndroidX.Core.Content.Resources.TypedArrayUtils.GetNamedComplexColor(Android.Content.Res.TypedArray? a, System.Xml.XmlReader? parser, Android.Content.Res.Resources.Theme? theme, string? attrName, int resId, int defaultValue) -> AndroidX.Core.Content.Resources.ComplexColorCompat?
static AndroidX.Core.Content.Resources.TypedArrayUtils.GetNamedFloat(Android.Content.Res.TypedArray? a, System.Xml.XmlReader? parser, string? attrName, int resId, float defaultValue) -> float
static AndroidX.Core.Content.Resources.TypedArrayUtils.GetNamedInt(Android.Content.Res.TypedArray? a, System.Xml.XmlReader? parser, string? attrName, int resId, int defaultValue) -> int
static AndroidX.Core.Content.Resources.TypedArrayUtils.GetNamedResourceId(Android.Content.Res.TypedArray? a, System.Xml.XmlReader? parser, string? attrName, int resId, int defaultValue) -> int
static AndroidX.Core.Content.Resources.TypedArrayUtils.GetNamedString(Android.Content.Res.TypedArray? a, System.Xml.XmlReader? parser, string? attrName, int resId) -> string?
static AndroidX.Core.Content.Resources.TypedArrayUtils.GetResourceId(Android.Content.Res.TypedArray? a, int index, int fallbackIndex, int defaultValue) -> int
static AndroidX.Core.Content.Resources.TypedArrayUtils.GetString(Android.Content.Res.TypedArray? a, int index, int fallbackIndex) -> string?
static AndroidX.Core.Content.Resources.TypedArrayUtils.GetText(Android.Content.Res.TypedArray? a, int index, int fallbackIndex) -> string?
static AndroidX.Core.Content.Resources.TypedArrayUtils.GetTextArray(Android.Content.Res.TypedArray? a, int index, int fallbackIndex) -> string![]?
static AndroidX.Core.Content.Resources.TypedArrayUtils.GetTextArrayFormatted(Android.Content.Res.TypedArray? a, int index, int fallbackIndex) -> Java.Lang.ICharSequence![]?
static AndroidX.Core.Content.Resources.TypedArrayUtils.GetTextFormatted(Android.Content.Res.TypedArray? a, int index, int fallbackIndex) -> Java.Lang.ICharSequence?
static AndroidX.Core.Content.Resources.TypedArrayUtils.HasAttribute(System.Xml.XmlReader? parser, string? attrName) -> bool
static AndroidX.Core.Content.Resources.TypedArrayUtils.ObtainAttributes(Android.Content.Res.Resources? res, Android.Content.Res.Resources.Theme? theme, Android.Util.IAttributeSet? set, int[]? attrs) -> Android.Content.Res.TypedArray?
static AndroidX.Core.Content.Resources.TypedArrayUtils.PeekNamedValue(Android.Content.Res.TypedArray? a, System.Xml.XmlReader? parser, string? attrName, int resId) -> Android.Util.TypedValue?
static AndroidX.Core.Content.SharedPreferencesCompat.EditorCompat.Instance.get -> AndroidX.Core.Content.SharedPreferencesCompat.EditorCompat?
static AndroidX.Core.Content.UriMatcherCompat.AsPredicate(Android.Content.UriMatcher? matcher) -> AndroidX.Core.Util.IPredicate?
static AndroidX.Core.Database.CursorWindowCompat.Create(string? name, long windowSizeBytes) -> Android.Database.CursorWindow?
static AndroidX.Core.Database.DatabaseUtilsCompat.AppendSelectionArgs(string![]? originalValues, string![]? newValues) -> string![]?
static AndroidX.Core.Database.DatabaseUtilsCompat.ConcatenateWhere(string? a, string? b) -> string?
static AndroidX.Core.Database.SqlLite.SQLiteCursorCompat.SetFillWindowForwardOnly(Android.Database.Sqlite.SQLiteCursor? cursor, bool fillWindowForwardOnly) -> void
static AndroidX.Core.Flagging.AconfigPackageCompat.Companion.get -> AndroidX.Core.Flagging.AconfigPackageCompatCompanion!
static AndroidX.Core.Flagging.AconfigPackageCompat.Load(string! packageName) -> AndroidX.Core.Flagging.IAconfigPackageCompat!
static AndroidX.Core.Flagging.Flags.GetBooleanFlagValue(string! packageName, string! flagName) -> bool
static AndroidX.Core.Flagging.Flags.GetBooleanFlagValue(string! packageName, string! flagName, bool defaultValue) -> bool
static AndroidX.Core.Graphics.BitmapCompat.CreateScaledBitmap(Android.Graphics.Bitmap? srcBm, int dstW, int dstH, Android.Graphics.Rect? srcRect, bool scaleInLinearSpace) -> Android.Graphics.Bitmap?
static AndroidX.Core.Graphics.BitmapCompat.GetAllocationByteCount(Android.Graphics.Bitmap? bitmap) -> int
static AndroidX.Core.Graphics.BitmapCompat.HasMipMap(Android.Graphics.Bitmap? bitmap) -> bool
static AndroidX.Core.Graphics.BitmapCompat.SetHasMipMap(Android.Graphics.Bitmap? bitmap, bool hasMipMap) -> void
static AndroidX.Core.Graphics.BlendModeColorFilterCompat.CreateBlendModeColorFilterCompat(int color, AndroidX.Core.Graphics.BlendModeCompat? blendModeCompat) -> Android.Graphics.ColorFilter?
static AndroidX.Core.Graphics.BlendModeCompat.Clear.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.Color.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.ColorBurn.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.ColorDodge.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.Darken.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.Difference.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.Dst.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.DstAtop.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.DstIn.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.DstOut.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.DstOver.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.Exclusion.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.HardLight.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.Hue.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.Lighten.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.Luminosity.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.Modulate.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.Multiply.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.Overlay.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.Plus.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.Saturation.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.Screen.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.SoftLight.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.Src.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.SrcAtop.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.SrcIn.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.SrcOut.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.SrcOver.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.ValueOf(string? name) -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.BlendModeCompat.Values() -> AndroidX.Core.Graphics.BlendModeCompat![]?
static AndroidX.Core.Graphics.BlendModeCompat.Xor.get -> AndroidX.Core.Graphics.BlendModeCompat?
static AndroidX.Core.Graphics.ColorUtils.BlendARGB(int color1, int color2, float ratio) -> int
static AndroidX.Core.Graphics.ColorUtils.BlendHSL(float[]? hsl1, float[]? hsl2, float ratio, float[]? outResult) -> void
static AndroidX.Core.Graphics.ColorUtils.BlendLAB(double[]? lab1, double[]? lab2, double ratio, double[]? outResult) -> void
static AndroidX.Core.Graphics.ColorUtils.CalculateContrast(int foreground, int background) -> double
static AndroidX.Core.Graphics.ColorUtils.CalculateLuminance(int color) -> double
static AndroidX.Core.Graphics.ColorUtils.CalculateMinimumAlpha(int foreground, int background, float minContrastRatio) -> int
static AndroidX.Core.Graphics.ColorUtils.ColorToHSL(int color, float[]? outHsl) -> void
static AndroidX.Core.Graphics.ColorUtils.ColorToLAB(int color, double[]? outLab) -> void
static AndroidX.Core.Graphics.ColorUtils.ColorToM3HCT(int color, float[]? outM3HCT) -> void
static AndroidX.Core.Graphics.ColorUtils.ColorToXYZ(int color, double[]? outXyz) -> void
static AndroidX.Core.Graphics.ColorUtils.CompositeColors(Android.Graphics.ColorObject? foreground, Android.Graphics.ColorObject? background) -> Android.Graphics.ColorObject?
static AndroidX.Core.Graphics.ColorUtils.CompositeColors(int foreground, int background) -> int
static AndroidX.Core.Graphics.ColorUtils.DistanceEuclidean(double[]? labX, double[]? labY) -> double
static AndroidX.Core.Graphics.ColorUtils.HSLToColor(float[]? hsl) -> int
static AndroidX.Core.Graphics.ColorUtils.LABToColor(double l, double a, double b) -> int
static AndroidX.Core.Graphics.ColorUtils.LABToXYZ(double l, double a, double b, double[]? outXyz) -> void
static AndroidX.Core.Graphics.ColorUtils.M3HCTToColor(float hue, float chroma, float tone) -> int
static AndroidX.Core.Graphics.ColorUtils.RGBToHSL(int r, int g, int b, float[]? outHsl) -> void
static AndroidX.Core.Graphics.ColorUtils.RGBToLAB(int r, int g, int b, double[]? outLab) -> void
static AndroidX.Core.Graphics.ColorUtils.RGBToXYZ(int r, int g, int b, double[]? outXyz) -> void
static AndroidX.Core.Graphics.ColorUtils.SetAlphaComponent(int color, int alpha) -> int
static AndroidX.Core.Graphics.ColorUtils.XYZToColor(double x, double y, double z) -> int
static AndroidX.Core.Graphics.ColorUtils.XYZToLAB(double x, double y, double z, double[]? outLab) -> void
static AndroidX.Core.Graphics.Drawable.DrawableCompat.ApplyTheme(Android.Graphics.Drawables.Drawable? drawable, Android.Content.Res.Resources.Theme? theme) -> void
static AndroidX.Core.Graphics.Drawable.DrawableCompat.CanApplyTheme(Android.Graphics.Drawables.Drawable? drawable) -> bool
static AndroidX.Core.Graphics.Drawable.DrawableCompat.ClearColorFilter(Android.Graphics.Drawables.Drawable? drawable) -> void
static AndroidX.Core.Graphics.Drawable.DrawableCompat.GetAlpha(Android.Graphics.Drawables.Drawable? drawable) -> int
static AndroidX.Core.Graphics.Drawable.DrawableCompat.GetColorFilter(Android.Graphics.Drawables.Drawable? drawable) -> Android.Graphics.ColorFilter?
static AndroidX.Core.Graphics.Drawable.DrawableCompat.GetLayoutDirection(Android.Graphics.Drawables.Drawable? drawable) -> int
static AndroidX.Core.Graphics.Drawable.DrawableCompat.Inflate(Android.Graphics.Drawables.Drawable? drawable, Android.Content.Res.Resources? res, System.Xml.XmlReader? parser, Android.Util.IAttributeSet? attrs, Android.Content.Res.Resources.Theme? theme) -> void
static AndroidX.Core.Graphics.Drawable.DrawableCompat.IsAutoMirrored(Android.Graphics.Drawables.Drawable? drawable) -> bool
static AndroidX.Core.Graphics.Drawable.DrawableCompat.JumpToCurrentState(Android.Graphics.Drawables.Drawable? drawable) -> void
static AndroidX.Core.Graphics.Drawable.DrawableCompat.SetAutoMirrored(Android.Graphics.Drawables.Drawable? drawable, bool mirrored) -> void
static AndroidX.Core.Graphics.Drawable.DrawableCompat.SetHotspot(Android.Graphics.Drawables.Drawable? drawable, float x, float y) -> void
static AndroidX.Core.Graphics.Drawable.DrawableCompat.SetHotspotBounds(Android.Graphics.Drawables.Drawable? drawable, int left, int top, int right, int bottom) -> void
static AndroidX.Core.Graphics.Drawable.DrawableCompat.SetLayoutDirection(Android.Graphics.Drawables.Drawable? drawable, int layoutDirection) -> bool
static AndroidX.Core.Graphics.Drawable.DrawableCompat.SetTint(Android.Graphics.Drawables.Drawable? drawable, int tint) -> void
static AndroidX.Core.Graphics.Drawable.DrawableCompat.SetTintList(Android.Graphics.Drawables.Drawable? drawable, Android.Content.Res.ColorStateList? tint) -> void
static AndroidX.Core.Graphics.Drawable.DrawableCompat.SetTintMode(Android.Graphics.Drawables.Drawable? drawable, Android.Graphics.PorterDuff.Mode? tintMode) -> void
static AndroidX.Core.Graphics.Drawable.DrawableCompat.Unwrap(Android.Graphics.Drawables.Drawable? drawable) -> Java.Lang.Object?
static AndroidX.Core.Graphics.Drawable.DrawableCompat.Wrap(Android.Graphics.Drawables.Drawable? drawable) -> Android.Graphics.Drawables.Drawable?
static AndroidX.Core.Graphics.Drawable.IconCompat.CreateFromBundle(Android.OS.Bundle? bundle) -> AndroidX.Core.Graphics.Drawable.IconCompat?
static AndroidX.Core.Graphics.Drawable.IconCompat.CreateFromIcon(Android.Content.Context? context, Android.Graphics.Drawables.Icon? icon) -> AndroidX.Core.Graphics.Drawable.IconCompat?
static AndroidX.Core.Graphics.Drawable.IconCompat.CreateFromIcon(Android.Graphics.Drawables.Icon? icon) -> AndroidX.Core.Graphics.Drawable.IconCompat?
static AndroidX.Core.Graphics.Drawable.IconCompat.CreateFromIconOrNullIfZeroResId(Android.Graphics.Drawables.Icon? icon) -> AndroidX.Core.Graphics.Drawable.IconCompat?
static AndroidX.Core.Graphics.Drawable.IconCompat.CreateWithAdaptiveBitmap(Android.Graphics.Bitmap? bits) -> AndroidX.Core.Graphics.Drawable.IconCompat?
static AndroidX.Core.Graphics.Drawable.IconCompat.CreateWithAdaptiveBitmapContentUri(Android.Net.Uri? uri) -> AndroidX.Core.Graphics.Drawable.IconCompat?
static AndroidX.Core.Graphics.Drawable.IconCompat.CreateWithAdaptiveBitmapContentUri(string? uri) -> AndroidX.Core.Graphics.Drawable.IconCompat?
static AndroidX.Core.Graphics.Drawable.IconCompat.CreateWithBitmap(Android.Graphics.Bitmap? bits) -> AndroidX.Core.Graphics.Drawable.IconCompat?
static AndroidX.Core.Graphics.Drawable.IconCompat.CreateWithContentUri(Android.Net.Uri? uri) -> AndroidX.Core.Graphics.Drawable.IconCompat?
static AndroidX.Core.Graphics.Drawable.IconCompat.CreateWithContentUri(string? uri) -> AndroidX.Core.Graphics.Drawable.IconCompat?
static AndroidX.Core.Graphics.Drawable.IconCompat.CreateWithData(byte[]? data, int offset, int length) -> AndroidX.Core.Graphics.Drawable.IconCompat?
static AndroidX.Core.Graphics.Drawable.IconCompat.CreateWithResource(Android.Content.Context? context, int resId) -> AndroidX.Core.Graphics.Drawable.IconCompat?
static AndroidX.Core.Graphics.Drawable.IconCompat.CreateWithResource(Android.Content.Res.Resources? r, string? pkg, int resId) -> AndroidX.Core.Graphics.Drawable.IconCompat?
static AndroidX.Core.Graphics.Drawable.IconCompatParcelizer.Read(AndroidX.VersionedParcelable.VersionedParcel? parcel) -> AndroidX.Core.Graphics.Drawable.IconCompat?
static AndroidX.Core.Graphics.Drawable.IconCompatParcelizer.Write(AndroidX.Core.Graphics.Drawable.IconCompat? obj, AndroidX.VersionedParcelable.VersionedParcel? parcel) -> void
static AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawableFactory.Create(Android.Content.Res.Resources? res, Android.Graphics.Bitmap? bitmap) -> AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable?
static AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawableFactory.Create(Android.Content.Res.Resources? res, System.IO.Stream? is) -> AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable?
static AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawableFactory.Create(Android.Content.Res.Resources? res, string? filepath) -> AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable?
static AndroidX.Core.Graphics.Insets.Add(AndroidX.Core.Graphics.Insets? a, AndroidX.Core.Graphics.Insets? b) -> AndroidX.Core.Graphics.Insets?
static AndroidX.Core.Graphics.Insets.Max(AndroidX.Core.Graphics.Insets? a, AndroidX.Core.Graphics.Insets? b) -> AndroidX.Core.Graphics.Insets?
static AndroidX.Core.Graphics.Insets.Min(AndroidX.Core.Graphics.Insets? a, AndroidX.Core.Graphics.Insets? b) -> AndroidX.Core.Graphics.Insets?
static AndroidX.Core.Graphics.Insets.None.get -> AndroidX.Core.Graphics.Insets?
static AndroidX.Core.Graphics.Insets.Of(Android.Graphics.Rect? r) -> AndroidX.Core.Graphics.Insets?
static AndroidX.Core.Graphics.Insets.Of(int left, int top, int right, int bottom) -> AndroidX.Core.Graphics.Insets?
static AndroidX.Core.Graphics.Insets.Subtract(AndroidX.Core.Graphics.Insets? a, AndroidX.Core.Graphics.Insets? b) -> AndroidX.Core.Graphics.Insets?
static AndroidX.Core.Graphics.Insets.ToCompatInsets(Android.Graphics.Insets? insets) -> AndroidX.Core.Graphics.Insets?
static AndroidX.Core.Graphics.Insets.Wrap(Android.Graphics.Insets? insets) -> AndroidX.Core.Graphics.Insets?
static AndroidX.Core.Graphics.PaintCompat.HasGlyph(Android.Graphics.Paint? paint, string? string) -> bool
static AndroidX.Core.Graphics.PaintCompat.SetBlendMode(Android.Graphics.Paint? paint, AndroidX.Core.Graphics.BlendModeCompat? blendMode) -> bool
static AndroidX.Core.Graphics.PathParser.CanMorph(AndroidX.Core.Graphics.PathParser.PathDataNode![]? nodesFrom, AndroidX.Core.Graphics.PathParser.PathDataNode![]? nodesTo) -> bool
static AndroidX.Core.Graphics.PathParser.CreateNodesFromPathData(string? pathData) -> AndroidX.Core.Graphics.PathParser.PathDataNode![]?
static AndroidX.Core.Graphics.PathParser.CreatePathFromPathData(string? pathData) -> Android.Graphics.Path?
static AndroidX.Core.Graphics.PathParser.DeepCopyNodes(AndroidX.Core.Graphics.PathParser.PathDataNode![]? source) -> AndroidX.Core.Graphics.PathParser.PathDataNode![]?
static AndroidX.Core.Graphics.PathParser.InterpolatePathDataNodes(AndroidX.Core.Graphics.PathParser.PathDataNode![]? target, AndroidX.Core.Graphics.PathParser.PathDataNode![]? from, AndroidX.Core.Graphics.PathParser.PathDataNode![]? to, float fraction) -> bool
static AndroidX.Core.Graphics.PathParser.InterpolatePathDataNodes(AndroidX.Core.Graphics.PathParser.PathDataNode![]? target, float fraction, AndroidX.Core.Graphics.PathParser.PathDataNode![]? from, AndroidX.Core.Graphics.PathParser.PathDataNode![]? to) -> void
static AndroidX.Core.Graphics.PathParser.NodesToPath(AndroidX.Core.Graphics.PathParser.PathDataNode![]? node, Android.Graphics.Path? path) -> void
static AndroidX.Core.Graphics.PathParser.PathDataNode.NodesToPath(AndroidX.Core.Graphics.PathParser.PathDataNode![]? node, Android.Graphics.Path? path) -> void
static AndroidX.Core.Graphics.PathParser.UpdateNodes(AndroidX.Core.Graphics.PathParser.PathDataNode![]? target, AndroidX.Core.Graphics.PathParser.PathDataNode![]? source) -> void
static AndroidX.Core.Graphics.PathUtils.Flatten(Android.Graphics.Path? path) -> System.Collections.Generic.ICollection<AndroidX.Core.Graphics.PathSegment!>?
static AndroidX.Core.Graphics.PathUtils.Flatten(Android.Graphics.Path? path, float error) -> System.Collections.Generic.ICollection<AndroidX.Core.Graphics.PathSegment!>?
static AndroidX.Core.Graphics.TypefaceCompat.ClearCache() -> void
static AndroidX.Core.Graphics.TypefaceCompat.Create(Android.Content.Context? context, Android.Graphics.Typeface? family, int style) -> Android.Graphics.Typeface?
static AndroidX.Core.Graphics.TypefaceCompat.Create(Android.Content.Context? context, Android.Graphics.Typeface? family, int weight, bool italic) -> Android.Graphics.Typeface?
static AndroidX.Core.Graphics.TypefaceCompat.CreateFromFontInfo(Android.Content.Context? context, Android.OS.CancellationSignal? cancellationSignal, AndroidX.Core.Provider.FontsContractCompat.FontInfo![]? fonts, int style) -> Android.Graphics.Typeface?
static AndroidX.Core.Graphics.TypefaceCompat.CreateFromFontInfoWithFallback(Android.Content.Context? context, Android.OS.CancellationSignal? cancellationSignal, System.Collections.Generic.IList<AndroidX.Core.Provider.FontsContractCompat.FontInfo![]!>? fonts, int style) -> Android.Graphics.Typeface?
static AndroidX.Core.Graphics.TypefaceCompat.CreateFromResourcesFamilyXml(Android.Content.Context? context, AndroidX.Core.Content.Resources.FontResourcesParserCompat.IFamilyResourceEntry? entry, Android.Content.Res.Resources? resources, int id, int style, AndroidX.Core.Content.Resources.ResourcesCompat.FontCallback? fontCallback, Android.OS.Handler? handler, bool isRequestFromLayoutInflator) -> Android.Graphics.Typeface?
static AndroidX.Core.Graphics.TypefaceCompat.CreateFromResourcesFamilyXml(Android.Content.Context? context, AndroidX.Core.Content.Resources.FontResourcesParserCompat.IFamilyResourceEntry? entry, Android.Content.Res.Resources? resources, int id, string? path, int cookie, int style, AndroidX.Core.Content.Resources.ResourcesCompat.FontCallback? fontCallback, Android.OS.Handler? handler, bool isRequestFromLayoutInflator) -> Android.Graphics.Typeface?
static AndroidX.Core.Graphics.TypefaceCompat.CreateFromResourcesFontFile(Android.Content.Context? context, Android.Content.Res.Resources? resources, int id, string? path, int cookie, int style) -> Android.Graphics.Typeface?
static AndroidX.Core.Graphics.TypefaceCompat.CreateFromResourcesFontFile(Android.Content.Context? context, Android.Content.Res.Resources? resources, int id, string? path, int style) -> Android.Graphics.Typeface?
static AndroidX.Core.Graphics.TypefaceCompat.FindFromCache(Android.Content.Res.Resources? resources, int id, int style) -> Android.Graphics.Typeface?
static AndroidX.Core.Graphics.TypefaceCompat.FindFromCache(Android.Content.Res.Resources? resources, int id, string? path, int cookie, int style) -> Android.Graphics.Typeface?
static AndroidX.Core.Graphics.TypefaceCompat.GetSystemFontFamily(string? familyName) -> Android.Graphics.Typeface?
static AndroidX.Core.Graphics.TypefaceCompat.GuessPrimaryFont(Android.Graphics.Typeface? typeface) -> Android.Graphics.Fonts.Font?
static AndroidX.Core.Graphics.TypefaceCompatUtil.CloseQuietly(Java.IO.ICloseable? c) -> void
static AndroidX.Core.Graphics.TypefaceCompatUtil.CopyToDirectBuffer(Android.Content.Context? context, Android.Content.Res.Resources? res, int id) -> Java.Nio.ByteBuffer?
static AndroidX.Core.Graphics.TypefaceCompatUtil.CopyToFile(Java.IO.File? file, Android.Content.Res.Resources? res, int id) -> bool
static AndroidX.Core.Graphics.TypefaceCompatUtil.CopyToFile(Java.IO.File? file, System.IO.Stream? is) -> bool
static AndroidX.Core.Graphics.TypefaceCompatUtil.GetTempFile(Android.Content.Context? context) -> Java.IO.File?
static AndroidX.Core.Graphics.TypefaceCompatUtil.Mmap(Android.Content.Context? context, Android.OS.CancellationSignal? cancellationSignal, Android.Net.Uri? uri) -> Java.Nio.ByteBuffer?
static AndroidX.Core.Graphics.TypefaceCompatUtil.ReadFontInfoIntoByteBuffer(Android.Content.Context? context, AndroidX.Core.Provider.FontsContractCompat.FontInfo![]? fonts, Android.OS.CancellationSignal? cancellationSignal) -> System.Collections.Generic.IDictionary<Android.Net.Uri!, Java.Nio.ByteBuffer!>?
static AndroidX.Core.Hardware.Display.DisplayManagerCompat.GetInstance(Android.Content.Context? context) -> AndroidX.Core.Hardware.Display.DisplayManagerCompat?
static AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.From(Android.Content.Context? context) -> AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat?
static AndroidX.Core.Internal.View.ISupportMenuItemExtensions.SetContentDescription(this AndroidX.Core.Internal.View.ISupportMenuItem! self, string? contentDescription) -> AndroidX.Core.Internal.View.ISupportMenuItem?
static AndroidX.Core.Internal.View.ISupportMenuItemExtensions.SetTooltipText(this AndroidX.Core.Internal.View.ISupportMenuItem! self, string? tooltipText) -> AndroidX.Core.Internal.View.ISupportMenuItem?
static AndroidX.Core.Location.GnssStatusCompat.Wrap(Android.Locations.GnssStatus? gnssStatus) -> AndroidX.Core.Location.GnssStatusCompat?
static AndroidX.Core.Location.GnssStatusCompat.Wrap(Android.Locations.GpsStatus? gpsStatus) -> AndroidX.Core.Location.GnssStatusCompat?
static AndroidX.Core.Location.LocationCompat.GetBearingAccuracyDegrees(Android.Locations.Location? location) -> float
static AndroidX.Core.Location.LocationCompat.GetElapsedRealtimeMillis(Android.Locations.Location? location) -> long
static AndroidX.Core.Location.LocationCompat.GetElapsedRealtimeNanos(Android.Locations.Location? location) -> long
static AndroidX.Core.Location.LocationCompat.GetMslAltitudeAccuracyMeters(Android.Locations.Location? location) -> float
static AndroidX.Core.Location.LocationCompat.GetMslAltitudeMeters(Android.Locations.Location? location) -> double
static AndroidX.Core.Location.LocationCompat.GetSpeedAccuracyMetersPerSecond(Android.Locations.Location? location) -> float
static AndroidX.Core.Location.LocationCompat.GetVerticalAccuracyMeters(Android.Locations.Location? location) -> float
static AndroidX.Core.Location.LocationCompat.HasBearingAccuracy(Android.Locations.Location? location) -> bool
static AndroidX.Core.Location.LocationCompat.HasMslAltitude(Android.Locations.Location? location) -> bool
static AndroidX.Core.Location.LocationCompat.HasMslAltitudeAccuracy(Android.Locations.Location? location) -> bool
static AndroidX.Core.Location.LocationCompat.HasSpeedAccuracy(Android.Locations.Location? location) -> bool
static AndroidX.Core.Location.LocationCompat.HasVerticalAccuracy(Android.Locations.Location? location) -> bool
static AndroidX.Core.Location.LocationCompat.IsMock(Android.Locations.Location? location) -> bool
static AndroidX.Core.Location.LocationCompat.RemoveBearingAccuracy(Android.Locations.Location? location) -> void
static AndroidX.Core.Location.LocationCompat.RemoveMslAltitude(Android.Locations.Location? location) -> void
static AndroidX.Core.Location.LocationCompat.RemoveMslAltitudeAccuracy(Android.Locations.Location? location) -> void
static AndroidX.Core.Location.LocationCompat.RemoveSpeedAccuracy(Android.Locations.Location? location) -> void
static AndroidX.Core.Location.LocationCompat.RemoveVerticalAccuracy(Android.Locations.Location? location) -> void
static AndroidX.Core.Location.LocationCompat.SetBearingAccuracyDegrees(Android.Locations.Location? location, float bearingAccuracyD) -> void
static AndroidX.Core.Location.LocationCompat.SetMock(Android.Locations.Location? location, bool mock) -> void
static AndroidX.Core.Location.LocationCompat.SetMslAltitudeAccuracyMeters(Android.Locations.Location? location, float mslAltitudeAccuracyMeters) -> void
static AndroidX.Core.Location.LocationCompat.SetMslAltitudeMeters(Android.Locations.Location? location, double mslAltitudeMeters) -> void
static AndroidX.Core.Location.LocationCompat.SetSpeedAccuracyMetersPerSecond(Android.Locations.Location? location, float speedAccuracyMps) -> void
static AndroidX.Core.Location.LocationCompat.SetVerticalAccuracyMeters(Android.Locations.Location? location, float verticalAccuracyM) -> void
static AndroidX.Core.Location.LocationManagerCompat.GetCurrentLocation(Android.Locations.LocationManager? locationManager, string? provider, Android.OS.CancellationSignal? cancellationSignal, Java.Util.Concurrent.IExecutor? executor, AndroidX.Core.Util.IConsumer? consumer) -> void
static AndroidX.Core.Location.LocationManagerCompat.GetCurrentLocation(Android.Locations.LocationManager? locationManager, string? provider, AndroidX.Core.OS.CancellationSignal? cancellationSignal, Java.Util.Concurrent.IExecutor? executor, AndroidX.Core.Util.IConsumer? consumer) -> void
static AndroidX.Core.Location.LocationManagerCompat.GetGnssHardwareModelName(Android.Locations.LocationManager? locationManager) -> string?
static AndroidX.Core.Location.LocationManagerCompat.GetGnssYearOfHardware(Android.Locations.LocationManager? locationManager) -> int
static AndroidX.Core.Location.LocationManagerCompat.HasProvider(Android.Locations.LocationManager? locationManager, string? provider) -> bool
static AndroidX.Core.Location.LocationManagerCompat.IsLocationEnabled(Android.Locations.LocationManager? locationManager) -> bool
static AndroidX.Core.Location.LocationManagerCompat.RegisterGnssMeasurementsCallback(Android.Locations.LocationManager? locationManager, Android.Locations.GnssMeasurementsEvent.Callback? callback, Android.OS.Handler? handler) -> bool
static AndroidX.Core.Location.LocationManagerCompat.RegisterGnssMeasurementsCallback(Android.Locations.LocationManager? locationManager, Java.Util.Concurrent.IExecutor? executor, Android.Locations.GnssMeasurementsEvent.Callback? callback) -> bool
static AndroidX.Core.Location.LocationManagerCompat.RegisterGnssStatusCallback(Android.Locations.LocationManager? locationManager, AndroidX.Core.Location.GnssStatusCompat.Callback? callback, Android.OS.Handler? handler) -> bool
static AndroidX.Core.Location.LocationManagerCompat.RegisterGnssStatusCallback(Android.Locations.LocationManager? locationManager, Java.Util.Concurrent.IExecutor? executor, AndroidX.Core.Location.GnssStatusCompat.Callback? callback) -> bool
static AndroidX.Core.Location.LocationManagerCompat.RemoveUpdates(Android.Locations.LocationManager? locationManager, AndroidX.Core.Location.ILocationListenerCompat? listener) -> void
static AndroidX.Core.Location.LocationManagerCompat.RequestLocationUpdates(Android.Locations.LocationManager? locationManager, string? provider, AndroidX.Core.Location.LocationRequestCompat? locationRequest, AndroidX.Core.Location.ILocationListenerCompat? listener, Android.OS.Looper? looper) -> void
static AndroidX.Core.Location.LocationManagerCompat.RequestLocationUpdates(Android.Locations.LocationManager? locationManager, string? provider, AndroidX.Core.Location.LocationRequestCompat? locationRequest, Java.Util.Concurrent.IExecutor? executor, AndroidX.Core.Location.ILocationListenerCompat? listener) -> void
static AndroidX.Core.Location.LocationManagerCompat.UnregisterGnssMeasurementsCallback(Android.Locations.LocationManager? locationManager, Android.Locations.GnssMeasurementsEvent.Callback? callback) -> void
static AndroidX.Core.Location.LocationManagerCompat.UnregisterGnssStatusCallback(Android.Locations.LocationManager? locationManager, AndroidX.Core.Location.GnssStatusCompat.Callback? callback) -> void
static AndroidX.Core.Math.MathUtils.AddExact(int x, int y) -> int
static AndroidX.Core.Math.MathUtils.AddExact(long x, long y) -> long
static AndroidX.Core.Math.MathUtils.Clamp(double value, double min, double max) -> double
static AndroidX.Core.Math.MathUtils.Clamp(float value, float min, float max) -> float
static AndroidX.Core.Math.MathUtils.Clamp(int value, int min, int max) -> int
static AndroidX.Core.Math.MathUtils.Clamp(long value, long min, long max) -> long
static AndroidX.Core.Math.MathUtils.DecrementExact(int a) -> int
static AndroidX.Core.Math.MathUtils.DecrementExact(long a) -> long
static AndroidX.Core.Math.MathUtils.IncrementExact(int a) -> int
static AndroidX.Core.Math.MathUtils.IncrementExact(long a) -> long
static AndroidX.Core.Math.MathUtils.MultiplyExact(int x, int y) -> int
static AndroidX.Core.Math.MathUtils.MultiplyExact(long x, long y) -> long
static AndroidX.Core.Math.MathUtils.NegateExact(int a) -> int
static AndroidX.Core.Math.MathUtils.NegateExact(long a) -> long
static AndroidX.Core.Math.MathUtils.SubtractExact(int x, int y) -> int
static AndroidX.Core.Math.MathUtils.SubtractExact(long x, long y) -> long
static AndroidX.Core.Math.MathUtils.ToIntExact(long value) -> int
static AndroidX.Core.Net.ConnectivityManagerCompat.GetNetworkInfoFromBroadcast(Android.Net.ConnectivityManager? cm, Android.Content.Intent? intent) -> Android.Net.NetworkInfo?
static AndroidX.Core.Net.ConnectivityManagerCompat.GetRestrictBackgroundStatus(Android.Net.ConnectivityManager? cm) -> int
static AndroidX.Core.Net.ConnectivityManagerCompat.IsActiveNetworkMetered(Android.Net.ConnectivityManager? cm) -> bool
static AndroidX.Core.Net.MailTo.IsMailTo(Android.Net.Uri? uri) -> bool
static AndroidX.Core.Net.MailTo.IsMailTo(string? uri) -> bool
static AndroidX.Core.Net.MailTo.Parse(Android.Net.Uri? uri) -> AndroidX.Core.Net.MailTo?
static AndroidX.Core.Net.MailTo.Parse(string? uri) -> AndroidX.Core.Net.MailTo?
static AndroidX.Core.Net.TrafficStatsCompat.ClearThreadStatsTag() -> void
static AndroidX.Core.Net.TrafficStatsCompat.IncrementOperationCount(int operationCount) -> void
static AndroidX.Core.Net.TrafficStatsCompat.IncrementOperationCount(int tag, int operationCount) -> void
static AndroidX.Core.Net.TrafficStatsCompat.TagDatagramSocket(Java.Net.DatagramSocket? socket) -> void
static AndroidX.Core.Net.TrafficStatsCompat.TagSocket(Java.Net.Socket? socket) -> void
static AndroidX.Core.Net.TrafficStatsCompat.ThreadStatsTag.get -> int
static AndroidX.Core.Net.TrafficStatsCompat.ThreadStatsTag.set -> void
static AndroidX.Core.Net.TrafficStatsCompat.UntagDatagramSocket(Java.Net.DatagramSocket? socket) -> void
static AndroidX.Core.Net.TrafficStatsCompat.UntagSocket(Java.Net.Socket? socket) -> void
static AndroidX.Core.Net.UriCompat.ToSafeString(Android.Net.Uri? uri) -> string?
static AndroidX.Core.OS.BufferFillPolicy.Discard.get -> AndroidX.Core.OS.BufferFillPolicy!
static AndroidX.Core.OS.BufferFillPolicy.RingBuffer.get -> AndroidX.Core.OS.BufferFillPolicy!
static AndroidX.Core.OS.BuildCompat.AdServicesExtensionInt.get -> int
static AndroidX.Core.OS.BuildCompat.Instance.get -> AndroidX.Core.OS.BuildCompat!
static AndroidX.Core.OS.BuildCompat.IsAtLeastB.get -> bool
static AndroidX.Core.OS.BuildCompat.IsAtLeastN.get -> bool
static AndroidX.Core.OS.BuildCompat.IsAtLeastNMR1.get -> bool
static AndroidX.Core.OS.BuildCompat.IsAtLeastO.get -> bool
static AndroidX.Core.OS.BuildCompat.IsAtLeastOMR1.get -> bool
static AndroidX.Core.OS.BuildCompat.IsAtLeastP.get -> bool
static AndroidX.Core.OS.BuildCompat.IsAtLeastPreReleaseCodename(string! codename, string! buildCodename) -> bool
static AndroidX.Core.OS.BuildCompat.IsAtLeastQ.get -> bool
static AndroidX.Core.OS.BuildCompat.IsAtLeastR.get -> bool
static AndroidX.Core.OS.BuildCompat.IsAtLeastS.get -> bool
static AndroidX.Core.OS.BuildCompat.IsAtLeastSv2.get -> bool
static AndroidX.Core.OS.BuildCompat.IsAtLeastT.get -> bool
static AndroidX.Core.OS.BuildCompat.IsAtLeastU.get -> bool
static AndroidX.Core.OS.BuildCompat.IsAtLeastV.get -> bool
static AndroidX.Core.OS.BuildCompat.RExtensionInt.get -> int
static AndroidX.Core.OS.BuildCompat.SExtensionInt.get -> int
static AndroidX.Core.OS.BuildCompat.TExtensionInt.get -> int
static AndroidX.Core.OS.BundleCompat.GetBinder(Android.OS.Bundle? bundle, string? key) -> Android.OS.IBinder?
static AndroidX.Core.OS.BundleCompat.GetParcelable(Android.OS.Bundle? in, string? key, Java.Lang.Class? clazz) -> Java.Lang.Object?
static AndroidX.Core.OS.BundleCompat.GetParcelableArray(Android.OS.Bundle? in, string? key, Java.Lang.Class? clazz) -> Android.OS.IParcelable![]?
static AndroidX.Core.OS.BundleCompat.GetParcelableArrayList(Android.OS.Bundle? in, string? key, Java.Lang.Class? clazz) -> System.Collections.IList?
static AndroidX.Core.OS.BundleCompat.GetSerializable(Android.OS.Bundle? in, string? key, Java.Lang.Class? clazz) -> Java.Lang.Object?
static AndroidX.Core.OS.BundleCompat.GetSparseParcelableArray(Android.OS.Bundle? in, string? key, Java.Lang.Class? clazz) -> Android.Util.SparseArray?
static AndroidX.Core.OS.BundleCompat.PutBinder(Android.OS.Bundle? bundle, string? key, Android.OS.IBinder? binder) -> void
static AndroidX.Core.OS.ConfigurationCompat.GetLocales(Android.Content.Res.Configuration? configuration) -> AndroidX.Core.OS.LocaleListCompat?
static AndroidX.Core.OS.ConfigurationCompat.SetLocales(Android.Content.Res.Configuration? configuration, AndroidX.Core.OS.LocaleListCompat? locales) -> void
static AndroidX.Core.OS.EnvironmentCompat.GetStorageState(Java.IO.File? path) -> string?
static AndroidX.Core.OS.ExecutorCompat.Create(Android.OS.Handler? handler) -> Java.Util.Concurrent.IExecutor?
static AndroidX.Core.OS.HandlerCompat.CreateAsync(Android.OS.Looper? looper) -> Android.OS.Handler?
static AndroidX.Core.OS.HandlerCompat.CreateAsync(Android.OS.Looper? looper, Android.OS.Handler.ICallback? callback) -> Android.OS.Handler?
static AndroidX.Core.OS.HandlerCompat.HasCallbacks(Android.OS.Handler? handler, Java.Lang.IRunnable? r) -> bool
static AndroidX.Core.OS.HandlerCompat.PostDelayed(Android.OS.Handler? handler, Java.Lang.IRunnable? r, Java.Lang.Object? token, long delayMillis) -> bool
static AndroidX.Core.OS.LocaleListCompat.AdjustedDefault.get -> AndroidX.Core.OS.LocaleListCompat?
static AndroidX.Core.OS.LocaleListCompat.Create(params Java.Util.Locale![]? localeList) -> AndroidX.Core.OS.LocaleListCompat?
static AndroidX.Core.OS.LocaleListCompat.Default.get -> AndroidX.Core.OS.LocaleListCompat?
static AndroidX.Core.OS.LocaleListCompat.EmptyLocaleList.get -> AndroidX.Core.OS.LocaleListCompat?
static AndroidX.Core.OS.LocaleListCompat.ForLanguageTags(string? list) -> AndroidX.Core.OS.LocaleListCompat?
static AndroidX.Core.OS.LocaleListCompat.MatchesLanguageAndScript(Java.Util.Locale? supported, Java.Util.Locale? desired) -> bool
static AndroidX.Core.OS.LocaleListCompat.Wrap(Android.OS.LocaleList? localeList) -> AndroidX.Core.OS.LocaleListCompat?
static AndroidX.Core.OS.LocaleListCompat.Wrap(Java.Lang.Object? localeList) -> AndroidX.Core.OS.LocaleListCompat?
static AndroidX.Core.OS.MessageCompat.IsAsynchronous(Android.OS.Message? message) -> bool
static AndroidX.Core.OS.MessageCompat.SetAsynchronous(Android.OS.Message? message, bool async) -> void
static AndroidX.Core.OS.ParcelCompat.ReadArray(Android.OS.Parcel? in, Java.Lang.ClassLoader? loader, Java.Lang.Class? clazz) -> Java.Lang.Object![]?
static AndroidX.Core.OS.ParcelCompat.ReadArrayList(Android.OS.Parcel? in, Java.Lang.ClassLoader? loader, Java.Lang.Class? clazz) -> System.Collections.IList?
static AndroidX.Core.OS.ParcelCompat.ReadBoolean(Android.OS.Parcel? in) -> bool
static AndroidX.Core.OS.ParcelCompat.ReadHashMap(Android.OS.Parcel? in, Java.Lang.ClassLoader? loader, Java.Lang.Class? clazzKey, Java.Lang.Class? clazzValue) -> System.Collections.IDictionary?
static AndroidX.Core.OS.ParcelCompat.ReadList(Android.OS.Parcel? in, System.Collections.IList? outVal, Java.Lang.ClassLoader? loader, Java.Lang.Class? clazz) -> void
static AndroidX.Core.OS.ParcelCompat.ReadMap(Android.OS.Parcel? in, System.Collections.IDictionary? outVal, Java.Lang.ClassLoader? loader, Java.Lang.Class? clazzKey, Java.Lang.Class? clazzValue) -> void
static AndroidX.Core.OS.ParcelCompat.ReadParcelable(Android.OS.Parcel? in, Java.Lang.ClassLoader? loader, Java.Lang.Class? clazz) -> Java.Lang.Object?
static AndroidX.Core.OS.ParcelCompat.ReadParcelableArray(Android.OS.Parcel? in, Java.Lang.ClassLoader? loader, Java.Lang.Class? clazz) -> Java.Lang.Object![]?
static AndroidX.Core.OS.ParcelCompat.ReadParcelableArrayTyped(Android.OS.Parcel? in, Java.Lang.ClassLoader? loader, Java.Lang.Class? clazz) -> Android.OS.IParcelable![]?
static AndroidX.Core.OS.ParcelCompat.ReadParcelableCreator(Android.OS.Parcel? in, Java.Lang.ClassLoader? loader, Java.Lang.Class? clazz) -> Android.OS.IParcelableCreator?
static AndroidX.Core.OS.ParcelCompat.ReadParcelableList(Android.OS.Parcel? in, System.Collections.IList? list, Java.Lang.ClassLoader? cl, Java.Lang.Class? clazz) -> System.Collections.IList?
static AndroidX.Core.OS.ParcelCompat.ReadSerializable(Android.OS.Parcel? in, Java.Lang.ClassLoader? loader, Java.Lang.Class? clazz) -> Java.Lang.Object?
static AndroidX.Core.OS.ParcelCompat.ReadSparseArray(Android.OS.Parcel? in, Java.Lang.ClassLoader? loader, Java.Lang.Class? clazz) -> Android.Util.SparseArray?
static AndroidX.Core.OS.ParcelCompat.WriteBoolean(Android.OS.Parcel? out, bool value) -> void
static AndroidX.Core.OS.ParcelableCompat.NewCreator(AndroidX.Core.OS.IParcelableCompatCreatorCallbacks? callbacks) -> Android.OS.IParcelableCreator?
static AndroidX.Core.OS.ProcessCompat.IsApplicationUid(int uid) -> bool
static AndroidX.Core.OS.Profiling.RegisterForAllProfilingResults(Android.Content.Context! context) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static AndroidX.Core.OS.Profiling.RegisterForAllProfilingResults(Android.Content.Context! context, Java.Util.Concurrent.IExecutor! executor, Java.Util.Functions.IConsumer! listener) -> void
static AndroidX.Core.OS.Profiling.RequestProfiling(Android.Content.Context! context, AndroidX.Core.OS.ProfilingRequest! profilingRequest, Java.Util.Concurrent.IExecutor? executor, Java.Util.Functions.IConsumer? listener) -> void
static AndroidX.Core.OS.Profiling.UnregisterForAllProfilingResults(Android.Content.Context! context, Java.Util.Functions.IConsumer! listener) -> void
static AndroidX.Core.OS.TraceCompat.BeginAsyncSection(string? methodName, int cookie) -> void
static AndroidX.Core.OS.TraceCompat.BeginSection(string? sectionName) -> void
static AndroidX.Core.OS.TraceCompat.EndAsyncSection(string? methodName, int cookie) -> void
static AndroidX.Core.OS.TraceCompat.EndSection() -> void
static AndroidX.Core.OS.TraceCompat.IsEnabled.get -> bool
static AndroidX.Core.OS.TraceCompat.SetCounter(string? counterName, int counterValue) -> void
static AndroidX.Core.OS.UserHandleCompat.GetUserHandleForUid(int uid) -> Android.OS.UserHandle?
static AndroidX.Core.OS.UserManagerCompat.IsUserUnlocked(Android.Content.Context? context) -> bool
static AndroidX.Core.Provider.DocumentsContractCompat.BuildChildDocumentsUri(string? authority, string? parentDocumentId) -> Android.Net.Uri?
static AndroidX.Core.Provider.DocumentsContractCompat.BuildChildDocumentsUriUsingTree(Android.Net.Uri? treeUri, string? parentDocumentId) -> Android.Net.Uri?
static AndroidX.Core.Provider.DocumentsContractCompat.BuildDocumentUri(string? authority, string? documentId) -> Android.Net.Uri?
static AndroidX.Core.Provider.DocumentsContractCompat.BuildDocumentUriUsingTree(Android.Net.Uri? treeUri, string? documentId) -> Android.Net.Uri?
static AndroidX.Core.Provider.DocumentsContractCompat.BuildTreeDocumentUri(string? authority, string? documentId) -> Android.Net.Uri?
static AndroidX.Core.Provider.DocumentsContractCompat.CreateDocument(Android.Content.ContentResolver? content, Android.Net.Uri? parentDocumentUri, string? mimeType, string? displayName) -> Android.Net.Uri?
static AndroidX.Core.Provider.DocumentsContractCompat.GetDocumentId(Android.Net.Uri? documentUri) -> string?
static AndroidX.Core.Provider.DocumentsContractCompat.GetTreeDocumentId(Android.Net.Uri? documentUri) -> string?
static AndroidX.Core.Provider.DocumentsContractCompat.IsDocumentUri(Android.Content.Context? context, Android.Net.Uri? uri) -> bool
static AndroidX.Core.Provider.DocumentsContractCompat.IsTreeUri(Android.Net.Uri? uri) -> bool
static AndroidX.Core.Provider.DocumentsContractCompat.RemoveDocument(Android.Content.ContentResolver? content, Android.Net.Uri? documentUri, Android.Net.Uri? parentDocumentUri) -> bool
static AndroidX.Core.Provider.DocumentsContractCompat.RenameDocument(Android.Content.ContentResolver? content, Android.Net.Uri? documentUri, string? displayName) -> Android.Net.Uri?
static AndroidX.Core.Provider.FontsContractCompat.BuildTypeface(Android.Content.Context? context, Android.OS.CancellationSignal? cancellationSignal, AndroidX.Core.Provider.FontsContractCompat.FontInfo![]? fonts) -> Android.Graphics.Typeface?
static AndroidX.Core.Provider.FontsContractCompat.FetchFonts(Android.Content.Context? context, Android.OS.CancellationSignal? cancellationSignal, AndroidX.Core.Provider.FontRequest? request) -> AndroidX.Core.Provider.FontsContractCompat.FontFamilyResult?
static AndroidX.Core.Provider.FontsContractCompat.GetFontSync(Android.Content.Context? context, AndroidX.Core.Provider.FontRequest? request, AndroidX.Core.Content.Resources.ResourcesCompat.FontCallback? fontCallback, Android.OS.Handler? handler, bool isBlockingFetch, int timeout, int style) -> Android.Graphics.Typeface?
static AndroidX.Core.Provider.FontsContractCompat.GetProvider(Android.Content.PM.PackageManager? packageManager, AndroidX.Core.Provider.FontRequest? request, Android.Content.Res.Resources? resources) -> Android.Content.PM.ProviderInfo?
static AndroidX.Core.Provider.FontsContractCompat.PrepareFontData(Android.Content.Context? context, AndroidX.Core.Provider.FontsContractCompat.FontInfo![]? fonts, Android.OS.CancellationSignal? cancellationSignal) -> System.Collections.Generic.IDictionary<Android.Net.Uri!, Java.Nio.ByteBuffer!>?
static AndroidX.Core.Provider.FontsContractCompat.RequestFont(Android.Content.Context? context, AndroidX.Core.Provider.FontRequest? request, AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback? callback, Android.OS.Handler? handler) -> void
static AndroidX.Core.Provider.FontsContractCompat.RequestFont(Android.Content.Context? context, AndroidX.Core.Provider.FontRequest? request, int style, Java.Util.Concurrent.IExecutor? loadingExecutor, Java.Util.Concurrent.IExecutor? callbackExecutor, AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback? callback) -> void
static AndroidX.Core.Provider.FontsContractCompat.RequestFont(Android.Content.Context? context, AndroidX.Core.Provider.FontRequest? request, int style, bool isBlockingFetch, int timeout, Android.OS.Handler? handler, AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback? callback) -> Android.Graphics.Typeface?
static AndroidX.Core.Provider.FontsContractCompat.RequestFont(Android.Content.Context? context, System.Collections.Generic.IList<AndroidX.Core.Provider.FontRequest!>? requests, int style, bool isBlockingFetch, int timeout, Android.OS.Handler? handler, AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback? callback) -> Android.Graphics.Typeface?
static AndroidX.Core.Provider.FontsContractCompat.RequestFontWithFallbackChain(Android.Content.Context? context, System.Collections.Generic.IList<AndroidX.Core.Provider.FontRequest!>? requests, int style, Java.Util.Concurrent.IExecutor? loadingExecutor, Java.Util.Concurrent.IExecutor? callbackExecutor, AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback? callback) -> void
static AndroidX.Core.Provider.FontsContractCompat.ResetCache() -> void
static AndroidX.Core.Provider.FontsContractCompat.ResetTypefaceCache() -> void
static AndroidX.Core.Service.QuickSettings.TileServiceCompat.ClearTileServiceWrapper() -> void
static AndroidX.Core.Service.QuickSettings.TileServiceCompat.StartActivityAndCollapse(Android.Service.QuickSettings.TileService? tileService, AndroidX.Core.Service.QuickSettings.PendingIntentActivityWrapper? wrapper) -> void
static AndroidX.Core.Telephony.Mbms.MbmsHelper.GetBestNameForService(Android.Content.Context? context, Android.Telephony.Mbms.ServiceInfo? serviceInfo) -> string?
static AndroidX.Core.Telephony.Mbms.MbmsHelper.GetBestNameForServiceFormatted(Android.Content.Context? context, Android.Telephony.Mbms.ServiceInfo? serviceInfo) -> Java.Lang.ICharSequence?
static AndroidX.Core.Telephony.SubscriptionManagerCompat.GetSlotIndex(int subId) -> int
static AndroidX.Core.Telephony.TelephonyManagerCompat.GetImei(Android.Telephony.TelephonyManager? telephonyManager) -> string?
static AndroidX.Core.Telephony.TelephonyManagerCompat.GetSubscriptionId(Android.Telephony.TelephonyManager? telephonyManager) -> int
static AndroidX.Core.Text.BidiFormatter.GetInstance(Java.Util.Locale? locale) -> AndroidX.Core.Text.BidiFormatter?
static AndroidX.Core.Text.BidiFormatter.GetInstance(bool rtlContext) -> AndroidX.Core.Text.BidiFormatter?
static AndroidX.Core.Text.BidiFormatter.Instance.get -> AndroidX.Core.Text.BidiFormatter?
static AndroidX.Core.Text.HtmlCompat.FromHtml(string? source, int flags) -> Android.Text.ISpanned?
static AndroidX.Core.Text.HtmlCompat.FromHtml(string? source, int flags, Android.Text.Html.IImageGetter? imageGetter, Android.Text.Html.ITagHandler? tagHandler) -> Android.Text.ISpanned?
static AndroidX.Core.Text.HtmlCompat.ToHtml(Android.Text.ISpanned? text, int options) -> string?
static AndroidX.Core.Text.ICUCompat.MaximizeAndGetScript(Java.Util.Locale? locale) -> string?
static AndroidX.Core.Text.ITextDirectionHeuristicCompatExtensions.IsRtl(this AndroidX.Core.Text.ITextDirectionHeuristicCompat! self, string? cs, int start, int count) -> bool
static AndroidX.Core.Text.Method.LinkMovementMethodCompat.Instance.get -> AndroidX.Core.Text.Method.LinkMovementMethodCompat?
static AndroidX.Core.Text.PrecomputedTextCompat.Create(Java.Lang.ICharSequence? text, AndroidX.Core.Text.PrecomputedTextCompat.Params? params) -> AndroidX.Core.Text.PrecomputedTextCompat?
static AndroidX.Core.Text.PrecomputedTextCompat.Create(string? text, AndroidX.Core.Text.PrecomputedTextCompat.Params? params) -> AndroidX.Core.Text.PrecomputedTextCompat?
static AndroidX.Core.Text.PrecomputedTextCompat.GetTextFuture(Java.Lang.ICharSequence? charSequence, AndroidX.Core.Text.PrecomputedTextCompat.Params? params, Java.Util.Concurrent.IExecutor? executor) -> Java.Util.Concurrent.IFuture?
static AndroidX.Core.Text.PrecomputedTextCompat.GetTextFuture(string? charSequence, AndroidX.Core.Text.PrecomputedTextCompat.Params? params, Java.Util.Concurrent.IExecutor? executor) -> Java.Util.Concurrent.IFuture?
static AndroidX.Core.Text.TextDirectionHeuristicsCompat.AnyrtlLtr.get -> AndroidX.Core.Text.ITextDirectionHeuristicCompat?
static AndroidX.Core.Text.TextDirectionHeuristicsCompat.FirststrongLtr.get -> AndroidX.Core.Text.ITextDirectionHeuristicCompat?
static AndroidX.Core.Text.TextDirectionHeuristicsCompat.FirststrongRtl.get -> AndroidX.Core.Text.ITextDirectionHeuristicCompat?
static AndroidX.Core.Text.TextDirectionHeuristicsCompat.Locale.get -> AndroidX.Core.Text.ITextDirectionHeuristicCompat?
static AndroidX.Core.Text.TextDirectionHeuristicsCompat.Ltr.get -> AndroidX.Core.Text.ITextDirectionHeuristicCompat?
static AndroidX.Core.Text.TextDirectionHeuristicsCompat.Rtl.get -> AndroidX.Core.Text.ITextDirectionHeuristicCompat?
static AndroidX.Core.Text.TextUtilsCompat.GetLayoutDirectionFromLocale(Java.Util.Locale? locale) -> int
static AndroidX.Core.Text.TextUtilsCompat.HtmlEncode(string? s) -> string?
static AndroidX.Core.Text.Util.LinkifyCompat.AddLinks(Android.Text.ISpannable? spannable, Java.Util.Regex.Pattern? pattern, string? defaultScheme, string![]? schemes, Android.Text.Util.Linkify.IMatchFilter? matchFilter, Android.Text.Util.Linkify.ITransformFilter? transformFilter) -> bool
static AndroidX.Core.Text.Util.LinkifyCompat.AddLinks(Android.Text.ISpannable? spannable, Java.Util.Regex.Pattern? pattern, string? scheme, Android.Text.Util.Linkify.IMatchFilter? matchFilter, Android.Text.Util.Linkify.ITransformFilter? transformFilter) -> bool
static AndroidX.Core.Text.Util.LinkifyCompat.AddLinks(Android.Text.ISpannable? text, Java.Util.Regex.Pattern? pattern, string? scheme) -> bool
static AndroidX.Core.Text.Util.LinkifyCompat.AddLinks(Android.Text.ISpannable? text, int mask) -> bool
static AndroidX.Core.Text.Util.LinkifyCompat.AddLinks(Android.Widget.TextView? text, Java.Util.Regex.Pattern? pattern, string? defaultScheme, string![]? schemes, Android.Text.Util.Linkify.IMatchFilter? matchFilter, Android.Text.Util.Linkify.ITransformFilter? transformFilter) -> void
static AndroidX.Core.Text.Util.LinkifyCompat.AddLinks(Android.Widget.TextView? text, Java.Util.Regex.Pattern? pattern, string? scheme) -> void
static AndroidX.Core.Text.Util.LinkifyCompat.AddLinks(Android.Widget.TextView? text, Java.Util.Regex.Pattern? pattern, string? scheme, Android.Text.Util.Linkify.IMatchFilter? matchFilter, Android.Text.Util.Linkify.ITransformFilter? transformFilter) -> void
static AndroidX.Core.Text.Util.LinkifyCompat.AddLinks(Android.Widget.TextView? text, int mask) -> bool
static AndroidX.Core.Text.Util.LocalePreferences.GetCalendarType() -> string?
static AndroidX.Core.Text.Util.LocalePreferences.GetCalendarType(Java.Util.Locale? locale) -> string?
static AndroidX.Core.Text.Util.LocalePreferences.GetCalendarType(Java.Util.Locale? locale, bool resolved) -> string?
static AndroidX.Core.Text.Util.LocalePreferences.GetCalendarType(bool resolved) -> string?
static AndroidX.Core.Text.Util.LocalePreferences.GetFirstDayOfWeek() -> string?
static AndroidX.Core.Text.Util.LocalePreferences.GetFirstDayOfWeek(Java.Util.Locale? locale) -> string?
static AndroidX.Core.Text.Util.LocalePreferences.GetFirstDayOfWeek(Java.Util.Locale? locale, bool resolved) -> string?
static AndroidX.Core.Text.Util.LocalePreferences.GetFirstDayOfWeek(bool resolved) -> string?
static AndroidX.Core.Text.Util.LocalePreferences.GetHourCycle() -> string?
static AndroidX.Core.Text.Util.LocalePreferences.GetHourCycle(Java.Util.Locale? locale) -> string?
static AndroidX.Core.Text.Util.LocalePreferences.GetHourCycle(Java.Util.Locale? locale, bool resolved) -> string?
static AndroidX.Core.Text.Util.LocalePreferences.GetHourCycle(bool resolved) -> string?
static AndroidX.Core.Text.Util.LocalePreferences.GetTemperatureUnit() -> string?
static AndroidX.Core.Text.Util.LocalePreferences.GetTemperatureUnit(Java.Util.Locale? locale) -> string?
static AndroidX.Core.Text.Util.LocalePreferences.GetTemperatureUnit(Java.Util.Locale? locale, bool resolved) -> string?
static AndroidX.Core.Text.Util.LocalePreferences.GetTemperatureUnit(bool resolved) -> string?
static AndroidX.Core.Util.DebugUtils.BuildShortClassTag(Java.Lang.Object? cls, Java.Lang.StringBuilder? out) -> void
static AndroidX.Core.Util.ObjectsCompat.Equals(Java.Lang.Object? a, Java.Lang.Object? b) -> bool
static AndroidX.Core.Util.ObjectsCompat.Hash(params Java.Lang.Object![]? values) -> int
static AndroidX.Core.Util.ObjectsCompat.HashCode(Java.Lang.Object? o) -> int
static AndroidX.Core.Util.ObjectsCompat.RequireNonNull(Java.Lang.Object? obj) -> Java.Lang.Object?
static AndroidX.Core.Util.ObjectsCompat.RequireNonNull(Java.Lang.Object? obj, string? message) -> Java.Lang.Object?
static AndroidX.Core.Util.ObjectsCompat.ToString(Java.Lang.Object? o, string? nullDefault) -> string?
static AndroidX.Core.Util.Pair.Create(Java.Lang.Object? a, Java.Lang.Object? b) -> AndroidX.Core.Util.Pair?
static AndroidX.Core.Util.PatternsCompat.AutolinkEmailAddress.get -> Java.Util.Regex.Pattern?
static AndroidX.Core.Util.PatternsCompat.AutolinkWebUrl.get -> Java.Util.Regex.Pattern?
static AndroidX.Core.Util.PatternsCompat.DomainName.get -> Java.Util.Regex.Pattern?
static AndroidX.Core.Util.PatternsCompat.EmailAddress.get -> Java.Util.Regex.Pattern?
static AndroidX.Core.Util.PatternsCompat.IpAddress.get -> Java.Util.Regex.Pattern?
static AndroidX.Core.Util.PatternsCompat.WebUrl.get -> Java.Util.Regex.Pattern?
static AndroidX.Core.Util.Preconditions.CheckArgument(bool expression) -> void
static AndroidX.Core.Util.Preconditions.CheckArgument(bool expression, Java.Lang.Object? errorMessage) -> void
static AndroidX.Core.Util.Preconditions.CheckArgument(bool expression, string? messageTemplate, params Java.Lang.Object![]? messageArgs) -> void
static AndroidX.Core.Util.Preconditions.CheckArgumentFinite(float value, string? valueName) -> float
static AndroidX.Core.Util.Preconditions.CheckArgumentInRange(double value, double lower, double upper, string? valueName) -> double
static AndroidX.Core.Util.Preconditions.CheckArgumentInRange(float value, float lower, float upper, string? valueName) -> float
static AndroidX.Core.Util.Preconditions.CheckArgumentInRange(int value, int lower, int upper, string? valueName) -> int
static AndroidX.Core.Util.Preconditions.CheckArgumentInRange(long value, long lower, long upper, string? valueName) -> long
static AndroidX.Core.Util.Preconditions.CheckArgumentNonnegative(int value) -> int
static AndroidX.Core.Util.Preconditions.CheckArgumentNonnegative(int value, string? errorMessage) -> int
static AndroidX.Core.Util.Preconditions.CheckFlagsArgument(int requestedFlags, int allowedFlags) -> int
static AndroidX.Core.Util.Preconditions.CheckNotNull(Java.Lang.Object? reference) -> Java.Lang.Object?
static AndroidX.Core.Util.Preconditions.CheckNotNull(Java.Lang.Object? reference, Java.Lang.Object? errorMessage) -> Java.Lang.Object?
static AndroidX.Core.Util.Preconditions.CheckState(bool expression) -> void
static AndroidX.Core.Util.Preconditions.CheckState(bool expression, string? message) -> void
static AndroidX.Core.Util.Predicate.IsEqual(Java.Lang.Object? targetRef) -> AndroidX.Core.Util.IPredicate?
static AndroidX.Core.Util.Predicate.Not(AndroidX.Core.Util.IPredicate? target) -> AndroidX.Core.Util.IPredicate?
static AndroidX.Core.Util.SizeFCompat.ToSizeFCompat(Android.Util.SizeF? size) -> AndroidX.Core.Util.SizeFCompat?
static AndroidX.Core.Util.TimeUtils.FormatDuration(long duration, Java.IO.PrintWriter? pw) -> void
static AndroidX.Core.Util.TimeUtils.FormatDuration(long duration, Java.IO.PrintWriter? pw, int fieldLen) -> void
static AndroidX.Core.Util.TimeUtils.FormatDuration(long duration, Java.Lang.StringBuilder? builder) -> void
static AndroidX.Core.Util.TimeUtils.FormatDuration(long time, long now, Java.IO.PrintWriter? pw) -> void
static AndroidX.Core.Util.TypedValueCompat.DeriveDimension(int unitToConvertTo, float pixelValue, Android.Util.DisplayMetrics? metrics) -> float
static AndroidX.Core.Util.TypedValueCompat.DpToPx(float dpValue, Android.Util.DisplayMetrics? metrics) -> float
static AndroidX.Core.Util.TypedValueCompat.GetUnitFromComplexDimension(int complexDimension) -> int
static AndroidX.Core.Util.TypedValueCompat.PxToDp(float pixelValue, Android.Util.DisplayMetrics? metrics) -> float
static AndroidX.Core.Util.TypedValueCompat.PxToSp(float pixelValue, Android.Util.DisplayMetrics? metrics) -> float
static AndroidX.Core.Util.TypedValueCompat.SpToPx(float spValue, Android.Util.DisplayMetrics? metrics) -> float
static AndroidX.Core.View.Accessibility.AccessibilityEventCompat.AppendRecord(Android.Views.Accessibility.AccessibilityEvent? e, AndroidX.Core.View.Accessibility.AccessibilityRecordCompat? record) -> void
static AndroidX.Core.View.Accessibility.AccessibilityEventCompat.AsRecord(Android.Views.Accessibility.AccessibilityEvent? e) -> AndroidX.Core.View.Accessibility.AccessibilityRecordCompat?
static AndroidX.Core.View.Accessibility.AccessibilityEventCompat.GetAction(Android.Views.Accessibility.AccessibilityEvent? e) -> int
static AndroidX.Core.View.Accessibility.AccessibilityEventCompat.GetContentChangeTypes(Android.Views.Accessibility.AccessibilityEvent? e) -> int
static AndroidX.Core.View.Accessibility.AccessibilityEventCompat.GetMovementGranularity(Android.Views.Accessibility.AccessibilityEvent? e) -> int
static AndroidX.Core.View.Accessibility.AccessibilityEventCompat.GetRecord(Android.Views.Accessibility.AccessibilityEvent? e, int index) -> AndroidX.Core.View.Accessibility.AccessibilityRecordCompat?
static AndroidX.Core.View.Accessibility.AccessibilityEventCompat.GetRecordCount(Android.Views.Accessibility.AccessibilityEvent? e) -> int
static AndroidX.Core.View.Accessibility.AccessibilityEventCompat.IsAccessibilityDataSensitive(Android.Views.Accessibility.AccessibilityEvent? e) -> bool
static AndroidX.Core.View.Accessibility.AccessibilityEventCompat.SetAccessibilityDataSensitive(Android.Views.Accessibility.AccessibilityEvent? e, bool accessibilityDataSensitive) -> void
static AndroidX.Core.View.Accessibility.AccessibilityEventCompat.SetAction(Android.Views.Accessibility.AccessibilityEvent? e, int action) -> void
static AndroidX.Core.View.Accessibility.AccessibilityEventCompat.SetContentChangeTypes(Android.Views.Accessibility.AccessibilityEvent? e, int changeTypes) -> void
static AndroidX.Core.View.Accessibility.AccessibilityEventCompat.SetMovementGranularity(Android.Views.Accessibility.AccessibilityEvent? e, int granularity) -> void
static AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.AddAccessibilityStateChangeListener(Android.Views.Accessibility.AccessibilityManager? manager, AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.IAccessibilityStateChangeListener? listener) -> bool
static AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.AddTouchExplorationStateChangeListener(Android.Views.Accessibility.AccessibilityManager? manager, AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.ITouchExplorationStateChangeListener? listener) -> bool
static AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.GetEnabledAccessibilityServiceList(Android.Views.Accessibility.AccessibilityManager? manager, int feedbackTypeFlags) -> System.Collections.Generic.IList<Android.AccessibilityServices.AccessibilityServiceInfo!>?
static AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.GetInstalledAccessibilityServiceList(Android.Views.Accessibility.AccessibilityManager? manager) -> System.Collections.Generic.IList<Android.AccessibilityServices.AccessibilityServiceInfo!>?
static AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.IsRequestFromAccessibilityTool(Android.Views.Accessibility.AccessibilityManager? manager) -> bool
static AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.IsTouchExplorationEnabled(Android.Views.Accessibility.AccessibilityManager? manager) -> bool
static AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.RemoveAccessibilityStateChangeListener(Android.Views.Accessibility.AccessibilityManager? manager, AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.IAccessibilityStateChangeListener? listener) -> bool
static AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.RemoveTouchExplorationStateChangeListener(Android.Views.Accessibility.AccessibilityManager? manager, AndroidX.Core.View.Accessibility.AccessibilityManagerCompat.ITouchExplorationStateChangeListener? listener) -> bool
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionAccessibilityFocus.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionClearAccessibilityFocus.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionClearFocus.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionClearSelection.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionClick.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionCollapse.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionContextClick.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionCopy.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionCut.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionDismiss.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionDragCancel.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionDragDrop.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionDragStart.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionExpand.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionFocus.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionHideTooltip.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionImeEnter.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionLongClick.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionMoveWindow.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionNextAtMovementGranularity.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionNextHtmlElement.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionPageDown.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionPageLeft.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionPageRight.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionPageUp.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionPaste.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionPressAndHold.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionPreviousAtMovementGranularity.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionPreviousHtmlElement.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionScrollBackward.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionScrollDown.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionScrollForward.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionScrollInDirection.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionScrollLeft.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionScrollRight.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionScrollToPosition.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionScrollUp.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionSelect.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionSetProgress.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionSetSelection.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionSetText.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionShowOnScreen.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionShowTextSuggestions.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.ActionShowTooltip.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.Obtain(int rowCount, int columnCount, bool hierarchical) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.Obtain(int rowCount, int columnCount, bool hierarchical, int selectionMode) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Obtain(int rowIndex, int rowSpan, int columnIndex, int columnSpan, bool heading) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.Obtain(int rowIndex, int rowSpan, int columnIndex, int columnSpan, bool heading, bool selected) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.GetClickableSpans(Java.Lang.ICharSequence? text) -> Android.Text.Style.ClickableSpan![]?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.GetClickableSpans(string? text) -> Android.Text.Style.ClickableSpan![]?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Obtain() -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Obtain(Android.Views.View? root, int virtualDescendantId) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Obtain(Android.Views.View? source) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Obtain(AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat? info) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat.Obtain(int type, float min, float max, float current) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat?
static AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Wrap(Android.Views.Accessibility.AccessibilityNodeInfo? info) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
static AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.GetMaxScrollX(Android.Views.Accessibility.AccessibilityRecord? record) -> int
static AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.GetMaxScrollY(Android.Views.Accessibility.AccessibilityRecord? record) -> int
static AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.Obtain() -> AndroidX.Core.View.Accessibility.AccessibilityRecordCompat?
static AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.Obtain(AndroidX.Core.View.Accessibility.AccessibilityRecordCompat? record) -> AndroidX.Core.View.Accessibility.AccessibilityRecordCompat?
static AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.SetMaxScrollX(Android.Views.Accessibility.AccessibilityRecord? record, int maxScrollX) -> void
static AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.SetMaxScrollY(Android.Views.Accessibility.AccessibilityRecord? record, int maxScrollY) -> void
static AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.SetSource(Android.Views.Accessibility.AccessibilityRecord? record, Android.Views.View? root, int virtualDescendantId) -> void
static AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.Obtain() -> AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat?
static AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.Obtain(AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat? info) -> AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat?
static AndroidX.Core.View.Animation.PathInterpolatorCompat.Create(Android.Graphics.Path? path) -> Android.Views.Animations.IInterpolator?
static AndroidX.Core.View.Animation.PathInterpolatorCompat.Create(float controlX, float controlY) -> Android.Views.Animations.IInterpolator?
static AndroidX.Core.View.Animation.PathInterpolatorCompat.Create(float controlX1, float controlY1, float controlX2, float controlY2) -> Android.Views.Animations.IInterpolator?
static AndroidX.Core.View.AutoFill.AutofillIdCompat.ToAutofillIdCompat(Android.Views.Autofill.AutofillId? autofillId) -> AndroidX.Core.View.AutoFill.AutofillIdCompat?
static AndroidX.Core.View.ContentCapture.ContentCaptureSessionCompat.ToContentCaptureSessionCompat(Android.Views.ContentCaptures.ContentCaptureSession? contentCaptureSession, Android.Views.View? host) -> AndroidX.Core.View.ContentCapture.ContentCaptureSessionCompat?
static AndroidX.Core.View.ContentInfoCompat.Partition(Android.Views.ContentInfo? payload, Java.Util.Functions.IPredicate? itemPredicate) -> Android.Util.Pair?
static AndroidX.Core.View.ContentInfoCompat.ToContentInfoCompat(Android.Views.ContentInfo? platContentInfo) -> AndroidX.Core.View.ContentInfoCompat?
static AndroidX.Core.View.DisplayCompat.GetMode(Android.Content.Context? context, Android.Views.Display? display) -> AndroidX.Core.View.DisplayCompat.ModeCompat?
static AndroidX.Core.View.DisplayCompat.GetRoundedCorner(Android.Views.Display? display, int position) -> AndroidX.Core.View.RoundedCornerCompat?
static AndroidX.Core.View.DisplayCompat.GetSupportedModes(Android.Content.Context? context, Android.Views.Display? display) -> AndroidX.Core.View.DisplayCompat.ModeCompat![]?
static AndroidX.Core.View.DragAndDropPermissionsCompat.Request(Android.App.Activity? activity, Android.Views.DragEvent? dragEvent) -> AndroidX.Core.View.DragAndDropPermissionsCompat?
static AndroidX.Core.View.GravityCompat.Apply(int gravity, int w, int h, Android.Graphics.Rect? container, Android.Graphics.Rect? outRect, int layoutDirection) -> void
static AndroidX.Core.View.GravityCompat.Apply(int gravity, int w, int h, Android.Graphics.Rect? container, int xAdj, int yAdj, Android.Graphics.Rect? outRect, int layoutDirection) -> void
static AndroidX.Core.View.GravityCompat.ApplyDisplay(int gravity, Android.Graphics.Rect? display, Android.Graphics.Rect? inoutObj, int layoutDirection) -> void
static AndroidX.Core.View.GravityCompat.GetAbsoluteGravity(int gravity, int layoutDirection) -> int
static AndroidX.Core.View.InputMethod.EditorInfoCompat.GetContentMimeTypes(Android.Views.InputMethods.EditorInfo? editorInfo) -> string![]?
static AndroidX.Core.View.InputMethod.EditorInfoCompat.GetInitialSelectedText(Android.Views.InputMethods.EditorInfo? editorInfo, int flags) -> string?
static AndroidX.Core.View.InputMethod.EditorInfoCompat.GetInitialSelectedTextFormatted(Android.Views.InputMethods.EditorInfo? editorInfo, int flags) -> Java.Lang.ICharSequence?
static AndroidX.Core.View.InputMethod.EditorInfoCompat.GetInitialTextAfterCursor(Android.Views.InputMethods.EditorInfo? editorInfo, int length, int flags) -> string?
static AndroidX.Core.View.InputMethod.EditorInfoCompat.GetInitialTextAfterCursorFormatted(Android.Views.InputMethods.EditorInfo? editorInfo, int length, int flags) -> Java.Lang.ICharSequence?
static AndroidX.Core.View.InputMethod.EditorInfoCompat.GetInitialTextBeforeCursor(Android.Views.InputMethods.EditorInfo? editorInfo, int length, int flags) -> string?
static AndroidX.Core.View.InputMethod.EditorInfoCompat.GetInitialTextBeforeCursorFormatted(Android.Views.InputMethods.EditorInfo? editorInfo, int length, int flags) -> Java.Lang.ICharSequence?
static AndroidX.Core.View.InputMethod.EditorInfoCompat.IsStylusHandwritingEnabled(Android.Views.InputMethods.EditorInfo? editorInfo) -> bool
static AndroidX.Core.View.InputMethod.EditorInfoCompat.SetContentMimeTypes(Android.Views.InputMethods.EditorInfo? editorInfo, string![]? contentMimeTypes) -> void
static AndroidX.Core.View.InputMethod.EditorInfoCompat.SetInitialSurroundingSubText(Android.Views.InputMethods.EditorInfo? editorInfo, Java.Lang.ICharSequence? subText, int subTextStart) -> void
static AndroidX.Core.View.InputMethod.EditorInfoCompat.SetInitialSurroundingSubText(Android.Views.InputMethods.EditorInfo? editorInfo, string? subText, int subTextStart) -> void
static AndroidX.Core.View.InputMethod.EditorInfoCompat.SetInitialSurroundingText(Android.Views.InputMethods.EditorInfo? editorInfo, Java.Lang.ICharSequence? sourceText) -> void
static AndroidX.Core.View.InputMethod.EditorInfoCompat.SetInitialSurroundingText(Android.Views.InputMethods.EditorInfo? editorInfo, string? sourceText) -> void
static AndroidX.Core.View.InputMethod.EditorInfoCompat.SetStylusHandwritingEnabled(Android.Views.InputMethods.EditorInfo? editorInfo, bool enabled) -> void
static AndroidX.Core.View.InputMethod.InputConnectionCompat.CommitContent(Android.Views.InputMethods.IInputConnection? inputConnection, Android.Views.InputMethods.EditorInfo? editorInfo, AndroidX.Core.View.InputMethod.InputContentInfoCompat? inputContentInfo, int flags, Android.OS.Bundle? opts) -> bool
static AndroidX.Core.View.InputMethod.InputConnectionCompat.CreateWrapper(Android.Views.InputMethods.IInputConnection? inputConnection, Android.Views.InputMethods.EditorInfo? editorInfo, AndroidX.Core.View.InputMethod.InputConnectionCompat.IOnCommitContentListener? onCommitContentListener) -> Android.Views.InputMethods.IInputConnection?
static AndroidX.Core.View.InputMethod.InputConnectionCompat.CreateWrapper(Android.Views.View? view, Android.Views.InputMethods.IInputConnection? inputConnection, Android.Views.InputMethods.EditorInfo? editorInfo) -> Android.Views.InputMethods.IInputConnection?
static AndroidX.Core.View.InputMethod.InputContentInfoCompat.Wrap(Java.Lang.Object? inputContentInfo) -> AndroidX.Core.View.InputMethod.InputContentInfoCompat?
static AndroidX.Core.View.KeyEventDispatcher.DispatchBeforeHierarchy(Android.Views.View? root, Android.Views.KeyEvent? e) -> bool
static AndroidX.Core.View.KeyEventDispatcher.DispatchKeyEvent(AndroidX.Core.View.KeyEventDispatcher.IComponent? component, Android.Views.View? root, Android.Views.Window.ICallback? callback, Android.Views.KeyEvent? e) -> bool
static AndroidX.Core.View.LayoutInflaterCompat.GetFactory(Android.Views.LayoutInflater? inflater) -> AndroidX.Core.View.ILayoutInflaterFactory?
static AndroidX.Core.View.LayoutInflaterCompat.SetFactory(Android.Views.LayoutInflater? inflater, AndroidX.Core.View.ILayoutInflaterFactory? factory) -> void
static AndroidX.Core.View.LayoutInflaterCompat.SetFactory2(Android.Views.LayoutInflater? inflater, Android.Views.LayoutInflater.IFactory2? factory) -> void
static AndroidX.Core.View.MarginLayoutParamsCompat.GetLayoutDirection(Android.Views.ViewGroup.MarginLayoutParams? lp) -> int
static AndroidX.Core.View.MarginLayoutParamsCompat.GetMarginEnd(Android.Views.ViewGroup.MarginLayoutParams? lp) -> int
static AndroidX.Core.View.MarginLayoutParamsCompat.GetMarginStart(Android.Views.ViewGroup.MarginLayoutParams? lp) -> int
static AndroidX.Core.View.MarginLayoutParamsCompat.IsMarginRelative(Android.Views.ViewGroup.MarginLayoutParams? lp) -> bool
static AndroidX.Core.View.MarginLayoutParamsCompat.ResolveLayoutDirection(Android.Views.ViewGroup.MarginLayoutParams? lp, int layoutDirection) -> void
static AndroidX.Core.View.MarginLayoutParamsCompat.SetLayoutDirection(Android.Views.ViewGroup.MarginLayoutParams? lp, int layoutDirection) -> void
static AndroidX.Core.View.MarginLayoutParamsCompat.SetMarginEnd(Android.Views.ViewGroup.MarginLayoutParams? lp, int marginEnd) -> void
static AndroidX.Core.View.MarginLayoutParamsCompat.SetMarginStart(Android.Views.ViewGroup.MarginLayoutParams? lp, int marginStart) -> void
static AndroidX.Core.View.MenuCompat.SetGroupDividerEnabled(Android.Views.IMenu? menu, bool enabled) -> void
static AndroidX.Core.View.MenuCompat.SetShowAsAction(Android.Views.IMenuItem? item, int actionEnum) -> void
static AndroidX.Core.View.MenuItemCompat.CollapseActionView(Android.Views.IMenuItem? item) -> bool
static AndroidX.Core.View.MenuItemCompat.ExpandActionView(Android.Views.IMenuItem? item) -> bool
static AndroidX.Core.View.MenuItemCompat.GetActionProvider(Android.Views.IMenuItem? item) -> AndroidX.Core.View.ActionProvider?
static AndroidX.Core.View.MenuItemCompat.GetActionView(Android.Views.IMenuItem? item) -> Android.Views.View?
static AndroidX.Core.View.MenuItemCompat.GetAlphabeticModifiers(Android.Views.IMenuItem? item) -> int
static AndroidX.Core.View.MenuItemCompat.GetContentDescription(Android.Views.IMenuItem? item) -> string?
static AndroidX.Core.View.MenuItemCompat.GetContentDescriptionFormatted(Android.Views.IMenuItem? item) -> Java.Lang.ICharSequence?
static AndroidX.Core.View.MenuItemCompat.GetIconTintList(Android.Views.IMenuItem? item) -> Android.Content.Res.ColorStateList?
static AndroidX.Core.View.MenuItemCompat.GetIconTintMode(Android.Views.IMenuItem? item) -> Android.Graphics.PorterDuff.Mode?
static AndroidX.Core.View.MenuItemCompat.GetNumericModifiers(Android.Views.IMenuItem? item) -> int
static AndroidX.Core.View.MenuItemCompat.GetTooltipText(Android.Views.IMenuItem? item) -> string?
static AndroidX.Core.View.MenuItemCompat.GetTooltipTextFormatted(Android.Views.IMenuItem? item) -> Java.Lang.ICharSequence?
static AndroidX.Core.View.MenuItemCompat.IsActionViewExpanded(Android.Views.IMenuItem? item) -> bool
static AndroidX.Core.View.MenuItemCompat.SetActionProvider(Android.Views.IMenuItem? item, AndroidX.Core.View.ActionProvider? provider) -> Android.Views.IMenuItem?
static AndroidX.Core.View.MenuItemCompat.SetActionView(Android.Views.IMenuItem? item, Android.Views.View? view) -> Android.Views.IMenuItem?
static AndroidX.Core.View.MenuItemCompat.SetActionView(Android.Views.IMenuItem? item, int resId) -> Android.Views.IMenuItem?
static AndroidX.Core.View.MenuItemCompat.SetAlphabeticShortcut(Android.Views.IMenuItem? item, char alphaChar, int alphaModifiers) -> void
static AndroidX.Core.View.MenuItemCompat.SetContentDescription(Android.Views.IMenuItem? item, Java.Lang.ICharSequence? contentDescription) -> void
static AndroidX.Core.View.MenuItemCompat.SetContentDescription(Android.Views.IMenuItem? item, string? contentDescription) -> void
static AndroidX.Core.View.MenuItemCompat.SetIconTintList(Android.Views.IMenuItem? item, Android.Content.Res.ColorStateList? tint) -> void
static AndroidX.Core.View.MenuItemCompat.SetIconTintMode(Android.Views.IMenuItem? item, Android.Graphics.PorterDuff.Mode? tintMode) -> void
static AndroidX.Core.View.MenuItemCompat.SetNumericShortcut(Android.Views.IMenuItem? item, char numericChar, int numericModifiers) -> void
static AndroidX.Core.View.MenuItemCompat.SetOnActionExpandListener(Android.Views.IMenuItem? item, AndroidX.Core.View.MenuItemCompat.IOnActionExpandListener? listener) -> Android.Views.IMenuItem?
static AndroidX.Core.View.MenuItemCompat.SetShortcut(Android.Views.IMenuItem? item, char numericChar, char alphaChar, int numericModifiers, int alphaModifiers) -> void
static AndroidX.Core.View.MenuItemCompat.SetShowAsAction(Android.Views.IMenuItem? item, int actionEnum) -> void
static AndroidX.Core.View.MenuItemCompat.SetTooltipText(Android.Views.IMenuItem? item, Java.Lang.ICharSequence? tooltipText) -> void
static AndroidX.Core.View.MenuItemCompat.SetTooltipText(Android.Views.IMenuItem? item, string? tooltipText) -> void
static AndroidX.Core.View.MotionEventCompat.FindPointerIndex(Android.Views.MotionEvent? e, int pointerId) -> int
static AndroidX.Core.View.MotionEventCompat.GetActionIndex(Android.Views.MotionEvent? e) -> int
static AndroidX.Core.View.MotionEventCompat.GetActionMasked(Android.Views.MotionEvent? e) -> int
static AndroidX.Core.View.MotionEventCompat.GetAxisValue(Android.Views.MotionEvent? e, int axis) -> float
static AndroidX.Core.View.MotionEventCompat.GetAxisValue(Android.Views.MotionEvent? e, int axis, int pointerIndex) -> float
static AndroidX.Core.View.MotionEventCompat.GetButtonState(Android.Views.MotionEvent? e) -> int
static AndroidX.Core.View.MotionEventCompat.GetPointerCount(Android.Views.MotionEvent? e) -> int
static AndroidX.Core.View.MotionEventCompat.GetPointerId(Android.Views.MotionEvent? e, int pointerIndex) -> int
static AndroidX.Core.View.MotionEventCompat.GetSource(Android.Views.MotionEvent? e) -> int
static AndroidX.Core.View.MotionEventCompat.GetX(Android.Views.MotionEvent? e, int pointerIndex) -> float
static AndroidX.Core.View.MotionEventCompat.GetY(Android.Views.MotionEvent? e, int pointerIndex) -> float
static AndroidX.Core.View.MotionEventCompat.IsFromSource(Android.Views.MotionEvent? e, int source) -> bool
static AndroidX.Core.View.OneShotPreDrawListener.Add(Android.Views.View? view, Java.Lang.IRunnable? runnable) -> AndroidX.Core.View.OneShotPreDrawListener?
static AndroidX.Core.View.PointerIconCompat.Create(Android.Graphics.Bitmap? bitmap, float hotSpotX, float hotSpotY) -> AndroidX.Core.View.PointerIconCompat?
static AndroidX.Core.View.PointerIconCompat.GetSystemIcon(Android.Content.Context? context, int style) -> AndroidX.Core.View.PointerIconCompat?
static AndroidX.Core.View.PointerIconCompat.Load(Android.Content.Res.Resources? resources, int resourceId) -> AndroidX.Core.View.PointerIconCompat?
static AndroidX.Core.View.ScaleGestureDetectorCompat.IsQuickScaleEnabled(Android.Views.ScaleGestureDetector? scaleGestureDetector) -> bool
static AndroidX.Core.View.ScaleGestureDetectorCompat.IsQuickScaleEnabled(Java.Lang.Object? scaleGestureDetector) -> bool
static AndroidX.Core.View.ScaleGestureDetectorCompat.SetQuickScaleEnabled(Android.Views.ScaleGestureDetector? scaleGestureDetector, bool enabled) -> void
static AndroidX.Core.View.ScaleGestureDetectorCompat.SetQuickScaleEnabled(Java.Lang.Object? scaleGestureDetector, bool enabled) -> void
static AndroidX.Core.View.ScrollFeedbackProviderCompat.CreateProvider(Android.Views.View? view) -> AndroidX.Core.View.ScrollFeedbackProviderCompat?
static AndroidX.Core.View.VelocityTrackerCompat.AddMovement(Android.Views.VelocityTracker? tracker, Android.Views.MotionEvent? e) -> void
static AndroidX.Core.View.VelocityTrackerCompat.Clear(Android.Views.VelocityTracker? tracker) -> void
static AndroidX.Core.View.VelocityTrackerCompat.ComputeCurrentVelocity(Android.Views.VelocityTracker? tracker, int units) -> void
static AndroidX.Core.View.VelocityTrackerCompat.ComputeCurrentVelocity(Android.Views.VelocityTracker? tracker, int units, float maxVelocity) -> void
static AndroidX.Core.View.VelocityTrackerCompat.GetAxisVelocity(Android.Views.VelocityTracker? tracker, int axis) -> float
static AndroidX.Core.View.VelocityTrackerCompat.GetAxisVelocity(Android.Views.VelocityTracker? tracker, int axis, int pointerId) -> float
static AndroidX.Core.View.VelocityTrackerCompat.GetXVelocity(Android.Views.VelocityTracker? tracker, int pointerId) -> float
static AndroidX.Core.View.VelocityTrackerCompat.GetYVelocity(Android.Views.VelocityTracker? tracker, int pointerId) -> float
static AndroidX.Core.View.VelocityTrackerCompat.IsAxisSupported(Android.Views.VelocityTracker? tracker, int axis) -> bool
static AndroidX.Core.View.VelocityTrackerCompat.Recycle(Android.Views.VelocityTracker? tracker) -> void
static AndroidX.Core.View.ViewCompat.AddAccessibilityAction(Android.Views.View? view, Java.Lang.ICharSequence? label, AndroidX.Core.View.Accessibility.IAccessibilityViewCommand? command) -> int
static AndroidX.Core.View.ViewCompat.AddAccessibilityAction(Android.Views.View? view, string? label, AndroidX.Core.View.Accessibility.IAccessibilityViewCommand? command) -> int
static AndroidX.Core.View.ViewCompat.AddKeyboardNavigationClusters(Android.Views.View? view, System.Collections.Generic.ICollection<Android.Views.View!>? views, int direction) -> void
static AndroidX.Core.View.ViewCompat.AddOnUnhandledKeyEventListener(Android.Views.View? v, AndroidX.Core.View.ViewCompat.IOnUnhandledKeyEventListenerCompat? listener) -> void
static AndroidX.Core.View.ViewCompat.AddOverlayView(Android.Views.ViewGroup? overlayHost, Android.Views.View? overlay) -> void
static AndroidX.Core.View.ViewCompat.Animate(Android.Views.View? view) -> AndroidX.Core.View.ViewPropertyAnimatorCompat?
static AndroidX.Core.View.ViewCompat.CanScrollHorizontally(Android.Views.View? view, int direction) -> bool
static AndroidX.Core.View.ViewCompat.CanScrollVertically(Android.Views.View? view, int direction) -> bool
static AndroidX.Core.View.ViewCompat.CancelDragAndDrop(Android.Views.View? v) -> void
static AndroidX.Core.View.ViewCompat.CombineMeasuredStates(int curState, int newState) -> int
static AndroidX.Core.View.ViewCompat.ComputeSystemWindowInsets(Android.Views.View? view, AndroidX.Core.View.WindowInsetsCompat? insets, Android.Graphics.Rect? outLocalInsets) -> AndroidX.Core.View.WindowInsetsCompat?
static AndroidX.Core.View.ViewCompat.DispatchApplyWindowInsets(Android.Views.View? view, AndroidX.Core.View.WindowInsetsCompat? insets) -> AndroidX.Core.View.WindowInsetsCompat?
static AndroidX.Core.View.ViewCompat.DispatchFinishTemporaryDetach(Android.Views.View? view) -> void
static AndroidX.Core.View.ViewCompat.DispatchNestedFling(Android.Views.View? view, float velocityX, float velocityY, bool consumed) -> bool
static AndroidX.Core.View.ViewCompat.DispatchNestedPreFling(Android.Views.View? view, float velocityX, float velocityY) -> bool
static AndroidX.Core.View.ViewCompat.DispatchNestedPreScroll(Android.Views.View? view, int dx, int dy, int[]? consumed, int[]? offsetInWindow) -> bool
static AndroidX.Core.View.ViewCompat.DispatchNestedPreScroll(Android.Views.View? view, int dx, int dy, int[]? consumed, int[]? offsetInWindow, int type) -> bool
static AndroidX.Core.View.ViewCompat.DispatchNestedScroll(Android.Views.View? view, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[]? offsetInWindow) -> bool
static AndroidX.Core.View.ViewCompat.DispatchNestedScroll(Android.Views.View? view, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[]? offsetInWindow, int type) -> bool
static AndroidX.Core.View.ViewCompat.DispatchNestedScroll(Android.Views.View? view, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[]? offsetInWindow, int type, int[]? consumed) -> void
static AndroidX.Core.View.ViewCompat.DispatchStartTemporaryDetach(Android.Views.View? view) -> void
static AndroidX.Core.View.ViewCompat.EnableAccessibleClickableSpanSupport(Android.Views.View? view) -> void
static AndroidX.Core.View.ViewCompat.GenerateViewId() -> int
static AndroidX.Core.View.ViewCompat.GetAccessibilityDelegate(Android.Views.View? view) -> AndroidX.Core.View.AccessibilityDelegateCompat?
static AndroidX.Core.View.ViewCompat.GetAccessibilityLiveRegion(Android.Views.View? view) -> int
static AndroidX.Core.View.ViewCompat.GetAccessibilityNodeProvider(Android.Views.View? view) -> AndroidX.Core.View.Accessibility.AccessibilityNodeProviderCompat?
static AndroidX.Core.View.ViewCompat.GetAccessibilityPaneTitle(Android.Views.View? view) -> string?
static AndroidX.Core.View.ViewCompat.GetAccessibilityPaneTitleFormatted(Android.Views.View? view) -> Java.Lang.ICharSequence?
static AndroidX.Core.View.ViewCompat.GetAlpha(Android.Views.View? view) -> float
static AndroidX.Core.View.ViewCompat.GetAutofillId(Android.Views.View? v) -> AndroidX.Core.View.AutoFill.AutofillIdCompat?
static AndroidX.Core.View.ViewCompat.GetBackgroundTintList(Android.Views.View? view) -> Android.Content.Res.ColorStateList?
static AndroidX.Core.View.ViewCompat.GetBackgroundTintMode(Android.Views.View? view) -> Android.Graphics.PorterDuff.Mode?
static AndroidX.Core.View.ViewCompat.GetClipBounds(Android.Views.View? view) -> Android.Graphics.Rect?
static AndroidX.Core.View.ViewCompat.GetContentCaptureSession(Android.Views.View? v) -> AndroidX.Core.View.ContentCapture.ContentCaptureSessionCompat?
static AndroidX.Core.View.ViewCompat.GetDisplay(Android.Views.View? view) -> Android.Views.Display?
static AndroidX.Core.View.ViewCompat.GetElevation(Android.Views.View? view) -> float
static AndroidX.Core.View.ViewCompat.GetFitsSystemWindows(Android.Views.View? v) -> bool
static AndroidX.Core.View.ViewCompat.GetImportantForAccessibility(Android.Views.View? view) -> int
static AndroidX.Core.View.ViewCompat.GetImportantForAutofill(Android.Views.View? v) -> int
static AndroidX.Core.View.ViewCompat.GetImportantForContentCapture(Android.Views.View? v) -> int
static AndroidX.Core.View.ViewCompat.GetLabelFor(Android.Views.View? view) -> int
static AndroidX.Core.View.ViewCompat.GetLayerType(Android.Views.View? view) -> int
static AndroidX.Core.View.ViewCompat.GetLayoutDirection(Android.Views.View? view) -> int
static AndroidX.Core.View.ViewCompat.GetMatrix(Android.Views.View? view) -> Android.Graphics.Matrix?
static AndroidX.Core.View.ViewCompat.GetMeasuredHeightAndState(Android.Views.View? view) -> int
static AndroidX.Core.View.ViewCompat.GetMeasuredState(Android.Views.View? view) -> int
static AndroidX.Core.View.ViewCompat.GetMeasuredWidthAndState(Android.Views.View? view) -> int
static AndroidX.Core.View.ViewCompat.GetMinimumHeight(Android.Views.View? view) -> int
static AndroidX.Core.View.ViewCompat.GetMinimumWidth(Android.Views.View? view) -> int
static AndroidX.Core.View.ViewCompat.GetNextClusterForwardId(Android.Views.View? view) -> int
static AndroidX.Core.View.ViewCompat.GetOnReceiveContentMimeTypes(Android.Views.View? view) -> string![]?
static AndroidX.Core.View.ViewCompat.GetOverScrollMode(Android.Views.View? v) -> int
static AndroidX.Core.View.ViewCompat.GetPaddingEnd(Android.Views.View? view) -> int
static AndroidX.Core.View.ViewCompat.GetPaddingStart(Android.Views.View? view) -> int
static AndroidX.Core.View.ViewCompat.GetParentForAccessibility(Android.Views.View? view) -> Android.Views.IViewParent?
static AndroidX.Core.View.ViewCompat.GetPivotX(Android.Views.View? view) -> float
static AndroidX.Core.View.ViewCompat.GetPivotY(Android.Views.View? view) -> float
static AndroidX.Core.View.ViewCompat.GetRootWindowInsets(Android.Views.View? view) -> AndroidX.Core.View.WindowInsetsCompat?
static AndroidX.Core.View.ViewCompat.GetRotation(Android.Views.View? view) -> float
static AndroidX.Core.View.ViewCompat.GetRotationX(Android.Views.View? view) -> float
static AndroidX.Core.View.ViewCompat.GetRotationY(Android.Views.View? view) -> float
static AndroidX.Core.View.ViewCompat.GetScaleX(Android.Views.View? view) -> float
static AndroidX.Core.View.ViewCompat.GetScaleY(Android.Views.View? view) -> float
static AndroidX.Core.View.ViewCompat.GetScrollIndicators(Android.Views.View? view) -> int
static AndroidX.Core.View.ViewCompat.GetStateDescription(Android.Views.View? view) -> string?
static AndroidX.Core.View.ViewCompat.GetStateDescriptionFormatted(Android.Views.View? view) -> Java.Lang.ICharSequence?
static AndroidX.Core.View.ViewCompat.GetSystemGestureExclusionRects(Android.Views.View? view) -> System.Collections.Generic.IList<Android.Graphics.Rect!>?
static AndroidX.Core.View.ViewCompat.GetTransitionName(Android.Views.View? view) -> string?
static AndroidX.Core.View.ViewCompat.GetTranslationX(Android.Views.View? view) -> float
static AndroidX.Core.View.ViewCompat.GetTranslationY(Android.Views.View? view) -> float
static AndroidX.Core.View.ViewCompat.GetTranslationZ(Android.Views.View? view) -> float
static AndroidX.Core.View.ViewCompat.GetWindowInsetsController(Android.Views.View? view) -> AndroidX.Core.View.WindowInsetsControllerCompat?
static AndroidX.Core.View.ViewCompat.GetWindowSystemUiVisibility(Android.Views.View? view) -> int
static AndroidX.Core.View.ViewCompat.GetX(Android.Views.View? view) -> float
static AndroidX.Core.View.ViewCompat.GetY(Android.Views.View? view) -> float
static AndroidX.Core.View.ViewCompat.GetZ(Android.Views.View? view) -> float
static AndroidX.Core.View.ViewCompat.HasAccessibilityDelegate(Android.Views.View? view) -> bool
static AndroidX.Core.View.ViewCompat.HasExplicitFocusable(Android.Views.View? view) -> bool
static AndroidX.Core.View.ViewCompat.HasNestedScrollingParent(Android.Views.View? view) -> bool
static AndroidX.Core.View.ViewCompat.HasNestedScrollingParent(Android.Views.View? view, int type) -> bool
static AndroidX.Core.View.ViewCompat.HasOnClickListeners(Android.Views.View? view) -> bool
static AndroidX.Core.View.ViewCompat.HasOverlappingRendering(Android.Views.View? view) -> bool
static AndroidX.Core.View.ViewCompat.HasTransientState(Android.Views.View? view) -> bool
static AndroidX.Core.View.ViewCompat.IsAccessibilityHeading(Android.Views.View? view) -> bool
static AndroidX.Core.View.ViewCompat.IsAttachedToWindow(Android.Views.View? view) -> bool
static AndroidX.Core.View.ViewCompat.IsFocusedByDefault(Android.Views.View? view) -> bool
static AndroidX.Core.View.ViewCompat.IsImportantForAccessibility(Android.Views.View? view) -> bool
static AndroidX.Core.View.ViewCompat.IsImportantForAutofill(Android.Views.View? v) -> bool
static AndroidX.Core.View.ViewCompat.IsImportantForContentCapture(Android.Views.View? v) -> bool
static AndroidX.Core.View.ViewCompat.IsInLayout(Android.Views.View? view) -> bool
static AndroidX.Core.View.ViewCompat.IsKeyboardNavigationCluster(Android.Views.View? view) -> bool
static AndroidX.Core.View.ViewCompat.IsLaidOut(Android.Views.View? view) -> bool
static AndroidX.Core.View.ViewCompat.IsLayoutDirectionResolved(Android.Views.View? view) -> bool
static AndroidX.Core.View.ViewCompat.IsNestedScrollingEnabled(Android.Views.View? view) -> bool
static AndroidX.Core.View.ViewCompat.IsOpaque(Android.Views.View? view) -> bool
static AndroidX.Core.View.ViewCompat.IsPaddingRelative(Android.Views.View? view) -> bool
static AndroidX.Core.View.ViewCompat.IsScreenReaderFocusable(Android.Views.View? view) -> bool
static AndroidX.Core.View.ViewCompat.JumpDrawablesToCurrentState(Android.Views.View? v) -> void
static AndroidX.Core.View.ViewCompat.KeyboardNavigationClusterSearch(Android.Views.View? view, Android.Views.View? currentCluster, int direction) -> Android.Views.View?
static AndroidX.Core.View.ViewCompat.OffsetLeftAndRight(Android.Views.View? view, int offset) -> void
static AndroidX.Core.View.ViewCompat.OffsetTopAndBottom(Android.Views.View? view, int offset) -> void
static AndroidX.Core.View.ViewCompat.OnApplyWindowInsets(Android.Views.View? view, AndroidX.Core.View.WindowInsetsCompat? insets) -> AndroidX.Core.View.WindowInsetsCompat?
static AndroidX.Core.View.ViewCompat.OnInitializeAccessibilityEvent(Android.Views.View? v, Android.Views.Accessibility.AccessibilityEvent? e) -> void
static AndroidX.Core.View.ViewCompat.OnInitializeAccessibilityNodeInfo(Android.Views.View? v, AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat? info) -> void
static AndroidX.Core.View.ViewCompat.OnPopulateAccessibilityEvent(Android.Views.View? v, Android.Views.Accessibility.AccessibilityEvent? e) -> void
static AndroidX.Core.View.ViewCompat.PerformAccessibilityAction(Android.Views.View? view, int action, Android.OS.Bundle? arguments) -> bool
static AndroidX.Core.View.ViewCompat.PerformHapticFeedback(Android.Views.View? view, int feedbackConstant) -> bool
static AndroidX.Core.View.ViewCompat.PerformHapticFeedback(Android.Views.View? view, int feedbackConstant, int flags) -> bool
static AndroidX.Core.View.ViewCompat.PerformReceiveContent(Android.Views.View? view, AndroidX.Core.View.ContentInfoCompat? payload) -> AndroidX.Core.View.ContentInfoCompat?
static AndroidX.Core.View.ViewCompat.PostInvalidateOnAnimation(Android.Views.View? view) -> void
static AndroidX.Core.View.ViewCompat.PostInvalidateOnAnimation(Android.Views.View? view, int left, int top, int right, int bottom) -> void
static AndroidX.Core.View.ViewCompat.PostOnAnimation(Android.Views.View? view, Java.Lang.IRunnable? action) -> void
static AndroidX.Core.View.ViewCompat.PostOnAnimationDelayed(Android.Views.View? view, Java.Lang.IRunnable? action, long delayMillis) -> void
static AndroidX.Core.View.ViewCompat.RemoveAccessibilityAction(Android.Views.View? view, int actionId) -> void
static AndroidX.Core.View.ViewCompat.RemoveOnUnhandledKeyEventListener(Android.Views.View? v, AndroidX.Core.View.ViewCompat.IOnUnhandledKeyEventListenerCompat? listener) -> void
static AndroidX.Core.View.ViewCompat.ReplaceAccessibilityAction(Android.Views.View? view, AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat? replacedAction, Java.Lang.ICharSequence? label, AndroidX.Core.View.Accessibility.IAccessibilityViewCommand? command) -> void
static AndroidX.Core.View.ViewCompat.ReplaceAccessibilityAction(Android.Views.View? view, AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat? replacedAction, string? label, AndroidX.Core.View.Accessibility.IAccessibilityViewCommand? command) -> void
static AndroidX.Core.View.ViewCompat.RequestApplyInsets(Android.Views.View? view) -> void
static AndroidX.Core.View.ViewCompat.RequireViewById(Android.Views.View? view, int id) -> Java.Lang.Object?
static AndroidX.Core.View.ViewCompat.ResolveSizeAndState(int size, int measureSpec, int childMeasuredState) -> int
static AndroidX.Core.View.ViewCompat.RestoreDefaultFocus(Android.Views.View? view) -> bool
static AndroidX.Core.View.ViewCompat.SaveAttributeDataForStyleable(Android.Views.View? view, Android.Content.Context? context, int[]? styleable, Android.Util.IAttributeSet? attrs, Android.Content.Res.TypedArray? t, int defStyleAttr, int defStyleRes) -> void
static AndroidX.Core.View.ViewCompat.SetAccessibilityDelegate(Android.Views.View? v, AndroidX.Core.View.AccessibilityDelegateCompat? delegate) -> void
static AndroidX.Core.View.ViewCompat.SetAccessibilityHeading(Android.Views.View? view, bool isHeading) -> void
static AndroidX.Core.View.ViewCompat.SetAccessibilityLiveRegion(Android.Views.View? view, int mode) -> void
static AndroidX.Core.View.ViewCompat.SetAccessibilityPaneTitle(Android.Views.View? view, Java.Lang.ICharSequence? accessibilityPaneTitle) -> void
static AndroidX.Core.View.ViewCompat.SetAccessibilityPaneTitle(Android.Views.View? view, string? accessibilityPaneTitle) -> void
static AndroidX.Core.View.ViewCompat.SetActivated(Android.Views.View? view, bool activated) -> void
static AndroidX.Core.View.ViewCompat.SetAlpha(Android.Views.View? view, float value) -> void
static AndroidX.Core.View.ViewCompat.SetAutofillHints(Android.Views.View? v, params string![]? autofillHints) -> void
static AndroidX.Core.View.ViewCompat.SetAutofillId(Android.Views.View? v, AndroidX.Core.View.AutoFill.AutofillIdCompat? id) -> void
static AndroidX.Core.View.ViewCompat.SetBackground(Android.Views.View? view, Android.Graphics.Drawables.Drawable? background) -> void
static AndroidX.Core.View.ViewCompat.SetBackgroundTintList(Android.Views.View? view, Android.Content.Res.ColorStateList? tintList) -> void
static AndroidX.Core.View.ViewCompat.SetBackgroundTintMode(Android.Views.View? view, Android.Graphics.PorterDuff.Mode? mode) -> void
static AndroidX.Core.View.ViewCompat.SetChildrenDrawingOrderEnabled(Android.Views.ViewGroup? viewGroup, bool enabled) -> void
static AndroidX.Core.View.ViewCompat.SetClipBounds(Android.Views.View? view, Android.Graphics.Rect? clipBounds) -> void
static AndroidX.Core.View.ViewCompat.SetContentCaptureSession(Android.Views.View? v, AndroidX.Core.View.ContentCapture.ContentCaptureSessionCompat? contentCaptureSession) -> void
static AndroidX.Core.View.ViewCompat.SetElevation(Android.Views.View? view, float elevation) -> void
static AndroidX.Core.View.ViewCompat.SetFitsSystemWindows(Android.Views.View? view, bool fitSystemWindows) -> void
static AndroidX.Core.View.ViewCompat.SetFocusedByDefault(Android.Views.View? view, bool isFocusedByDefault) -> void
static AndroidX.Core.View.ViewCompat.SetHasTransientState(Android.Views.View? view, bool hasTransientState) -> void
static AndroidX.Core.View.ViewCompat.SetImportantForAccessibility(Android.Views.View? view, int mode) -> void
static AndroidX.Core.View.ViewCompat.SetImportantForAutofill(Android.Views.View? v, int mode) -> void
static AndroidX.Core.View.ViewCompat.SetImportantForContentCapture(Android.Views.View? v, int mode) -> void
static AndroidX.Core.View.ViewCompat.SetKeyboardNavigationCluster(Android.Views.View? view, bool isCluster) -> void
static AndroidX.Core.View.ViewCompat.SetLabelFor(Android.Views.View? view, int labeledId) -> void
static AndroidX.Core.View.ViewCompat.SetLayerPaint(Android.Views.View? view, Android.Graphics.Paint? paint) -> void
static AndroidX.Core.View.ViewCompat.SetLayerType(Android.Views.View? view, int layerType, Android.Graphics.Paint? paint) -> void
static AndroidX.Core.View.ViewCompat.SetLayoutDirection(Android.Views.View? view, int layoutDirection) -> void
static AndroidX.Core.View.ViewCompat.SetNestedScrollingEnabled(Android.Views.View? view, bool enabled) -> void
static AndroidX.Core.View.ViewCompat.SetNextClusterForwardId(Android.Views.View? view, int nextClusterForwardId) -> void
static AndroidX.Core.View.ViewCompat.SetOnApplyWindowInsetsListener(Android.Views.View? v, AndroidX.Core.View.IOnApplyWindowInsetsListener? listener) -> void
static AndroidX.Core.View.ViewCompat.SetOnReceiveContentListener(Android.Views.View? view, string![]? mimeTypes, AndroidX.Core.View.IOnReceiveContentListener? listener) -> void
static AndroidX.Core.View.ViewCompat.SetOverScrollMode(Android.Views.View? v, int overScrollMode) -> void
static AndroidX.Core.View.ViewCompat.SetPaddingRelative(Android.Views.View? view, int start, int top, int end, int bottom) -> void
static AndroidX.Core.View.ViewCompat.SetPivotX(Android.Views.View? view, float value) -> void
static AndroidX.Core.View.ViewCompat.SetPivotY(Android.Views.View? view, float value) -> void
static AndroidX.Core.View.ViewCompat.SetPointerIcon(Android.Views.View? view, AndroidX.Core.View.PointerIconCompat? pointerIcon) -> void
static AndroidX.Core.View.ViewCompat.SetRotation(Android.Views.View? view, float value) -> void
static AndroidX.Core.View.ViewCompat.SetRotationX(Android.Views.View? view, float value) -> void
static AndroidX.Core.View.ViewCompat.SetRotationY(Android.Views.View? view, float value) -> void
static AndroidX.Core.View.ViewCompat.SetSaveFromParentEnabled(Android.Views.View? v, bool enabled) -> void
static AndroidX.Core.View.ViewCompat.SetScaleX(Android.Views.View? view, float value) -> void
static AndroidX.Core.View.ViewCompat.SetScaleY(Android.Views.View? view, float value) -> void
static AndroidX.Core.View.ViewCompat.SetScreenReaderFocusable(Android.Views.View? view, bool screenReaderFocusable) -> void
static AndroidX.Core.View.ViewCompat.SetScrollIndicators(Android.Views.View? view, int indicators) -> void
static AndroidX.Core.View.ViewCompat.SetScrollIndicators(Android.Views.View? view, int indicators, int mask) -> void
static AndroidX.Core.View.ViewCompat.SetStateDescription(Android.Views.View? view, Java.Lang.ICharSequence? stateDescription) -> void
static AndroidX.Core.View.ViewCompat.SetStateDescription(Android.Views.View? view, string? stateDescription) -> void
static AndroidX.Core.View.ViewCompat.SetSystemGestureExclusionRects(Android.Views.View? view, System.Collections.Generic.IList<Android.Graphics.Rect!>? rects) -> void
static AndroidX.Core.View.ViewCompat.SetTooltipText(Android.Views.View? view, Java.Lang.ICharSequence? tooltipText) -> void
static AndroidX.Core.View.ViewCompat.SetTooltipText(Android.Views.View? view, string? tooltipText) -> void
static AndroidX.Core.View.ViewCompat.SetTransitionName(Android.Views.View? view, string? transitionName) -> void
static AndroidX.Core.View.ViewCompat.SetTranslationX(Android.Views.View? view, float value) -> void
static AndroidX.Core.View.ViewCompat.SetTranslationY(Android.Views.View? view, float value) -> void
static AndroidX.Core.View.ViewCompat.SetTranslationZ(Android.Views.View? view, float translationZ) -> void
static AndroidX.Core.View.ViewCompat.SetWindowInsetsAnimationCallback(Android.Views.View? view, AndroidX.Core.View.WindowInsetsAnimationCompat.Callback? callback) -> void
static AndroidX.Core.View.ViewCompat.SetX(Android.Views.View? view, float value) -> void
static AndroidX.Core.View.ViewCompat.SetY(Android.Views.View? view, float value) -> void
static AndroidX.Core.View.ViewCompat.SetZ(Android.Views.View? view, float z) -> void
static AndroidX.Core.View.ViewCompat.StartDragAndDrop(Android.Views.View? v, Android.Content.ClipData? data, Android.Views.View.DragShadowBuilder? shadowBuilder, Java.Lang.Object? localState, int flags) -> bool
static AndroidX.Core.View.ViewCompat.StartNestedScroll(Android.Views.View? view, int axes) -> bool
static AndroidX.Core.View.ViewCompat.StartNestedScroll(Android.Views.View? view, int axes, int type) -> bool
static AndroidX.Core.View.ViewCompat.StopNestedScroll(Android.Views.View? view) -> void
static AndroidX.Core.View.ViewCompat.StopNestedScroll(Android.Views.View? view, int type) -> void
static AndroidX.Core.View.ViewCompat.TransformMatrixToGlobal(Android.Views.View? view, Android.Graphics.Matrix? matrix) -> void
static AndroidX.Core.View.ViewCompat.UpdateDragShadow(Android.Views.View? v, Android.Views.View.DragShadowBuilder? shadowBuilder) -> void
static AndroidX.Core.View.ViewConfigurationCompat.GetScaledHorizontalScrollFactor(Android.Views.ViewConfiguration? config, Android.Content.Context? context) -> float
static AndroidX.Core.View.ViewConfigurationCompat.GetScaledHoverSlop(Android.Views.ViewConfiguration? config) -> int
static AndroidX.Core.View.ViewConfigurationCompat.GetScaledMaximumFlingVelocity(Android.Content.Context? context, Android.Views.ViewConfiguration? config, int inputDeviceId, int axis, int source) -> int
static AndroidX.Core.View.ViewConfigurationCompat.GetScaledMinimumFlingVelocity(Android.Content.Context? context, Android.Views.ViewConfiguration? config, int inputDeviceId, int axis, int source) -> int
static AndroidX.Core.View.ViewConfigurationCompat.GetScaledPagingTouchSlop(Android.Views.ViewConfiguration? config) -> int
static AndroidX.Core.View.ViewConfigurationCompat.GetScaledVerticalScrollFactor(Android.Views.ViewConfiguration? config, Android.Content.Context? context) -> float
static AndroidX.Core.View.ViewConfigurationCompat.HasPermanentMenuKey(Android.Views.ViewConfiguration? config) -> bool
static AndroidX.Core.View.ViewConfigurationCompat.ShouldShowMenuShortcutsWhenKeyboardPresent(Android.Views.ViewConfiguration? config, Android.Content.Context? context) -> bool
static AndroidX.Core.View.ViewGroupCompat.GetLayoutMode(Android.Views.ViewGroup? group) -> int
static AndroidX.Core.View.ViewGroupCompat.GetNestedScrollAxes(Android.Views.ViewGroup? group) -> int
static AndroidX.Core.View.ViewGroupCompat.InstallCompatInsetsDispatch(Android.Views.View? root) -> void
static AndroidX.Core.View.ViewGroupCompat.IsTransitionGroup(Android.Views.ViewGroup? group) -> bool
static AndroidX.Core.View.ViewGroupCompat.OnRequestSendAccessibilityEvent(Android.Views.ViewGroup? group, Android.Views.View? child, Android.Views.Accessibility.AccessibilityEvent? e) -> bool
static AndroidX.Core.View.ViewGroupCompat.SetLayoutMode(Android.Views.ViewGroup? group, int mode) -> void
static AndroidX.Core.View.ViewGroupCompat.SetMotionEventSplittingEnabled(Android.Views.ViewGroup? group, bool split) -> void
static AndroidX.Core.View.ViewGroupCompat.SetTransitionGroup(Android.Views.ViewGroup? group, bool isTransitionGroup) -> void
static AndroidX.Core.View.ViewParentCompat.NotifySubtreeAccessibilityStateChanged(Android.Views.IViewParent? parent, Android.Views.View? child, Android.Views.View? source, int changeType) -> void
static AndroidX.Core.View.ViewParentCompat.OnNestedFling(Android.Views.IViewParent? parent, Android.Views.View? target, float velocityX, float velocityY, bool consumed) -> bool
static AndroidX.Core.View.ViewParentCompat.OnNestedPreFling(Android.Views.IViewParent? parent, Android.Views.View? target, float velocityX, float velocityY) -> bool
static AndroidX.Core.View.ViewParentCompat.OnNestedPreScroll(Android.Views.IViewParent? parent, Android.Views.View? target, int dx, int dy, int[]? consumed) -> void
static AndroidX.Core.View.ViewParentCompat.OnNestedPreScroll(Android.Views.IViewParent? parent, Android.Views.View? target, int dx, int dy, int[]? consumed, int type) -> void
static AndroidX.Core.View.ViewParentCompat.OnNestedScroll(Android.Views.IViewParent? parent, Android.Views.View? target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) -> void
static AndroidX.Core.View.ViewParentCompat.OnNestedScroll(Android.Views.IViewParent? parent, Android.Views.View? target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int type) -> void
static AndroidX.Core.View.ViewParentCompat.OnNestedScroll(Android.Views.IViewParent? parent, Android.Views.View? target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int type, int[]? consumed) -> void
static AndroidX.Core.View.ViewParentCompat.OnNestedScrollAccepted(Android.Views.IViewParent! parent, Android.Views.View! child, Android.Views.View! target, int nestedScrollAxes) -> void
static AndroidX.Core.View.ViewParentCompat.OnNestedScrollAccepted(Android.Views.IViewParent! parent, Android.Views.View! child, Android.Views.View! target, int nestedScrollAxes, int type) -> void
static AndroidX.Core.View.ViewParentCompat.OnNestedScrollAccepted(Android.Views.IViewParent? parent, Android.Views.View? child, Android.Views.View? target, Android.Views.ScrollAxis nestedScrollAxes) -> void
static AndroidX.Core.View.ViewParentCompat.OnNestedScrollAccepted(Android.Views.IViewParent? parent, Android.Views.View? child, Android.Views.View? target, Android.Views.ScrollAxis nestedScrollAxes, int type) -> void
static AndroidX.Core.View.ViewParentCompat.OnStartNestedScroll(Android.Views.IViewParent! parent, Android.Views.View! child, Android.Views.View! target, int nestedScrollAxes) -> bool
static AndroidX.Core.View.ViewParentCompat.OnStartNestedScroll(Android.Views.IViewParent! parent, Android.Views.View! child, Android.Views.View! target, int nestedScrollAxes, int type) -> bool
static AndroidX.Core.View.ViewParentCompat.OnStartNestedScroll(Android.Views.IViewParent? parent, Android.Views.View? child, Android.Views.View? target, Android.Views.ScrollAxis nestedScrollAxes) -> bool
static AndroidX.Core.View.ViewParentCompat.OnStartNestedScroll(Android.Views.IViewParent? parent, Android.Views.View? child, Android.Views.View? target, Android.Views.ScrollAxis nestedScrollAxes, int type) -> bool
static AndroidX.Core.View.ViewParentCompat.OnStopNestedScroll(Android.Views.IViewParent? parent, Android.Views.View? target) -> void
static AndroidX.Core.View.ViewParentCompat.OnStopNestedScroll(Android.Views.IViewParent? parent, Android.Views.View? target, int type) -> void
static AndroidX.Core.View.ViewParentCompat.RequestSendAccessibilityEvent(Android.Views.IViewParent? parent, Android.Views.View? child, Android.Views.Accessibility.AccessibilityEvent? e) -> bool
static AndroidX.Core.View.ViewStructureCompat.ToViewStructureCompat(Android.Views.ViewStructure? contentCaptureSession) -> AndroidX.Core.View.ViewStructureCompat?
static AndroidX.Core.View.WindowCompat.EnableEdgeToEdge(Android.Views.Window? window) -> void
static AndroidX.Core.View.WindowCompat.GetInsetsController(Android.Views.Window? window, Android.Views.View? view) -> AndroidX.Core.View.WindowInsetsControllerCompat?
static AndroidX.Core.View.WindowCompat.RequireViewById(Android.Views.Window? window, int id) -> Java.Lang.Object?
static AndroidX.Core.View.WindowCompat.SetDecorFitsSystemWindows(Android.Views.Window? window, bool decorFitsSystemWindows) -> void
static AndroidX.Core.View.WindowInsetsAnimationCompat.BoundsCompat.ToBoundsCompat(Android.Views.WindowInsetsAnimation.Bounds? bounds) -> AndroidX.Core.View.WindowInsetsAnimationCompat.BoundsCompat?
static AndroidX.Core.View.WindowInsetsCompat.Consumed.get -> AndroidX.Core.View.WindowInsetsCompat?
static AndroidX.Core.View.WindowInsetsCompat.Side.All() -> int
static AndroidX.Core.View.WindowInsetsCompat.ToWindowInsetsCompat(Android.Views.WindowInsets? insets) -> AndroidX.Core.View.WindowInsetsCompat?
static AndroidX.Core.View.WindowInsetsCompat.ToWindowInsetsCompat(Android.Views.WindowInsets? insets, Android.Views.View? view) -> AndroidX.Core.View.WindowInsetsCompat?
static AndroidX.Core.View.WindowInsetsCompat.Type.CaptionBar() -> int
static AndroidX.Core.View.WindowInsetsCompat.Type.DisplayCutout() -> int
static AndroidX.Core.View.WindowInsetsCompat.Type.Ime() -> int
static AndroidX.Core.View.WindowInsetsCompat.Type.MandatorySystemGestures() -> int
static AndroidX.Core.View.WindowInsetsCompat.Type.NavigationBars() -> int
static AndroidX.Core.View.WindowInsetsCompat.Type.StatusBars() -> int
static AndroidX.Core.View.WindowInsetsCompat.Type.SystemBars() -> int
static AndroidX.Core.View.WindowInsetsCompat.Type.SystemGestures() -> int
static AndroidX.Core.View.WindowInsetsCompat.Type.SystemOverlays() -> int
static AndroidX.Core.View.WindowInsetsCompat.Type.TappableElement() -> int
static AndroidX.Core.View.WindowInsetsControllerCompat.ToWindowInsetsControllerCompat(Android.Views.IWindowInsetsController? insetsController) -> AndroidX.Core.View.WindowInsetsControllerCompat?
static AndroidX.Core.Widget.AutoSizeableTextView.PlatformSupportsAutosize.get -> bool
static AndroidX.Core.Widget.CheckedTextViewCompat.GetCheckMarkDrawable(Android.Widget.CheckedTextView? textView) -> Android.Graphics.Drawables.Drawable?
static AndroidX.Core.Widget.CheckedTextViewCompat.GetCheckMarkTintList(Android.Widget.CheckedTextView? textView) -> Android.Content.Res.ColorStateList?
static AndroidX.Core.Widget.CheckedTextViewCompat.GetCheckMarkTintMode(Android.Widget.CheckedTextView? textView) -> Android.Graphics.PorterDuff.Mode?
static AndroidX.Core.Widget.CheckedTextViewCompat.SetCheckMarkTintList(Android.Widget.CheckedTextView? textView, Android.Content.Res.ColorStateList? tint) -> void
static AndroidX.Core.Widget.CheckedTextViewCompat.SetCheckMarkTintMode(Android.Widget.CheckedTextView? textView, Android.Graphics.PorterDuff.Mode? tintMode) -> void
static AndroidX.Core.Widget.CompoundButtonCompat.GetButtonDrawable(Android.Widget.CompoundButton? button) -> Android.Graphics.Drawables.Drawable?
static AndroidX.Core.Widget.CompoundButtonCompat.GetButtonTintList(Android.Widget.CompoundButton? button) -> Android.Content.Res.ColorStateList?
static AndroidX.Core.Widget.CompoundButtonCompat.GetButtonTintMode(Android.Widget.CompoundButton? button) -> Android.Graphics.PorterDuff.Mode?
static AndroidX.Core.Widget.CompoundButtonCompat.SetButtonTintList(Android.Widget.CompoundButton? button, Android.Content.Res.ColorStateList? tint) -> void
static AndroidX.Core.Widget.CompoundButtonCompat.SetButtonTintMode(Android.Widget.CompoundButton? button, Android.Graphics.PorterDuff.Mode? tintMode) -> void
static AndroidX.Core.Widget.EdgeEffectCompat.Create(Android.Content.Context? context, Android.Util.IAttributeSet? attrs) -> Android.Widget.EdgeEffect?
static AndroidX.Core.Widget.EdgeEffectCompat.GetDistance(Android.Widget.EdgeEffect? edgeEffect) -> float
static AndroidX.Core.Widget.EdgeEffectCompat.OnPull(Android.Widget.EdgeEffect? edgeEffect, float deltaDistance, float displacement) -> void
static AndroidX.Core.Widget.EdgeEffectCompat.OnPullDistance(Android.Widget.EdgeEffect? edgeEffect, float deltaDistance, float displacement) -> float
static AndroidX.Core.Widget.ImageViewCompat.GetImageTintList(Android.Widget.ImageView? view) -> Android.Content.Res.ColorStateList?
static AndroidX.Core.Widget.ImageViewCompat.GetImageTintMode(Android.Widget.ImageView? view) -> Android.Graphics.PorterDuff.Mode?
static AndroidX.Core.Widget.ImageViewCompat.SetImageTintList(Android.Widget.ImageView? view, Android.Content.Res.ColorStateList? tintList) -> void
static AndroidX.Core.Widget.ImageViewCompat.SetImageTintMode(Android.Widget.ImageView? view, Android.Graphics.PorterDuff.Mode? mode) -> void
static AndroidX.Core.Widget.ListPopupWindowCompat.CreateDragToOpenListener(Android.Widget.ListPopupWindow? listPopupWindow, Android.Views.View? src) -> Android.Views.View.IOnTouchListener?
static AndroidX.Core.Widget.ListPopupWindowCompat.CreateDragToOpenListener(Java.Lang.Object? listPopupWindow, Android.Views.View? src) -> Android.Views.View.IOnTouchListener?
static AndroidX.Core.Widget.ListViewCompat.CanScrollList(Android.Widget.ListView? listView, int direction) -> bool
static AndroidX.Core.Widget.ListViewCompat.ScrollListBy(Android.Widget.ListView? listView, int y) -> void
static AndroidX.Core.Widget.PopupMenuCompat.GetDragToOpenListener(Java.Lang.Object? popupMenu) -> Android.Views.View.IOnTouchListener?
static AndroidX.Core.Widget.PopupWindowCompat.GetOverlapAnchor(Android.Widget.PopupWindow? popupWindow) -> bool
static AndroidX.Core.Widget.PopupWindowCompat.GetWindowLayoutType(Android.Widget.PopupWindow? popupWindow) -> int
static AndroidX.Core.Widget.PopupWindowCompat.SetOverlapAnchor(Android.Widget.PopupWindow? popupWindow, bool overlapAnchor) -> void
static AndroidX.Core.Widget.PopupWindowCompat.SetWindowLayoutType(Android.Widget.PopupWindow? popupWindow, int layoutType) -> void
static AndroidX.Core.Widget.PopupWindowCompat.ShowAsDropDown(Android.Widget.PopupWindow? popup, Android.Views.View? anchor, int xoff, int yoff, int gravity) -> void
static AndroidX.Core.Widget.ScrollerCompat.Create(Android.Content.Context? context) -> AndroidX.Core.Widget.ScrollerCompat?
static AndroidX.Core.Widget.ScrollerCompat.Create(Android.Content.Context? context, Android.Views.Animations.IInterpolator? interpolator) -> AndroidX.Core.Widget.ScrollerCompat?
static AndroidX.Core.Widget.TextViewCompat.GetAutoSizeMaxTextSize(Android.Widget.TextView? textView) -> int
static AndroidX.Core.Widget.TextViewCompat.GetAutoSizeMinTextSize(Android.Widget.TextView? textView) -> int
static AndroidX.Core.Widget.TextViewCompat.GetAutoSizeStepGranularity(Android.Widget.TextView? textView) -> int
static AndroidX.Core.Widget.TextViewCompat.GetAutoSizeTextAvailableSizes(Android.Widget.TextView? textView) -> int[]?
static AndroidX.Core.Widget.TextViewCompat.GetAutoSizeTextType(Android.Widget.TextView? textView) -> int
static AndroidX.Core.Widget.TextViewCompat.GetCompoundDrawableTintList(Android.Widget.TextView? textView) -> Android.Content.Res.ColorStateList?
static AndroidX.Core.Widget.TextViewCompat.GetCompoundDrawableTintMode(Android.Widget.TextView? textView) -> Android.Graphics.PorterDuff.Mode?
static AndroidX.Core.Widget.TextViewCompat.GetCompoundDrawablesRelative(Android.Widget.TextView? textView) -> Android.Graphics.Drawables.Drawable![]?
static AndroidX.Core.Widget.TextViewCompat.GetFirstBaselineToTopHeight(Android.Widget.TextView? textView) -> int
static AndroidX.Core.Widget.TextViewCompat.GetLastBaselineToBottomHeight(Android.Widget.TextView? textView) -> int
static AndroidX.Core.Widget.TextViewCompat.GetMaxLines(Android.Widget.TextView? textView) -> int
static AndroidX.Core.Widget.TextViewCompat.GetMinLines(Android.Widget.TextView? textView) -> int
static AndroidX.Core.Widget.TextViewCompat.GetTextMetricsParams(Android.Widget.TextView? textView) -> AndroidX.Core.Text.PrecomputedTextCompat.Params?
static AndroidX.Core.Widget.TextViewCompat.SetAutoSizeTextTypeUniformWithConfiguration(Android.Widget.TextView? textView, int autoSizeMinTextSize, int autoSizeMaxTextSize, int autoSizeStepGranularity, int unit) -> void
static AndroidX.Core.Widget.TextViewCompat.SetAutoSizeTextTypeUniformWithPresetSizes(Android.Widget.TextView? textView, int[]? presetSizes, int unit) -> void
static AndroidX.Core.Widget.TextViewCompat.SetAutoSizeTextTypeWithDefaults(Android.Widget.TextView? textView, int autoSizeTextType) -> void
static AndroidX.Core.Widget.TextViewCompat.SetCompoundDrawableTintList(Android.Widget.TextView? textView, Android.Content.Res.ColorStateList? tint) -> void
static AndroidX.Core.Widget.TextViewCompat.SetCompoundDrawableTintMode(Android.Widget.TextView? textView, Android.Graphics.PorterDuff.Mode? tintMode) -> void
static AndroidX.Core.Widget.TextViewCompat.SetCompoundDrawablesRelative(Android.Widget.TextView? textView, Android.Graphics.Drawables.Drawable? start, Android.Graphics.Drawables.Drawable? top, Android.Graphics.Drawables.Drawable? end, Android.Graphics.Drawables.Drawable? bottom) -> void
static AndroidX.Core.Widget.TextViewCompat.SetCompoundDrawablesRelativeWithIntrinsicBounds(Android.Widget.TextView? textView, Android.Graphics.Drawables.Drawable? start, Android.Graphics.Drawables.Drawable? top, Android.Graphics.Drawables.Drawable? end, Android.Graphics.Drawables.Drawable? bottom) -> void
static AndroidX.Core.Widget.TextViewCompat.SetCompoundDrawablesRelativeWithIntrinsicBounds(Android.Widget.TextView? textView, int start, int top, int end, int bottom) -> void
static AndroidX.Core.Widget.TextViewCompat.SetCustomSelectionActionModeCallback(Android.Widget.TextView? textView, Android.Views.ActionMode.ICallback? callback) -> void
static AndroidX.Core.Widget.TextViewCompat.SetFirstBaselineToTopHeight(Android.Widget.TextView? textView, int firstBaselineToTopHeight) -> void
static AndroidX.Core.Widget.TextViewCompat.SetLastBaselineToBottomHeight(Android.Widget.TextView? textView, int lastBaselineToBottomHeight) -> void
static AndroidX.Core.Widget.TextViewCompat.SetLineHeight(Android.Widget.TextView? textView, int lineHeight) -> void
static AndroidX.Core.Widget.TextViewCompat.SetLineHeight(Android.Widget.TextView? textView, int unit, float lineHeight) -> void
static AndroidX.Core.Widget.TextViewCompat.SetPrecomputedText(Android.Widget.TextView? textView, AndroidX.Core.Text.PrecomputedTextCompat? precomputed) -> void
static AndroidX.Core.Widget.TextViewCompat.SetTextAppearance(Android.Widget.TextView? textView, int resId) -> void
static AndroidX.Core.Widget.TextViewCompat.SetTextMetricsParams(Android.Widget.TextView? textView, AndroidX.Core.Text.PrecomputedTextCompat.Params? params) -> void
static AndroidX.Core.Widget.TextViewCompat.UnwrapCustomSelectionActionModeCallback(Android.Views.ActionMode.ICallback? callback) -> Android.Views.ActionMode.ICallback?
static AndroidX.Core.Widget.TextViewCompat.WrapCustomSelectionActionModeCallback(Android.Widget.TextView? textView, Android.Views.ActionMode.ICallback? callback) -> Android.Views.ActionMode.ICallback?
virtual Android.Support.V4.App.NotificationSideChannelDefault.AsBinder() -> Android.OS.IBinder?
virtual Android.Support.V4.App.NotificationSideChannelDefault.Cancel(string? packageName, int id, string? tag) -> void
virtual Android.Support.V4.App.NotificationSideChannelDefault.CancelAll(string? packageName) -> void
virtual Android.Support.V4.App.NotificationSideChannelDefault.Notify(string? packageName, int id, string? tag, Android.App.Notification? notification) -> void
virtual Android.Support.V4.App.NotificationSideChannelStub.AsBinder() -> Android.OS.IBinder?
virtual Android.Support.V4.App.NotificationSideChannelStub.OnTransact(int code, Android.OS.Parcel? data, Android.OS.Parcel? reply, int flags) -> bool
virtual Android.Support.V4.OS.ResultReceiver.DescribeContents() -> int
virtual Android.Support.V4.OS.ResultReceiver.OnReceiveResult(int resultCode, Android.OS.Bundle? resultData) -> void
virtual Android.Support.V4.OS.ResultReceiver.Send(int resultCode, Android.OS.Bundle? resultData) -> void
virtual Android.Support.V4.OS.ResultReceiver.WriteToParcel(Android.OS.Parcel? out, Android.OS.ParcelableWriteFlags flags) -> void
virtual Android.Support.V4.OS.ResultReceiver2Default.AsBinder() -> Android.OS.IBinder?
virtual Android.Support.V4.OS.ResultReceiver2Default.Send(int resultCode, Android.OS.Bundle? resultData) -> void
virtual Android.Support.V4.OS.ResultReceiver2Stub.AsBinder() -> Android.OS.IBinder?
virtual Android.Support.V4.OS.ResultReceiver2Stub.OnTransact(int code, Android.OS.Parcel? data, Android.OS.Parcel? reply, int flags) -> bool
virtual Android.Support.V4.OS.ResultReceiverDefault.AsBinder() -> Android.OS.IBinder?
virtual Android.Support.V4.OS.ResultReceiverDefault.Send(int resultCode, Android.OS.Bundle? resultData) -> void
virtual Android.Support.V4.OS.ResultReceiverStub.AsBinder() -> Android.OS.IBinder?
virtual Android.Support.V4.OS.ResultReceiverStub.OnTransact(int code, Android.OS.Parcel? data, Android.OS.Parcel? reply, int flags) -> bool
virtual AndroidX.Core.App.ActivityOptionsCompat.LaunchBounds.get -> Android.Graphics.Rect?
virtual AndroidX.Core.App.ActivityOptionsCompat.LaunchDisplayId.get -> int
virtual AndroidX.Core.App.ActivityOptionsCompat.RequestUsageTimeReport(Android.App.PendingIntent? receiver) -> void
virtual AndroidX.Core.App.ActivityOptionsCompat.SetLaunchBounds(Android.Graphics.Rect? screenSpacePixelRect) -> AndroidX.Core.App.ActivityOptionsCompat?
virtual AndroidX.Core.App.ActivityOptionsCompat.SetLaunchDisplayId(int launchDisplayId) -> AndroidX.Core.App.ActivityOptionsCompat?
virtual AndroidX.Core.App.ActivityOptionsCompat.SetPendingIntentBackgroundActivityStartMode(int state) -> AndroidX.Core.App.ActivityOptionsCompat?
virtual AndroidX.Core.App.ActivityOptionsCompat.SetShareIdentityEnabled(bool shareIdentity) -> AndroidX.Core.App.ActivityOptionsCompat?
virtual AndroidX.Core.App.ActivityOptionsCompat.ToBundle() -> Android.OS.Bundle?
virtual AndroidX.Core.App.ActivityOptionsCompat.Update(AndroidX.Core.App.ActivityOptionsCompat? otherOptions) -> void
virtual AndroidX.Core.App.AppComponentFactory.InstantiateActivityCompat(Java.Lang.ClassLoader? cl, string? className, Android.Content.Intent? intent) -> Android.App.Activity?
virtual AndroidX.Core.App.AppComponentFactory.InstantiateApplicationCompat(Java.Lang.ClassLoader? cl, string? className) -> Android.App.Application?
virtual AndroidX.Core.App.AppComponentFactory.InstantiateProviderCompat(Java.Lang.ClassLoader? cl, string? className) -> Android.Content.ContentProvider?
virtual AndroidX.Core.App.AppComponentFactory.InstantiateReceiverCompat(Java.Lang.ClassLoader? cl, string? className, Android.Content.Intent? intent) -> Android.Content.BroadcastReceiver?
virtual AndroidX.Core.App.AppComponentFactory.InstantiateServiceCompat(Java.Lang.ClassLoader? cl, string? className, Android.Content.Intent? intent) -> Android.App.Service?
virtual AndroidX.Core.App.ComponentActivity.GetExtraData(Java.Lang.Class! extraDataClass) -> Java.Lang.Object?
virtual AndroidX.Core.App.ComponentActivity.Lifecycle.get -> AndroidX.Lifecycle.Lifecycle!
virtual AndroidX.Core.App.ComponentActivity.PutExtraData(AndroidX.Core.App.ComponentActivity.ExtraData! extraData) -> void
virtual AndroidX.Core.App.ComponentActivity.SuperDispatchKeyEvent(Android.Views.KeyEvent! e) -> bool
virtual AndroidX.Core.App.FrameMetricsAggregator.Add(Android.App.Activity? activity) -> void
virtual AndroidX.Core.App.FrameMetricsAggregator.GetMetrics() -> Android.Util.SparseIntArray![]?
virtual AndroidX.Core.App.FrameMetricsAggregator.Remove(Android.App.Activity? activity) -> Android.Util.SparseIntArray![]?
virtual AndroidX.Core.App.FrameMetricsAggregator.Reset() -> Android.Util.SparseIntArray![]?
virtual AndroidX.Core.App.FrameMetricsAggregator.Stop() -> Android.Util.SparseIntArray![]?
virtual AndroidX.Core.App.JobIntentService.IsStopped.get -> bool
virtual AndroidX.Core.App.JobIntentService.OnStopCurrentWork() -> bool
virtual AndroidX.Core.App.JobIntentService.SetInterruptIfStopped(bool interruptIfStopped) -> void
virtual AndroidX.Core.App.NotificationChannelCompat.AudioAttributes.get -> Android.Media.AudioAttributes?
virtual AndroidX.Core.App.NotificationChannelCompat.Builder.Build() -> AndroidX.Core.App.NotificationChannelCompat?
virtual AndroidX.Core.App.NotificationChannelCompat.Builder.SetConversationId(string? parentChannelId, string? conversationId) -> AndroidX.Core.App.NotificationChannelCompat.Builder?
virtual AndroidX.Core.App.NotificationChannelCompat.Builder.SetDescription(string? description) -> AndroidX.Core.App.NotificationChannelCompat.Builder?
virtual AndroidX.Core.App.NotificationChannelCompat.Builder.SetGroup(string? groupId) -> AndroidX.Core.App.NotificationChannelCompat.Builder?
virtual AndroidX.Core.App.NotificationChannelCompat.Builder.SetImportance(int importance) -> AndroidX.Core.App.NotificationChannelCompat.Builder?
virtual AndroidX.Core.App.NotificationChannelCompat.Builder.SetLightColor(int argb) -> AndroidX.Core.App.NotificationChannelCompat.Builder?
virtual AndroidX.Core.App.NotificationChannelCompat.Builder.SetLightsEnabled(bool lights) -> AndroidX.Core.App.NotificationChannelCompat.Builder?
virtual AndroidX.Core.App.NotificationChannelCompat.Builder.SetName(Java.Lang.ICharSequence? name) -> AndroidX.Core.App.NotificationChannelCompat.Builder?
virtual AndroidX.Core.App.NotificationChannelCompat.Builder.SetShowBadge(bool showBadge) -> AndroidX.Core.App.NotificationChannelCompat.Builder?
virtual AndroidX.Core.App.NotificationChannelCompat.Builder.SetSound(Android.Net.Uri? sound, Android.Media.AudioAttributes? audioAttributes) -> AndroidX.Core.App.NotificationChannelCompat.Builder?
virtual AndroidX.Core.App.NotificationChannelCompat.Builder.SetVibrationEnabled(bool vibration) -> AndroidX.Core.App.NotificationChannelCompat.Builder?
virtual AndroidX.Core.App.NotificationChannelCompat.Builder.SetVibrationPattern(long[]? vibrationPattern) -> AndroidX.Core.App.NotificationChannelCompat.Builder?
virtual AndroidX.Core.App.NotificationChannelCompat.CanBubble() -> bool
virtual AndroidX.Core.App.NotificationChannelCompat.CanBypassDnd() -> bool
virtual AndroidX.Core.App.NotificationChannelCompat.CanShowBadge() -> bool
virtual AndroidX.Core.App.NotificationChannelCompat.ConversationId.get -> string?
virtual AndroidX.Core.App.NotificationChannelCompat.Description.get -> string?
virtual AndroidX.Core.App.NotificationChannelCompat.GetVibrationPattern() -> long[]?
virtual AndroidX.Core.App.NotificationChannelCompat.Group.get -> string?
virtual AndroidX.Core.App.NotificationChannelCompat.Id.get -> string?
virtual AndroidX.Core.App.NotificationChannelCompat.Importance.get -> int
virtual AndroidX.Core.App.NotificationChannelCompat.IsImportantConversation.get -> bool
virtual AndroidX.Core.App.NotificationChannelCompat.LightColor.get -> int
virtual AndroidX.Core.App.NotificationChannelCompat.LockscreenVisibility.get -> int
virtual AndroidX.Core.App.NotificationChannelCompat.NameFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.App.NotificationChannelCompat.ParentChannelId.get -> string?
virtual AndroidX.Core.App.NotificationChannelCompat.ShouldShowLights() -> bool
virtual AndroidX.Core.App.NotificationChannelCompat.ShouldVibrate() -> bool
virtual AndroidX.Core.App.NotificationChannelCompat.Sound.get -> Android.Net.Uri?
virtual AndroidX.Core.App.NotificationChannelCompat.ToBuilder() -> AndroidX.Core.App.NotificationChannelCompat.Builder?
virtual AndroidX.Core.App.NotificationChannelGroupCompat.Builder.Build() -> AndroidX.Core.App.NotificationChannelGroupCompat?
virtual AndroidX.Core.App.NotificationChannelGroupCompat.Builder.SetDescription(string? description) -> AndroidX.Core.App.NotificationChannelGroupCompat.Builder?
virtual AndroidX.Core.App.NotificationChannelGroupCompat.Builder.SetName(Java.Lang.ICharSequence? name) -> AndroidX.Core.App.NotificationChannelGroupCompat.Builder?
virtual AndroidX.Core.App.NotificationChannelGroupCompat.Channels.get -> System.Collections.Generic.IList<AndroidX.Core.App.NotificationChannelCompat!>?
virtual AndroidX.Core.App.NotificationChannelGroupCompat.Description.get -> string?
virtual AndroidX.Core.App.NotificationChannelGroupCompat.Id.get -> string?
virtual AndroidX.Core.App.NotificationChannelGroupCompat.IsBlocked.get -> bool
virtual AndroidX.Core.App.NotificationChannelGroupCompat.NameFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.App.NotificationChannelGroupCompat.ToBuilder() -> AndroidX.Core.App.NotificationChannelGroupCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Action.ActionIntent.get -> Android.App.PendingIntent?
virtual AndroidX.Core.App.NotificationCompat.Action.AllowGeneratedReplies.get -> bool
virtual AndroidX.Core.App.NotificationCompat.Action.Extras.get -> Android.OS.Bundle?
virtual AndroidX.Core.App.NotificationCompat.Action.Icon.get -> int
virtual AndroidX.Core.App.NotificationCompat.Action.IconCompat.get -> AndroidX.Core.Graphics.Drawable.IconCompat?
virtual AndroidX.Core.App.NotificationCompat.Action.IsAuthenticationRequired.get -> bool
virtual AndroidX.Core.App.NotificationCompat.Action.IsContextual.get -> bool
virtual AndroidX.Core.App.NotificationCompat.Action.SemanticAction.get -> int
virtual AndroidX.Core.App.NotificationCompat.Action.ShowsUserInterface.get -> bool
virtual AndroidX.Core.App.NotificationCompat.Action.TitleFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.App.NotificationCompat.Action._GetDataOnlyRemoteInputs() -> AndroidX.Core.App.RemoteInput![]?
virtual AndroidX.Core.App.NotificationCompat.Action._GetRemoteInputs() -> AndroidX.Core.App.RemoteInput![]?
virtual AndroidX.Core.App.NotificationCompat.BigPictureStyle.BigLargeIcon(Android.Graphics.Bitmap? b) -> AndroidX.Core.App.NotificationCompat.BigPictureStyle?
virtual AndroidX.Core.App.NotificationCompat.BigPictureStyle.BigLargeIcon(Android.Graphics.Drawables.Icon? i) -> AndroidX.Core.App.NotificationCompat.BigPictureStyle?
virtual AndroidX.Core.App.NotificationCompat.BigPictureStyle.BigPicture(Android.Graphics.Bitmap? b) -> AndroidX.Core.App.NotificationCompat.BigPictureStyle?
virtual AndroidX.Core.App.NotificationCompat.BigPictureStyle.BigPicture(Android.Graphics.Drawables.Icon? i) -> AndroidX.Core.App.NotificationCompat.BigPictureStyle?
virtual AndroidX.Core.App.NotificationCompat.BigPictureStyle.SetBigContentTitle(Java.Lang.ICharSequence? title) -> AndroidX.Core.App.NotificationCompat.BigPictureStyle?
virtual AndroidX.Core.App.NotificationCompat.BigPictureStyle.SetContentDescription(Java.Lang.ICharSequence? contentDescription) -> AndroidX.Core.App.NotificationCompat.BigPictureStyle?
virtual AndroidX.Core.App.NotificationCompat.BigPictureStyle.SetSummaryText(Java.Lang.ICharSequence? cs) -> AndroidX.Core.App.NotificationCompat.BigPictureStyle?
virtual AndroidX.Core.App.NotificationCompat.BigPictureStyle.ShowBigPictureWhenCollapsed(bool show) -> AndroidX.Core.App.NotificationCompat.BigPictureStyle?
virtual AndroidX.Core.App.NotificationCompat.BigTextStyle.BigText(Java.Lang.ICharSequence? cs) -> AndroidX.Core.App.NotificationCompat.BigTextStyle?
virtual AndroidX.Core.App.NotificationCompat.BigTextStyle.SetBigContentTitle(Java.Lang.ICharSequence? title) -> AndroidX.Core.App.NotificationCompat.BigTextStyle?
virtual AndroidX.Core.App.NotificationCompat.BigTextStyle.SetSummaryText(Java.Lang.ICharSequence? cs) -> AndroidX.Core.App.NotificationCompat.BigTextStyle?
virtual AndroidX.Core.App.NotificationCompat.Builder.AddAction(AndroidX.Core.App.NotificationCompat.Action? action) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.AddAction(int icon, Java.Lang.ICharSequence? title, Android.App.PendingIntent? intent) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.AddExtras(Android.OS.Bundle? extras) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.AddInvisibleAction(AndroidX.Core.App.NotificationCompat.Action? action) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.AddInvisibleAction(int icon, Java.Lang.ICharSequence? title, Android.App.PendingIntent? intent) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.AddPerson(AndroidX.Core.App.Person? person) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.AddPerson(string? uri) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.BigContentView.get -> Android.Widget.RemoteViews?
virtual AndroidX.Core.App.NotificationCompat.Builder.BubbleMetadata.get -> AndroidX.Core.App.NotificationCompat.BubbleMetadata?
virtual AndroidX.Core.App.NotificationCompat.Builder.Build() -> Android.App.Notification?
virtual AndroidX.Core.App.NotificationCompat.Builder.ClearActions() -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.ClearInvisibleActions() -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.ClearPeople() -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.Color.get -> int
virtual AndroidX.Core.App.NotificationCompat.Builder.ContentView.get -> Android.Widget.RemoteViews?
virtual AndroidX.Core.App.NotificationCompat.Builder.CreateBigContentView() -> Android.Widget.RemoteViews?
virtual AndroidX.Core.App.NotificationCompat.Builder.CreateContentView() -> Android.Widget.RemoteViews?
virtual AndroidX.Core.App.NotificationCompat.Builder.CreateHeadsUpContentView() -> Android.Widget.RemoteViews?
virtual AndroidX.Core.App.NotificationCompat.Builder.Extend(AndroidX.Core.App.NotificationCompat.IExtender? extender) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.Extras.get -> Android.OS.Bundle?
virtual AndroidX.Core.App.NotificationCompat.Builder.ForegroundServiceBehavior.get -> int
virtual AndroidX.Core.App.NotificationCompat.Builder.HeadsUpContentView.get -> Android.Widget.RemoteViews?
virtual AndroidX.Core.App.NotificationCompat.Builder.Notification.get -> Android.App.Notification?
virtual AndroidX.Core.App.NotificationCompat.Builder.Priority.get -> int
virtual AndroidX.Core.App.NotificationCompat.Builder.SetAllowSystemGeneratedContextualActions(bool allowed) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetAutoCancel(bool autoCancel) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetBadgeIconType(int icon) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetBubbleMetadata(AndroidX.Core.App.NotificationCompat.BubbleMetadata? data) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetCategory(string? category) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetChannelId(string? channelId) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetChronometerCountDown(bool countsDown) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetColor(int argb) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetColorized(bool colorize) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetContent(Android.Widget.RemoteViews? views) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetContentInfo(Java.Lang.ICharSequence? info) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetContentIntent(Android.App.PendingIntent? intent) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetContentText(Java.Lang.ICharSequence? text) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetContentTitle(Java.Lang.ICharSequence? title) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetCustomBigContentView(Android.Widget.RemoteViews? contentView) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetCustomContentView(Android.Widget.RemoteViews? contentView) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetCustomHeadsUpContentView(Android.Widget.RemoteViews? contentView) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetDefaults(int defaults) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetDeleteIntent(Android.App.PendingIntent? intent) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetExtras(Android.OS.Bundle? extras) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetForegroundServiceBehavior(int behavior) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetFullScreenIntent(Android.App.PendingIntent? intent, bool highPriority) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetGroup(string? groupKey) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetGroupAlertBehavior(int groupAlertBehavior) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetGroupSummary(bool isGroupSummary) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetLargeIcon(Android.Graphics.Bitmap? icon) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetLargeIcon(Android.Graphics.Drawables.Icon? icon) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetLights(int argb, int onMs, int offMs) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetLocalOnly(bool b) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetLocusId(AndroidX.Core.Content.LocusIdCompat? locusId) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetNotificationSilent() -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetNumber(int number) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetOngoing(bool ongoing) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetOnlyAlertOnce(bool onlyAlertOnce) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetPriority(int pri) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetProgress(int max, int progress, bool indeterminate) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetPublicVersion(Android.App.Notification? n) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetRemoteInputHistory(Java.Lang.ICharSequence![]? text) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetRequestPromotedOngoing(bool requestPromotedOngoing) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetSettingsText(Java.Lang.ICharSequence? text) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetShortCriticalText(string? shortCriticalText) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetShortcutId(string? shortcutId) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetShortcutInfo(AndroidX.Core.Content.PM.ShortcutInfoCompat? shortcutInfo) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetShowWhen(bool show) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetSilent(bool silent) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetSmallIcon(AndroidX.Core.Graphics.Drawable.IconCompat? icon) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetSmallIcon(int icon) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetSmallIcon(int icon, int level) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetSortKey(string? sortKey) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetSound(Android.Net.Uri? sound) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetSound(Android.Net.Uri? sound, int streamType) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetStyle(AndroidX.Core.App.NotificationCompat.Style? style) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetSubText(Java.Lang.ICharSequence? text) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetTicker(Java.Lang.ICharSequence? tickerText) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetTicker(Java.Lang.ICharSequence? tickerText, Android.Widget.RemoteViews? views) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetTimeoutAfter(long durationMs) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetUsesChronometer(bool b) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetVibrate(long[]? pattern) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetVisibility(int visibility) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.SetWhen(long when) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Core.App.NotificationCompat.Builder.WhenIfShowing.get -> long
virtual AndroidX.Core.App.NotificationCompat.CallStyle.ActionsListWithSystemActions.get -> System.Collections.Generic.IList<AndroidX.Core.App.NotificationCompat.Action!>?
virtual AndroidX.Core.App.NotificationCompat.CallStyle.SetAnswerButtonColorHint(int color) -> AndroidX.Core.App.NotificationCompat.CallStyle?
virtual AndroidX.Core.App.NotificationCompat.CallStyle.SetDeclineButtonColorHint(int color) -> AndroidX.Core.App.NotificationCompat.CallStyle?
virtual AndroidX.Core.App.NotificationCompat.CallStyle.SetIsVideo(bool isVideo) -> AndroidX.Core.App.NotificationCompat.CallStyle?
virtual AndroidX.Core.App.NotificationCompat.CallStyle.SetVerificationIcon(Android.Graphics.Bitmap? verificationIcon) -> AndroidX.Core.App.NotificationCompat.CallStyle?
virtual AndroidX.Core.App.NotificationCompat.CallStyle.SetVerificationIcon(Android.Graphics.Drawables.Icon? verificationIcon) -> AndroidX.Core.App.NotificationCompat.CallStyle?
virtual AndroidX.Core.App.NotificationCompat.CallStyle.SetVerificationText(Java.Lang.ICharSequence? verificationText) -> AndroidX.Core.App.NotificationCompat.CallStyle?
virtual AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.Builder.AddMessage(string? message) -> AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.Builder?
virtual AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.Builder.Build() -> AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation?
virtual AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.Builder.SetLatestTimestamp(long timestamp) -> AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.Builder?
virtual AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.Builder.SetReadPendingIntent(Android.App.PendingIntent? pendingIntent) -> AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.Builder?
virtual AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.Builder.SetReplyAction(Android.App.PendingIntent? pendingIntent, AndroidX.Core.App.RemoteInput? remoteInput) -> AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.Builder?
virtual AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.GetMessages() -> string![]?
virtual AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.GetParticipants() -> string![]?
virtual AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.LatestTimestamp.get -> long
virtual AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.Participant.get -> string?
virtual AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.ReadPendingIntent.get -> Android.App.PendingIntent?
virtual AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.RemoteInput.get -> AndroidX.Core.App.RemoteInput?
virtual AndroidX.Core.App.NotificationCompat.CarExtender.UnreadConversation.ReplyPendingIntent.get -> Android.App.PendingIntent?
virtual AndroidX.Core.App.NotificationCompat.InboxStyle.AddLine(Java.Lang.ICharSequence? cs) -> AndroidX.Core.App.NotificationCompat.InboxStyle?
virtual AndroidX.Core.App.NotificationCompat.InboxStyle.SetBigContentTitle(Java.Lang.ICharSequence? title) -> AndroidX.Core.App.NotificationCompat.InboxStyle?
virtual AndroidX.Core.App.NotificationCompat.InboxStyle.SetSummaryText(Java.Lang.ICharSequence? cs) -> AndroidX.Core.App.NotificationCompat.InboxStyle?
virtual AndroidX.Core.App.NotificationCompat.MessagingStyle.AddHistoricMessage(AndroidX.Core.App.NotificationCompat.MessagingStyle.Message? message) -> AndroidX.Core.App.NotificationCompat.MessagingStyle?
virtual AndroidX.Core.App.NotificationCompat.MessagingStyle.AddMessage(AndroidX.Core.App.NotificationCompat.MessagingStyle.Message? message) -> AndroidX.Core.App.NotificationCompat.MessagingStyle?
virtual AndroidX.Core.App.NotificationCompat.MessagingStyle.AddMessage(Java.Lang.ICharSequence? text, long timestamp, AndroidX.Core.App.Person? person) -> AndroidX.Core.App.NotificationCompat.MessagingStyle?
virtual AndroidX.Core.App.NotificationCompat.MessagingStyle.AddMessage(Java.Lang.ICharSequence? text, long timestamp, Java.Lang.ICharSequence? sender) -> AndroidX.Core.App.NotificationCompat.MessagingStyle?
virtual AndroidX.Core.App.NotificationCompat.MessagingStyle.ConversationTitleFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.App.NotificationCompat.MessagingStyle.HistoricMessages.get -> System.Collections.Generic.IList<AndroidX.Core.App.NotificationCompat.MessagingStyle.Message!>?
virtual AndroidX.Core.App.NotificationCompat.MessagingStyle.IsGroupConversation.get -> bool
virtual AndroidX.Core.App.NotificationCompat.MessagingStyle.Messages.get -> System.Collections.Generic.IList<AndroidX.Core.App.NotificationCompat.MessagingStyle.Message!>?
virtual AndroidX.Core.App.NotificationCompat.MessagingStyle.SetConversationTitle(Java.Lang.ICharSequence? conversationTitle) -> AndroidX.Core.App.NotificationCompat.MessagingStyle?
virtual AndroidX.Core.App.NotificationCompat.MessagingStyle.SetGroupConversation(bool isGroupConversation) -> AndroidX.Core.App.NotificationCompat.MessagingStyle?
virtual AndroidX.Core.App.NotificationCompat.MessagingStyle.User.get -> AndroidX.Core.App.Person?
virtual AndroidX.Core.App.NotificationCompat.MessagingStyle.UserDisplayNameFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.App.NotificationCompat.ProgressStyle.AddProgressPoint(AndroidX.Core.App.NotificationCompat.ProgressStyle.Point? point) -> AndroidX.Core.App.NotificationCompat.ProgressStyle?
virtual AndroidX.Core.App.NotificationCompat.ProgressStyle.AddProgressSegment(AndroidX.Core.App.NotificationCompat.ProgressStyle.Segment? segment) -> AndroidX.Core.App.NotificationCompat.ProgressStyle?
virtual AndroidX.Core.App.NotificationCompat.ProgressStyle.IsProgressIndeterminate.get -> bool
virtual AndroidX.Core.App.NotificationCompat.ProgressStyle.IsStyledByProgress.get -> bool
virtual AndroidX.Core.App.NotificationCompat.ProgressStyle.Progress.get -> int
virtual AndroidX.Core.App.NotificationCompat.ProgressStyle.ProgressEndIcon.get -> AndroidX.Core.Graphics.Drawable.IconCompat?
virtual AndroidX.Core.App.NotificationCompat.ProgressStyle.ProgressMax.get -> int
virtual AndroidX.Core.App.NotificationCompat.ProgressStyle.ProgressPoints.get -> System.Collections.Generic.IList<AndroidX.Core.App.NotificationCompat.ProgressStyle.Point!>?
virtual AndroidX.Core.App.NotificationCompat.ProgressStyle.ProgressSegments.get -> System.Collections.Generic.IList<AndroidX.Core.App.NotificationCompat.ProgressStyle.Segment!>?
virtual AndroidX.Core.App.NotificationCompat.ProgressStyle.ProgressStartIcon.get -> AndroidX.Core.Graphics.Drawable.IconCompat?
virtual AndroidX.Core.App.NotificationCompat.ProgressStyle.ProgressTrackerIcon.get -> AndroidX.Core.Graphics.Drawable.IconCompat?
virtual AndroidX.Core.App.NotificationCompat.ProgressStyle.SetProgress(int progress) -> AndroidX.Core.App.NotificationCompat.ProgressStyle?
virtual AndroidX.Core.App.NotificationCompat.ProgressStyle.SetProgressEndIcon(AndroidX.Core.Graphics.Drawable.IconCompat? endIcon) -> AndroidX.Core.App.NotificationCompat.ProgressStyle?
virtual AndroidX.Core.App.NotificationCompat.ProgressStyle.SetProgressIndeterminate(bool indeterminate) -> AndroidX.Core.App.NotificationCompat.ProgressStyle?
virtual AndroidX.Core.App.NotificationCompat.ProgressStyle.SetProgressPoints(System.Collections.Generic.IList<AndroidX.Core.App.NotificationCompat.ProgressStyle.Point!>? points) -> AndroidX.Core.App.NotificationCompat.ProgressStyle?
virtual AndroidX.Core.App.NotificationCompat.ProgressStyle.SetProgressSegments(System.Collections.Generic.IList<AndroidX.Core.App.NotificationCompat.ProgressStyle.Segment!>? progressSegments) -> AndroidX.Core.App.NotificationCompat.ProgressStyle?
virtual AndroidX.Core.App.NotificationCompat.ProgressStyle.SetProgressStartIcon(AndroidX.Core.Graphics.Drawable.IconCompat? startIcon) -> AndroidX.Core.App.NotificationCompat.ProgressStyle?
virtual AndroidX.Core.App.NotificationCompat.ProgressStyle.SetProgressTrackerIcon(AndroidX.Core.Graphics.Drawable.IconCompat? trackerIcon) -> AndroidX.Core.App.NotificationCompat.ProgressStyle?
virtual AndroidX.Core.App.NotificationCompat.ProgressStyle.SetStyledByProgress(bool enabled) -> AndroidX.Core.App.NotificationCompat.ProgressStyle?
virtual AndroidX.Core.App.NotificationCompat.Style.AddCompatExtras(Android.OS.Bundle? extras) -> void
virtual AndroidX.Core.App.NotificationCompat.Style.Apply(AndroidX.Core.App.INotificationBuilderWithBuilderAccessor? builder) -> void
virtual AndroidX.Core.App.NotificationCompat.Style.ApplyStandardTemplate(bool showSmallIcon, int resId, bool fitIn1U) -> Android.Widget.RemoteViews?
virtual AndroidX.Core.App.NotificationCompat.Style.Build() -> Android.App.Notification?
virtual AndroidX.Core.App.NotificationCompat.Style.BuildIntoRemoteViews(Android.Widget.RemoteViews? outerView, Android.Widget.RemoteViews? innerView) -> void
virtual AndroidX.Core.App.NotificationCompat.Style.ClassName.get -> string?
virtual AndroidX.Core.App.NotificationCompat.Style.ClearCompatExtraKeys(Android.OS.Bundle? extras) -> void
virtual AndroidX.Core.App.NotificationCompat.Style.CreateColoredBitmap(int iconId, int color) -> Android.Graphics.Bitmap?
virtual AndroidX.Core.App.NotificationCompat.Style.DisplayCustomViewInline() -> bool
virtual AndroidX.Core.App.NotificationCompat.Style.MakeBigContentView(AndroidX.Core.App.INotificationBuilderWithBuilderAccessor? builder) -> Android.Widget.RemoteViews?
virtual AndroidX.Core.App.NotificationCompat.Style.MakeContentView(AndroidX.Core.App.INotificationBuilderWithBuilderAccessor? builder) -> Android.Widget.RemoteViews?
virtual AndroidX.Core.App.NotificationCompat.Style.MakeHeadsUpContentView(AndroidX.Core.App.INotificationBuilderWithBuilderAccessor? builder) -> Android.Widget.RemoteViews?
virtual AndroidX.Core.App.NotificationCompat.Style.RestoreFromCompatExtras(Android.OS.Bundle? extras) -> void
virtual AndroidX.Core.App.NotificationCompat.Style.SetBuilder(AndroidX.Core.App.NotificationCompat.Builder? builder) -> void
virtual AndroidX.Core.App.Person.Builder.Build() -> AndroidX.Core.App.Person?
virtual AndroidX.Core.App.Person.Builder.SetBot(bool bot) -> AndroidX.Core.App.Person.Builder?
virtual AndroidX.Core.App.Person.Builder.SetIcon(AndroidX.Core.Graphics.Drawable.IconCompat? icon) -> AndroidX.Core.App.Person.Builder?
virtual AndroidX.Core.App.Person.Builder.SetImportant(bool important) -> AndroidX.Core.App.Person.Builder?
virtual AndroidX.Core.App.Person.Builder.SetKey(string? key) -> AndroidX.Core.App.Person.Builder?
virtual AndroidX.Core.App.Person.Builder.SetName(Java.Lang.ICharSequence? name) -> AndroidX.Core.App.Person.Builder?
virtual AndroidX.Core.App.Person.Builder.SetUri(string? uri) -> AndroidX.Core.App.Person.Builder?
virtual AndroidX.Core.App.Person.Icon.get -> AndroidX.Core.Graphics.Drawable.IconCompat?
virtual AndroidX.Core.App.Person.IsBot.get -> bool
virtual AndroidX.Core.App.Person.IsImportant.get -> bool
virtual AndroidX.Core.App.Person.Key.get -> string?
virtual AndroidX.Core.App.Person.NameFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.App.Person.ResolveToLegacyUri() -> string?
virtual AndroidX.Core.App.Person.ToAndroidPerson() -> Android.App.Person?
virtual AndroidX.Core.App.Person.ToBuilder() -> AndroidX.Core.App.Person.Builder?
virtual AndroidX.Core.App.Person.ToBundle() -> Android.OS.Bundle?
virtual AndroidX.Core.App.Person.ToPersistableBundle() -> Android.OS.PersistableBundle?
virtual AndroidX.Core.App.Person.Uri.get -> string?
virtual AndroidX.Core.App.ShareCompat.IntentBuilder.AddEmailBcc(string![]? addresses) -> AndroidX.Core.App.ShareCompat.IntentBuilder?
virtual AndroidX.Core.App.ShareCompat.IntentBuilder.AddEmailBcc(string? address) -> AndroidX.Core.App.ShareCompat.IntentBuilder?
virtual AndroidX.Core.App.ShareCompat.IntentBuilder.AddEmailCc(string![]? addresses) -> AndroidX.Core.App.ShareCompat.IntentBuilder?
virtual AndroidX.Core.App.ShareCompat.IntentBuilder.AddEmailCc(string? address) -> AndroidX.Core.App.ShareCompat.IntentBuilder?
virtual AndroidX.Core.App.ShareCompat.IntentBuilder.AddEmailTo(string![]? addresses) -> AndroidX.Core.App.ShareCompat.IntentBuilder?
virtual AndroidX.Core.App.ShareCompat.IntentBuilder.AddEmailTo(string? address) -> AndroidX.Core.App.ShareCompat.IntentBuilder?
virtual AndroidX.Core.App.ShareCompat.IntentBuilder.AddStream(Android.Net.Uri? streamUri) -> AndroidX.Core.App.ShareCompat.IntentBuilder?
virtual AndroidX.Core.App.ShareCompat.IntentBuilder.CreateChooserIntent() -> Android.Content.Intent?
virtual AndroidX.Core.App.ShareCompat.IntentBuilder.Intent.get -> Android.Content.Intent?
virtual AndroidX.Core.App.ShareCompat.IntentBuilder.SetChooserTitle(Java.Lang.ICharSequence? title) -> AndroidX.Core.App.ShareCompat.IntentBuilder?
virtual AndroidX.Core.App.ShareCompat.IntentBuilder.SetChooserTitle(int resId) -> AndroidX.Core.App.ShareCompat.IntentBuilder?
virtual AndroidX.Core.App.ShareCompat.IntentBuilder.SetEmailBcc(string![]? addresses) -> AndroidX.Core.App.ShareCompat.IntentBuilder?
virtual AndroidX.Core.App.ShareCompat.IntentBuilder.SetEmailCc(string![]? addresses) -> AndroidX.Core.App.ShareCompat.IntentBuilder?
virtual AndroidX.Core.App.ShareCompat.IntentBuilder.SetEmailTo(string![]? addresses) -> AndroidX.Core.App.ShareCompat.IntentBuilder?
virtual AndroidX.Core.App.ShareCompat.IntentBuilder.SetHtmlText(string? htmlText) -> AndroidX.Core.App.ShareCompat.IntentBuilder?
virtual AndroidX.Core.App.ShareCompat.IntentBuilder.SetStream(Android.Net.Uri? streamUri) -> AndroidX.Core.App.ShareCompat.IntentBuilder?
virtual AndroidX.Core.App.ShareCompat.IntentBuilder.SetSubject(string? subject) -> AndroidX.Core.App.ShareCompat.IntentBuilder?
virtual AndroidX.Core.App.ShareCompat.IntentBuilder.SetText(Java.Lang.ICharSequence? text) -> AndroidX.Core.App.ShareCompat.IntentBuilder?
virtual AndroidX.Core.App.ShareCompat.IntentBuilder.SetType(string? mimeType) -> AndroidX.Core.App.ShareCompat.IntentBuilder?
virtual AndroidX.Core.App.ShareCompat.IntentBuilder.StartChooser() -> void
virtual AndroidX.Core.App.ShareCompat.IntentReader.CallingActivity.get -> Android.Content.ComponentName?
virtual AndroidX.Core.App.ShareCompat.IntentReader.CallingActivityIcon.get -> Android.Graphics.Drawables.Drawable?
virtual AndroidX.Core.App.ShareCompat.IntentReader.CallingApplicationIcon.get -> Android.Graphics.Drawables.Drawable?
virtual AndroidX.Core.App.ShareCompat.IntentReader.CallingApplicationLabelFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.App.ShareCompat.IntentReader.CallingPackage.get -> string?
virtual AndroidX.Core.App.ShareCompat.IntentReader.GetEmailBcc() -> string![]?
virtual AndroidX.Core.App.ShareCompat.IntentReader.GetEmailCc() -> string![]?
virtual AndroidX.Core.App.ShareCompat.IntentReader.GetEmailTo() -> string![]?
virtual AndroidX.Core.App.ShareCompat.IntentReader.GetStream(int index) -> Android.Net.Uri?
virtual AndroidX.Core.App.ShareCompat.IntentReader.HtmlText.get -> string?
virtual AndroidX.Core.App.ShareCompat.IntentReader.IsMultipleShare.get -> bool
virtual AndroidX.Core.App.ShareCompat.IntentReader.IsShareIntent.get -> bool
virtual AndroidX.Core.App.ShareCompat.IntentReader.IsSingleShare.get -> bool
virtual AndroidX.Core.App.ShareCompat.IntentReader.Stream.get -> Android.Net.Uri?
virtual AndroidX.Core.App.ShareCompat.IntentReader.StreamCount.get -> int
virtual AndroidX.Core.App.ShareCompat.IntentReader.Subject.get -> string?
virtual AndroidX.Core.App.ShareCompat.IntentReader.TextFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.App.ShareCompat.IntentReader.Type.get -> string?
virtual AndroidX.Core.App.SharedElementCallback.OnCaptureSharedElementSnapshot(Android.Views.View? sharedElement, Android.Graphics.Matrix? viewToGlobalMatrix, Android.Graphics.RectF? screenBounds) -> Android.OS.IParcelable?
virtual AndroidX.Core.App.SharedElementCallback.OnCreateSnapshotView(Android.Content.Context? context, Android.OS.IParcelable? snapshot) -> Android.Views.View?
virtual AndroidX.Core.App.SharedElementCallback.OnMapSharedElements(System.Collections.Generic.IList<string!>? names, System.Collections.Generic.IDictionary<string!, Android.Views.View!>? sharedElements) -> void
virtual AndroidX.Core.App.SharedElementCallback.OnRejectSharedElements(System.Collections.Generic.IList<Android.Views.View!>? rejectedSharedElements) -> void
virtual AndroidX.Core.App.SharedElementCallback.OnSharedElementEnd(System.Collections.Generic.IList<string!>? sharedElementNames, System.Collections.Generic.IList<Android.Views.View!>? sharedElements, System.Collections.Generic.IList<Android.Views.View!>? sharedElementSnapshots) -> void
virtual AndroidX.Core.App.SharedElementCallback.OnSharedElementStart(System.Collections.Generic.IList<string!>? sharedElementNames, System.Collections.Generic.IList<Android.Views.View!>? sharedElements, System.Collections.Generic.IList<Android.Views.View!>? sharedElementSnapshots) -> void
virtual AndroidX.Core.App.SharedElementCallback.OnSharedElementsArrived(System.Collections.Generic.IList<string!>? sharedElementNames, System.Collections.Generic.IList<Android.Views.View!>? sharedElements, AndroidX.Core.App.SharedElementCallback.IOnSharedElementsReadyListener? listener) -> void
virtual AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackDefault.AsBinder() -> Android.OS.IBinder?
virtual AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackDefault.OnIsPermissionRevocationEnabledForAppResult(bool success, bool isEnabled) -> void
virtual AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackStub.AsBinder() -> Android.OS.IBinder?
virtual AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportCallbackStub.OnTransact(int code, Android.OS.Parcel? data, Android.OS.Parcel? reply, int flags) -> bool
virtual AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceDefault.AsBinder() -> Android.OS.IBinder?
virtual AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceDefault.IsPermissionRevocationEnabledForApp(AndroidX.Core.App.UnusedAppRestrictions.IUnusedAppRestrictionsBackportCallback? callback) -> void
virtual AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceStub.AsBinder() -> Android.OS.IBinder?
virtual AndroidX.Core.App.UnusedAppRestrictions.UnusedAppRestrictionsBackportServiceStub.OnTransact(int code, Android.OS.Parcel? data, Android.OS.Parcel? reply, int flags) -> bool
virtual AndroidX.Core.Content.IntentSanitizer.Sanitize(Android.Content.Intent? in, AndroidX.Core.Util.IConsumer? penalty) -> Android.Content.Intent?
virtual AndroidX.Core.Content.IntentSanitizer.SanitizeByFiltering(Android.Content.Intent? in) -> Android.Content.Intent?
virtual AndroidX.Core.Content.IntentSanitizer.SanitizeByThrowing(Android.Content.Intent? in) -> Android.Content.Intent?
virtual AndroidX.Core.Content.PM.ShortcutInfoChangeListener.OnAllShortcutsRemoved() -> void
virtual AndroidX.Core.Content.PM.ShortcutInfoChangeListener.OnShortcutAdded(System.Collections.Generic.IList<AndroidX.Core.Content.PM.ShortcutInfoCompat!>? shortcuts) -> void
virtual AndroidX.Core.Content.PM.ShortcutInfoChangeListener.OnShortcutRemoved(System.Collections.Generic.IList<string!>? shortcutIds) -> void
virtual AndroidX.Core.Content.PM.ShortcutInfoChangeListener.OnShortcutUpdated(System.Collections.Generic.IList<AndroidX.Core.Content.PM.ShortcutInfoCompat!>? shortcuts) -> void
virtual AndroidX.Core.Content.PM.ShortcutInfoChangeListener.OnShortcutUsageReported(System.Collections.Generic.IList<string!>? shortcutIds) -> void
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Activity.get -> Android.Content.ComponentName?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.AddCapabilityBinding(string? capability) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.AddCapabilityBinding(string? capability, string? parameter, System.Collections.Generic.IList<string!>? parameterValues) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.Build() -> AndroidX.Core.Content.PM.ShortcutInfoCompat?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetActivity(Android.Content.ComponentName? activity) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetAlwaysBadged() -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetCategories(System.Collections.Generic.ICollection<string!>? categories) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetDisabledMessage(Java.Lang.ICharSequence? disabledMessage) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetExcludedFromSurfaces(int surfaces) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetExtras(Android.OS.PersistableBundle? extras) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetIcon(AndroidX.Core.Graphics.Drawable.IconCompat? icon) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetIntent(Android.Content.Intent? intent) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetIntents(Android.Content.Intent![]? intents) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetIsConversation() -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetLocusId(AndroidX.Core.Content.LocusIdCompat? locusId) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetLongLabel(Java.Lang.ICharSequence? longLabel) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetLongLived() -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetLongLived(bool longLived) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetPerson(AndroidX.Core.App.Person? person) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetPersons(AndroidX.Core.App.Person![]? persons) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetRank(int rank) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetShortLabel(Java.Lang.ICharSequence? shortLabel) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetSliceUri(Android.Net.Uri? sliceUri) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder.SetTransientExtras(Android.OS.Bundle? transientExtras) -> AndroidX.Core.Content.PM.ShortcutInfoCompat.Builder?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Categories.get -> System.Collections.Generic.ICollection<string!>?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.DisabledMessageFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.DisabledReason.get -> int
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.ExcludedFromSurfaces.get -> int
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Extras.get -> Android.OS.PersistableBundle?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.GetIntents() -> Android.Content.Intent![]?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.HasKeyFieldsOnly.get -> bool
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Icon.get -> AndroidX.Core.Graphics.Drawable.IconCompat?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Id.get -> string?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Intent.get -> Android.Content.Intent?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.IsCached.get -> bool
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.IsDeclaredInManifest.get -> bool
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.IsDynamic.get -> bool
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.IsEnabled.get -> bool
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.IsExcludedFromSurfaces(int surface) -> bool
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.IsImmutable.get -> bool
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.IsPinned.get -> bool
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.LastChangedTimestamp.get -> long
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.LocusId.get -> AndroidX.Core.Content.LocusIdCompat?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.LongLabelFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Package.get -> string?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.Rank.get -> int
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.ShortLabelFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.ToShortcutInfo() -> Android.Content.PM.ShortcutInfo?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.TransientExtras.get -> Android.OS.Bundle?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompat.UserHandle.get -> Android.OS.UserHandle?
virtual AndroidX.Core.Content.PM.ShortcutInfoCompatSaver.Shortcuts.get -> System.Collections.Generic.IList<AndroidX.Core.Content.PM.ShortcutInfoCompat!>?
virtual AndroidX.Core.Content.UnusedAppRestrictionsBackportCallback.OnResult(bool success, bool enabled) -> void
virtual AndroidX.Core.Graphics.Drawable.IconCompat.AddToShortcutIntent(Android.Content.Intent? outIntent, Android.Graphics.Drawables.Drawable? badge, Android.Content.Context? c) -> void
virtual AndroidX.Core.Graphics.Drawable.IconCompat.Bitmap.get -> Android.Graphics.Bitmap?
virtual AndroidX.Core.Graphics.Drawable.IconCompat.CheckResource(Android.Content.Context? context) -> void
virtual AndroidX.Core.Graphics.Drawable.IconCompat.GetUriInputStream(Android.Content.Context? context) -> System.IO.Stream?
virtual AndroidX.Core.Graphics.Drawable.IconCompat.LoadDrawable(Android.Content.Context? context) -> Android.Graphics.Drawables.Drawable?
virtual AndroidX.Core.Graphics.Drawable.IconCompat.ResId.get -> int
virtual AndroidX.Core.Graphics.Drawable.IconCompat.ResPackage.get -> string?
virtual AndroidX.Core.Graphics.Drawable.IconCompat.SetTint(int tint) -> AndroidX.Core.Graphics.Drawable.IconCompat?
virtual AndroidX.Core.Graphics.Drawable.IconCompat.SetTintList(Android.Content.Res.ColorStateList? tintList) -> AndroidX.Core.Graphics.Drawable.IconCompat?
virtual AndroidX.Core.Graphics.Drawable.IconCompat.SetTintMode(Android.Graphics.PorterDuff.Mode? mode) -> AndroidX.Core.Graphics.Drawable.IconCompat?
virtual AndroidX.Core.Graphics.Drawable.IconCompat.ToBundle() -> Android.OS.Bundle?
virtual AndroidX.Core.Graphics.Drawable.IconCompat.ToIcon() -> Android.Graphics.Drawables.Icon?
virtual AndroidX.Core.Graphics.Drawable.IconCompat.ToIcon(Android.Content.Context? context) -> Android.Graphics.Drawables.Icon?
virtual AndroidX.Core.Graphics.Drawable.IconCompat.Type.get -> int
virtual AndroidX.Core.Graphics.Drawable.IconCompat.Uri.get -> Android.Net.Uri?
virtual AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.Circular.get -> bool
virtual AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.Circular.set -> void
virtual AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.CornerRadius.get -> float
virtual AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.CornerRadius.set -> void
virtual AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.Gravity.get -> int
virtual AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.Gravity.set -> void
virtual AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.HasAntiAlias.get -> bool
virtual AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.HasMipMap.get -> bool
virtual AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.SetAntiAlias(bool aa) -> void
virtual AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.SetMipMap(bool mipMap) -> void
virtual AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.SetTargetDensity(Android.Graphics.Canvas? canvas) -> void
virtual AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.SetTargetDensity(Android.Util.DisplayMetrics? metrics) -> void
virtual AndroidX.Core.Graphics.Drawable.RoundedBitmapDrawable.SetTargetDensity(int density) -> void
virtual AndroidX.Core.Graphics.PathParser.PathDataNode.GetParams() -> float[]?
virtual AndroidX.Core.Graphics.PathParser.PathDataNode.InterpolatePathDataNode(AndroidX.Core.Graphics.PathParser.PathDataNode? nodeFrom, AndroidX.Core.Graphics.PathParser.PathDataNode? nodeTo, float fraction) -> void
virtual AndroidX.Core.Graphics.PathParser.PathDataNode.Type.get -> char
virtual AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.Authenticate(AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.CryptoObject? crypto, int flags, Android.OS.CancellationSignal? cancel, AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.AuthenticationCallback? callback, Android.OS.Handler? handler) -> void
virtual AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.Authenticate(AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.CryptoObject? crypto, int flags, AndroidX.Core.OS.CancellationSignal? cancel, AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.AuthenticationCallback? callback, Android.OS.Handler? handler) -> void
virtual AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.AuthenticationCallback.OnAuthenticationError(int errMsgId, Java.Lang.ICharSequence? errString) -> void
virtual AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.AuthenticationCallback.OnAuthenticationFailed() -> void
virtual AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.AuthenticationCallback.OnAuthenticationHelp(int helpMsgId, Java.Lang.ICharSequence? helpString) -> void
virtual AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.AuthenticationCallback.OnAuthenticationSucceeded(AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.AuthenticationResult? result) -> void
virtual AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.CryptoObject.Cipher.get -> Javax.Crypto.Cipher?
virtual AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.CryptoObject.Mac.get -> Javax.Crypto.Mac?
virtual AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.CryptoObject.Signature.get -> Java.Security.Signature?
virtual AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.HasEnrolledFingerprints.get -> bool
virtual AndroidX.Core.Hardware.Fingerprint.FingerprintManagerCompat.IsHardwareDetected.get -> bool
virtual AndroidX.Core.Location.GnssStatusCompat.Callback.OnFirstFix(int ttffMillis) -> void
virtual AndroidX.Core.Location.GnssStatusCompat.Callback.OnSatelliteStatusChanged(AndroidX.Core.Location.GnssStatusCompat? status) -> void
virtual AndroidX.Core.Location.GnssStatusCompat.Callback.OnStarted() -> void
virtual AndroidX.Core.Location.GnssStatusCompat.Callback.OnStopped() -> void
virtual AndroidX.Core.Provider.FontsContractCompat.FontFamilyResult.FontsWithFallbacks.get -> System.Collections.Generic.IList<AndroidX.Core.Provider.FontsContractCompat.FontInfo![]!>?
virtual AndroidX.Core.Provider.FontsContractCompat.FontFamilyResult.GetFonts() -> AndroidX.Core.Provider.FontsContractCompat.FontInfo![]?
virtual AndroidX.Core.Provider.FontsContractCompat.FontFamilyResult.StatusCode.get -> int
virtual AndroidX.Core.Provider.FontsContractCompat.FontInfo.IsItalic.get -> bool
virtual AndroidX.Core.Provider.FontsContractCompat.FontInfo.IsSystemFont.get -> bool
virtual AndroidX.Core.Provider.FontsContractCompat.FontInfo.ResultCode.get -> int
virtual AndroidX.Core.Provider.FontsContractCompat.FontInfo.SystemFont.get -> string?
virtual AndroidX.Core.Provider.FontsContractCompat.FontInfo.TtcIndex.get -> int
virtual AndroidX.Core.Provider.FontsContractCompat.FontInfo.Uri.get -> Android.Net.Uri?
virtual AndroidX.Core.Provider.FontsContractCompat.FontInfo.VariationSettings.get -> string?
virtual AndroidX.Core.Provider.FontsContractCompat.FontInfo.Weight.get -> int
virtual AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback.OnTypefaceRequestFailed(int reason) -> void
virtual AndroidX.Core.Provider.FontsContractCompat.FontRequestCallback.OnTypefaceRetrieved(Android.Graphics.Typeface? typeface) -> void
virtual AndroidX.Core.Provider.SelfDestructiveThread.Generation.get -> int
virtual AndroidX.Core.Provider.SelfDestructiveThread.IsRunning.get -> bool
virtual AndroidX.Core.Provider.SelfDestructiveThread.PostAndReply(Java.Util.Concurrent.ICallable? callable, AndroidX.Core.Provider.SelfDestructiveThread.IReplyCallback? reply) -> void
virtual AndroidX.Core.Provider.SelfDestructiveThread.PostAndWait(Java.Util.Concurrent.ICallable? callable, int timeoutMillis) -> Java.Lang.Object?
virtual AndroidX.Core.Service.QuickSettings.PendingIntentActivityWrapper.Context.get -> Android.Content.Context?
virtual AndroidX.Core.Service.QuickSettings.PendingIntentActivityWrapper.Flags.get -> int
virtual AndroidX.Core.Service.QuickSettings.PendingIntentActivityWrapper.Intent.get -> Android.Content.Intent?
virtual AndroidX.Core.Service.QuickSettings.PendingIntentActivityWrapper.IsMutable.get -> bool
virtual AndroidX.Core.Service.QuickSettings.PendingIntentActivityWrapper.Options.get -> Android.OS.Bundle?
virtual AndroidX.Core.Service.QuickSettings.PendingIntentActivityWrapper.PendingIntent.get -> Android.App.PendingIntent?
virtual AndroidX.Core.Service.QuickSettings.PendingIntentActivityWrapper.RequestCode.get -> int
virtual AndroidX.Core.Text.PrecomputedTextCompat.CharAt(int index) -> char
virtual AndroidX.Core.Text.PrecomputedTextCompat.GetParagraphEnd(int paraIndex) -> int
virtual AndroidX.Core.Text.PrecomputedTextCompat.GetParagraphStart(int paraIndex) -> int
virtual AndroidX.Core.Text.PrecomputedTextCompat.GetParams() -> AndroidX.Core.Text.PrecomputedTextCompat.Params?
virtual AndroidX.Core.Text.PrecomputedTextCompat.GetSpanEnd(Java.Lang.Object? tag) -> int
virtual AndroidX.Core.Text.PrecomputedTextCompat.GetSpanFlags(Java.Lang.Object? tag) -> Android.Text.SpanTypes
virtual AndroidX.Core.Text.PrecomputedTextCompat.GetSpanStart(Java.Lang.Object? tag) -> int
virtual AndroidX.Core.Text.PrecomputedTextCompat.GetSpans(int start, int end, Java.Lang.Class? type) -> Java.Lang.Object![]?
virtual AndroidX.Core.Text.PrecomputedTextCompat.Length() -> int
virtual AndroidX.Core.Text.PrecomputedTextCompat.NextSpanTransition(int start, int limit, Java.Lang.Class? type) -> int
virtual AndroidX.Core.Text.PrecomputedTextCompat.ParagraphCount.get -> int
virtual AndroidX.Core.Text.PrecomputedTextCompat.Params.Builder.Build() -> AndroidX.Core.Text.PrecomputedTextCompat.Params?
virtual AndroidX.Core.Text.PrecomputedTextCompat.Params.Builder.SetBreakStrategy(int strategy) -> AndroidX.Core.Text.PrecomputedTextCompat.Params.Builder?
virtual AndroidX.Core.Text.PrecomputedTextCompat.Params.Builder.SetHyphenationFrequency(int frequency) -> AndroidX.Core.Text.PrecomputedTextCompat.Params.Builder?
virtual AndroidX.Core.Text.PrecomputedTextCompat.Params.Builder.SetTextDirection(Android.Text.ITextDirectionHeuristic? textDir) -> AndroidX.Core.Text.PrecomputedTextCompat.Params.Builder?
virtual AndroidX.Core.Text.PrecomputedTextCompat.RemoveSpan(Java.Lang.Object? what) -> void
virtual AndroidX.Core.Text.PrecomputedTextCompat.SetSpan(Java.Lang.Object? what, int start, int end, Android.Text.SpanTypes flags) -> void
virtual AndroidX.Core.Text.PrecomputedTextCompat.SubSequenceFormatted(int start, int end) -> Java.Lang.ICharSequence?
virtual AndroidX.Core.Util.AtomicFile.BaseFile.get -> Java.IO.File?
virtual AndroidX.Core.Util.AtomicFile.Delete() -> void
virtual AndroidX.Core.Util.AtomicFile.FailWrite(System.IO.Stream? str) -> void
virtual AndroidX.Core.Util.AtomicFile.FinishWrite(System.IO.Stream? str) -> void
virtual AndroidX.Core.Util.AtomicFile.OpenRead() -> System.IO.Stream?
virtual AndroidX.Core.Util.AtomicFile.ReadFully() -> byte[]?
virtual AndroidX.Core.Util.AtomicFile.StartWrite() -> System.IO.Stream?
virtual AndroidX.Core.Util.Pools.SimplePool.Acquire() -> Java.Lang.Object?
virtual AndroidX.Core.Util.Pools.SimplePool.Release(Java.Lang.Object! instance) -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.CreateReplacementAction(Java.Lang.ICharSequence? label, AndroidX.Core.View.Accessibility.IAccessibilityViewCommand? command) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.Id.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.LabelFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat.Perform(Android.Views.View? view, Android.OS.Bundle? arguments) -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityDataSensitive.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityDataSensitive.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityFocused.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityFocused.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ActionList.get -> System.Collections.Generic.IList<AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat!>?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Actions.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AddAction(AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat? action) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AddAction(int action) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AddChild(Android.Views.View? child) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AddChild(Android.Views.View? root, int virtualDescendantId) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AddLabeledBy(Android.Views.View? label) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AddLabeledBy(Android.Views.View? root, int virtualDescendantId) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AddSpansToExtras(Java.Lang.ICharSequence? text, Android.Views.View? view) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AvailableExtraData.get -> System.Collections.Generic.IList<string!>?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AvailableExtraData.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CanOpenPopup() -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Checkable.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Checkable.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Checked.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Checked.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ChildCount.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ClassNameFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ClassNameFormatted.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Clickable.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Clickable.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfo.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.ColumnCount.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.ImportantForAccessibilityItemCount.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.IsHierarchical.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.ItemCount.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.RowCount.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat.SelectionMode.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfo.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.ColumnIndex.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.ColumnSpan.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.ColumnTitle.get -> string?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.IsHeading.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.IsSelected.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.RowIndex.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.RowSpan.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat.RowTitle.get -> string?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ContainerTitleFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ContainerTitleFormatted.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ContentDescriptionFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ContentDescriptionFormatted.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ContentInvalid.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ContentInvalid.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ContextClickable.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ContextClickable.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Dismissable.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Dismissable.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.DrawingOrder.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.DrawingOrder.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Editable.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Editable.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Enabled.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Enabled.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ErrorFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ErrorFormatted.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ExpandedState.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ExpandedState.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ExtraRenderingInfo.get -> Android.Views.Accessibility.AccessibilityNodeInfo.ExtraRenderingInfo?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Extras.get -> Android.OS.Bundle?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.FieldRequired.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.FieldRequired.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.FindAccessibilityNodeInfosByText(string? text) -> System.Collections.Generic.IList<AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat!>?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.FindAccessibilityNodeInfosByViewId(string? viewId) -> System.Collections.Generic.IList<AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat!>?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.FindFocus(int focus) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.FocusSearch(int direction) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Focusable.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Focusable.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Focused.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Focused.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.GetBoundsInParent(Android.Graphics.Rect? outBounds) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.GetBoundsInScreen(Android.Graphics.Rect? outBounds) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.GetBoundsInWindow(Android.Graphics.Rect? outBounds) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.GetChild(int index) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.GetChild(int index, int prefetchingStrategy) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.GetParent(int prefetchingStrategy) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.GranularScrollingSupported.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.GranularScrollingSupported.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.HasRequestInitialAccessibilityFocus.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Heading.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Heading.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.HintTextFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.HintTextFormatted.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ImportantForAccessibility.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ImportantForAccessibility.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Info.get -> Java.Lang.Object?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.InputType.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.InputType.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.IsChecked.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.LabelFor.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.LabeledBy.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.LabeledByList.get -> System.Collections.Generic.IList<AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat!>?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.LiveRegion.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.LiveRegion.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.LongClickable.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.LongClickable.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.MaxTextLength.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.MaxTextLength.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.MinDurationBetweenContentChangesMillis.get -> long
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.MinDurationBetweenContentChangesMillis.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.MovementGranularities.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.MovementGranularities.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.MultiLine.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.MultiLine.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.PackageNameFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.PackageNameFormatted.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.PaneTitleFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.PaneTitleFormatted.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Parent.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Password.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Password.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.PerformAction(int action) -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.PerformAction(int action, Android.OS.Bundle? arguments) -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RangeInfo.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RangeInfo.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat.Current.get -> float
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat.Max.get -> float
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat.Min.get -> float
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat.Type.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Recycle() -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Refresh() -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RemoveAction(AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat? action) -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RemoveChild(Android.Views.View? child) -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RemoveChild(Android.Views.View? root, int virtualDescendantId) -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RemoveLabeledBy(Android.Views.View? label) -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RemoveLabeledBy(Android.Views.View? root, int virtualDescendantId) -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RoleDescriptionFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.RoleDescriptionFormatted.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ScreenReaderFocusable.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ScreenReaderFocusable.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Scrollable.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Scrollable.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Selected.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Selected.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetBoundsInParent(Android.Graphics.Rect? bounds) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetBoundsInScreen(Android.Graphics.Rect? bounds) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetBoundsInWindow(Android.Graphics.Rect? bounds) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetCanOpenPopup(bool opensPopup) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetChecked(bool checked) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetCollectionInfo(Java.Lang.Object? collectionInfo) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetCollectionItemInfo(Java.Lang.Object? collectionItemInfo) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetLabelFor(Android.Views.View? labeled) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetLabelFor(Android.Views.View? root, int virtualDescendantId) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetLabeledBy(Android.Views.View? label) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetLabeledBy(Android.Views.View? root, int virtualDescendantId) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetParent(Android.Views.View? parent) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetParent(Android.Views.View? root, int virtualDescendantId) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetQueryFromAppProcessEnabled(Android.Views.View? view, bool enabled) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetRequestInitialAccessibilityFocus(bool requestInitialAccessibilityFocus) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetSource(Android.Views.View? root, int virtualDescendantId) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetSource(Android.Views.View? source) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetTextSelection(int start, int end) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetTraversalAfter(Android.Views.View? root, int virtualDescendantId) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetTraversalAfter(Android.Views.View? view) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetTraversalBefore(Android.Views.View? root, int virtualDescendantId) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SetTraversalBefore(Android.Views.View? view) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ShowingHintText.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ShowingHintText.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.StateDescriptionFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.StateDescriptionFormatted.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SupplementalDescriptionFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.SupplementalDescriptionFormatted.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TextEntryKey.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TextEntryKey.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TextFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TextFormatted.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TextSelectable.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TextSelectable.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TextSelectionEnd.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TextSelectionStart.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TooltipTextFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TooltipTextFormatted.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TouchDelegateInfo.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TouchDelegateInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TouchDelegateInfo.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TraversalAfter.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.TraversalBefore.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.UniqueId.get -> string?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.UniqueId.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Unwrap() -> Android.Views.Accessibility.AccessibilityNodeInfo?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ViewIdResourceName.get -> string?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.ViewIdResourceName.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.VisibleToUser.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.VisibleToUser.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.Window.get -> AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat.WindowId.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeProviderCompat.AddExtraDataToAccessibilityNodeInfo(int virtualViewId, AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat? info, string? extraDataKey, Android.OS.Bundle? arguments) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeProviderCompat.CreateAccessibilityNodeInfo(int virtualViewId) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeProviderCompat.FindAccessibilityNodeInfosByText(string? text, int virtualViewId) -> System.Collections.Generic.IList<AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat!>?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeProviderCompat.FindFocus(int focus) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeProviderCompat.PerformAction(int virtualViewId, int action, Android.OS.Bundle? arguments) -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityNodeProviderCompat.Provider.get -> Java.Lang.Object?
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.AddedCount.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.AddedCount.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.BeforeTextFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.BeforeTextFormatted.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.Checked.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.Checked.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.ClassNameFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.ClassNameFormatted.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.ContentDescriptionFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.ContentDescriptionFormatted.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.CurrentItemIndex.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.CurrentItemIndex.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.Enabled.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.Enabled.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.FromIndex.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.FromIndex.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.FullScreen.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.FullScreen.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.Impl.get -> Java.Lang.Object?
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.ItemCount.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.ItemCount.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.MaxScrollX.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.MaxScrollX.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.MaxScrollY.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.MaxScrollY.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.ParcelableData.get -> Android.OS.IParcelable?
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.ParcelableData.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.Password.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.Password.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.Recycle() -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.RemovedCount.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.RemovedCount.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.ScrollX.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.ScrollX.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.ScrollY.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.ScrollY.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.Scrollable.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.Scrollable.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.SetSource(Android.Views.View? root, int virtualDescendantId) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.SetSource(Android.Views.View? source) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.Source.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.Text.get -> System.Collections.Generic.IList<Java.Lang.ICharSequence!>?
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.ToIndex.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.ToIndex.set -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityRecordCompat.WindowId.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityViewCommandCommandArguments.SetBundle(Android.OS.Bundle? bundle) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.Anchor.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.ChildCount.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.DisplayId.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.GetBoundsInScreen(Android.Graphics.Rect? outBounds) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.GetChild(int index) -> AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.GetRegionInScreen(Android.Graphics.Region? outRegion) -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.GetRoot(int prefetchingStrategy) -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.Id.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.IsAccessibilityFocused.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.IsActive.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.IsFocused.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.IsInPictureInPictureMode.get -> bool
virtual AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.Layer.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.Locales.get -> AndroidX.Core.OS.LocaleListCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.Parent.get -> AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.Recycle() -> void
virtual AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.Root.get -> AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat?
virtual AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.TitleFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.TransitionTimeMillis.get -> long
virtual AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.Type.get -> int
virtual AndroidX.Core.View.Accessibility.AccessibilityWindowInfoCompat.Unwrap() -> Android.Views.Accessibility.AccessibilityWindowInfo?
virtual AndroidX.Core.View.AccessibilityDelegateCompat.DispatchPopulateAccessibilityEvent(Android.Views.View? host, Android.Views.Accessibility.AccessibilityEvent? e) -> bool
virtual AndroidX.Core.View.AccessibilityDelegateCompat.GetAccessibilityNodeProvider(Android.Views.View? host) -> AndroidX.Core.View.Accessibility.AccessibilityNodeProviderCompat?
virtual AndroidX.Core.View.AccessibilityDelegateCompat.OnInitializeAccessibilityEvent(Android.Views.View? host, Android.Views.Accessibility.AccessibilityEvent? e) -> void
virtual AndroidX.Core.View.AccessibilityDelegateCompat.OnInitializeAccessibilityNodeInfo(Android.Views.View? host, AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat? info) -> void
virtual AndroidX.Core.View.AccessibilityDelegateCompat.OnPopulateAccessibilityEvent(Android.Views.View? host, Android.Views.Accessibility.AccessibilityEvent? e) -> void
virtual AndroidX.Core.View.AccessibilityDelegateCompat.OnRequestSendAccessibilityEvent(Android.Views.ViewGroup? host, Android.Views.View? child, Android.Views.Accessibility.AccessibilityEvent? e) -> bool
virtual AndroidX.Core.View.AccessibilityDelegateCompat.PerformAccessibilityAction(Android.Views.View? host, int action, Android.OS.Bundle? args) -> bool
virtual AndroidX.Core.View.AccessibilityDelegateCompat.SendAccessibilityEvent(Android.Views.View? host, int eventType) -> void
virtual AndroidX.Core.View.AccessibilityDelegateCompat.SendAccessibilityEventUnchecked(Android.Views.View? host, Android.Views.Accessibility.AccessibilityEvent? e) -> void
virtual AndroidX.Core.View.ActionProvider.Context.get -> Android.Content.Context?
virtual AndroidX.Core.View.ActionProvider.HasSubMenu.get -> bool
virtual AndroidX.Core.View.ActionProvider.IsVisible.get -> bool
virtual AndroidX.Core.View.ActionProvider.OnCreateActionView(Android.Views.IMenuItem? forItem) -> Android.Views.View?
virtual AndroidX.Core.View.ActionProvider.OnPerformDefaultAction() -> bool
virtual AndroidX.Core.View.ActionProvider.OnPrepareSubMenu(Android.Views.ISubMenu? subMenu) -> void
virtual AndroidX.Core.View.ActionProvider.OverridesItemVisibility() -> bool
virtual AndroidX.Core.View.ActionProvider.RefreshVisibility() -> void
virtual AndroidX.Core.View.ActionProvider.Reset() -> void
virtual AndroidX.Core.View.ActionProvider.SetSubUiVisibilityListener(AndroidX.Core.View.ActionProvider.ISubUiVisibilityListener? listener) -> void
virtual AndroidX.Core.View.ActionProvider.SetVisibilityListener(AndroidX.Core.View.ActionProvider.IVisibilityListener? listener) -> void
virtual AndroidX.Core.View.ActionProvider.SubUiVisibilityChanged(bool isVisible) -> void
virtual AndroidX.Core.View.ApplyWindowInsetsHandler.Invoke(Android.Views.View? v, AndroidX.Core.View.WindowInsetsCompat? insets) -> AndroidX.Core.View.WindowInsetsCompat?
virtual AndroidX.Core.View.AutoFill.AutofillIdCompat.ToAutofillId() -> Android.Views.Autofill.AutofillId?
virtual AndroidX.Core.View.ContentCapture.ContentCaptureSessionCompat.NewAutofillId(long virtualChildId) -> Android.Views.Autofill.AutofillId?
virtual AndroidX.Core.View.ContentCapture.ContentCaptureSessionCompat.NewVirtualViewStructure(Android.Views.Autofill.AutofillId? parentId, long virtualId) -> AndroidX.Core.View.ViewStructureCompat?
virtual AndroidX.Core.View.ContentCapture.ContentCaptureSessionCompat.NotifyViewTextChanged(Android.Views.Autofill.AutofillId? id, Java.Lang.ICharSequence? text) -> void
virtual AndroidX.Core.View.ContentCapture.ContentCaptureSessionCompat.NotifyViewsAppeared(System.Collections.Generic.IList<Android.Views.ViewStructure!>? appearedNodes) -> void
virtual AndroidX.Core.View.ContentCapture.ContentCaptureSessionCompat.NotifyViewsDisappeared(long[]? virtualIds) -> void
virtual AndroidX.Core.View.ContentCapture.ContentCaptureSessionCompat.ToContentCaptureSession() -> Android.Views.ContentCaptures.ContentCaptureSession?
virtual AndroidX.Core.View.DifferentialMotionFlingController.OnMotionEvent(Android.Views.MotionEvent? e, int axis) -> void
virtual AndroidX.Core.View.DragStartHelper.Attach() -> void
virtual AndroidX.Core.View.DragStartHelper.Detach() -> void
virtual AndroidX.Core.View.DragStartHelper.GetTouchPosition(Android.Graphics.Point? point) -> void
virtual AndroidX.Core.View.DragStartHelper.OnLongClick(Android.Views.View? v) -> bool
virtual AndroidX.Core.View.DragStartHelper.OnTouch(Android.Views.View? v, Android.Views.MotionEvent? e) -> bool
virtual AndroidX.Core.View.Insets.ColorProtection.Color.get -> int
virtual AndroidX.Core.View.Insets.ColorProtection.Color.set -> void
virtual AndroidX.Core.View.Insets.GradientProtection.Color.get -> int
virtual AndroidX.Core.View.Insets.GradientProtection.Color.set -> void
virtual AndroidX.Core.View.Insets.GradientProtection.Scale.get -> float
virtual AndroidX.Core.View.Insets.GradientProtection.Scale.set -> void
virtual AndroidX.Core.View.Insets.Protection.Alpha.get -> float
virtual AndroidX.Core.View.Insets.Protection.Alpha.set -> void
virtual AndroidX.Core.View.Insets.Protection.AnimateAlpha(float toAlpha) -> void
virtual AndroidX.Core.View.Insets.Protection.AnimateInsetsAmount(float toInsetsAmount) -> void
virtual AndroidX.Core.View.Insets.Protection.InsetAmount.get -> float
virtual AndroidX.Core.View.Insets.Protection.InsetAmount.set -> void
virtual AndroidX.Core.View.Insets.Protection.Side.get -> int
virtual AndroidX.Core.View.Insets.ProtectionLayout.SetProtections(System.Collections.Generic.IList<AndroidX.Core.View.Insets.Protection!>? protections) -> void
virtual AndroidX.Core.View.MenuHostHelper.AddMenuProvider(AndroidX.Core.View.IMenuProvider? provider) -> void
virtual AndroidX.Core.View.MenuHostHelper.AddMenuProvider(AndroidX.Core.View.IMenuProvider? provider, AndroidX.Lifecycle.ILifecycleOwner? owner) -> void
virtual AndroidX.Core.View.MenuHostHelper.AddMenuProvider(AndroidX.Core.View.IMenuProvider? provider, AndroidX.Lifecycle.ILifecycleOwner? owner, AndroidX.Lifecycle.Lifecycle.State? state) -> void
virtual AndroidX.Core.View.MenuHostHelper.OnCreateMenu(Android.Views.IMenu? menu, Android.Views.MenuInflater? menuInflater) -> void
virtual AndroidX.Core.View.MenuHostHelper.OnMenuClosed(Android.Views.IMenu? menu) -> void
virtual AndroidX.Core.View.MenuHostHelper.OnMenuItemSelected(Android.Views.IMenuItem? item) -> bool
virtual AndroidX.Core.View.MenuHostHelper.OnPrepareMenu(Android.Views.IMenu? menu) -> void
virtual AndroidX.Core.View.MenuHostHelper.RemoveMenuProvider(AndroidX.Core.View.IMenuProvider? provider) -> void
virtual AndroidX.Core.View.NestedScrollingChildHelper.DispatchNestedFling(float velocityX, float velocityY, bool consumed) -> bool
virtual AndroidX.Core.View.NestedScrollingChildHelper.DispatchNestedPreFling(float velocityX, float velocityY) -> bool
virtual AndroidX.Core.View.NestedScrollingChildHelper.DispatchNestedPreScroll(int dx, int dy, int[]? consumed, int[]? offsetInWindow) -> bool
virtual AndroidX.Core.View.NestedScrollingChildHelper.DispatchNestedPreScroll(int dx, int dy, int[]? consumed, int[]? offsetInWindow, int type) -> bool
virtual AndroidX.Core.View.NestedScrollingChildHelper.DispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[]? offsetInWindow) -> bool
virtual AndroidX.Core.View.NestedScrollingChildHelper.DispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[]? offsetInWindow, int type) -> bool
virtual AndroidX.Core.View.NestedScrollingChildHelper.DispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[]? offsetInWindow, int type, int[]? consumed) -> void
virtual AndroidX.Core.View.NestedScrollingChildHelper.HasNestedScrollingParent.get -> bool
virtual AndroidX.Core.View.NestedScrollingChildHelper.InvokeHasNestedScrollingParent(int type) -> bool
virtual AndroidX.Core.View.NestedScrollingChildHelper.NestedScrollingEnabled.get -> bool
virtual AndroidX.Core.View.NestedScrollingChildHelper.NestedScrollingEnabled.set -> void
virtual AndroidX.Core.View.NestedScrollingChildHelper.OnDetachedFromWindow() -> void
virtual AndroidX.Core.View.NestedScrollingChildHelper.OnStopNestedScroll(Android.Views.View? child) -> void
virtual AndroidX.Core.View.NestedScrollingChildHelper.StartNestedScroll(int axes) -> bool
virtual AndroidX.Core.View.NestedScrollingChildHelper.StartNestedScroll(int axes, int type) -> bool
virtual AndroidX.Core.View.NestedScrollingChildHelper.StopNestedScroll() -> void
virtual AndroidX.Core.View.NestedScrollingChildHelper.StopNestedScroll(int type) -> void
virtual AndroidX.Core.View.NestedScrollingParentHelper.NestedScrollAxes.get -> int
virtual AndroidX.Core.View.NestedScrollingParentHelper.OnNestedScrollAccepted(Android.Views.View! child, Android.Views.View! target, int axes) -> void
virtual AndroidX.Core.View.NestedScrollingParentHelper.OnNestedScrollAccepted(Android.Views.View! child, Android.Views.View! target, int axis, int type) -> void
virtual AndroidX.Core.View.NestedScrollingParentHelper.OnNestedScrollAccepted(Android.Views.View? child, Android.Views.View? target, Android.Views.ScrollAxis axes) -> void
virtual AndroidX.Core.View.NestedScrollingParentHelper.OnNestedScrollAccepted(Android.Views.View? child, Android.Views.View? target, Android.Views.ScrollAxis axes, int type) -> void
virtual AndroidX.Core.View.NestedScrollingParentHelper.OnStopNestedScroll(Android.Views.View? target) -> void
virtual AndroidX.Core.View.NestedScrollingParentHelper.OnStopNestedScroll(Android.Views.View? target, int type) -> void
virtual AndroidX.Core.View.ReceiveContentHandler.Invoke(Android.Views.View? view, AndroidX.Core.View.ContentInfoCompat? payload) -> AndroidX.Core.View.ContentInfoCompat?
virtual AndroidX.Core.View.ScrollFeedbackProviderCompat.OnScrollLimit(int inputDeviceId, int source, int axis, bool isStart) -> void
virtual AndroidX.Core.View.ScrollFeedbackProviderCompat.OnScrollProgress(int inputDeviceId, int source, int axis, int deltaInPixels) -> void
virtual AndroidX.Core.View.ScrollFeedbackProviderCompat.OnSnapToItem(int inputDeviceId, int source, int axis) -> void
virtual AndroidX.Core.View.ViewPropertyAnimatorListenerAdapter.OnAnimationCancel(Android.Views.View? view) -> void
virtual AndroidX.Core.View.ViewPropertyAnimatorListenerAdapter.OnAnimationEnd(Android.Views.View? view) -> void
virtual AndroidX.Core.View.ViewPropertyAnimatorListenerAdapter.OnAnimationStart(Android.Views.View? view) -> void
virtual AndroidX.Core.View.ViewStructureCompat.SetClassName(string? string) -> void
virtual AndroidX.Core.View.ViewStructureCompat.SetContentDescription(Java.Lang.ICharSequence? charSequence) -> void
virtual AndroidX.Core.View.ViewStructureCompat.SetDimens(int left, int top, int scrollX, int scrollY, int width, int height) -> void
virtual AndroidX.Core.View.ViewStructureCompat.SetText(Java.Lang.ICharSequence? charSequence) -> void
virtual AndroidX.Core.View.ViewStructureCompat.ToViewStructure() -> Android.Views.ViewStructure?
virtual AndroidX.Core.View.WindowInsetsAnimationCompat.Callback.OnEnd(AndroidX.Core.View.WindowInsetsAnimationCompat? animation) -> void
virtual AndroidX.Core.View.WindowInsetsAnimationCompat.Callback.OnPrepare(AndroidX.Core.View.WindowInsetsAnimationCompat? animation) -> void
virtual AndroidX.Core.View.WindowInsetsAnimationCompat.Callback.OnStart(AndroidX.Core.View.WindowInsetsAnimationCompat? animation, AndroidX.Core.View.WindowInsetsAnimationCompat.BoundsCompat? bounds) -> AndroidX.Core.View.WindowInsetsAnimationCompat.BoundsCompat?
virtual AndroidX.Core.View.WindowInsetsCompat.ConsumeDisplayCutout() -> AndroidX.Core.View.WindowInsetsCompat?
virtual AndroidX.Core.View.WindowInsetsCompat.ConsumeStableInsets() -> AndroidX.Core.View.WindowInsetsCompat?
virtual AndroidX.Core.View.WindowInsetsCompat.ConsumeSystemWindowInsets() -> AndroidX.Core.View.WindowInsetsCompat?
virtual AndroidX.Core.View.WindowInsetsCompat.DisplayCutout.get -> AndroidX.Core.View.DisplayCutoutCompat?
virtual AndroidX.Core.View.WindowInsetsCompat.GetInsets(int typeMask) -> AndroidX.Core.Graphics.Insets?
virtual AndroidX.Core.View.WindowInsetsCompat.GetInsetsIgnoringVisibility(int typeMask) -> AndroidX.Core.Graphics.Insets?
virtual AndroidX.Core.View.WindowInsetsCompat.GetRoundedCorner(int position) -> AndroidX.Core.View.RoundedCornerCompat?
virtual AndroidX.Core.View.WindowInsetsCompat.HasInsets.get -> bool
virtual AndroidX.Core.View.WindowInsetsCompat.HasStableInsets.get -> bool
virtual AndroidX.Core.View.WindowInsetsCompat.HasSystemWindowInsets.get -> bool
virtual AndroidX.Core.View.WindowInsetsCompat.Inset(AndroidX.Core.Graphics.Insets? insets) -> AndroidX.Core.View.WindowInsetsCompat?
virtual AndroidX.Core.View.WindowInsetsCompat.Inset(int left, int top, int right, int bottom) -> AndroidX.Core.View.WindowInsetsCompat?
virtual AndroidX.Core.View.WindowInsetsCompat.IsConsumed.get -> bool
virtual AndroidX.Core.View.WindowInsetsCompat.IsRound.get -> bool
virtual AndroidX.Core.View.WindowInsetsCompat.IsVisible(int typeMask) -> bool
virtual AndroidX.Core.View.WindowInsetsCompat.MandatorySystemGestureInsets.get -> AndroidX.Core.Graphics.Insets?
virtual AndroidX.Core.View.WindowInsetsCompat.PrivacyIndicatorBounds.get -> Android.Graphics.Rect?
virtual AndroidX.Core.View.WindowInsetsCompat.ReplaceSystemWindowInsets(Android.Graphics.Rect? systemWindowInsets) -> AndroidX.Core.View.WindowInsetsCompat?
virtual AndroidX.Core.View.WindowInsetsCompat.ReplaceSystemWindowInsets(int left, int top, int right, int bottom) -> AndroidX.Core.View.WindowInsetsCompat?
virtual AndroidX.Core.View.WindowInsetsCompat.StableInsetBottom.get -> int
virtual AndroidX.Core.View.WindowInsetsCompat.StableInsetLeft.get -> int
virtual AndroidX.Core.View.WindowInsetsCompat.StableInsetRight.get -> int
virtual AndroidX.Core.View.WindowInsetsCompat.StableInsetTop.get -> int
virtual AndroidX.Core.View.WindowInsetsCompat.StableInsets.get -> AndroidX.Core.Graphics.Insets?
virtual AndroidX.Core.View.WindowInsetsCompat.SystemGestureInsets.get -> AndroidX.Core.Graphics.Insets?
virtual AndroidX.Core.View.WindowInsetsCompat.SystemWindowInsetBottom.get -> int
virtual AndroidX.Core.View.WindowInsetsCompat.SystemWindowInsetLeft.get -> int
virtual AndroidX.Core.View.WindowInsetsCompat.SystemWindowInsetRight.get -> int
virtual AndroidX.Core.View.WindowInsetsCompat.SystemWindowInsetTop.get -> int
virtual AndroidX.Core.View.WindowInsetsCompat.SystemWindowInsets.get -> AndroidX.Core.Graphics.Insets?
virtual AndroidX.Core.View.WindowInsetsCompat.TappableElementInsets.get -> AndroidX.Core.Graphics.Insets?
virtual AndroidX.Core.View.WindowInsetsCompat.ToWindowInsets() -> Android.Views.WindowInsets?
virtual AndroidX.Core.Widget.AutoScrollHelper.IsEnabled.get -> bool
virtual AndroidX.Core.Widget.AutoScrollHelper.IsExclusive.get -> bool
virtual AndroidX.Core.Widget.AutoScrollHelper.OnTouch(Android.Views.View? v, Android.Views.MotionEvent? e) -> bool
virtual AndroidX.Core.Widget.AutoScrollHelper.SetActivationDelay(int delayMillis) -> AndroidX.Core.Widget.AutoScrollHelper?
virtual AndroidX.Core.Widget.AutoScrollHelper.SetEdgeType(int type) -> AndroidX.Core.Widget.AutoScrollHelper?
virtual AndroidX.Core.Widget.AutoScrollHelper.SetEnabled(bool enabled) -> AndroidX.Core.Widget.AutoScrollHelper?
virtual AndroidX.Core.Widget.AutoScrollHelper.SetExclusive(bool exclusive) -> AndroidX.Core.Widget.AutoScrollHelper?
virtual AndroidX.Core.Widget.AutoScrollHelper.SetMaximumEdges(float horizontalMax, float verticalMax) -> AndroidX.Core.Widget.AutoScrollHelper?
virtual AndroidX.Core.Widget.AutoScrollHelper.SetMaximumVelocity(float horizontalMax, float verticalMax) -> AndroidX.Core.Widget.AutoScrollHelper?
virtual AndroidX.Core.Widget.AutoScrollHelper.SetMinimumVelocity(float horizontalMin, float verticalMin) -> AndroidX.Core.Widget.AutoScrollHelper?
virtual AndroidX.Core.Widget.AutoScrollHelper.SetRampDownDuration(int durationMillis) -> AndroidX.Core.Widget.AutoScrollHelper?
virtual AndroidX.Core.Widget.AutoScrollHelper.SetRampUpDuration(int durationMillis) -> AndroidX.Core.Widget.AutoScrollHelper?
virtual AndroidX.Core.Widget.AutoScrollHelper.SetRelativeEdges(float horizontal, float vertical) -> AndroidX.Core.Widget.AutoScrollHelper?
virtual AndroidX.Core.Widget.AutoScrollHelper.SetRelativeVelocity(float horizontal, float vertical) -> AndroidX.Core.Widget.AutoScrollHelper?
virtual AndroidX.Core.Widget.ContentLoadingProgressBar.Hide() -> void
virtual AndroidX.Core.Widget.ContentLoadingProgressBar.OnAttachedToWindow() -> void
virtual AndroidX.Core.Widget.ContentLoadingProgressBar.OnDetachedFromWindow() -> void
virtual AndroidX.Core.Widget.ContentLoadingProgressBar.Show() -> void
virtual AndroidX.Core.Widget.NestedScrollView.ArrowScroll(int direction) -> bool
virtual AndroidX.Core.Widget.NestedScrollView.ComputeHorizontalScrollExtent() -> int
virtual AndroidX.Core.Widget.NestedScrollView.ComputeHorizontalScrollOffset() -> int
virtual AndroidX.Core.Widget.NestedScrollView.ComputeHorizontalScrollRange() -> int
virtual AndroidX.Core.Widget.NestedScrollView.ComputeScrollDeltaToGetChildRectOnScreen(Android.Graphics.Rect? rect) -> int
virtual AndroidX.Core.Widget.NestedScrollView.ComputeVerticalScrollExtent() -> int
virtual AndroidX.Core.Widget.NestedScrollView.ComputeVerticalScrollOffset() -> int
virtual AndroidX.Core.Widget.NestedScrollView.ComputeVerticalScrollRange() -> int
virtual AndroidX.Core.Widget.NestedScrollView.DispatchNestedPreScroll(int dx, int dy, int[]? consumed, int[]? offsetInWindow, int type) -> bool
virtual AndroidX.Core.Widget.NestedScrollView.DispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[]? offsetInWindow, int type) -> bool
virtual AndroidX.Core.Widget.NestedScrollView.DispatchNestedScroll(int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[]? offsetInWindow, int type, int[]? consumed) -> void
virtual AndroidX.Core.Widget.NestedScrollView.ExecuteKeyEvent(Android.Views.KeyEvent? e) -> bool
virtual AndroidX.Core.Widget.NestedScrollView.FillViewport.get -> bool
virtual AndroidX.Core.Widget.NestedScrollView.FillViewport.set -> void
virtual AndroidX.Core.Widget.NestedScrollView.Fling(int velocityY) -> void
virtual AndroidX.Core.Widget.NestedScrollView.FullScroll(int direction) -> bool
virtual AndroidX.Core.Widget.NestedScrollView.InvokeHasNestedScrollingParent(int type) -> bool
virtual AndroidX.Core.Widget.NestedScrollView.MaxScrollAmount.get -> int
virtual AndroidX.Core.Widget.NestedScrollView.OnAttachedToWindow() -> void
virtual AndroidX.Core.Widget.NestedScrollView.OnNestedPreScroll(Android.Views.View? target, int dx, int dy, int[]? consumed, int type) -> void
virtual AndroidX.Core.Widget.NestedScrollView.OnNestedScroll(Android.Views.View? target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int type) -> void
virtual AndroidX.Core.Widget.NestedScrollView.OnNestedScroll(Android.Views.View? target, int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int type, int[]? consumed) -> void
virtual AndroidX.Core.Widget.NestedScrollView.OnNestedScrollAccepted(Android.Views.View! child, Android.Views.View! target, int axes, int type) -> void
virtual AndroidX.Core.Widget.NestedScrollView.OnNestedScrollAccepted(Android.Views.View? child, Android.Views.View? target, Android.Views.ScrollAxis axes, int type) -> void
virtual AndroidX.Core.Widget.NestedScrollView.OnStartNestedScroll(Android.Views.View! child, Android.Views.View! target, int axes, int type) -> bool
virtual AndroidX.Core.Widget.NestedScrollView.OnStartNestedScroll(Android.Views.View? child, Android.Views.View? target, Android.Views.ScrollAxis axes, int type) -> bool
virtual AndroidX.Core.Widget.NestedScrollView.OnStopNestedScroll(Android.Views.View? target, int type) -> void
virtual AndroidX.Core.Widget.NestedScrollView.PageScroll(int direction) -> bool
virtual AndroidX.Core.Widget.NestedScrollView.SetOnScrollChangeListener(AndroidX.Core.Widget.NestedScrollView.IOnScrollChangeListener? l) -> void
virtual AndroidX.Core.Widget.NestedScrollView.SmoothScrollingEnabled.get -> bool
virtual AndroidX.Core.Widget.NestedScrollView.SmoothScrollingEnabled.set -> void
virtual AndroidX.Core.Widget.NestedScrollView.StartNestedScroll(Android.Views.ScrollAxis axes, int type) -> bool
virtual AndroidX.Core.Widget.NestedScrollView.StopNestedScroll(int type) -> void
