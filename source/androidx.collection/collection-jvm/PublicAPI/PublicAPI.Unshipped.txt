#nullable enable
AndroidX.Collection.ArrayMap
AndroidX.Collection.ArrayMap.ArrayMap() -> void
AndroidX.Collection.ArrayMap.ArrayMap(AndroidX.Collection.SimpleArrayMap? map) -> void
AndroidX.Collection.ArrayMap.ArrayMap(int capacity) -> void
AndroidX.Collection.ArrayMap.ArrayMap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.ArrayMap.EntrySet() -> System.Collections.ICollection!
AndroidX.Collection.ArrayMapKt
AndroidX.Collection.ArraySet
AndroidX.Collection.ArraySet.Add(Java.Lang.Object? element) -> bool
AndroidX.Collection.ArraySet.AddAll(AndroidX.Collection.ArraySet! array) -> void
AndroidX.Collection.ArraySet.AddAll(System.Collections.ICollection! elements) -> bool
AndroidX.Collection.ArraySet.ArraySet() -> void
AndroidX.Collection.ArraySet.ArraySet(AndroidX.Collection.ArraySet? set) -> void
AndroidX.Collection.ArraySet.ArraySet(Java.Lang.Object![]? array) -> void
AndroidX.Collection.ArraySet.ArraySet(System.Collections.ICollection? set) -> void
AndroidX.Collection.ArraySet.ArraySet(int capacity) -> void
AndroidX.Collection.ArraySet.Clear() -> void
AndroidX.Collection.ArraySet.Contains(Java.Lang.Object? element) -> bool
AndroidX.Collection.ArraySet.ContainsAll(System.Collections.ICollection! elements) -> bool
AndroidX.Collection.ArraySet.EnsureCapacity(int minimumCapacity) -> void
AndroidX.Collection.ArraySet.GetSize() -> int
AndroidX.Collection.ArraySet.IndexOf(Java.Lang.Object? key) -> int
AndroidX.Collection.ArraySet.IsEmpty.get -> bool
AndroidX.Collection.ArraySet.Iterator() -> Java.Util.IIterator!
AndroidX.Collection.ArraySet.Remove(Java.Lang.Object? element) -> bool
AndroidX.Collection.ArraySet.RemoveAll(AndroidX.Collection.ArraySet! array) -> bool
AndroidX.Collection.ArraySet.RemoveAll(System.Collections.ICollection! elements) -> bool
AndroidX.Collection.ArraySet.RemoveAt(int index) -> Java.Lang.Object?
AndroidX.Collection.ArraySet.RetainAll(System.Collections.ICollection! elements) -> bool
AndroidX.Collection.ArraySet.Size() -> int
AndroidX.Collection.ArraySet.ToArray() -> Java.Lang.Object![]!
AndroidX.Collection.ArraySet.ToArray(Java.Lang.Object![]! array) -> Java.Lang.Object![]!
AndroidX.Collection.ArraySet.ValueAt(int index) -> Java.Lang.Object?
AndroidX.Collection.ArraySetKt
AndroidX.Collection.CircularArray
AndroidX.Collection.CircularArray.AddFirst(Java.Lang.Object? element) -> void
AndroidX.Collection.CircularArray.AddLast(Java.Lang.Object? element) -> void
AndroidX.Collection.CircularArray.CircularArray() -> void
AndroidX.Collection.CircularArray.CircularArray(int minCapacity) -> void
AndroidX.Collection.CircularArray.Clear() -> void
AndroidX.Collection.CircularArray.First.get -> Java.Lang.Object?
AndroidX.Collection.CircularArray.Get(int index) -> Java.Lang.Object?
AndroidX.Collection.CircularArray.IsEmpty.get -> bool
AndroidX.Collection.CircularArray.Last.get -> Java.Lang.Object?
AndroidX.Collection.CircularArray.PopFirst() -> Java.Lang.Object?
AndroidX.Collection.CircularArray.PopLast() -> Java.Lang.Object?
AndroidX.Collection.CircularArray.RemoveFromEnd(int count) -> void
AndroidX.Collection.CircularArray.RemoveFromStart(int count) -> void
AndroidX.Collection.CircularArray.Size() -> int
AndroidX.Collection.CircularIntArray
AndroidX.Collection.CircularIntArray.AddFirst(int element) -> void
AndroidX.Collection.CircularIntArray.AddLast(int element) -> void
AndroidX.Collection.CircularIntArray.CircularIntArray() -> void
AndroidX.Collection.CircularIntArray.CircularIntArray(int minCapacity) -> void
AndroidX.Collection.CircularIntArray.Clear() -> void
AndroidX.Collection.CircularIntArray.First.get -> int
AndroidX.Collection.CircularIntArray.Get(int index) -> int
AndroidX.Collection.CircularIntArray.IsEmpty.get -> bool
AndroidX.Collection.CircularIntArray.Last.get -> int
AndroidX.Collection.CircularIntArray.PopFirst() -> int
AndroidX.Collection.CircularIntArray.PopLast() -> int
AndroidX.Collection.CircularIntArray.RemoveFromEnd(int count) -> void
AndroidX.Collection.CircularIntArray.RemoveFromStart(int count) -> void
AndroidX.Collection.CircularIntArray.Size() -> int
AndroidX.Collection.DoubleList
AndroidX.Collection.DoubleList.Any() -> bool
AndroidX.Collection.DoubleList.Any(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.DoubleList.BinarySearch(int element) -> int
AndroidX.Collection.DoubleList.BinarySearch(int element, int fromIndex) -> int
AndroidX.Collection.DoubleList.BinarySearch(int element, int fromIndex, int toIndex) -> int
AndroidX.Collection.DoubleList.Contains(double element) -> bool
AndroidX.Collection.DoubleList.ContainsAll(AndroidX.Collection.DoubleList! elements) -> bool
AndroidX.Collection.DoubleList.Count() -> int
AndroidX.Collection.DoubleList.Count(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.DoubleList.DoubleList(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.DoubleList.ElementAt(int index) -> double
AndroidX.Collection.DoubleList.ElementAtOrElse(int index, Kotlin.Jvm.Functions.IFunction1! defaultValue) -> double
AndroidX.Collection.DoubleList.First() -> double
AndroidX.Collection.DoubleList.First(Kotlin.Jvm.Functions.IFunction1! predicate) -> double
AndroidX.Collection.DoubleList.Fold(Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction2! operation) -> Java.Lang.Object?
AndroidX.Collection.DoubleList.FoldIndexed(Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction3! operation) -> Java.Lang.Object?
AndroidX.Collection.DoubleList.FoldRight(Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction2! operation) -> Java.Lang.Object?
AndroidX.Collection.DoubleList.FoldRightIndexed(Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction3! operation) -> Java.Lang.Object?
AndroidX.Collection.DoubleList.ForEach(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.DoubleList.ForEachIndexed(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.DoubleList.ForEachReversed(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.DoubleList.ForEachReversedIndexed(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.DoubleList.Get(int index) -> double
AndroidX.Collection.DoubleList.IndexOf(double element) -> int
AndroidX.Collection.DoubleList.IndexOfFirst(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.DoubleList.IndexOfLast(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.DoubleList.Indices.get -> Kotlin.Ranges.IntRange!
AndroidX.Collection.DoubleList.IsEmpty.get -> bool
AndroidX.Collection.DoubleList.IsNotEmpty.get -> bool
AndroidX.Collection.DoubleList.JoinToString() -> string!
AndroidX.Collection.DoubleList.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.DoubleList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.DoubleList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.DoubleList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.DoubleList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.DoubleList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.DoubleList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.DoubleList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.DoubleList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.DoubleList.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.DoubleList.JoinToString(Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.DoubleList.JoinToString(string! separator) -> string!
AndroidX.Collection.DoubleList.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.DoubleList.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.DoubleList.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.DoubleList.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.DoubleList.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.DoubleList.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.DoubleList.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.DoubleList.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.DoubleList.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.DoubleList.Last() -> double
AndroidX.Collection.DoubleList.Last(Kotlin.Jvm.Functions.IFunction1! predicate) -> double
AndroidX.Collection.DoubleList.LastIndex.get -> int
AndroidX.Collection.DoubleList.LastIndexOf(double element) -> int
AndroidX.Collection.DoubleList.None() -> bool
AndroidX.Collection.DoubleList.ReversedAny(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.DoubleList.Size.get -> int
AndroidX.Collection.DoubleListKt
AndroidX.Collection.DoubleSetKt
AndroidX.Collection.FloatFloatMap
AndroidX.Collection.FloatFloatMap.All(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.FloatFloatMap.Any() -> bool
AndroidX.Collection.FloatFloatMap.Any(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.FloatFloatMap.Capacity.get -> int
AndroidX.Collection.FloatFloatMap.Contains(float key) -> bool
AndroidX.Collection.FloatFloatMap.ContainsKey(float key) -> bool
AndroidX.Collection.FloatFloatMap.ContainsValue(float value) -> bool
AndroidX.Collection.FloatFloatMap.Count() -> int
AndroidX.Collection.FloatFloatMap.Count(Kotlin.Jvm.Functions.IFunction2! predicate) -> int
AndroidX.Collection.FloatFloatMap.FloatFloatMap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.FloatFloatMap.ForEach(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.FloatFloatMap.ForEachKey(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.FloatFloatMap.ForEachValue(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.FloatFloatMap.Get(float key) -> float
AndroidX.Collection.FloatFloatMap.GetOrDefault(float key, float defaultValue) -> float
AndroidX.Collection.FloatFloatMap.GetOrElse(float key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> float
AndroidX.Collection.FloatFloatMap.IsEmpty.get -> bool
AndroidX.Collection.FloatFloatMap.IsNotEmpty.get -> bool
AndroidX.Collection.FloatFloatMap.JoinToString() -> string!
AndroidX.Collection.FloatFloatMap.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.FloatFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.FloatFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.FloatFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.FloatFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.FloatFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatFloatMap.JoinToString(Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatFloatMap.JoinToString(string! separator) -> string!
AndroidX.Collection.FloatFloatMap.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatFloatMap.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.FloatFloatMap.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatFloatMap.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.FloatFloatMap.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatFloatMap.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.FloatFloatMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatFloatMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.FloatFloatMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatFloatMap.None() -> bool
AndroidX.Collection.FloatFloatMap.Size.get -> int
AndroidX.Collection.FloatFloatMapKt
AndroidX.Collection.FloatFloatPair
AndroidX.Collection.FloatFloatPair.PackedValue.get -> long
AndroidX.Collection.FloatFloatPair.PackedValue.set -> void
AndroidX.Collection.FloatIntMap
AndroidX.Collection.FloatIntMap.All(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.FloatIntMap.Any() -> bool
AndroidX.Collection.FloatIntMap.Any(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.FloatIntMap.Capacity.get -> int
AndroidX.Collection.FloatIntMap.Contains(float key) -> bool
AndroidX.Collection.FloatIntMap.ContainsKey(float key) -> bool
AndroidX.Collection.FloatIntMap.ContainsValue(int value) -> bool
AndroidX.Collection.FloatIntMap.Count() -> int
AndroidX.Collection.FloatIntMap.Count(Kotlin.Jvm.Functions.IFunction2! predicate) -> int
AndroidX.Collection.FloatIntMap.FloatIntMap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.FloatIntMap.ForEach(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.FloatIntMap.ForEachKey(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.FloatIntMap.ForEachValue(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.FloatIntMap.Get(float key) -> int
AndroidX.Collection.FloatIntMap.GetOrDefault(float key, int defaultValue) -> int
AndroidX.Collection.FloatIntMap.GetOrElse(float key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> int
AndroidX.Collection.FloatIntMap.IsEmpty.get -> bool
AndroidX.Collection.FloatIntMap.IsNotEmpty.get -> bool
AndroidX.Collection.FloatIntMap.JoinToString() -> string!
AndroidX.Collection.FloatIntMap.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.FloatIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.FloatIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.FloatIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.FloatIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.FloatIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatIntMap.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatIntMap.JoinToString(Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatIntMap.JoinToString(string! separator) -> string!
AndroidX.Collection.FloatIntMap.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatIntMap.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.FloatIntMap.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatIntMap.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.FloatIntMap.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatIntMap.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.FloatIntMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatIntMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.FloatIntMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatIntMap.None() -> bool
AndroidX.Collection.FloatIntMap.Size.get -> int
AndroidX.Collection.FloatIntMapKt
AndroidX.Collection.FloatList
AndroidX.Collection.FloatList.Any() -> bool
AndroidX.Collection.FloatList.Any(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.FloatList.BinarySearch(int element) -> int
AndroidX.Collection.FloatList.BinarySearch(int element, int fromIndex) -> int
AndroidX.Collection.FloatList.BinarySearch(int element, int fromIndex, int toIndex) -> int
AndroidX.Collection.FloatList.Contains(float element) -> bool
AndroidX.Collection.FloatList.ContainsAll(AndroidX.Collection.FloatList! elements) -> bool
AndroidX.Collection.FloatList.Count() -> int
AndroidX.Collection.FloatList.Count(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.FloatList.ElementAt(int index) -> float
AndroidX.Collection.FloatList.ElementAtOrElse(int index, Kotlin.Jvm.Functions.IFunction1! defaultValue) -> float
AndroidX.Collection.FloatList.First() -> float
AndroidX.Collection.FloatList.First(Kotlin.Jvm.Functions.IFunction1! predicate) -> float
AndroidX.Collection.FloatList.FloatList(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.FloatList.Fold(Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction2! operation) -> Java.Lang.Object?
AndroidX.Collection.FloatList.FoldIndexed(Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction3! operation) -> Java.Lang.Object?
AndroidX.Collection.FloatList.FoldRight(Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction2! operation) -> Java.Lang.Object?
AndroidX.Collection.FloatList.FoldRightIndexed(Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction3! operation) -> Java.Lang.Object?
AndroidX.Collection.FloatList.ForEach(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.FloatList.ForEachIndexed(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.FloatList.ForEachReversed(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.FloatList.ForEachReversedIndexed(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.FloatList.Get(int index) -> float
AndroidX.Collection.FloatList.IndexOf(float element) -> int
AndroidX.Collection.FloatList.IndexOfFirst(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.FloatList.IndexOfLast(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.FloatList.Indices.get -> Kotlin.Ranges.IntRange!
AndroidX.Collection.FloatList.IsEmpty.get -> bool
AndroidX.Collection.FloatList.IsNotEmpty.get -> bool
AndroidX.Collection.FloatList.JoinToString() -> string!
AndroidX.Collection.FloatList.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.FloatList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.FloatList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.FloatList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.FloatList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.FloatList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatList.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatList.JoinToString(Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatList.JoinToString(string! separator) -> string!
AndroidX.Collection.FloatList.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatList.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.FloatList.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatList.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.FloatList.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatList.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.FloatList.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatList.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.FloatList.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatList.Last() -> float
AndroidX.Collection.FloatList.Last(Kotlin.Jvm.Functions.IFunction1! predicate) -> float
AndroidX.Collection.FloatList.LastIndex.get -> int
AndroidX.Collection.FloatList.LastIndexOf(float element) -> int
AndroidX.Collection.FloatList.None() -> bool
AndroidX.Collection.FloatList.ReversedAny(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.FloatList.Size.get -> int
AndroidX.Collection.FloatListKt
AndroidX.Collection.FloatLongMap
AndroidX.Collection.FloatLongMap.All(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.FloatLongMap.Any() -> bool
AndroidX.Collection.FloatLongMap.Any(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.FloatLongMap.Capacity.get -> int
AndroidX.Collection.FloatLongMap.Contains(float key) -> bool
AndroidX.Collection.FloatLongMap.ContainsKey(float key) -> bool
AndroidX.Collection.FloatLongMap.ContainsValue(long value) -> bool
AndroidX.Collection.FloatLongMap.Count() -> int
AndroidX.Collection.FloatLongMap.Count(Kotlin.Jvm.Functions.IFunction2! predicate) -> int
AndroidX.Collection.FloatLongMap.FloatLongMap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.FloatLongMap.ForEach(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.FloatLongMap.ForEachKey(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.FloatLongMap.ForEachValue(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.FloatLongMap.Get(float key) -> long
AndroidX.Collection.FloatLongMap.GetOrDefault(float key, long defaultValue) -> long
AndroidX.Collection.FloatLongMap.GetOrElse(float key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> long
AndroidX.Collection.FloatLongMap.IsEmpty.get -> bool
AndroidX.Collection.FloatLongMap.IsNotEmpty.get -> bool
AndroidX.Collection.FloatLongMap.JoinToString() -> string!
AndroidX.Collection.FloatLongMap.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.FloatLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.FloatLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.FloatLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.FloatLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.FloatLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatLongMap.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatLongMap.JoinToString(Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatLongMap.JoinToString(string! separator) -> string!
AndroidX.Collection.FloatLongMap.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatLongMap.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.FloatLongMap.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatLongMap.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.FloatLongMap.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatLongMap.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.FloatLongMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatLongMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.FloatLongMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatLongMap.None() -> bool
AndroidX.Collection.FloatLongMap.Size.get -> int
AndroidX.Collection.FloatLongMapKt
AndroidX.Collection.FloatObjectMap
AndroidX.Collection.FloatObjectMap.All(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.FloatObjectMap.Any() -> bool
AndroidX.Collection.FloatObjectMap.Any(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.FloatObjectMap.Capacity.get -> int
AndroidX.Collection.FloatObjectMap.Contains(float key) -> bool
AndroidX.Collection.FloatObjectMap.ContainsKey(float key) -> bool
AndroidX.Collection.FloatObjectMap.ContainsValue(Java.Lang.Object? value) -> bool
AndroidX.Collection.FloatObjectMap.Count() -> int
AndroidX.Collection.FloatObjectMap.Count(Kotlin.Jvm.Functions.IFunction2! predicate) -> int
AndroidX.Collection.FloatObjectMap.FloatObjectMap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.FloatObjectMap.ForEach(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.FloatObjectMap.ForEachKey(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.FloatObjectMap.ForEachValue(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.FloatObjectMap.Get(float key) -> Java.Lang.Object?
AndroidX.Collection.FloatObjectMap.GetOrDefault(float key, Java.Lang.Object? defaultValue) -> Java.Lang.Object?
AndroidX.Collection.FloatObjectMap.GetOrElse(float key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> Java.Lang.Object?
AndroidX.Collection.FloatObjectMap.IsEmpty.get -> bool
AndroidX.Collection.FloatObjectMap.IsNotEmpty.get -> bool
AndroidX.Collection.FloatObjectMap.JoinToString() -> string!
AndroidX.Collection.FloatObjectMap.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.FloatObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.FloatObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.FloatObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.FloatObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.FloatObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatObjectMap.JoinToString(Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatObjectMap.JoinToString(string! separator) -> string!
AndroidX.Collection.FloatObjectMap.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatObjectMap.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.FloatObjectMap.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatObjectMap.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.FloatObjectMap.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatObjectMap.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.FloatObjectMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatObjectMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.FloatObjectMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.FloatObjectMap.None() -> bool
AndroidX.Collection.FloatObjectMap.Size.get -> int
AndroidX.Collection.FloatObjectMapKt
AndroidX.Collection.FloatSet
AndroidX.Collection.FloatSet.All(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.FloatSet.Any() -> bool
AndroidX.Collection.FloatSet.Any(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.FloatSet.Capacity.get -> int
AndroidX.Collection.FloatSet.Contains(float element) -> bool
AndroidX.Collection.FloatSet.Count() -> int
AndroidX.Collection.FloatSet.Count(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.FloatSet.First() -> float
AndroidX.Collection.FloatSet.First(Kotlin.Jvm.Functions.IFunction1! predicate) -> float
AndroidX.Collection.FloatSet.FloatSet(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.FloatSet.ForEach(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.FloatSet.IsEmpty.get -> bool
AndroidX.Collection.FloatSet.IsNotEmpty.get -> bool
AndroidX.Collection.FloatSet.JoinToString() -> string!
AndroidX.Collection.FloatSet.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.FloatSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.FloatSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.FloatSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.FloatSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.FloatSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatSet.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatSet.JoinToString(Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatSet.JoinToString(string! separator) -> string!
AndroidX.Collection.FloatSet.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatSet.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.FloatSet.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatSet.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.FloatSet.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatSet.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.FloatSet.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatSet.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.FloatSet.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.FloatSet.None() -> bool
AndroidX.Collection.FloatSet.Size.get -> int
AndroidX.Collection.FloatSetKt
AndroidX.Collection.IntFloatMap
AndroidX.Collection.IntFloatMap.All(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.IntFloatMap.Any() -> bool
AndroidX.Collection.IntFloatMap.Any(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.IntFloatMap.Capacity.get -> int
AndroidX.Collection.IntFloatMap.Contains(int key) -> bool
AndroidX.Collection.IntFloatMap.ContainsKey(int key) -> bool
AndroidX.Collection.IntFloatMap.ContainsValue(float value) -> bool
AndroidX.Collection.IntFloatMap.Count() -> int
AndroidX.Collection.IntFloatMap.Count(Kotlin.Jvm.Functions.IFunction2! predicate) -> int
AndroidX.Collection.IntFloatMap.ForEach(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.IntFloatMap.ForEachKey(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.IntFloatMap.ForEachValue(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.IntFloatMap.Get(int key) -> float
AndroidX.Collection.IntFloatMap.GetOrDefault(int key, float defaultValue) -> float
AndroidX.Collection.IntFloatMap.GetOrElse(int key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> float
AndroidX.Collection.IntFloatMap.IntFloatMap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.IntFloatMap.IsEmpty.get -> bool
AndroidX.Collection.IntFloatMap.IsNotEmpty.get -> bool
AndroidX.Collection.IntFloatMap.JoinToString() -> string!
AndroidX.Collection.IntFloatMap.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.IntFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.IntFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.IntFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.IntFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.IntFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntFloatMap.JoinToString(Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntFloatMap.JoinToString(string! separator) -> string!
AndroidX.Collection.IntFloatMap.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntFloatMap.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.IntFloatMap.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntFloatMap.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.IntFloatMap.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntFloatMap.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.IntFloatMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntFloatMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.IntFloatMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntFloatMap.None() -> bool
AndroidX.Collection.IntFloatMap.Size.get -> int
AndroidX.Collection.IntFloatMapKt
AndroidX.Collection.IntIntMap
AndroidX.Collection.IntIntMap.All(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.IntIntMap.Any() -> bool
AndroidX.Collection.IntIntMap.Any(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.IntIntMap.Capacity.get -> int
AndroidX.Collection.IntIntMap.Contains(int key) -> bool
AndroidX.Collection.IntIntMap.ContainsKey(int key) -> bool
AndroidX.Collection.IntIntMap.ContainsValue(int value) -> bool
AndroidX.Collection.IntIntMap.Count() -> int
AndroidX.Collection.IntIntMap.Count(Kotlin.Jvm.Functions.IFunction2! predicate) -> int
AndroidX.Collection.IntIntMap.ForEach(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.IntIntMap.ForEachKey(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.IntIntMap.ForEachValue(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.IntIntMap.Get(int key) -> int
AndroidX.Collection.IntIntMap.GetOrDefault(int key, int defaultValue) -> int
AndroidX.Collection.IntIntMap.GetOrElse(int key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> int
AndroidX.Collection.IntIntMap.IntIntMap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.IntIntMap.IsEmpty.get -> bool
AndroidX.Collection.IntIntMap.IsNotEmpty.get -> bool
AndroidX.Collection.IntIntMap.JoinToString() -> string!
AndroidX.Collection.IntIntMap.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.IntIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.IntIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.IntIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.IntIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.IntIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntIntMap.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntIntMap.JoinToString(Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntIntMap.JoinToString(string! separator) -> string!
AndroidX.Collection.IntIntMap.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntIntMap.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.IntIntMap.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntIntMap.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.IntIntMap.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntIntMap.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.IntIntMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntIntMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.IntIntMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntIntMap.None() -> bool
AndroidX.Collection.IntIntMap.Size.get -> int
AndroidX.Collection.IntIntMapKt
AndroidX.Collection.IntIntPair
AndroidX.Collection.IntIntPair.PackedValue.get -> long
AndroidX.Collection.IntIntPair.PackedValue.set -> void
AndroidX.Collection.IntList
AndroidX.Collection.IntList.Any() -> bool
AndroidX.Collection.IntList.Any(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.IntList.BinarySearch(int element) -> int
AndroidX.Collection.IntList.BinarySearch(int element, int fromIndex) -> int
AndroidX.Collection.IntList.BinarySearch(int element, int fromIndex, int toIndex) -> int
AndroidX.Collection.IntList.Contains(int element) -> bool
AndroidX.Collection.IntList.ContainsAll(AndroidX.Collection.IntList! elements) -> bool
AndroidX.Collection.IntList.Count() -> int
AndroidX.Collection.IntList.Count(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.IntList.ElementAt(int index) -> int
AndroidX.Collection.IntList.ElementAtOrElse(int index, Kotlin.Jvm.Functions.IFunction1! defaultValue) -> int
AndroidX.Collection.IntList.First() -> int
AndroidX.Collection.IntList.First(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.IntList.Fold(Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction2! operation) -> Java.Lang.Object?
AndroidX.Collection.IntList.FoldIndexed(Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction3! operation) -> Java.Lang.Object?
AndroidX.Collection.IntList.FoldRight(Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction2! operation) -> Java.Lang.Object?
AndroidX.Collection.IntList.FoldRightIndexed(Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction3! operation) -> Java.Lang.Object?
AndroidX.Collection.IntList.ForEach(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.IntList.ForEachIndexed(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.IntList.ForEachReversed(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.IntList.ForEachReversedIndexed(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.IntList.Get(int index) -> int
AndroidX.Collection.IntList.IndexOf(int element) -> int
AndroidX.Collection.IntList.IndexOfFirst(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.IntList.IndexOfLast(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.IntList.Indices.get -> Kotlin.Ranges.IntRange!
AndroidX.Collection.IntList.IntList(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.IntList.IsEmpty.get -> bool
AndroidX.Collection.IntList.IsNotEmpty.get -> bool
AndroidX.Collection.IntList.JoinToString() -> string!
AndroidX.Collection.IntList.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.IntList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.IntList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.IntList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.IntList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.IntList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntList.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntList.JoinToString(Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntList.JoinToString(string! separator) -> string!
AndroidX.Collection.IntList.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntList.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.IntList.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntList.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.IntList.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntList.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.IntList.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntList.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.IntList.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntList.Last() -> int
AndroidX.Collection.IntList.Last(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.IntList.LastIndex.get -> int
AndroidX.Collection.IntList.LastIndexOf(int element) -> int
AndroidX.Collection.IntList.None() -> bool
AndroidX.Collection.IntList.ReversedAny(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.IntList.Size.get -> int
AndroidX.Collection.IntListKt
AndroidX.Collection.IntLongMap
AndroidX.Collection.IntLongMap.All(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.IntLongMap.Any() -> bool
AndroidX.Collection.IntLongMap.Any(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.IntLongMap.Capacity.get -> int
AndroidX.Collection.IntLongMap.Contains(int key) -> bool
AndroidX.Collection.IntLongMap.ContainsKey(int key) -> bool
AndroidX.Collection.IntLongMap.ContainsValue(long value) -> bool
AndroidX.Collection.IntLongMap.Count() -> int
AndroidX.Collection.IntLongMap.Count(Kotlin.Jvm.Functions.IFunction2! predicate) -> int
AndroidX.Collection.IntLongMap.ForEach(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.IntLongMap.ForEachKey(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.IntLongMap.ForEachValue(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.IntLongMap.Get(int key) -> long
AndroidX.Collection.IntLongMap.GetOrDefault(int key, long defaultValue) -> long
AndroidX.Collection.IntLongMap.GetOrElse(int key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> long
AndroidX.Collection.IntLongMap.IntLongMap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.IntLongMap.IsEmpty.get -> bool
AndroidX.Collection.IntLongMap.IsNotEmpty.get -> bool
AndroidX.Collection.IntLongMap.JoinToString() -> string!
AndroidX.Collection.IntLongMap.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.IntLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.IntLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.IntLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.IntLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.IntLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntLongMap.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntLongMap.JoinToString(Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntLongMap.JoinToString(string! separator) -> string!
AndroidX.Collection.IntLongMap.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntLongMap.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.IntLongMap.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntLongMap.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.IntLongMap.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntLongMap.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.IntLongMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntLongMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.IntLongMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntLongMap.None() -> bool
AndroidX.Collection.IntLongMap.Size.get -> int
AndroidX.Collection.IntLongMapKt
AndroidX.Collection.IntObjectMap
AndroidX.Collection.IntObjectMap.All(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.IntObjectMap.Any() -> bool
AndroidX.Collection.IntObjectMap.Any(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.IntObjectMap.Capacity.get -> int
AndroidX.Collection.IntObjectMap.Contains(int key) -> bool
AndroidX.Collection.IntObjectMap.ContainsKey(int key) -> bool
AndroidX.Collection.IntObjectMap.ContainsValue(Java.Lang.Object? value) -> bool
AndroidX.Collection.IntObjectMap.Count() -> int
AndroidX.Collection.IntObjectMap.Count(Kotlin.Jvm.Functions.IFunction2! predicate) -> int
AndroidX.Collection.IntObjectMap.ForEach(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.IntObjectMap.ForEachKey(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.IntObjectMap.ForEachValue(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.IntObjectMap.Get(int key) -> Java.Lang.Object?
AndroidX.Collection.IntObjectMap.GetOrDefault(int key, Java.Lang.Object? defaultValue) -> Java.Lang.Object?
AndroidX.Collection.IntObjectMap.GetOrElse(int key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> Java.Lang.Object?
AndroidX.Collection.IntObjectMap.IntObjectMap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.IntObjectMap.IsEmpty.get -> bool
AndroidX.Collection.IntObjectMap.IsNotEmpty.get -> bool
AndroidX.Collection.IntObjectMap.JoinToString() -> string!
AndroidX.Collection.IntObjectMap.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.IntObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.IntObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.IntObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.IntObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.IntObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntObjectMap.JoinToString(Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntObjectMap.JoinToString(string! separator) -> string!
AndroidX.Collection.IntObjectMap.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntObjectMap.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.IntObjectMap.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntObjectMap.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.IntObjectMap.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntObjectMap.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.IntObjectMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntObjectMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.IntObjectMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.IntObjectMap.None() -> bool
AndroidX.Collection.IntObjectMap.Size.get -> int
AndroidX.Collection.IntObjectMapKt
AndroidX.Collection.IntSet
AndroidX.Collection.IntSet.All(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.IntSet.Any() -> bool
AndroidX.Collection.IntSet.Any(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.IntSet.Capacity.get -> int
AndroidX.Collection.IntSet.Contains(int element) -> bool
AndroidX.Collection.IntSet.Count() -> int
AndroidX.Collection.IntSet.Count(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.IntSet.First() -> int
AndroidX.Collection.IntSet.First(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.IntSet.ForEach(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.IntSet.IntSet(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.IntSet.IsEmpty.get -> bool
AndroidX.Collection.IntSet.IsNotEmpty.get -> bool
AndroidX.Collection.IntSet.JoinToString() -> string!
AndroidX.Collection.IntSet.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.IntSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.IntSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.IntSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.IntSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.IntSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntSet.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntSet.JoinToString(Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntSet.JoinToString(string! separator) -> string!
AndroidX.Collection.IntSet.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntSet.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.IntSet.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntSet.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.IntSet.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntSet.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.IntSet.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntSet.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.IntSet.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.IntSet.None() -> bool
AndroidX.Collection.IntSet.Size.get -> int
AndroidX.Collection.IntSetKt
AndroidX.Collection.Internal.ContainerHelpersKt
AndroidX.Collection.Internal.LockExtKt
AndroidX.Collection.Internal.PackingHelpers_jvmKt
AndroidX.Collection.Internal.RuntimeHelpersKt
AndroidX.Collection.LongFloatMap
AndroidX.Collection.LongFloatMap.All(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.LongFloatMap.Any() -> bool
AndroidX.Collection.LongFloatMap.Any(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.LongFloatMap.Capacity.get -> int
AndroidX.Collection.LongFloatMap.Contains(long key) -> bool
AndroidX.Collection.LongFloatMap.ContainsKey(long key) -> bool
AndroidX.Collection.LongFloatMap.ContainsValue(float value) -> bool
AndroidX.Collection.LongFloatMap.Count() -> int
AndroidX.Collection.LongFloatMap.Count(Kotlin.Jvm.Functions.IFunction2! predicate) -> int
AndroidX.Collection.LongFloatMap.ForEach(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.LongFloatMap.ForEachKey(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.LongFloatMap.ForEachValue(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.LongFloatMap.Get(long key) -> float
AndroidX.Collection.LongFloatMap.GetOrDefault(long key, float defaultValue) -> float
AndroidX.Collection.LongFloatMap.GetOrElse(long key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> float
AndroidX.Collection.LongFloatMap.IsEmpty.get -> bool
AndroidX.Collection.LongFloatMap.IsNotEmpty.get -> bool
AndroidX.Collection.LongFloatMap.JoinToString() -> string!
AndroidX.Collection.LongFloatMap.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.LongFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.LongFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.LongFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.LongFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.LongFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongFloatMap.JoinToString(Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongFloatMap.JoinToString(string! separator) -> string!
AndroidX.Collection.LongFloatMap.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongFloatMap.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.LongFloatMap.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongFloatMap.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.LongFloatMap.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongFloatMap.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.LongFloatMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongFloatMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.LongFloatMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongFloatMap.LongFloatMap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.LongFloatMap.None() -> bool
AndroidX.Collection.LongFloatMap.Size.get -> int
AndroidX.Collection.LongFloatMapKt
AndroidX.Collection.LongIntMap
AndroidX.Collection.LongIntMap.All(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.LongIntMap.Any() -> bool
AndroidX.Collection.LongIntMap.Any(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.LongIntMap.Capacity.get -> int
AndroidX.Collection.LongIntMap.Contains(long key) -> bool
AndroidX.Collection.LongIntMap.ContainsKey(long key) -> bool
AndroidX.Collection.LongIntMap.ContainsValue(int value) -> bool
AndroidX.Collection.LongIntMap.Count() -> int
AndroidX.Collection.LongIntMap.Count(Kotlin.Jvm.Functions.IFunction2! predicate) -> int
AndroidX.Collection.LongIntMap.ForEach(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.LongIntMap.ForEachKey(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.LongIntMap.ForEachValue(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.LongIntMap.Get(long key) -> int
AndroidX.Collection.LongIntMap.GetOrDefault(long key, int defaultValue) -> int
AndroidX.Collection.LongIntMap.GetOrElse(long key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> int
AndroidX.Collection.LongIntMap.IsEmpty.get -> bool
AndroidX.Collection.LongIntMap.IsNotEmpty.get -> bool
AndroidX.Collection.LongIntMap.JoinToString() -> string!
AndroidX.Collection.LongIntMap.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.LongIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.LongIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.LongIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.LongIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.LongIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongIntMap.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongIntMap.JoinToString(Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongIntMap.JoinToString(string! separator) -> string!
AndroidX.Collection.LongIntMap.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongIntMap.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.LongIntMap.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongIntMap.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.LongIntMap.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongIntMap.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.LongIntMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongIntMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.LongIntMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongIntMap.LongIntMap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.LongIntMap.None() -> bool
AndroidX.Collection.LongIntMap.Size.get -> int
AndroidX.Collection.LongIntMapKt
AndroidX.Collection.LongList
AndroidX.Collection.LongList.Any() -> bool
AndroidX.Collection.LongList.Any(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.LongList.BinarySearch(int element) -> int
AndroidX.Collection.LongList.BinarySearch(int element, int fromIndex) -> int
AndroidX.Collection.LongList.BinarySearch(int element, int fromIndex, int toIndex) -> int
AndroidX.Collection.LongList.Contains(long element) -> bool
AndroidX.Collection.LongList.ContainsAll(AndroidX.Collection.LongList! elements) -> bool
AndroidX.Collection.LongList.Count() -> int
AndroidX.Collection.LongList.Count(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.LongList.ElementAt(int index) -> long
AndroidX.Collection.LongList.ElementAtOrElse(int index, Kotlin.Jvm.Functions.IFunction1! defaultValue) -> long
AndroidX.Collection.LongList.First() -> long
AndroidX.Collection.LongList.First(Kotlin.Jvm.Functions.IFunction1! predicate) -> long
AndroidX.Collection.LongList.Fold(Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction2! operation) -> Java.Lang.Object?
AndroidX.Collection.LongList.FoldIndexed(Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction3! operation) -> Java.Lang.Object?
AndroidX.Collection.LongList.FoldRight(Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction2! operation) -> Java.Lang.Object?
AndroidX.Collection.LongList.FoldRightIndexed(Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction3! operation) -> Java.Lang.Object?
AndroidX.Collection.LongList.ForEach(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.LongList.ForEachIndexed(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.LongList.ForEachReversed(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.LongList.ForEachReversedIndexed(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.LongList.Get(int index) -> long
AndroidX.Collection.LongList.IndexOf(long element) -> int
AndroidX.Collection.LongList.IndexOfFirst(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.LongList.IndexOfLast(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.LongList.Indices.get -> Kotlin.Ranges.IntRange!
AndroidX.Collection.LongList.IsEmpty.get -> bool
AndroidX.Collection.LongList.IsNotEmpty.get -> bool
AndroidX.Collection.LongList.JoinToString() -> string!
AndroidX.Collection.LongList.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.LongList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.LongList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.LongList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.LongList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.LongList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongList.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongList.JoinToString(Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongList.JoinToString(string! separator) -> string!
AndroidX.Collection.LongList.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongList.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.LongList.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongList.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.LongList.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongList.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.LongList.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongList.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.LongList.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongList.Last() -> long
AndroidX.Collection.LongList.Last(Kotlin.Jvm.Functions.IFunction1! predicate) -> long
AndroidX.Collection.LongList.LastIndex.get -> int
AndroidX.Collection.LongList.LastIndexOf(long element) -> int
AndroidX.Collection.LongList.LongList(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.LongList.None() -> bool
AndroidX.Collection.LongList.ReversedAny(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.LongList.Size.get -> int
AndroidX.Collection.LongListKt
AndroidX.Collection.LongLongMap
AndroidX.Collection.LongLongMap.All(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.LongLongMap.Any() -> bool
AndroidX.Collection.LongLongMap.Any(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.LongLongMap.Capacity.get -> int
AndroidX.Collection.LongLongMap.Contains(long key) -> bool
AndroidX.Collection.LongLongMap.ContainsKey(long key) -> bool
AndroidX.Collection.LongLongMap.ContainsValue(long value) -> bool
AndroidX.Collection.LongLongMap.Count() -> int
AndroidX.Collection.LongLongMap.Count(Kotlin.Jvm.Functions.IFunction2! predicate) -> int
AndroidX.Collection.LongLongMap.ForEach(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.LongLongMap.ForEachKey(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.LongLongMap.ForEachValue(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.LongLongMap.Get(long key) -> long
AndroidX.Collection.LongLongMap.GetOrDefault(long key, long defaultValue) -> long
AndroidX.Collection.LongLongMap.GetOrElse(long key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> long
AndroidX.Collection.LongLongMap.IsEmpty.get -> bool
AndroidX.Collection.LongLongMap.IsNotEmpty.get -> bool
AndroidX.Collection.LongLongMap.JoinToString() -> string!
AndroidX.Collection.LongLongMap.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.LongLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.LongLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.LongLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.LongLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.LongLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongLongMap.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongLongMap.JoinToString(Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongLongMap.JoinToString(string! separator) -> string!
AndroidX.Collection.LongLongMap.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongLongMap.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.LongLongMap.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongLongMap.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.LongLongMap.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongLongMap.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.LongLongMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongLongMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.LongLongMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongLongMap.LongLongMap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.LongLongMap.None() -> bool
AndroidX.Collection.LongLongMap.Size.get -> int
AndroidX.Collection.LongLongMapKt
AndroidX.Collection.LongLongPair
AndroidX.Collection.LongLongPair.Component1() -> long
AndroidX.Collection.LongLongPair.Component2() -> long
AndroidX.Collection.LongLongPair.First.get -> long
AndroidX.Collection.LongLongPair.LongLongPair(long first, long second) -> void
AndroidX.Collection.LongLongPair.Second.get -> long
AndroidX.Collection.LongObjectMap
AndroidX.Collection.LongObjectMap.All(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.LongObjectMap.Any() -> bool
AndroidX.Collection.LongObjectMap.Any(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.LongObjectMap.Capacity.get -> int
AndroidX.Collection.LongObjectMap.Contains(long key) -> bool
AndroidX.Collection.LongObjectMap.ContainsKey(long key) -> bool
AndroidX.Collection.LongObjectMap.ContainsValue(Java.Lang.Object? value) -> bool
AndroidX.Collection.LongObjectMap.Count() -> int
AndroidX.Collection.LongObjectMap.Count(Kotlin.Jvm.Functions.IFunction2! predicate) -> int
AndroidX.Collection.LongObjectMap.ForEach(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.LongObjectMap.ForEachKey(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.LongObjectMap.ForEachValue(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.LongObjectMap.Get(long key) -> Java.Lang.Object?
AndroidX.Collection.LongObjectMap.GetOrDefault(long key, Java.Lang.Object? defaultValue) -> Java.Lang.Object?
AndroidX.Collection.LongObjectMap.GetOrElse(long key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> Java.Lang.Object?
AndroidX.Collection.LongObjectMap.IsEmpty.get -> bool
AndroidX.Collection.LongObjectMap.IsNotEmpty.get -> bool
AndroidX.Collection.LongObjectMap.JoinToString() -> string!
AndroidX.Collection.LongObjectMap.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.LongObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.LongObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.LongObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.LongObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.LongObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongObjectMap.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongObjectMap.JoinToString(Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongObjectMap.JoinToString(string! separator) -> string!
AndroidX.Collection.LongObjectMap.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongObjectMap.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.LongObjectMap.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongObjectMap.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.LongObjectMap.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongObjectMap.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.LongObjectMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongObjectMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.LongObjectMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.LongObjectMap.LongObjectMap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.LongObjectMap.None() -> bool
AndroidX.Collection.LongObjectMap.Size.get -> int
AndroidX.Collection.LongObjectMapKt
AndroidX.Collection.LongSet
AndroidX.Collection.LongSet.All(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.LongSet.Any() -> bool
AndroidX.Collection.LongSet.Any(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.LongSet.Capacity.get -> int
AndroidX.Collection.LongSet.Contains(long element) -> bool
AndroidX.Collection.LongSet.Count() -> int
AndroidX.Collection.LongSet.Count(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.LongSet.First() -> long
AndroidX.Collection.LongSet.First(Kotlin.Jvm.Functions.IFunction1! predicate) -> long
AndroidX.Collection.LongSet.ForEach(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.LongSet.IsEmpty.get -> bool
AndroidX.Collection.LongSet.IsNotEmpty.get -> bool
AndroidX.Collection.LongSet.JoinToString() -> string!
AndroidX.Collection.LongSet.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.LongSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.LongSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.LongSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.LongSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.LongSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongSet.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongSet.JoinToString(Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongSet.JoinToString(string! separator) -> string!
AndroidX.Collection.LongSet.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongSet.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.LongSet.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongSet.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.LongSet.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongSet.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.LongSet.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongSet.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.LongSet.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction1! transform) -> string!
AndroidX.Collection.LongSet.LongSet(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.LongSet.None() -> bool
AndroidX.Collection.LongSet.Size.get -> int
AndroidX.Collection.LongSetKt
AndroidX.Collection.LongSparseArray
AndroidX.Collection.LongSparseArray.LongSparseArray() -> void
AndroidX.Collection.LongSparseArray.LongSparseArray(int initialCapacity) -> void
AndroidX.Collection.LongSparseArray.LongSparseArray(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.LongSparseArrayKt
AndroidX.Collection.LruCache
AndroidX.Collection.LruCache.CreateCount() -> int
AndroidX.Collection.LruCache.EvictAll() -> void
AndroidX.Collection.LruCache.EvictionCount() -> int
AndroidX.Collection.LruCache.Get(Java.Lang.Object! key) -> Java.Lang.Object?
AndroidX.Collection.LruCache.HitCount() -> int
AndroidX.Collection.LruCache.LruCache(int maxSize) -> void
AndroidX.Collection.LruCache.LruCache(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.LruCache.MaxSize() -> int
AndroidX.Collection.LruCache.MissCount() -> int
AndroidX.Collection.LruCache.Put(Java.Lang.Object! key, Java.Lang.Object! value) -> Java.Lang.Object?
AndroidX.Collection.LruCache.PutCount() -> int
AndroidX.Collection.LruCache.Remove(Java.Lang.Object! key) -> Java.Lang.Object?
AndroidX.Collection.LruCache.Size() -> int
AndroidX.Collection.LruCache.Snapshot() -> System.Collections.IDictionary!
AndroidX.Collection.LruCacheKt
AndroidX.Collection.MutableDoubleList
AndroidX.Collection.MutableDoubleList.Add(double element) -> bool
AndroidX.Collection.MutableDoubleList.Add(int index, double element) -> void
AndroidX.Collection.MutableDoubleList.AddAll(AndroidX.Collection.DoubleList! elements) -> bool
AndroidX.Collection.MutableDoubleList.AddAll(double[]! elements) -> bool
AndroidX.Collection.MutableDoubleList.AddAll(int index, AndroidX.Collection.DoubleList! elements) -> bool
AndroidX.Collection.MutableDoubleList.AddAll(int index, double[]! elements) -> bool
AndroidX.Collection.MutableDoubleList.Capacity.get -> int
AndroidX.Collection.MutableDoubleList.Clear() -> void
AndroidX.Collection.MutableDoubleList.EnsureCapacity(int capacity) -> void
AndroidX.Collection.MutableDoubleList.MinusAssign(AndroidX.Collection.DoubleList! elements) -> void
AndroidX.Collection.MutableDoubleList.MinusAssign(double element) -> void
AndroidX.Collection.MutableDoubleList.MinusAssign(double[]! elements) -> void
AndroidX.Collection.MutableDoubleList.MutableDoubleList() -> void
AndroidX.Collection.MutableDoubleList.MutableDoubleList(int initialCapacity) -> void
AndroidX.Collection.MutableDoubleList.PlusAssign(AndroidX.Collection.DoubleList! elements) -> void
AndroidX.Collection.MutableDoubleList.PlusAssign(double element) -> void
AndroidX.Collection.MutableDoubleList.PlusAssign(double[]! elements) -> void
AndroidX.Collection.MutableDoubleList.Remove(double element) -> bool
AndroidX.Collection.MutableDoubleList.RemoveAll(AndroidX.Collection.DoubleList! elements) -> bool
AndroidX.Collection.MutableDoubleList.RemoveAll(double[]! elements) -> bool
AndroidX.Collection.MutableDoubleList.RemoveAt(int index) -> double
AndroidX.Collection.MutableDoubleList.RemoveRange(int start, int end) -> void
AndroidX.Collection.MutableDoubleList.RetainAll(AndroidX.Collection.DoubleList! elements) -> bool
AndroidX.Collection.MutableDoubleList.RetainAll(double[]! elements) -> bool
AndroidX.Collection.MutableDoubleList.Set(int index, double element) -> double
AndroidX.Collection.MutableDoubleList.Sort() -> void
AndroidX.Collection.MutableDoubleList.SortDescending() -> void
AndroidX.Collection.MutableDoubleList.Trim(int minCapacity) -> void
AndroidX.Collection.MutableFloatFloatMap
AndroidX.Collection.MutableFloatFloatMap.Clear() -> void
AndroidX.Collection.MutableFloatFloatMap.GetOrPut(float key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> float
AndroidX.Collection.MutableFloatFloatMap.MinusAssign(AndroidX.Collection.FloatList! keys) -> void
AndroidX.Collection.MutableFloatFloatMap.MinusAssign(AndroidX.Collection.FloatSet! keys) -> void
AndroidX.Collection.MutableFloatFloatMap.MinusAssign(float key) -> void
AndroidX.Collection.MutableFloatFloatMap.MinusAssign(float[]! keys) -> void
AndroidX.Collection.MutableFloatFloatMap.MutableFloatFloatMap() -> void
AndroidX.Collection.MutableFloatFloatMap.MutableFloatFloatMap(int initialCapacity) -> void
AndroidX.Collection.MutableFloatFloatMap.PlusAssign(AndroidX.Collection.FloatFloatMap! from) -> void
AndroidX.Collection.MutableFloatFloatMap.Put(float key, float value) -> void
AndroidX.Collection.MutableFloatFloatMap.Put(float key, float value, float default) -> float
AndroidX.Collection.MutableFloatFloatMap.PutAll(AndroidX.Collection.FloatFloatMap! from) -> void
AndroidX.Collection.MutableFloatFloatMap.Remove(float key) -> void
AndroidX.Collection.MutableFloatFloatMap.Remove(float key, float value) -> bool
AndroidX.Collection.MutableFloatFloatMap.RemoveIf(Kotlin.Jvm.Functions.IFunction2! predicate) -> void
AndroidX.Collection.MutableFloatFloatMap.Set(float key, float value) -> void
AndroidX.Collection.MutableFloatFloatMap.Trim() -> int
AndroidX.Collection.MutableFloatIntMap
AndroidX.Collection.MutableFloatIntMap.Clear() -> void
AndroidX.Collection.MutableFloatIntMap.GetOrPut(float key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> int
AndroidX.Collection.MutableFloatIntMap.MinusAssign(AndroidX.Collection.FloatList! keys) -> void
AndroidX.Collection.MutableFloatIntMap.MinusAssign(AndroidX.Collection.FloatSet! keys) -> void
AndroidX.Collection.MutableFloatIntMap.MinusAssign(float key) -> void
AndroidX.Collection.MutableFloatIntMap.MinusAssign(float[]! keys) -> void
AndroidX.Collection.MutableFloatIntMap.MutableFloatIntMap() -> void
AndroidX.Collection.MutableFloatIntMap.MutableFloatIntMap(int initialCapacity) -> void
AndroidX.Collection.MutableFloatIntMap.PlusAssign(AndroidX.Collection.FloatIntMap! from) -> void
AndroidX.Collection.MutableFloatIntMap.Put(float key, int value) -> void
AndroidX.Collection.MutableFloatIntMap.Put(float key, int value, int default) -> int
AndroidX.Collection.MutableFloatIntMap.PutAll(AndroidX.Collection.FloatIntMap! from) -> void
AndroidX.Collection.MutableFloatIntMap.Remove(float key) -> void
AndroidX.Collection.MutableFloatIntMap.Remove(float key, int value) -> bool
AndroidX.Collection.MutableFloatIntMap.RemoveIf(Kotlin.Jvm.Functions.IFunction2! predicate) -> void
AndroidX.Collection.MutableFloatIntMap.Set(float key, int value) -> void
AndroidX.Collection.MutableFloatIntMap.Trim() -> int
AndroidX.Collection.MutableFloatList
AndroidX.Collection.MutableFloatList.Add(float element) -> bool
AndroidX.Collection.MutableFloatList.Add(int index, float element) -> void
AndroidX.Collection.MutableFloatList.AddAll(AndroidX.Collection.FloatList! elements) -> bool
AndroidX.Collection.MutableFloatList.AddAll(float[]! elements) -> bool
AndroidX.Collection.MutableFloatList.AddAll(int index, AndroidX.Collection.FloatList! elements) -> bool
AndroidX.Collection.MutableFloatList.AddAll(int index, float[]! elements) -> bool
AndroidX.Collection.MutableFloatList.Capacity.get -> int
AndroidX.Collection.MutableFloatList.Clear() -> void
AndroidX.Collection.MutableFloatList.EnsureCapacity(int capacity) -> void
AndroidX.Collection.MutableFloatList.MinusAssign(AndroidX.Collection.FloatList! elements) -> void
AndroidX.Collection.MutableFloatList.MinusAssign(float element) -> void
AndroidX.Collection.MutableFloatList.MinusAssign(float[]! elements) -> void
AndroidX.Collection.MutableFloatList.MutableFloatList() -> void
AndroidX.Collection.MutableFloatList.MutableFloatList(int initialCapacity) -> void
AndroidX.Collection.MutableFloatList.PlusAssign(AndroidX.Collection.FloatList! elements) -> void
AndroidX.Collection.MutableFloatList.PlusAssign(float element) -> void
AndroidX.Collection.MutableFloatList.PlusAssign(float[]! elements) -> void
AndroidX.Collection.MutableFloatList.Remove(float element) -> bool
AndroidX.Collection.MutableFloatList.RemoveAll(AndroidX.Collection.FloatList! elements) -> bool
AndroidX.Collection.MutableFloatList.RemoveAll(float[]! elements) -> bool
AndroidX.Collection.MutableFloatList.RemoveAt(int index) -> float
AndroidX.Collection.MutableFloatList.RemoveRange(int start, int end) -> void
AndroidX.Collection.MutableFloatList.RetainAll(AndroidX.Collection.FloatList! elements) -> bool
AndroidX.Collection.MutableFloatList.RetainAll(float[]! elements) -> bool
AndroidX.Collection.MutableFloatList.Set(int index, float element) -> float
AndroidX.Collection.MutableFloatList.Sort() -> void
AndroidX.Collection.MutableFloatList.SortDescending() -> void
AndroidX.Collection.MutableFloatList.Trim(int minCapacity) -> void
AndroidX.Collection.MutableFloatLongMap
AndroidX.Collection.MutableFloatLongMap.Clear() -> void
AndroidX.Collection.MutableFloatLongMap.GetOrPut(float key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> long
AndroidX.Collection.MutableFloatLongMap.MinusAssign(AndroidX.Collection.FloatList! keys) -> void
AndroidX.Collection.MutableFloatLongMap.MinusAssign(AndroidX.Collection.FloatSet! keys) -> void
AndroidX.Collection.MutableFloatLongMap.MinusAssign(float key) -> void
AndroidX.Collection.MutableFloatLongMap.MinusAssign(float[]! keys) -> void
AndroidX.Collection.MutableFloatLongMap.MutableFloatLongMap() -> void
AndroidX.Collection.MutableFloatLongMap.MutableFloatLongMap(int initialCapacity) -> void
AndroidX.Collection.MutableFloatLongMap.PlusAssign(AndroidX.Collection.FloatLongMap! from) -> void
AndroidX.Collection.MutableFloatLongMap.Put(float key, long value) -> void
AndroidX.Collection.MutableFloatLongMap.Put(float key, long value, long default) -> long
AndroidX.Collection.MutableFloatLongMap.PutAll(AndroidX.Collection.FloatLongMap! from) -> void
AndroidX.Collection.MutableFloatLongMap.Remove(float key) -> void
AndroidX.Collection.MutableFloatLongMap.Remove(float key, long value) -> bool
AndroidX.Collection.MutableFloatLongMap.RemoveIf(Kotlin.Jvm.Functions.IFunction2! predicate) -> void
AndroidX.Collection.MutableFloatLongMap.Set(float key, long value) -> void
AndroidX.Collection.MutableFloatLongMap.Trim() -> int
AndroidX.Collection.MutableFloatObjectMap
AndroidX.Collection.MutableFloatObjectMap.Clear() -> void
AndroidX.Collection.MutableFloatObjectMap.GetOrPut(float key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> Java.Lang.Object?
AndroidX.Collection.MutableFloatObjectMap.MinusAssign(AndroidX.Collection.FloatList! keys) -> void
AndroidX.Collection.MutableFloatObjectMap.MinusAssign(AndroidX.Collection.FloatSet! keys) -> void
AndroidX.Collection.MutableFloatObjectMap.MinusAssign(float key) -> void
AndroidX.Collection.MutableFloatObjectMap.MinusAssign(float[]! keys) -> void
AndroidX.Collection.MutableFloatObjectMap.MutableFloatObjectMap() -> void
AndroidX.Collection.MutableFloatObjectMap.MutableFloatObjectMap(int initialCapacity) -> void
AndroidX.Collection.MutableFloatObjectMap.PlusAssign(AndroidX.Collection.FloatObjectMap! from) -> void
AndroidX.Collection.MutableFloatObjectMap.Put(float key, Java.Lang.Object? value) -> Java.Lang.Object?
AndroidX.Collection.MutableFloatObjectMap.PutAll(AndroidX.Collection.FloatObjectMap! from) -> void
AndroidX.Collection.MutableFloatObjectMap.Remove(float key) -> Java.Lang.Object?
AndroidX.Collection.MutableFloatObjectMap.Remove(float key, Java.Lang.Object? value) -> bool
AndroidX.Collection.MutableFloatObjectMap.RemoveIf(Kotlin.Jvm.Functions.IFunction2! predicate) -> void
AndroidX.Collection.MutableFloatObjectMap.Set(float key, Java.Lang.Object? value) -> void
AndroidX.Collection.MutableFloatObjectMap.Trim() -> int
AndroidX.Collection.MutableFloatSet
AndroidX.Collection.MutableFloatSet.Add(float element) -> bool
AndroidX.Collection.MutableFloatSet.AddAll(AndroidX.Collection.FloatSet! elements) -> bool
AndroidX.Collection.MutableFloatSet.AddAll(float[]! elements) -> bool
AndroidX.Collection.MutableFloatSet.Clear() -> void
AndroidX.Collection.MutableFloatSet.MinusAssign(AndroidX.Collection.FloatSet! elements) -> void
AndroidX.Collection.MutableFloatSet.MinusAssign(float element) -> void
AndroidX.Collection.MutableFloatSet.MinusAssign(float[]! elements) -> void
AndroidX.Collection.MutableFloatSet.MutableFloatSet() -> void
AndroidX.Collection.MutableFloatSet.MutableFloatSet(int initialCapacity) -> void
AndroidX.Collection.MutableFloatSet.PlusAssign(AndroidX.Collection.FloatSet! elements) -> void
AndroidX.Collection.MutableFloatSet.PlusAssign(float element) -> void
AndroidX.Collection.MutableFloatSet.PlusAssign(float[]! elements) -> void
AndroidX.Collection.MutableFloatSet.Remove(float element) -> bool
AndroidX.Collection.MutableFloatSet.RemoveAll(AndroidX.Collection.FloatSet! elements) -> bool
AndroidX.Collection.MutableFloatSet.RemoveAll(float[]! elements) -> bool
AndroidX.Collection.MutableFloatSet.Trim() -> int
AndroidX.Collection.MutableIntFloatMap
AndroidX.Collection.MutableIntFloatMap.Clear() -> void
AndroidX.Collection.MutableIntFloatMap.GetOrPut(int key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> float
AndroidX.Collection.MutableIntFloatMap.MinusAssign(AndroidX.Collection.IntList! keys) -> void
AndroidX.Collection.MutableIntFloatMap.MinusAssign(AndroidX.Collection.IntSet! keys) -> void
AndroidX.Collection.MutableIntFloatMap.MinusAssign(int key) -> void
AndroidX.Collection.MutableIntFloatMap.MinusAssign(int[]! keys) -> void
AndroidX.Collection.MutableIntFloatMap.MutableIntFloatMap() -> void
AndroidX.Collection.MutableIntFloatMap.MutableIntFloatMap(int initialCapacity) -> void
AndroidX.Collection.MutableIntFloatMap.PlusAssign(AndroidX.Collection.IntFloatMap! from) -> void
AndroidX.Collection.MutableIntFloatMap.Put(int key, float value) -> void
AndroidX.Collection.MutableIntFloatMap.Put(int key, float value, float default) -> float
AndroidX.Collection.MutableIntFloatMap.PutAll(AndroidX.Collection.IntFloatMap! from) -> void
AndroidX.Collection.MutableIntFloatMap.Remove(int key) -> void
AndroidX.Collection.MutableIntFloatMap.Remove(int key, float value) -> bool
AndroidX.Collection.MutableIntFloatMap.RemoveIf(Kotlin.Jvm.Functions.IFunction2! predicate) -> void
AndroidX.Collection.MutableIntFloatMap.Set(int key, float value) -> void
AndroidX.Collection.MutableIntFloatMap.Trim() -> int
AndroidX.Collection.MutableIntIntMap
AndroidX.Collection.MutableIntIntMap.Clear() -> void
AndroidX.Collection.MutableIntIntMap.GetOrPut(int key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> int
AndroidX.Collection.MutableIntIntMap.MinusAssign(AndroidX.Collection.IntList! keys) -> void
AndroidX.Collection.MutableIntIntMap.MinusAssign(AndroidX.Collection.IntSet! keys) -> void
AndroidX.Collection.MutableIntIntMap.MinusAssign(int key) -> void
AndroidX.Collection.MutableIntIntMap.MinusAssign(int[]! keys) -> void
AndroidX.Collection.MutableIntIntMap.MutableIntIntMap() -> void
AndroidX.Collection.MutableIntIntMap.MutableIntIntMap(int initialCapacity) -> void
AndroidX.Collection.MutableIntIntMap.PlusAssign(AndroidX.Collection.IntIntMap! from) -> void
AndroidX.Collection.MutableIntIntMap.Put(int key, int value) -> void
AndroidX.Collection.MutableIntIntMap.Put(int key, int value, int default) -> int
AndroidX.Collection.MutableIntIntMap.PutAll(AndroidX.Collection.IntIntMap! from) -> void
AndroidX.Collection.MutableIntIntMap.Remove(int key) -> void
AndroidX.Collection.MutableIntIntMap.Remove(int key, int value) -> bool
AndroidX.Collection.MutableIntIntMap.RemoveIf(Kotlin.Jvm.Functions.IFunction2! predicate) -> void
AndroidX.Collection.MutableIntIntMap.Set(int key, int value) -> void
AndroidX.Collection.MutableIntIntMap.Trim() -> int
AndroidX.Collection.MutableIntList
AndroidX.Collection.MutableIntList.Add(int element) -> bool
AndroidX.Collection.MutableIntList.Add(int index, int element) -> void
AndroidX.Collection.MutableIntList.AddAll(AndroidX.Collection.IntList! elements) -> bool
AndroidX.Collection.MutableIntList.AddAll(int index, AndroidX.Collection.IntList! elements) -> bool
AndroidX.Collection.MutableIntList.AddAll(int index, int[]! elements) -> bool
AndroidX.Collection.MutableIntList.AddAll(int[]! elements) -> bool
AndroidX.Collection.MutableIntList.Capacity.get -> int
AndroidX.Collection.MutableIntList.Clear() -> void
AndroidX.Collection.MutableIntList.EnsureCapacity(int capacity) -> void
AndroidX.Collection.MutableIntList.MinusAssign(AndroidX.Collection.IntList! elements) -> void
AndroidX.Collection.MutableIntList.MinusAssign(int element) -> void
AndroidX.Collection.MutableIntList.MinusAssign(int[]! elements) -> void
AndroidX.Collection.MutableIntList.MutableIntList() -> void
AndroidX.Collection.MutableIntList.MutableIntList(int initialCapacity) -> void
AndroidX.Collection.MutableIntList.PlusAssign(AndroidX.Collection.IntList! elements) -> void
AndroidX.Collection.MutableIntList.PlusAssign(int element) -> void
AndroidX.Collection.MutableIntList.PlusAssign(int[]! elements) -> void
AndroidX.Collection.MutableIntList.Remove(int element) -> bool
AndroidX.Collection.MutableIntList.RemoveAll(AndroidX.Collection.IntList! elements) -> bool
AndroidX.Collection.MutableIntList.RemoveAll(int[]! elements) -> bool
AndroidX.Collection.MutableIntList.RemoveAt(int index) -> int
AndroidX.Collection.MutableIntList.RemoveRange(int start, int end) -> void
AndroidX.Collection.MutableIntList.RetainAll(AndroidX.Collection.IntList! elements) -> bool
AndroidX.Collection.MutableIntList.RetainAll(int[]! elements) -> bool
AndroidX.Collection.MutableIntList.Set(int index, int element) -> int
AndroidX.Collection.MutableIntList.Sort() -> void
AndroidX.Collection.MutableIntList.SortDescending() -> void
AndroidX.Collection.MutableIntList.Trim(int minCapacity) -> void
AndroidX.Collection.MutableIntLongMap
AndroidX.Collection.MutableIntLongMap.Clear() -> void
AndroidX.Collection.MutableIntLongMap.GetOrPut(int key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> long
AndroidX.Collection.MutableIntLongMap.MinusAssign(AndroidX.Collection.IntList! keys) -> void
AndroidX.Collection.MutableIntLongMap.MinusAssign(AndroidX.Collection.IntSet! keys) -> void
AndroidX.Collection.MutableIntLongMap.MinusAssign(int key) -> void
AndroidX.Collection.MutableIntLongMap.MinusAssign(int[]! keys) -> void
AndroidX.Collection.MutableIntLongMap.MutableIntLongMap() -> void
AndroidX.Collection.MutableIntLongMap.MutableIntLongMap(int initialCapacity) -> void
AndroidX.Collection.MutableIntLongMap.PlusAssign(AndroidX.Collection.IntLongMap! from) -> void
AndroidX.Collection.MutableIntLongMap.Put(int key, long value) -> void
AndroidX.Collection.MutableIntLongMap.Put(int key, long value, long default) -> long
AndroidX.Collection.MutableIntLongMap.PutAll(AndroidX.Collection.IntLongMap! from) -> void
AndroidX.Collection.MutableIntLongMap.Remove(int key) -> void
AndroidX.Collection.MutableIntLongMap.Remove(int key, long value) -> bool
AndroidX.Collection.MutableIntLongMap.RemoveIf(Kotlin.Jvm.Functions.IFunction2! predicate) -> void
AndroidX.Collection.MutableIntLongMap.Set(int key, long value) -> void
AndroidX.Collection.MutableIntLongMap.Trim() -> int
AndroidX.Collection.MutableIntObjectMap
AndroidX.Collection.MutableIntObjectMap.Clear() -> void
AndroidX.Collection.MutableIntObjectMap.GetOrPut(int key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> Java.Lang.Object?
AndroidX.Collection.MutableIntObjectMap.MinusAssign(AndroidX.Collection.IntList! keys) -> void
AndroidX.Collection.MutableIntObjectMap.MinusAssign(AndroidX.Collection.IntSet! keys) -> void
AndroidX.Collection.MutableIntObjectMap.MinusAssign(int key) -> void
AndroidX.Collection.MutableIntObjectMap.MinusAssign(int[]! keys) -> void
AndroidX.Collection.MutableIntObjectMap.MutableIntObjectMap() -> void
AndroidX.Collection.MutableIntObjectMap.MutableIntObjectMap(int initialCapacity) -> void
AndroidX.Collection.MutableIntObjectMap.PlusAssign(AndroidX.Collection.IntObjectMap! from) -> void
AndroidX.Collection.MutableIntObjectMap.Put(int key, Java.Lang.Object? value) -> Java.Lang.Object?
AndroidX.Collection.MutableIntObjectMap.PutAll(AndroidX.Collection.IntObjectMap! from) -> void
AndroidX.Collection.MutableIntObjectMap.Remove(int key) -> Java.Lang.Object?
AndroidX.Collection.MutableIntObjectMap.Remove(int key, Java.Lang.Object? value) -> bool
AndroidX.Collection.MutableIntObjectMap.RemoveIf(Kotlin.Jvm.Functions.IFunction2! predicate) -> void
AndroidX.Collection.MutableIntObjectMap.Set(int key, Java.Lang.Object? value) -> void
AndroidX.Collection.MutableIntObjectMap.Trim() -> int
AndroidX.Collection.MutableIntSet
AndroidX.Collection.MutableIntSet.Add(int element) -> bool
AndroidX.Collection.MutableIntSet.AddAll(AndroidX.Collection.IntSet! elements) -> bool
AndroidX.Collection.MutableIntSet.AddAll(int[]! elements) -> bool
AndroidX.Collection.MutableIntSet.Clear() -> void
AndroidX.Collection.MutableIntSet.MinusAssign(AndroidX.Collection.IntSet! elements) -> void
AndroidX.Collection.MutableIntSet.MinusAssign(int element) -> void
AndroidX.Collection.MutableIntSet.MinusAssign(int[]! elements) -> void
AndroidX.Collection.MutableIntSet.MutableIntSet() -> void
AndroidX.Collection.MutableIntSet.MutableIntSet(int initialCapacity) -> void
AndroidX.Collection.MutableIntSet.PlusAssign(AndroidX.Collection.IntSet! elements) -> void
AndroidX.Collection.MutableIntSet.PlusAssign(int element) -> void
AndroidX.Collection.MutableIntSet.PlusAssign(int[]! elements) -> void
AndroidX.Collection.MutableIntSet.Remove(int element) -> bool
AndroidX.Collection.MutableIntSet.RemoveAll(AndroidX.Collection.IntSet! elements) -> bool
AndroidX.Collection.MutableIntSet.RemoveAll(int[]! elements) -> bool
AndroidX.Collection.MutableIntSet.Trim() -> int
AndroidX.Collection.MutableLongFloatMap
AndroidX.Collection.MutableLongFloatMap.Clear() -> void
AndroidX.Collection.MutableLongFloatMap.GetOrPut(long key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> float
AndroidX.Collection.MutableLongFloatMap.MinusAssign(AndroidX.Collection.LongList! keys) -> void
AndroidX.Collection.MutableLongFloatMap.MinusAssign(AndroidX.Collection.LongSet! keys) -> void
AndroidX.Collection.MutableLongFloatMap.MinusAssign(long key) -> void
AndroidX.Collection.MutableLongFloatMap.MinusAssign(long[]! keys) -> void
AndroidX.Collection.MutableLongFloatMap.MutableLongFloatMap() -> void
AndroidX.Collection.MutableLongFloatMap.MutableLongFloatMap(int initialCapacity) -> void
AndroidX.Collection.MutableLongFloatMap.PlusAssign(AndroidX.Collection.LongFloatMap! from) -> void
AndroidX.Collection.MutableLongFloatMap.Put(long key, float value) -> void
AndroidX.Collection.MutableLongFloatMap.Put(long key, float value, float default) -> float
AndroidX.Collection.MutableLongFloatMap.PutAll(AndroidX.Collection.LongFloatMap! from) -> void
AndroidX.Collection.MutableLongFloatMap.Remove(long key) -> void
AndroidX.Collection.MutableLongFloatMap.Remove(long key, float value) -> bool
AndroidX.Collection.MutableLongFloatMap.RemoveIf(Kotlin.Jvm.Functions.IFunction2! predicate) -> void
AndroidX.Collection.MutableLongFloatMap.Set(long key, float value) -> void
AndroidX.Collection.MutableLongFloatMap.Trim() -> int
AndroidX.Collection.MutableLongIntMap
AndroidX.Collection.MutableLongIntMap.Clear() -> void
AndroidX.Collection.MutableLongIntMap.GetOrPut(long key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> int
AndroidX.Collection.MutableLongIntMap.MinusAssign(AndroidX.Collection.LongList! keys) -> void
AndroidX.Collection.MutableLongIntMap.MinusAssign(AndroidX.Collection.LongSet! keys) -> void
AndroidX.Collection.MutableLongIntMap.MinusAssign(long key) -> void
AndroidX.Collection.MutableLongIntMap.MinusAssign(long[]! keys) -> void
AndroidX.Collection.MutableLongIntMap.MutableLongIntMap() -> void
AndroidX.Collection.MutableLongIntMap.MutableLongIntMap(int initialCapacity) -> void
AndroidX.Collection.MutableLongIntMap.PlusAssign(AndroidX.Collection.LongIntMap! from) -> void
AndroidX.Collection.MutableLongIntMap.Put(long key, int value) -> void
AndroidX.Collection.MutableLongIntMap.Put(long key, int value, int default) -> int
AndroidX.Collection.MutableLongIntMap.PutAll(AndroidX.Collection.LongIntMap! from) -> void
AndroidX.Collection.MutableLongIntMap.Remove(long key) -> void
AndroidX.Collection.MutableLongIntMap.Remove(long key, int value) -> bool
AndroidX.Collection.MutableLongIntMap.RemoveIf(Kotlin.Jvm.Functions.IFunction2! predicate) -> void
AndroidX.Collection.MutableLongIntMap.Set(long key, int value) -> void
AndroidX.Collection.MutableLongIntMap.Trim() -> int
AndroidX.Collection.MutableLongList
AndroidX.Collection.MutableLongList.Add(int index, long element) -> void
AndroidX.Collection.MutableLongList.Add(long element) -> bool
AndroidX.Collection.MutableLongList.AddAll(AndroidX.Collection.LongList! elements) -> bool
AndroidX.Collection.MutableLongList.AddAll(int index, AndroidX.Collection.LongList! elements) -> bool
AndroidX.Collection.MutableLongList.AddAll(int index, long[]! elements) -> bool
AndroidX.Collection.MutableLongList.AddAll(long[]! elements) -> bool
AndroidX.Collection.MutableLongList.Capacity.get -> int
AndroidX.Collection.MutableLongList.Clear() -> void
AndroidX.Collection.MutableLongList.EnsureCapacity(int capacity) -> void
AndroidX.Collection.MutableLongList.MinusAssign(AndroidX.Collection.LongList! elements) -> void
AndroidX.Collection.MutableLongList.MinusAssign(long element) -> void
AndroidX.Collection.MutableLongList.MinusAssign(long[]! elements) -> void
AndroidX.Collection.MutableLongList.MutableLongList() -> void
AndroidX.Collection.MutableLongList.MutableLongList(int initialCapacity) -> void
AndroidX.Collection.MutableLongList.PlusAssign(AndroidX.Collection.LongList! elements) -> void
AndroidX.Collection.MutableLongList.PlusAssign(long element) -> void
AndroidX.Collection.MutableLongList.PlusAssign(long[]! elements) -> void
AndroidX.Collection.MutableLongList.Remove(long element) -> bool
AndroidX.Collection.MutableLongList.RemoveAll(AndroidX.Collection.LongList! elements) -> bool
AndroidX.Collection.MutableLongList.RemoveAll(long[]! elements) -> bool
AndroidX.Collection.MutableLongList.RemoveAt(int index) -> long
AndroidX.Collection.MutableLongList.RemoveRange(int start, int end) -> void
AndroidX.Collection.MutableLongList.RetainAll(AndroidX.Collection.LongList! elements) -> bool
AndroidX.Collection.MutableLongList.RetainAll(long[]! elements) -> bool
AndroidX.Collection.MutableLongList.Set(int index, long element) -> long
AndroidX.Collection.MutableLongList.Sort() -> void
AndroidX.Collection.MutableLongList.SortDescending() -> void
AndroidX.Collection.MutableLongList.Trim(int minCapacity) -> void
AndroidX.Collection.MutableLongLongMap
AndroidX.Collection.MutableLongLongMap.Clear() -> void
AndroidX.Collection.MutableLongLongMap.GetOrPut(long key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> long
AndroidX.Collection.MutableLongLongMap.MinusAssign(AndroidX.Collection.LongList! keys) -> void
AndroidX.Collection.MutableLongLongMap.MinusAssign(AndroidX.Collection.LongSet! keys) -> void
AndroidX.Collection.MutableLongLongMap.MinusAssign(long key) -> void
AndroidX.Collection.MutableLongLongMap.MinusAssign(long[]! keys) -> void
AndroidX.Collection.MutableLongLongMap.MutableLongLongMap() -> void
AndroidX.Collection.MutableLongLongMap.MutableLongLongMap(int initialCapacity) -> void
AndroidX.Collection.MutableLongLongMap.PlusAssign(AndroidX.Collection.LongLongMap! from) -> void
AndroidX.Collection.MutableLongLongMap.Put(long key, long value) -> void
AndroidX.Collection.MutableLongLongMap.Put(long key, long value, long default) -> long
AndroidX.Collection.MutableLongLongMap.PutAll(AndroidX.Collection.LongLongMap! from) -> void
AndroidX.Collection.MutableLongLongMap.Remove(long key) -> void
AndroidX.Collection.MutableLongLongMap.Remove(long key, long value) -> bool
AndroidX.Collection.MutableLongLongMap.RemoveIf(Kotlin.Jvm.Functions.IFunction2! predicate) -> void
AndroidX.Collection.MutableLongLongMap.Set(long key, long value) -> void
AndroidX.Collection.MutableLongLongMap.Trim() -> int
AndroidX.Collection.MutableLongObjectMap
AndroidX.Collection.MutableLongObjectMap.Clear() -> void
AndroidX.Collection.MutableLongObjectMap.GetOrPut(long key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> Java.Lang.Object?
AndroidX.Collection.MutableLongObjectMap.MinusAssign(AndroidX.Collection.LongList! keys) -> void
AndroidX.Collection.MutableLongObjectMap.MinusAssign(AndroidX.Collection.LongSet! keys) -> void
AndroidX.Collection.MutableLongObjectMap.MinusAssign(long key) -> void
AndroidX.Collection.MutableLongObjectMap.MinusAssign(long[]! keys) -> void
AndroidX.Collection.MutableLongObjectMap.MutableLongObjectMap() -> void
AndroidX.Collection.MutableLongObjectMap.MutableLongObjectMap(int initialCapacity) -> void
AndroidX.Collection.MutableLongObjectMap.PlusAssign(AndroidX.Collection.LongObjectMap! from) -> void
AndroidX.Collection.MutableLongObjectMap.Put(long key, Java.Lang.Object? value) -> Java.Lang.Object?
AndroidX.Collection.MutableLongObjectMap.PutAll(AndroidX.Collection.LongObjectMap! from) -> void
AndroidX.Collection.MutableLongObjectMap.Remove(long key) -> Java.Lang.Object?
AndroidX.Collection.MutableLongObjectMap.Remove(long key, Java.Lang.Object? value) -> bool
AndroidX.Collection.MutableLongObjectMap.RemoveIf(Kotlin.Jvm.Functions.IFunction2! predicate) -> void
AndroidX.Collection.MutableLongObjectMap.Set(long key, Java.Lang.Object? value) -> void
AndroidX.Collection.MutableLongObjectMap.Trim() -> int
AndroidX.Collection.MutableLongSet
AndroidX.Collection.MutableLongSet.Add(long element) -> bool
AndroidX.Collection.MutableLongSet.AddAll(AndroidX.Collection.LongSet! elements) -> bool
AndroidX.Collection.MutableLongSet.AddAll(long[]! elements) -> bool
AndroidX.Collection.MutableLongSet.Clear() -> void
AndroidX.Collection.MutableLongSet.MinusAssign(AndroidX.Collection.LongSet! elements) -> void
AndroidX.Collection.MutableLongSet.MinusAssign(long element) -> void
AndroidX.Collection.MutableLongSet.MinusAssign(long[]! elements) -> void
AndroidX.Collection.MutableLongSet.MutableLongSet() -> void
AndroidX.Collection.MutableLongSet.MutableLongSet(int initialCapacity) -> void
AndroidX.Collection.MutableLongSet.PlusAssign(AndroidX.Collection.LongSet! elements) -> void
AndroidX.Collection.MutableLongSet.PlusAssign(long element) -> void
AndroidX.Collection.MutableLongSet.PlusAssign(long[]! elements) -> void
AndroidX.Collection.MutableLongSet.Remove(long element) -> bool
AndroidX.Collection.MutableLongSet.RemoveAll(AndroidX.Collection.LongSet! elements) -> bool
AndroidX.Collection.MutableLongSet.RemoveAll(long[]! elements) -> bool
AndroidX.Collection.MutableLongSet.Trim() -> int
AndroidX.Collection.MutableObjectFloatMap
AndroidX.Collection.MutableObjectFloatMap.Clear() -> void
AndroidX.Collection.MutableObjectFloatMap.GetOrPut(Java.Lang.Object? key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> float
AndroidX.Collection.MutableObjectFloatMap.MinusAssign(AndroidX.Collection.ScatterSet! keys) -> void
AndroidX.Collection.MutableObjectFloatMap.MinusAssign(Java.Lang.IIterable! keys) -> void
AndroidX.Collection.MutableObjectFloatMap.MinusAssign(Java.Lang.Object![]! keys) -> void
AndroidX.Collection.MutableObjectFloatMap.MinusAssign(Java.Lang.Object? key) -> void
AndroidX.Collection.MutableObjectFloatMap.MinusAssign(Kotlin.Sequences.ISequence! keys) -> void
AndroidX.Collection.MutableObjectFloatMap.MutableObjectFloatMap() -> void
AndroidX.Collection.MutableObjectFloatMap.MutableObjectFloatMap(int initialCapacity) -> void
AndroidX.Collection.MutableObjectFloatMap.PlusAssign(AndroidX.Collection.ObjectFloatMap! from) -> void
AndroidX.Collection.MutableObjectFloatMap.Put(Java.Lang.Object? key, float value) -> void
AndroidX.Collection.MutableObjectFloatMap.Put(Java.Lang.Object? key, float value, float default) -> float
AndroidX.Collection.MutableObjectFloatMap.PutAll(AndroidX.Collection.ObjectFloatMap! from) -> void
AndroidX.Collection.MutableObjectFloatMap.Remove(Java.Lang.Object? key) -> void
AndroidX.Collection.MutableObjectFloatMap.Remove(Java.Lang.Object? key, float value) -> bool
AndroidX.Collection.MutableObjectFloatMap.RemoveIf(Kotlin.Jvm.Functions.IFunction2! predicate) -> void
AndroidX.Collection.MutableObjectFloatMap.Set(Java.Lang.Object? key, float value) -> void
AndroidX.Collection.MutableObjectFloatMap.Trim() -> int
AndroidX.Collection.MutableObjectIntMap
AndroidX.Collection.MutableObjectIntMap.Clear() -> void
AndroidX.Collection.MutableObjectIntMap.GetOrPut(Java.Lang.Object? key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> int
AndroidX.Collection.MutableObjectIntMap.MinusAssign(AndroidX.Collection.ScatterSet! keys) -> void
AndroidX.Collection.MutableObjectIntMap.MinusAssign(Java.Lang.IIterable! keys) -> void
AndroidX.Collection.MutableObjectIntMap.MinusAssign(Java.Lang.Object![]! keys) -> void
AndroidX.Collection.MutableObjectIntMap.MinusAssign(Java.Lang.Object? key) -> void
AndroidX.Collection.MutableObjectIntMap.MinusAssign(Kotlin.Sequences.ISequence! keys) -> void
AndroidX.Collection.MutableObjectIntMap.MutableObjectIntMap() -> void
AndroidX.Collection.MutableObjectIntMap.MutableObjectIntMap(int initialCapacity) -> void
AndroidX.Collection.MutableObjectIntMap.PlusAssign(AndroidX.Collection.ObjectIntMap! from) -> void
AndroidX.Collection.MutableObjectIntMap.Put(Java.Lang.Object? key, int value) -> void
AndroidX.Collection.MutableObjectIntMap.Put(Java.Lang.Object? key, int value, int default) -> int
AndroidX.Collection.MutableObjectIntMap.PutAll(AndroidX.Collection.ObjectIntMap! from) -> void
AndroidX.Collection.MutableObjectIntMap.Remove(Java.Lang.Object? key) -> void
AndroidX.Collection.MutableObjectIntMap.Remove(Java.Lang.Object? key, int value) -> bool
AndroidX.Collection.MutableObjectIntMap.RemoveIf(Kotlin.Jvm.Functions.IFunction2! predicate) -> void
AndroidX.Collection.MutableObjectIntMap.Set(Java.Lang.Object? key, int value) -> void
AndroidX.Collection.MutableObjectIntMap.Trim() -> int
AndroidX.Collection.MutableObjectList
AndroidX.Collection.MutableObjectList.Add(Java.Lang.Object? element) -> bool
AndroidX.Collection.MutableObjectList.Add(int index, Java.Lang.Object? element) -> void
AndroidX.Collection.MutableObjectList.AddAll(AndroidX.Collection.ObjectList! elements) -> bool
AndroidX.Collection.MutableObjectList.AddAll(AndroidX.Collection.ScatterSet! elements) -> bool
AndroidX.Collection.MutableObjectList.AddAll(Java.Lang.IIterable! elements) -> bool
AndroidX.Collection.MutableObjectList.AddAll(Java.Lang.Object![]! elements) -> bool
AndroidX.Collection.MutableObjectList.AddAll(Kotlin.Sequences.ISequence! elements) -> bool
AndroidX.Collection.MutableObjectList.AddAll(System.Collections.IList! elements) -> bool
AndroidX.Collection.MutableObjectList.AddAll(int index, AndroidX.Collection.ObjectList! elements) -> bool
AndroidX.Collection.MutableObjectList.AddAll(int index, Java.Lang.Object![]! elements) -> bool
AndroidX.Collection.MutableObjectList.AddAll(int index, System.Collections.ICollection! elements) -> bool
AndroidX.Collection.MutableObjectList.AsMutableList() -> System.Collections.IList!
AndroidX.Collection.MutableObjectList.Capacity.get -> int
AndroidX.Collection.MutableObjectList.Clear() -> void
AndroidX.Collection.MutableObjectList.EnsureCapacity(int capacity) -> void
AndroidX.Collection.MutableObjectList.MinusAssign(AndroidX.Collection.ObjectList! elements) -> void
AndroidX.Collection.MutableObjectList.MinusAssign(AndroidX.Collection.ScatterSet! elements) -> void
AndroidX.Collection.MutableObjectList.MinusAssign(Java.Lang.IIterable! elements) -> void
AndroidX.Collection.MutableObjectList.MinusAssign(Java.Lang.Object![]! elements) -> void
AndroidX.Collection.MutableObjectList.MinusAssign(Java.Lang.Object? element) -> void
AndroidX.Collection.MutableObjectList.MinusAssign(Kotlin.Sequences.ISequence! elements) -> void
AndroidX.Collection.MutableObjectList.MinusAssign(System.Collections.IList! elements) -> void
AndroidX.Collection.MutableObjectList.MutableObjectList() -> void
AndroidX.Collection.MutableObjectList.MutableObjectList(int initialCapacity) -> void
AndroidX.Collection.MutableObjectList.PlusAssign(AndroidX.Collection.ObjectList! elements) -> void
AndroidX.Collection.MutableObjectList.PlusAssign(AndroidX.Collection.ScatterSet! elements) -> void
AndroidX.Collection.MutableObjectList.PlusAssign(Java.Lang.IIterable! elements) -> void
AndroidX.Collection.MutableObjectList.PlusAssign(Java.Lang.Object![]! elements) -> void
AndroidX.Collection.MutableObjectList.PlusAssign(Java.Lang.Object? element) -> void
AndroidX.Collection.MutableObjectList.PlusAssign(Kotlin.Sequences.ISequence! elements) -> void
AndroidX.Collection.MutableObjectList.PlusAssign(System.Collections.IList! elements) -> void
AndroidX.Collection.MutableObjectList.Remove(Java.Lang.Object? element) -> bool
AndroidX.Collection.MutableObjectList.RemoveAll(AndroidX.Collection.ObjectList! elements) -> bool
AndroidX.Collection.MutableObjectList.RemoveAll(AndroidX.Collection.ScatterSet! elements) -> bool
AndroidX.Collection.MutableObjectList.RemoveAll(Java.Lang.IIterable! elements) -> bool
AndroidX.Collection.MutableObjectList.RemoveAll(Java.Lang.Object![]! elements) -> bool
AndroidX.Collection.MutableObjectList.RemoveAll(Kotlin.Sequences.ISequence! elements) -> bool
AndroidX.Collection.MutableObjectList.RemoveAll(System.Collections.IList! elements) -> bool
AndroidX.Collection.MutableObjectList.RemoveAt(int index) -> Java.Lang.Object?
AndroidX.Collection.MutableObjectList.RemoveIf(Kotlin.Jvm.Functions.IFunction1! predicate) -> void
AndroidX.Collection.MutableObjectList.RemoveRange(int start, int end) -> void
AndroidX.Collection.MutableObjectList.RetainAll(AndroidX.Collection.ObjectList! elements) -> bool
AndroidX.Collection.MutableObjectList.RetainAll(Java.Lang.IIterable! elements) -> bool
AndroidX.Collection.MutableObjectList.RetainAll(Java.Lang.Object![]! elements) -> bool
AndroidX.Collection.MutableObjectList.RetainAll(Kotlin.Sequences.ISequence! elements) -> bool
AndroidX.Collection.MutableObjectList.RetainAll(System.Collections.ICollection! elements) -> bool
AndroidX.Collection.MutableObjectList.Set(int index, Java.Lang.Object? element) -> Java.Lang.Object?
AndroidX.Collection.MutableObjectList.Trim(int minCapacity) -> void
AndroidX.Collection.MutableObjectLongMap
AndroidX.Collection.MutableObjectLongMap.Clear() -> void
AndroidX.Collection.MutableObjectLongMap.GetOrPut(Java.Lang.Object? key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> long
AndroidX.Collection.MutableObjectLongMap.MinusAssign(AndroidX.Collection.ScatterSet! keys) -> void
AndroidX.Collection.MutableObjectLongMap.MinusAssign(Java.Lang.IIterable! keys) -> void
AndroidX.Collection.MutableObjectLongMap.MinusAssign(Java.Lang.Object![]! keys) -> void
AndroidX.Collection.MutableObjectLongMap.MinusAssign(Java.Lang.Object? key) -> void
AndroidX.Collection.MutableObjectLongMap.MinusAssign(Kotlin.Sequences.ISequence! keys) -> void
AndroidX.Collection.MutableObjectLongMap.MutableObjectLongMap() -> void
AndroidX.Collection.MutableObjectLongMap.MutableObjectLongMap(int initialCapacity) -> void
AndroidX.Collection.MutableObjectLongMap.PlusAssign(AndroidX.Collection.ObjectLongMap! from) -> void
AndroidX.Collection.MutableObjectLongMap.Put(Java.Lang.Object? key, long value) -> void
AndroidX.Collection.MutableObjectLongMap.Put(Java.Lang.Object? key, long value, long default) -> long
AndroidX.Collection.MutableObjectLongMap.PutAll(AndroidX.Collection.ObjectLongMap! from) -> void
AndroidX.Collection.MutableObjectLongMap.Remove(Java.Lang.Object? key) -> void
AndroidX.Collection.MutableObjectLongMap.Remove(Java.Lang.Object? key, long value) -> bool
AndroidX.Collection.MutableObjectLongMap.RemoveIf(Kotlin.Jvm.Functions.IFunction2! predicate) -> void
AndroidX.Collection.MutableObjectLongMap.Set(Java.Lang.Object? key, long value) -> void
AndroidX.Collection.MutableObjectLongMap.Trim() -> int
AndroidX.Collection.MutableOrderedScatterSet
AndroidX.Collection.MutableOrderedScatterSet.Add(Java.Lang.Object? element) -> bool
AndroidX.Collection.MutableOrderedScatterSet.AddAll(AndroidX.Collection.ObjectList! elements) -> bool
AndroidX.Collection.MutableOrderedScatterSet.AddAll(AndroidX.Collection.OrderedScatterSet! elements) -> bool
AndroidX.Collection.MutableOrderedScatterSet.AddAll(AndroidX.Collection.ScatterSet! elements) -> bool
AndroidX.Collection.MutableOrderedScatterSet.AddAll(Java.Lang.IIterable! elements) -> bool
AndroidX.Collection.MutableOrderedScatterSet.AddAll(Java.Lang.Object![]! elements) -> bool
AndroidX.Collection.MutableOrderedScatterSet.AddAll(Kotlin.Sequences.ISequence! elements) -> bool
AndroidX.Collection.MutableOrderedScatterSet.AsMutableSet() -> System.Collections.ICollection!
AndroidX.Collection.MutableOrderedScatterSet.Clear() -> void
AndroidX.Collection.MutableOrderedScatterSet.MinusAssign(AndroidX.Collection.ObjectList! elements) -> void
AndroidX.Collection.MutableOrderedScatterSet.MinusAssign(AndroidX.Collection.OrderedScatterSet! elements) -> void
AndroidX.Collection.MutableOrderedScatterSet.MinusAssign(AndroidX.Collection.ScatterSet! elements) -> void
AndroidX.Collection.MutableOrderedScatterSet.MinusAssign(Java.Lang.IIterable! elements) -> void
AndroidX.Collection.MutableOrderedScatterSet.MinusAssign(Java.Lang.Object![]! elements) -> void
AndroidX.Collection.MutableOrderedScatterSet.MinusAssign(Java.Lang.Object? element) -> void
AndroidX.Collection.MutableOrderedScatterSet.MinusAssign(Kotlin.Sequences.ISequence! elements) -> void
AndroidX.Collection.MutableOrderedScatterSet.MutableOrderedScatterSet() -> void
AndroidX.Collection.MutableOrderedScatterSet.MutableOrderedScatterSet(int initialCapacity) -> void
AndroidX.Collection.MutableOrderedScatterSet.PlusAssign(AndroidX.Collection.ObjectList! elements) -> void
AndroidX.Collection.MutableOrderedScatterSet.PlusAssign(AndroidX.Collection.OrderedScatterSet! elements) -> void
AndroidX.Collection.MutableOrderedScatterSet.PlusAssign(AndroidX.Collection.ScatterSet! elements) -> void
AndroidX.Collection.MutableOrderedScatterSet.PlusAssign(Java.Lang.IIterable! elements) -> void
AndroidX.Collection.MutableOrderedScatterSet.PlusAssign(Java.Lang.Object![]! elements) -> void
AndroidX.Collection.MutableOrderedScatterSet.PlusAssign(Java.Lang.Object? element) -> void
AndroidX.Collection.MutableOrderedScatterSet.PlusAssign(Kotlin.Sequences.ISequence! elements) -> void
AndroidX.Collection.MutableOrderedScatterSet.Remove(Java.Lang.Object? element) -> bool
AndroidX.Collection.MutableOrderedScatterSet.RemoveAll(AndroidX.Collection.ObjectList! elements) -> bool
AndroidX.Collection.MutableOrderedScatterSet.RemoveAll(AndroidX.Collection.OrderedScatterSet! elements) -> bool
AndroidX.Collection.MutableOrderedScatterSet.RemoveAll(AndroidX.Collection.ScatterSet! elements) -> bool
AndroidX.Collection.MutableOrderedScatterSet.RemoveAll(Java.Lang.IIterable! elements) -> bool
AndroidX.Collection.MutableOrderedScatterSet.RemoveAll(Java.Lang.Object![]! elements) -> bool
AndroidX.Collection.MutableOrderedScatterSet.RemoveAll(Kotlin.Sequences.ISequence! elements) -> bool
AndroidX.Collection.MutableOrderedScatterSet.RemoveIf(Kotlin.Jvm.Functions.IFunction1! predicate) -> void
AndroidX.Collection.MutableOrderedScatterSet.RetainAll(AndroidX.Collection.OrderedScatterSet! elements) -> bool
AndroidX.Collection.MutableOrderedScatterSet.RetainAll(AndroidX.Collection.ScatterSet! elements) -> bool
AndroidX.Collection.MutableOrderedScatterSet.RetainAll(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.MutableOrderedScatterSet.RetainAll(System.Collections.ICollection! elements) -> bool
AndroidX.Collection.MutableOrderedScatterSet.Trim() -> int
AndroidX.Collection.MutableOrderedScatterSet.TrimToSize(int maxSize) -> void
AndroidX.Collection.MutableScatterMap
AndroidX.Collection.MutableScatterMap.AsMutableMap() -> System.Collections.IDictionary!
AndroidX.Collection.MutableScatterMap.Clear() -> void
AndroidX.Collection.MutableScatterMap.Compute(Java.Lang.Object? key, Kotlin.Jvm.Functions.IFunction2! computeBlock) -> Java.Lang.Object?
AndroidX.Collection.MutableScatterMap.GetOrPut(Java.Lang.Object? key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> Java.Lang.Object?
AndroidX.Collection.MutableScatterMap.MinusAssign(AndroidX.Collection.ObjectList! keys) -> void
AndroidX.Collection.MutableScatterMap.MinusAssign(AndroidX.Collection.ScatterSet! keys) -> void
AndroidX.Collection.MutableScatterMap.MinusAssign(Java.Lang.IIterable! keys) -> void
AndroidX.Collection.MutableScatterMap.MinusAssign(Java.Lang.Object![]! keys) -> void
AndroidX.Collection.MutableScatterMap.MinusAssign(Java.Lang.Object? key) -> void
AndroidX.Collection.MutableScatterMap.MinusAssign(Kotlin.Sequences.ISequence! keys) -> void
AndroidX.Collection.MutableScatterMap.MutableScatterMap() -> void
AndroidX.Collection.MutableScatterMap.MutableScatterMap(int initialCapacity) -> void
AndroidX.Collection.MutableScatterMap.PlusAssign(AndroidX.Collection.ScatterMap! from) -> void
AndroidX.Collection.MutableScatterMap.PlusAssign(Java.Lang.IIterable! pairs) -> void
AndroidX.Collection.MutableScatterMap.PlusAssign(Kotlin.Pair! pair) -> void
AndroidX.Collection.MutableScatterMap.PlusAssign(Kotlin.Pair![]! pairs) -> void
AndroidX.Collection.MutableScatterMap.PlusAssign(Kotlin.Sequences.ISequence! pairs) -> void
AndroidX.Collection.MutableScatterMap.PlusAssign(System.Collections.IDictionary! from) -> void
AndroidX.Collection.MutableScatterMap.Put(Java.Lang.Object? key, Java.Lang.Object? value) -> Java.Lang.Object?
AndroidX.Collection.MutableScatterMap.PutAll(AndroidX.Collection.ScatterMap! from) -> void
AndroidX.Collection.MutableScatterMap.PutAll(Java.Lang.IIterable! pairs) -> void
AndroidX.Collection.MutableScatterMap.PutAll(Kotlin.Pair![]! pairs) -> void
AndroidX.Collection.MutableScatterMap.PutAll(Kotlin.Sequences.ISequence! pairs) -> void
AndroidX.Collection.MutableScatterMap.PutAll(System.Collections.IDictionary! from) -> void
AndroidX.Collection.MutableScatterMap.Remove(Java.Lang.Object? key) -> Java.Lang.Object?
AndroidX.Collection.MutableScatterMap.Remove(Java.Lang.Object? key, Java.Lang.Object? value) -> bool
AndroidX.Collection.MutableScatterMap.RemoveIf(Kotlin.Jvm.Functions.IFunction2! predicate) -> void
AndroidX.Collection.MutableScatterMap.Set(Java.Lang.Object? key, Java.Lang.Object? value) -> void
AndroidX.Collection.MutableScatterMap.Trim() -> int
AndroidX.Collection.MutableScatterSet
AndroidX.Collection.MutableScatterSet.Add(Java.Lang.Object? element) -> bool
AndroidX.Collection.MutableScatterSet.AddAll(AndroidX.Collection.ObjectList! elements) -> bool
AndroidX.Collection.MutableScatterSet.AddAll(AndroidX.Collection.OrderedScatterSet! elements) -> bool
AndroidX.Collection.MutableScatterSet.AddAll(AndroidX.Collection.ScatterSet! elements) -> bool
AndroidX.Collection.MutableScatterSet.AddAll(Java.Lang.IIterable! elements) -> bool
AndroidX.Collection.MutableScatterSet.AddAll(Java.Lang.Object![]! elements) -> bool
AndroidX.Collection.MutableScatterSet.AddAll(Kotlin.Sequences.ISequence! elements) -> bool
AndroidX.Collection.MutableScatterSet.AsMutableSet() -> System.Collections.ICollection!
AndroidX.Collection.MutableScatterSet.Clear() -> void
AndroidX.Collection.MutableScatterSet.MinusAssign(AndroidX.Collection.ObjectList! elements) -> void
AndroidX.Collection.MutableScatterSet.MinusAssign(AndroidX.Collection.OrderedScatterSet! elements) -> void
AndroidX.Collection.MutableScatterSet.MinusAssign(AndroidX.Collection.ScatterSet! elements) -> void
AndroidX.Collection.MutableScatterSet.MinusAssign(Java.Lang.IIterable! elements) -> void
AndroidX.Collection.MutableScatterSet.MinusAssign(Java.Lang.Object![]! elements) -> void
AndroidX.Collection.MutableScatterSet.MinusAssign(Java.Lang.Object? element) -> void
AndroidX.Collection.MutableScatterSet.MinusAssign(Kotlin.Sequences.ISequence! elements) -> void
AndroidX.Collection.MutableScatterSet.MutableScatterSet() -> void
AndroidX.Collection.MutableScatterSet.MutableScatterSet(int initialCapacity) -> void
AndroidX.Collection.MutableScatterSet.PlusAssign(AndroidX.Collection.ObjectList! elements) -> void
AndroidX.Collection.MutableScatterSet.PlusAssign(AndroidX.Collection.OrderedScatterSet! elements) -> void
AndroidX.Collection.MutableScatterSet.PlusAssign(AndroidX.Collection.ScatterSet! elements) -> void
AndroidX.Collection.MutableScatterSet.PlusAssign(Java.Lang.IIterable! elements) -> void
AndroidX.Collection.MutableScatterSet.PlusAssign(Java.Lang.Object![]! elements) -> void
AndroidX.Collection.MutableScatterSet.PlusAssign(Java.Lang.Object? element) -> void
AndroidX.Collection.MutableScatterSet.PlusAssign(Kotlin.Sequences.ISequence! elements) -> void
AndroidX.Collection.MutableScatterSet.Remove(Java.Lang.Object? element) -> bool
AndroidX.Collection.MutableScatterSet.RemoveAll(AndroidX.Collection.ObjectList! elements) -> bool
AndroidX.Collection.MutableScatterSet.RemoveAll(AndroidX.Collection.OrderedScatterSet! elements) -> bool
AndroidX.Collection.MutableScatterSet.RemoveAll(AndroidX.Collection.ScatterSet! elements) -> bool
AndroidX.Collection.MutableScatterSet.RemoveAll(Java.Lang.IIterable! elements) -> bool
AndroidX.Collection.MutableScatterSet.RemoveAll(Java.Lang.Object![]! elements) -> bool
AndroidX.Collection.MutableScatterSet.RemoveAll(Kotlin.Sequences.ISequence! elements) -> bool
AndroidX.Collection.MutableScatterSet.RemoveIf(Kotlin.Jvm.Functions.IFunction1! predicate) -> void
AndroidX.Collection.MutableScatterSet.RetainAll(AndroidX.Collection.OrderedScatterSet! elements) -> bool
AndroidX.Collection.MutableScatterSet.RetainAll(AndroidX.Collection.ScatterSet! elements) -> bool
AndroidX.Collection.MutableScatterSet.RetainAll(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.MutableScatterSet.RetainAll(System.Collections.ICollection! elements) -> bool
AndroidX.Collection.MutableScatterSet.Trim() -> int
AndroidX.Collection.ObjectFloatMap
AndroidX.Collection.ObjectFloatMap.All(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.ObjectFloatMap.Any() -> bool
AndroidX.Collection.ObjectFloatMap.Any(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.ObjectFloatMap.Capacity.get -> int
AndroidX.Collection.ObjectFloatMap.Contains(Java.Lang.Object? key) -> bool
AndroidX.Collection.ObjectFloatMap.ContainsKey(Java.Lang.Object? key) -> bool
AndroidX.Collection.ObjectFloatMap.ContainsValue(float value) -> bool
AndroidX.Collection.ObjectFloatMap.Count() -> int
AndroidX.Collection.ObjectFloatMap.Count(Kotlin.Jvm.Functions.IFunction2! predicate) -> int
AndroidX.Collection.ObjectFloatMap.ForEach(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.ObjectFloatMap.ForEachKey(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.ObjectFloatMap.ForEachValue(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.ObjectFloatMap.Get(Java.Lang.Object? key) -> float
AndroidX.Collection.ObjectFloatMap.GetOrDefault(Java.Lang.Object? key, float defaultValue) -> float
AndroidX.Collection.ObjectFloatMap.GetOrElse(Java.Lang.Object? key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> float
AndroidX.Collection.ObjectFloatMap.IsEmpty.get -> bool
AndroidX.Collection.ObjectFloatMap.IsNotEmpty.get -> bool
AndroidX.Collection.ObjectFloatMap.JoinToString() -> string!
AndroidX.Collection.ObjectFloatMap.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.ObjectFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.ObjectFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.ObjectFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.ObjectFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.ObjectFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectFloatMap.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectFloatMap.JoinToString(Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectFloatMap.JoinToString(string! separator) -> string!
AndroidX.Collection.ObjectFloatMap.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectFloatMap.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.ObjectFloatMap.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectFloatMap.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.ObjectFloatMap.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectFloatMap.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.ObjectFloatMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectFloatMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.ObjectFloatMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectFloatMap.None() -> bool
AndroidX.Collection.ObjectFloatMap.ObjectFloatMap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.ObjectFloatMap.Size.get -> int
AndroidX.Collection.ObjectFloatMapKt
AndroidX.Collection.ObjectIntMap
AndroidX.Collection.ObjectIntMap.All(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.ObjectIntMap.Any() -> bool
AndroidX.Collection.ObjectIntMap.Any(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.ObjectIntMap.Capacity.get -> int
AndroidX.Collection.ObjectIntMap.Contains(Java.Lang.Object? key) -> bool
AndroidX.Collection.ObjectIntMap.ContainsKey(Java.Lang.Object? key) -> bool
AndroidX.Collection.ObjectIntMap.ContainsValue(int value) -> bool
AndroidX.Collection.ObjectIntMap.Count() -> int
AndroidX.Collection.ObjectIntMap.Count(Kotlin.Jvm.Functions.IFunction2! predicate) -> int
AndroidX.Collection.ObjectIntMap.ForEach(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.ObjectIntMap.ForEachKey(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.ObjectIntMap.ForEachValue(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.ObjectIntMap.Get(Java.Lang.Object? key) -> int
AndroidX.Collection.ObjectIntMap.GetOrDefault(Java.Lang.Object? key, int defaultValue) -> int
AndroidX.Collection.ObjectIntMap.GetOrElse(Java.Lang.Object? key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> int
AndroidX.Collection.ObjectIntMap.IsEmpty.get -> bool
AndroidX.Collection.ObjectIntMap.IsNotEmpty.get -> bool
AndroidX.Collection.ObjectIntMap.JoinToString() -> string!
AndroidX.Collection.ObjectIntMap.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.ObjectIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.ObjectIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.ObjectIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.ObjectIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.ObjectIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectIntMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectIntMap.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectIntMap.JoinToString(Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectIntMap.JoinToString(string! separator) -> string!
AndroidX.Collection.ObjectIntMap.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectIntMap.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.ObjectIntMap.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectIntMap.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.ObjectIntMap.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectIntMap.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.ObjectIntMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectIntMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.ObjectIntMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectIntMap.None() -> bool
AndroidX.Collection.ObjectIntMap.ObjectIntMap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.ObjectIntMap.Size.get -> int
AndroidX.Collection.ObjectIntMapKt
AndroidX.Collection.ObjectList
AndroidX.Collection.ObjectList.Any() -> bool
AndroidX.Collection.ObjectList.Any(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.ObjectList.Contains(Java.Lang.Object? element) -> bool
AndroidX.Collection.ObjectList.ContainsAll(AndroidX.Collection.ObjectList! elements) -> bool
AndroidX.Collection.ObjectList.ContainsAll(Java.Lang.IIterable! elements) -> bool
AndroidX.Collection.ObjectList.ContainsAll(Java.Lang.Object![]! elements) -> bool
AndroidX.Collection.ObjectList.ContainsAll(System.Collections.IList! elements) -> bool
AndroidX.Collection.ObjectList.Count() -> int
AndroidX.Collection.ObjectList.Count(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.ObjectList.ElementAt(int index) -> Java.Lang.Object?
AndroidX.Collection.ObjectList.ElementAtOrElse(int index, Kotlin.Jvm.Functions.IFunction1! defaultValue) -> Java.Lang.Object?
AndroidX.Collection.ObjectList.First() -> Java.Lang.Object?
AndroidX.Collection.ObjectList.First(Kotlin.Jvm.Functions.IFunction1! predicate) -> Java.Lang.Object?
AndroidX.Collection.ObjectList.FirstOrNull() -> Java.Lang.Object?
AndroidX.Collection.ObjectList.FirstOrNull(Kotlin.Jvm.Functions.IFunction1! predicate) -> Java.Lang.Object?
AndroidX.Collection.ObjectList.Fold(Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction2! operation) -> Java.Lang.Object?
AndroidX.Collection.ObjectList.FoldIndexed(Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction3! operation) -> Java.Lang.Object?
AndroidX.Collection.ObjectList.FoldRight(Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction2! operation) -> Java.Lang.Object?
AndroidX.Collection.ObjectList.FoldRightIndexed(Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction3! operation) -> Java.Lang.Object?
AndroidX.Collection.ObjectList.ForEach(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.ObjectList.ForEachIndexed(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.ObjectList.ForEachReversed(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.ObjectList.ForEachReversedIndexed(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.ObjectList.Get(int index) -> Java.Lang.Object?
AndroidX.Collection.ObjectList.IndexOf(Java.Lang.Object? element) -> int
AndroidX.Collection.ObjectList.IndexOfFirst(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.ObjectList.IndexOfLast(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.ObjectList.Indices.get -> Kotlin.Ranges.IntRange!
AndroidX.Collection.ObjectList.IsEmpty.get -> bool
AndroidX.Collection.ObjectList.IsNotEmpty.get -> bool
AndroidX.Collection.ObjectList.JoinToString() -> string!
AndroidX.Collection.ObjectList.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.ObjectList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.ObjectList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.ObjectList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.ObjectList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.ObjectList.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction1? transform) -> string!
AndroidX.Collection.ObjectList.JoinToString(string! separator) -> string!
AndroidX.Collection.ObjectList.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.ObjectList.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.ObjectList.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.ObjectList.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.ObjectList.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction1? transform) -> string!
AndroidX.Collection.ObjectList.Last() -> Java.Lang.Object?
AndroidX.Collection.ObjectList.Last(Kotlin.Jvm.Functions.IFunction1! predicate) -> Java.Lang.Object?
AndroidX.Collection.ObjectList.LastIndex.get -> int
AndroidX.Collection.ObjectList.LastIndexOf(Java.Lang.Object? element) -> int
AndroidX.Collection.ObjectList.LastOrNull() -> Java.Lang.Object?
AndroidX.Collection.ObjectList.LastOrNull(Kotlin.Jvm.Functions.IFunction1! predicate) -> Java.Lang.Object?
AndroidX.Collection.ObjectList.None() -> bool
AndroidX.Collection.ObjectList.ObjectList(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.ObjectList.ReversedAny(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.ObjectList.Size.get -> int
AndroidX.Collection.ObjectListKt
AndroidX.Collection.ObjectLongMap
AndroidX.Collection.ObjectLongMap.All(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.ObjectLongMap.Any() -> bool
AndroidX.Collection.ObjectLongMap.Any(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.ObjectLongMap.Capacity.get -> int
AndroidX.Collection.ObjectLongMap.Contains(Java.Lang.Object? key) -> bool
AndroidX.Collection.ObjectLongMap.ContainsKey(Java.Lang.Object? key) -> bool
AndroidX.Collection.ObjectLongMap.ContainsValue(long value) -> bool
AndroidX.Collection.ObjectLongMap.Count() -> int
AndroidX.Collection.ObjectLongMap.Count(Kotlin.Jvm.Functions.IFunction2! predicate) -> int
AndroidX.Collection.ObjectLongMap.ForEach(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.ObjectLongMap.ForEachKey(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.ObjectLongMap.ForEachValue(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.ObjectLongMap.Get(Java.Lang.Object? key) -> long
AndroidX.Collection.ObjectLongMap.GetOrDefault(Java.Lang.Object? key, long defaultValue) -> long
AndroidX.Collection.ObjectLongMap.GetOrElse(Java.Lang.Object? key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> long
AndroidX.Collection.ObjectLongMap.IsEmpty.get -> bool
AndroidX.Collection.ObjectLongMap.IsNotEmpty.get -> bool
AndroidX.Collection.ObjectLongMap.JoinToString() -> string!
AndroidX.Collection.ObjectLongMap.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.ObjectLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.ObjectLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.ObjectLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.ObjectLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.ObjectLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectLongMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectLongMap.JoinToString(Java.Lang.ICharSequence! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectLongMap.JoinToString(Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectLongMap.JoinToString(string! separator) -> string!
AndroidX.Collection.ObjectLongMap.JoinToString(string! separator, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectLongMap.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.ObjectLongMap.JoinToString(string! separator, string! prefix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectLongMap.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.ObjectLongMap.JoinToString(string! separator, string! prefix, string! postfix, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectLongMap.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.ObjectLongMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectLongMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.ObjectLongMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction2! transform) -> string!
AndroidX.Collection.ObjectLongMap.None() -> bool
AndroidX.Collection.ObjectLongMap.ObjectLongMap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.ObjectLongMap.Size.get -> int
AndroidX.Collection.ObjectLongMapKt
AndroidX.Collection.OrderedScatterSet
AndroidX.Collection.OrderedScatterSet.All(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.OrderedScatterSet.Any() -> bool
AndroidX.Collection.OrderedScatterSet.Any(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.OrderedScatterSet.AsSet() -> System.Collections.ICollection!
AndroidX.Collection.OrderedScatterSet.Capacity.get -> int
AndroidX.Collection.OrderedScatterSet.Contains(Java.Lang.Object? element) -> bool
AndroidX.Collection.OrderedScatterSet.Count() -> int
AndroidX.Collection.OrderedScatterSet.Count(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.OrderedScatterSet.First() -> Java.Lang.Object?
AndroidX.Collection.OrderedScatterSet.First(Kotlin.Jvm.Functions.IFunction1! predicate) -> Java.Lang.Object?
AndroidX.Collection.OrderedScatterSet.FirstOrNull(Kotlin.Jvm.Functions.IFunction1! predicate) -> Java.Lang.Object?
AndroidX.Collection.OrderedScatterSet.ForEach(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.OrderedScatterSet.ForEachReverse(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.OrderedScatterSet.IsEmpty.get -> bool
AndroidX.Collection.OrderedScatterSet.IsNotEmpty.get -> bool
AndroidX.Collection.OrderedScatterSet.JoinToString() -> string!
AndroidX.Collection.OrderedScatterSet.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.OrderedScatterSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.OrderedScatterSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.OrderedScatterSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.OrderedScatterSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.OrderedScatterSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction1? transform) -> string!
AndroidX.Collection.OrderedScatterSet.JoinToString(string! separator) -> string!
AndroidX.Collection.OrderedScatterSet.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.OrderedScatterSet.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.OrderedScatterSet.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.OrderedScatterSet.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.OrderedScatterSet.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction1? transform) -> string!
AndroidX.Collection.OrderedScatterSet.Last() -> Java.Lang.Object?
AndroidX.Collection.OrderedScatterSet.Last(Kotlin.Jvm.Functions.IFunction1! predicate) -> Java.Lang.Object?
AndroidX.Collection.OrderedScatterSet.LastOrNull(Kotlin.Jvm.Functions.IFunction1! predicate) -> Java.Lang.Object?
AndroidX.Collection.OrderedScatterSet.None() -> bool
AndroidX.Collection.OrderedScatterSet.OrderedScatterSet(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.OrderedScatterSet.Size.get -> int
AndroidX.Collection.OrderedScatterSet.ToList() -> System.Collections.IList!
AndroidX.Collection.OrderedScatterSetKt
AndroidX.Collection.PackingUtilsKt
AndroidX.Collection.ScatterMap
AndroidX.Collection.ScatterMap.All(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.ScatterMap.Any() -> bool
AndroidX.Collection.ScatterMap.Any(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.ScatterMap.AsMap() -> System.Collections.IDictionary!
AndroidX.Collection.ScatterMap.Capacity.get -> int
AndroidX.Collection.ScatterMap.Contains(Java.Lang.Object? key) -> bool
AndroidX.Collection.ScatterMap.ContainsKey(Java.Lang.Object? key) -> bool
AndroidX.Collection.ScatterMap.ContainsValue(Java.Lang.Object? value) -> bool
AndroidX.Collection.ScatterMap.Count() -> int
AndroidX.Collection.ScatterMap.Count(Kotlin.Jvm.Functions.IFunction2! predicate) -> int
AndroidX.Collection.ScatterMap.ForEach(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.ScatterMap.ForEachKey(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.ScatterMap.ForEachValue(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.ScatterMap.Get(Java.Lang.Object? key) -> Java.Lang.Object?
AndroidX.Collection.ScatterMap.GetOrDefault(Java.Lang.Object? key, Java.Lang.Object? defaultValue) -> Java.Lang.Object?
AndroidX.Collection.ScatterMap.GetOrElse(Java.Lang.Object? key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> Java.Lang.Object?
AndroidX.Collection.ScatterMap.IsEmpty.get -> bool
AndroidX.Collection.ScatterMap.IsNotEmpty.get -> bool
AndroidX.Collection.ScatterMap.JoinToString() -> string!
AndroidX.Collection.ScatterMap.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.ScatterMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.ScatterMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.ScatterMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.ScatterMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.ScatterMap.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction2? transform) -> string!
AndroidX.Collection.ScatterMap.JoinToString(string! separator) -> string!
AndroidX.Collection.ScatterMap.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.ScatterMap.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.ScatterMap.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.ScatterMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.ScatterMap.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction2? transform) -> string!
AndroidX.Collection.ScatterMap.None() -> bool
AndroidX.Collection.ScatterMap.ScatterMap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.ScatterMap.Size.get -> int
AndroidX.Collection.ScatterMapKt
AndroidX.Collection.ScatterSet
AndroidX.Collection.ScatterSet.All(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.ScatterSet.Any() -> bool
AndroidX.Collection.ScatterSet.Any(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
AndroidX.Collection.ScatterSet.AsSet() -> System.Collections.ICollection!
AndroidX.Collection.ScatterSet.Capacity.get -> int
AndroidX.Collection.ScatterSet.Contains(Java.Lang.Object? element) -> bool
AndroidX.Collection.ScatterSet.Count() -> int
AndroidX.Collection.ScatterSet.Count(Kotlin.Jvm.Functions.IFunction1! predicate) -> int
AndroidX.Collection.ScatterSet.First() -> Java.Lang.Object?
AndroidX.Collection.ScatterSet.First(Kotlin.Jvm.Functions.IFunction1! predicate) -> Java.Lang.Object?
AndroidX.Collection.ScatterSet.FirstOrNull(Kotlin.Jvm.Functions.IFunction1! predicate) -> Java.Lang.Object?
AndroidX.Collection.ScatterSet.ForEach(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.ScatterSet.IsEmpty.get -> bool
AndroidX.Collection.ScatterSet.IsNotEmpty.get -> bool
AndroidX.Collection.ScatterSet.JoinToString() -> string!
AndroidX.Collection.ScatterSet.JoinToString(Java.Lang.ICharSequence! separator) -> string!
AndroidX.Collection.ScatterSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix) -> string!
AndroidX.Collection.ScatterSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix) -> string!
AndroidX.Collection.ScatterSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit) -> string!
AndroidX.Collection.ScatterSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated) -> string!
AndroidX.Collection.ScatterSet.JoinToString(Java.Lang.ICharSequence! separator, Java.Lang.ICharSequence! prefix, Java.Lang.ICharSequence! postfix, int limit, Java.Lang.ICharSequence! truncated, Kotlin.Jvm.Functions.IFunction1? transform) -> string!
AndroidX.Collection.ScatterSet.JoinToString(string! separator) -> string!
AndroidX.Collection.ScatterSet.JoinToString(string! separator, string! prefix) -> string!
AndroidX.Collection.ScatterSet.JoinToString(string! separator, string! prefix, string! postfix) -> string!
AndroidX.Collection.ScatterSet.JoinToString(string! separator, string! prefix, string! postfix, int limit) -> string!
AndroidX.Collection.ScatterSet.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated) -> string!
AndroidX.Collection.ScatterSet.JoinToString(string! separator, string! prefix, string! postfix, int limit, string! truncated, Kotlin.Jvm.Functions.IFunction1? transform) -> string!
AndroidX.Collection.ScatterSet.None() -> bool
AndroidX.Collection.ScatterSet.ScatterSet(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.ScatterSet.Size.get -> int
AndroidX.Collection.ScatterSetKt
AndroidX.Collection.SieveCache
AndroidX.Collection.SieveCache.All(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.SieveCache.Any() -> bool
AndroidX.Collection.SieveCache.Any(Kotlin.Jvm.Functions.IFunction2! predicate) -> bool
AndroidX.Collection.SieveCache.Capacity.get -> int
AndroidX.Collection.SieveCache.Contains(Java.Lang.Object! key) -> bool
AndroidX.Collection.SieveCache.ContainsKey(Java.Lang.Object! key) -> bool
AndroidX.Collection.SieveCache.ContainsValue(Java.Lang.Object! value) -> bool
AndroidX.Collection.SieveCache.Count.get -> int
AndroidX.Collection.SieveCache.EvictAll() -> void
AndroidX.Collection.SieveCache.ForEach(Kotlin.Jvm.Functions.IFunction2! block) -> void
AndroidX.Collection.SieveCache.ForEachKey(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.SieveCache.ForEachValue(Kotlin.Jvm.Functions.IFunction1! block) -> void
AndroidX.Collection.SieveCache.Get(Java.Lang.Object! key) -> Java.Lang.Object?
AndroidX.Collection.SieveCache.InvokeCount() -> int
AndroidX.Collection.SieveCache.InvokeCount(Kotlin.Jvm.Functions.IFunction2! predicate) -> int
AndroidX.Collection.SieveCache.IsEmpty.get -> bool
AndroidX.Collection.SieveCache.IsNotEmpty.get -> bool
AndroidX.Collection.SieveCache.MaxSize.get -> int
AndroidX.Collection.SieveCache.MinusAssign(AndroidX.Collection.ObjectList! keys) -> void
AndroidX.Collection.SieveCache.MinusAssign(AndroidX.Collection.ScatterSet! keys) -> void
AndroidX.Collection.SieveCache.MinusAssign(Java.Lang.IIterable! keys) -> void
AndroidX.Collection.SieveCache.MinusAssign(Java.Lang.Object! key) -> void
AndroidX.Collection.SieveCache.MinusAssign(Java.Lang.Object![]! keys) -> void
AndroidX.Collection.SieveCache.MinusAssign(Kotlin.Sequences.ISequence! keys) -> void
AndroidX.Collection.SieveCache.None() -> bool
AndroidX.Collection.SieveCache.PlusAssign(AndroidX.Collection.ScatterMap! from) -> void
AndroidX.Collection.SieveCache.PlusAssign(AndroidX.Collection.SieveCache! from) -> void
AndroidX.Collection.SieveCache.PlusAssign(Java.Lang.IIterable! pairs) -> void
AndroidX.Collection.SieveCache.PlusAssign(Kotlin.Pair! pair) -> void
AndroidX.Collection.SieveCache.PlusAssign(Kotlin.Pair![]! pairs) -> void
AndroidX.Collection.SieveCache.PlusAssign(Kotlin.Sequences.ISequence! pairs) -> void
AndroidX.Collection.SieveCache.PlusAssign(System.Collections.IDictionary! from) -> void
AndroidX.Collection.SieveCache.Put(Java.Lang.Object! key, Java.Lang.Object! value) -> Java.Lang.Object?
AndroidX.Collection.SieveCache.PutAll(AndroidX.Collection.ScatterMap! from) -> void
AndroidX.Collection.SieveCache.PutAll(AndroidX.Collection.SieveCache! from) -> void
AndroidX.Collection.SieveCache.PutAll(Java.Lang.IIterable! pairs) -> void
AndroidX.Collection.SieveCache.PutAll(Kotlin.Pair![]! pairs) -> void
AndroidX.Collection.SieveCache.PutAll(Kotlin.Sequences.ISequence! pairs) -> void
AndroidX.Collection.SieveCache.PutAll(System.Collections.IDictionary! from) -> void
AndroidX.Collection.SieveCache.Remove(Java.Lang.Object! key) -> Java.Lang.Object?
AndroidX.Collection.SieveCache.Remove(Java.Lang.Object! key, Java.Lang.Object! value) -> bool
AndroidX.Collection.SieveCache.RemoveIf(Kotlin.Jvm.Functions.IFunction2! predicate) -> void
AndroidX.Collection.SieveCache.Resize(int maxSize) -> void
AndroidX.Collection.SieveCache.Set(Java.Lang.Object! key, Java.Lang.Object! value) -> void
AndroidX.Collection.SieveCache.SieveCache(int maxSize, int initialCapacity, Kotlin.Jvm.Functions.IFunction2! sizeOf, Kotlin.Jvm.Functions.IFunction1! createValueFromKey, Kotlin.Jvm.Functions.IFunction4! onEntryRemoved) -> void
AndroidX.Collection.SieveCache.Size.get -> int
AndroidX.Collection.SieveCache.TrimToSize(int maxSize) -> void
AndroidX.Collection.SieveCacheKt
AndroidX.Collection.SimpleArrayMap
AndroidX.Collection.SimpleArrayMap.SimpleArrayMap() -> void
AndroidX.Collection.SimpleArrayMap.SimpleArrayMap(AndroidX.Collection.SimpleArrayMap? map) -> void
AndroidX.Collection.SimpleArrayMap.SimpleArrayMap(int capacity) -> void
AndroidX.Collection.SimpleArrayMap.SimpleArrayMap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.SimpleArrayMapKt
AndroidX.Collection.SparseArrayCompat
AndroidX.Collection.SparseArrayCompat.GetIsEmpty() -> bool
AndroidX.Collection.SparseArrayCompat.SparseArrayCompat() -> void
AndroidX.Collection.SparseArrayCompat.SparseArrayCompat(int initialCapacity) -> void
AndroidX.Collection.SparseArrayCompat.SparseArrayCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Collection.SparseArrayCompatKt
AndroidX.Collection.SparseArrayKt
abstract AndroidX.Collection.ObjectList.AsList() -> System.Collections.IList!
override AndroidX.Collection.ArrayMap.ContainsKey(Java.Lang.Object? key) -> bool
override AndroidX.Collection.ArrayMap.ContainsValue(Java.Lang.Object? value) -> bool
override AndroidX.Collection.ArrayMap.Get(Java.Lang.Object? key) -> Java.Lang.Object?
override AndroidX.Collection.ArrayMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.ArrayMap.Remove(Java.Lang.Object? key) -> Java.Lang.Object?
override AndroidX.Collection.ArrayMap.ThresholdClass.get -> nint
override AndroidX.Collection.ArrayMap.ThresholdType.get -> System.Type!
override AndroidX.Collection.ArrayMapKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.ArraySet.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.ArraySetKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.CircularArray.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.CircularIntArray.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.DoubleList.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.DoubleList.ThresholdClass.get -> nint
override AndroidX.Collection.DoubleList.ThresholdType.get -> System.Type!
override AndroidX.Collection.DoubleListKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.DoubleSetKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.FloatFloatMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.FloatFloatMap.ThresholdClass.get -> nint
override AndroidX.Collection.FloatFloatMap.ThresholdType.get -> System.Type!
override AndroidX.Collection.FloatFloatMapKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.FloatFloatPair.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.FloatIntMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.FloatIntMap.ThresholdClass.get -> nint
override AndroidX.Collection.FloatIntMap.ThresholdType.get -> System.Type!
override AndroidX.Collection.FloatIntMapKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.FloatList.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.FloatList.ThresholdClass.get -> nint
override AndroidX.Collection.FloatList.ThresholdType.get -> System.Type!
override AndroidX.Collection.FloatListKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.FloatLongMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.FloatLongMap.ThresholdClass.get -> nint
override AndroidX.Collection.FloatLongMap.ThresholdType.get -> System.Type!
override AndroidX.Collection.FloatLongMapKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.FloatObjectMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.FloatObjectMap.ThresholdClass.get -> nint
override AndroidX.Collection.FloatObjectMap.ThresholdType.get -> System.Type!
override AndroidX.Collection.FloatObjectMapKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.FloatSet.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.FloatSet.ThresholdClass.get -> nint
override AndroidX.Collection.FloatSet.ThresholdType.get -> System.Type!
override AndroidX.Collection.FloatSetKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.IntFloatMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.IntFloatMap.ThresholdClass.get -> nint
override AndroidX.Collection.IntFloatMap.ThresholdType.get -> System.Type!
override AndroidX.Collection.IntFloatMapKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.IntIntMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.IntIntMap.ThresholdClass.get -> nint
override AndroidX.Collection.IntIntMap.ThresholdType.get -> System.Type!
override AndroidX.Collection.IntIntMapKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.IntIntPair.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.IntList.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.IntList.ThresholdClass.get -> nint
override AndroidX.Collection.IntList.ThresholdType.get -> System.Type!
override AndroidX.Collection.IntListKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.IntLongMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.IntLongMap.ThresholdClass.get -> nint
override AndroidX.Collection.IntLongMap.ThresholdType.get -> System.Type!
override AndroidX.Collection.IntLongMapKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.IntObjectMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.IntObjectMap.ThresholdClass.get -> nint
override AndroidX.Collection.IntObjectMap.ThresholdType.get -> System.Type!
override AndroidX.Collection.IntObjectMapKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.IntSet.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.IntSet.ThresholdClass.get -> nint
override AndroidX.Collection.IntSet.ThresholdType.get -> System.Type!
override AndroidX.Collection.IntSetKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.Internal.ContainerHelpersKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.Internal.LockExtKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.Internal.PackingHelpers_jvmKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.Internal.RuntimeHelpersKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.LongFloatMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.LongFloatMap.ThresholdClass.get -> nint
override AndroidX.Collection.LongFloatMap.ThresholdType.get -> System.Type!
override AndroidX.Collection.LongFloatMapKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.LongIntMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.LongIntMap.ThresholdClass.get -> nint
override AndroidX.Collection.LongIntMap.ThresholdType.get -> System.Type!
override AndroidX.Collection.LongIntMapKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.LongList.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.LongList.ThresholdClass.get -> nint
override AndroidX.Collection.LongList.ThresholdType.get -> System.Type!
override AndroidX.Collection.LongListKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.LongLongMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.LongLongMap.ThresholdClass.get -> nint
override AndroidX.Collection.LongLongMap.ThresholdType.get -> System.Type!
override AndroidX.Collection.LongLongMapKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.LongLongPair.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.LongObjectMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.LongObjectMap.ThresholdClass.get -> nint
override AndroidX.Collection.LongObjectMap.ThresholdType.get -> System.Type!
override AndroidX.Collection.LongObjectMapKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.LongSet.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.LongSet.ThresholdClass.get -> nint
override AndroidX.Collection.LongSet.ThresholdType.get -> System.Type!
override AndroidX.Collection.LongSetKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.LongSparseArray.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.LongSparseArray.ThresholdClass.get -> nint
override AndroidX.Collection.LongSparseArray.ThresholdType.get -> System.Type!
override AndroidX.Collection.LongSparseArrayKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.LruCache.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.LruCache.ThresholdClass.get -> nint
override AndroidX.Collection.LruCache.ThresholdType.get -> System.Type!
override AndroidX.Collection.LruCacheKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableDoubleList.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableFloatFloatMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableFloatIntMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableFloatList.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableFloatLongMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableFloatObjectMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableFloatSet.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableIntFloatMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableIntIntMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableIntList.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableIntLongMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableIntObjectMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableIntSet.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableLongFloatMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableLongIntMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableLongList.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableLongLongMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableLongObjectMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableLongSet.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableObjectFloatMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableObjectIntMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableObjectList.AsList() -> System.Collections.IList!
override AndroidX.Collection.MutableObjectList.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableObjectLongMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableOrderedScatterSet.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableScatterMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.MutableScatterSet.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.ObjectFloatMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.ObjectFloatMap.ThresholdClass.get -> nint
override AndroidX.Collection.ObjectFloatMap.ThresholdType.get -> System.Type!
override AndroidX.Collection.ObjectFloatMapKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.ObjectIntMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.ObjectIntMap.ThresholdClass.get -> nint
override AndroidX.Collection.ObjectIntMap.ThresholdType.get -> System.Type!
override AndroidX.Collection.ObjectIntMapKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.ObjectList.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.ObjectList.ThresholdClass.get -> nint
override AndroidX.Collection.ObjectList.ThresholdType.get -> System.Type!
override AndroidX.Collection.ObjectListKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.ObjectLongMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.ObjectLongMap.ThresholdClass.get -> nint
override AndroidX.Collection.ObjectLongMap.ThresholdType.get -> System.Type!
override AndroidX.Collection.ObjectLongMapKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.OrderedScatterSet.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.OrderedScatterSet.ThresholdClass.get -> nint
override AndroidX.Collection.OrderedScatterSet.ThresholdType.get -> System.Type!
override AndroidX.Collection.OrderedScatterSetKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.PackingUtilsKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.ScatterMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.ScatterMap.ThresholdClass.get -> nint
override AndroidX.Collection.ScatterMap.ThresholdType.get -> System.Type!
override AndroidX.Collection.ScatterMapKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.ScatterSet.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.ScatterSet.ThresholdClass.get -> nint
override AndroidX.Collection.ScatterSet.ThresholdType.get -> System.Type!
override AndroidX.Collection.ScatterSetKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.SieveCache.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.SieveCacheKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.SimpleArrayMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.SimpleArrayMap.ThresholdClass.get -> nint
override AndroidX.Collection.SimpleArrayMap.ThresholdType.get -> System.Type!
override AndroidX.Collection.SimpleArrayMapKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.SparseArrayCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.SparseArrayCompat.ThresholdClass.get -> nint
override AndroidX.Collection.SparseArrayCompat.ThresholdType.get -> System.Type!
override AndroidX.Collection.SparseArrayCompatKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Collection.SparseArrayKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
static AndroidX.Collection.ArrayMapKt.ArrayMapOf() -> AndroidX.Collection.ArrayMap!
static AndroidX.Collection.ArrayMapKt.ArrayMapOf(params Kotlin.Pair![]! pairs) -> AndroidX.Collection.ArrayMap!
static AndroidX.Collection.ArraySetKt.ArraySetOf() -> AndroidX.Collection.ArraySet!
static AndroidX.Collection.ArraySetKt.ArraySetOf(params Java.Lang.Object![]! values) -> AndroidX.Collection.ArraySet!
static AndroidX.Collection.DoubleListKt.BuildDoubleList(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.DoubleList!
static AndroidX.Collection.DoubleListKt.BuildDoubleList(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.DoubleList!
static AndroidX.Collection.DoubleListKt.DoubleListOf() -> AndroidX.Collection.DoubleList!
static AndroidX.Collection.DoubleListKt.DoubleListOf(double element1) -> AndroidX.Collection.DoubleList!
static AndroidX.Collection.DoubleListKt.DoubleListOf(double element1, double element2) -> AndroidX.Collection.DoubleList!
static AndroidX.Collection.DoubleListKt.DoubleListOf(double element1, double element2, double element3) -> AndroidX.Collection.DoubleList!
static AndroidX.Collection.DoubleListKt.DoubleListOf(params double[]! elements) -> AndroidX.Collection.DoubleList!
static AndroidX.Collection.DoubleListKt.EmptyDoubleList() -> AndroidX.Collection.DoubleList!
static AndroidX.Collection.DoubleListKt.MutableDoubleListOf() -> AndroidX.Collection.MutableDoubleList!
static AndroidX.Collection.DoubleListKt.MutableDoubleListOf(double element1) -> AndroidX.Collection.MutableDoubleList!
static AndroidX.Collection.DoubleListKt.MutableDoubleListOf(double element1, double element2) -> AndroidX.Collection.MutableDoubleList!
static AndroidX.Collection.DoubleListKt.MutableDoubleListOf(double element1, double element2, double element3) -> AndroidX.Collection.MutableDoubleList!
static AndroidX.Collection.DoubleListKt.MutableDoubleListOf(params double[]! elements) -> AndroidX.Collection.MutableDoubleList!
static AndroidX.Collection.DoubleSetKt.GetEmptyDoubleArray() -> double[]!
static AndroidX.Collection.FloatFloatMapKt.BuildFloatFloatMap(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.FloatFloatMap!
static AndroidX.Collection.FloatFloatMapKt.BuildFloatFloatMap(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.FloatFloatMap!
static AndroidX.Collection.FloatFloatMapKt.EmptyFloatFloatMap() -> AndroidX.Collection.FloatFloatMap!
static AndroidX.Collection.FloatFloatMapKt.FloatFloatMapOf() -> AndroidX.Collection.FloatFloatMap!
static AndroidX.Collection.FloatFloatMapKt.FloatFloatMapOf(float key1, float value1) -> AndroidX.Collection.FloatFloatMap!
static AndroidX.Collection.FloatFloatMapKt.FloatFloatMapOf(float key1, float value1, float key2, float value2) -> AndroidX.Collection.FloatFloatMap!
static AndroidX.Collection.FloatFloatMapKt.FloatFloatMapOf(float key1, float value1, float key2, float value2, float key3, float value3) -> AndroidX.Collection.FloatFloatMap!
static AndroidX.Collection.FloatFloatMapKt.FloatFloatMapOf(float key1, float value1, float key2, float value2, float key3, float value3, float key4, float value4) -> AndroidX.Collection.FloatFloatMap!
static AndroidX.Collection.FloatFloatMapKt.FloatFloatMapOf(float key1, float value1, float key2, float value2, float key3, float value3, float key4, float value4, float key5, float value5) -> AndroidX.Collection.FloatFloatMap!
static AndroidX.Collection.FloatFloatMapKt.MutableFloatFloatMapOf() -> AndroidX.Collection.MutableFloatFloatMap!
static AndroidX.Collection.FloatFloatMapKt.MutableFloatFloatMapOf(float key1, float value1) -> AndroidX.Collection.MutableFloatFloatMap!
static AndroidX.Collection.FloatFloatMapKt.MutableFloatFloatMapOf(float key1, float value1, float key2, float value2) -> AndroidX.Collection.MutableFloatFloatMap!
static AndroidX.Collection.FloatFloatMapKt.MutableFloatFloatMapOf(float key1, float value1, float key2, float value2, float key3, float value3) -> AndroidX.Collection.MutableFloatFloatMap!
static AndroidX.Collection.FloatFloatMapKt.MutableFloatFloatMapOf(float key1, float value1, float key2, float value2, float key3, float value3, float key4, float value4) -> AndroidX.Collection.MutableFloatFloatMap!
static AndroidX.Collection.FloatFloatMapKt.MutableFloatFloatMapOf(float key1, float value1, float key2, float value2, float key3, float value3, float key4, float value4, float key5, float value5) -> AndroidX.Collection.MutableFloatFloatMap!
static AndroidX.Collection.FloatIntMapKt.BuildFloatIntMap(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.FloatIntMap!
static AndroidX.Collection.FloatIntMapKt.BuildFloatIntMap(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.FloatIntMap!
static AndroidX.Collection.FloatIntMapKt.EmptyFloatIntMap() -> AndroidX.Collection.FloatIntMap!
static AndroidX.Collection.FloatIntMapKt.FloatIntMapOf() -> AndroidX.Collection.FloatIntMap!
static AndroidX.Collection.FloatIntMapKt.FloatIntMapOf(float key1, int value1) -> AndroidX.Collection.FloatIntMap!
static AndroidX.Collection.FloatIntMapKt.FloatIntMapOf(float key1, int value1, float key2, int value2) -> AndroidX.Collection.FloatIntMap!
static AndroidX.Collection.FloatIntMapKt.FloatIntMapOf(float key1, int value1, float key2, int value2, float key3, int value3) -> AndroidX.Collection.FloatIntMap!
static AndroidX.Collection.FloatIntMapKt.FloatIntMapOf(float key1, int value1, float key2, int value2, float key3, int value3, float key4, int value4) -> AndroidX.Collection.FloatIntMap!
static AndroidX.Collection.FloatIntMapKt.FloatIntMapOf(float key1, int value1, float key2, int value2, float key3, int value3, float key4, int value4, float key5, int value5) -> AndroidX.Collection.FloatIntMap!
static AndroidX.Collection.FloatIntMapKt.MutableFloatIntMapOf() -> AndroidX.Collection.MutableFloatIntMap!
static AndroidX.Collection.FloatIntMapKt.MutableFloatIntMapOf(float key1, int value1) -> AndroidX.Collection.MutableFloatIntMap!
static AndroidX.Collection.FloatIntMapKt.MutableFloatIntMapOf(float key1, int value1, float key2, int value2) -> AndroidX.Collection.MutableFloatIntMap!
static AndroidX.Collection.FloatIntMapKt.MutableFloatIntMapOf(float key1, int value1, float key2, int value2, float key3, int value3) -> AndroidX.Collection.MutableFloatIntMap!
static AndroidX.Collection.FloatIntMapKt.MutableFloatIntMapOf(float key1, int value1, float key2, int value2, float key3, int value3, float key4, int value4) -> AndroidX.Collection.MutableFloatIntMap!
static AndroidX.Collection.FloatIntMapKt.MutableFloatIntMapOf(float key1, int value1, float key2, int value2, float key3, int value3, float key4, int value4, float key5, int value5) -> AndroidX.Collection.MutableFloatIntMap!
static AndroidX.Collection.FloatListKt.BuildFloatList(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.FloatList!
static AndroidX.Collection.FloatListKt.BuildFloatList(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.FloatList!
static AndroidX.Collection.FloatListKt.EmptyFloatList() -> AndroidX.Collection.FloatList!
static AndroidX.Collection.FloatListKt.FloatListOf() -> AndroidX.Collection.FloatList!
static AndroidX.Collection.FloatListKt.FloatListOf(float element1) -> AndroidX.Collection.FloatList!
static AndroidX.Collection.FloatListKt.FloatListOf(float element1, float element2) -> AndroidX.Collection.FloatList!
static AndroidX.Collection.FloatListKt.FloatListOf(float element1, float element2, float element3) -> AndroidX.Collection.FloatList!
static AndroidX.Collection.FloatListKt.FloatListOf(params float[]! elements) -> AndroidX.Collection.FloatList!
static AndroidX.Collection.FloatListKt.MutableFloatListOf() -> AndroidX.Collection.MutableFloatList!
static AndroidX.Collection.FloatListKt.MutableFloatListOf(float element1) -> AndroidX.Collection.MutableFloatList!
static AndroidX.Collection.FloatListKt.MutableFloatListOf(float element1, float element2) -> AndroidX.Collection.MutableFloatList!
static AndroidX.Collection.FloatListKt.MutableFloatListOf(float element1, float element2, float element3) -> AndroidX.Collection.MutableFloatList!
static AndroidX.Collection.FloatListKt.MutableFloatListOf(params float[]! elements) -> AndroidX.Collection.MutableFloatList!
static AndroidX.Collection.FloatLongMapKt.BuildFloatLongMap(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.FloatLongMap!
static AndroidX.Collection.FloatLongMapKt.BuildFloatLongMap(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.FloatLongMap!
static AndroidX.Collection.FloatLongMapKt.EmptyFloatLongMap() -> AndroidX.Collection.FloatLongMap!
static AndroidX.Collection.FloatLongMapKt.FloatLongMapOf() -> AndroidX.Collection.FloatLongMap!
static AndroidX.Collection.FloatLongMapKt.FloatLongMapOf(float key1, long value1) -> AndroidX.Collection.FloatLongMap!
static AndroidX.Collection.FloatLongMapKt.FloatLongMapOf(float key1, long value1, float key2, long value2) -> AndroidX.Collection.FloatLongMap!
static AndroidX.Collection.FloatLongMapKt.FloatLongMapOf(float key1, long value1, float key2, long value2, float key3, long value3) -> AndroidX.Collection.FloatLongMap!
static AndroidX.Collection.FloatLongMapKt.FloatLongMapOf(float key1, long value1, float key2, long value2, float key3, long value3, float key4, long value4) -> AndroidX.Collection.FloatLongMap!
static AndroidX.Collection.FloatLongMapKt.FloatLongMapOf(float key1, long value1, float key2, long value2, float key3, long value3, float key4, long value4, float key5, long value5) -> AndroidX.Collection.FloatLongMap!
static AndroidX.Collection.FloatLongMapKt.MutableFloatLongMapOf() -> AndroidX.Collection.MutableFloatLongMap!
static AndroidX.Collection.FloatLongMapKt.MutableFloatLongMapOf(float key1, long value1) -> AndroidX.Collection.MutableFloatLongMap!
static AndroidX.Collection.FloatLongMapKt.MutableFloatLongMapOf(float key1, long value1, float key2, long value2) -> AndroidX.Collection.MutableFloatLongMap!
static AndroidX.Collection.FloatLongMapKt.MutableFloatLongMapOf(float key1, long value1, float key2, long value2, float key3, long value3) -> AndroidX.Collection.MutableFloatLongMap!
static AndroidX.Collection.FloatLongMapKt.MutableFloatLongMapOf(float key1, long value1, float key2, long value2, float key3, long value3, float key4, long value4) -> AndroidX.Collection.MutableFloatLongMap!
static AndroidX.Collection.FloatLongMapKt.MutableFloatLongMapOf(float key1, long value1, float key2, long value2, float key3, long value3, float key4, long value4, float key5, long value5) -> AndroidX.Collection.MutableFloatLongMap!
static AndroidX.Collection.FloatObjectMapKt.BuildFloatObjectMap(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.FloatObjectMap!
static AndroidX.Collection.FloatObjectMapKt.BuildFloatObjectMap(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.FloatObjectMap!
static AndroidX.Collection.FloatObjectMapKt.EmptyFloatObjectMap() -> AndroidX.Collection.FloatObjectMap!
static AndroidX.Collection.FloatObjectMapKt.FloatObjectMapOf() -> AndroidX.Collection.FloatObjectMap!
static AndroidX.Collection.FloatObjectMapKt.FloatObjectMapOf(float key1, Java.Lang.Object? value1) -> AndroidX.Collection.FloatObjectMap!
static AndroidX.Collection.FloatObjectMapKt.FloatObjectMapOf(float key1, Java.Lang.Object? value1, float key2, Java.Lang.Object? value2) -> AndroidX.Collection.FloatObjectMap!
static AndroidX.Collection.FloatObjectMapKt.FloatObjectMapOf(float key1, Java.Lang.Object? value1, float key2, Java.Lang.Object? value2, float key3, Java.Lang.Object? value3) -> AndroidX.Collection.FloatObjectMap!
static AndroidX.Collection.FloatObjectMapKt.FloatObjectMapOf(float key1, Java.Lang.Object? value1, float key2, Java.Lang.Object? value2, float key3, Java.Lang.Object? value3, float key4, Java.Lang.Object? value4) -> AndroidX.Collection.FloatObjectMap!
static AndroidX.Collection.FloatObjectMapKt.FloatObjectMapOf(float key1, Java.Lang.Object? value1, float key2, Java.Lang.Object? value2, float key3, Java.Lang.Object? value3, float key4, Java.Lang.Object? value4, float key5, Java.Lang.Object? value5) -> AndroidX.Collection.FloatObjectMap!
static AndroidX.Collection.FloatObjectMapKt.MutableFloatObjectMapOf() -> AndroidX.Collection.MutableFloatObjectMap!
static AndroidX.Collection.FloatObjectMapKt.MutableFloatObjectMapOf(float key1, Java.Lang.Object? value1) -> AndroidX.Collection.MutableFloatObjectMap!
static AndroidX.Collection.FloatObjectMapKt.MutableFloatObjectMapOf(float key1, Java.Lang.Object? value1, float key2, Java.Lang.Object? value2) -> AndroidX.Collection.MutableFloatObjectMap!
static AndroidX.Collection.FloatObjectMapKt.MutableFloatObjectMapOf(float key1, Java.Lang.Object? value1, float key2, Java.Lang.Object? value2, float key3, Java.Lang.Object? value3) -> AndroidX.Collection.MutableFloatObjectMap!
static AndroidX.Collection.FloatObjectMapKt.MutableFloatObjectMapOf(float key1, Java.Lang.Object? value1, float key2, Java.Lang.Object? value2, float key3, Java.Lang.Object? value3, float key4, Java.Lang.Object? value4) -> AndroidX.Collection.MutableFloatObjectMap!
static AndroidX.Collection.FloatObjectMapKt.MutableFloatObjectMapOf(float key1, Java.Lang.Object? value1, float key2, Java.Lang.Object? value2, float key3, Java.Lang.Object? value3, float key4, Java.Lang.Object? value4, float key5, Java.Lang.Object? value5) -> AndroidX.Collection.MutableFloatObjectMap!
static AndroidX.Collection.FloatSetKt.BuildFloatSet(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.FloatSet!
static AndroidX.Collection.FloatSetKt.BuildFloatSet(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.FloatSet!
static AndroidX.Collection.FloatSetKt.EmptyFloatSet() -> AndroidX.Collection.FloatSet!
static AndroidX.Collection.FloatSetKt.FloatSetOf() -> AndroidX.Collection.FloatSet!
static AndroidX.Collection.FloatSetKt.FloatSetOf(float element1) -> AndroidX.Collection.FloatSet!
static AndroidX.Collection.FloatSetKt.FloatSetOf(float element1, float element2) -> AndroidX.Collection.FloatSet!
static AndroidX.Collection.FloatSetKt.FloatSetOf(float element1, float element2, float element3) -> AndroidX.Collection.FloatSet!
static AndroidX.Collection.FloatSetKt.FloatSetOf(params float[]! elements) -> AndroidX.Collection.FloatSet!
static AndroidX.Collection.FloatSetKt.GetEmptyFloatArray() -> float[]!
static AndroidX.Collection.FloatSetKt.MutableFloatSetOf() -> AndroidX.Collection.MutableFloatSet!
static AndroidX.Collection.FloatSetKt.MutableFloatSetOf(float element1) -> AndroidX.Collection.MutableFloatSet!
static AndroidX.Collection.FloatSetKt.MutableFloatSetOf(float element1, float element2) -> AndroidX.Collection.MutableFloatSet!
static AndroidX.Collection.FloatSetKt.MutableFloatSetOf(float element1, float element2, float element3) -> AndroidX.Collection.MutableFloatSet!
static AndroidX.Collection.FloatSetKt.MutableFloatSetOf(params float[]! elements) -> AndroidX.Collection.MutableFloatSet!
static AndroidX.Collection.IntFloatMapKt.BuildIntFloatMap(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.IntFloatMap!
static AndroidX.Collection.IntFloatMapKt.BuildIntFloatMap(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.IntFloatMap!
static AndroidX.Collection.IntFloatMapKt.EmptyIntFloatMap() -> AndroidX.Collection.IntFloatMap!
static AndroidX.Collection.IntFloatMapKt.IntFloatMapOf() -> AndroidX.Collection.IntFloatMap!
static AndroidX.Collection.IntFloatMapKt.IntFloatMapOf(int key1, float value1) -> AndroidX.Collection.IntFloatMap!
static AndroidX.Collection.IntFloatMapKt.IntFloatMapOf(int key1, float value1, int key2, float value2) -> AndroidX.Collection.IntFloatMap!
static AndroidX.Collection.IntFloatMapKt.IntFloatMapOf(int key1, float value1, int key2, float value2, int key3, float value3) -> AndroidX.Collection.IntFloatMap!
static AndroidX.Collection.IntFloatMapKt.IntFloatMapOf(int key1, float value1, int key2, float value2, int key3, float value3, int key4, float value4) -> AndroidX.Collection.IntFloatMap!
static AndroidX.Collection.IntFloatMapKt.IntFloatMapOf(int key1, float value1, int key2, float value2, int key3, float value3, int key4, float value4, int key5, float value5) -> AndroidX.Collection.IntFloatMap!
static AndroidX.Collection.IntFloatMapKt.MutableIntFloatMapOf() -> AndroidX.Collection.MutableIntFloatMap!
static AndroidX.Collection.IntFloatMapKt.MutableIntFloatMapOf(int key1, float value1) -> AndroidX.Collection.MutableIntFloatMap!
static AndroidX.Collection.IntFloatMapKt.MutableIntFloatMapOf(int key1, float value1, int key2, float value2) -> AndroidX.Collection.MutableIntFloatMap!
static AndroidX.Collection.IntFloatMapKt.MutableIntFloatMapOf(int key1, float value1, int key2, float value2, int key3, float value3) -> AndroidX.Collection.MutableIntFloatMap!
static AndroidX.Collection.IntFloatMapKt.MutableIntFloatMapOf(int key1, float value1, int key2, float value2, int key3, float value3, int key4, float value4) -> AndroidX.Collection.MutableIntFloatMap!
static AndroidX.Collection.IntFloatMapKt.MutableIntFloatMapOf(int key1, float value1, int key2, float value2, int key3, float value3, int key4, float value4, int key5, float value5) -> AndroidX.Collection.MutableIntFloatMap!
static AndroidX.Collection.IntIntMapKt.BuildIntIntMap(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.IntIntMap!
static AndroidX.Collection.IntIntMapKt.BuildIntIntMap(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.IntIntMap!
static AndroidX.Collection.IntIntMapKt.EmptyIntIntMap() -> AndroidX.Collection.IntIntMap!
static AndroidX.Collection.IntIntMapKt.IntIntMapOf() -> AndroidX.Collection.IntIntMap!
static AndroidX.Collection.IntIntMapKt.IntIntMapOf(int key1, int value1) -> AndroidX.Collection.IntIntMap!
static AndroidX.Collection.IntIntMapKt.IntIntMapOf(int key1, int value1, int key2, int value2) -> AndroidX.Collection.IntIntMap!
static AndroidX.Collection.IntIntMapKt.IntIntMapOf(int key1, int value1, int key2, int value2, int key3, int value3) -> AndroidX.Collection.IntIntMap!
static AndroidX.Collection.IntIntMapKt.IntIntMapOf(int key1, int value1, int key2, int value2, int key3, int value3, int key4, int value4) -> AndroidX.Collection.IntIntMap!
static AndroidX.Collection.IntIntMapKt.IntIntMapOf(int key1, int value1, int key2, int value2, int key3, int value3, int key4, int value4, int key5, int value5) -> AndroidX.Collection.IntIntMap!
static AndroidX.Collection.IntIntMapKt.MutableIntIntMapOf() -> AndroidX.Collection.MutableIntIntMap!
static AndroidX.Collection.IntIntMapKt.MutableIntIntMapOf(int key1, int value1) -> AndroidX.Collection.MutableIntIntMap!
static AndroidX.Collection.IntIntMapKt.MutableIntIntMapOf(int key1, int value1, int key2, int value2) -> AndroidX.Collection.MutableIntIntMap!
static AndroidX.Collection.IntIntMapKt.MutableIntIntMapOf(int key1, int value1, int key2, int value2, int key3, int value3) -> AndroidX.Collection.MutableIntIntMap!
static AndroidX.Collection.IntIntMapKt.MutableIntIntMapOf(int key1, int value1, int key2, int value2, int key3, int value3, int key4, int value4) -> AndroidX.Collection.MutableIntIntMap!
static AndroidX.Collection.IntIntMapKt.MutableIntIntMapOf(int key1, int value1, int key2, int value2, int key3, int value3, int key4, int value4, int key5, int value5) -> AndroidX.Collection.MutableIntIntMap!
static AndroidX.Collection.IntListKt.BuildIntList(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.IntList!
static AndroidX.Collection.IntListKt.BuildIntList(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.IntList!
static AndroidX.Collection.IntListKt.EmptyIntList() -> AndroidX.Collection.IntList!
static AndroidX.Collection.IntListKt.IntListOf() -> AndroidX.Collection.IntList!
static AndroidX.Collection.IntListKt.IntListOf(int element1) -> AndroidX.Collection.IntList!
static AndroidX.Collection.IntListKt.IntListOf(int element1, int element2) -> AndroidX.Collection.IntList!
static AndroidX.Collection.IntListKt.IntListOf(int element1, int element2, int element3) -> AndroidX.Collection.IntList!
static AndroidX.Collection.IntListKt.IntListOf(params int[]! elements) -> AndroidX.Collection.IntList!
static AndroidX.Collection.IntListKt.MutableIntListOf() -> AndroidX.Collection.MutableIntList!
static AndroidX.Collection.IntListKt.MutableIntListOf(int element1) -> AndroidX.Collection.MutableIntList!
static AndroidX.Collection.IntListKt.MutableIntListOf(int element1, int element2) -> AndroidX.Collection.MutableIntList!
static AndroidX.Collection.IntListKt.MutableIntListOf(int element1, int element2, int element3) -> AndroidX.Collection.MutableIntList!
static AndroidX.Collection.IntListKt.MutableIntListOf(params int[]! elements) -> AndroidX.Collection.MutableIntList!
static AndroidX.Collection.IntLongMapKt.BuildIntLongMap(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.IntLongMap!
static AndroidX.Collection.IntLongMapKt.BuildIntLongMap(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.IntLongMap!
static AndroidX.Collection.IntLongMapKt.EmptyIntLongMap() -> AndroidX.Collection.IntLongMap!
static AndroidX.Collection.IntLongMapKt.IntLongMapOf() -> AndroidX.Collection.IntLongMap!
static AndroidX.Collection.IntLongMapKt.IntLongMapOf(int key1, long value1) -> AndroidX.Collection.IntLongMap!
static AndroidX.Collection.IntLongMapKt.IntLongMapOf(int key1, long value1, int key2, long value2) -> AndroidX.Collection.IntLongMap!
static AndroidX.Collection.IntLongMapKt.IntLongMapOf(int key1, long value1, int key2, long value2, int key3, long value3) -> AndroidX.Collection.IntLongMap!
static AndroidX.Collection.IntLongMapKt.IntLongMapOf(int key1, long value1, int key2, long value2, int key3, long value3, int key4, long value4) -> AndroidX.Collection.IntLongMap!
static AndroidX.Collection.IntLongMapKt.IntLongMapOf(int key1, long value1, int key2, long value2, int key3, long value3, int key4, long value4, int key5, long value5) -> AndroidX.Collection.IntLongMap!
static AndroidX.Collection.IntLongMapKt.MutableIntLongMapOf() -> AndroidX.Collection.MutableIntLongMap!
static AndroidX.Collection.IntLongMapKt.MutableIntLongMapOf(int key1, long value1) -> AndroidX.Collection.MutableIntLongMap!
static AndroidX.Collection.IntLongMapKt.MutableIntLongMapOf(int key1, long value1, int key2, long value2) -> AndroidX.Collection.MutableIntLongMap!
static AndroidX.Collection.IntLongMapKt.MutableIntLongMapOf(int key1, long value1, int key2, long value2, int key3, long value3) -> AndroidX.Collection.MutableIntLongMap!
static AndroidX.Collection.IntLongMapKt.MutableIntLongMapOf(int key1, long value1, int key2, long value2, int key3, long value3, int key4, long value4) -> AndroidX.Collection.MutableIntLongMap!
static AndroidX.Collection.IntLongMapKt.MutableIntLongMapOf(int key1, long value1, int key2, long value2, int key3, long value3, int key4, long value4, int key5, long value5) -> AndroidX.Collection.MutableIntLongMap!
static AndroidX.Collection.IntObjectMapKt.BuildIntObjectMap(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.IntObjectMap!
static AndroidX.Collection.IntObjectMapKt.BuildIntObjectMap(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.IntObjectMap!
static AndroidX.Collection.IntObjectMapKt.EmptyIntObjectMap() -> AndroidX.Collection.IntObjectMap!
static AndroidX.Collection.IntObjectMapKt.IntObjectMapOf() -> AndroidX.Collection.IntObjectMap!
static AndroidX.Collection.IntObjectMapKt.IntObjectMapOf(int key1, Java.Lang.Object? value1) -> AndroidX.Collection.IntObjectMap!
static AndroidX.Collection.IntObjectMapKt.IntObjectMapOf(int key1, Java.Lang.Object? value1, int key2, Java.Lang.Object? value2) -> AndroidX.Collection.IntObjectMap!
static AndroidX.Collection.IntObjectMapKt.IntObjectMapOf(int key1, Java.Lang.Object? value1, int key2, Java.Lang.Object? value2, int key3, Java.Lang.Object? value3) -> AndroidX.Collection.IntObjectMap!
static AndroidX.Collection.IntObjectMapKt.IntObjectMapOf(int key1, Java.Lang.Object? value1, int key2, Java.Lang.Object? value2, int key3, Java.Lang.Object? value3, int key4, Java.Lang.Object? value4) -> AndroidX.Collection.IntObjectMap!
static AndroidX.Collection.IntObjectMapKt.IntObjectMapOf(int key1, Java.Lang.Object? value1, int key2, Java.Lang.Object? value2, int key3, Java.Lang.Object? value3, int key4, Java.Lang.Object? value4, int key5, Java.Lang.Object? value5) -> AndroidX.Collection.IntObjectMap!
static AndroidX.Collection.IntObjectMapKt.MutableIntObjectMapOf() -> AndroidX.Collection.MutableIntObjectMap!
static AndroidX.Collection.IntObjectMapKt.MutableIntObjectMapOf(int key1, Java.Lang.Object? value1) -> AndroidX.Collection.MutableIntObjectMap!
static AndroidX.Collection.IntObjectMapKt.MutableIntObjectMapOf(int key1, Java.Lang.Object? value1, int key2, Java.Lang.Object? value2) -> AndroidX.Collection.MutableIntObjectMap!
static AndroidX.Collection.IntObjectMapKt.MutableIntObjectMapOf(int key1, Java.Lang.Object? value1, int key2, Java.Lang.Object? value2, int key3, Java.Lang.Object? value3) -> AndroidX.Collection.MutableIntObjectMap!
static AndroidX.Collection.IntObjectMapKt.MutableIntObjectMapOf(int key1, Java.Lang.Object? value1, int key2, Java.Lang.Object? value2, int key3, Java.Lang.Object? value3, int key4, Java.Lang.Object? value4) -> AndroidX.Collection.MutableIntObjectMap!
static AndroidX.Collection.IntObjectMapKt.MutableIntObjectMapOf(int key1, Java.Lang.Object? value1, int key2, Java.Lang.Object? value2, int key3, Java.Lang.Object? value3, int key4, Java.Lang.Object? value4, int key5, Java.Lang.Object? value5) -> AndroidX.Collection.MutableIntObjectMap!
static AndroidX.Collection.IntSetKt.BuildIntSet(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.IntSet!
static AndroidX.Collection.IntSetKt.BuildIntSet(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.IntSet!
static AndroidX.Collection.IntSetKt.EmptyIntSet() -> AndroidX.Collection.IntSet!
static AndroidX.Collection.IntSetKt.GetEmptyIntArray() -> int[]!
static AndroidX.Collection.IntSetKt.IntSetOf() -> AndroidX.Collection.IntSet!
static AndroidX.Collection.IntSetKt.IntSetOf(int element1) -> AndroidX.Collection.IntSet!
static AndroidX.Collection.IntSetKt.IntSetOf(int element1, int element2) -> AndroidX.Collection.IntSet!
static AndroidX.Collection.IntSetKt.IntSetOf(int element1, int element2, int element3) -> AndroidX.Collection.IntSet!
static AndroidX.Collection.IntSetKt.IntSetOf(params int[]! elements) -> AndroidX.Collection.IntSet!
static AndroidX.Collection.IntSetKt.MutableIntSetOf() -> AndroidX.Collection.MutableIntSet!
static AndroidX.Collection.IntSetKt.MutableIntSetOf(int element1) -> AndroidX.Collection.MutableIntSet!
static AndroidX.Collection.IntSetKt.MutableIntSetOf(int element1, int element2) -> AndroidX.Collection.MutableIntSet!
static AndroidX.Collection.IntSetKt.MutableIntSetOf(int element1, int element2, int element3) -> AndroidX.Collection.MutableIntSet!
static AndroidX.Collection.IntSetKt.MutableIntSetOf(params int[]! elements) -> AndroidX.Collection.MutableIntSet!
static AndroidX.Collection.LongFloatMapKt.BuildLongFloatMap(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.LongFloatMap!
static AndroidX.Collection.LongFloatMapKt.BuildLongFloatMap(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.LongFloatMap!
static AndroidX.Collection.LongFloatMapKt.EmptyLongFloatMap() -> AndroidX.Collection.LongFloatMap!
static AndroidX.Collection.LongFloatMapKt.LongFloatMapOf() -> AndroidX.Collection.LongFloatMap!
static AndroidX.Collection.LongFloatMapKt.LongFloatMapOf(long key1, float value1) -> AndroidX.Collection.LongFloatMap!
static AndroidX.Collection.LongFloatMapKt.LongFloatMapOf(long key1, float value1, long key2, float value2) -> AndroidX.Collection.LongFloatMap!
static AndroidX.Collection.LongFloatMapKt.LongFloatMapOf(long key1, float value1, long key2, float value2, long key3, float value3) -> AndroidX.Collection.LongFloatMap!
static AndroidX.Collection.LongFloatMapKt.LongFloatMapOf(long key1, float value1, long key2, float value2, long key3, float value3, long key4, float value4) -> AndroidX.Collection.LongFloatMap!
static AndroidX.Collection.LongFloatMapKt.LongFloatMapOf(long key1, float value1, long key2, float value2, long key3, float value3, long key4, float value4, long key5, float value5) -> AndroidX.Collection.LongFloatMap!
static AndroidX.Collection.LongFloatMapKt.MutableLongFloatMapOf() -> AndroidX.Collection.MutableLongFloatMap!
static AndroidX.Collection.LongFloatMapKt.MutableLongFloatMapOf(long key1, float value1) -> AndroidX.Collection.MutableLongFloatMap!
static AndroidX.Collection.LongFloatMapKt.MutableLongFloatMapOf(long key1, float value1, long key2, float value2) -> AndroidX.Collection.MutableLongFloatMap!
static AndroidX.Collection.LongFloatMapKt.MutableLongFloatMapOf(long key1, float value1, long key2, float value2, long key3, float value3) -> AndroidX.Collection.MutableLongFloatMap!
static AndroidX.Collection.LongFloatMapKt.MutableLongFloatMapOf(long key1, float value1, long key2, float value2, long key3, float value3, long key4, float value4) -> AndroidX.Collection.MutableLongFloatMap!
static AndroidX.Collection.LongFloatMapKt.MutableLongFloatMapOf(long key1, float value1, long key2, float value2, long key3, float value3, long key4, float value4, long key5, float value5) -> AndroidX.Collection.MutableLongFloatMap!
static AndroidX.Collection.LongIntMapKt.BuildLongIntMap(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.LongIntMap!
static AndroidX.Collection.LongIntMapKt.BuildLongIntMap(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.LongIntMap!
static AndroidX.Collection.LongIntMapKt.EmptyLongIntMap() -> AndroidX.Collection.LongIntMap!
static AndroidX.Collection.LongIntMapKt.LongIntMapOf() -> AndroidX.Collection.LongIntMap!
static AndroidX.Collection.LongIntMapKt.LongIntMapOf(long key1, int value1) -> AndroidX.Collection.LongIntMap!
static AndroidX.Collection.LongIntMapKt.LongIntMapOf(long key1, int value1, long key2, int value2) -> AndroidX.Collection.LongIntMap!
static AndroidX.Collection.LongIntMapKt.LongIntMapOf(long key1, int value1, long key2, int value2, long key3, int value3) -> AndroidX.Collection.LongIntMap!
static AndroidX.Collection.LongIntMapKt.LongIntMapOf(long key1, int value1, long key2, int value2, long key3, int value3, long key4, int value4) -> AndroidX.Collection.LongIntMap!
static AndroidX.Collection.LongIntMapKt.LongIntMapOf(long key1, int value1, long key2, int value2, long key3, int value3, long key4, int value4, long key5, int value5) -> AndroidX.Collection.LongIntMap!
static AndroidX.Collection.LongIntMapKt.MutableLongIntMapOf() -> AndroidX.Collection.MutableLongIntMap!
static AndroidX.Collection.LongIntMapKt.MutableLongIntMapOf(long key1, int value1) -> AndroidX.Collection.MutableLongIntMap!
static AndroidX.Collection.LongIntMapKt.MutableLongIntMapOf(long key1, int value1, long key2, int value2) -> AndroidX.Collection.MutableLongIntMap!
static AndroidX.Collection.LongIntMapKt.MutableLongIntMapOf(long key1, int value1, long key2, int value2, long key3, int value3) -> AndroidX.Collection.MutableLongIntMap!
static AndroidX.Collection.LongIntMapKt.MutableLongIntMapOf(long key1, int value1, long key2, int value2, long key3, int value3, long key4, int value4) -> AndroidX.Collection.MutableLongIntMap!
static AndroidX.Collection.LongIntMapKt.MutableLongIntMapOf(long key1, int value1, long key2, int value2, long key3, int value3, long key4, int value4, long key5, int value5) -> AndroidX.Collection.MutableLongIntMap!
static AndroidX.Collection.LongListKt.BuildLongList(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.LongList!
static AndroidX.Collection.LongListKt.BuildLongList(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.LongList!
static AndroidX.Collection.LongListKt.EmptyLongList() -> AndroidX.Collection.LongList!
static AndroidX.Collection.LongListKt.LongListOf() -> AndroidX.Collection.LongList!
static AndroidX.Collection.LongListKt.LongListOf(long element1) -> AndroidX.Collection.LongList!
static AndroidX.Collection.LongListKt.LongListOf(long element1, long element2) -> AndroidX.Collection.LongList!
static AndroidX.Collection.LongListKt.LongListOf(long element1, long element2, long element3) -> AndroidX.Collection.LongList!
static AndroidX.Collection.LongListKt.LongListOf(params long[]! elements) -> AndroidX.Collection.LongList!
static AndroidX.Collection.LongListKt.MutableLongListOf() -> AndroidX.Collection.MutableLongList!
static AndroidX.Collection.LongListKt.MutableLongListOf(long element1) -> AndroidX.Collection.MutableLongList!
static AndroidX.Collection.LongListKt.MutableLongListOf(long element1, long element2) -> AndroidX.Collection.MutableLongList!
static AndroidX.Collection.LongListKt.MutableLongListOf(long element1, long element2, long element3) -> AndroidX.Collection.MutableLongList!
static AndroidX.Collection.LongListKt.MutableLongListOf(params long[]! elements) -> AndroidX.Collection.MutableLongList!
static AndroidX.Collection.LongLongMapKt.BuildLongLongMap(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.LongLongMap!
static AndroidX.Collection.LongLongMapKt.BuildLongLongMap(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.LongLongMap!
static AndroidX.Collection.LongLongMapKt.EmptyLongLongMap() -> AndroidX.Collection.LongLongMap!
static AndroidX.Collection.LongLongMapKt.LongLongMapOf() -> AndroidX.Collection.LongLongMap!
static AndroidX.Collection.LongLongMapKt.LongLongMapOf(long key1, long value1) -> AndroidX.Collection.LongLongMap!
static AndroidX.Collection.LongLongMapKt.LongLongMapOf(long key1, long value1, long key2, long value2) -> AndroidX.Collection.LongLongMap!
static AndroidX.Collection.LongLongMapKt.LongLongMapOf(long key1, long value1, long key2, long value2, long key3, long value3) -> AndroidX.Collection.LongLongMap!
static AndroidX.Collection.LongLongMapKt.LongLongMapOf(long key1, long value1, long key2, long value2, long key3, long value3, long key4, long value4) -> AndroidX.Collection.LongLongMap!
static AndroidX.Collection.LongLongMapKt.LongLongMapOf(long key1, long value1, long key2, long value2, long key3, long value3, long key4, long value4, long key5, long value5) -> AndroidX.Collection.LongLongMap!
static AndroidX.Collection.LongLongMapKt.MutableLongLongMapOf() -> AndroidX.Collection.MutableLongLongMap!
static AndroidX.Collection.LongLongMapKt.MutableLongLongMapOf(long key1, long value1) -> AndroidX.Collection.MutableLongLongMap!
static AndroidX.Collection.LongLongMapKt.MutableLongLongMapOf(long key1, long value1, long key2, long value2) -> AndroidX.Collection.MutableLongLongMap!
static AndroidX.Collection.LongLongMapKt.MutableLongLongMapOf(long key1, long value1, long key2, long value2, long key3, long value3) -> AndroidX.Collection.MutableLongLongMap!
static AndroidX.Collection.LongLongMapKt.MutableLongLongMapOf(long key1, long value1, long key2, long value2, long key3, long value3, long key4, long value4) -> AndroidX.Collection.MutableLongLongMap!
static AndroidX.Collection.LongLongMapKt.MutableLongLongMapOf(long key1, long value1, long key2, long value2, long key3, long value3, long key4, long value4, long key5, long value5) -> AndroidX.Collection.MutableLongLongMap!
static AndroidX.Collection.LongObjectMapKt.BuildLongObjectMap(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.LongObjectMap!
static AndroidX.Collection.LongObjectMapKt.BuildLongObjectMap(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.LongObjectMap!
static AndroidX.Collection.LongObjectMapKt.EmptyLongObjectMap() -> AndroidX.Collection.LongObjectMap!
static AndroidX.Collection.LongObjectMapKt.LongObjectMapOf() -> AndroidX.Collection.LongObjectMap!
static AndroidX.Collection.LongObjectMapKt.LongObjectMapOf(long key1, Java.Lang.Object? value1) -> AndroidX.Collection.LongObjectMap!
static AndroidX.Collection.LongObjectMapKt.LongObjectMapOf(long key1, Java.Lang.Object? value1, long key2, Java.Lang.Object? value2) -> AndroidX.Collection.LongObjectMap!
static AndroidX.Collection.LongObjectMapKt.LongObjectMapOf(long key1, Java.Lang.Object? value1, long key2, Java.Lang.Object? value2, long key3, Java.Lang.Object? value3) -> AndroidX.Collection.LongObjectMap!
static AndroidX.Collection.LongObjectMapKt.LongObjectMapOf(long key1, Java.Lang.Object? value1, long key2, Java.Lang.Object? value2, long key3, Java.Lang.Object? value3, long key4, Java.Lang.Object? value4) -> AndroidX.Collection.LongObjectMap!
static AndroidX.Collection.LongObjectMapKt.LongObjectMapOf(long key1, Java.Lang.Object? value1, long key2, Java.Lang.Object? value2, long key3, Java.Lang.Object? value3, long key4, Java.Lang.Object? value4, long key5, Java.Lang.Object? value5) -> AndroidX.Collection.LongObjectMap!
static AndroidX.Collection.LongObjectMapKt.MutableLongObjectMapOf() -> AndroidX.Collection.MutableLongObjectMap!
static AndroidX.Collection.LongObjectMapKt.MutableLongObjectMapOf(long key1, Java.Lang.Object? value1) -> AndroidX.Collection.MutableLongObjectMap!
static AndroidX.Collection.LongObjectMapKt.MutableLongObjectMapOf(long key1, Java.Lang.Object? value1, long key2, Java.Lang.Object? value2) -> AndroidX.Collection.MutableLongObjectMap!
static AndroidX.Collection.LongObjectMapKt.MutableLongObjectMapOf(long key1, Java.Lang.Object? value1, long key2, Java.Lang.Object? value2, long key3, Java.Lang.Object? value3) -> AndroidX.Collection.MutableLongObjectMap!
static AndroidX.Collection.LongObjectMapKt.MutableLongObjectMapOf(long key1, Java.Lang.Object? value1, long key2, Java.Lang.Object? value2, long key3, Java.Lang.Object? value3, long key4, Java.Lang.Object? value4) -> AndroidX.Collection.MutableLongObjectMap!
static AndroidX.Collection.LongObjectMapKt.MutableLongObjectMapOf(long key1, Java.Lang.Object? value1, long key2, Java.Lang.Object? value2, long key3, Java.Lang.Object? value3, long key4, Java.Lang.Object? value4, long key5, Java.Lang.Object? value5) -> AndroidX.Collection.MutableLongObjectMap!
static AndroidX.Collection.LongSetKt.BuildLongSet(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.LongSet!
static AndroidX.Collection.LongSetKt.BuildLongSet(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.LongSet!
static AndroidX.Collection.LongSetKt.EmptyLongSet() -> AndroidX.Collection.LongSet!
static AndroidX.Collection.LongSetKt.GetEmptyLongArray() -> long[]!
static AndroidX.Collection.LongSetKt.LongSetOf() -> AndroidX.Collection.LongSet!
static AndroidX.Collection.LongSetKt.LongSetOf(long element1) -> AndroidX.Collection.LongSet!
static AndroidX.Collection.LongSetKt.LongSetOf(long element1, long element2) -> AndroidX.Collection.LongSet!
static AndroidX.Collection.LongSetKt.LongSetOf(long element1, long element2, long element3) -> AndroidX.Collection.LongSet!
static AndroidX.Collection.LongSetKt.LongSetOf(params long[]! elements) -> AndroidX.Collection.LongSet!
static AndroidX.Collection.LongSetKt.MutableLongSetOf() -> AndroidX.Collection.MutableLongSet!
static AndroidX.Collection.LongSetKt.MutableLongSetOf(long element1) -> AndroidX.Collection.MutableLongSet!
static AndroidX.Collection.LongSetKt.MutableLongSetOf(long element1, long element2) -> AndroidX.Collection.MutableLongSet!
static AndroidX.Collection.LongSetKt.MutableLongSetOf(long element1, long element2, long element3) -> AndroidX.Collection.MutableLongSet!
static AndroidX.Collection.LongSetKt.MutableLongSetOf(params long[]! elements) -> AndroidX.Collection.MutableLongSet!
static AndroidX.Collection.LongSparseArrayKt.Contains(AndroidX.Collection.LongSparseArray! obj, long key) -> bool
static AndroidX.Collection.LongSparseArrayKt.ForEach(AndroidX.Collection.LongSparseArray! obj, Kotlin.Jvm.Functions.IFunction2! action) -> void
static AndroidX.Collection.LongSparseArrayKt.GetOrDefault(AndroidX.Collection.LongSparseArray! obj, long key, Java.Lang.Object? defaultValue) -> Java.Lang.Object?
static AndroidX.Collection.LongSparseArrayKt.GetOrElse(AndroidX.Collection.LongSparseArray! obj, long key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> Java.Lang.Object?
static AndroidX.Collection.LongSparseArrayKt.GetSize(AndroidX.Collection.LongSparseArray! obj) -> int
static AndroidX.Collection.LongSparseArrayKt.IsNotEmpty(AndroidX.Collection.LongSparseArray! obj) -> bool
static AndroidX.Collection.LongSparseArrayKt.KeyIterator(AndroidX.Collection.LongSparseArray! obj) -> Kotlin.Collections.LongIterator!
static AndroidX.Collection.LongSparseArrayKt.Plus(AndroidX.Collection.LongSparseArray! obj, AndroidX.Collection.LongSparseArray! other) -> AndroidX.Collection.LongSparseArray!
static AndroidX.Collection.LongSparseArrayKt.Set(AndroidX.Collection.LongSparseArray! obj, long key, Java.Lang.Object? value) -> void
static AndroidX.Collection.LongSparseArrayKt.ValueIterator(AndroidX.Collection.LongSparseArray! obj) -> Java.Util.IIterator!
static AndroidX.Collection.LruCacheKt.LruCache(int maxSize, Kotlin.Jvm.Functions.IFunction2! sizeOf, Kotlin.Jvm.Functions.IFunction1! create, Kotlin.Jvm.Functions.IFunction4! onEntryRemoved) -> AndroidX.Collection.LruCache!
static AndroidX.Collection.ObjectFloatMapKt.BuildObjectFloatMap(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.ObjectFloatMap!
static AndroidX.Collection.ObjectFloatMapKt.BuildObjectFloatMap(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.ObjectFloatMap!
static AndroidX.Collection.ObjectFloatMapKt.EmptyObjectFloatMap() -> AndroidX.Collection.ObjectFloatMap!
static AndroidX.Collection.ObjectFloatMapKt.MutableObjectFloatMapOf() -> AndroidX.Collection.MutableObjectFloatMap!
static AndroidX.Collection.ObjectFloatMapKt.MutableObjectFloatMapOf(Java.Lang.Object? key1, float value1) -> AndroidX.Collection.MutableObjectFloatMap!
static AndroidX.Collection.ObjectFloatMapKt.MutableObjectFloatMapOf(Java.Lang.Object? key1, float value1, Java.Lang.Object? key2, float value2) -> AndroidX.Collection.MutableObjectFloatMap!
static AndroidX.Collection.ObjectFloatMapKt.MutableObjectFloatMapOf(Java.Lang.Object? key1, float value1, Java.Lang.Object? key2, float value2, Java.Lang.Object? key3, float value3) -> AndroidX.Collection.MutableObjectFloatMap!
static AndroidX.Collection.ObjectFloatMapKt.MutableObjectFloatMapOf(Java.Lang.Object? key1, float value1, Java.Lang.Object? key2, float value2, Java.Lang.Object? key3, float value3, Java.Lang.Object? key4, float value4) -> AndroidX.Collection.MutableObjectFloatMap!
static AndroidX.Collection.ObjectFloatMapKt.MutableObjectFloatMapOf(Java.Lang.Object? key1, float value1, Java.Lang.Object? key2, float value2, Java.Lang.Object? key3, float value3, Java.Lang.Object? key4, float value4, Java.Lang.Object? key5, float value5) -> AndroidX.Collection.MutableObjectFloatMap!
static AndroidX.Collection.ObjectFloatMapKt.ObjectFloatMap() -> AndroidX.Collection.ObjectFloatMap!
static AndroidX.Collection.ObjectFloatMapKt.ObjectFloatMapOf(Java.Lang.Object? key1, float value1) -> AndroidX.Collection.ObjectFloatMap!
static AndroidX.Collection.ObjectFloatMapKt.ObjectFloatMapOf(Java.Lang.Object? key1, float value1, Java.Lang.Object? key2, float value2) -> AndroidX.Collection.ObjectFloatMap!
static AndroidX.Collection.ObjectFloatMapKt.ObjectFloatMapOf(Java.Lang.Object? key1, float value1, Java.Lang.Object? key2, float value2, Java.Lang.Object? key3, float value3) -> AndroidX.Collection.ObjectFloatMap!
static AndroidX.Collection.ObjectFloatMapKt.ObjectFloatMapOf(Java.Lang.Object? key1, float value1, Java.Lang.Object? key2, float value2, Java.Lang.Object? key3, float value3, Java.Lang.Object? key4, float value4) -> AndroidX.Collection.ObjectFloatMap!
static AndroidX.Collection.ObjectFloatMapKt.ObjectFloatMapOf(Java.Lang.Object? key1, float value1, Java.Lang.Object? key2, float value2, Java.Lang.Object? key3, float value3, Java.Lang.Object? key4, float value4, Java.Lang.Object? key5, float value5) -> AndroidX.Collection.ObjectFloatMap!
static AndroidX.Collection.ObjectIntMapKt.BuildObjectIntMap(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.ObjectIntMap!
static AndroidX.Collection.ObjectIntMapKt.BuildObjectIntMap(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.ObjectIntMap!
static AndroidX.Collection.ObjectIntMapKt.EmptyObjectIntMap() -> AndroidX.Collection.ObjectIntMap!
static AndroidX.Collection.ObjectIntMapKt.MutableObjectIntMapOf() -> AndroidX.Collection.MutableObjectIntMap!
static AndroidX.Collection.ObjectIntMapKt.MutableObjectIntMapOf(Java.Lang.Object? key1, int value1) -> AndroidX.Collection.MutableObjectIntMap!
static AndroidX.Collection.ObjectIntMapKt.MutableObjectIntMapOf(Java.Lang.Object? key1, int value1, Java.Lang.Object? key2, int value2) -> AndroidX.Collection.MutableObjectIntMap!
static AndroidX.Collection.ObjectIntMapKt.MutableObjectIntMapOf(Java.Lang.Object? key1, int value1, Java.Lang.Object? key2, int value2, Java.Lang.Object? key3, int value3) -> AndroidX.Collection.MutableObjectIntMap!
static AndroidX.Collection.ObjectIntMapKt.MutableObjectIntMapOf(Java.Lang.Object? key1, int value1, Java.Lang.Object? key2, int value2, Java.Lang.Object? key3, int value3, Java.Lang.Object? key4, int value4) -> AndroidX.Collection.MutableObjectIntMap!
static AndroidX.Collection.ObjectIntMapKt.MutableObjectIntMapOf(Java.Lang.Object? key1, int value1, Java.Lang.Object? key2, int value2, Java.Lang.Object? key3, int value3, Java.Lang.Object? key4, int value4, Java.Lang.Object? key5, int value5) -> AndroidX.Collection.MutableObjectIntMap!
static AndroidX.Collection.ObjectIntMapKt.ObjectIntMap() -> AndroidX.Collection.ObjectIntMap!
static AndroidX.Collection.ObjectIntMapKt.ObjectIntMapOf(Java.Lang.Object? key1, int value1) -> AndroidX.Collection.ObjectIntMap!
static AndroidX.Collection.ObjectIntMapKt.ObjectIntMapOf(Java.Lang.Object? key1, int value1, Java.Lang.Object? key2, int value2) -> AndroidX.Collection.ObjectIntMap!
static AndroidX.Collection.ObjectIntMapKt.ObjectIntMapOf(Java.Lang.Object? key1, int value1, Java.Lang.Object? key2, int value2, Java.Lang.Object? key3, int value3) -> AndroidX.Collection.ObjectIntMap!
static AndroidX.Collection.ObjectIntMapKt.ObjectIntMapOf(Java.Lang.Object? key1, int value1, Java.Lang.Object? key2, int value2, Java.Lang.Object? key3, int value3, Java.Lang.Object? key4, int value4) -> AndroidX.Collection.ObjectIntMap!
static AndroidX.Collection.ObjectIntMapKt.ObjectIntMapOf(Java.Lang.Object? key1, int value1, Java.Lang.Object? key2, int value2, Java.Lang.Object? key3, int value3, Java.Lang.Object? key4, int value4, Java.Lang.Object? key5, int value5) -> AndroidX.Collection.ObjectIntMap!
static AndroidX.Collection.ObjectListKt.EmptyObjectList() -> AndroidX.Collection.ObjectList!
static AndroidX.Collection.ObjectListKt.MutableObjectListOf() -> AndroidX.Collection.MutableObjectList!
static AndroidX.Collection.ObjectListKt.MutableObjectListOf(Java.Lang.Object? element1) -> AndroidX.Collection.MutableObjectList!
static AndroidX.Collection.ObjectListKt.MutableObjectListOf(Java.Lang.Object? element1, Java.Lang.Object? element2) -> AndroidX.Collection.MutableObjectList!
static AndroidX.Collection.ObjectListKt.MutableObjectListOf(Java.Lang.Object? element1, Java.Lang.Object? element2, Java.Lang.Object? element3) -> AndroidX.Collection.MutableObjectList!
static AndroidX.Collection.ObjectListKt.MutableObjectListOf(params Java.Lang.Object![]! elements) -> AndroidX.Collection.MutableObjectList!
static AndroidX.Collection.ObjectListKt.ObjectListOf() -> AndroidX.Collection.ObjectList!
static AndroidX.Collection.ObjectListKt.ObjectListOf(Java.Lang.Object? element1) -> AndroidX.Collection.ObjectList!
static AndroidX.Collection.ObjectListKt.ObjectListOf(Java.Lang.Object? element1, Java.Lang.Object? element2) -> AndroidX.Collection.ObjectList!
static AndroidX.Collection.ObjectListKt.ObjectListOf(Java.Lang.Object? element1, Java.Lang.Object? element2, Java.Lang.Object? element3) -> AndroidX.Collection.ObjectList!
static AndroidX.Collection.ObjectListKt.ObjectListOf(params Java.Lang.Object![]! elements) -> AndroidX.Collection.ObjectList!
static AndroidX.Collection.ObjectLongMapKt.BuildObjectLongMap(Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.ObjectLongMap!
static AndroidX.Collection.ObjectLongMapKt.BuildObjectLongMap(int initialCapacity, Kotlin.Jvm.Functions.IFunction1! builderAction) -> AndroidX.Collection.ObjectLongMap!
static AndroidX.Collection.ObjectLongMapKt.EmptyObjectLongMap() -> AndroidX.Collection.ObjectLongMap!
static AndroidX.Collection.ObjectLongMapKt.MutableObjectLongMapOf() -> AndroidX.Collection.MutableObjectLongMap!
static AndroidX.Collection.ObjectLongMapKt.MutableObjectLongMapOf(Java.Lang.Object? key1, long value1) -> AndroidX.Collection.MutableObjectLongMap!
static AndroidX.Collection.ObjectLongMapKt.MutableObjectLongMapOf(Java.Lang.Object? key1, long value1, Java.Lang.Object? key2, long value2) -> AndroidX.Collection.MutableObjectLongMap!
static AndroidX.Collection.ObjectLongMapKt.MutableObjectLongMapOf(Java.Lang.Object? key1, long value1, Java.Lang.Object? key2, long value2, Java.Lang.Object? key3, long value3) -> AndroidX.Collection.MutableObjectLongMap!
static AndroidX.Collection.ObjectLongMapKt.MutableObjectLongMapOf(Java.Lang.Object? key1, long value1, Java.Lang.Object? key2, long value2, Java.Lang.Object? key3, long value3, Java.Lang.Object? key4, long value4) -> AndroidX.Collection.MutableObjectLongMap!
static AndroidX.Collection.ObjectLongMapKt.MutableObjectLongMapOf(Java.Lang.Object? key1, long value1, Java.Lang.Object? key2, long value2, Java.Lang.Object? key3, long value3, Java.Lang.Object? key4, long value4, Java.Lang.Object? key5, long value5) -> AndroidX.Collection.MutableObjectLongMap!
static AndroidX.Collection.ObjectLongMapKt.ObjectLongMap() -> AndroidX.Collection.ObjectLongMap!
static AndroidX.Collection.ObjectLongMapKt.ObjectLongMapOf(Java.Lang.Object? key1, long value1) -> AndroidX.Collection.ObjectLongMap!
static AndroidX.Collection.ObjectLongMapKt.ObjectLongMapOf(Java.Lang.Object? key1, long value1, Java.Lang.Object? key2, long value2) -> AndroidX.Collection.ObjectLongMap!
static AndroidX.Collection.ObjectLongMapKt.ObjectLongMapOf(Java.Lang.Object? key1, long value1, Java.Lang.Object? key2, long value2, Java.Lang.Object? key3, long value3) -> AndroidX.Collection.ObjectLongMap!
static AndroidX.Collection.ObjectLongMapKt.ObjectLongMapOf(Java.Lang.Object? key1, long value1, Java.Lang.Object? key2, long value2, Java.Lang.Object? key3, long value3, Java.Lang.Object? key4, long value4) -> AndroidX.Collection.ObjectLongMap!
static AndroidX.Collection.ObjectLongMapKt.ObjectLongMapOf(Java.Lang.Object? key1, long value1, Java.Lang.Object? key2, long value2, Java.Lang.Object? key3, long value3, Java.Lang.Object? key4, long value4, Java.Lang.Object? key5, long value5) -> AndroidX.Collection.ObjectLongMap!
static AndroidX.Collection.OrderedScatterSetKt.EmptyOrderedScatterSet() -> AndroidX.Collection.OrderedScatterSet!
static AndroidX.Collection.OrderedScatterSetKt.MutableOrderedScatterSetOf() -> AndroidX.Collection.MutableOrderedScatterSet!
static AndroidX.Collection.OrderedScatterSetKt.MutableOrderedScatterSetOf(Java.Lang.Object? element1) -> AndroidX.Collection.MutableOrderedScatterSet!
static AndroidX.Collection.OrderedScatterSetKt.MutableOrderedScatterSetOf(Java.Lang.Object? element1, Java.Lang.Object? element2) -> AndroidX.Collection.MutableOrderedScatterSet!
static AndroidX.Collection.OrderedScatterSetKt.MutableOrderedScatterSetOf(Java.Lang.Object? element1, Java.Lang.Object? element2, Java.Lang.Object? element3) -> AndroidX.Collection.MutableOrderedScatterSet!
static AndroidX.Collection.OrderedScatterSetKt.MutableOrderedScatterSetOf(params Java.Lang.Object![]! elements) -> AndroidX.Collection.MutableOrderedScatterSet!
static AndroidX.Collection.OrderedScatterSetKt.OrderedScatterSetOf() -> AndroidX.Collection.OrderedScatterSet!
static AndroidX.Collection.OrderedScatterSetKt.OrderedScatterSetOf(Java.Lang.Object? element1) -> AndroidX.Collection.OrderedScatterSet!
static AndroidX.Collection.OrderedScatterSetKt.OrderedScatterSetOf(Java.Lang.Object? element1, Java.Lang.Object? element2) -> AndroidX.Collection.OrderedScatterSet!
static AndroidX.Collection.OrderedScatterSetKt.OrderedScatterSetOf(Java.Lang.Object? element1, Java.Lang.Object? element2, Java.Lang.Object? element3) -> AndroidX.Collection.OrderedScatterSet!
static AndroidX.Collection.OrderedScatterSetKt.OrderedScatterSetOf(params Java.Lang.Object![]! elements) -> AndroidX.Collection.OrderedScatterSet!
static AndroidX.Collection.ScatterMapKt.EmptyScatterMap() -> AndroidX.Collection.ScatterMap!
static AndroidX.Collection.ScatterMapKt.MutableScatterMapOf() -> AndroidX.Collection.MutableScatterMap!
static AndroidX.Collection.ScatterMapKt.MutableScatterMapOf(params Kotlin.Pair![]! pairs) -> AndroidX.Collection.MutableScatterMap!
static AndroidX.Collection.ScatterSetKt.EmptyScatterSet() -> AndroidX.Collection.ScatterSet!
static AndroidX.Collection.ScatterSetKt.MutableScatterSetOf() -> AndroidX.Collection.MutableScatterSet!
static AndroidX.Collection.ScatterSetKt.MutableScatterSetOf(Java.Lang.Object? element1) -> AndroidX.Collection.MutableScatterSet!
static AndroidX.Collection.ScatterSetKt.MutableScatterSetOf(Java.Lang.Object? element1, Java.Lang.Object? element2) -> AndroidX.Collection.MutableScatterSet!
static AndroidX.Collection.ScatterSetKt.MutableScatterSetOf(Java.Lang.Object? element1, Java.Lang.Object? element2, Java.Lang.Object? element3) -> AndroidX.Collection.MutableScatterSet!
static AndroidX.Collection.ScatterSetKt.MutableScatterSetOf(params Java.Lang.Object![]! elements) -> AndroidX.Collection.MutableScatterSet!
static AndroidX.Collection.ScatterSetKt.ScatterSetOf() -> AndroidX.Collection.ScatterSet!
static AndroidX.Collection.ScatterSetKt.ScatterSetOf(Java.Lang.Object? element1) -> AndroidX.Collection.ScatterSet!
static AndroidX.Collection.ScatterSetKt.ScatterSetOf(Java.Lang.Object? element1, Java.Lang.Object? element2) -> AndroidX.Collection.ScatterSet!
static AndroidX.Collection.ScatterSetKt.ScatterSetOf(Java.Lang.Object? element1, Java.Lang.Object? element2, Java.Lang.Object? element3) -> AndroidX.Collection.ScatterSet!
static AndroidX.Collection.ScatterSetKt.ScatterSetOf(params Java.Lang.Object![]! elements) -> AndroidX.Collection.ScatterSet!
static AndroidX.Collection.SieveCacheKt.GetDst(long obj) -> int
static AndroidX.Collection.SieveCacheKt.GetEmptyNodes() -> long[]!
static AndroidX.Collection.SieveCacheKt.GetNextNode(long obj) -> int
static AndroidX.Collection.SieveCacheKt.GetPreviousNode(long obj) -> int
static AndroidX.Collection.SieveCacheKt.GetSrc(long obj) -> int
static AndroidX.Collection.SieveCacheKt.GetVisited(long obj) -> int
static AndroidX.Collection.SparseArrayKt.Contains(AndroidX.Collection.SparseArrayCompat! obj, int key) -> bool
static AndroidX.Collection.SparseArrayKt.ForEach(AndroidX.Collection.SparseArrayCompat! obj, Kotlin.Jvm.Functions.IFunction2! action) -> void
static AndroidX.Collection.SparseArrayKt.GetOrDefault(AndroidX.Collection.SparseArrayCompat! obj, int key, Java.Lang.Object? defaultValue) -> Java.Lang.Object?
static AndroidX.Collection.SparseArrayKt.GetOrElse(AndroidX.Collection.SparseArrayCompat! obj, int key, Kotlin.Jvm.Functions.IFunction0! defaultValue) -> Java.Lang.Object?
static AndroidX.Collection.SparseArrayKt.GetSize(AndroidX.Collection.SparseArrayCompat! obj) -> int
static AndroidX.Collection.SparseArrayKt.IsNotEmpty(AndroidX.Collection.SparseArrayCompat! obj) -> bool
static AndroidX.Collection.SparseArrayKt.KeyIterator(AndroidX.Collection.SparseArrayCompat! obj) -> Kotlin.Collections.IntIterator!
static AndroidX.Collection.SparseArrayKt.Plus(AndroidX.Collection.SparseArrayCompat! obj, AndroidX.Collection.SparseArrayCompat! other) -> AndroidX.Collection.SparseArrayCompat!
static AndroidX.Collection.SparseArrayKt.Set(AndroidX.Collection.SparseArrayCompat! obj, int key, Java.Lang.Object? value) -> void
static AndroidX.Collection.SparseArrayKt.ValueIterator(AndroidX.Collection.SparseArrayCompat! obj) -> Java.Util.IIterator!
virtual AndroidX.Collection.ArrayMap.ContainsAll(System.Collections.Generic.ICollection<object!>! collection) -> bool
virtual AndroidX.Collection.ArrayMap.KeySet() -> System.Collections.ICollection!
virtual AndroidX.Collection.ArrayMap.PutAll(System.Collections.IDictionary! map) -> void
virtual AndroidX.Collection.ArrayMap.RemoveAll(System.Collections.Generic.ICollection<object!>! collection) -> bool
virtual AndroidX.Collection.ArrayMap.RetainAll(System.Collections.Generic.ICollection<object!>! collection) -> bool
virtual AndroidX.Collection.ArrayMap.Values() -> System.Collections.ICollection!
virtual AndroidX.Collection.ArrayMap._EntrySet() -> System.Collections.Generic.ICollection<Java.Util.IMapEntry!>!
virtual AndroidX.Collection.LongSparseArray.Append(long key, Java.Lang.Object? value) -> void
virtual AndroidX.Collection.LongSparseArray.Clear() -> void
virtual AndroidX.Collection.LongSparseArray.Clone() -> AndroidX.Collection.LongSparseArray!
virtual AndroidX.Collection.LongSparseArray.ContainsKey(long key) -> bool
virtual AndroidX.Collection.LongSparseArray.ContainsValue(Java.Lang.Object? value) -> bool
virtual AndroidX.Collection.LongSparseArray.Delete(long key) -> void
virtual AndroidX.Collection.LongSparseArray.Get(long key) -> Java.Lang.Object?
virtual AndroidX.Collection.LongSparseArray.Get(long key, Java.Lang.Object? defaultValue) -> Java.Lang.Object?
virtual AndroidX.Collection.LongSparseArray.IndexOfKey(long key) -> int
virtual AndroidX.Collection.LongSparseArray.IndexOfValue(Java.Lang.Object? value) -> int
virtual AndroidX.Collection.LongSparseArray.IsEmpty.get -> bool
virtual AndroidX.Collection.LongSparseArray.KeyAt(int index) -> long
virtual AndroidX.Collection.LongSparseArray.Put(long key, Java.Lang.Object? value) -> void
virtual AndroidX.Collection.LongSparseArray.PutAll(AndroidX.Collection.LongSparseArray! other) -> void
virtual AndroidX.Collection.LongSparseArray.PutIfAbsent(long key, Java.Lang.Object? value) -> Java.Lang.Object?
virtual AndroidX.Collection.LongSparseArray.Remove(long key) -> void
virtual AndroidX.Collection.LongSparseArray.Remove(long key, Java.Lang.Object? value) -> bool
virtual AndroidX.Collection.LongSparseArray.RemoveAt(int index) -> void
virtual AndroidX.Collection.LongSparseArray.Replace(long key, Java.Lang.Object? oldValue, Java.Lang.Object? newValue) -> bool
virtual AndroidX.Collection.LongSparseArray.Replace(long key, Java.Lang.Object? value) -> Java.Lang.Object?
virtual AndroidX.Collection.LongSparseArray.SetValueAt(int index, Java.Lang.Object? value) -> void
virtual AndroidX.Collection.LongSparseArray.Size() -> int
virtual AndroidX.Collection.LongSparseArray.ValueAt(int index) -> Java.Lang.Object?
virtual AndroidX.Collection.LruCache.Create(Java.Lang.Object! key) -> Java.Lang.Object?
virtual AndroidX.Collection.LruCache.EntryRemoved(bool evicted, Java.Lang.Object! key, Java.Lang.Object! oldValue, Java.Lang.Object? newValue) -> void
virtual AndroidX.Collection.LruCache.Resize(int maxSize) -> void
virtual AndroidX.Collection.LruCache.SizeOf(Java.Lang.Object! key, Java.Lang.Object! value) -> int
virtual AndroidX.Collection.LruCache.TrimToSize(int maxSize) -> void
virtual AndroidX.Collection.SimpleArrayMap.Clear() -> void
virtual AndroidX.Collection.SimpleArrayMap.ContainsKey(Java.Lang.Object? key) -> bool
virtual AndroidX.Collection.SimpleArrayMap.ContainsValue(Java.Lang.Object? value) -> bool
virtual AndroidX.Collection.SimpleArrayMap.EnsureCapacity(int minimumCapacity) -> void
virtual AndroidX.Collection.SimpleArrayMap.Get(Java.Lang.Object? key) -> Java.Lang.Object?
virtual AndroidX.Collection.SimpleArrayMap.GetOrDefault(Java.Lang.Object? key, Java.Lang.Object? defaultValue) -> Java.Lang.Object?
virtual AndroidX.Collection.SimpleArrayMap.IndexOfKey(Java.Lang.Object? key) -> int
virtual AndroidX.Collection.SimpleArrayMap.IsEmpty.get -> bool
virtual AndroidX.Collection.SimpleArrayMap.KeyAt(int index) -> Java.Lang.Object?
virtual AndroidX.Collection.SimpleArrayMap.Put(Java.Lang.Object? key, Java.Lang.Object? value) -> Java.Lang.Object?
virtual AndroidX.Collection.SimpleArrayMap.PutAll(AndroidX.Collection.SimpleArrayMap! map) -> void
virtual AndroidX.Collection.SimpleArrayMap.PutIfAbsent(Java.Lang.Object? key, Java.Lang.Object? value) -> Java.Lang.Object?
virtual AndroidX.Collection.SimpleArrayMap.Remove(Java.Lang.Object? key) -> Java.Lang.Object?
virtual AndroidX.Collection.SimpleArrayMap.Remove(Java.Lang.Object? key, Java.Lang.Object? value) -> bool
virtual AndroidX.Collection.SimpleArrayMap.RemoveAt(int index) -> Java.Lang.Object?
virtual AndroidX.Collection.SimpleArrayMap.Replace(Java.Lang.Object? key, Java.Lang.Object? oldValue, Java.Lang.Object? newValue) -> bool
virtual AndroidX.Collection.SimpleArrayMap.Replace(Java.Lang.Object? key, Java.Lang.Object? value) -> Java.Lang.Object?
virtual AndroidX.Collection.SimpleArrayMap.SetValueAt(int index, Java.Lang.Object? value) -> Java.Lang.Object?
virtual AndroidX.Collection.SimpleArrayMap.Size() -> int
virtual AndroidX.Collection.SimpleArrayMap.ValueAt(int index) -> Java.Lang.Object?
virtual AndroidX.Collection.SparseArrayCompat.Append(int key, Java.Lang.Object? value) -> void
virtual AndroidX.Collection.SparseArrayCompat.Clear() -> void
virtual AndroidX.Collection.SparseArrayCompat.Clone() -> AndroidX.Collection.SparseArrayCompat!
virtual AndroidX.Collection.SparseArrayCompat.ContainsKey(int key) -> bool
virtual AndroidX.Collection.SparseArrayCompat.ContainsValue(Java.Lang.Object? value) -> bool
virtual AndroidX.Collection.SparseArrayCompat.Delete(int key) -> void
virtual AndroidX.Collection.SparseArrayCompat.Get(int key) -> Java.Lang.Object?
virtual AndroidX.Collection.SparseArrayCompat.Get(int key, Java.Lang.Object? defaultValue) -> Java.Lang.Object?
virtual AndroidX.Collection.SparseArrayCompat.IndexOfKey(int key) -> int
virtual AndroidX.Collection.SparseArrayCompat.IndexOfValue(Java.Lang.Object? value) -> int
virtual AndroidX.Collection.SparseArrayCompat.IsEmpty.get -> bool
virtual AndroidX.Collection.SparseArrayCompat.KeyAt(int index) -> int
virtual AndroidX.Collection.SparseArrayCompat.Put(int key, Java.Lang.Object? value) -> void
virtual AndroidX.Collection.SparseArrayCompat.PutAll(AndroidX.Collection.SparseArrayCompat! other) -> void
virtual AndroidX.Collection.SparseArrayCompat.PutIfAbsent(int key, Java.Lang.Object? value) -> Java.Lang.Object?
virtual AndroidX.Collection.SparseArrayCompat.Remove(int key) -> void
virtual AndroidX.Collection.SparseArrayCompat.Remove(int key, Java.Lang.Object? value) -> bool
virtual AndroidX.Collection.SparseArrayCompat.RemoveAt(int index) -> void
virtual AndroidX.Collection.SparseArrayCompat.RemoveAtRange(int index, int size) -> void
virtual AndroidX.Collection.SparseArrayCompat.Replace(int key, Java.Lang.Object? oldValue, Java.Lang.Object? newValue) -> bool
virtual AndroidX.Collection.SparseArrayCompat.Replace(int key, Java.Lang.Object? value) -> Java.Lang.Object?
virtual AndroidX.Collection.SparseArrayCompat.SetValueAt(int index, Java.Lang.Object? value) -> void
virtual AndroidX.Collection.SparseArrayCompat.Size() -> int
virtual AndroidX.Collection.SparseArrayCompat.ValueAt(int index) -> Java.Lang.Object?
