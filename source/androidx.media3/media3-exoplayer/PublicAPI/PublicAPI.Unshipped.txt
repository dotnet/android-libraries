#nullable enable
AndroidX.Media3.ExoPlayer.AbstractConcatenatedTimeline
AndroidX.Media3.ExoPlayer.AbstractConcatenatedTimeline.AbstractConcatenatedTimeline(bool isAtomic, AndroidX.Media3.ExoPlayer.Source.IShuffleOrder? shuffleOrder) -> void
AndroidX.Media3.ExoPlayer.AbstractConcatenatedTimeline.AbstractConcatenatedTimeline(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Analytics.AdPlaybackStartedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.AdPlaybackStartedEventArgs.AdPlaybackStartedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? p0, string? p1, string? p2) -> void
AndroidX.Media3.ExoPlayer.Analytics.AdPlaybackStartedEventArgs.P0.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.AdPlaybackStartedEventArgs.P1.get -> string?
AndroidX.Media3.ExoPlayer.Analytics.AdPlaybackStartedEventArgs.P2.get -> string?
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.AnalyticsListenerEventTime(long realtimeMs, AndroidX.Media3.Common.Timeline? timeline, int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, long eventPlaybackPositionMs, AndroidX.Media3.Common.Timeline? currentTimeline, int currentWindowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? currentMediaPeriodId, long currentPlaybackPositionMs, long totalBufferedDurationMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.CurrentMediaPeriodId.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.CurrentMediaPeriodId.set -> void
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.CurrentPlaybackPositionMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.CurrentPlaybackPositionMs.set -> void
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.CurrentTimeline.get -> AndroidX.Media3.Common.Timeline?
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.CurrentTimeline.set -> void
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.CurrentWindowIndex.get -> int
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.CurrentWindowIndex.set -> void
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.EventPlaybackPositionMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.EventPlaybackPositionMs.set -> void
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.MediaPeriodId.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.MediaPeriodId.set -> void
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.RealtimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.RealtimeMs.set -> void
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.Timeline.get -> AndroidX.Media3.Common.Timeline?
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.Timeline.set -> void
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.TotalBufferedDurationMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.TotalBufferedDurationMs.set -> void
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.WindowIndex.get -> int
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.WindowIndex.set -> void
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEvents
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEvents.AnalyticsListenerEvents(AndroidX.Media3.Common.FlagSet? flags, Android.Util.SparseArray? eventTimes) -> void
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEvents.Contains(int e) -> bool
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEvents.ContainsAny(params int[]? events) -> bool
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEvents.Get(int index) -> int
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEvents.GetEventTime(int e) -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEvents.Size() -> int
AndroidX.Media3.ExoPlayer.Analytics.AudioAttributesChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.AudioAttributesChangedEventArgs.AudioAttributes.get -> AndroidX.Media3.Common.AudioAttributes?
AndroidX.Media3.ExoPlayer.Analytics.AudioAttributesChangedEventArgs.AudioAttributesChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.AudioAttributes? audioAttributes) -> void
AndroidX.Media3.ExoPlayer.Analytics.AudioAttributesChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.AudioCodecErrorEventArgs
AndroidX.Media3.ExoPlayer.Analytics.AudioCodecErrorEventArgs.AudioCodecError.get -> Java.Lang.Exception?
AndroidX.Media3.ExoPlayer.Analytics.AudioCodecErrorEventArgs.AudioCodecErrorEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, Java.Lang.Exception? audioCodecError) -> void
AndroidX.Media3.ExoPlayer.Analytics.AudioCodecErrorEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.AudioDecoderInitializedDeprecatedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.AudioDecoderInitializedDeprecatedEventArgs.AudioDecoderInitializedDeprecatedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? decoderName, long initializationDurationMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.AudioDecoderInitializedDeprecatedEventArgs.DecoderName.get -> string?
AndroidX.Media3.ExoPlayer.Analytics.AudioDecoderInitializedDeprecatedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.AudioDecoderInitializedDeprecatedEventArgs.InitializationDurationMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.AudioDecoderInitializedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.AudioDecoderInitializedEventArgs.AudioDecoderInitializedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? decoderName, long initializedTimestampMs, long initializationDurationMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.AudioDecoderInitializedEventArgs.DecoderName.get -> string?
AndroidX.Media3.ExoPlayer.Analytics.AudioDecoderInitializedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.AudioDecoderInitializedEventArgs.InitializationDurationMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.AudioDecoderInitializedEventArgs.InitializedTimestampMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.AudioDecoderReleasedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.AudioDecoderReleasedEventArgs.AudioDecoderReleasedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? decoderName) -> void
AndroidX.Media3.ExoPlayer.Analytics.AudioDecoderReleasedEventArgs.DecoderName.get -> string?
AndroidX.Media3.ExoPlayer.Analytics.AudioDecoderReleasedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.AudioDisabledEventArgs
AndroidX.Media3.ExoPlayer.Analytics.AudioDisabledEventArgs.AudioDisabledEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.DecoderCounters? decoderCounters) -> void
AndroidX.Media3.ExoPlayer.Analytics.AudioDisabledEventArgs.DecoderCounters.get -> AndroidX.Media3.ExoPlayer.DecoderCounters?
AndroidX.Media3.ExoPlayer.Analytics.AudioDisabledEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.AudioEnabledEventArgs
AndroidX.Media3.ExoPlayer.Analytics.AudioEnabledEventArgs.AudioEnabledEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.DecoderCounters? decoderCounters) -> void
AndroidX.Media3.ExoPlayer.Analytics.AudioEnabledEventArgs.DecoderCounters.get -> AndroidX.Media3.ExoPlayer.DecoderCounters?
AndroidX.Media3.ExoPlayer.Analytics.AudioEnabledEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.AudioInputFormatChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.AudioInputFormatChangedEventArgs.AudioInputFormatChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.Format? format, AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation? decoderReuseEvaluation) -> void
AndroidX.Media3.ExoPlayer.Analytics.AudioInputFormatChangedEventArgs.DecoderReuseEvaluation.get -> AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation?
AndroidX.Media3.ExoPlayer.Analytics.AudioInputFormatChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.AudioInputFormatChangedEventArgs.Format.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.Analytics.AudioPositionAdvancingEventArgs
AndroidX.Media3.ExoPlayer.Analytics.AudioPositionAdvancingEventArgs.AudioPositionAdvancingEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, long playoutStartSystemTimeMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.AudioPositionAdvancingEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.AudioPositionAdvancingEventArgs.PlayoutStartSystemTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.AudioSessionIdChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.AudioSessionIdChangedEventArgs.AudioSessionId.get -> int
AndroidX.Media3.ExoPlayer.Analytics.AudioSessionIdChangedEventArgs.AudioSessionIdChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int audioSessionId) -> void
AndroidX.Media3.ExoPlayer.Analytics.AudioSessionIdChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.AudioSinkErrorEventArgs
AndroidX.Media3.ExoPlayer.Analytics.AudioSinkErrorEventArgs.AudioSinkError.get -> Java.Lang.Exception?
AndroidX.Media3.ExoPlayer.Analytics.AudioSinkErrorEventArgs.AudioSinkErrorEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, Java.Lang.Exception? audioSinkError) -> void
AndroidX.Media3.ExoPlayer.Analytics.AudioSinkErrorEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.AudioTrackInitializedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.AudioTrackInitializedEventArgs.AudioTrackConfig.get -> AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig?
AndroidX.Media3.ExoPlayer.Analytics.AudioTrackInitializedEventArgs.AudioTrackInitializedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? audioTrackConfig) -> void
AndroidX.Media3.ExoPlayer.Analytics.AudioTrackInitializedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.AudioTrackReleasedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.AudioTrackReleasedEventArgs.AudioTrackConfig.get -> AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig?
AndroidX.Media3.ExoPlayer.Analytics.AudioTrackReleasedEventArgs.AudioTrackReleasedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? audioTrackConfig) -> void
AndroidX.Media3.ExoPlayer.Analytics.AudioTrackReleasedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.AudioUnderrunEventArgs
AndroidX.Media3.ExoPlayer.Analytics.AudioUnderrunEventArgs.AudioUnderrunEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int bufferSize, long bufferSizeMs, long elapsedSinceLastFeedMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.AudioUnderrunEventArgs.BufferSize.get -> int
AndroidX.Media3.ExoPlayer.Analytics.AudioUnderrunEventArgs.BufferSizeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.AudioUnderrunEventArgs.ElapsedSinceLastFeedMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.AudioUnderrunEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.AvailableCommandsChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.AvailableCommandsChangedEventArgs.AvailableCommands.get -> AndroidX.Media3.Common.PlayerCommands?
AndroidX.Media3.ExoPlayer.Analytics.AvailableCommandsChangedEventArgs.AvailableCommandsChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.PlayerCommands? availableCommands) -> void
AndroidX.Media3.ExoPlayer.Analytics.AvailableCommandsChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.BandwidthEstimateEventArgs
AndroidX.Media3.ExoPlayer.Analytics.BandwidthEstimateEventArgs.BandwidthEstimateEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int totalLoadTimeMs, long totalBytesLoaded, long bitrateEstimate) -> void
AndroidX.Media3.ExoPlayer.Analytics.BandwidthEstimateEventArgs.BitrateEstimate.get -> long
AndroidX.Media3.ExoPlayer.Analytics.BandwidthEstimateEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.BandwidthEstimateEventArgs.TotalBytesLoaded.get -> long
AndroidX.Media3.ExoPlayer.Analytics.BandwidthEstimateEventArgs.TotalLoadTimeMs.get -> int
AndroidX.Media3.ExoPlayer.Analytics.CuesDeprecatedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.CuesDeprecatedEventArgs.Cues.get -> System.Collections.Generic.IList<AndroidX.Media3.Common.Text.Cue!>?
AndroidX.Media3.ExoPlayer.Analytics.CuesDeprecatedEventArgs.CuesDeprecatedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, System.Collections.Generic.IList<AndroidX.Media3.Common.Text.Cue!>? cues) -> void
AndroidX.Media3.ExoPlayer.Analytics.CuesDeprecatedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.CuesEventArgs
AndroidX.Media3.ExoPlayer.Analytics.CuesEventArgs.CueGroup.get -> AndroidX.Media3.Common.Text.CueGroup?
AndroidX.Media3.ExoPlayer.Analytics.CuesEventArgs.CuesEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.Text.CueGroup? cueGroup) -> void
AndroidX.Media3.ExoPlayer.Analytics.CuesEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.DefaultAnalyticsCollector(AndroidX.Media3.Common.Util.IClock? clock) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.DefaultAnalyticsCollector(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.GenerateCurrentPlayerMediaPeriodEventTime() -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.GenerateEventTime(AndroidX.Media3.Common.Timeline? timeline, int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.NotifySeekStarted() -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnAudioAttributesChanged(AndroidX.Media3.Common.AudioAttributes? audioAttributes) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnAudioCodecError(Java.Lang.Exception? audioCodecError) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnAudioDecoderInitialized(string? decoderName, long initializedTimestampMs, long initializationDurationMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnAudioDecoderReleased(string? decoderName) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnAudioDisabled(AndroidX.Media3.ExoPlayer.DecoderCounters? counters) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnAudioEnabled(AndroidX.Media3.ExoPlayer.DecoderCounters? counters) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnAudioInputFormatChanged(AndroidX.Media3.Common.Format? format, AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation? decoderReuseEvaluation) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnAudioPositionAdvancing(long playoutStartSystemTimeMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnAudioSessionIdChanged(int audioSessionId) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnAudioSinkError(Java.Lang.Exception? audioSinkError) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnAudioUnderrun(int bufferSize, long bufferSizeMs, long elapsedSinceLastFeedMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnBandwidthSample(int elapsedMs, long bytesTransferred, long bitrateEstimate) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnDownstreamFormatChanged(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnDrmKeysLoaded(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnDrmKeysRemoved(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnDrmKeysRestored(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnDrmSessionAcquired(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, int state) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnDrmSessionManagerError(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, Java.Lang.Exception? error) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnDrmSessionReleased(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnDroppedFrames(int count, long elapsedMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnIsLoadingChanged(bool isLoading) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnLoadCanceled(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnLoadCompleted(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnLoadError(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData, Java.IO.IOException? error, bool wasCanceled) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnLoadStarted(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData, int retryCount) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnMediaItemTransition(AndroidX.Media3.Common.MediaItem? mediaItem, int reason) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnMetadata(AndroidX.Media3.Common.Metadata? metadata) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnPlayWhenReadyChanged(bool playWhenReady, int reason) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnPlaybackParametersChanged(AndroidX.Media3.Common.PlaybackParameters? playbackParameters) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnPlaybackStateChanged(int playbackState) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnPlaybackSuppressionReasonChanged(int playbackSuppressionReason) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnPlayerError(AndroidX.Media3.Common.PlaybackException? error) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnPlayerStateChanged(bool playWhenReady, int playbackState) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnPositionDiscontinuity(AndroidX.Media3.Common.PlayerPositionInfo? oldPosition, AndroidX.Media3.Common.PlayerPositionInfo? newPosition, int reason) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnRenderedFirstFrame(Java.Lang.Object? output, long renderTimeMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnRepeatModeChanged(int repeatMode) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnShuffleModeEnabledChanged(bool shuffleModeEnabled) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnSkipSilenceEnabledChanged(bool skipSilenceEnabled) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnSurfaceSizeChanged(int width, int height) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnTimelineChanged(AndroidX.Media3.Common.Timeline? timeline, int reason) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnUpstreamDiscarded(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnVideoCodecError(Java.Lang.Exception? videoCodecError) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnVideoDecoderInitialized(string? decoderName, long initializedTimestampMs, long initializationDurationMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnVideoDecoderReleased(string? decoderName) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnVideoDisabled(AndroidX.Media3.ExoPlayer.DecoderCounters? counters) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnVideoEnabled(AndroidX.Media3.ExoPlayer.DecoderCounters? counters) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnVideoFrameProcessingOffset(long totalProcessingOffsetUs, int frameCount) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnVideoInputFormatChanged(AndroidX.Media3.Common.Format? format, AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation? decoderReuseEvaluation) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnVideoSizeChanged(AndroidX.Media3.Common.VideoSize? videoSize) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnVolumeChanged(float volume) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.SendEvent(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int eventFlag, AndroidX.Media3.Common.Util.ListenerSet.IEvent? eventInvocation) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.UpdateMediaPeriodQueueInfo(System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId!>? queue, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? readingPeriod) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultPlaybackSessionManager
AndroidX.Media3.ExoPlayer.Analytics.DefaultPlaybackSessionManager.ActiveSessionId.get -> string?
AndroidX.Media3.ExoPlayer.Analytics.DefaultPlaybackSessionManager.BelongsToSession(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? sessionId) -> bool
AndroidX.Media3.ExoPlayer.Analytics.DefaultPlaybackSessionManager.DefaultPlaybackSessionManager() -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultPlaybackSessionManager.FinishAllSessions(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultPlaybackSessionManager.GetSessionForMediaPeriodId(AndroidX.Media3.Common.Timeline? timeline, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> string?
AndroidX.Media3.ExoPlayer.Analytics.DefaultPlaybackSessionManager.SetListener(AndroidX.Media3.ExoPlayer.Analytics.IPlaybackSessionManagerListener? listener) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultPlaybackSessionManager.UpdateSessions(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultPlaybackSessionManager.UpdateSessionsWithDiscontinuity(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int reason) -> void
AndroidX.Media3.ExoPlayer.Analytics.DefaultPlaybackSessionManager.UpdateSessionsWithTimelineChange(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime) -> void
AndroidX.Media3.ExoPlayer.Analytics.DeviceInfoChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.DeviceInfoChangedEventArgs.DeviceInfo.get -> AndroidX.Media3.Common.DeviceInfo?
AndroidX.Media3.ExoPlayer.Analytics.DeviceInfoChangedEventArgs.DeviceInfoChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.DeviceInfo? deviceInfo) -> void
AndroidX.Media3.ExoPlayer.Analytics.DeviceInfoChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.DeviceVolumeChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.DeviceVolumeChangedEventArgs.DeviceVolumeChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int volume, bool muted) -> void
AndroidX.Media3.ExoPlayer.Analytics.DeviceVolumeChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.DeviceVolumeChangedEventArgs.Muted.get -> bool
AndroidX.Media3.ExoPlayer.Analytics.DeviceVolumeChangedEventArgs.Volume.get -> int
AndroidX.Media3.ExoPlayer.Analytics.DownstreamFormatChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.DownstreamFormatChangedEventArgs.DownstreamFormatChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Analytics.DownstreamFormatChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.DownstreamFormatChangedEventArgs.MediaLoadData.get -> AndroidX.Media3.ExoPlayer.Source.MediaLoadData?
AndroidX.Media3.ExoPlayer.Analytics.DrmKeysLoadedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.DrmKeysLoadedEventArgs.DrmKeysLoadedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime) -> void
AndroidX.Media3.ExoPlayer.Analytics.DrmKeysLoadedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.DrmKeysRemovedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.DrmKeysRemovedEventArgs.DrmKeysRemovedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime) -> void
AndroidX.Media3.ExoPlayer.Analytics.DrmKeysRemovedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.DrmKeysRestoredEventArgs
AndroidX.Media3.ExoPlayer.Analytics.DrmKeysRestoredEventArgs.DrmKeysRestoredEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime) -> void
AndroidX.Media3.ExoPlayer.Analytics.DrmKeysRestoredEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.DrmSessionAcquiredDeprecatedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.DrmSessionAcquiredDeprecatedEventArgs.DrmSessionAcquiredDeprecatedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime) -> void
AndroidX.Media3.ExoPlayer.Analytics.DrmSessionAcquiredDeprecatedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.DrmSessionAcquiredEventArgs
AndroidX.Media3.ExoPlayer.Analytics.DrmSessionAcquiredEventArgs.DrmSessionAcquiredEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int state) -> void
AndroidX.Media3.ExoPlayer.Analytics.DrmSessionAcquiredEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.DrmSessionAcquiredEventArgs.State.get -> int
AndroidX.Media3.ExoPlayer.Analytics.DrmSessionManagerErrorEventArgs
AndroidX.Media3.ExoPlayer.Analytics.DrmSessionManagerErrorEventArgs.DrmSessionManagerErrorEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, Java.Lang.Exception? error) -> void
AndroidX.Media3.ExoPlayer.Analytics.DrmSessionManagerErrorEventArgs.Error.get -> Java.Lang.Exception?
AndroidX.Media3.ExoPlayer.Analytics.DrmSessionManagerErrorEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.DrmSessionReleasedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.DrmSessionReleasedEventArgs.DrmSessionReleasedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime) -> void
AndroidX.Media3.ExoPlayer.Analytics.DrmSessionReleasedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.DroppedVideoFramesEventArgs
AndroidX.Media3.ExoPlayer.Analytics.DroppedVideoFramesEventArgs.DroppedFrames.get -> int
AndroidX.Media3.ExoPlayer.Analytics.DroppedVideoFramesEventArgs.DroppedVideoFramesEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int droppedFrames, long elapsedMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.DroppedVideoFramesEventArgs.ElapsedMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.DroppedVideoFramesEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.EventsEventArgs
AndroidX.Media3.ExoPlayer.Analytics.EventsEventArgs.Events.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEvents?
AndroidX.Media3.ExoPlayer.Analytics.EventsEventArgs.EventsEventArgs(AndroidX.Media3.Common.IPlayer? player, AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEvents? events) -> void
AndroidX.Media3.ExoPlayer.Analytics.EventsEventArgs.Player.get -> AndroidX.Media3.Common.IPlayer?
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.AddListener(AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener? p0) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.NotifySeekStarted() -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.OnAudioCodecError(Java.Lang.Exception? p0) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.OnAudioDecoderInitialized(string? p0, long p1, long p2) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.OnAudioDecoderReleased(string? p0) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.OnAudioDisabled(AndroidX.Media3.ExoPlayer.DecoderCounters? p0) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.OnAudioEnabled(AndroidX.Media3.ExoPlayer.DecoderCounters? p0) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.OnAudioInputFormatChanged(AndroidX.Media3.Common.Format? p0, AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation? p1) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.OnAudioPositionAdvancing(long p0) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.OnAudioSinkError(Java.Lang.Exception? p0) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.OnAudioTrackInitialized(AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? p0) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.OnAudioTrackReleased(AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? p0) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.OnAudioUnderrun(int p0, long p1, long p2) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.OnDroppedFrames(int p0, long p1) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.OnRenderedFirstFrame(Java.Lang.Object? p0, long p1) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.OnRendererReadyChanged(int p0, int p1, bool p2) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.OnVideoCodecError(Java.Lang.Exception? p0) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.OnVideoDecoderInitialized(string? p0, long p1, long p2) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.OnVideoDecoderReleased(string? p0) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.OnVideoDisabled(AndroidX.Media3.ExoPlayer.DecoderCounters? p0) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.OnVideoEnabled(AndroidX.Media3.ExoPlayer.DecoderCounters? p0) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.OnVideoFrameProcessingOffset(long p0, int p1) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.OnVideoInputFormatChanged(AndroidX.Media3.Common.Format? p0, AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation? p1) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.Release() -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.RemoveListener(AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener? p0) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.SetPlayer(AndroidX.Media3.Common.IPlayer? p0, Android.OS.Looper? p1) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector.UpdateMediaPeriodQueueInfo(System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId!>? p0, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? p1) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnAudioAttributesChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.AudioAttributes? audioAttributes) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnAudioCodecError(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, Java.Lang.Exception? audioCodecError) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnAudioDecoderInitialized(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? decoderName, long initializedTimestampMs, long initializationDurationMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnAudioDecoderInitializedDeprecated(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? decoderName, long initializationDurationMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnAudioDecoderReleased(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? decoderName) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnAudioDisabled(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.DecoderCounters? decoderCounters) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnAudioEnabled(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.DecoderCounters? decoderCounters) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnAudioInputFormatChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.Format? format, AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation? decoderReuseEvaluation) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnAudioPositionAdvancing(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, long playoutStartSystemTimeMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnAudioSessionIdChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int audioSessionId) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnAudioSinkError(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, Java.Lang.Exception? audioSinkError) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnAudioTrackInitialized(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? audioTrackConfig) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnAudioTrackReleased(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? audioTrackConfig) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnAudioUnderrun(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int bufferSize, long bufferSizeMs, long elapsedSinceLastFeedMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnAvailableCommandsChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.PlayerCommands? availableCommands) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnBandwidthEstimate(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int totalLoadTimeMs, long totalBytesLoaded, long bitrateEstimate) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnCues(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.Text.CueGroup? cueGroup) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnCuesDeprecated(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, System.Collections.Generic.IList<AndroidX.Media3.Common.Text.Cue!>? cues) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnDeviceInfoChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.DeviceInfo? deviceInfo) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnDeviceVolumeChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int volume, bool muted) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnDownstreamFormatChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnDrmKeysLoaded(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnDrmKeysRemoved(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnDrmKeysRestored(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnDrmSessionAcquired(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int state) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnDrmSessionAcquiredDeprecated(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnDrmSessionManagerError(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, Java.Lang.Exception? error) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnDrmSessionReleased(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnDroppedVideoFrames(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int droppedFrames, long elapsedMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnEvents(AndroidX.Media3.Common.IPlayer? player, AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEvents? events) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnIsLoadingChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, bool isLoading) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnIsPlayingChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, bool isPlaying) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnLoadCanceled(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnLoadCompleted(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnLoadError(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData, Java.IO.IOException? error, bool wasCanceled) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnLoadStarted(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData, int retryCount) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnLoadingChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, bool isLoading) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnMaxSeekToPreviousPositionChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, long maxSeekToPreviousPositionMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnMediaItemTransition(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.MediaItem? mediaItem, int reason) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnMediaMetadataChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.MediaMetadata? mediaMetadata) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnMetadata(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.Metadata? metadata) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnPlayWhenReadyChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, bool playWhenReady, int reason) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnPlaybackParametersChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.PlaybackParameters? playbackParameters) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnPlaybackStateChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int state) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnPlaybackSuppressionReasonChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int playbackSuppressionReason) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnPlayerError(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.PlaybackException? error) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnPlayerErrorChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.PlaybackException? error) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnPlayerReleased(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnPlayerStateChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, bool playWhenReady, int playbackState) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnPlaylistMetadataChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.MediaMetadata? playlistMetadata) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnPositionDiscontinuity(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.PlayerPositionInfo? oldPosition, AndroidX.Media3.Common.PlayerPositionInfo? newPosition, int reason) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnPositionDiscontinuityDeprecated(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int reason) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnRenderedFirstFrame(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, Java.Lang.Object? output, long renderTimeMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnRendererReadyChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int rendererIndex, int rendererTrackType, bool isRendererReady) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnRepeatModeChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int repeatMode) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnSeekBackIncrementChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, long seekBackIncrementMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnSeekForwardIncrementChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, long seekForwardIncrementMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnSeekStarted(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnShuffleModeChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, bool shuffleModeEnabled) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnSkipSilenceEnabledChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, bool skipSilenceEnabled) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnSurfaceSizeChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int width, int height) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnTimelineChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int reason) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnTrackSelectionParametersChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.TrackSelectionParameters? trackSelectionParameters) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnTracksChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.Tracks? tracks) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnUpstreamDiscarded(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnVideoCodecError(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, Java.Lang.Exception? videoCodecError) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnVideoDecoderInitialized(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? decoderName, long initializedTimestampMs, long initializationDurationMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnVideoDecoderInitializedDeprecated(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? decoderName, long initializationDurationMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnVideoDecoderReleased(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? decoderName) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnVideoDisabled(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.DecoderCounters? decoderCounters) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnVideoEnabled(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.DecoderCounters? decoderCounters) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnVideoFrameProcessingOffset(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, long totalProcessingOffsetUs, int frameCount) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnVideoInputFormatChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.Format? format, AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation? decoderReuseEvaluation) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnVideoSizeChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.VideoSize? videoSize) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnVideoSizeChangedDeprecated(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int width, int height, int unappliedRotationDegrees, float pixelWidthHeightRatio) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener.OnVolumeChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, float volume) -> void
AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListenerEventFlags
AndroidX.Media3.ExoPlayer.Analytics.IPlaybackSessionManager
AndroidX.Media3.ExoPlayer.Analytics.IPlaybackSessionManager.ActiveSessionId.get -> string?
AndroidX.Media3.ExoPlayer.Analytics.IPlaybackSessionManager.BelongsToSession(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? p0, string? p1) -> bool
AndroidX.Media3.ExoPlayer.Analytics.IPlaybackSessionManager.FinishAllSessions(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? p0) -> void
AndroidX.Media3.ExoPlayer.Analytics.IPlaybackSessionManager.GetSessionForMediaPeriodId(AndroidX.Media3.Common.Timeline? p0, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? p1) -> string?
AndroidX.Media3.ExoPlayer.Analytics.IPlaybackSessionManager.SetListener(AndroidX.Media3.ExoPlayer.Analytics.IPlaybackSessionManagerListener? p0) -> void
AndroidX.Media3.ExoPlayer.Analytics.IPlaybackSessionManager.UpdateSessions(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? p0) -> void
AndroidX.Media3.ExoPlayer.Analytics.IPlaybackSessionManager.UpdateSessionsWithDiscontinuity(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? p0, int p1) -> void
AndroidX.Media3.ExoPlayer.Analytics.IPlaybackSessionManager.UpdateSessionsWithTimelineChange(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? p0) -> void
AndroidX.Media3.ExoPlayer.Analytics.IPlaybackSessionManagerListener
AndroidX.Media3.ExoPlayer.Analytics.IPlaybackSessionManagerListener.OnAdPlaybackStarted(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? p0, string? p1, string? p2) -> void
AndroidX.Media3.ExoPlayer.Analytics.IPlaybackSessionManagerListener.OnSessionActive(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? p0, string? p1) -> void
AndroidX.Media3.ExoPlayer.Analytics.IPlaybackSessionManagerListener.OnSessionCreated(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? p0, string? p1) -> void
AndroidX.Media3.ExoPlayer.Analytics.IPlaybackSessionManagerListener.OnSessionFinished(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? p0, string? p1, bool p2) -> void
AndroidX.Media3.ExoPlayer.Analytics.IsLoadingChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.IsLoadingChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.IsLoadingChangedEventArgs.IsLoading.get -> bool
AndroidX.Media3.ExoPlayer.Analytics.IsLoadingChangedEventArgs.IsLoadingChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, bool isLoading) -> void
AndroidX.Media3.ExoPlayer.Analytics.IsPlayingChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.IsPlayingChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.IsPlayingChangedEventArgs.IsPlaying.get -> bool
AndroidX.Media3.ExoPlayer.Analytics.IsPlayingChangedEventArgs.IsPlayingChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, bool isPlaying) -> void
AndroidX.Media3.ExoPlayer.Analytics.LoadCanceledEventArgs
AndroidX.Media3.ExoPlayer.Analytics.LoadCanceledEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.LoadCanceledEventArgs.LoadCanceledEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Analytics.LoadCanceledEventArgs.LoadEventInfo.get -> AndroidX.Media3.ExoPlayer.Source.LoadEventInfo?
AndroidX.Media3.ExoPlayer.Analytics.LoadCanceledEventArgs.MediaLoadData.get -> AndroidX.Media3.ExoPlayer.Source.MediaLoadData?
AndroidX.Media3.ExoPlayer.Analytics.LoadCompletedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.LoadCompletedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.LoadCompletedEventArgs.LoadCompletedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Analytics.LoadCompletedEventArgs.LoadEventInfo.get -> AndroidX.Media3.ExoPlayer.Source.LoadEventInfo?
AndroidX.Media3.ExoPlayer.Analytics.LoadCompletedEventArgs.MediaLoadData.get -> AndroidX.Media3.ExoPlayer.Source.MediaLoadData?
AndroidX.Media3.ExoPlayer.Analytics.LoadErrorEventArgs
AndroidX.Media3.ExoPlayer.Analytics.LoadErrorEventArgs.Error.get -> Java.IO.IOException?
AndroidX.Media3.ExoPlayer.Analytics.LoadErrorEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.LoadErrorEventArgs.LoadErrorEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData, Java.IO.IOException? error, bool wasCanceled) -> void
AndroidX.Media3.ExoPlayer.Analytics.LoadErrorEventArgs.LoadEventInfo.get -> AndroidX.Media3.ExoPlayer.Source.LoadEventInfo?
AndroidX.Media3.ExoPlayer.Analytics.LoadErrorEventArgs.MediaLoadData.get -> AndroidX.Media3.ExoPlayer.Source.MediaLoadData?
AndroidX.Media3.ExoPlayer.Analytics.LoadErrorEventArgs.WasCanceled.get -> bool
AndroidX.Media3.ExoPlayer.Analytics.LoadStartedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.LoadStartedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.LoadStartedEventArgs.LoadEventInfo.get -> AndroidX.Media3.ExoPlayer.Source.LoadEventInfo?
AndroidX.Media3.ExoPlayer.Analytics.LoadStartedEventArgs.LoadStartedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData, int retryCount) -> void
AndroidX.Media3.ExoPlayer.Analytics.LoadStartedEventArgs.MediaLoadData.get -> AndroidX.Media3.ExoPlayer.Source.MediaLoadData?
AndroidX.Media3.ExoPlayer.Analytics.LoadStartedEventArgs.RetryCount.get -> int
AndroidX.Media3.ExoPlayer.Analytics.LoadingChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.LoadingChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.LoadingChangedEventArgs.IsLoading.get -> bool
AndroidX.Media3.ExoPlayer.Analytics.LoadingChangedEventArgs.LoadingChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, bool isLoading) -> void
AndroidX.Media3.ExoPlayer.Analytics.MaxSeekToPreviousPositionChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.MaxSeekToPreviousPositionChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.MaxSeekToPreviousPositionChangedEventArgs.MaxSeekToPreviousPositionChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, long maxSeekToPreviousPositionMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.MaxSeekToPreviousPositionChangedEventArgs.MaxSeekToPreviousPositionMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.MediaItemTransitionEventArgs
AndroidX.Media3.ExoPlayer.Analytics.MediaItemTransitionEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.MediaItemTransitionEventArgs.MediaItem.get -> AndroidX.Media3.Common.MediaItem?
AndroidX.Media3.ExoPlayer.Analytics.MediaItemTransitionEventArgs.MediaItemTransitionEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.MediaItem? mediaItem, int reason) -> void
AndroidX.Media3.ExoPlayer.Analytics.MediaItemTransitionEventArgs.Reason.get -> int
AndroidX.Media3.ExoPlayer.Analytics.MediaMetadataChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.MediaMetadataChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.MediaMetadataChangedEventArgs.MediaMetadata.get -> AndroidX.Media3.Common.MediaMetadata?
AndroidX.Media3.ExoPlayer.Analytics.MediaMetadataChangedEventArgs.MediaMetadataChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.MediaMetadata? mediaMetadata) -> void
AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener
AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts
AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.LogSessionId.get -> Android.Media.Metrics.LogSessionId?
AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.OnAdPlaybackStarted(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? contentSessionId, string? adSessionId) -> void
AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.OnBandwidthEstimate(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int totalLoadTimeMs, long totalBytesLoaded, long bitrateEstimate) -> void
AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.OnDownstreamFormatChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.OnEvents(AndroidX.Media3.Common.IPlayer? player, AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEvents? events) -> void
AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.OnLoadError(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData, Java.IO.IOException? error, bool wasCanceled) -> void
AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.OnPlayerError(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.PlaybackException? error) -> void
AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.OnPositionDiscontinuity(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.PlayerPositionInfo? oldPosition, AndroidX.Media3.Common.PlayerPositionInfo? newPosition, int reason) -> void
AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.OnSessionActive(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? sessionId) -> void
AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.OnSessionCreated(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? sessionId) -> void
AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.OnSessionFinished(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? sessionId, bool automaticTransitionToNextPlayback) -> void
AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.OnVideoDisabled(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.DecoderCounters? decoderCounters) -> void
AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.OnVideoSizeChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.VideoSize? videoSize) -> void
AndroidX.Media3.ExoPlayer.Analytics.MetadataEventArgs
AndroidX.Media3.ExoPlayer.Analytics.MetadataEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.MetadataEventArgs.Metadata.get -> AndroidX.Media3.Common.Metadata?
AndroidX.Media3.ExoPlayer.Analytics.MetadataEventArgs.MetadataEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.Metadata? metadata) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlayWhenReadyChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.PlayWhenReadyChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.PlayWhenReadyChangedEventArgs.PlayWhenReady.get -> bool
AndroidX.Media3.ExoPlayer.Analytics.PlayWhenReadyChangedEventArgs.PlayWhenReadyChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, bool playWhenReady, int reason) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlayWhenReadyChangedEventArgs.Reason.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackParametersChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.PlaybackParametersChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.PlaybackParametersChangedEventArgs.PlaybackParameters.get -> AndroidX.Media3.Common.PlaybackParameters?
AndroidX.Media3.ExoPlayer.Analytics.PlaybackParametersChangedEventArgs.PlaybackParametersChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.PlaybackParameters? playbackParameters) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStateChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStateChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStateChangedEventArgs.PlaybackStateChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int state) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStateChangedEventArgs.State.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.AbandonedBeforeReadyCount.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.AbandonedBeforeReadyCount.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.AbandonedBeforeReadyRatio.get -> float
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.AdPlaybackCount.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.AdPlaybackCount.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.AudioFormatHistory.get -> System.Collections.IList?
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.AudioFormatHistory.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.AudioUnderrunRate.get -> float
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.BackgroundJoiningCount.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.BackgroundJoiningCount.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.DroppedFramesRate.get -> float
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EndedCount.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EndedCount.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EndedRatio.get -> float
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EventTimeAndException
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EventTimeAndException.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EventTimeAndException.EventTime.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EventTimeAndException.EventTimeAndException(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, Java.Lang.Exception? exception) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EventTimeAndException.Exception.get -> Java.Lang.Exception?
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EventTimeAndException.Exception.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EventTimeAndFormat
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EventTimeAndFormat.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EventTimeAndFormat.EventTime.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EventTimeAndFormat.EventTimeAndFormat(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.Format? format) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EventTimeAndFormat.Format.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EventTimeAndFormat.Format.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EventTimeAndPlaybackState
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EventTimeAndPlaybackState.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EventTimeAndPlaybackState.EventTime.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EventTimeAndPlaybackState.EventTimeAndPlaybackState(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int playbackState) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EventTimeAndPlaybackState.PlaybackState.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EventTimeAndPlaybackState.PlaybackState.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.FatalErrorCount.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.FatalErrorCount.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.FatalErrorHistory.get -> System.Collections.IList?
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.FatalErrorHistory.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.FatalErrorPlaybackCount.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.FatalErrorPlaybackCount.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.FatalErrorRate.get -> float
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.FatalErrorRatio.get -> float
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.FirstReportedTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.FirstReportedTimeMs.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.ForegroundPlaybackCount.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.ForegroundPlaybackCount.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.GetMediaTimeMsAtRealtimeMs(long realtimeMs) -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.GetPlaybackStateAtTime(long realtimeMs) -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.GetPlaybackStateDurationMs(int playbackState) -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.InitialAudioFormatBitrateCount.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.InitialAudioFormatBitrateCount.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.InitialVideoFormatBitrateCount.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.InitialVideoFormatBitrateCount.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.InitialVideoFormatHeightCount.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.InitialVideoFormatHeightCount.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.JoinTimeRatio.get -> float
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MaxRebufferTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MaxRebufferTimeMs.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanAudioFormatBitrate.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanBandwidth.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanElapsedTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanInitialAudioFormatBitrate.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanInitialVideoFormatBitrate.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanInitialVideoFormatHeight.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanJoinTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanNonFatalErrorCount.get -> float
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanPauseBufferCount.get -> float
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanPauseCount.get -> float
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanPausedTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanPlayAndWaitTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanPlayTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanRebufferCount.get -> float
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanRebufferTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanSeekCount.get -> float
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanSeekTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanSingleRebufferTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanSingleSeekTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanTimeBetweenFatalErrors.get -> float
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanTimeBetweenNonFatalErrors.get -> float
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanTimeBetweenRebuffers.get -> float
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanVideoFormatBitrate.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanVideoFormatHeight.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MeanWaitTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MediaTimeHistory.get -> System.Collections.IList?
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.MediaTimeHistory.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.NonFatalErrorCount.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.NonFatalErrorCount.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.NonFatalErrorHistory.get -> System.Collections.IList?
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.NonFatalErrorHistory.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.NonFatalErrorRate.get -> float
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.PlaybackCount.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.PlaybackCount.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.PlaybackStateHistory.get -> System.Collections.IList?
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.PlaybackStateHistory.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.RebufferRate.get -> float
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.RebufferTimeRatio.get -> float
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.SeekTimeRatio.get -> float
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalAudioFormatBitrateTimeProduct.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalAudioFormatBitrateTimeProduct.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalAudioFormatTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalAudioFormatTimeMs.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalAudioUnderruns.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalAudioUnderruns.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalBandwidthBytes.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalBandwidthBytes.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalBandwidthTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalBandwidthTimeMs.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalDroppedFrames.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalDroppedFrames.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalElapsedTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalInitialAudioFormatBitrate.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalInitialAudioFormatBitrate.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalInitialVideoFormatBitrate.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalInitialVideoFormatBitrate.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalInitialVideoFormatHeight.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalInitialVideoFormatHeight.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalJoinTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalPauseBufferCount.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalPauseBufferCount.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalPauseCount.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalPauseCount.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalPausedTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalPlayAndWaitTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalPlayTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalRebufferCount.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalRebufferCount.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalRebufferTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalSeekCount.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalSeekCount.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalSeekTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalValidJoinTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalValidJoinTimeMs.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalVideoFormatBitrateTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalVideoFormatBitrateTimeMs.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalVideoFormatBitrateTimeProduct.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalVideoFormatBitrateTimeProduct.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalVideoFormatHeightTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalVideoFormatHeightTimeMs.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalVideoFormatHeightTimeProduct.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalVideoFormatHeightTimeProduct.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.TotalWaitTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.ValidJoinTimeCount.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.ValidJoinTimeCount.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.VideoFormatHistory.get -> System.Collections.IList?
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.VideoFormatHistory.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.WaitTimeRatio.get -> float
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.CombinedPlaybackStats.get -> AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats?
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.ICallback
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.ICallback.OnPlaybackStatsReady(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? p0, AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats? p1) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.OnAdPlaybackStarted(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? contentSessionId, string? adSessionId) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.OnBandwidthEstimate(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int totalLoadTimeMs, long totalBytesLoaded, long bitrateEstimate) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.OnDownstreamFormatChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.OnDrmSessionManagerError(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, Java.Lang.Exception? error) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.OnDroppedVideoFrames(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int droppedFrames, long elapsedMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.OnEvents(AndroidX.Media3.Common.IPlayer? player, AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEvents? events) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.OnLoadError(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData, Java.IO.IOException? error, bool wasCanceled) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.OnPositionDiscontinuity(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.PlayerPositionInfo? oldPosition, AndroidX.Media3.Common.PlayerPositionInfo? newPosition, int reason) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.OnSessionActive(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? sessionId) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.OnSessionCreated(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? sessionId) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.OnSessionFinished(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? sessionId, bool automaticTransitionToNextPlayback) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.OnVideoSizeChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.VideoSize? videoSize) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.PlaybackStats.get -> AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats?
AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.PlaybackStatsListener(bool keepHistory, AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.ICallback? callback) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaybackSuppressionReasonChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.PlaybackSuppressionReasonChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.PlaybackSuppressionReasonChangedEventArgs.PlaybackSuppressionReason.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlaybackSuppressionReasonChangedEventArgs.PlaybackSuppressionReasonChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int playbackSuppressionReason) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlayerErrorChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.PlayerErrorChangedEventArgs.Error.get -> AndroidX.Media3.Common.PlaybackException?
AndroidX.Media3.ExoPlayer.Analytics.PlayerErrorChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.PlayerErrorChangedEventArgs.PlayerErrorChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.PlaybackException? error) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlayerErrorEventArgs
AndroidX.Media3.ExoPlayer.Analytics.PlayerErrorEventArgs.Error.get -> AndroidX.Media3.Common.PlaybackException?
AndroidX.Media3.ExoPlayer.Analytics.PlayerErrorEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.PlayerErrorEventArgs.PlayerErrorEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.PlaybackException? error) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlayerId
AndroidX.Media3.ExoPlayer.Analytics.PlayerId.LogSessionId.get -> Android.Media.Metrics.LogSessionId?
AndroidX.Media3.ExoPlayer.Analytics.PlayerId.LogSessionId.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlayerId.Name.get -> string?
AndroidX.Media3.ExoPlayer.Analytics.PlayerId.Name.set -> void
AndroidX.Media3.ExoPlayer.Analytics.PlayerId.PlayerId(string? playerName) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlayerReleasedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.PlayerReleasedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.PlayerReleasedEventArgs.PlayerReleasedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlayerStateChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.PlayerStateChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.PlayerStateChangedEventArgs.PlayWhenReady.get -> bool
AndroidX.Media3.ExoPlayer.Analytics.PlayerStateChangedEventArgs.PlaybackState.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PlayerStateChangedEventArgs.PlayerStateChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, bool playWhenReady, int playbackState) -> void
AndroidX.Media3.ExoPlayer.Analytics.PlaylistMetadataChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.PlaylistMetadataChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.PlaylistMetadataChangedEventArgs.PlaylistMetadata.get -> AndroidX.Media3.Common.MediaMetadata?
AndroidX.Media3.ExoPlayer.Analytics.PlaylistMetadataChangedEventArgs.PlaylistMetadataChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.MediaMetadata? playlistMetadata) -> void
AndroidX.Media3.ExoPlayer.Analytics.PositionDiscontinuityDeprecatedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.PositionDiscontinuityDeprecatedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.PositionDiscontinuityDeprecatedEventArgs.PositionDiscontinuityDeprecatedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int reason) -> void
AndroidX.Media3.ExoPlayer.Analytics.PositionDiscontinuityDeprecatedEventArgs.Reason.get -> int
AndroidX.Media3.ExoPlayer.Analytics.PositionDiscontinuityEventArgs
AndroidX.Media3.ExoPlayer.Analytics.PositionDiscontinuityEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.PositionDiscontinuityEventArgs.NewPosition.get -> AndroidX.Media3.Common.PlayerPositionInfo?
AndroidX.Media3.ExoPlayer.Analytics.PositionDiscontinuityEventArgs.OldPosition.get -> AndroidX.Media3.Common.PlayerPositionInfo?
AndroidX.Media3.ExoPlayer.Analytics.PositionDiscontinuityEventArgs.PositionDiscontinuityEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.PlayerPositionInfo? oldPosition, AndroidX.Media3.Common.PlayerPositionInfo? newPosition, int reason) -> void
AndroidX.Media3.ExoPlayer.Analytics.PositionDiscontinuityEventArgs.Reason.get -> int
AndroidX.Media3.ExoPlayer.Analytics.RenderedFirstFrameEventArgs
AndroidX.Media3.ExoPlayer.Analytics.RenderedFirstFrameEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.RenderedFirstFrameEventArgs.Output.get -> Java.Lang.Object?
AndroidX.Media3.ExoPlayer.Analytics.RenderedFirstFrameEventArgs.RenderTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.RenderedFirstFrameEventArgs.RenderedFirstFrameEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, Java.Lang.Object? output, long renderTimeMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.RendererReadyChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.RendererReadyChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.RendererReadyChangedEventArgs.IsRendererReady.get -> bool
AndroidX.Media3.ExoPlayer.Analytics.RendererReadyChangedEventArgs.RendererIndex.get -> int
AndroidX.Media3.ExoPlayer.Analytics.RendererReadyChangedEventArgs.RendererReadyChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int rendererIndex, int rendererTrackType, bool isRendererReady) -> void
AndroidX.Media3.ExoPlayer.Analytics.RendererReadyChangedEventArgs.RendererTrackType.get -> int
AndroidX.Media3.ExoPlayer.Analytics.RepeatModeChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.RepeatModeChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.RepeatModeChangedEventArgs.RepeatMode.get -> int
AndroidX.Media3.ExoPlayer.Analytics.RepeatModeChangedEventArgs.RepeatModeChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int repeatMode) -> void
AndroidX.Media3.ExoPlayer.Analytics.SeekBackIncrementChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.SeekBackIncrementChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.SeekBackIncrementChangedEventArgs.SeekBackIncrementChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, long seekBackIncrementMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.SeekBackIncrementChangedEventArgs.SeekBackIncrementMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.SeekForwardIncrementChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.SeekForwardIncrementChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.SeekForwardIncrementChangedEventArgs.SeekForwardIncrementChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, long seekForwardIncrementMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.SeekForwardIncrementChangedEventArgs.SeekForwardIncrementMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.SeekStartedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.SeekStartedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.SeekStartedEventArgs.SeekStartedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime) -> void
AndroidX.Media3.ExoPlayer.Analytics.SessionActiveEventArgs
AndroidX.Media3.ExoPlayer.Analytics.SessionActiveEventArgs.P0.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.SessionActiveEventArgs.P1.get -> string?
AndroidX.Media3.ExoPlayer.Analytics.SessionActiveEventArgs.SessionActiveEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? p0, string? p1) -> void
AndroidX.Media3.ExoPlayer.Analytics.SessionCreatedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.SessionCreatedEventArgs.P0.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.SessionCreatedEventArgs.P1.get -> string?
AndroidX.Media3.ExoPlayer.Analytics.SessionCreatedEventArgs.SessionCreatedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? p0, string? p1) -> void
AndroidX.Media3.ExoPlayer.Analytics.SessionFinishedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.SessionFinishedEventArgs.P0.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.SessionFinishedEventArgs.P1.get -> string?
AndroidX.Media3.ExoPlayer.Analytics.SessionFinishedEventArgs.P2.get -> bool
AndroidX.Media3.ExoPlayer.Analytics.SessionFinishedEventArgs.SessionFinishedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? p0, string? p1, bool p2) -> void
AndroidX.Media3.ExoPlayer.Analytics.ShuffleModeChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.ShuffleModeChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.ShuffleModeChangedEventArgs.ShuffleModeChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, bool shuffleModeEnabled) -> void
AndroidX.Media3.ExoPlayer.Analytics.ShuffleModeChangedEventArgs.ShuffleModeEnabled.get -> bool
AndroidX.Media3.ExoPlayer.Analytics.SkipSilenceEnabledChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.SkipSilenceEnabledChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.SkipSilenceEnabledChangedEventArgs.SkipSilenceEnabled.get -> bool
AndroidX.Media3.ExoPlayer.Analytics.SkipSilenceEnabledChangedEventArgs.SkipSilenceEnabledChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, bool skipSilenceEnabled) -> void
AndroidX.Media3.ExoPlayer.Analytics.SurfaceSizeChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.SurfaceSizeChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.SurfaceSizeChangedEventArgs.Height.get -> int
AndroidX.Media3.ExoPlayer.Analytics.SurfaceSizeChangedEventArgs.SurfaceSizeChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int width, int height) -> void
AndroidX.Media3.ExoPlayer.Analytics.SurfaceSizeChangedEventArgs.Width.get -> int
AndroidX.Media3.ExoPlayer.Analytics.TimelineChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.TimelineChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.TimelineChangedEventArgs.Reason.get -> int
AndroidX.Media3.ExoPlayer.Analytics.TimelineChangedEventArgs.TimelineChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int reason) -> void
AndroidX.Media3.ExoPlayer.Analytics.TrackSelectionParametersChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.TrackSelectionParametersChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.TrackSelectionParametersChangedEventArgs.TrackSelectionParameters.get -> AndroidX.Media3.Common.TrackSelectionParameters?
AndroidX.Media3.ExoPlayer.Analytics.TrackSelectionParametersChangedEventArgs.TrackSelectionParametersChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.TrackSelectionParameters? trackSelectionParameters) -> void
AndroidX.Media3.ExoPlayer.Analytics.TracksChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.TracksChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.TracksChangedEventArgs.Tracks.get -> AndroidX.Media3.Common.Tracks?
AndroidX.Media3.ExoPlayer.Analytics.TracksChangedEventArgs.TracksChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.Tracks? tracks) -> void
AndroidX.Media3.ExoPlayer.Analytics.UpstreamDiscardedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.UpstreamDiscardedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.UpstreamDiscardedEventArgs.MediaLoadData.get -> AndroidX.Media3.ExoPlayer.Source.MediaLoadData?
AndroidX.Media3.ExoPlayer.Analytics.UpstreamDiscardedEventArgs.UpstreamDiscardedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Analytics.VideoCodecErrorEventArgs
AndroidX.Media3.ExoPlayer.Analytics.VideoCodecErrorEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.VideoCodecErrorEventArgs.VideoCodecError.get -> Java.Lang.Exception?
AndroidX.Media3.ExoPlayer.Analytics.VideoCodecErrorEventArgs.VideoCodecErrorEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, Java.Lang.Exception? videoCodecError) -> void
AndroidX.Media3.ExoPlayer.Analytics.VideoDecoderInitializedDeprecatedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.VideoDecoderInitializedDeprecatedEventArgs.DecoderName.get -> string?
AndroidX.Media3.ExoPlayer.Analytics.VideoDecoderInitializedDeprecatedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.VideoDecoderInitializedDeprecatedEventArgs.InitializationDurationMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.VideoDecoderInitializedDeprecatedEventArgs.VideoDecoderInitializedDeprecatedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? decoderName, long initializationDurationMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.VideoDecoderInitializedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.VideoDecoderInitializedEventArgs.DecoderName.get -> string?
AndroidX.Media3.ExoPlayer.Analytics.VideoDecoderInitializedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.VideoDecoderInitializedEventArgs.InitializationDurationMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.VideoDecoderInitializedEventArgs.InitializedTimestampMs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.VideoDecoderInitializedEventArgs.VideoDecoderInitializedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? decoderName, long initializedTimestampMs, long initializationDurationMs) -> void
AndroidX.Media3.ExoPlayer.Analytics.VideoDecoderReleasedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.VideoDecoderReleasedEventArgs.DecoderName.get -> string?
AndroidX.Media3.ExoPlayer.Analytics.VideoDecoderReleasedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.VideoDecoderReleasedEventArgs.VideoDecoderReleasedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? decoderName) -> void
AndroidX.Media3.ExoPlayer.Analytics.VideoDisabledEventArgs
AndroidX.Media3.ExoPlayer.Analytics.VideoDisabledEventArgs.DecoderCounters.get -> AndroidX.Media3.ExoPlayer.DecoderCounters?
AndroidX.Media3.ExoPlayer.Analytics.VideoDisabledEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.VideoDisabledEventArgs.VideoDisabledEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.DecoderCounters? decoderCounters) -> void
AndroidX.Media3.ExoPlayer.Analytics.VideoEnabledEventArgs
AndroidX.Media3.ExoPlayer.Analytics.VideoEnabledEventArgs.DecoderCounters.get -> AndroidX.Media3.ExoPlayer.DecoderCounters?
AndroidX.Media3.ExoPlayer.Analytics.VideoEnabledEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.VideoEnabledEventArgs.VideoEnabledEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.DecoderCounters? decoderCounters) -> void
AndroidX.Media3.ExoPlayer.Analytics.VideoFrameProcessingOffsetEventArgs
AndroidX.Media3.ExoPlayer.Analytics.VideoFrameProcessingOffsetEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.VideoFrameProcessingOffsetEventArgs.FrameCount.get -> int
AndroidX.Media3.ExoPlayer.Analytics.VideoFrameProcessingOffsetEventArgs.TotalProcessingOffsetUs.get -> long
AndroidX.Media3.ExoPlayer.Analytics.VideoFrameProcessingOffsetEventArgs.VideoFrameProcessingOffsetEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, long totalProcessingOffsetUs, int frameCount) -> void
AndroidX.Media3.ExoPlayer.Analytics.VideoInputFormatChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.VideoInputFormatChangedEventArgs.DecoderReuseEvaluation.get -> AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation?
AndroidX.Media3.ExoPlayer.Analytics.VideoInputFormatChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.VideoInputFormatChangedEventArgs.Format.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.Analytics.VideoInputFormatChangedEventArgs.VideoInputFormatChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.Format? format, AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation? decoderReuseEvaluation) -> void
AndroidX.Media3.ExoPlayer.Analytics.VideoSizeChangedDeprecatedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.VideoSizeChangedDeprecatedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.VideoSizeChangedDeprecatedEventArgs.Height.get -> int
AndroidX.Media3.ExoPlayer.Analytics.VideoSizeChangedDeprecatedEventArgs.PixelWidthHeightRatio.get -> float
AndroidX.Media3.ExoPlayer.Analytics.VideoSizeChangedDeprecatedEventArgs.UnappliedRotationDegrees.get -> int
AndroidX.Media3.ExoPlayer.Analytics.VideoSizeChangedDeprecatedEventArgs.VideoSizeChangedDeprecatedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int width, int height, int unappliedRotationDegrees, float pixelWidthHeightRatio) -> void
AndroidX.Media3.ExoPlayer.Analytics.VideoSizeChangedDeprecatedEventArgs.Width.get -> int
AndroidX.Media3.ExoPlayer.Analytics.VideoSizeChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.VideoSizeChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.VideoSizeChangedEventArgs.VideoSize.get -> AndroidX.Media3.Common.VideoSize?
AndroidX.Media3.ExoPlayer.Analytics.VideoSizeChangedEventArgs.VideoSizeChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.VideoSize? videoSize) -> void
AndroidX.Media3.ExoPlayer.Analytics.VolumeChangedEventArgs
AndroidX.Media3.ExoPlayer.Analytics.VolumeChangedEventArgs.EventTime.get -> AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime?
AndroidX.Media3.ExoPlayer.Analytics.VolumeChangedEventArgs.Volume.get -> float
AndroidX.Media3.ExoPlayer.Analytics.VolumeChangedEventArgs.VolumeChangedEventArgs(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, float volume) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities
AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities.AudioCapabilities(int[]? supportedEncodings, int maxChannelCount) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities.GetEncodingAndChannelConfigForPassthrough(AndroidX.Media3.Common.Format? format) -> Android.Util.Pair?
AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities.GetEncodingAndChannelConfigForPassthrough(AndroidX.Media3.Common.Format? format, AndroidX.Media3.Common.AudioAttributes? audioAttributes) -> Android.Util.Pair?
AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities.IsPassthroughPlaybackSupported(AndroidX.Media3.Common.Format? format) -> bool
AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities.IsPassthroughPlaybackSupported(AndroidX.Media3.Common.Format? format, AndroidX.Media3.Common.AudioAttributes? audioAttributes) -> bool
AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities.MaxChannelCount.get -> int
AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities.SupportsEncoding(int encoding) -> bool
AndroidX.Media3.ExoPlayer.Audio.AudioCapabilitiesReceiver
AndroidX.Media3.ExoPlayer.Audio.AudioCapabilitiesReceiver.AudioCapabilitiesReceiver(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.Audio.AudioCapabilitiesReceiver.IListener? listener) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioCapabilitiesReceiver.AudioCapabilitiesReceiver(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.Audio.AudioCapabilitiesReceiver.IListener? listener, AndroidX.Media3.Common.AudioAttributes? audioAttributes, Android.Media.AudioDeviceInfo? routedDevice) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioCapabilitiesReceiver.EventArgs
AndroidX.Media3.ExoPlayer.Audio.AudioCapabilitiesReceiver.EventArgs.EventArgs(AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities? p0) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioCapabilitiesReceiver.EventArgs.P0.get -> AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities?
AndroidX.Media3.ExoPlayer.Audio.AudioCapabilitiesReceiver.IListener
AndroidX.Media3.ExoPlayer.Audio.AudioCapabilitiesReceiver.IListener.OnAudioCapabilitiesChanged(AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities? p0) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioCapabilitiesReceiver.Register() -> AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities?
AndroidX.Media3.ExoPlayer.Audio.AudioCapabilitiesReceiver.SetAudioAttributes(AndroidX.Media3.Common.AudioAttributes? audioAttributes) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioCapabilitiesReceiver.SetRoutedDevice(Android.Media.AudioDeviceInfo? routedDevice) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioCapabilitiesReceiver.Unregister() -> void
AndroidX.Media3.ExoPlayer.Audio.AudioCodecErrorEventArgs
AndroidX.Media3.ExoPlayer.Audio.AudioCodecErrorEventArgs.AudioCodecError.get -> Java.Lang.Exception?
AndroidX.Media3.ExoPlayer.Audio.AudioCodecErrorEventArgs.AudioCodecErrorEventArgs(Java.Lang.Exception? audioCodecError) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioDecoderInitializedEventArgs
AndroidX.Media3.ExoPlayer.Audio.AudioDecoderInitializedEventArgs.AudioDecoderInitializedEventArgs(string? decoderName, long initializedTimestampMs, long initializationDurationMs) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioDecoderInitializedEventArgs.DecoderName.get -> string?
AndroidX.Media3.ExoPlayer.Audio.AudioDecoderInitializedEventArgs.InitializationDurationMs.get -> long
AndroidX.Media3.ExoPlayer.Audio.AudioDecoderInitializedEventArgs.InitializedTimestampMs.get -> long
AndroidX.Media3.ExoPlayer.Audio.AudioDecoderReleasedEventArgs
AndroidX.Media3.ExoPlayer.Audio.AudioDecoderReleasedEventArgs.AudioDecoderReleasedEventArgs(string? decoderName) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioDecoderReleasedEventArgs.DecoderName.get -> string?
AndroidX.Media3.ExoPlayer.Audio.AudioDisabledEventArgs
AndroidX.Media3.ExoPlayer.Audio.AudioDisabledEventArgs.AudioDisabledEventArgs(AndroidX.Media3.ExoPlayer.DecoderCounters? counters) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioDisabledEventArgs.Counters.get -> AndroidX.Media3.ExoPlayer.DecoderCounters?
AndroidX.Media3.ExoPlayer.Audio.AudioEnabledEventArgs
AndroidX.Media3.ExoPlayer.Audio.AudioEnabledEventArgs.AudioEnabledEventArgs(AndroidX.Media3.ExoPlayer.DecoderCounters? counters) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioEnabledEventArgs.Counters.get -> AndroidX.Media3.ExoPlayer.DecoderCounters?
AndroidX.Media3.ExoPlayer.Audio.AudioInputFormatChangedEventArgs
AndroidX.Media3.ExoPlayer.Audio.AudioInputFormatChangedEventArgs.AudioInputFormatChangedEventArgs(AndroidX.Media3.Common.Format? format, AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation? decoderReuseEvaluation) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioInputFormatChangedEventArgs.DecoderReuseEvaluation.get -> AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation?
AndroidX.Media3.ExoPlayer.Audio.AudioInputFormatChangedEventArgs.Format.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport
AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport.BuildUpon() -> AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport.Builder?
AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport.Builder
AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport.Builder.Build() -> AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport?
AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport.Builder.Builder() -> void
AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport.Builder.Builder(AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport? audioOffloadSupport) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport.Builder.SetIsFormatSupported(bool isFormatSupported) -> AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport.Builder?
AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport.Builder.SetIsGaplessSupported(bool isGaplessSupported) -> AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport.Builder?
AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport.Builder.SetIsSpeedChangeSupported(bool isSpeedChangeSupported) -> AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport.Builder?
AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport.IsFormatSupported.get -> bool
AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport.IsFormatSupported.set -> void
AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport.IsGaplessSupported.get -> bool
AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport.IsGaplessSupported.set -> void
AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport.IsSpeedChangeSupported.get -> bool
AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport.IsSpeedChangeSupported.set -> void
AndroidX.Media3.ExoPlayer.Audio.AudioPositionAdvancingEventArgs
AndroidX.Media3.ExoPlayer.Audio.AudioPositionAdvancingEventArgs.AudioPositionAdvancingEventArgs(long playoutStartSystemTimeMs) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioPositionAdvancingEventArgs.PlayoutStartSystemTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Audio.AudioRendererAudioSinkErrorEventArgs
AndroidX.Media3.ExoPlayer.Audio.AudioRendererAudioSinkErrorEventArgs.AudioRendererAudioSinkErrorEventArgs(Java.Lang.Exception? audioSinkError) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioRendererAudioSinkErrorEventArgs.AudioSinkError.get -> Java.Lang.Exception?
AndroidX.Media3.ExoPlayer.Audio.AudioRendererEventListenerEventDispatcher
AndroidX.Media3.ExoPlayer.Audio.AudioRendererEventListenerEventDispatcher.AudioCodecError(Java.Lang.Exception? audioCodecError) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioRendererEventListenerEventDispatcher.AudioRendererEventListenerEventDispatcher(Android.OS.Handler? handler, AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener? listener) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioRendererEventListenerEventDispatcher.AudioSinkError(Java.Lang.Exception? audioSinkError) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioRendererEventListenerEventDispatcher.AudioTrackInitialized(AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? audioTrackConfig) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioRendererEventListenerEventDispatcher.AudioTrackReleased(AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? audioTrackConfig) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioRendererEventListenerEventDispatcher.DecoderInitialized(string? decoderName, long initializedTimestampMs, long initializationDurationMs) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioRendererEventListenerEventDispatcher.DecoderReleased(string? decoderName) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioRendererEventListenerEventDispatcher.Disabled(AndroidX.Media3.ExoPlayer.DecoderCounters? counters) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioRendererEventListenerEventDispatcher.Enabled(AndroidX.Media3.ExoPlayer.DecoderCounters? decoderCounters) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioRendererEventListenerEventDispatcher.InputFormatChanged(AndroidX.Media3.Common.Format? format, AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation? decoderReuseEvaluation) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioRendererEventListenerEventDispatcher.PositionAdvancing(long playoutStartSystemTimeMs) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioRendererEventListenerEventDispatcher.SkipSilenceEnabledChanged(bool skipSilenceEnabled) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioRendererEventListenerEventDispatcher.Underrun(int bufferSize, long bufferSizeMs, long elapsedSinceLastFeedMs) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioRendererSkipSilenceEnabledChangedEventArgs
AndroidX.Media3.ExoPlayer.Audio.AudioRendererSkipSilenceEnabledChangedEventArgs.AudioRendererSkipSilenceEnabledChangedEventArgs(bool skipSilenceEnabled) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioRendererSkipSilenceEnabledChangedEventArgs.SkipSilenceEnabled.get -> bool
AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig
AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig.AudioSinkAudioTrackConfig(int encoding, int sampleRate, int channelConfig, bool tunneling, bool offload, int bufferSize) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig.BufferSize.get -> int
AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig.BufferSize.set -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig.ChannelConfig.get -> int
AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig.ChannelConfig.set -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig.Encoding.get -> int
AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig.Encoding.set -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig.Offload.get -> bool
AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig.Offload.set -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig.SampleRate.get -> int
AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig.SampleRate.set -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig.Tunneling.get -> bool
AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig.Tunneling.set -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkConfigurationException
AndroidX.Media3.ExoPlayer.Audio.AudioSinkConfigurationException.AudioSinkConfigurationException(Java.Lang.Throwable? cause, AndroidX.Media3.Common.Format? format) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkConfigurationException.AudioSinkConfigurationException(string? message, AndroidX.Media3.Common.Format? format) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkConfigurationException.Format.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.Audio.AudioSinkConfigurationException.Format.set -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkErrorEventArgs
AndroidX.Media3.ExoPlayer.Audio.AudioSinkErrorEventArgs.AudioSinkError.get -> Java.Lang.Exception?
AndroidX.Media3.ExoPlayer.Audio.AudioSinkErrorEventArgs.AudioSinkErrorEventArgs(Java.Lang.Exception? audioSinkError) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkInitializationException
AndroidX.Media3.ExoPlayer.Audio.AudioSinkInitializationException.AudioSinkInitializationException(int audioTrackState, int sampleRate, int channelConfig, int bufferSize, AndroidX.Media3.Common.Format? format, bool isRecoverable, Java.Lang.Exception? audioTrackException) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkInitializationException.AudioSinkInitializationException(string? message, int audioTrackState, AndroidX.Media3.Common.Format? format, bool isRecoverable, Java.Lang.Throwable? cause) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkInitializationException.AudioTrackState.get -> int
AndroidX.Media3.ExoPlayer.Audio.AudioSinkInitializationException.AudioTrackState.set -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkInitializationException.Format.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.Audio.AudioSinkInitializationException.Format.set -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkInitializationException.IsRecoverable.get -> bool
AndroidX.Media3.ExoPlayer.Audio.AudioSinkInitializationException.IsRecoverable.set -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkListenerOnAudioTrackInitializedEventArgs
AndroidX.Media3.ExoPlayer.Audio.AudioSinkListenerOnAudioTrackInitializedEventArgs.AudioSinkListenerOnAudioTrackInitializedEventArgs(AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? audioTrackConfig) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkListenerOnAudioTrackInitializedEventArgs.AudioTrackConfig.get -> AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig?
AndroidX.Media3.ExoPlayer.Audio.AudioSinkListenerOnAudioTrackReleasedEventArgs
AndroidX.Media3.ExoPlayer.Audio.AudioSinkListenerOnAudioTrackReleasedEventArgs.AudioSinkListenerOnAudioTrackReleasedEventArgs(AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? audioTrackConfig) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkListenerOnAudioTrackReleasedEventArgs.AudioTrackConfig.get -> AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig?
AndroidX.Media3.ExoPlayer.Audio.AudioSinkUnexpectedDiscontinuityException
AndroidX.Media3.ExoPlayer.Audio.AudioSinkUnexpectedDiscontinuityException.ActualPresentationTimeUs.get -> long
AndroidX.Media3.ExoPlayer.Audio.AudioSinkUnexpectedDiscontinuityException.ActualPresentationTimeUs.set -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkUnexpectedDiscontinuityException.AudioSinkUnexpectedDiscontinuityException(long actualPresentationTimeUs, long expectedPresentationTimeUs) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkUnexpectedDiscontinuityException.ExpectedPresentationTimeUs.get -> long
AndroidX.Media3.ExoPlayer.Audio.AudioSinkUnexpectedDiscontinuityException.ExpectedPresentationTimeUs.set -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkWriteException
AndroidX.Media3.ExoPlayer.Audio.AudioSinkWriteException.AudioSinkWriteException(int errorCode, AndroidX.Media3.Common.Format? format, bool isRecoverable) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkWriteException.ErrorCode.get -> int
AndroidX.Media3.ExoPlayer.Audio.AudioSinkWriteException.ErrorCode.set -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkWriteException.Format.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.Audio.AudioSinkWriteException.Format.set -> void
AndroidX.Media3.ExoPlayer.Audio.AudioSinkWriteException.IsRecoverable.get -> bool
AndroidX.Media3.ExoPlayer.Audio.AudioSinkWriteException.IsRecoverable.set -> void
AndroidX.Media3.ExoPlayer.Audio.AudioTrackInitializedEventArgs
AndroidX.Media3.ExoPlayer.Audio.AudioTrackInitializedEventArgs.AudioTrackConfig.get -> AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig?
AndroidX.Media3.ExoPlayer.Audio.AudioTrackInitializedEventArgs.AudioTrackInitializedEventArgs(AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? audioTrackConfig) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioTrackReleasedEventArgs
AndroidX.Media3.ExoPlayer.Audio.AudioTrackReleasedEventArgs.AudioTrackConfig.get -> AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig?
AndroidX.Media3.ExoPlayer.Audio.AudioTrackReleasedEventArgs.AudioTrackReleasedEventArgs(AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? audioTrackConfig) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioUnderrunEventArgs
AndroidX.Media3.ExoPlayer.Audio.AudioUnderrunEventArgs.AudioUnderrunEventArgs(int bufferSize, long bufferSizeMs, long elapsedSinceLastFeedMs) -> void
AndroidX.Media3.ExoPlayer.Audio.AudioUnderrunEventArgs.BufferSize.get -> int
AndroidX.Media3.ExoPlayer.Audio.AudioUnderrunEventArgs.BufferSizeMs.get -> long
AndroidX.Media3.ExoPlayer.Audio.AudioUnderrunEventArgs.ElapsedSinceLastFeedMs.get -> long
AndroidX.Media3.ExoPlayer.Audio.BaseAudioProcessor
AndroidX.Media3.ExoPlayer.Audio.BaseAudioProcessor.BaseAudioProcessor() -> void
AndroidX.Media3.ExoPlayer.Audio.BaseAudioProcessor.BaseAudioProcessor(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer
AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.DecoderAudioRenderer() -> void
AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.DecoderAudioRenderer(Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener? eventListener, AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities? audioCapabilities, params AndroidX.Media3.Common.Audio.IAudioProcessor![]? audioProcessors) -> void
AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.DecoderAudioRenderer(Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener? eventListener, AndroidX.Media3.ExoPlayer.Audio.IAudioSink? audioSink) -> void
AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.DecoderAudioRenderer(Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener? eventListener, params AndroidX.Media3.Common.Audio.IAudioProcessor![]? audioProcessors) -> void
AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.DecoderAudioRenderer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.GetSinkFormatSupport(AndroidX.Media3.Common.Format? format) -> int
AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.SinkSupportsFormat(AndroidX.Media3.Common.Format? format) -> bool
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioOffloadSupportProvider
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioOffloadSupportProvider.DefaultAudioOffloadSupportProvider() -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioOffloadSupportProvider.DefaultAudioOffloadSupportProvider(Android.Content.Context? context) -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioOffloadSupportProvider.GetAudioOffloadSupport(AndroidX.Media3.Common.Format? format, AndroidX.Media3.Common.AudioAttributes? audioAttributes) -> AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport?
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.AudioAttributes.get -> AndroidX.Media3.Common.AudioAttributes?
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.AudioAttributes.set -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.AudioTrackBufferSizeUs.get -> long
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder.Build() -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink?
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder.Builder() -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder.Builder(Android.Content.Context? context) -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder.SetAudioCapabilities(AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities? audioCapabilities) -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder?
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder.SetAudioOffloadSupportProvider(AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.IAudioOffloadSupportProvider? audioOffloadSupportProvider) -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder?
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder.SetAudioProcessorChain(AndroidX.Media3.Common.Audio.IAudioProcessorChain? audioProcessorChain) -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder?
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder.SetAudioProcessors(AndroidX.Media3.Common.Audio.IAudioProcessor![]? audioProcessors) -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder?
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder.SetAudioTrackBufferSizeProvider(AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.IAudioTrackBufferSizeProvider? audioTrackBufferSizeProvider) -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder?
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder.SetAudioTrackProvider(AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.IAudioTrackProvider? audioTrackProvider) -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder?
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder.SetEnableAudioTrackPlaybackParams(bool enableAudioTrackPlaybackParams) -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder?
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder.SetEnableFloatOutput(bool enableFloatOutput) -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder?
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder.SetExperimentalAudioOffloadListener(AndroidX.Media3.ExoPlayer.IExoPlayerAudioOffloadListener? audioOffloadListener) -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder?
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Configure(AndroidX.Media3.Common.Format? inputFormat, int specifiedBufferSize, int[]? outputChannels) -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.DefaultAudioProcessorChain
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.DefaultAudioProcessorChain.DefaultAudioProcessorChain(AndroidX.Media3.Common.Audio.IAudioProcessor![]? audioProcessors, AndroidX.Media3.ExoPlayer.Audio.SilenceSkippingAudioProcessor? silenceSkippingAudioProcessor, AndroidX.Media3.Common.Audio.SonicAudioProcessor? sonicAudioProcessor) -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.DefaultAudioProcessorChain.DefaultAudioProcessorChain(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.DefaultAudioProcessorChain.DefaultAudioProcessorChain(params AndroidX.Media3.Common.Audio.IAudioProcessor![]? audioProcessors) -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.DisableTunneling() -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.EnableTunnelingV21() -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Flush() -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.GetCurrentPositionUs(bool sourceEnded) -> long
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.GetFormatOffloadSupport(AndroidX.Media3.Common.Format? format) -> AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport?
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.GetFormatSupport(AndroidX.Media3.Common.Format? format) -> int
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.HandleBuffer(Java.Nio.ByteBuffer? buffer, long presentationTimeUs, int encodedAccessUnitCount) -> bool
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.HandleDiscontinuity() -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.HasPendingData.get -> bool
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.IAudioOffloadSupportProvider
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.IAudioOffloadSupportProvider.GetAudioOffloadSupport(AndroidX.Media3.Common.Format? p0, AndroidX.Media3.Common.AudioAttributes? p1) -> AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport?
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.IAudioProcessorChain
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.IAudioTrackBufferSizeProvider
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.IAudioTrackBufferSizeProvider.Default.get -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.IAudioTrackBufferSizeProvider?
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.IAudioTrackBufferSizeProvider.GetBufferSizeInBytes(int p0, int p1, int p2, int p3, int p4, int p5, double p6) -> int
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.IAudioTrackProvider
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.IAudioTrackProvider.Default.get -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.IAudioTrackProvider?
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.IAudioTrackProvider.GetAudioTrack(AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? p0, AndroidX.Media3.Common.AudioAttributes? p1, int p2) -> Android.Media.AudioTrack?
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.IOutputMode
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.InterfaceConsts
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.InvalidAudioTrackTimestampException
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.IsEnded.get -> bool
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.OnAudioCapabilitiesChanged(AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities? audioCapabilities) -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Pause() -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Play() -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.PlayToEndOfStream() -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.PlaybackParameters.get -> AndroidX.Media3.Common.PlaybackParameters?
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.PlaybackParameters.set -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Release() -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Reset() -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.SetAudioSessionId(int audioSessionId) -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.SetAuxEffectInfo(AndroidX.Media3.Common.AuxEffectInfo? auxEffectInfo) -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.SetClock(AndroidX.Media3.Common.Util.IClock? clock) -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.SetListener(AndroidX.Media3.ExoPlayer.Audio.IAudioSinkListener? listener) -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.SetOffloadDelayPadding(int delayInFrames, int paddingInFrames) -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.SetOffloadMode(int offloadMode) -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.SetPlayerId(AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.SetPreferredDevice(Android.Media.AudioDeviceInfo? audioDeviceInfo) -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.SetVolume(float volume) -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.SkipSilenceEnabled.get -> bool
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.SkipSilenceEnabled.set -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.SupportsFormat(AndroidX.Media3.Common.Format? format) -> bool
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Ac3BufferMultiplicationFactor.get -> int
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Ac3BufferMultiplicationFactor.set -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder.Builder() -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.DefaultAudioTrackBufferSizeProvider(AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder? builder) -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.DefaultAudioTrackBufferSizeProvider(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.DtshdBufferMultiplicationFactor.get -> int
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.DtshdBufferMultiplicationFactor.set -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.InterfaceConsts
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.MaxPcmBufferDurationUs.get -> int
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.MaxPcmBufferDurationUs.set -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.MinPcmBufferDurationUs.get -> int
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.MinPcmBufferDurationUs.set -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.OffloadBufferDurationUs.get -> int
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.OffloadBufferDurationUs.set -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.PassthroughBufferDurationUs.get -> int
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.PassthroughBufferDurationUs.set -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.PcmBufferMultiplicationFactor.get -> int
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.PcmBufferMultiplicationFactor.set -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackProvider
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackProvider.DefaultAudioTrackProvider() -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackProvider.DefaultAudioTrackProvider(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackProvider.GetAudioTrack(AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? audioTrackConfig, AndroidX.Media3.Common.AudioAttributes? audioAttributes, int audioSessionId) -> Android.Media.AudioTrack?
AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackProvider.InterfaceConsts
AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink
AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.ForwardingAudioSink(AndroidX.Media3.ExoPlayer.Audio.IAudioSink? sink) -> void
AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.ForwardingAudioSink(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.InterfaceConsts
AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener
AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener.OnAudioCodecError(Java.Lang.Exception? audioCodecError) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener.OnAudioDecoderInitialized(string? decoderName, long initializedTimestampMs, long initializationDurationMs) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener.OnAudioDecoderReleased(string? decoderName) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener.OnAudioDisabled(AndroidX.Media3.ExoPlayer.DecoderCounters? counters) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener.OnAudioEnabled(AndroidX.Media3.ExoPlayer.DecoderCounters? counters) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener.OnAudioInputFormatChanged(AndroidX.Media3.Common.Format? format, AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation? decoderReuseEvaluation) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener.OnAudioPositionAdvancing(long playoutStartSystemTimeMs) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener.OnAudioSinkError(Java.Lang.Exception? audioSinkError) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener.OnAudioTrackInitialized(AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? audioTrackConfig) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener.OnAudioTrackReleased(AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? audioTrackConfig) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener.OnAudioUnderrun(int bufferSize, long bufferSizeMs, long elapsedSinceLastFeedMs) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener.OnSkipSilenceEnabledChanged(bool skipSilenceEnabled) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.AudioAttributes.get -> AndroidX.Media3.Common.AudioAttributes?
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.AudioAttributes.set -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.AudioTrackBufferSizeUs.get -> long
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.Configure(AndroidX.Media3.Common.Format? p0, int p1, int[]? p2) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.DisableTunneling() -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.EnableTunnelingV21() -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.Flush() -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.GetCurrentPositionUs(bool p0) -> long
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.GetFormatOffloadSupport(AndroidX.Media3.Common.Format? format) -> AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport?
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.GetFormatSupport(AndroidX.Media3.Common.Format? p0) -> int
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.HandleBuffer(Java.Nio.ByteBuffer? p0, long p1, int p2) -> bool
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.HandleDiscontinuity() -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.HasPendingData.get -> bool
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.IsEnded.get -> bool
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.Pause() -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.Play() -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.PlayToEndOfStream() -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.PlaybackParameters.get -> AndroidX.Media3.Common.PlaybackParameters?
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.PlaybackParameters.set -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.Release() -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.Reset() -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.SetAudioSessionId(int p0) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.SetAuxEffectInfo(AndroidX.Media3.Common.AuxEffectInfo? p0) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.SetClock(AndroidX.Media3.Common.Util.IClock? clock) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.SetListener(AndroidX.Media3.ExoPlayer.Audio.IAudioSinkListener? p0) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.SetOffloadDelayPadding(int delayInFrames, int paddingInFrames) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.SetOffloadMode(int offloadMode) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.SetOutputStreamOffsetUs(long outputStreamOffsetUs) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.SetPlayerId(AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.SetPreferredDevice(Android.Media.AudioDeviceInfo? audioDeviceInfo) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.SetVolume(float p0) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.SkipSilenceEnabled.get -> bool
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.SkipSilenceEnabled.set -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSink.SupportsFormat(AndroidX.Media3.Common.Format? p0) -> bool
AndroidX.Media3.ExoPlayer.Audio.IAudioSinkListener
AndroidX.Media3.ExoPlayer.Audio.IAudioSinkListener.OnAudioCapabilitiesChanged() -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSinkListener.OnAudioSinkError(Java.Lang.Exception? audioSinkError) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSinkListener.OnAudioTrackInitialized(AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? audioTrackConfig) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSinkListener.OnAudioTrackReleased(AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? audioTrackConfig) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSinkListener.OnOffloadBufferEmptying() -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSinkListener.OnOffloadBufferFull() -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSinkListener.OnPositionAdvancing(long playoutStartSystemTimeMs) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSinkListener.OnPositionDiscontinuity() -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSinkListener.OnSilenceSkipped() -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSinkListener.OnSkipSilenceEnabledChanged(bool p0) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSinkListener.OnUnderrun(int p0, long p1, long p2) -> void
AndroidX.Media3.ExoPlayer.Audio.IAudioSinkOffloadMode
AndroidX.Media3.ExoPlayer.Audio.IAudioSinkSinkFormatSupport
AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer
AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.MediaCodecAudioRenderer(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterFactory? codecAdapterFactory, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, bool enableDecoderFallback, Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener? eventListener, AndroidX.Media3.ExoPlayer.Audio.IAudioSink? audioSink) -> void
AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.MediaCodecAudioRenderer(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterFactory? codecAdapterFactory, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, bool enableDecoderFallback, Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener? eventListener, AndroidX.Media3.ExoPlayer.Audio.IAudioSink? audioSink, AndroidX.Media3.ExoPlayer.MediaCodec.LoudnessCodecController? loudnessCodecController) -> void
AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.MediaCodecAudioRenderer(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector) -> void
AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.MediaCodecAudioRenderer(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener? eventListener) -> void
AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.MediaCodecAudioRenderer(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener? eventListener, AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities? audioCapabilities, params AndroidX.Media3.Common.Audio.IAudioProcessor![]? audioProcessors) -> void
AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.MediaCodecAudioRenderer(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener? eventListener, AndroidX.Media3.ExoPlayer.Audio.IAudioSink? audioSink) -> void
AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.MediaCodecAudioRenderer(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, bool enableDecoderFallback, Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener? eventListener, AndroidX.Media3.ExoPlayer.Audio.IAudioSink? audioSink) -> void
AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.MediaCodecAudioRenderer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Audio.OggOpusAudioPacketizer
AndroidX.Media3.ExoPlayer.Audio.OggOpusAudioPacketizer.OggOpusAudioPacketizer() -> void
AndroidX.Media3.ExoPlayer.Audio.OggOpusAudioPacketizer.Packetize(AndroidX.Media3.Decoder.DecoderInputBuffer? inputBuffer, System.Collections.Generic.IList<byte[]!>? initializationData) -> void
AndroidX.Media3.ExoPlayer.Audio.OggOpusAudioPacketizer.Reset() -> void
AndroidX.Media3.ExoPlayer.Audio.PcmAudioUtil
AndroidX.Media3.ExoPlayer.Audio.PositionAdvancingEventArgs
AndroidX.Media3.ExoPlayer.Audio.PositionAdvancingEventArgs.PlayoutStartSystemTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Audio.PositionAdvancingEventArgs.PositionAdvancingEventArgs(long playoutStartSystemTimeMs) -> void
AndroidX.Media3.ExoPlayer.Audio.SilenceSkippingAudioProcessor
AndroidX.Media3.ExoPlayer.Audio.SilenceSkippingAudioProcessor.OnFlush() -> void
AndroidX.Media3.ExoPlayer.Audio.SilenceSkippingAudioProcessor.OnQueueEndOfStream() -> void
AndroidX.Media3.ExoPlayer.Audio.SilenceSkippingAudioProcessor.OnReset() -> void
AndroidX.Media3.ExoPlayer.Audio.SilenceSkippingAudioProcessor.SetEnabled(bool enabled) -> void
AndroidX.Media3.ExoPlayer.Audio.SilenceSkippingAudioProcessor.SilenceSkippingAudioProcessor() -> void
AndroidX.Media3.ExoPlayer.Audio.SilenceSkippingAudioProcessor.SilenceSkippingAudioProcessor(long minimumSilenceDurationUs, float silenceRetentionRatio, long maxSilenceToKeepDurationUs, int minVolumeToKeepPercentageWhenMuting, short silenceThresholdLevel) -> void
AndroidX.Media3.ExoPlayer.Audio.SilenceSkippingAudioProcessor.SilenceSkippingAudioProcessor(long minimumSilenceDurationUs, long paddingSilenceUs, short silenceThresholdLevel) -> void
AndroidX.Media3.ExoPlayer.Audio.SilenceSkippingAudioProcessor.SkippedFrames.get -> long
AndroidX.Media3.ExoPlayer.Audio.SkipSilenceEnabledChangedEventArgs
AndroidX.Media3.ExoPlayer.Audio.SkipSilenceEnabledChangedEventArgs.P0.get -> bool
AndroidX.Media3.ExoPlayer.Audio.SkipSilenceEnabledChangedEventArgs.SkipSilenceEnabledChangedEventArgs(bool p0) -> void
AndroidX.Media3.ExoPlayer.Audio.TeeAudioProcessor
AndroidX.Media3.ExoPlayer.Audio.TeeAudioProcessor.IAudioBufferSink
AndroidX.Media3.ExoPlayer.Audio.TeeAudioProcessor.IAudioBufferSink.Flush(int p0, int p1, int p2) -> void
AndroidX.Media3.ExoPlayer.Audio.TeeAudioProcessor.IAudioBufferSink.HandleBuffer(Java.Nio.ByteBuffer? p0) -> void
AndroidX.Media3.ExoPlayer.Audio.TeeAudioProcessor.OnConfigure(AndroidX.Media3.Common.Audio.AudioProcessorAudioFormat? inputAudioFormat) -> AndroidX.Media3.Common.Audio.AudioProcessorAudioFormat?
AndroidX.Media3.ExoPlayer.Audio.TeeAudioProcessor.TeeAudioProcessor(AndroidX.Media3.ExoPlayer.Audio.TeeAudioProcessor.IAudioBufferSink? audioBufferSink) -> void
AndroidX.Media3.ExoPlayer.Audio.TeeAudioProcessor.WavFileAudioBufferSink
AndroidX.Media3.ExoPlayer.Audio.TeeAudioProcessor.WavFileAudioBufferSink.Flush(int sampleRateHz, int channelCount, int encoding) -> void
AndroidX.Media3.ExoPlayer.Audio.TeeAudioProcessor.WavFileAudioBufferSink.HandleBuffer(Java.Nio.ByteBuffer? buffer) -> void
AndroidX.Media3.ExoPlayer.Audio.TeeAudioProcessor.WavFileAudioBufferSink.WavFileAudioBufferSink(string? outputFileNamePrefix) -> void
AndroidX.Media3.ExoPlayer.Audio.UnderrunEventArgs
AndroidX.Media3.ExoPlayer.Audio.UnderrunEventArgs.P0.get -> int
AndroidX.Media3.ExoPlayer.Audio.UnderrunEventArgs.P1.get -> long
AndroidX.Media3.ExoPlayer.Audio.UnderrunEventArgs.P2.get -> long
AndroidX.Media3.ExoPlayer.Audio.UnderrunEventArgs.UnderrunEventArgs(int p0, long p1, long p2) -> void
AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink
AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.EventArgs
AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.EventArgs.EventArgs(int p0, AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.WaveformBar? p1) -> void
AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.EventArgs.P0.get -> int
AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.EventArgs.P1.get -> AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.WaveformBar?
AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.IListener
AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.IListener.OnNewWaveformBar(int p0, AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.WaveformBar? p1) -> void
AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.WaveformAudioBufferSink(int barsPerSecond, int outputChannelCount, AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.IListener? listener) -> void
AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.WaveformAudioBufferSink(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.WaveformBar
AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.WaveformBar.WaveformBar() -> void
AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.WaveformBar.WaveformBar(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.BaseRenderer
AndroidX.Media3.ExoPlayer.BaseRenderer.BaseRenderer(int trackType) -> void
AndroidX.Media3.ExoPlayer.BaseRenderer.BaseRenderer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.BaseRenderer.Capabilities.get -> AndroidX.Media3.ExoPlayer.IRendererCapabilities?
AndroidX.Media3.ExoPlayer.BaseRenderer.ClearListener() -> void
AndroidX.Media3.ExoPlayer.BaseRenderer.Clock.get -> AndroidX.Media3.Common.Util.IClock?
AndroidX.Media3.ExoPlayer.BaseRenderer.Configuration.get -> AndroidX.Media3.ExoPlayer.RendererConfiguration?
AndroidX.Media3.ExoPlayer.BaseRenderer.CreateRendererException(Java.Lang.Throwable? cause, AndroidX.Media3.Common.Format? format, bool isRecoverable, int errorCode) -> AndroidX.Media3.ExoPlayer.ExoPlaybackException?
AndroidX.Media3.ExoPlayer.BaseRenderer.CreateRendererException(Java.Lang.Throwable? cause, AndroidX.Media3.Common.Format? format, int errorCode) -> AndroidX.Media3.ExoPlayer.ExoPlaybackException?
AndroidX.Media3.ExoPlayer.BaseRenderer.Disable() -> void
AndroidX.Media3.ExoPlayer.BaseRenderer.Enable(AndroidX.Media3.ExoPlayer.RendererConfiguration? configuration, AndroidX.Media3.Common.Format![]? formats, AndroidX.Media3.ExoPlayer.Source.ISampleStream? stream, long positionUs, bool joining, bool mayRenderStartOfStream, long startPositionUs, long offsetUs, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
AndroidX.Media3.ExoPlayer.BaseRenderer.FormatHolder.get -> AndroidX.Media3.ExoPlayer.FormatHolder?
AndroidX.Media3.ExoPlayer.BaseRenderer.GetStreamFormats() -> AndroidX.Media3.Common.Format![]?
AndroidX.Media3.ExoPlayer.BaseRenderer.HasReadStreamToEnd.get -> bool
AndroidX.Media3.ExoPlayer.BaseRenderer.Index.get -> int
AndroidX.Media3.ExoPlayer.BaseRenderer.Init(int index, AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId, AndroidX.Media3.Common.Util.IClock? clock) -> void
AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts
AndroidX.Media3.ExoPlayer.BaseRenderer.IsCurrentStreamFinal.get -> bool
AndroidX.Media3.ExoPlayer.BaseRenderer.IsSourceReady.get -> bool
AndroidX.Media3.ExoPlayer.BaseRenderer.LastResetPositionUs.get -> long
AndroidX.Media3.ExoPlayer.BaseRenderer.MaybeThrowStreamError() -> void
AndroidX.Media3.ExoPlayer.BaseRenderer.OnRendererCapabilitiesChanged() -> void
AndroidX.Media3.ExoPlayer.BaseRenderer.PlayerId.get -> AndroidX.Media3.ExoPlayer.Analytics.PlayerId?
AndroidX.Media3.ExoPlayer.BaseRenderer.ReadSource(AndroidX.Media3.ExoPlayer.FormatHolder? formatHolder, AndroidX.Media3.Decoder.DecoderInputBuffer? buffer, int readFlags) -> int
AndroidX.Media3.ExoPlayer.BaseRenderer.ReadingPositionUs.get -> long
AndroidX.Media3.ExoPlayer.BaseRenderer.Release() -> void
AndroidX.Media3.ExoPlayer.BaseRenderer.ReplaceStream(AndroidX.Media3.Common.Format![]? formats, AndroidX.Media3.ExoPlayer.Source.ISampleStream? stream, long startPositionUs, long offsetUs, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
AndroidX.Media3.ExoPlayer.BaseRenderer.Reset() -> void
AndroidX.Media3.ExoPlayer.BaseRenderer.ResetPosition(long positionUs) -> void
AndroidX.Media3.ExoPlayer.BaseRenderer.SetCurrentStreamFinal() -> void
AndroidX.Media3.ExoPlayer.BaseRenderer.SetListener(AndroidX.Media3.ExoPlayer.IRendererCapabilitiesListener? listener) -> void
AndroidX.Media3.ExoPlayer.BaseRenderer.SetTimeline(AndroidX.Media3.Common.Timeline? timeline) -> void
AndroidX.Media3.ExoPlayer.BaseRenderer.Start() -> void
AndroidX.Media3.ExoPlayer.BaseRenderer.State.get -> int
AndroidX.Media3.ExoPlayer.BaseRenderer.Stop() -> void
AndroidX.Media3.ExoPlayer.BaseRenderer.Stream.get -> AndroidX.Media3.ExoPlayer.Source.ISampleStream?
AndroidX.Media3.ExoPlayer.BaseRenderer.StreamOffsetUs.get -> long
AndroidX.Media3.ExoPlayer.BaseRenderer.Timeline.get -> AndroidX.Media3.Common.Timeline?
AndroidX.Media3.ExoPlayer.BaseRenderer.TrackType.get -> int
AndroidX.Media3.ExoPlayer.DecoderCounters
AndroidX.Media3.ExoPlayer.DecoderCounters.AddVideoFrameProcessingOffset(long processingOffsetUs) -> void
AndroidX.Media3.ExoPlayer.DecoderCounters.DecoderCounters() -> void
AndroidX.Media3.ExoPlayer.DecoderCounters.DecoderInitCount.get -> int
AndroidX.Media3.ExoPlayer.DecoderCounters.DecoderInitCount.set -> void
AndroidX.Media3.ExoPlayer.DecoderCounters.DecoderReleaseCount.get -> int
AndroidX.Media3.ExoPlayer.DecoderCounters.DecoderReleaseCount.set -> void
AndroidX.Media3.ExoPlayer.DecoderCounters.DroppedBufferCount.get -> int
AndroidX.Media3.ExoPlayer.DecoderCounters.DroppedBufferCount.set -> void
AndroidX.Media3.ExoPlayer.DecoderCounters.DroppedInputBufferCount.get -> int
AndroidX.Media3.ExoPlayer.DecoderCounters.DroppedInputBufferCount.set -> void
AndroidX.Media3.ExoPlayer.DecoderCounters.DroppedToKeyframeCount.get -> int
AndroidX.Media3.ExoPlayer.DecoderCounters.DroppedToKeyframeCount.set -> void
AndroidX.Media3.ExoPlayer.DecoderCounters.EnsureUpdated() -> void
AndroidX.Media3.ExoPlayer.DecoderCounters.MaxConsecutiveDroppedBufferCount.get -> int
AndroidX.Media3.ExoPlayer.DecoderCounters.MaxConsecutiveDroppedBufferCount.set -> void
AndroidX.Media3.ExoPlayer.DecoderCounters.Merge(AndroidX.Media3.ExoPlayer.DecoderCounters? other) -> void
AndroidX.Media3.ExoPlayer.DecoderCounters.QueuedInputBufferCount.get -> int
AndroidX.Media3.ExoPlayer.DecoderCounters.QueuedInputBufferCount.set -> void
AndroidX.Media3.ExoPlayer.DecoderCounters.RenderedOutputBufferCount.get -> int
AndroidX.Media3.ExoPlayer.DecoderCounters.RenderedOutputBufferCount.set -> void
AndroidX.Media3.ExoPlayer.DecoderCounters.SkippedInputBufferCount.get -> int
AndroidX.Media3.ExoPlayer.DecoderCounters.SkippedInputBufferCount.set -> void
AndroidX.Media3.ExoPlayer.DecoderCounters.SkippedOutputBufferCount.get -> int
AndroidX.Media3.ExoPlayer.DecoderCounters.SkippedOutputBufferCount.set -> void
AndroidX.Media3.ExoPlayer.DecoderCounters.TotalVideoFrameProcessingOffsetUs.get -> long
AndroidX.Media3.ExoPlayer.DecoderCounters.TotalVideoFrameProcessingOffsetUs.set -> void
AndroidX.Media3.ExoPlayer.DecoderCounters.VideoFrameProcessingOffsetCount.get -> int
AndroidX.Media3.ExoPlayer.DecoderCounters.VideoFrameProcessingOffsetCount.set -> void
AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation
AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.DecoderName.get -> string?
AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.DecoderName.set -> void
AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.DecoderReuseEvaluation(string? decoderName, AndroidX.Media3.Common.Format? oldFormat, AndroidX.Media3.Common.Format? newFormat, int result, int discardReasons) -> void
AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.DiscardReasons.get -> int
AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.DiscardReasons.set -> void
AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.IDecoderDiscardReasons
AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.IDecoderReuseResult
AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.NewFormat.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.NewFormat.set -> void
AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.OldFormat.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.OldFormat.set -> void
AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.Result.get -> int
AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.Result.set -> void
AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl
AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.Builder
AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.Builder.Build() -> AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl?
AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.Builder.Builder() -> void
AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.Builder.SetFallbackMaxPlaybackSpeed(float fallbackMaxPlaybackSpeed) -> AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.Builder?
AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.Builder.SetFallbackMinPlaybackSpeed(float fallbackMinPlaybackSpeed) -> AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.Builder?
AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.Builder.SetMaxLiveOffsetErrorMsForUnitSpeed(long maxLiveOffsetErrorMsForUnitSpeed) -> AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.Builder?
AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.Builder.SetMinPossibleLiveOffsetSmoothingFactor(float minPossibleLiveOffsetSmoothingFactor) -> AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.Builder?
AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.Builder.SetMinUpdateIntervalMs(long minUpdateIntervalMs) -> AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.Builder?
AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.Builder.SetProportionalControlFactor(float proportionalControlFactor) -> AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.Builder?
AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.Builder.SetTargetLiveOffsetIncrementOnRebufferMs(long targetLiveOffsetIncrementOnRebufferMs) -> AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.Builder?
AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.GetAdjustedPlaybackSpeed(long liveOffsetUs, long bufferedDurationUs) -> float
AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.NotifyRebuffer() -> void
AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.SetLiveConfiguration(AndroidX.Media3.Common.MediaItem.LiveConfiguration? liveConfiguration) -> void
AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.SetTargetLiveOffsetOverrideUs(long liveOffsetUs) -> void
AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.TargetLiveOffsetUs.get -> long
AndroidX.Media3.ExoPlayer.DefaultLoadControl
AndroidX.Media3.ExoPlayer.DefaultLoadControl.Builder
AndroidX.Media3.ExoPlayer.DefaultLoadControl.Builder.Build() -> AndroidX.Media3.ExoPlayer.DefaultLoadControl?
AndroidX.Media3.ExoPlayer.DefaultLoadControl.Builder.Builder() -> void
AndroidX.Media3.ExoPlayer.DefaultLoadControl.Builder.SetAllocator(AndroidX.Media3.ExoPlayer.Upstream.DefaultAllocator? allocator) -> AndroidX.Media3.ExoPlayer.DefaultLoadControl.Builder?
AndroidX.Media3.ExoPlayer.DefaultLoadControl.Builder.SetBackBuffer(int backBufferDurationMs, bool retainBackBufferFromKeyframe) -> AndroidX.Media3.ExoPlayer.DefaultLoadControl.Builder?
AndroidX.Media3.ExoPlayer.DefaultLoadControl.Builder.SetBufferDurationsMs(int minBufferMs, int maxBufferMs, int bufferForPlaybackMs, int bufferForPlaybackAfterRebufferMs) -> AndroidX.Media3.ExoPlayer.DefaultLoadControl.Builder?
AndroidX.Media3.ExoPlayer.DefaultLoadControl.Builder.SetPrioritizeTimeOverSizeThresholds(bool prioritizeTimeOverSizeThresholds) -> AndroidX.Media3.ExoPlayer.DefaultLoadControl.Builder?
AndroidX.Media3.ExoPlayer.DefaultLoadControl.Builder.SetTargetBufferBytes(int targetBufferBytes) -> AndroidX.Media3.ExoPlayer.DefaultLoadControl.Builder?
AndroidX.Media3.ExoPlayer.DefaultLoadControl.CalculateTargetBufferBytes(AndroidX.Media3.ExoPlayer.IRenderer![]? renderers, AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection![]? trackSelectionArray) -> int
AndroidX.Media3.ExoPlayer.DefaultLoadControl.DefaultLoadControl() -> void
AndroidX.Media3.ExoPlayer.DefaultLoadControl.DefaultLoadControl(AndroidX.Media3.ExoPlayer.Upstream.DefaultAllocator? allocator, int minBufferMs, int maxBufferMs, int bufferForPlaybackMs, int bufferForPlaybackAfterRebufferMs, int targetBufferBytes, bool prioritizeTimeOverSizeThresholds, int backBufferDurationMs, bool retainBackBufferFromKeyframe) -> void
AndroidX.Media3.ExoPlayer.DefaultLoadControl.DefaultLoadControl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.DefaultLoadControl.InterfaceConsts
AndroidX.Media3.ExoPlayer.DefaultRendererCapabilitiesList
AndroidX.Media3.ExoPlayer.DefaultRendererCapabilitiesList.Factory
AndroidX.Media3.ExoPlayer.DefaultRendererCapabilitiesList.Factory.CreateRendererCapabilitiesList() -> AndroidX.Media3.ExoPlayer.IRendererCapabilitiesList?
AndroidX.Media3.ExoPlayer.DefaultRendererCapabilitiesList.Factory.Factory(Android.Content.Context? context) -> void
AndroidX.Media3.ExoPlayer.DefaultRendererCapabilitiesList.Factory.Factory(AndroidX.Media3.ExoPlayer.IRenderersFactory? renderersFactory) -> void
AndroidX.Media3.ExoPlayer.DefaultRendererCapabilitiesList.GetRendererCapabilities() -> AndroidX.Media3.ExoPlayer.IRendererCapabilities![]?
AndroidX.Media3.ExoPlayer.DefaultRendererCapabilitiesList.Release() -> void
AndroidX.Media3.ExoPlayer.DefaultRendererCapabilitiesList.Size() -> int
AndroidX.Media3.ExoPlayer.DefaultRenderersFactory
AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.DefaultRenderersFactory(Android.Content.Context? context) -> void
AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.DefaultRenderersFactory(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.ExperimentalSetEnableMediaCodecVideoRendererPrewarming(bool enableMediaCodecVideoRendererPrewarming) -> AndroidX.Media3.ExoPlayer.DefaultRenderersFactory?
AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.ExperimentalSetLateThresholdToDropDecoderInputUs(long lateThresholdToDropDecoderInputUs) -> AndroidX.Media3.ExoPlayer.DefaultRenderersFactory?
AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.ExperimentalSetMediaCodecAsyncCryptoFlagEnabled(bool enableAsyncCryptoFlag) -> AndroidX.Media3.ExoPlayer.DefaultRenderersFactory?
AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.ExperimentalSetParseAv1SampleDependencies(bool parseAv1SampleDependencies) -> AndroidX.Media3.ExoPlayer.DefaultRenderersFactory?
AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.ForceDisableMediaCodecAsynchronousQueueing() -> AndroidX.Media3.ExoPlayer.DefaultRenderersFactory?
AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.ForceEnableMediaCodecAsynchronousQueueing() -> AndroidX.Media3.ExoPlayer.DefaultRenderersFactory?
AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.IExtensionRendererMode
AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.SetAllowedVideoJoiningTimeMs(long allowedVideoJoiningTimeMs) -> AndroidX.Media3.ExoPlayer.DefaultRenderersFactory?
AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.SetEnableAudioFloatOutput(bool enableFloatOutput) -> AndroidX.Media3.ExoPlayer.DefaultRenderersFactory?
AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.SetEnableAudioTrackPlaybackParams(bool enableAudioTrackPlaybackParams) -> AndroidX.Media3.ExoPlayer.DefaultRenderersFactory?
AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.SetEnableDecoderFallback(bool enableDecoderFallback) -> AndroidX.Media3.ExoPlayer.DefaultRenderersFactory?
AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.SetExtensionRendererMode(int extensionRendererMode) -> AndroidX.Media3.ExoPlayer.DefaultRenderersFactory?
AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.SetMediaCodecSelector(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector) -> AndroidX.Media3.ExoPlayer.DefaultRenderersFactory?
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.Builder
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.Builder.Build(AndroidX.Media3.ExoPlayer.Drm.IMediaDrmCallback? mediaDrmCallback) -> AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager?
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.Builder.Builder() -> void
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.Builder.SetKeyRequestParameters(System.Collections.Generic.IDictionary<string!, string!>? keyRequestParameters) -> AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.Builder?
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.Builder.SetLoadErrorHandlingPolicy(AndroidX.Media3.ExoPlayer.Upstream.ILoadErrorHandlingPolicy? loadErrorHandlingPolicy) -> AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.Builder?
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.Builder.SetMultiSession(bool multiSession) -> AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.Builder?
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.Builder.SetPlayClearSamplesWithoutKeys(bool playClearSamplesWithoutKeys) -> AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.Builder?
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.Builder.SetSessionKeepaliveMs(long sessionKeepaliveMs) -> AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.Builder?
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.Builder.SetUseDrmSessionsForClearContent(params int[]? useDrmSessionsForClearContentTrackTypes) -> AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.Builder?
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.Builder.SetUuidAndExoMediaDrmProvider(Java.Util.UUID? uuid, AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrmProvider? exoMediaDrmProvider) -> AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.Builder?
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.DefaultDrmSessionManager(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.IMode
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.InterfaceConsts
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.MissingSchemeDataException
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.Prepare() -> void
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.Release() -> void
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManagerProvider
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManagerProvider.DefaultDrmSessionManagerProvider() -> void
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManagerProvider.Get(AndroidX.Media3.Common.MediaItem? mediaItem) -> AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManager?
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManagerProvider.SetDrmHttpDataSourceFactory(AndroidX.Media3.DataSource.IDataSourceFactory? drmDataSourceFactory) -> void
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManagerProvider.SetDrmLoadErrorHandlingPolicy(AndroidX.Media3.ExoPlayer.Upstream.ILoadErrorHandlingPolicy? drmLoadErrorHandlingPolicy) -> void
AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManagerProvider.SetDrmUserAgent(string? userAgent) -> void
AndroidX.Media3.ExoPlayer.Drm.DrmKeysLoadedEventArgs
AndroidX.Media3.ExoPlayer.Drm.DrmKeysLoadedEventArgs.DrmKeysLoadedEventArgs(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
AndroidX.Media3.ExoPlayer.Drm.DrmKeysLoadedEventArgs.MediaPeriodId.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Drm.DrmKeysLoadedEventArgs.WindowIndex.get -> int
AndroidX.Media3.ExoPlayer.Drm.DrmKeysRemovedEventArgs
AndroidX.Media3.ExoPlayer.Drm.DrmKeysRemovedEventArgs.DrmKeysRemovedEventArgs(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
AndroidX.Media3.ExoPlayer.Drm.DrmKeysRemovedEventArgs.MediaPeriodId.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Drm.DrmKeysRemovedEventArgs.WindowIndex.get -> int
AndroidX.Media3.ExoPlayer.Drm.DrmKeysRestoredEventArgs
AndroidX.Media3.ExoPlayer.Drm.DrmKeysRestoredEventArgs.DrmKeysRestoredEventArgs(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
AndroidX.Media3.ExoPlayer.Drm.DrmKeysRestoredEventArgs.MediaPeriodId.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Drm.DrmKeysRestoredEventArgs.WindowIndex.get -> int
AndroidX.Media3.ExoPlayer.Drm.DrmSessionAcquiredEventArgs
AndroidX.Media3.ExoPlayer.Drm.DrmSessionAcquiredEventArgs.DrmSessionAcquiredEventArgs(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, int state) -> void
AndroidX.Media3.ExoPlayer.Drm.DrmSessionAcquiredEventArgs.MediaPeriodId.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Drm.DrmSessionAcquiredEventArgs.State.get -> int
AndroidX.Media3.ExoPlayer.Drm.DrmSessionAcquiredEventArgs.WindowIndex.get -> int
AndroidX.Media3.ExoPlayer.Drm.DrmSessionDrmSessionException
AndroidX.Media3.ExoPlayer.Drm.DrmSessionDrmSessionException.DrmSessionDrmSessionException(Java.Lang.Throwable? cause, int errorCode) -> void
AndroidX.Media3.ExoPlayer.Drm.DrmSessionDrmSessionException.DrmSessionDrmSessionException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Drm.DrmSessionDrmSessionException.ErrorCode.get -> int
AndroidX.Media3.ExoPlayer.Drm.DrmSessionDrmSessionException.ErrorCode.set -> void
AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher
AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher.DrmSessionEventListenerEventDispatcher() -> void
AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher.DrmSessionEventListenerEventDispatcher(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher.MediaPeriodId.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher.MediaPeriodId.set -> void
AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher.WindowIndex.get -> int
AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher.WindowIndex.set -> void
AndroidX.Media3.ExoPlayer.Drm.DrmSessionManagerErrorEventArgs
AndroidX.Media3.ExoPlayer.Drm.DrmSessionManagerErrorEventArgs.DrmSessionManagerErrorEventArgs(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, Java.Lang.Exception? error) -> void
AndroidX.Media3.ExoPlayer.Drm.DrmSessionManagerErrorEventArgs.Error.get -> Java.Lang.Exception?
AndroidX.Media3.ExoPlayer.Drm.DrmSessionManagerErrorEventArgs.MediaPeriodId.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Drm.DrmSessionManagerErrorEventArgs.WindowIndex.get -> int
AndroidX.Media3.ExoPlayer.Drm.DrmSessionReleasedEventArgs
AndroidX.Media3.ExoPlayer.Drm.DrmSessionReleasedEventArgs.DrmSessionReleasedEventArgs(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
AndroidX.Media3.ExoPlayer.Drm.DrmSessionReleasedEventArgs.MediaPeriodId.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Drm.DrmSessionReleasedEventArgs.WindowIndex.get -> int
AndroidX.Media3.ExoPlayer.Drm.DrmUtil
AndroidX.Media3.ExoPlayer.Drm.DrmUtil.IErrorSource
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.Acquire() -> void
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.CloseSession(byte[]? sessionId) -> void
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.CreateCryptoConfig(byte[]? sessionId) -> AndroidX.Media3.Decoder.ICryptoConfig?
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.CryptoType.get -> int
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.DummyExoMediaDrm() -> void
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.Event -> System.EventHandler<AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnEventEventArgs!>!
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.ExpirationUpdate -> System.EventHandler<AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnExpirationUpdateEventArgs!>!
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.GetKeyRequest(byte[]? scope, System.Collections.Generic.IList<AndroidX.Media3.Common.DrmInitData.SchemeData!>? schemeDatas, int keyType, System.Collections.Generic.IDictionary<string!, string!>? optionalParameters) -> AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyRequest?
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.GetPropertyByteArray(string? propertyName) -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.GetPropertyString(string? propertyName) -> string?
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.InterfaceConsts
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.KeyStatusChange -> System.EventHandler<AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnKeyStatusChangeEventArgs!>!
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.Metrics.get -> Android.OS.PersistableBundle?
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.OpenSession() -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.ProvideKeyResponse(byte[]? scope, byte[]? response) -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.ProvideProvisionResponse(byte[]? response) -> void
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.ProvisionRequest.get -> AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmProvisionRequest?
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.QueryKeyStatus(byte[]? sessionId) -> System.Collections.Generic.IDictionary<string!, string!>?
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.Release() -> void
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.RequiresSecureDecoder(byte[]? sessionId, string? mimeType) -> bool
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.RestoreKeys(byte[]? sessionId, byte[]? keySetId) -> void
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.SetOnEventListener(AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrmOnEventListener? listener) -> void
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.SetOnExpirationUpdateListener(AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrmOnExpirationUpdateListener? listener) -> void
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.SetOnKeyStatusChangeListener(AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrmOnKeyStatusChangeListener? listener) -> void
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.SetPropertyByteArray(string? propertyName, byte[]? value) -> void
AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.SetPropertyString(string? propertyName, string? value) -> void
AndroidX.Media3.ExoPlayer.Drm.ErrorStateDrmSession
AndroidX.Media3.ExoPlayer.Drm.ErrorStateDrmSession.Acquire(AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher? eventDispatcher) -> void
AndroidX.Media3.ExoPlayer.Drm.ErrorStateDrmSession.CryptoConfig.get -> AndroidX.Media3.Decoder.ICryptoConfig?
AndroidX.Media3.ExoPlayer.Drm.ErrorStateDrmSession.Error.get -> AndroidX.Media3.ExoPlayer.Drm.DrmSessionDrmSessionException?
AndroidX.Media3.ExoPlayer.Drm.ErrorStateDrmSession.ErrorStateDrmSession(AndroidX.Media3.ExoPlayer.Drm.DrmSessionDrmSessionException? error) -> void
AndroidX.Media3.ExoPlayer.Drm.ErrorStateDrmSession.GetOfflineLicenseKeySetId() -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.ErrorStateDrmSession.InterfaceConsts
AndroidX.Media3.ExoPlayer.Drm.ErrorStateDrmSession.PlayClearSamplesWithoutKeys() -> bool
AndroidX.Media3.ExoPlayer.Drm.ErrorStateDrmSession.QueryKeyStatus() -> System.Collections.Generic.IDictionary<string!, string!>?
AndroidX.Media3.ExoPlayer.Drm.ErrorStateDrmSession.Release(AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher? eventDispatcher) -> void
AndroidX.Media3.ExoPlayer.Drm.ErrorStateDrmSession.RequiresSecureDecoder(string? mimeType) -> bool
AndroidX.Media3.ExoPlayer.Drm.ErrorStateDrmSession.SchemeUuid.get -> Java.Util.UUID?
AndroidX.Media3.ExoPlayer.Drm.ErrorStateDrmSession.State.get -> int
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmAppManagedProvider
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmAppManagedProvider.AcquireExoMediaDrm(Java.Util.UUID? uuid) -> AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm?
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmAppManagedProvider.ExoMediaDrmAppManagedProvider(AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm? exoMediaDrm) -> void
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyRequest
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyRequest.ExoMediaDrmKeyRequest(byte[]? data, string? licenseServerUrl) -> void
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyRequest.ExoMediaDrmKeyRequest(byte[]? data, string? licenseServerUrl, int requestType) -> void
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyRequest.GetData() -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyRequest.IRequestType
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyRequest.LicenseServerUrl.get -> string?
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyRequest.RequestType.get -> int
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyStatus
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyStatus.ExoMediaDrmKeyStatus(int statusCode, byte[]? keyId) -> void
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyStatus.GetKeyId() -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyStatus.StatusCode.get -> int
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnEventEventArgs
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnEventEventArgs.ExoMediaDrmOnEventEventArgs(AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm? p0, byte[]? p1, int p2, int p3, byte[]? p4) -> void
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnEventEventArgs.P0.get -> AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm?
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnEventEventArgs.P1.get -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnEventEventArgs.P2.get -> int
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnEventEventArgs.P3.get -> int
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnEventEventArgs.P4.get -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnExpirationUpdateEventArgs
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnExpirationUpdateEventArgs.ExoMediaDrmOnExpirationUpdateEventArgs(AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm? p0, byte[]? p1, long p2) -> void
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnExpirationUpdateEventArgs.P0.get -> AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm?
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnExpirationUpdateEventArgs.P1.get -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnExpirationUpdateEventArgs.P2.get -> long
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnKeyStatusChangeEventArgs
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnKeyStatusChangeEventArgs.ExoMediaDrmOnKeyStatusChangeEventArgs(AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm? p0, byte[]? p1, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyStatus!>? p2, bool p3) -> void
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnKeyStatusChangeEventArgs.P0.get -> AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm?
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnKeyStatusChangeEventArgs.P1.get -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnKeyStatusChangeEventArgs.P2.get -> System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyStatus!>?
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnKeyStatusChangeEventArgs.P3.get -> bool
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmProvisionRequest
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmProvisionRequest.DefaultUrl.get -> string?
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmProvisionRequest.ExoMediaDrmProvisionRequest(byte[]? data, string? defaultUrl) -> void
AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmProvisionRequest.GetData() -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.FrameworkCryptoConfig
AndroidX.Media3.ExoPlayer.Drm.FrameworkCryptoConfig.ForceAllowInsecureDecoderComponents.get -> bool
AndroidX.Media3.ExoPlayer.Drm.FrameworkCryptoConfig.ForceAllowInsecureDecoderComponents.set -> void
AndroidX.Media3.ExoPlayer.Drm.FrameworkCryptoConfig.FrameworkCryptoConfig(Java.Util.UUID? uuid, byte[]? sessionId) -> void
AndroidX.Media3.ExoPlayer.Drm.FrameworkCryptoConfig.FrameworkCryptoConfig(Java.Util.UUID? uuid, byte[]? sessionId, bool forceAllowInsecureDecoderComponents) -> void
AndroidX.Media3.ExoPlayer.Drm.FrameworkCryptoConfig.SessionId.get -> System.Collections.Generic.IList<byte>?
AndroidX.Media3.ExoPlayer.Drm.FrameworkCryptoConfig.SessionId.set -> void
AndroidX.Media3.ExoPlayer.Drm.FrameworkCryptoConfig.Uuid.get -> Java.Util.UUID?
AndroidX.Media3.ExoPlayer.Drm.FrameworkCryptoConfig.Uuid.set -> void
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.Acquire() -> void
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.CloseSession(byte[]? sessionId) -> void
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.CreateCryptoConfig(byte[]? sessionId) -> AndroidX.Media3.Decoder.ICryptoConfig?
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.CryptoType.get -> int
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.Event -> System.EventHandler<AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnEventEventArgs!>!
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.ExpirationUpdate -> System.EventHandler<AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnExpirationUpdateEventArgs!>!
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.GetKeyRequest(byte[]? scope, System.Collections.Generic.IList<AndroidX.Media3.Common.DrmInitData.SchemeData!>? schemeDatas, int keyType, System.Collections.Generic.IDictionary<string!, string!>? optionalParameters) -> AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyRequest?
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.GetPropertyByteArray(string? propertyName) -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.GetPropertyString(string? propertyName) -> string?
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.InterfaceConsts
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.KeyStatusChange -> System.EventHandler<AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmOnKeyStatusChangeEventArgs!>!
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.Metrics.get -> Android.OS.PersistableBundle?
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.OfflineLicenseKeySetIds.get -> System.Collections.Generic.IList<byte[]!>?
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.OpenSession() -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.ProvideKeyResponse(byte[]? scope, byte[]? response) -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.ProvideProvisionResponse(byte[]? response) -> void
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.ProvisionRequest.get -> AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmProvisionRequest?
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.QueryKeyStatus(byte[]? sessionId) -> System.Collections.Generic.IDictionary<string!, string!>?
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.Release() -> void
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.RemoveOfflineLicense(byte[]? keySetId) -> void
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.RequiresSecureDecoder(byte[]? sessionId, string? mimeType) -> bool
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.RestoreKeys(byte[]? sessionId, byte[]? keySetId) -> void
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.SetOnEventListener(AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrmOnEventListener? listener) -> void
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.SetOnExpirationUpdateListener(AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrmOnExpirationUpdateListener? listener) -> void
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.SetOnKeyStatusChangeListener(AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrmOnKeyStatusChangeListener? listener) -> void
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.SetPlayerIdForSession(byte[]? sessionId, AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> void
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.SetPropertyByteArray(string? propertyName, byte[]? value) -> void
AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.SetPropertyString(string? propertyName, string? value) -> void
AndroidX.Media3.ExoPlayer.Drm.HttpMediaDrmCallback
AndroidX.Media3.ExoPlayer.Drm.HttpMediaDrmCallback.ClearAllKeyRequestProperties() -> void
AndroidX.Media3.ExoPlayer.Drm.HttpMediaDrmCallback.ClearKeyRequestProperty(string? name) -> void
AndroidX.Media3.ExoPlayer.Drm.HttpMediaDrmCallback.ExecuteKeyRequest(Java.Util.UUID? uuid, AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyRequest? request) -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.HttpMediaDrmCallback.ExecuteProvisionRequest(Java.Util.UUID? uuid, AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmProvisionRequest? request) -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.HttpMediaDrmCallback.HttpMediaDrmCallback(string? defaultLicenseUrl, AndroidX.Media3.DataSource.IDataSourceFactory? dataSourceFactory) -> void
AndroidX.Media3.ExoPlayer.Drm.HttpMediaDrmCallback.HttpMediaDrmCallback(string? defaultLicenseUrl, bool forceDefaultLicenseUrl, AndroidX.Media3.DataSource.IDataSourceFactory? dataSourceFactory) -> void
AndroidX.Media3.ExoPlayer.Drm.HttpMediaDrmCallback.SetKeyRequestProperty(string? name, string? value) -> void
AndroidX.Media3.ExoPlayer.Drm.IDrmSession
AndroidX.Media3.ExoPlayer.Drm.IDrmSession.Acquire(AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher? p0) -> void
AndroidX.Media3.ExoPlayer.Drm.IDrmSession.CryptoConfig.get -> AndroidX.Media3.Decoder.ICryptoConfig?
AndroidX.Media3.ExoPlayer.Drm.IDrmSession.Error.get -> AndroidX.Media3.ExoPlayer.Drm.DrmSessionDrmSessionException?
AndroidX.Media3.ExoPlayer.Drm.IDrmSession.GetOfflineLicenseKeySetId() -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.IDrmSession.PlayClearSamplesWithoutKeys() -> bool
AndroidX.Media3.ExoPlayer.Drm.IDrmSession.QueryKeyStatus() -> System.Collections.Generic.IDictionary<string!, string!>?
AndroidX.Media3.ExoPlayer.Drm.IDrmSession.Release(AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher? p0) -> void
AndroidX.Media3.ExoPlayer.Drm.IDrmSession.ReplaceSession(AndroidX.Media3.ExoPlayer.Drm.IDrmSession? previousSession, AndroidX.Media3.ExoPlayer.Drm.IDrmSession? newSession) -> void
AndroidX.Media3.ExoPlayer.Drm.IDrmSession.RequiresSecureDecoder(string? p0) -> bool
AndroidX.Media3.ExoPlayer.Drm.IDrmSession.SchemeUuid.get -> Java.Util.UUID?
AndroidX.Media3.ExoPlayer.Drm.IDrmSession.State.get -> int
AndroidX.Media3.ExoPlayer.Drm.IDrmSessionEventListener
AndroidX.Media3.ExoPlayer.Drm.IDrmSessionEventListener.OnDrmKeysLoaded(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
AndroidX.Media3.ExoPlayer.Drm.IDrmSessionEventListener.OnDrmKeysRemoved(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
AndroidX.Media3.ExoPlayer.Drm.IDrmSessionEventListener.OnDrmKeysRestored(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
AndroidX.Media3.ExoPlayer.Drm.IDrmSessionEventListener.OnDrmSessionAcquired(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, int state) -> void
AndroidX.Media3.ExoPlayer.Drm.IDrmSessionEventListener.OnDrmSessionManagerError(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, Java.Lang.Exception? error) -> void
AndroidX.Media3.ExoPlayer.Drm.IDrmSessionEventListener.OnDrmSessionReleased(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManager
AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManager.AcquireSession(AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher? p0, AndroidX.Media3.Common.Format? p1) -> AndroidX.Media3.ExoPlayer.Drm.IDrmSession?
AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManager.DrmUnsupported.get -> AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManager?
AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManager.GetCryptoType(AndroidX.Media3.Common.Format? p0) -> int
AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManager.PreacquireSession(AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher? eventDispatcher, AndroidX.Media3.Common.Format? format) -> AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManagerDrmSessionReference?
AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManager.Prepare() -> void
AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManager.Release() -> void
AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManager.SetPlayer(Android.OS.Looper? p0, AndroidX.Media3.ExoPlayer.Analytics.PlayerId? p1) -> void
AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManagerDrmSessionReference
AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManagerDrmSessionReference.Empty.get -> AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManagerDrmSessionReference?
AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManagerDrmSessionReference.Release() -> void
AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManagerProvider
AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManagerProvider.Get(AndroidX.Media3.Common.MediaItem? p0) -> AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManager?
AndroidX.Media3.ExoPlayer.Drm.IDrmSessionState
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.Acquire() -> void
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.CloseSession(byte[]? p0) -> void
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.CreateCryptoConfig(byte[]? p0) -> AndroidX.Media3.Decoder.ICryptoConfig?
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.CryptoType.get -> int
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.GetKeyRequest(byte[]? p0, System.Collections.Generic.IList<AndroidX.Media3.Common.DrmInitData.SchemeData!>? p1, int p2, System.Collections.Generic.IDictionary<string!, string!>? p3) -> AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyRequest?
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.GetPropertyByteArray(string? p0) -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.GetPropertyString(string? p0) -> string?
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.Metrics.get -> Android.OS.PersistableBundle?
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.OfflineLicenseKeySetIds.get -> System.Collections.Generic.IList<byte[]!>?
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.OpenSession() -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.ProvideKeyResponse(byte[]? p0, byte[]? p1) -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.ProvideProvisionResponse(byte[]? p0) -> void
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.ProvisionRequest.get -> AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmProvisionRequest?
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.QueryKeyStatus(byte[]? p0) -> System.Collections.Generic.IDictionary<string!, string!>?
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.Release() -> void
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.RemoveOfflineLicense(byte[]? keySetId) -> void
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.RequiresSecureDecoder(byte[]? p0, string? p1) -> bool
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.RestoreKeys(byte[]? p0, byte[]? p1) -> void
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.SetOnEventListener(AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrmOnEventListener? p0) -> void
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.SetOnExpirationUpdateListener(AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrmOnExpirationUpdateListener? p0) -> void
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.SetOnKeyStatusChangeListener(AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrmOnKeyStatusChangeListener? p0) -> void
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.SetPlayerIdForSession(byte[]? sessionId, AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> void
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.SetPropertyByteArray(string? p0, byte[]? p1) -> void
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm.SetPropertyString(string? p0, string? p1) -> void
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrmOnEventListener
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrmOnEventListener.OnEvent(AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm? p0, byte[]? p1, int p2, int p3, byte[]? p4) -> void
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrmOnExpirationUpdateListener
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrmOnExpirationUpdateListener.OnExpirationUpdate(AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm? p0, byte[]? p1, long p2) -> void
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrmOnKeyStatusChangeListener
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrmOnKeyStatusChangeListener.OnKeyStatusChange(AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm? p0, byte[]? p1, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyStatus!>? p2, bool p3) -> void
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrmProvider
AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrmProvider.AcquireExoMediaDrm(Java.Util.UUID? p0) -> AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrm?
AndroidX.Media3.ExoPlayer.Drm.IMediaDrmCallback
AndroidX.Media3.ExoPlayer.Drm.IMediaDrmCallback.ExecuteKeyRequest(Java.Util.UUID? p0, AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyRequest? p1) -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.IMediaDrmCallback.ExecuteProvisionRequest(Java.Util.UUID? p0, AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmProvisionRequest? p1) -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.KeysExpiredException
AndroidX.Media3.ExoPlayer.Drm.KeysExpiredException.KeysExpiredException() -> void
AndroidX.Media3.ExoPlayer.Drm.LocalMediaDrmCallback
AndroidX.Media3.ExoPlayer.Drm.LocalMediaDrmCallback.ExecuteKeyRequest(Java.Util.UUID? uuid, AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyRequest? request) -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.LocalMediaDrmCallback.ExecuteProvisionRequest(Java.Util.UUID? uuid, AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmProvisionRequest? request) -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.LocalMediaDrmCallback.LocalMediaDrmCallback(byte[]? keyResponse) -> void
AndroidX.Media3.ExoPlayer.Drm.MediaDrmCallbackException
AndroidX.Media3.ExoPlayer.Drm.MediaDrmCallbackException.BytesLoaded.get -> long
AndroidX.Media3.ExoPlayer.Drm.MediaDrmCallbackException.BytesLoaded.set -> void
AndroidX.Media3.ExoPlayer.Drm.MediaDrmCallbackException.DataSpec.get -> AndroidX.Media3.DataSource.DataSpec?
AndroidX.Media3.ExoPlayer.Drm.MediaDrmCallbackException.DataSpec.set -> void
AndroidX.Media3.ExoPlayer.Drm.MediaDrmCallbackException.MediaDrmCallbackException(AndroidX.Media3.DataSource.DataSpec? dataSpec, Android.Net.Uri? uriAfterRedirects, System.Collections.Generic.IDictionary<string!, System.Collections.Generic.IList<string!>!>? responseHeaders, long bytesLoaded, Java.Lang.Throwable? cause) -> void
AndroidX.Media3.ExoPlayer.Drm.MediaDrmCallbackException.ResponseHeaders.get -> System.Collections.IDictionary?
AndroidX.Media3.ExoPlayer.Drm.MediaDrmCallbackException.ResponseHeaders.set -> void
AndroidX.Media3.ExoPlayer.Drm.MediaDrmCallbackException.UriAfterRedirects.get -> Android.Net.Uri?
AndroidX.Media3.ExoPlayer.Drm.MediaDrmCallbackException.UriAfterRedirects.set -> void
AndroidX.Media3.ExoPlayer.Drm.OfflineLicenseHelper
AndroidX.Media3.ExoPlayer.Drm.OfflineLicenseHelper.DownloadLicense(AndroidX.Media3.Common.Format? format) -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.OfflineLicenseHelper.GetLicenseDurationRemainingSec(byte[]? offlineLicenseKeySetId) -> Android.Util.Pair?
AndroidX.Media3.ExoPlayer.Drm.OfflineLicenseHelper.OfflineLicenseHelper(AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager? defaultDrmSessionManager, AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher? eventDispatcher) -> void
AndroidX.Media3.ExoPlayer.Drm.OfflineLicenseHelper.Release() -> void
AndroidX.Media3.ExoPlayer.Drm.OfflineLicenseHelper.ReleaseLicense(byte[]? offlineLicenseKeySetId) -> void
AndroidX.Media3.ExoPlayer.Drm.OfflineLicenseHelper.RenewLicense(byte[]? offlineLicenseKeySetId) -> byte[]?
AndroidX.Media3.ExoPlayer.Drm.UnsupportedDrmException
AndroidX.Media3.ExoPlayer.Drm.UnsupportedDrmException.IReason
AndroidX.Media3.ExoPlayer.Drm.UnsupportedDrmException.Reason.get -> int
AndroidX.Media3.ExoPlayer.Drm.UnsupportedDrmException.Reason.set -> void
AndroidX.Media3.ExoPlayer.Drm.UnsupportedDrmException.UnsupportedDrmException(int reason) -> void
AndroidX.Media3.ExoPlayer.Drm.UnsupportedDrmException.UnsupportedDrmException(int reason, Java.Lang.Exception? cause) -> void
AndroidX.Media3.ExoPlayer.Drm.WidevineUtil
AndroidX.Media3.ExoPlayer.ExoPlaybackException
AndroidX.Media3.ExoPlayer.ExoPlaybackException.IType
AndroidX.Media3.ExoPlayer.ExoPlaybackException.MediaPeriodId.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.ExoPlaybackException.MediaPeriodId.set -> void
AndroidX.Media3.ExoPlayer.ExoPlaybackException.RendererException.get -> Java.Lang.Exception?
AndroidX.Media3.ExoPlayer.ExoPlaybackException.RendererFormat.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.ExoPlaybackException.RendererFormat.set -> void
AndroidX.Media3.ExoPlayer.ExoPlaybackException.RendererFormatSupport.get -> int
AndroidX.Media3.ExoPlayer.ExoPlaybackException.RendererFormatSupport.set -> void
AndroidX.Media3.ExoPlayer.ExoPlaybackException.RendererIndex.get -> int
AndroidX.Media3.ExoPlayer.ExoPlaybackException.RendererIndex.set -> void
AndroidX.Media3.ExoPlayer.ExoPlaybackException.RendererName.get -> string?
AndroidX.Media3.ExoPlayer.ExoPlaybackException.RendererName.set -> void
AndroidX.Media3.ExoPlayer.ExoPlaybackException.SourceException.get -> Java.IO.IOException?
AndroidX.Media3.ExoPlayer.ExoPlaybackException.Type.get -> int
AndroidX.Media3.ExoPlayer.ExoPlaybackException.Type.set -> void
AndroidX.Media3.ExoPlayer.ExoPlaybackException.UnexpectedException.get -> Java.Lang.RuntimeException?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.Build() -> AndroidX.Media3.ExoPlayer.IExoPlayer?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.ExoPlayerBuilder(Android.Content.Context? context) -> void
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.ExoPlayerBuilder(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.IRenderersFactory? renderersFactory) -> void
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.ExoPlayerBuilder(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.IRenderersFactory? renderersFactory, AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory? mediaSourceFactory) -> void
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.ExoPlayerBuilder(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.IRenderersFactory? renderersFactory, AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory? mediaSourceFactory, AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector? trackSelector, AndroidX.Media3.ExoPlayer.ILoadControl? loadControl, AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter? bandwidthMeter, AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector? analyticsCollector) -> void
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.ExoPlayerBuilder(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory? mediaSourceFactory) -> void
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.ExperimentalSetDynamicSchedulingEnabled(bool dynamicSchedulingEnabled) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.ExperimentalSetForegroundModeTimeoutMs(long timeoutMs) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetAnalyticsCollector(AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector? analyticsCollector) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetAudioAttributes(AndroidX.Media3.Common.AudioAttributes? audioAttributes, bool handleAudioFocus) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetBandwidthMeter(AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter? bandwidthMeter) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetClock(AndroidX.Media3.Common.Util.IClock? clock) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetDetachSurfaceTimeoutMs(long detachSurfaceTimeoutMs) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetDeviceVolumeControlEnabled(bool deviceVolumeControlEnabled) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetHandleAudioBecomingNoisy(bool handleAudioBecomingNoisy) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetLivePlaybackSpeedControl(AndroidX.Media3.ExoPlayer.ILivePlaybackSpeedControl? livePlaybackSpeedControl) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetLoadControl(AndroidX.Media3.ExoPlayer.ILoadControl? loadControl) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetLooper(Android.OS.Looper? looper) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetMaxSeekToPreviousPositionMs(long maxSeekToPreviousPositionMs) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetMediaSourceFactory(AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory? mediaSourceFactory) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetName(string? playerName) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetPauseAtEndOfMediaItems(bool pauseAtEndOfMediaItems) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetPlaybackLooper(Android.OS.Looper? playbackLooper) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetPlaybackLooperProvider(AndroidX.Media3.ExoPlayer.PlaybackLooperProvider? playbackLooperProvider) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetPriority(int priority) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetPriorityTaskManager(AndroidX.Media3.Common.PriorityTaskManager? priorityTaskManager) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetReleaseTimeoutMs(long releaseTimeoutMs) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetRenderersFactory(AndroidX.Media3.ExoPlayer.IRenderersFactory? renderersFactory) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetSeekBackIncrementMs(long seekBackIncrementMs) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetSeekForwardIncrementMs(long seekForwardIncrementMs) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetSeekParameters(AndroidX.Media3.ExoPlayer.SeekParameters? seekParameters) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetSkipSilenceEnabled(bool skipSilenceEnabled) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetSuitableOutputChecker(AndroidX.Media3.ExoPlayer.ISuitableOutputChecker? suitableOutputChecker) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetSuppressPlaybackOnUnsuitableOutput(bool suppressPlaybackOnUnsuitableOutput) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetTrackSelector(AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector? trackSelector) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetUseLazyPreparation(bool useLazyPreparation) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetUsePlatformDiagnostics(bool usePlatformDiagnostics) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetVideoChangeFrameRateStrategy(int videoChangeFrameRateStrategy) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetVideoScalingMode(int videoScalingMode) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.SetWakeMode(int wakeMode) -> AndroidX.Media3.ExoPlayer.ExoPlayerBuilder?
AndroidX.Media3.ExoPlayer.ExoPlayerPreloadConfiguration
AndroidX.Media3.ExoPlayer.ExoPlayerPreloadConfiguration.ExoPlayerPreloadConfiguration(long targetPreloadDurationUs) -> void
AndroidX.Media3.ExoPlayer.ExoPlayerPreloadConfiguration.ExoPlayerPreloadConfiguration(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.ExoPlayerPreloadConfiguration.TargetPreloadDurationUs.get -> long
AndroidX.Media3.ExoPlayer.ExoPlayerPreloadConfiguration.TargetPreloadDurationUs.set -> void
AndroidX.Media3.ExoPlayer.ExoTimeoutException
AndroidX.Media3.ExoPlayer.ExoTimeoutException.ExoTimeoutException(int timeoutOperation) -> void
AndroidX.Media3.ExoPlayer.ExoTimeoutException.ITimeoutOperation
AndroidX.Media3.ExoPlayer.ExoTimeoutException.TimeoutOperation.get -> int
AndroidX.Media3.ExoPlayer.ExoTimeoutException.TimeoutOperation.set -> void
AndroidX.Media3.ExoPlayer.FormatHolder
AndroidX.Media3.ExoPlayer.FormatHolder.Clear() -> void
AndroidX.Media3.ExoPlayer.FormatHolder.DrmSession.get -> AndroidX.Media3.ExoPlayer.Drm.IDrmSession?
AndroidX.Media3.ExoPlayer.FormatHolder.DrmSession.set -> void
AndroidX.Media3.ExoPlayer.FormatHolder.Format.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.FormatHolder.Format.set -> void
AndroidX.Media3.ExoPlayer.FormatHolder.FormatHolder() -> void
AndroidX.Media3.ExoPlayer.ForwardingRenderer
AndroidX.Media3.ExoPlayer.ForwardingRenderer.ForwardingRenderer(AndroidX.Media3.ExoPlayer.IRenderer? renderer) -> void
AndroidX.Media3.ExoPlayer.ForwardingRenderer.ForwardingRenderer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts
AndroidX.Media3.ExoPlayer.IExoPlayer
AndroidX.Media3.ExoPlayer.IExoPlayer.AddAnalyticsListener(AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener? p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.AddAudioOffloadListener(AndroidX.Media3.ExoPlayer.IExoPlayerAudioOffloadListener? p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.AddMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.AddMediaSource(int p0, AndroidX.Media3.ExoPlayer.Source.IMediaSource? p1) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.AddMediaSources(System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.IMediaSource!>? p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.AddMediaSources(int p0, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.IMediaSource!>? p1) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.AnalyticsCollector.get -> AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector?
AndroidX.Media3.ExoPlayer.IExoPlayer.AudioDecoderCounters.get -> AndroidX.Media3.ExoPlayer.DecoderCounters?
AndroidX.Media3.ExoPlayer.IExoPlayer.AudioFormat.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.IExoPlayer.AudioSessionId.get -> int
AndroidX.Media3.ExoPlayer.IExoPlayer.AudioSessionId.set -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.ClearAuxEffectInfo() -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.ClearCameraMotionListener(AndroidX.Media3.ExoPlayer.Video.Spherical.ICameraMotionListener? p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.ClearVideoFrameMetadataListener(AndroidX.Media3.ExoPlayer.Video.IVideoFrameMetadataListener? p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.Clock.get -> AndroidX.Media3.Common.Util.IClock?
AndroidX.Media3.ExoPlayer.IExoPlayer.CreateMessage(AndroidX.Media3.ExoPlayer.PlayerMessage.ITarget? p0) -> AndroidX.Media3.ExoPlayer.PlayerMessage?
AndroidX.Media3.ExoPlayer.IExoPlayer.CurrentTrackGroups.get -> AndroidX.Media3.ExoPlayer.Source.TrackGroupArray?
AndroidX.Media3.ExoPlayer.IExoPlayer.CurrentTrackSelections.get -> AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectionArray?
AndroidX.Media3.ExoPlayer.IExoPlayer.GetRenderer(int p0) -> AndroidX.Media3.ExoPlayer.IRenderer?
AndroidX.Media3.ExoPlayer.IExoPlayer.GetRendererType(int p0) -> int
AndroidX.Media3.ExoPlayer.IExoPlayer.GetSecondaryRenderer(int index) -> AndroidX.Media3.ExoPlayer.IRenderer?
AndroidX.Media3.ExoPlayer.IExoPlayer.IsReleased.get -> bool
AndroidX.Media3.ExoPlayer.IExoPlayer.IsSleepingForOffload.get -> bool
AndroidX.Media3.ExoPlayer.IExoPlayer.IsTunnelingEnabled.get -> bool
AndroidX.Media3.ExoPlayer.IExoPlayer.PauseAtEndOfMediaItems.get -> bool
AndroidX.Media3.ExoPlayer.IExoPlayer.PauseAtEndOfMediaItems.set -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.PlaybackLooper.get -> Android.OS.Looper?
AndroidX.Media3.ExoPlayer.IExoPlayer.PlayerError.get -> AndroidX.Media3.Common.PlaybackException?
AndroidX.Media3.ExoPlayer.IExoPlayer.PreloadConfiguration.get -> AndroidX.Media3.ExoPlayer.ExoPlayerPreloadConfiguration?
AndroidX.Media3.ExoPlayer.IExoPlayer.PreloadConfiguration.set -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.Prepare(AndroidX.Media3.ExoPlayer.Source.IMediaSource? p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.Prepare(AndroidX.Media3.ExoPlayer.Source.IMediaSource? p0, bool p1, bool p2) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.Release() -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.RemoveAnalyticsListener(AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener? p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.RemoveAudioOffloadListener(AndroidX.Media3.ExoPlayer.IExoPlayerAudioOffloadListener? p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.RendererCount.get -> int
AndroidX.Media3.ExoPlayer.IExoPlayer.ReplaceMediaItem(int p0, AndroidX.Media3.Common.MediaItem? p1) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.ReplaceMediaItems(int p0, int p1, System.Collections.Generic.IList<AndroidX.Media3.Common.MediaItem!>? p2) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.SeekParameters.get -> AndroidX.Media3.ExoPlayer.SeekParameters?
AndroidX.Media3.ExoPlayer.IExoPlayer.SeekParameters.set -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.SetAuxEffectInfo(AndroidX.Media3.Common.AuxEffectInfo? p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.SetCameraMotionListener(AndroidX.Media3.ExoPlayer.Video.Spherical.ICameraMotionListener? p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.SetForegroundMode(bool p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.SetHandleAudioBecomingNoisy(bool p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.SetImageOutput(AndroidX.Media3.ExoPlayer.Image.IImageOutput? p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.SetMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.SetMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? p0, bool p1) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.SetMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? p0, long p1) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.SetMediaSources(System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.IMediaSource!>? p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.SetMediaSources(System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.IMediaSource!>? p0, bool p1) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.SetMediaSources(System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.IMediaSource!>? p0, int p1, long p2) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.SetPreferredAudioDevice(Android.Media.AudioDeviceInfo? p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.SetPriority(int p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.SetPriorityTaskManager(AndroidX.Media3.Common.PriorityTaskManager? p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.SetShuffleOrder(AndroidX.Media3.ExoPlayer.Source.IShuffleOrder? p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.SetVideoEffects(System.Collections.Generic.IList<AndroidX.Media3.Common.IEffect!>? p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.SetVideoFrameMetadataListener(AndroidX.Media3.ExoPlayer.Video.IVideoFrameMetadataListener? p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.SetWakeMode(int p0) -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.SkipSilenceEnabled.get -> bool
AndroidX.Media3.ExoPlayer.IExoPlayer.SkipSilenceEnabled.set -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.TrackSelector.get -> AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector?
AndroidX.Media3.ExoPlayer.IExoPlayer.VideoChangeFrameRateStrategy.get -> int
AndroidX.Media3.ExoPlayer.IExoPlayer.VideoChangeFrameRateStrategy.set -> void
AndroidX.Media3.ExoPlayer.IExoPlayer.VideoDecoderCounters.get -> AndroidX.Media3.ExoPlayer.DecoderCounters?
AndroidX.Media3.ExoPlayer.IExoPlayer.VideoFormat.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.IExoPlayer.VideoScalingMode.get -> int
AndroidX.Media3.ExoPlayer.IExoPlayer.VideoScalingMode.set -> void
AndroidX.Media3.ExoPlayer.IExoPlayerAudioOffloadListener
AndroidX.Media3.ExoPlayer.IExoPlayerAudioOffloadListener.OnOffloadedPlayback(bool isOffloadedPlayback) -> void
AndroidX.Media3.ExoPlayer.IExoPlayerAudioOffloadListener.OnSleepingForOffloadChanged(bool isSleepingForOffload) -> void
AndroidX.Media3.ExoPlayer.ILivePlaybackSpeedControl
AndroidX.Media3.ExoPlayer.ILivePlaybackSpeedControl.GetAdjustedPlaybackSpeed(long p0, long p1) -> float
AndroidX.Media3.ExoPlayer.ILivePlaybackSpeedControl.NotifyRebuffer() -> void
AndroidX.Media3.ExoPlayer.ILivePlaybackSpeedControl.SetLiveConfiguration(AndroidX.Media3.Common.MediaItem.LiveConfiguration? p0) -> void
AndroidX.Media3.ExoPlayer.ILivePlaybackSpeedControl.SetTargetLiveOffsetOverrideUs(long p0) -> void
AndroidX.Media3.ExoPlayer.ILivePlaybackSpeedControl.TargetLiveOffsetUs.get -> long
AndroidX.Media3.ExoPlayer.ILoadControl
AndroidX.Media3.ExoPlayer.ILoadControl.Allocator.get -> AndroidX.Media3.ExoPlayer.Upstream.IAllocator?
AndroidX.Media3.ExoPlayer.ILoadControl.BackBufferDurationUs.get -> long
AndroidX.Media3.ExoPlayer.ILoadControl.EmptyMediaPeriodId.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.ILoadControl.GetBackBufferDurationUs(AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> long
AndroidX.Media3.ExoPlayer.ILoadControl.OnPrepared() -> void
AndroidX.Media3.ExoPlayer.ILoadControl.OnPrepared(AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> void
AndroidX.Media3.ExoPlayer.ILoadControl.OnReleased() -> void
AndroidX.Media3.ExoPlayer.ILoadControl.OnReleased(AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> void
AndroidX.Media3.ExoPlayer.ILoadControl.OnStopped() -> void
AndroidX.Media3.ExoPlayer.ILoadControl.OnStopped(AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> void
AndroidX.Media3.ExoPlayer.ILoadControl.OnTracksSelected(AndroidX.Media3.Common.Timeline? timeline, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.IRenderer![]? renderers, AndroidX.Media3.ExoPlayer.Source.TrackGroupArray? trackGroups, AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection![]? trackSelections) -> void
AndroidX.Media3.ExoPlayer.ILoadControl.OnTracksSelected(AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId, AndroidX.Media3.Common.Timeline? timeline, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.IRenderer![]? renderers, AndroidX.Media3.ExoPlayer.Source.TrackGroupArray? trackGroups, AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection![]? trackSelections) -> void
AndroidX.Media3.ExoPlayer.ILoadControl.OnTracksSelected(AndroidX.Media3.ExoPlayer.IRenderer![]? renderers, AndroidX.Media3.ExoPlayer.Source.TrackGroupArray? trackGroups, AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection![]? trackSelections) -> void
AndroidX.Media3.ExoPlayer.ILoadControl.OnTracksSelected(AndroidX.Media3.ExoPlayer.LoadControlParameters? parameters, AndroidX.Media3.ExoPlayer.Source.TrackGroupArray? trackGroups, AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection![]? trackSelections) -> void
AndroidX.Media3.ExoPlayer.ILoadControl.RetainBackBufferFromKeyframe() -> bool
AndroidX.Media3.ExoPlayer.ILoadControl.RetainBackBufferFromKeyframe(AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> bool
AndroidX.Media3.ExoPlayer.ILoadControl.ShouldContinueLoading(AndroidX.Media3.ExoPlayer.LoadControlParameters? parameters) -> bool
AndroidX.Media3.ExoPlayer.ILoadControl.ShouldContinueLoading(long playbackPositionUs, long bufferedDurationUs, float playbackSpeed) -> bool
AndroidX.Media3.ExoPlayer.ILoadControl.ShouldContinuePreloading(AndroidX.Media3.Common.Timeline? timeline, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, long bufferedDurationUs) -> bool
AndroidX.Media3.ExoPlayer.ILoadControl.ShouldStartPlayback(AndroidX.Media3.Common.Timeline? timeline, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, long bufferedDurationUs, float playbackSpeed, bool rebuffering, long targetLiveOffsetUs) -> bool
AndroidX.Media3.ExoPlayer.ILoadControl.ShouldStartPlayback(AndroidX.Media3.ExoPlayer.LoadControlParameters? parameters) -> bool
AndroidX.Media3.ExoPlayer.ILoadControl.ShouldStartPlayback(long bufferedDurationUs, float playbackSpeed, bool rebuffering, long targetLiveOffsetUs) -> bool
AndroidX.Media3.ExoPlayer.IMediaClock
AndroidX.Media3.ExoPlayer.IMediaClock.HasSkippedSilenceSinceLastCall.get -> bool
AndroidX.Media3.ExoPlayer.IMediaClock.PlaybackParameters.get -> AndroidX.Media3.Common.PlaybackParameters?
AndroidX.Media3.ExoPlayer.IMediaClock.PlaybackParameters.set -> void
AndroidX.Media3.ExoPlayer.IMediaClock.PositionUs.get -> long
AndroidX.Media3.ExoPlayer.IRenderer
AndroidX.Media3.ExoPlayer.IRenderer.Capabilities.get -> AndroidX.Media3.ExoPlayer.IRendererCapabilities?
AndroidX.Media3.ExoPlayer.IRenderer.Disable() -> void
AndroidX.Media3.ExoPlayer.IRenderer.Enable(AndroidX.Media3.ExoPlayer.RendererConfiguration? p0, AndroidX.Media3.Common.Format![]? p1, AndroidX.Media3.ExoPlayer.Source.ISampleStream? p2, long p3, bool p4, bool p5, long p6, long p7, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? p8) -> void
AndroidX.Media3.ExoPlayer.IRenderer.EnableMayRenderStartOfStream() -> void
AndroidX.Media3.ExoPlayer.IRenderer.GetDurationToProgressUs(long positionUs, long elapsedRealtimeUs) -> long
AndroidX.Media3.ExoPlayer.IRenderer.HasReadStreamToEnd.get -> bool
AndroidX.Media3.ExoPlayer.IRenderer.Init(int p0, AndroidX.Media3.ExoPlayer.Analytics.PlayerId? p1, AndroidX.Media3.Common.Util.IClock? p2) -> void
AndroidX.Media3.ExoPlayer.IRenderer.IsCurrentStreamFinal.get -> bool
AndroidX.Media3.ExoPlayer.IRenderer.IsEnded.get -> bool
AndroidX.Media3.ExoPlayer.IRenderer.IsReady.get -> bool
AndroidX.Media3.ExoPlayer.IRenderer.MaybeThrowStreamError() -> void
AndroidX.Media3.ExoPlayer.IRenderer.MediaClock.get -> AndroidX.Media3.ExoPlayer.IMediaClock?
AndroidX.Media3.ExoPlayer.IRenderer.Name.get -> string?
AndroidX.Media3.ExoPlayer.IRenderer.ReadingPositionUs.get -> long
AndroidX.Media3.ExoPlayer.IRenderer.Release() -> void
AndroidX.Media3.ExoPlayer.IRenderer.Render(long p0, long p1) -> void
AndroidX.Media3.ExoPlayer.IRenderer.ReplaceStream(AndroidX.Media3.Common.Format![]? p0, AndroidX.Media3.ExoPlayer.Source.ISampleStream? p1, long p2, long p3, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? p4) -> void
AndroidX.Media3.ExoPlayer.IRenderer.Reset() -> void
AndroidX.Media3.ExoPlayer.IRenderer.ResetPosition(long p0) -> void
AndroidX.Media3.ExoPlayer.IRenderer.SetCurrentStreamFinal() -> void
AndroidX.Media3.ExoPlayer.IRenderer.SetPlaybackSpeed(float currentPlaybackSpeed, float targetPlaybackSpeed) -> void
AndroidX.Media3.ExoPlayer.IRenderer.SetTimeline(AndroidX.Media3.Common.Timeline? p0) -> void
AndroidX.Media3.ExoPlayer.IRenderer.Start() -> void
AndroidX.Media3.ExoPlayer.IRenderer.State.get -> int
AndroidX.Media3.ExoPlayer.IRenderer.Stop() -> void
AndroidX.Media3.ExoPlayer.IRenderer.Stream.get -> AndroidX.Media3.ExoPlayer.Source.ISampleStream?
AndroidX.Media3.ExoPlayer.IRenderer.TrackType.get -> int
AndroidX.Media3.ExoPlayer.IRendererCapabilities
AndroidX.Media3.ExoPlayer.IRendererCapabilities.ClearListener() -> void
AndroidX.Media3.ExoPlayer.IRendererCapabilities.Create(int formatSupport) -> int
AndroidX.Media3.ExoPlayer.IRendererCapabilities.Create(int formatSupport, int adaptiveSupport, int tunnelingSupport) -> int
AndroidX.Media3.ExoPlayer.IRendererCapabilities.Create(int formatSupport, int adaptiveSupport, int tunnelingSupport, int audioOffloadSupport) -> int
AndroidX.Media3.ExoPlayer.IRendererCapabilities.Create(int formatSupport, int adaptiveSupport, int tunnelingSupport, int hardwareAccelerationSupport, int decoderSupport) -> int
AndroidX.Media3.ExoPlayer.IRendererCapabilities.Create(int formatSupport, int adaptiveSupport, int tunnelingSupport, int hardwareAccelerationSupport, int decoderSupport, int audioOffloadSupport) -> int
AndroidX.Media3.ExoPlayer.IRendererCapabilities.GetAdaptiveSupport(int supportFlags) -> int
AndroidX.Media3.ExoPlayer.IRendererCapabilities.GetAudioOffloadSupport(int supportFlags) -> int
AndroidX.Media3.ExoPlayer.IRendererCapabilities.GetDecoderSupport(int supportFlags) -> int
AndroidX.Media3.ExoPlayer.IRendererCapabilities.GetFormatSupport(int supportFlags) -> int
AndroidX.Media3.ExoPlayer.IRendererCapabilities.GetHardwareAccelerationSupport(int supportFlags) -> int
AndroidX.Media3.ExoPlayer.IRendererCapabilities.GetTunnelingSupport(int supportFlags) -> int
AndroidX.Media3.ExoPlayer.IRendererCapabilities.IsFormatSupported(int supportFlags, bool allowExceedsCapabilities) -> bool
AndroidX.Media3.ExoPlayer.IRendererCapabilities.NameRendererCapabilities.get -> string?
AndroidX.Media3.ExoPlayer.IRendererCapabilities.SetListener(AndroidX.Media3.ExoPlayer.IRendererCapabilitiesListener? listener) -> void
AndroidX.Media3.ExoPlayer.IRendererCapabilities.SupportsFormat(AndroidX.Media3.Common.Format? p0) -> int
AndroidX.Media3.ExoPlayer.IRendererCapabilities.SupportsMixedMimeTypeAdaptation() -> int
AndroidX.Media3.ExoPlayer.IRendererCapabilities.TrackType.get -> int
AndroidX.Media3.ExoPlayer.IRendererCapabilitiesAdaptiveSupport
AndroidX.Media3.ExoPlayer.IRendererCapabilitiesAudioOffloadSupport
AndroidX.Media3.ExoPlayer.IRendererCapabilitiesCapabilities
AndroidX.Media3.ExoPlayer.IRendererCapabilitiesDecoderSupport
AndroidX.Media3.ExoPlayer.IRendererCapabilitiesHardwareAccelerationSupport
AndroidX.Media3.ExoPlayer.IRendererCapabilitiesList
AndroidX.Media3.ExoPlayer.IRendererCapabilitiesList.GetRendererCapabilities() -> AndroidX.Media3.ExoPlayer.IRendererCapabilities![]?
AndroidX.Media3.ExoPlayer.IRendererCapabilitiesList.Release() -> void
AndroidX.Media3.ExoPlayer.IRendererCapabilitiesList.Size() -> int
AndroidX.Media3.ExoPlayer.IRendererCapabilitiesListFactory
AndroidX.Media3.ExoPlayer.IRendererCapabilitiesListFactory.CreateRendererCapabilitiesList() -> AndroidX.Media3.ExoPlayer.IRendererCapabilitiesList?
AndroidX.Media3.ExoPlayer.IRendererCapabilitiesListener
AndroidX.Media3.ExoPlayer.IRendererCapabilitiesListener.OnRendererCapabilitiesChanged(AndroidX.Media3.ExoPlayer.IRenderer? p0) -> void
AndroidX.Media3.ExoPlayer.IRendererCapabilitiesTunnelingSupport
AndroidX.Media3.ExoPlayer.IRendererMessageType
AndroidX.Media3.ExoPlayer.IRendererState
AndroidX.Media3.ExoPlayer.IRendererWakeupListener
AndroidX.Media3.ExoPlayer.IRendererWakeupListener.OnSleep() -> void
AndroidX.Media3.ExoPlayer.IRendererWakeupListener.OnWakeup() -> void
AndroidX.Media3.ExoPlayer.IRenderersFactory
AndroidX.Media3.ExoPlayer.IRenderersFactory.CreateRenderers(Android.OS.Handler? p0, AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener? p1, AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener? p2, AndroidX.Media3.ExoPlayer.Text.ITextOutput? p3, AndroidX.Media3.ExoPlayer.Metadata.IMetadataOutput? p4) -> AndroidX.Media3.ExoPlayer.IRenderer![]?
AndroidX.Media3.ExoPlayer.IRenderersFactory.CreateSecondaryRenderer(AndroidX.Media3.ExoPlayer.IRenderer? renderer, Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener? videoRendererEventListener, AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener? audioRendererEventListener, AndroidX.Media3.ExoPlayer.Text.ITextOutput? textRendererOutput, AndroidX.Media3.ExoPlayer.Metadata.IMetadataOutput? metadataRendererOutput) -> AndroidX.Media3.ExoPlayer.IRenderer?
AndroidX.Media3.ExoPlayer.ISuitableOutputChecker
AndroidX.Media3.ExoPlayer.ISuitableOutputChecker.Disable() -> void
AndroidX.Media3.ExoPlayer.ISuitableOutputChecker.Enable(AndroidX.Media3.ExoPlayer.ISuitableOutputCheckerCallback? p0, Android.Content.Context? p1, Android.OS.Looper? p2, Android.OS.Looper? p3, AndroidX.Media3.Common.Util.IClock? p4) -> void
AndroidX.Media3.ExoPlayer.ISuitableOutputChecker.IsSelectedOutputSuitableForPlayback.get -> bool
AndroidX.Media3.ExoPlayer.ISuitableOutputCheckerCallback
AndroidX.Media3.ExoPlayer.ISuitableOutputCheckerCallback.OnSelectedOutputSuitabilityChanged(bool p0) -> void
AndroidX.Media3.ExoPlayer.Image.BitmapFactoryImageDecoder
AndroidX.Media3.ExoPlayer.Image.BitmapFactoryImageDecoder.Factory
AndroidX.Media3.ExoPlayer.Image.BitmapFactoryImageDecoder.Factory.CreateImageDecoder() -> AndroidX.Media3.ExoPlayer.Image.IImageDecoder?
AndroidX.Media3.ExoPlayer.Image.BitmapFactoryImageDecoder.Factory.Factory() -> void
AndroidX.Media3.ExoPlayer.Image.BitmapFactoryImageDecoder.Factory.Factory(AndroidX.Media3.ExoPlayer.Image.BitmapFactoryImageDecoder.IBitmapDecoder? bitmapDecoder) -> void
AndroidX.Media3.ExoPlayer.Image.BitmapFactoryImageDecoder.Factory.InterfaceConsts
AndroidX.Media3.ExoPlayer.Image.BitmapFactoryImageDecoder.Factory.SupportsFormat(AndroidX.Media3.Common.Format? format) -> int
AndroidX.Media3.ExoPlayer.Image.BitmapFactoryImageDecoder.IBitmapDecoder
AndroidX.Media3.ExoPlayer.Image.BitmapFactoryImageDecoder.IBitmapDecoder.Decode(byte[]? p0, int p1) -> Android.Graphics.Bitmap?
AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder
AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.DequeueInputBuffer() -> Java.Lang.Object?
AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.DequeueOutputBuffer() -> Java.Lang.Object?
AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.ExternalImageRequest
AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.ExternalImageRequest.ExternalImageRequest(Android.Net.Uri? uri) -> void
AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.ExternalImageRequest.Uri.get -> Android.Net.Uri?
AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.ExternalImageRequest.Uri.set -> void
AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.Factory
AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.Factory.CreateImageDecoder() -> AndroidX.Media3.ExoPlayer.Image.IImageDecoder?
AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.Factory.Factory(AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.IBitmapResolver? bitmapResolver) -> void
AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.Factory.InterfaceConsts
AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.Factory.SupportsFormat(AndroidX.Media3.Common.Format? format) -> int
AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.Flush() -> void
AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.IBitmapResolver
AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.IBitmapResolver.Resolve(AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.ExternalImageRequest? p0) -> Google.Common.Util.Concurrent.IListenableFuture?
AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.Name.get -> string?
AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.QueueInputBuffer(Java.Lang.Object? inputBuffer) -> void
AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.Release() -> void
AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.SetOutputStartTimeUs(long outputStartTimeUs) -> void
AndroidX.Media3.ExoPlayer.Image.IImageDecoder
AndroidX.Media3.ExoPlayer.Image.IImageDecoder.DequeueOutputBuffer() -> Java.Lang.Object?
AndroidX.Media3.ExoPlayer.Image.IImageDecoder.QueueInputBuffer(Java.Lang.Object? p0) -> void
AndroidX.Media3.ExoPlayer.Image.IImageDecoderFactory
AndroidX.Media3.ExoPlayer.Image.IImageDecoderFactory.CreateImageDecoder() -> AndroidX.Media3.ExoPlayer.Image.IImageDecoder?
AndroidX.Media3.ExoPlayer.Image.IImageDecoderFactory.Default.get -> AndroidX.Media3.ExoPlayer.Image.IImageDecoderFactory?
AndroidX.Media3.ExoPlayer.Image.IImageDecoderFactory.SupportsFormat(AndroidX.Media3.Common.Format? p0) -> int
AndroidX.Media3.ExoPlayer.Image.IImageOutput
AndroidX.Media3.ExoPlayer.Image.IImageOutput.NoOp.get -> AndroidX.Media3.ExoPlayer.Image.IImageOutput?
AndroidX.Media3.ExoPlayer.Image.IImageOutput.OnDisabled() -> void
AndroidX.Media3.ExoPlayer.Image.IImageOutput.OnImageAvailable(long p0, Android.Graphics.Bitmap? p1) -> void
AndroidX.Media3.ExoPlayer.Image.ImageDecoderException
AndroidX.Media3.ExoPlayer.Image.ImageDecoderException.ImageDecoderException(Java.Lang.Throwable? cause) -> void
AndroidX.Media3.ExoPlayer.Image.ImageDecoderException.ImageDecoderException(string? message) -> void
AndroidX.Media3.ExoPlayer.Image.ImageDecoderException.ImageDecoderException(string? message, Java.Lang.Throwable? cause) -> void
AndroidX.Media3.ExoPlayer.Image.ImageOutputBuffer
AndroidX.Media3.ExoPlayer.Image.ImageOutputBuffer.Bitmap.get -> Android.Graphics.Bitmap?
AndroidX.Media3.ExoPlayer.Image.ImageOutputBuffer.Bitmap.set -> void
AndroidX.Media3.ExoPlayer.Image.ImageOutputBuffer.ImageOutputBuffer() -> void
AndroidX.Media3.ExoPlayer.Image.ImageOutputBuffer.ImageOutputBuffer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Image.ImageRenderer
AndroidX.Media3.ExoPlayer.Image.ImageRenderer.ImageRenderer(AndroidX.Media3.ExoPlayer.Image.IImageDecoderFactory? decoderFactory, AndroidX.Media3.ExoPlayer.Image.IImageOutput? imageOutput) -> void
AndroidX.Media3.ExoPlayer.Image.ImageRenderer.ImageRenderer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.LoadControlParameters
AndroidX.Media3.ExoPlayer.LoadControlParameters.BufferedDurationUs.get -> long
AndroidX.Media3.ExoPlayer.LoadControlParameters.BufferedDurationUs.set -> void
AndroidX.Media3.ExoPlayer.LoadControlParameters.LastRebufferRealtimeMs.get -> long
AndroidX.Media3.ExoPlayer.LoadControlParameters.LastRebufferRealtimeMs.set -> void
AndroidX.Media3.ExoPlayer.LoadControlParameters.LoadControlParameters(AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId, AndroidX.Media3.Common.Timeline? timeline, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, long playbackPositionUs, long bufferedDurationUs, float playbackSpeed, bool playWhenReady, bool rebuffering, long targetLiveOffsetUs, long lastRebufferRealtimeMs) -> void
AndroidX.Media3.ExoPlayer.LoadControlParameters.MediaPeriodId.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.LoadControlParameters.MediaPeriodId.set -> void
AndroidX.Media3.ExoPlayer.LoadControlParameters.PlayWhenReady.get -> bool
AndroidX.Media3.ExoPlayer.LoadControlParameters.PlayWhenReady.set -> void
AndroidX.Media3.ExoPlayer.LoadControlParameters.PlaybackPositionUs.get -> long
AndroidX.Media3.ExoPlayer.LoadControlParameters.PlaybackPositionUs.set -> void
AndroidX.Media3.ExoPlayer.LoadControlParameters.PlaybackSpeed.get -> float
AndroidX.Media3.ExoPlayer.LoadControlParameters.PlaybackSpeed.set -> void
AndroidX.Media3.ExoPlayer.LoadControlParameters.PlayerId.get -> AndroidX.Media3.ExoPlayer.Analytics.PlayerId?
AndroidX.Media3.ExoPlayer.LoadControlParameters.PlayerId.set -> void
AndroidX.Media3.ExoPlayer.LoadControlParameters.Rebuffering.get -> bool
AndroidX.Media3.ExoPlayer.LoadControlParameters.Rebuffering.set -> void
AndroidX.Media3.ExoPlayer.LoadControlParameters.TargetLiveOffsetUs.get -> long
AndroidX.Media3.ExoPlayer.LoadControlParameters.TargetLiveOffsetUs.set -> void
AndroidX.Media3.ExoPlayer.LoadControlParameters.Timeline.get -> AndroidX.Media3.Common.Timeline?
AndroidX.Media3.ExoPlayer.LoadControlParameters.Timeline.set -> void
AndroidX.Media3.ExoPlayer.LoadingInfo
AndroidX.Media3.ExoPlayer.LoadingInfo.BuildUpon() -> AndroidX.Media3.ExoPlayer.LoadingInfo.Builder?
AndroidX.Media3.ExoPlayer.LoadingInfo.Builder
AndroidX.Media3.ExoPlayer.LoadingInfo.Builder.Build() -> AndroidX.Media3.ExoPlayer.LoadingInfo?
AndroidX.Media3.ExoPlayer.LoadingInfo.Builder.Builder() -> void
AndroidX.Media3.ExoPlayer.LoadingInfo.Builder.SetLastRebufferRealtimeMs(long lastRebufferRealtimeMs) -> AndroidX.Media3.ExoPlayer.LoadingInfo.Builder?
AndroidX.Media3.ExoPlayer.LoadingInfo.Builder.SetPlaybackPositionUs(long playbackPositionUs) -> AndroidX.Media3.ExoPlayer.LoadingInfo.Builder?
AndroidX.Media3.ExoPlayer.LoadingInfo.Builder.SetPlaybackSpeed(float playbackSpeed) -> AndroidX.Media3.ExoPlayer.LoadingInfo.Builder?
AndroidX.Media3.ExoPlayer.LoadingInfo.LastRebufferRealtimeMs.get -> long
AndroidX.Media3.ExoPlayer.LoadingInfo.LastRebufferRealtimeMs.set -> void
AndroidX.Media3.ExoPlayer.LoadingInfo.PlaybackPositionUs.get -> long
AndroidX.Media3.ExoPlayer.LoadingInfo.PlaybackPositionUs.set -> void
AndroidX.Media3.ExoPlayer.LoadingInfo.PlaybackSpeed.get -> float
AndroidX.Media3.ExoPlayer.LoadingInfo.PlaybackSpeed.set -> void
AndroidX.Media3.ExoPlayer.LoadingInfo.RebufferedSince(long realtimeMs) -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.DefaultMediaCodecAdapterFactory
AndroidX.Media3.ExoPlayer.MediaCodec.DefaultMediaCodecAdapterFactory.CreateAdapter(AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration? configuration) -> AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter?
AndroidX.Media3.ExoPlayer.MediaCodec.DefaultMediaCodecAdapterFactory.DefaultMediaCodecAdapterFactory() -> void
AndroidX.Media3.ExoPlayer.MediaCodec.DefaultMediaCodecAdapterFactory.DefaultMediaCodecAdapterFactory(Android.Content.Context? context) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.DefaultMediaCodecAdapterFactory.ExperimentalSetAsyncCryptoFlagEnabled(bool enableAsyncCryptoFlag) -> AndroidX.Media3.ExoPlayer.MediaCodec.DefaultMediaCodecAdapterFactory?
AndroidX.Media3.ExoPlayer.MediaCodec.DefaultMediaCodecAdapterFactory.ForceDisableAsynchronous() -> AndroidX.Media3.ExoPlayer.MediaCodec.DefaultMediaCodecAdapterFactory?
AndroidX.Media3.ExoPlayer.MediaCodec.DefaultMediaCodecAdapterFactory.ForceEnableAsynchronous() -> AndroidX.Media3.ExoPlayer.MediaCodec.DefaultMediaCodecAdapterFactory?
AndroidX.Media3.ExoPlayer.MediaCodec.DefaultMediaCodecAdapterFactory.InterfaceConsts
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter.DequeueInputBufferIndex() -> int
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter.DequeueOutputBufferIndex(Android.Media.MediaCodec.BufferInfo? p0) -> int
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter.DetachOutputSurface() -> void
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter.Flush() -> void
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter.GetInputBuffer(int p0) -> Java.Nio.ByteBuffer?
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter.GetOutputBuffer(int p0) -> Java.Nio.ByteBuffer?
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter.Metrics.get -> Android.OS.PersistableBundle?
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter.NeedsReconfiguration() -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter.OutputFormat.get -> Android.Media.MediaFormat?
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter.QueueInputBuffer(int p0, int p1, int p2, long p3, int p4) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter.QueueSecureInputBuffer(int p0, int p1, AndroidX.Media3.Decoder.CryptoInfo? p2, long p3, int p4) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter.RegisterOnBufferAvailableListener(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterOnBufferAvailableListener? listener) -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter.Release() -> void
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter.ReleaseOutputBuffer(int p0, bool p1) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter.ReleaseOutputBuffer(int p0, long p1) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter.SetOnFrameRenderedListener(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterOnFrameRenderedListener? p0, Android.OS.Handler? p1) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter.SetOutputSurface(Android.Views.Surface? p0) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter.SetParameters(Android.OS.Bundle? p0) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter.SetVideoScalingMode(int p0) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterFactory
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterFactory.CreateAdapter(AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration? p0) -> AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter?
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterFactory.Default.get -> AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterFactory?
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterFactory.GetDefault(Android.Content.Context? context) -> AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterFactory?
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterOnBufferAvailableListener
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterOnBufferAvailableListener.OnInputBufferAvailable() -> void
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterOnBufferAvailableListener.OnOutputBufferAvailable() -> void
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterOnFrameRenderedListener
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterOnFrameRenderedListener.OnFrameRendered(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter? p0, long p1, long p2) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector.Default.get -> AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector?
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector.GetDecoderInfos(string? p0, bool p1, bool p2) -> System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo!>?
AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector.PreferSoftware.get -> AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector?
AndroidX.Media3.ExoPlayer.MediaCodec.LoudnessCodecController
AndroidX.Media3.ExoPlayer.MediaCodec.LoudnessCodecController.AddMediaCodec(Android.Media.MediaCodec? mediaCodec) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.LoudnessCodecController.ILoudnessParameterUpdateListener
AndroidX.Media3.ExoPlayer.MediaCodec.LoudnessCodecController.ILoudnessParameterUpdateListener.Default.get -> AndroidX.Media3.ExoPlayer.MediaCodec.LoudnessCodecController.ILoudnessParameterUpdateListener?
AndroidX.Media3.ExoPlayer.MediaCodec.LoudnessCodecController.ILoudnessParameterUpdateListener.OnLoudnessParameterUpdate(Android.OS.Bundle? p0) -> Android.OS.Bundle?
AndroidX.Media3.ExoPlayer.MediaCodec.LoudnessCodecController.LoudnessCodecController() -> void
AndroidX.Media3.ExoPlayer.MediaCodec.LoudnessCodecController.LoudnessCodecController(AndroidX.Media3.ExoPlayer.MediaCodec.LoudnessCodecController.ILoudnessParameterUpdateListener? updateListener) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.LoudnessCodecController.LoudnessParameterUpdateHandler
AndroidX.Media3.ExoPlayer.MediaCodec.LoudnessCodecController.Release() -> void
AndroidX.Media3.ExoPlayer.MediaCodec.LoudnessCodecController.RemoveMediaCodec(Android.Media.MediaCodec? mediaCodec) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.LoudnessCodecController.SetAudioSessionId(int audioSessionId) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration.CodecInfo.get -> AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration.CodecInfo.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration.Crypto.get -> Android.Media.MediaCrypto?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration.Crypto.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration.Format.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration.Format.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration.LoudnessCodecController.get -> AndroidX.Media3.ExoPlayer.MediaCodec.LoudnessCodecController?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration.LoudnessCodecController.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration.MediaFormat.get -> Android.Media.MediaFormat?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration.MediaFormat.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration.Surface.get -> Android.Views.Surface?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration.Surface.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterOnFrameRenderedEventArgs
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterOnFrameRenderedEventArgs.MediaCodecAdapterOnFrameRenderedEventArgs(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter? p0, long p1, long p2) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterOnFrameRenderedEventArgs.P0.get -> AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterOnFrameRenderedEventArgs.P1.get -> long
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterOnFrameRenderedEventArgs.P2.get -> long
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecDecoderException
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecDecoderException.CodecInfo.get -> AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecDecoderException.CodecInfo.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecDecoderException.DiagnosticInfo.get -> string?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecDecoderException.DiagnosticInfo.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecDecoderException.ErrorCode.get -> int
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecDecoderException.ErrorCode.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecDecoderException.MediaCodecDecoderException(Java.Lang.Throwable? cause, AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo? codecInfo) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecDecoderException.MediaCodecDecoderException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.Adaptive.get -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.Adaptive.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.AlignVideoSizeV21(int width, int height) -> Android.Graphics.Point?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.CanReuseCodec(AndroidX.Media3.Common.Format? oldFormat, AndroidX.Media3.Common.Format? newFormat) -> AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.Capabilities.get -> Android.Media.MediaCodecInfo.CodecCapabilities?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.Capabilities.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.CodecMimeType.get -> string?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.CodecMimeType.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.DetachedSurfaceSupported.get -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.DetachedSurfaceSupported.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.GetProfileLevels() -> Android.Media.MediaCodecInfo.CodecProfileLevel![]?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.HardwareAccelerated.get -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.HardwareAccelerated.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.IsAudioChannelCountSupportedV21(int channelCount) -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.IsAudioSampleRateSupportedV21(int sampleRate) -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.IsFormatFunctionallySupported(AndroidX.Media3.Common.Format? format) -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.IsFormatSupported(AndroidX.Media3.Common.Format? format) -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.IsHdr10PlusOutOfBandMetadataSupported.get -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.IsSeamlessAdaptationSupported(AndroidX.Media3.Common.Format? format) -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.IsVideoSizeAndRateSupportedV21(int width, int height, double frameRate) -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.MaxSupportedInstances.get -> int
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.MimeType.get -> string?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.MimeType.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.Name.get -> string?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.Name.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.Secure.get -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.Secure.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.SoftwareOnly.get -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.SoftwareOnly.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.Tunneling.get -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.Tunneling.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.Vendor.get -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.Vendor.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.Codec.get -> AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.CodecInfo.get -> AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.CodecOutputMediaFormat.get -> Android.Media.MediaFormat?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.DecoderCounters.get -> AndroidX.Media3.ExoPlayer.DecoderCounters?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.DecoderCounters.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.DecoderInitializationException
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.DecoderInitializationException.CodecInfo.get -> AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.DecoderInitializationException.CodecInfo.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.DecoderInitializationException.DecoderInitializationException(AndroidX.Media3.Common.Format? format, Java.Lang.Throwable? cause, bool secureDecoderRequired, AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo? mediaCodecInfo) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.DecoderInitializationException.DecoderInitializationException(AndroidX.Media3.Common.Format? format, Java.Lang.Throwable? cause, bool secureDecoderRequired, int errorCode) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.DecoderInitializationException.DecoderInitializationException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.DecoderInitializationException.DiagnosticInfo.get -> string?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.DecoderInitializationException.DiagnosticInfo.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.DecoderInitializationException.FallbackDecoderInitializationException.get -> AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.DecoderInitializationException?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.DecoderInitializationException.FallbackDecoderInitializationException.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.DecoderInitializationException.MimeType.get -> string?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.DecoderInitializationException.MimeType.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.DecoderInitializationException.SecureDecoderRequired.get -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.DecoderInitializationException.SecureDecoderRequired.set -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.FlushOrReinitializeCodec() -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.GetDurationToProgressUs(long positionUs, long elapsedRealtimeUs) -> long
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.IsBypassEnabled.get -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.IsBypassPossible(AndroidX.Media3.Common.Format? format) -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.MaybeInitCodecOrBypass() -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.MediaCodecRenderer(int trackType, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterFactory? codecAdapterFactory, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, bool enableDecoderFallback, float assumedMinimumCodecOperatingRate) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.MediaCodecRenderer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.OutputStreamOffsetUs.get -> long
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.OutputStreamStartPositionUs.get -> long
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.SetPendingOutputEndOfStream() -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.SetPendingPlaybackException(AndroidX.Media3.ExoPlayer.ExoPlaybackException? exception) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.UpdateCodecOperatingRate() -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.UpdateOutputFormatForTime(long presentationTimeUs) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.WakeupListener.get -> AndroidX.Media3.ExoPlayer.IRendererWakeupListener?
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecUtil
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecUtil.DecoderQueryException
AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecUtil.DecoderQueryException.DecoderQueryException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.DequeueInputBufferIndex() -> int
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.DequeueOutputBufferIndex(Android.Media.MediaCodec.BufferInfo? bufferInfo) -> int
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.DetachOutputSurface() -> void
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.Factory
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.Factory.Factory() -> void
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.Factory.Factory(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.Factory.InterfaceConsts
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.Flush() -> void
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.GetInputBuffer(int index) -> Java.Nio.ByteBuffer?
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.GetOutputBuffer(int index) -> Java.Nio.ByteBuffer?
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.Metrics.get -> Android.OS.PersistableBundle?
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.NeedsReconfiguration() -> bool
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.OutputFormat.get -> Android.Media.MediaFormat?
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.QueueInputBuffer(int index, int offset, int size, long presentationTimeUs, int flags) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.QueueSecureInputBuffer(int index, int offset, AndroidX.Media3.Decoder.CryptoInfo? info, long presentationTimeUs, int flags) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.Release() -> void
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.ReleaseOutputBuffer(int index, bool render) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.ReleaseOutputBuffer(int index, long renderTimeStampNs) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.SetOnFrameRenderedListener(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterOnFrameRenderedListener? listener, Android.OS.Handler? handler) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.SetOutputSurface(Android.Views.Surface? surface) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.SetParameters(Android.OS.Bundle? params) -> void
AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.SetVideoScalingMode(int scalingMode) -> void
AndroidX.Media3.ExoPlayer.MediaExtractorCompat
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.Advance() -> bool
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.Allocator.get -> AndroidX.Media3.ExoPlayer.Upstream.IAllocator?
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.CachedDuration.get -> long
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.DrmInitData.get -> AndroidX.Media3.Common.DrmInitData?
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.GetSampleCryptoInfo(Android.Media.MediaCodec.CryptoInfo? info) -> bool
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.GetTrackFormat(int trackIndex) -> Android.Media.MediaFormat?
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.HasCacheReachedEndOfStream.get -> bool
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.ISeekMode
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.LogSessionId.get -> Android.Media.Metrics.LogSessionId?
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.LogSessionId.set -> void
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.MediaExtractorCompat(Android.Content.Context? context) -> void
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.MediaExtractorCompat(AndroidX.Media3.Extractor.IExtractorsFactory? extractorsFactory, AndroidX.Media3.DataSource.IDataSourceFactory? dataSourceFactory) -> void
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.Metrics.get -> Android.OS.PersistableBundle?
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.PsshInfo.get -> System.Collections.Generic.IDictionary<Java.Util.UUID!, byte[]!>?
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.ReadSampleData(Java.Nio.ByteBuffer? buffer, int offset) -> int
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.Release() -> void
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.SampleFlags.get -> int
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.SampleSize.get -> long
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.SampleTime.get -> long
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.SampleTrackIndex.get -> int
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.SeekTo(long timeUs, int mode) -> void
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.SelectTrack(int trackIndex) -> void
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.SetDataSource(Android.Content.Context? context, Android.Net.Uri? uri, System.Collections.Generic.IDictionary<string!, string!>? headers) -> void
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.SetDataSource(Android.Content.Res.AssetFileDescriptor? assetFileDescriptor) -> void
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.SetDataSource(Android.Media.MediaDataSource? mediaDataSource) -> void
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.SetDataSource(Android.Net.Uri? uri, long offset) -> void
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.SetDataSource(Java.IO.FileDescriptor? fileDescriptor) -> void
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.SetDataSource(Java.IO.FileDescriptor? fileDescriptor, long offset, long length) -> void
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.SetDataSource(string? path) -> void
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.SetDataSource(string? path, System.Collections.Generic.IDictionary<string!, string!>? headers) -> void
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.TrackCount.get -> int
AndroidX.Media3.ExoPlayer.MediaExtractorCompat.UnselectTrack(int trackIndex) -> void
AndroidX.Media3.ExoPlayer.Metadata.IMetadataDecoderFactory
AndroidX.Media3.ExoPlayer.Metadata.IMetadataDecoderFactory.CreateDecoder(AndroidX.Media3.Common.Format? p0) -> AndroidX.Media3.Extractor.Metadata.IMetadataDecoder?
AndroidX.Media3.ExoPlayer.Metadata.IMetadataDecoderFactory.Default.get -> AndroidX.Media3.ExoPlayer.Metadata.IMetadataDecoderFactory?
AndroidX.Media3.ExoPlayer.Metadata.IMetadataDecoderFactory.SupportsFormat(AndroidX.Media3.Common.Format? p0) -> bool
AndroidX.Media3.ExoPlayer.Metadata.IMetadataOutput
AndroidX.Media3.ExoPlayer.Metadata.IMetadataOutput.OnMetadata(AndroidX.Media3.Common.Metadata? p0) -> void
AndroidX.Media3.ExoPlayer.Metadata.MetadataRenderer
AndroidX.Media3.ExoPlayer.Metadata.MetadataRenderer.HandleMessage(Android.OS.Message? msg) -> bool
AndroidX.Media3.ExoPlayer.Metadata.MetadataRenderer.MetadataRenderer(AndroidX.Media3.ExoPlayer.Metadata.IMetadataOutput? output, Android.OS.Looper? outputLooper) -> void
AndroidX.Media3.ExoPlayer.Metadata.MetadataRenderer.MetadataRenderer(AndroidX.Media3.ExoPlayer.Metadata.IMetadataOutput? output, Android.OS.Looper? outputLooper, AndroidX.Media3.ExoPlayer.Metadata.IMetadataDecoderFactory? decoderFactory) -> void
AndroidX.Media3.ExoPlayer.Metadata.MetadataRenderer.MetadataRenderer(AndroidX.Media3.ExoPlayer.Metadata.IMetadataOutput? output, Android.OS.Looper? outputLooper, AndroidX.Media3.ExoPlayer.Metadata.IMetadataDecoderFactory? decoderFactory, bool outputMetadataEarly) -> void
AndroidX.Media3.ExoPlayer.MetadataRetriever
AndroidX.Media3.ExoPlayer.NoSampleRenderer
AndroidX.Media3.ExoPlayer.NoSampleRenderer.Capabilities.get -> AndroidX.Media3.ExoPlayer.IRendererCapabilities?
AndroidX.Media3.ExoPlayer.NoSampleRenderer.Configuration.get -> AndroidX.Media3.ExoPlayer.RendererConfiguration?
AndroidX.Media3.ExoPlayer.NoSampleRenderer.Disable() -> void
AndroidX.Media3.ExoPlayer.NoSampleRenderer.Enable(AndroidX.Media3.ExoPlayer.RendererConfiguration? configuration, AndroidX.Media3.Common.Format![]? formats, AndroidX.Media3.ExoPlayer.Source.ISampleStream? stream, long positionUs, bool joining, bool mayRenderStartOfStream, long startPositionUs, long offsetUs, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
AndroidX.Media3.ExoPlayer.NoSampleRenderer.HasReadStreamToEnd.get -> bool
AndroidX.Media3.ExoPlayer.NoSampleRenderer.Index.get -> int
AndroidX.Media3.ExoPlayer.NoSampleRenderer.Init(int index, AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId, AndroidX.Media3.Common.Util.IClock? clock) -> void
AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts
AndroidX.Media3.ExoPlayer.NoSampleRenderer.IsCurrentStreamFinal.get -> bool
AndroidX.Media3.ExoPlayer.NoSampleRenderer.MaybeThrowStreamError() -> void
AndroidX.Media3.ExoPlayer.NoSampleRenderer.NoSampleRenderer() -> void
AndroidX.Media3.ExoPlayer.NoSampleRenderer.NoSampleRenderer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.NoSampleRenderer.ReplaceStream(AndroidX.Media3.Common.Format![]? formats, AndroidX.Media3.ExoPlayer.Source.ISampleStream? stream, long startPositionUs, long offsetUs, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
AndroidX.Media3.ExoPlayer.NoSampleRenderer.Reset() -> void
AndroidX.Media3.ExoPlayer.NoSampleRenderer.ResetPosition(long positionUs) -> void
AndroidX.Media3.ExoPlayer.NoSampleRenderer.SetCurrentStreamFinal() -> void
AndroidX.Media3.ExoPlayer.NoSampleRenderer.Start() -> void
AndroidX.Media3.ExoPlayer.NoSampleRenderer.State.get -> int
AndroidX.Media3.ExoPlayer.NoSampleRenderer.Stop() -> void
AndroidX.Media3.ExoPlayer.NoSampleRenderer.Stream.get -> AndroidX.Media3.ExoPlayer.Source.ISampleStream?
AndroidX.Media3.ExoPlayer.NoSampleRenderer.TrackType.get -> int
AndroidX.Media3.ExoPlayer.Offline.DefaultDownloadIndex
AndroidX.Media3.ExoPlayer.Offline.DefaultDownloadIndex.DefaultDownloadIndex(AndroidX.Media3.Database.IDatabaseProvider? databaseProvider) -> void
AndroidX.Media3.ExoPlayer.Offline.DefaultDownloadIndex.DefaultDownloadIndex(AndroidX.Media3.Database.IDatabaseProvider? databaseProvider, string? name) -> void
AndroidX.Media3.ExoPlayer.Offline.DefaultDownloadIndex.GetDownload(string? id) -> AndroidX.Media3.ExoPlayer.Offline.Download?
AndroidX.Media3.ExoPlayer.Offline.DefaultDownloadIndex.GetDownloads(params int[]? states) -> AndroidX.Media3.ExoPlayer.Offline.IDownloadCursor?
AndroidX.Media3.ExoPlayer.Offline.DefaultDownloadIndex.PutDownload(AndroidX.Media3.ExoPlayer.Offline.Download? download) -> void
AndroidX.Media3.ExoPlayer.Offline.DefaultDownloadIndex.RemoveDownload(string? id) -> void
AndroidX.Media3.ExoPlayer.Offline.DefaultDownloadIndex.SetDownloadingStatesToQueued() -> void
AndroidX.Media3.ExoPlayer.Offline.DefaultDownloadIndex.SetStatesToRemoving() -> void
AndroidX.Media3.ExoPlayer.Offline.DefaultDownloadIndex.SetStopReason(int stopReason) -> void
AndroidX.Media3.ExoPlayer.Offline.DefaultDownloadIndex.SetStopReason(string? id, int stopReason) -> void
AndroidX.Media3.ExoPlayer.Offline.DefaultDownloaderFactory
AndroidX.Media3.ExoPlayer.Offline.DefaultDownloaderFactory.DefaultDownloaderFactory(AndroidX.Media3.DataSource.Cache.CacheDataSource.Factory? cacheDataSourceFactory) -> void
AndroidX.Media3.ExoPlayer.Offline.DefaultDownloaderFactory.DefaultDownloaderFactory(AndroidX.Media3.DataSource.Cache.CacheDataSource.Factory? cacheDataSourceFactory, Java.Util.Concurrent.IExecutor? executor) -> void
AndroidX.Media3.ExoPlayer.Offline.DefaultDownloaderFactory.DefaultDownloaderFactory(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Offline.Download
AndroidX.Media3.ExoPlayer.Offline.Download.BytesDownloaded.get -> long
AndroidX.Media3.ExoPlayer.Offline.Download.ContentLength.get -> long
AndroidX.Media3.ExoPlayer.Offline.Download.ContentLength.set -> void
AndroidX.Media3.ExoPlayer.Offline.Download.Download(AndroidX.Media3.ExoPlayer.Offline.DownloadRequest? request, int state, long startTimeMs, long updateTimeMs, long contentLength, int stopReason, int failureReason) -> void
AndroidX.Media3.ExoPlayer.Offline.Download.Download(AndroidX.Media3.ExoPlayer.Offline.DownloadRequest? request, int state, long startTimeMs, long updateTimeMs, long contentLength, int stopReason, int failureReason, AndroidX.Media3.ExoPlayer.Offline.DownloadProgress? progress) -> void
AndroidX.Media3.ExoPlayer.Offline.Download.FailureReason.get -> int
AndroidX.Media3.ExoPlayer.Offline.Download.FailureReason.set -> void
AndroidX.Media3.ExoPlayer.Offline.Download.IFailureReason
AndroidX.Media3.ExoPlayer.Offline.Download.IState
AndroidX.Media3.ExoPlayer.Offline.Download.IsTerminalState.get -> bool
AndroidX.Media3.ExoPlayer.Offline.Download.PercentDownloaded.get -> float
AndroidX.Media3.ExoPlayer.Offline.Download.Request.get -> AndroidX.Media3.ExoPlayer.Offline.DownloadRequest?
AndroidX.Media3.ExoPlayer.Offline.Download.Request.set -> void
AndroidX.Media3.ExoPlayer.Offline.Download.StartTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Offline.Download.StartTimeMs.set -> void
AndroidX.Media3.ExoPlayer.Offline.Download.State.get -> int
AndroidX.Media3.ExoPlayer.Offline.Download.State.set -> void
AndroidX.Media3.ExoPlayer.Offline.Download.StopReason.get -> int
AndroidX.Media3.ExoPlayer.Offline.Download.StopReason.set -> void
AndroidX.Media3.ExoPlayer.Offline.Download.UpdateTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Offline.Download.UpdateTimeMs.set -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadException
AndroidX.Media3.ExoPlayer.Offline.DownloadException.DownloadException(Java.Lang.Throwable? cause) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadException.DownloadException(string? message) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.AddAudioLanguagesToSelection(params string![]? languages) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.AddTextLanguagesToSelection(bool selectUndeterminedTextLanguage, params string![]? languages) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.AddTrackSelection(int periodIndex, AndroidX.Media3.Common.TrackSelectionParameters? trackSelectionParameters) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.AddTrackSelectionForSingleRenderer(int periodIndex, int rendererIndex, AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters? trackSelectorParameters, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionOverride!>? overrides) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.ClearTrackSelections(int periodIndex) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.DownloadHelper(AndroidX.Media3.Common.MediaItem? mediaItem, AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource, AndroidX.Media3.Common.TrackSelectionParameters? trackSelectionParameters, AndroidX.Media3.ExoPlayer.IRendererCapabilitiesList? rendererCapabilities) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.GetDownloadRequest(byte[]? data) -> AndroidX.Media3.ExoPlayer.Offline.DownloadRequest?
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.GetDownloadRequest(string? id, byte[]? data) -> AndroidX.Media3.ExoPlayer.Offline.DownloadRequest?
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.GetMappedTrackInfo(int periodIndex) -> AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo?
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.GetTrackGroups(int periodIndex) -> AndroidX.Media3.ExoPlayer.Source.TrackGroupArray?
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.GetTrackSelections(int periodIndex, int rendererIndex) -> System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection!>?
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.GetTracks(int periodIndex) -> AndroidX.Media3.Common.Tracks?
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.ICallback
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.ICallback.OnPrepareError(AndroidX.Media3.ExoPlayer.Offline.DownloadHelper? p0, Java.IO.IOException? p1) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.ICallback.OnPrepared(AndroidX.Media3.ExoPlayer.Offline.DownloadHelper? p0) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.LiveContentUnsupportedException
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.LiveContentUnsupportedException.LiveContentUnsupportedException() -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.LiveContentUnsupportedException.LiveContentUnsupportedException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.Manifest.get -> Java.Lang.Object?
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.PeriodCount.get -> int
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.Prepare(AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.ICallback? callback) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.Release() -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.ReplaceTrackSelections(int periodIndex, AndroidX.Media3.Common.TrackSelectionParameters? trackSelectionParameters) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.AddDownload(AndroidX.Media3.ExoPlayer.Offline.DownloadRequest? request) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.AddDownload(AndroidX.Media3.ExoPlayer.Offline.DownloadRequest? request, int stopReason) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.AddListener(AndroidX.Media3.ExoPlayer.Offline.DownloadManager.IListener? listener) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.ApplicationLooper.get -> Android.OS.Looper?
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.CurrentDownloads.get -> System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Offline.Download!>?
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.DownloadChangedEventArgs
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.DownloadChangedEventArgs.Download.get -> AndroidX.Media3.ExoPlayer.Offline.Download?
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.DownloadChangedEventArgs.DownloadChangedEventArgs(AndroidX.Media3.ExoPlayer.Offline.DownloadManager? downloadManager, AndroidX.Media3.ExoPlayer.Offline.Download? download, Java.Lang.Exception? finalException) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.DownloadChangedEventArgs.DownloadManager.get -> AndroidX.Media3.ExoPlayer.Offline.DownloadManager?
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.DownloadChangedEventArgs.FinalException.get -> Java.Lang.Exception?
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.DownloadIndex.get -> AndroidX.Media3.ExoPlayer.Offline.IDownloadIndex?
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.DownloadManager(Android.Content.Context? context, AndroidX.Media3.Database.IDatabaseProvider? databaseProvider, AndroidX.Media3.DataSource.Cache.ICache? cache, AndroidX.Media3.DataSource.IDataSourceFactory? upstreamFactory, Java.Util.Concurrent.IExecutor? executor) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.DownloadManager(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.Offline.IWritableDownloadIndex? downloadIndex, AndroidX.Media3.ExoPlayer.Offline.IDownloaderFactory? downloaderFactory) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.DownloadRemovedEventArgs
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.DownloadRemovedEventArgs.Download.get -> AndroidX.Media3.ExoPlayer.Offline.Download?
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.DownloadRemovedEventArgs.DownloadManager.get -> AndroidX.Media3.ExoPlayer.Offline.DownloadManager?
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.DownloadRemovedEventArgs.DownloadRemovedEventArgs(AndroidX.Media3.ExoPlayer.Offline.DownloadManager? downloadManager, AndroidX.Media3.ExoPlayer.Offline.Download? download) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.DownloadsPaused.get -> bool
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.DownloadsPausedChangedEventArgs
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.DownloadsPausedChangedEventArgs.DownloadManager.get -> AndroidX.Media3.ExoPlayer.Offline.DownloadManager?
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.DownloadsPausedChangedEventArgs.DownloadsPaused.get -> bool
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.DownloadsPausedChangedEventArgs.DownloadsPausedChangedEventArgs(AndroidX.Media3.ExoPlayer.Offline.DownloadManager? downloadManager, bool downloadsPaused) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.IListener
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.IListener.OnDownloadChanged(AndroidX.Media3.ExoPlayer.Offline.DownloadManager? downloadManager, AndroidX.Media3.ExoPlayer.Offline.Download? download, Java.Lang.Exception? finalException) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.IListener.OnDownloadRemoved(AndroidX.Media3.ExoPlayer.Offline.DownloadManager? downloadManager, AndroidX.Media3.ExoPlayer.Offline.Download? download) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.IListener.OnDownloadsPausedChanged(AndroidX.Media3.ExoPlayer.Offline.DownloadManager? downloadManager, bool downloadsPaused) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.IListener.OnIdle(AndroidX.Media3.ExoPlayer.Offline.DownloadManager? downloadManager) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.IListener.OnInitialized(AndroidX.Media3.ExoPlayer.Offline.DownloadManager? downloadManager) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.IListener.OnRequirementsStateChanged(AndroidX.Media3.ExoPlayer.Offline.DownloadManager? downloadManager, AndroidX.Media3.ExoPlayer.Scheduler.Requirements? requirements, int notMetRequirements) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.IListener.OnWaitingForRequirementsChanged(AndroidX.Media3.ExoPlayer.Offline.DownloadManager? downloadManager, bool waitingForRequirements) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.IdleEventArgs
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.IdleEventArgs.DownloadManager.get -> AndroidX.Media3.ExoPlayer.Offline.DownloadManager?
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.IdleEventArgs.IdleEventArgs(AndroidX.Media3.ExoPlayer.Offline.DownloadManager? downloadManager) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.InitializedEventArgs
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.InitializedEventArgs.DownloadManager.get -> AndroidX.Media3.ExoPlayer.Offline.DownloadManager?
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.InitializedEventArgs.InitializedEventArgs(AndroidX.Media3.ExoPlayer.Offline.DownloadManager? downloadManager) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.IsIdle.get -> bool
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.IsInitialized.get -> bool
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.IsWaitingForRequirements.get -> bool
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.MaxParallelDownloads.get -> int
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.MaxParallelDownloads.set -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.MinRetryCount.get -> int
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.MinRetryCount.set -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.NotMetRequirements.get -> int
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.PauseDownloads() -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.Release() -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.RemoveAllDownloads() -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.RemoveDownload(string? id) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.RemoveListener(AndroidX.Media3.ExoPlayer.Offline.DownloadManager.IListener? listener) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.Requirements.get -> AndroidX.Media3.ExoPlayer.Scheduler.Requirements?
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.Requirements.set -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.RequirementsStateChangedEventArgs
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.RequirementsStateChangedEventArgs.DownloadManager.get -> AndroidX.Media3.ExoPlayer.Offline.DownloadManager?
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.RequirementsStateChangedEventArgs.NotMetRequirements.get -> int
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.RequirementsStateChangedEventArgs.Requirements.get -> AndroidX.Media3.ExoPlayer.Scheduler.Requirements?
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.RequirementsStateChangedEventArgs.RequirementsStateChangedEventArgs(AndroidX.Media3.ExoPlayer.Offline.DownloadManager? downloadManager, AndroidX.Media3.ExoPlayer.Scheduler.Requirements? requirements, int notMetRequirements) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.ResumeDownloads() -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.SetStopReason(string? id, int stopReason) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.WaitingForRequirementsChangedEventArgs
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.WaitingForRequirementsChangedEventArgs.DownloadManager.get -> AndroidX.Media3.ExoPlayer.Offline.DownloadManager?
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.WaitingForRequirementsChangedEventArgs.WaitingForRequirements.get -> bool
AndroidX.Media3.ExoPlayer.Offline.DownloadManager.WaitingForRequirementsChangedEventArgs.WaitingForRequirementsChangedEventArgs(AndroidX.Media3.ExoPlayer.Offline.DownloadManager? downloadManager, bool waitingForRequirements) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadNotificationHelper
AndroidX.Media3.ExoPlayer.Offline.DownloadNotificationHelper.BuildDownloadCompletedNotification(Android.Content.Context? context, int smallIcon, Android.App.PendingIntent? contentIntent, string? message) -> Android.App.Notification?
AndroidX.Media3.ExoPlayer.Offline.DownloadNotificationHelper.BuildDownloadFailedNotification(Android.Content.Context? context, int smallIcon, Android.App.PendingIntent? contentIntent, string? message) -> Android.App.Notification?
AndroidX.Media3.ExoPlayer.Offline.DownloadNotificationHelper.BuildProgressNotification(Android.Content.Context? context, int smallIcon, Android.App.PendingIntent? contentIntent, string? message, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Offline.Download!>? downloads, int notMetRequirements) -> Android.App.Notification?
AndroidX.Media3.ExoPlayer.Offline.DownloadNotificationHelper.DownloadNotificationHelper(Android.Content.Context? context, string? channelId) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadProgress
AndroidX.Media3.ExoPlayer.Offline.DownloadProgress.BytesDownloaded.get -> long
AndroidX.Media3.ExoPlayer.Offline.DownloadProgress.BytesDownloaded.set -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadProgress.DownloadProgress() -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadProgress.DownloadProgress(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadProgress.PercentDownloaded.get -> float
AndroidX.Media3.ExoPlayer.Offline.DownloadProgress.PercentDownloaded.set -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Builder
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Builder.Builder(string? id, Android.Net.Uri? uri) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.ByteRange
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.ByteRange.DescribeContents() -> int
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.ByteRange.Length.get -> long
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.ByteRange.Length.set -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.ByteRange.Offset.get -> long
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.ByteRange.Offset.set -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.ByteRange.WriteToParcel(Android.OS.Parcel? dest, Android.OS.ParcelableWriteFlags flags) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.CopyWithId(string? id) -> AndroidX.Media3.ExoPlayer.Offline.DownloadRequest?
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.CopyWithKeySetId(byte[]? keySetId) -> AndroidX.Media3.ExoPlayer.Offline.DownloadRequest?
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.CopyWithMergedRequest(AndroidX.Media3.ExoPlayer.Offline.DownloadRequest? newRequest) -> AndroidX.Media3.ExoPlayer.Offline.DownloadRequest?
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.CustomCacheKey.get -> string?
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.CustomCacheKey.set -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Data.get -> System.Collections.Generic.IList<byte>?
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Data.set -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.DescribeContents() -> int
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Id.get -> string?
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Id.set -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.KeySetId.get -> System.Collections.Generic.IList<byte>?
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.KeySetId.set -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.MimeType.get -> string?
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.MimeType.set -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.StreamKeys.get -> System.Collections.IList?
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.StreamKeys.set -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.ToMediaItem() -> AndroidX.Media3.Common.MediaItem?
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.UnsupportedRequestException
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.UnsupportedRequestException.UnsupportedRequestException() -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.UnsupportedRequestException.UnsupportedRequestException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Uri.get -> Android.Net.Uri?
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Uri.set -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.WriteToParcel(Android.OS.Parcel? dest, Android.OS.ParcelableWriteFlags flags) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadService
AndroidX.Media3.ExoPlayer.Offline.DownloadService.DownloadService(int foregroundNotificationId) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadService.DownloadService(int foregroundNotificationId, long foregroundNotificationUpdateInterval) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadService.DownloadService(int foregroundNotificationId, long foregroundNotificationUpdateInterval, string? channelId, int channelNameResourceId, int channelDescriptionResourceId) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadService.DownloadService(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloadService.InvalidateForegroundNotification() -> void
AndroidX.Media3.ExoPlayer.Offline.DownloaderProgressEventArgs
AndroidX.Media3.ExoPlayer.Offline.DownloaderProgressEventArgs.DownloaderProgressEventArgs(long p0, long p1, float p2) -> void
AndroidX.Media3.ExoPlayer.Offline.DownloaderProgressEventArgs.P0.get -> long
AndroidX.Media3.ExoPlayer.Offline.DownloaderProgressEventArgs.P1.get -> long
AndroidX.Media3.ExoPlayer.Offline.DownloaderProgressEventArgs.P2.get -> float
AndroidX.Media3.ExoPlayer.Offline.FilteringManifestParser
AndroidX.Media3.ExoPlayer.Offline.FilteringManifestParser.FilteringManifestParser(AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.IParser? parser, System.Collections.Generic.IList<AndroidX.Media3.Common.StreamKey!>? streamKeys) -> void
AndroidX.Media3.ExoPlayer.Offline.FilteringManifestParser.Parse(Android.Net.Uri? uri, System.IO.Stream? inputStream) -> Java.Lang.Object?
AndroidX.Media3.ExoPlayer.Offline.IDownloadCursor
AndroidX.Media3.ExoPlayer.Offline.IDownloadCursor.Close() -> void
AndroidX.Media3.ExoPlayer.Offline.IDownloadCursor.Count.get -> int
AndroidX.Media3.ExoPlayer.Offline.IDownloadCursor.Download.get -> AndroidX.Media3.ExoPlayer.Offline.Download?
AndroidX.Media3.ExoPlayer.Offline.IDownloadCursor.IsAfterLast.get -> bool
AndroidX.Media3.ExoPlayer.Offline.IDownloadCursor.IsBeforeFirst.get -> bool
AndroidX.Media3.ExoPlayer.Offline.IDownloadCursor.IsClosed.get -> bool
AndroidX.Media3.ExoPlayer.Offline.IDownloadCursor.IsFirst.get -> bool
AndroidX.Media3.ExoPlayer.Offline.IDownloadCursor.IsLast.get -> bool
AndroidX.Media3.ExoPlayer.Offline.IDownloadCursor.MoveToFirst() -> bool
AndroidX.Media3.ExoPlayer.Offline.IDownloadCursor.MoveToLast() -> bool
AndroidX.Media3.ExoPlayer.Offline.IDownloadCursor.MoveToNext() -> bool
AndroidX.Media3.ExoPlayer.Offline.IDownloadCursor.MoveToPosition(int p0) -> bool
AndroidX.Media3.ExoPlayer.Offline.IDownloadCursor.MoveToPrevious() -> bool
AndroidX.Media3.ExoPlayer.Offline.IDownloadCursor.Position.get -> int
AndroidX.Media3.ExoPlayer.Offline.IDownloadIndex
AndroidX.Media3.ExoPlayer.Offline.IDownloadIndex.GetDownload(string? p0) -> AndroidX.Media3.ExoPlayer.Offline.Download?
AndroidX.Media3.ExoPlayer.Offline.IDownloadIndex.GetDownloads(params int[]? p0) -> AndroidX.Media3.ExoPlayer.Offline.IDownloadCursor?
AndroidX.Media3.ExoPlayer.Offline.IDownloader
AndroidX.Media3.ExoPlayer.Offline.IDownloader.Cancel() -> void
AndroidX.Media3.ExoPlayer.Offline.IDownloader.Download(AndroidX.Media3.ExoPlayer.Offline.IDownloaderProgressListener? p0) -> void
AndroidX.Media3.ExoPlayer.Offline.IDownloader.Remove() -> void
AndroidX.Media3.ExoPlayer.Offline.IDownloaderFactory
AndroidX.Media3.ExoPlayer.Offline.IDownloaderFactory.CreateDownloader(AndroidX.Media3.ExoPlayer.Offline.DownloadRequest? p0) -> AndroidX.Media3.ExoPlayer.Offline.IDownloader?
AndroidX.Media3.ExoPlayer.Offline.IDownloaderProgressListener
AndroidX.Media3.ExoPlayer.Offline.IDownloaderProgressListener.OnProgress(long p0, long p1, float p2) -> void
AndroidX.Media3.ExoPlayer.Offline.IFilterableManifest
AndroidX.Media3.ExoPlayer.Offline.IFilterableManifest.Copy(System.Collections.Generic.IList<AndroidX.Media3.Common.StreamKey!>? p0) -> Java.Lang.Object?
AndroidX.Media3.ExoPlayer.Offline.IWritableDownloadIndex
AndroidX.Media3.ExoPlayer.Offline.IWritableDownloadIndex.PutDownload(AndroidX.Media3.ExoPlayer.Offline.Download? p0) -> void
AndroidX.Media3.ExoPlayer.Offline.IWritableDownloadIndex.RemoveDownload(string? p0) -> void
AndroidX.Media3.ExoPlayer.Offline.IWritableDownloadIndex.SetDownloadingStatesToQueued() -> void
AndroidX.Media3.ExoPlayer.Offline.IWritableDownloadIndex.SetStatesToRemoving() -> void
AndroidX.Media3.ExoPlayer.Offline.IWritableDownloadIndex.SetStopReason(int p0) -> void
AndroidX.Media3.ExoPlayer.Offline.IWritableDownloadIndex.SetStopReason(string? p0, int p1) -> void
AndroidX.Media3.ExoPlayer.Offline.ProgressiveDownloader
AndroidX.Media3.ExoPlayer.Offline.ProgressiveDownloader.Cancel() -> void
AndroidX.Media3.ExoPlayer.Offline.ProgressiveDownloader.Download(AndroidX.Media3.ExoPlayer.Offline.IDownloaderProgressListener? progressListener) -> void
AndroidX.Media3.ExoPlayer.Offline.ProgressiveDownloader.ProgressiveDownloader(AndroidX.Media3.Common.MediaItem? mediaItem, AndroidX.Media3.DataSource.Cache.CacheDataSource.Factory? cacheDataSourceFactory) -> void
AndroidX.Media3.ExoPlayer.Offline.ProgressiveDownloader.ProgressiveDownloader(AndroidX.Media3.Common.MediaItem? mediaItem, AndroidX.Media3.DataSource.Cache.CacheDataSource.Factory? cacheDataSourceFactory, Java.Util.Concurrent.IExecutor? executor) -> void
AndroidX.Media3.ExoPlayer.Offline.ProgressiveDownloader.Remove() -> void
AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader
AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.Download(AndroidX.Media3.ExoPlayer.Offline.IDownloaderProgressListener? progressListener) -> void
AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.Execute(AndroidX.Media3.Common.Util.RunnableFutureTask? runnable, bool removing) -> Java.Lang.Object?
AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.GetManifest(AndroidX.Media3.DataSource.IDataSource? dataSource, AndroidX.Media3.DataSource.DataSpec? dataSpec, bool removing) -> Java.Lang.Object?
AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.Remove() -> void
AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.Segment
AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.Segment.DataSpec.get -> AndroidX.Media3.DataSource.DataSpec?
AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.Segment.DataSpec.set -> void
AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.Segment.Segment(long startTimeUs, AndroidX.Media3.DataSource.DataSpec? dataSpec) -> void
AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.Segment.Segment(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.Segment.StartTimeUs.get -> long
AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.Segment.StartTimeUs.set -> void
AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.SegmentDownloader(AndroidX.Media3.Common.MediaItem? mediaItem, AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.IParser? manifestParser, AndroidX.Media3.DataSource.Cache.CacheDataSource.Factory? cacheDataSourceFactory, Java.Util.Concurrent.IExecutor? executor) -> void
AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.SegmentDownloader(AndroidX.Media3.Common.MediaItem? mediaItem, AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.IParser? manifestParser, AndroidX.Media3.DataSource.Cache.CacheDataSource.Factory? cacheDataSourceFactory, Java.Util.Concurrent.IExecutor? executor, long maxMergedSegmentStartTimeDiffMs) -> void
AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.SegmentDownloader(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.OffloadedPlaybackEventArgs
AndroidX.Media3.ExoPlayer.OffloadedPlaybackEventArgs.IsOffloadedPlayback.get -> bool
AndroidX.Media3.ExoPlayer.OffloadedPlaybackEventArgs.OffloadedPlaybackEventArgs(bool isOffloadedPlayback) -> void
AndroidX.Media3.ExoPlayer.PlaybackLooperProvider
AndroidX.Media3.ExoPlayer.PlaybackLooperProvider.ObtainLooper() -> Android.OS.Looper?
AndroidX.Media3.ExoPlayer.PlaybackLooperProvider.PlaybackLooperProvider() -> void
AndroidX.Media3.ExoPlayer.PlaybackLooperProvider.PlaybackLooperProvider(Android.OS.Looper? looper) -> void
AndroidX.Media3.ExoPlayer.PlaybackLooperProvider.ReleaseLooper() -> void
AndroidX.Media3.ExoPlayer.PlayerMessage
AndroidX.Media3.ExoPlayer.PlayerMessage.BlockUntilDelivered() -> bool
AndroidX.Media3.ExoPlayer.PlayerMessage.BlockUntilDelivered(long timeoutMs) -> bool
AndroidX.Media3.ExoPlayer.PlayerMessage.Cancel() -> AndroidX.Media3.ExoPlayer.PlayerMessage?
AndroidX.Media3.ExoPlayer.PlayerMessage.DeleteAfterDelivery.get -> bool
AndroidX.Media3.ExoPlayer.PlayerMessage.ISender
AndroidX.Media3.ExoPlayer.PlayerMessage.ISender.SendMessage(AndroidX.Media3.ExoPlayer.PlayerMessage? p0) -> void
AndroidX.Media3.ExoPlayer.PlayerMessage.ITarget
AndroidX.Media3.ExoPlayer.PlayerMessage.ITarget.HandleMessage(int p0, Java.Lang.Object? p1) -> void
AndroidX.Media3.ExoPlayer.PlayerMessage.IsCanceled.get -> bool
AndroidX.Media3.ExoPlayer.PlayerMessage.Looper.get -> Android.OS.Looper?
AndroidX.Media3.ExoPlayer.PlayerMessage.MarkAsProcessed(bool isDelivered) -> void
AndroidX.Media3.ExoPlayer.PlayerMessage.MediaItemIndex.get -> int
AndroidX.Media3.ExoPlayer.PlayerMessage.Payload.get -> Java.Lang.Object?
AndroidX.Media3.ExoPlayer.PlayerMessage.PlayerMessage(AndroidX.Media3.ExoPlayer.PlayerMessage.ISender? sender, AndroidX.Media3.ExoPlayer.PlayerMessage.ITarget? target, AndroidX.Media3.Common.Timeline? timeline, int defaultMediaItemIndex, AndroidX.Media3.Common.Util.IClock? clock, Android.OS.Looper? defaultLooper) -> void
AndroidX.Media3.ExoPlayer.PlayerMessage.PositionMs.get -> long
AndroidX.Media3.ExoPlayer.PlayerMessage.Send() -> AndroidX.Media3.ExoPlayer.PlayerMessage?
AndroidX.Media3.ExoPlayer.PlayerMessage.SetDeleteAfterDelivery(bool deleteAfterDelivery) -> AndroidX.Media3.ExoPlayer.PlayerMessage?
AndroidX.Media3.ExoPlayer.PlayerMessage.SetLooper(Android.OS.Looper? looper) -> AndroidX.Media3.ExoPlayer.PlayerMessage?
AndroidX.Media3.ExoPlayer.PlayerMessage.SetPayload(Java.Lang.Object? payload) -> AndroidX.Media3.ExoPlayer.PlayerMessage?
AndroidX.Media3.ExoPlayer.PlayerMessage.SetPosition(int mediaItemIndex, long positionMs) -> AndroidX.Media3.ExoPlayer.PlayerMessage?
AndroidX.Media3.ExoPlayer.PlayerMessage.SetPosition(long positionMs) -> AndroidX.Media3.ExoPlayer.PlayerMessage?
AndroidX.Media3.ExoPlayer.PlayerMessage.SetType(int messageType) -> AndroidX.Media3.ExoPlayer.PlayerMessage?
AndroidX.Media3.ExoPlayer.PlayerMessage.Target.get -> AndroidX.Media3.ExoPlayer.PlayerMessage.ITarget?
AndroidX.Media3.ExoPlayer.PlayerMessage.Timeline.get -> AndroidX.Media3.Common.Timeline?
AndroidX.Media3.ExoPlayer.PlayerMessage.Type.get -> int
AndroidX.Media3.ExoPlayer.RendererCapabilitiesEventArgs
AndroidX.Media3.ExoPlayer.RendererCapabilitiesEventArgs.P0.get -> AndroidX.Media3.ExoPlayer.IRenderer?
AndroidX.Media3.ExoPlayer.RendererCapabilitiesEventArgs.RendererCapabilitiesEventArgs(AndroidX.Media3.ExoPlayer.IRenderer? p0) -> void
AndroidX.Media3.ExoPlayer.RendererConfiguration
AndroidX.Media3.ExoPlayer.RendererConfiguration.OffloadModePreferred.get -> int
AndroidX.Media3.ExoPlayer.RendererConfiguration.OffloadModePreferred.set -> void
AndroidX.Media3.ExoPlayer.RendererConfiguration.RendererConfiguration(bool tunneling) -> void
AndroidX.Media3.ExoPlayer.RendererConfiguration.RendererConfiguration(int offloadModePreferred, bool tunneling) -> void
AndroidX.Media3.ExoPlayer.RendererConfiguration.Tunneling.get -> bool
AndroidX.Media3.ExoPlayer.RendererConfiguration.Tunneling.set -> void
AndroidX.Media3.ExoPlayer.Scheduler.IScheduler
AndroidX.Media3.ExoPlayer.Scheduler.IScheduler.Cancel() -> bool
AndroidX.Media3.ExoPlayer.Scheduler.IScheduler.GetSupportedRequirements(AndroidX.Media3.ExoPlayer.Scheduler.Requirements? p0) -> AndroidX.Media3.ExoPlayer.Scheduler.Requirements?
AndroidX.Media3.ExoPlayer.Scheduler.IScheduler.Schedule(AndroidX.Media3.ExoPlayer.Scheduler.Requirements? p0, string? p1, string? p2) -> bool
AndroidX.Media3.ExoPlayer.Scheduler.PlatformScheduler
AndroidX.Media3.ExoPlayer.Scheduler.PlatformScheduler.Cancel() -> bool
AndroidX.Media3.ExoPlayer.Scheduler.PlatformScheduler.GetSupportedRequirements(AndroidX.Media3.ExoPlayer.Scheduler.Requirements? requirements) -> AndroidX.Media3.ExoPlayer.Scheduler.Requirements?
AndroidX.Media3.ExoPlayer.Scheduler.PlatformScheduler.PlatformScheduler(Android.Content.Context? context, int jobId) -> void
AndroidX.Media3.ExoPlayer.Scheduler.PlatformScheduler.PlatformSchedulerService
AndroidX.Media3.ExoPlayer.Scheduler.PlatformScheduler.PlatformSchedulerService.PlatformSchedulerService() -> void
AndroidX.Media3.ExoPlayer.Scheduler.PlatformScheduler.Schedule(AndroidX.Media3.ExoPlayer.Scheduler.Requirements? requirements, string? servicePackage, string? serviceAction) -> bool
AndroidX.Media3.ExoPlayer.Scheduler.Requirements
AndroidX.Media3.ExoPlayer.Scheduler.Requirements.CheckRequirements(Android.Content.Context? context) -> bool
AndroidX.Media3.ExoPlayer.Scheduler.Requirements.DescribeContents() -> int
AndroidX.Media3.ExoPlayer.Scheduler.Requirements.FilterRequirements(int requirementsFilter) -> AndroidX.Media3.ExoPlayer.Scheduler.Requirements?
AndroidX.Media3.ExoPlayer.Scheduler.Requirements.GetNotMetRequirements(Android.Content.Context? context) -> int
AndroidX.Media3.ExoPlayer.Scheduler.Requirements.GetRequirements() -> int
AndroidX.Media3.ExoPlayer.Scheduler.Requirements.IRequirementFlags
AndroidX.Media3.ExoPlayer.Scheduler.Requirements.IsChargingRequired.get -> bool
AndroidX.Media3.ExoPlayer.Scheduler.Requirements.IsIdleRequired.get -> bool
AndroidX.Media3.ExoPlayer.Scheduler.Requirements.IsNetworkRequired.get -> bool
AndroidX.Media3.ExoPlayer.Scheduler.Requirements.IsStorageNotLowRequired.get -> bool
AndroidX.Media3.ExoPlayer.Scheduler.Requirements.IsUnmeteredNetworkRequired.get -> bool
AndroidX.Media3.ExoPlayer.Scheduler.Requirements.Requirements(int requirements) -> void
AndroidX.Media3.ExoPlayer.Scheduler.Requirements.WriteToParcel(Android.OS.Parcel? dest, Android.OS.ParcelableWriteFlags flags) -> void
AndroidX.Media3.ExoPlayer.Scheduler.RequirementsWatcher
AndroidX.Media3.ExoPlayer.Scheduler.RequirementsWatcher.EventArgs
AndroidX.Media3.ExoPlayer.Scheduler.RequirementsWatcher.EventArgs.EventArgs(AndroidX.Media3.ExoPlayer.Scheduler.RequirementsWatcher? p0, int p1) -> void
AndroidX.Media3.ExoPlayer.Scheduler.RequirementsWatcher.EventArgs.P0.get -> AndroidX.Media3.ExoPlayer.Scheduler.RequirementsWatcher?
AndroidX.Media3.ExoPlayer.Scheduler.RequirementsWatcher.EventArgs.P1.get -> int
AndroidX.Media3.ExoPlayer.Scheduler.RequirementsWatcher.IListener
AndroidX.Media3.ExoPlayer.Scheduler.RequirementsWatcher.IListener.OnRequirementsStateChanged(AndroidX.Media3.ExoPlayer.Scheduler.RequirementsWatcher? p0, int p1) -> void
AndroidX.Media3.ExoPlayer.Scheduler.RequirementsWatcher.Requirements.get -> AndroidX.Media3.ExoPlayer.Scheduler.Requirements?
AndroidX.Media3.ExoPlayer.Scheduler.RequirementsWatcher.RequirementsWatcher(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.Scheduler.RequirementsWatcher.IListener? listener, AndroidX.Media3.ExoPlayer.Scheduler.Requirements? requirements) -> void
AndroidX.Media3.ExoPlayer.Scheduler.RequirementsWatcher.Start() -> int
AndroidX.Media3.ExoPlayer.Scheduler.RequirementsWatcher.Stop() -> void
AndroidX.Media3.ExoPlayer.SeekParameters
AndroidX.Media3.ExoPlayer.SeekParameters.ResolveSeekPositionUs(long positionUs, long firstSyncUs, long secondSyncUs) -> long
AndroidX.Media3.ExoPlayer.SeekParameters.SeekParameters(long toleranceBeforeUs, long toleranceAfterUs) -> void
AndroidX.Media3.ExoPlayer.SeekParameters.ToleranceAfterUs.get -> long
AndroidX.Media3.ExoPlayer.SeekParameters.ToleranceAfterUs.set -> void
AndroidX.Media3.ExoPlayer.SeekParameters.ToleranceBeforeUs.get -> long
AndroidX.Media3.ExoPlayer.SeekParameters.ToleranceBeforeUs.set -> void
AndroidX.Media3.ExoPlayer.SimpleExoPlayer
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AudioAttributesChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.AudioAttributesChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AudioCodecError -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.AudioCodecErrorEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AudioDecoderInitialized -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.AudioDecoderInitializedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AudioDecoderInitializedDeprecated -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.AudioDecoderInitializedDeprecatedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AudioDecoderReleased -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.AudioDecoderReleasedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AudioDisabled -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.AudioDisabledEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AudioEnabled -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.AudioEnabledEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AudioInputFormatChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.AudioInputFormatChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AudioPositionAdvancing -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.AudioPositionAdvancingEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AudioSessionIdChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.AudioSessionIdChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AudioSinkError -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.AudioSinkErrorEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AudioTrackInitialized -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.AudioTrackInitializedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AudioTrackReleased -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.AudioTrackReleasedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AudioUnderrun -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.AudioUnderrunEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AvailableCommandsChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.AvailableCommandsChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.BandwidthEstimate -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.BandwidthEstimateEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.Build() -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.Builder(Android.Content.Context? context) -> void
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.Builder(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.IRenderersFactory? renderersFactory) -> void
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.Builder(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.IRenderersFactory? renderersFactory, AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector? trackSelector, AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory? mediaSourceFactory, AndroidX.Media3.ExoPlayer.ILoadControl? loadControl, AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter? bandwidthMeter, AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector? analyticsCollector) -> void
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.Builder(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.IRenderersFactory? renderersFactory, AndroidX.Media3.Extractor.IExtractorsFactory? extractorsFactory) -> void
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.Builder(Android.Content.Context? context, AndroidX.Media3.Extractor.IExtractorsFactory? extractorsFactory) -> void
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.ExperimentalSetForegroundModeTimeoutMs(long timeoutMs) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetAnalyticsCollector(AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector? analyticsCollector) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetAudioAttributes(AndroidX.Media3.Common.AudioAttributes? audioAttributes, bool handleAudioFocus) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetBandwidthMeter(AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter? bandwidthMeter) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetClock(AndroidX.Media3.Common.Util.IClock? clock) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetDetachSurfaceTimeoutMs(long detachSurfaceTimeoutMs) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetHandleAudioBecomingNoisy(bool handleAudioBecomingNoisy) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetLivePlaybackSpeedControl(AndroidX.Media3.ExoPlayer.ILivePlaybackSpeedControl? livePlaybackSpeedControl) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetLoadControl(AndroidX.Media3.ExoPlayer.ILoadControl? loadControl) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetLooper(Android.OS.Looper? looper) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetMediaSourceFactory(AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory? mediaSourceFactory) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetPauseAtEndOfMediaItems(bool pauseAtEndOfMediaItems) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetPriorityTaskManager(AndroidX.Media3.Common.PriorityTaskManager? priorityTaskManager) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetReleaseTimeoutMs(long releaseTimeoutMs) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetSeekBackIncrementMs(long seekBackIncrementMs) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetSeekForwardIncrementMs(long seekForwardIncrementMs) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetSeekParameters(AndroidX.Media3.ExoPlayer.SeekParameters? seekParameters) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetSkipSilenceEnabled(bool skipSilenceEnabled) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetTrackSelector(AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector? trackSelector) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetUseLazyPreparation(bool useLazyPreparation) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetVideoChangeFrameRateStrategy(int videoChangeFrameRateStrategy) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetVideoScalingMode(int videoScalingMode) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.SetWakeMode(int wakeMode) -> AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder?
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.CameraMotion -> System.EventHandler<AndroidX.Media3.ExoPlayer.Video.Spherical.CameraMotionEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.CameraMotionReset -> System.EventHandler!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Cues -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.CuesEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.CuesDeprecated -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.CuesDeprecatedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.DeviceInfoChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.DeviceInfoChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.DeviceVolumeChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.DeviceVolumeChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.DownstreamFormatChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.DownstreamFormatChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.DrmKeysLoaded -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.DrmKeysLoadedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.DrmKeysRemoved -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.DrmKeysRemovedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.DrmKeysRestored -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.DrmKeysRestoredEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.DrmSessionAcquired -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.DrmSessionAcquiredEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.DrmSessionAcquiredDeprecated -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.DrmSessionAcquiredDeprecatedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.DrmSessionManagerError -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.DrmSessionManagerErrorEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.DrmSessionReleased -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.DrmSessionReleasedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.DroppedVideoFrames -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.DroppedVideoFramesEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Events -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.EventsEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.InterfaceConsts
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.IsLoadingChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.IsLoadingChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.IsPlayingChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.IsPlayingChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.LoadCanceled -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.LoadCanceledEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.LoadCompleted -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.LoadCompletedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.LoadError -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.LoadErrorEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.LoadStarted -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.LoadStartedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.LoadingChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.LoadingChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.MaxSeekToPreviousPositionChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.MaxSeekToPreviousPositionChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.MediaItemTransition -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.MediaItemTransitionEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.MediaMetadataChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.MediaMetadataChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Metadata -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.MetadataEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.OffloadedPlayback -> System.EventHandler<AndroidX.Media3.ExoPlayer.OffloadedPlaybackEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PlayWhenReadyChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.PlayWhenReadyChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PlaybackParametersChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.PlaybackParametersChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PlaybackStateChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.PlaybackStateChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PlaybackSuppressionReasonChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.PlaybackSuppressionReasonChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PlayerErrorChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.PlayerErrorChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PlayerErrorEvent -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.PlayerErrorEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PlayerReleased -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.PlayerReleasedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PlayerStateChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.PlayerStateChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PlaylistMetadataChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.PlaylistMetadataChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PositionDiscontinuity -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.PositionDiscontinuityEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PositionDiscontinuityDeprecated -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.PositionDiscontinuityDeprecatedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.RenderedFirstFrame -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.RenderedFirstFrameEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.RendererReadyChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.RendererReadyChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.RepeatModeChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.RepeatModeChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SeekBackIncrementChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.SeekBackIncrementChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SeekForwardIncrementChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.SeekForwardIncrementChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SeekStarted -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.SeekStartedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.ShuffleModeChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.ShuffleModeChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SimpleExoPlayer(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.IRenderersFactory? renderersFactory, AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector? trackSelector, AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory? mediaSourceFactory, AndroidX.Media3.ExoPlayer.ILoadControl? loadControl, AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter? bandwidthMeter, AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector? analyticsCollector, bool useLazyPreparation, AndroidX.Media3.Common.Util.IClock? clock, Android.OS.Looper? applicationLooper) -> void
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SimpleExoPlayer(AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder? builder) -> void
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SimpleExoPlayer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SkipSilenceEnabledChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.SkipSilenceEnabledChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SleepingForOffloadChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.SleepingForOffloadChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SurfaceSizeChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.SurfaceSizeChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.TimelineChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.TimelineChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.TrackSelectionParametersChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.TrackSelectionParametersChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.TracksChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.TracksChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.UpstreamDiscarded -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.UpstreamDiscardedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.VideoCodecError -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.VideoCodecErrorEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.VideoDecoderInitialized -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.VideoDecoderInitializedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.VideoDecoderInitializedDeprecated -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.VideoDecoderInitializedDeprecatedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.VideoDecoderReleased -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.VideoDecoderReleasedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.VideoDisabled -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.VideoDisabledEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.VideoEnabled -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.VideoEnabledEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.VideoFrameMetadata -> System.EventHandler<AndroidX.Media3.ExoPlayer.Video.VideoFrameMetadataEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.VideoFrameProcessingOffset -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.VideoFrameProcessingOffsetEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.VideoInputFormatChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.VideoInputFormatChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.VideoSizeChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.VideoSizeChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.VideoSizeChangedDeprecated -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.VideoSizeChangedDeprecatedEventArgs!>!
AndroidX.Media3.ExoPlayer.SimpleExoPlayer.VolumeChanged -> System.EventHandler<AndroidX.Media3.ExoPlayer.Analytics.VolumeChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.SleepingForOffloadChangedEventArgs
AndroidX.Media3.ExoPlayer.SleepingForOffloadChangedEventArgs.IsSleepingForOffload.get -> bool
AndroidX.Media3.ExoPlayer.SleepingForOffloadChangedEventArgs.SleepingForOffloadChangedEventArgs(bool isSleepingForOffload) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.AdLoadErrorEventArgs
AndroidX.Media3.ExoPlayer.Source.Ads.AdLoadErrorEventArgs.AdLoadErrorEventArgs(AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdLoadException? error, AndroidX.Media3.DataSource.DataSpec? dataSpec) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.AdLoadErrorEventArgs.DataSpec.get -> AndroidX.Media3.DataSource.DataSpec?
AndroidX.Media3.ExoPlayer.Source.Ads.AdLoadErrorEventArgs.Error.get -> AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdLoadException?
AndroidX.Media3.ExoPlayer.Source.Ads.AdPlaybackStateEventArgs
AndroidX.Media3.ExoPlayer.Source.Ads.AdPlaybackStateEventArgs.AdPlaybackState.get -> AndroidX.Media3.Common.AdPlaybackState?
AndroidX.Media3.ExoPlayer.Source.Ads.AdPlaybackStateEventArgs.AdPlaybackStateEventArgs(AndroidX.Media3.Common.AdPlaybackState? adPlaybackState) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource
AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdLoadException
AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdLoadException.IType
AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdLoadException.RuntimeExceptionForUnexpected.get -> Java.Lang.RuntimeException?
AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdLoadException.Type.get -> int
AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdLoadException.Type.set -> void
AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdsId.get -> Java.Lang.Object?
AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdsMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? contentMediaSource, AndroidX.Media3.DataSource.DataSpec? adTagDataSpec, Java.Lang.Object? adsId, AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory? adMediaSourceFactory, AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoader? adsLoader, AndroidX.Media3.Common.IAdViewProvider? adViewProvider) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdsMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? contentMediaSource, AndroidX.Media3.DataSource.DataSpec? adTagDataSpec, Java.Lang.Object? adsId, AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory? adMediaSourceFactory, AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoader? adsLoader, AndroidX.Media3.Common.IAdViewProvider? adViewProvider, bool useLazyContentSourcePreparation) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.CanUpdateMediaItem(AndroidX.Media3.Common.MediaItem? mediaItem) -> bool
AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.UpdateMediaItem(AndroidX.Media3.Common.MediaItem? mediaItem) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoader
AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoader.HandleContentTimelineChanged(AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource? adsMediaSource, AndroidX.Media3.Common.Timeline? timeline) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoader.HandlePrepareComplete(AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource? p0, int p1, int p2) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoader.HandlePrepareError(AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource? p0, int p1, int p2, Java.IO.IOException? p3) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoader.Release() -> void
AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoader.SetPlayer(AndroidX.Media3.Common.IPlayer? p0) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoader.SetSupportedContentTypes(params int[]? p0) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoader.Start(AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource? p0, AndroidX.Media3.DataSource.DataSpec? p1, Java.Lang.Object? p2, AndroidX.Media3.Common.IAdViewProvider? p3, AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoaderEventListener? p4) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoader.Stop(AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource? p0, AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoaderEventListener? p1) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoaderEventListener
AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoaderEventListener.OnAdClicked() -> void
AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoaderEventListener.OnAdLoadError(AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdLoadException? error, AndroidX.Media3.DataSource.DataSpec? dataSpec) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoaderEventListener.OnAdPlaybackState(AndroidX.Media3.Common.AdPlaybackState? adPlaybackState) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoaderEventListener.OnAdTapped() -> void
AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoaderProvider
AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoaderProvider.GetAdsLoader(AndroidX.Media3.Common.MediaItem.AdsConfiguration? p0) -> AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoader?
AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource
AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.CanUpdateMediaItem(AndroidX.Media3.Common.MediaItem? mediaItem) -> bool
AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.IAdPlaybackStateUpdater
AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.IAdPlaybackStateUpdater.OnAdPlaybackStateUpdateRequested(AndroidX.Media3.Common.Timeline? p0) -> bool
AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.OnDownstreamFormatChanged(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.OnDrmKeysLoaded(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.OnDrmKeysRemoved(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.OnDrmKeysRestored(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.OnDrmSessionAcquired(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, int state) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.OnDrmSessionManagerError(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, Java.Lang.Exception? error) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.OnDrmSessionReleased(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.OnLoadCanceled(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.OnLoadCompleted(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.OnLoadError(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData, Java.IO.IOException? error, bool wasCanceled) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.OnLoadStarted(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData, int retryCount) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.OnSourceInfoRefreshed(AndroidX.Media3.ExoPlayer.Source.IMediaSource? source, AndroidX.Media3.Common.Timeline? timeline) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.OnUpstreamDiscarded(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.ServerSideAdInsertionMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource, AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.IAdPlaybackStateUpdater? adPlaybackStateUpdater) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.SetAdPlaybackStates(Google.Common.Collect.ImmutableMap? adPlaybackStates, AndroidX.Media3.Common.Timeline? contentTimeline) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.UpdateMediaItem(AndroidX.Media3.Common.MediaItem? mediaItem) -> void
AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionUtil
AndroidX.Media3.ExoPlayer.Source.Ads.SinglePeriodAdTimeline
AndroidX.Media3.ExoPlayer.Source.Ads.SinglePeriodAdTimeline.SinglePeriodAdTimeline(AndroidX.Media3.Common.Timeline? contentTimeline, AndroidX.Media3.Common.AdPlaybackState? adPlaybackState) -> void
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.AddDrmEventListener(Android.OS.Handler? handler, AndroidX.Media3.ExoPlayer.Drm.IDrmSessionEventListener? eventListener) -> void
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.AddEventListener(Android.OS.Handler? handler, AndroidX.Media3.ExoPlayer.Source.IMediaSourceEventListener? eventListener) -> void
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.BaseMediaSource() -> void
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.BaseMediaSource(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.CreateDrmEventDispatcher(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher?
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.CreateDrmEventDispatcher(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher?
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.CreateEventDispatcher(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher?
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.CreateEventDispatcher(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, long mediaTimeOffsetMs) -> AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher?
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.CreateEventDispatcher(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher?
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.CreateEventDispatcher(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, long mediaTimeOffsetMs) -> AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher?
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.Disable(AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceCaller? caller) -> void
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.Enable(AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceCaller? caller) -> void
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.IsEnabled.get -> bool
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.PlayerId.get -> AndroidX.Media3.ExoPlayer.Analytics.PlayerId?
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.PlayerId.set -> void
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.PrepareSource(AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceCaller? caller, AndroidX.Media3.DataSource.ITransferListener? mediaTransferListener) -> void
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.PrepareSource(AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceCaller? caller, AndroidX.Media3.DataSource.ITransferListener? mediaTransferListener, AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> void
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.PrepareSourceCalled() -> bool
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.RefreshSourceInfo(AndroidX.Media3.Common.Timeline? timeline) -> void
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.ReleaseSource(AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceCaller? caller) -> void
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.RemoveDrmEventListener(AndroidX.Media3.ExoPlayer.Drm.IDrmSessionEventListener? eventListener) -> void
AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.RemoveEventListener(AndroidX.Media3.ExoPlayer.Source.IMediaSourceEventListener? eventListener) -> void
AndroidX.Media3.ExoPlayer.Source.BehindLiveWindowException
AndroidX.Media3.ExoPlayer.Source.BehindLiveWindowException.BehindLiveWindowException() -> void
AndroidX.Media3.ExoPlayer.Source.BundledExtractorsAdapter
AndroidX.Media3.ExoPlayer.Source.BundledExtractorsAdapter.BundledExtractorsAdapter(AndroidX.Media3.Extractor.IExtractorsFactory? extractorsFactory) -> void
AndroidX.Media3.ExoPlayer.Source.BundledExtractorsAdapter.CurrentInputPosition.get -> long
AndroidX.Media3.ExoPlayer.Source.BundledExtractorsAdapter.DisableSeekingOnMp3Streams() -> void
AndroidX.Media3.ExoPlayer.Source.BundledExtractorsAdapter.Init(AndroidX.Media3.Common.IDataReader? dataReader, Android.Net.Uri? uri, System.Collections.Generic.IDictionary<string!, System.Collections.Generic.IList<string!>!>? responseHeaders, long position, long length, AndroidX.Media3.Extractor.IExtractorOutput? output) -> void
AndroidX.Media3.ExoPlayer.Source.BundledExtractorsAdapter.Read(AndroidX.Media3.Extractor.PositionHolder? positionHolder) -> int
AndroidX.Media3.ExoPlayer.Source.BundledExtractorsAdapter.Release() -> void
AndroidX.Media3.ExoPlayer.Source.BundledExtractorsAdapter.Seek(long position, long seekTimeUs) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunk
AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunk.BaseMediaChunk(AndroidX.Media3.DataSource.IDataSource? dataSource, AndroidX.Media3.DataSource.DataSpec? dataSpec, AndroidX.Media3.Common.Format? trackFormat, int trackSelectionReason, Java.Lang.Object? trackSelectionData, long startTimeUs, long endTimeUs, long clippedStartTimeUs, long clippedEndTimeUs, long chunkIndex) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunk.BaseMediaChunk(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunk.ClippedEndTimeUs.get -> long
AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunk.ClippedEndTimeUs.set -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunk.ClippedStartTimeUs.get -> long
AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunk.ClippedStartTimeUs.set -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunk.GetFirstSampleIndex(int trackIndex) -> int
AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunk.Output.get -> AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkOutput?
AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkIterator
AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkIterator.BaseMediaChunkIterator(long fromIndex, long toIndex) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkIterator.BaseMediaChunkIterator(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkIterator.CheckInBounds() -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkIterator.CurrentIndex.get -> long
AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkIterator.InterfaceConsts
AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkOutput
AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkOutput.BaseMediaChunkOutput(int[]? trackTypes, AndroidX.Media3.ExoPlayer.Source.SampleQueue![]? sampleQueues) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkOutput.GetWriteIndices() -> int[]?
AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkOutput.SetSampleOffsetUs(long sampleOffsetUs) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkOutput.Track(int id, int type) -> AndroidX.Media3.Extractor.ITrackOutput?
AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor
AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor.BundledChunkExtractor(AndroidX.Media3.Extractor.IExtractor? extractor, int primaryTrackType, AndroidX.Media3.Common.Format? primaryTrackManifestFormat) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor.ChunkIndex.get -> AndroidX.Media3.Extractor.ChunkIndex?
AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor.EndTracks() -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor.Factory
AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor.Factory.CreateProgressiveMediaExtractor(int primaryTrackType, AndroidX.Media3.Common.Format? representationFormat, bool enableEventMessageTrack, System.Collections.Generic.IList<AndroidX.Media3.Common.Format!>? closedCaptionFormats, AndroidX.Media3.Extractor.ITrackOutput? playerEmsgTrackOutput, AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractor?
AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor.Factory.ExperimentalParseSubtitlesDuringExtraction(bool parseSubtitlesDuringExtraction) -> AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor.Factory?
AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor.Factory.ExperimentalSetCodecsToParseWithinGopSampleDependencies(int codecsToParseWithinGopSampleDependencies) -> AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor.Factory?
AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor.Factory.Factory() -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor.Factory.GetOutputTextFormat(AndroidX.Media3.Common.Format? sourceFormat) -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor.Factory.SetSubtitleParserFactory(AndroidX.Media3.Extractor.Text.ISubtitleParserFactory? subtitleParserFactory) -> AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor.Factory?
AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor.GetSampleFormats() -> AndroidX.Media3.Common.Format![]?
AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor.Init(AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractorTrackOutputProvider? trackOutputProvider, long startTimeUs, long endTimeUs) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor.Read(AndroidX.Media3.Extractor.IExtractorInput? input) -> bool
AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor.Release() -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor.SeekMap(AndroidX.Media3.Extractor.ISeekMap? seekMap) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor.Track(int id, int type) -> AndroidX.Media3.Extractor.ITrackOutput?
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.BytesLoaded() -> long
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.Chunk(AndroidX.Media3.DataSource.IDataSource? dataSource, AndroidX.Media3.DataSource.DataSpec? dataSpec, int type, AndroidX.Media3.Common.Format? trackFormat, int trackSelectionReason, Java.Lang.Object? trackSelectionData, long startTimeUs, long endTimeUs) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.Chunk(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.DataSource.get -> AndroidX.Media3.DataSource.StatsDataSource?
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.DataSource.set -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.DataSpec.get -> AndroidX.Media3.DataSource.DataSpec?
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.DataSpec.set -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.DurationUs.get -> long
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.EndTimeUs.get -> long
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.EndTimeUs.set -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.LoadTaskId.get -> long
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.LoadTaskId.set -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.ResponseHeaders.get -> System.Collections.Generic.IDictionary<string!, System.Collections.Generic.IList<string!>!>?
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.StartTimeUs.get -> long
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.StartTimeUs.set -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.TrackFormat.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.TrackFormat.set -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.TrackSelectionData.get -> Java.Lang.Object?
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.TrackSelectionData.set -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.TrackSelectionReason.get -> int
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.TrackSelectionReason.set -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.Type.get -> int
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.Type.set -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.Uri.get -> Android.Net.Uri?
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkHolder
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkHolder.Chunk.get -> AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk?
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkHolder.Chunk.set -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkHolder.ChunkHolder() -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkHolder.Clear() -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkHolder.EndOfStream.get -> bool
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkHolder.EndOfStream.set -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.ChunkSampleStream(int primaryTrackType, int[]? embeddedTrackTypes, AndroidX.Media3.Common.Format![]? embeddedTrackFormats, Java.Lang.Object? chunkSource, AndroidX.Media3.ExoPlayer.Source.ISequenceableLoaderCallback? callback, AndroidX.Media3.ExoPlayer.Upstream.IAllocator? allocator, long positionUs, AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManager? drmSessionManager, AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher? drmEventDispatcher, AndroidX.Media3.ExoPlayer.Upstream.ILoadErrorHandlingPolicy? loadErrorHandlingPolicy, AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher? mediaSourceEventDispatcher, bool canReportInitialDiscontinuity, AndroidX.Media3.ExoPlayer.Util.IReleasableExecutor? downloadExecutor) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.ChunkSampleStream(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.EmbeddedSampleStream
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.EmbeddedSampleStream.InterfaceConsts
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.EmbeddedSampleStream.IsReady.get -> bool
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.EmbeddedSampleStream.MaybeThrowError() -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.EmbeddedSampleStream.Parent.get -> AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream?
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.EmbeddedSampleStream.Parent.set -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.EmbeddedSampleStream.ReadData(AndroidX.Media3.ExoPlayer.FormatHolder? formatHolder, AndroidX.Media3.Decoder.DecoderInputBuffer? buffer, int readFlags) -> int
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.EmbeddedSampleStream.Release() -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.EmbeddedSampleStream.SkipData(long positionUs) -> int
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.IReleaseCallback
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.IReleaseCallback.OnSampleStreamReleased(AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream? p0) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.InterfaceConsts
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.PrimaryTrackType.get -> int
AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.PrimaryTrackType.set -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.ContainerMediaChunk
AndroidX.Media3.ExoPlayer.Source.Chunk.ContainerMediaChunk.ContainerMediaChunk(AndroidX.Media3.DataSource.IDataSource? dataSource, AndroidX.Media3.DataSource.DataSpec? dataSpec, AndroidX.Media3.Common.Format? trackFormat, int trackSelectionReason, Java.Lang.Object? trackSelectionData, long startTimeUs, long endTimeUs, long clippedStartTimeUs, long clippedEndTimeUs, long chunkIndex, int chunkCount, long sampleOffsetUs, AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractor? chunkExtractor) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.ContainerMediaChunk.ContainerMediaChunk(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.ContainerMediaChunk.IsLoadCanceled.get -> bool
AndroidX.Media3.ExoPlayer.Source.Chunk.ContainerMediaChunk.NextLoadPosition.get -> long
AndroidX.Media3.ExoPlayer.Source.Chunk.DataChunk
AndroidX.Media3.ExoPlayer.Source.Chunk.DataChunk.DataChunk(AndroidX.Media3.DataSource.IDataSource? dataSource, AndroidX.Media3.DataSource.DataSpec? dataSpec, int type, AndroidX.Media3.Common.Format? trackFormat, int trackSelectionReason, Java.Lang.Object? trackSelectionData, byte[]? data) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.DataChunk.DataChunk(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractor
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractor.ChunkIndex.get -> AndroidX.Media3.Extractor.ChunkIndex?
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractor.GetSampleFormats() -> AndroidX.Media3.Common.Format![]?
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractor.Init(AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractorTrackOutputProvider? p0, long p1, long p2) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractor.Read(AndroidX.Media3.Extractor.IExtractorInput? p0) -> bool
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractor.Release() -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractorFactory
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractorFactory.CreateProgressiveMediaExtractor(int p0, AndroidX.Media3.Common.Format? p1, bool p2, System.Collections.Generic.IList<AndroidX.Media3.Common.Format!>? p3, AndroidX.Media3.Extractor.ITrackOutput? p4, AndroidX.Media3.ExoPlayer.Analytics.PlayerId? p5) -> AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractor?
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractorFactory.ExperimentalParseSubtitlesDuringExtraction(bool parseSubtitlesDuringExtraction) -> AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractorFactory?
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractorFactory.ExperimentalSetCodecsToParseWithinGopSampleDependencies(int codecsToParseWithinGopSampleDependencies) -> AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractorFactory?
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractorFactory.GetOutputTextFormat(AndroidX.Media3.Common.Format? sourceFormat) -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractorFactory.SetSubtitleParserFactory(AndroidX.Media3.Extractor.Text.ISubtitleParserFactory? subtitleParserFactory) -> AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractorFactory?
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractorTrackOutputProvider
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractorTrackOutputProvider.Track(int p0, int p1) -> AndroidX.Media3.Extractor.ITrackOutput?
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkSource
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkSource.GetAdjustedSeekPositionUs(long p0, AndroidX.Media3.ExoPlayer.SeekParameters? p1) -> long
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkSource.GetNextChunk(AndroidX.Media3.ExoPlayer.LoadingInfo? p0, long p1, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk!>? p2, AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkHolder? p3) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkSource.GetPreferredQueueSize(long p0, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk!>? p1) -> int
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkSource.MaybeThrowError() -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkSource.OnChunkLoadCompleted(AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk? p0) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkSource.OnChunkLoadError(AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk? p0, bool p1, AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyLoadErrorInfo? p2, AndroidX.Media3.ExoPlayer.Upstream.ILoadErrorHandlingPolicy? p3) -> bool
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkSource.Release() -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkSource.ShouldCancelLoad(long p0, AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk? p1, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk!>? p2) -> bool
AndroidX.Media3.ExoPlayer.Source.Chunk.IMediaChunkIterator
AndroidX.Media3.ExoPlayer.Source.Chunk.IMediaChunkIterator.ChunkEndTimeUs.get -> long
AndroidX.Media3.ExoPlayer.Source.Chunk.IMediaChunkIterator.ChunkStartTimeUs.get -> long
AndroidX.Media3.ExoPlayer.Source.Chunk.IMediaChunkIterator.DataSpec.get -> AndroidX.Media3.DataSource.DataSpec?
AndroidX.Media3.ExoPlayer.Source.Chunk.IMediaChunkIterator.Empty.get -> AndroidX.Media3.ExoPlayer.Source.Chunk.IMediaChunkIterator?
AndroidX.Media3.ExoPlayer.Source.Chunk.IMediaChunkIterator.IsEnded.get -> bool
AndroidX.Media3.ExoPlayer.Source.Chunk.IMediaChunkIterator.Next() -> bool
AndroidX.Media3.ExoPlayer.Source.Chunk.IMediaChunkIterator.Reset() -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.InitializationChunk
AndroidX.Media3.ExoPlayer.Source.Chunk.InitializationChunk.ChunkIndex.get -> AndroidX.Media3.Extractor.ChunkIndex?
AndroidX.Media3.ExoPlayer.Source.Chunk.InitializationChunk.Init(AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractorTrackOutputProvider? trackOutputProvider) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.InitializationChunk.InitializationChunk(AndroidX.Media3.DataSource.IDataSource? dataSource, AndroidX.Media3.DataSource.DataSpec? dataSpec, AndroidX.Media3.Common.Format? trackFormat, int trackSelectionReason, Java.Lang.Object? trackSelectionData, AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractor? chunkExtractor) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk
AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk.ChunkIndex.get -> long
AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk.ChunkIndex.set -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk.MediaChunk(AndroidX.Media3.DataSource.IDataSource? dataSource, AndroidX.Media3.DataSource.DataSpec? dataSpec, AndroidX.Media3.Common.Format? trackFormat, int trackSelectionReason, Java.Lang.Object? trackSelectionData, long startTimeUs, long endTimeUs, long chunkIndex) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk.MediaChunk(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.MediaParserChunkExtractor
AndroidX.Media3.ExoPlayer.Source.Chunk.MediaParserChunkExtractor.ChunkIndex.get -> AndroidX.Media3.Extractor.ChunkIndex?
AndroidX.Media3.ExoPlayer.Source.Chunk.MediaParserChunkExtractor.Factory
AndroidX.Media3.ExoPlayer.Source.Chunk.MediaParserChunkExtractor.Factory.Factory() -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.MediaParserChunkExtractor.Factory.Factory(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.MediaParserChunkExtractor.GetSampleFormats() -> AndroidX.Media3.Common.Format![]?
AndroidX.Media3.ExoPlayer.Source.Chunk.MediaParserChunkExtractor.Init(AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractorTrackOutputProvider? trackOutputProvider, long startTimeUs, long endTimeUs) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.MediaParserChunkExtractor.MediaParserChunkExtractor(int primaryTrackType, AndroidX.Media3.Common.Format? manifestFormat, System.Collections.Generic.IList<AndroidX.Media3.Common.Format!>? closedCaptionFormats, AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.MediaParserChunkExtractor.Read(AndroidX.Media3.Extractor.IExtractorInput? input) -> bool
AndroidX.Media3.ExoPlayer.Source.Chunk.MediaParserChunkExtractor.Release() -> void
AndroidX.Media3.ExoPlayer.Source.Chunk.SingleSampleMediaChunk
AndroidX.Media3.ExoPlayer.Source.Chunk.SingleSampleMediaChunk.SingleSampleMediaChunk(AndroidX.Media3.DataSource.IDataSource? dataSource, AndroidX.Media3.DataSource.DataSpec? dataSpec, AndroidX.Media3.Common.Format? trackFormat, int trackSelectionReason, Java.Lang.Object? trackSelectionData, long startTimeUs, long endTimeUs, long chunkIndex, int trackType, AndroidX.Media3.Common.Format? sampleFormat) -> void
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.BufferedPositionUs.get -> long
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.ClippingMediaPeriod(AndroidX.Media3.ExoPlayer.Source.IMediaPeriod? mediaPeriod, bool enableInitialDiscontinuity, long startUs, long endUs) -> void
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.ContinueLoading(AndroidX.Media3.ExoPlayer.LoadingInfo? loadingInfo) -> bool
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.DiscardBuffer(long positionUs, bool toKeyframe) -> void
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.GetAdjustedSeekPositionUs(long positionUs, AndroidX.Media3.ExoPlayer.SeekParameters? seekParameters) -> long
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.GetStreamKeys(System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection!>? trackSelections) -> System.Collections.Generic.IList<AndroidX.Media3.Common.StreamKey!>?
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.IsLoading.get -> bool
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.MaybeThrowPrepareError() -> void
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.MediaPeriod.get -> AndroidX.Media3.ExoPlayer.Source.IMediaPeriod?
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.MediaPeriod.set -> void
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.NextLoadPositionUs.get -> long
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.OnContinueLoadingRequested(Java.Lang.Object? source) -> void
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.OnPrepared(AndroidX.Media3.ExoPlayer.Source.IMediaPeriod? mediaPeriod) -> void
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.Prepare(AndroidX.Media3.ExoPlayer.Source.IMediaPeriodCallback? callback, long positionUs) -> void
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.ReadDiscontinuity() -> long
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.ReevaluateBuffer(long positionUs) -> void
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.SeekToUs(long positionUs) -> long
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.SelectTracks(AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection![]? selections, bool[]? mayRetainStreamFlags, AndroidX.Media3.ExoPlayer.Source.ISampleStream![]? streams, bool[]? streamResetFlags, long positionUs) -> long
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.SetClippingError(AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.IllegalClippingException? clippingError) -> void
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.TrackGroups.get -> AndroidX.Media3.ExoPlayer.Source.TrackGroupArray?
AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.UpdateClipping(long startUs, long endUs) -> void
AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource
AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.Builder
AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.Builder.Build() -> AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource?
AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.Builder.Builder(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource) -> void
AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.Builder.SetAllowDynamicClippingUpdates(bool allowDynamicClippingUpdates) -> AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.Builder?
AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.Builder.SetAllowUnseekableMedia(bool allowUnseekableMedia) -> AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.Builder?
AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.Builder.SetEnableInitialDiscontinuity(bool enableInitialDiscontinuity) -> AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.Builder?
AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.Builder.SetEndPositionMs(long endPositionMs) -> AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.Builder?
AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.Builder.SetEndPositionUs(long endPositionUs) -> AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.Builder?
AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.Builder.SetRelativeToDefaultPosition(bool relativeToDefaultPosition) -> AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.Builder?
AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.Builder.SetStartPositionMs(long startPositionMs) -> AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.Builder?
AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.Builder.SetStartPositionUs(long startPositionUs) -> AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.Builder?
AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.ClippingMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource, long durationUs) -> void
AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.ClippingMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource, long startPositionUs, long endPositionUs) -> void
AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.ClippingMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource, long startPositionUs, long endPositionUs, bool enableInitialDiscontinuity, bool allowDynamicClippingUpdates, bool relativeToDefaultPosition) -> void
AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.IllegalClippingException
AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.IllegalClippingException.IReason
AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.IllegalClippingException.IllegalClippingException(int reason) -> void
AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.IllegalClippingException.IllegalClippingException(int reason, long startUs, long endUs) -> void
AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.IllegalClippingException.Reason.get -> int
AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.IllegalClippingException.Reason.set -> void
AndroidX.Media3.ExoPlayer.Source.CompositeMediaSource
AndroidX.Media3.ExoPlayer.Source.CompositeMediaSource.CompositeMediaSource() -> void
AndroidX.Media3.ExoPlayer.Source.CompositeMediaSource.CompositeMediaSource(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Source.CompositeMediaSource.DisableChildSource(Java.Lang.Object? id) -> void
AndroidX.Media3.ExoPlayer.Source.CompositeMediaSource.EnableChildSource(Java.Lang.Object? id) -> void
AndroidX.Media3.ExoPlayer.Source.CompositeMediaSource.PrepareChildSource(Java.Lang.Object? id, AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource) -> void
AndroidX.Media3.ExoPlayer.Source.CompositeMediaSource.ReleaseChildSource(Java.Lang.Object? id) -> void
AndroidX.Media3.ExoPlayer.Source.CompositeSequenceableLoader
AndroidX.Media3.ExoPlayer.Source.CompositeSequenceableLoader.BufferedPositionUs.get -> long
AndroidX.Media3.ExoPlayer.Source.CompositeSequenceableLoader.CompositeSequenceableLoader(AndroidX.Media3.ExoPlayer.Source.ISequenceableLoader![]? loaders) -> void
AndroidX.Media3.ExoPlayer.Source.CompositeSequenceableLoader.CompositeSequenceableLoader(System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.ISequenceableLoader!>? loaders, System.Collections.Generic.IList<System.Collections.Generic.IList<Java.Lang.Integer!>!>? loaderTrackTypes) -> void
AndroidX.Media3.ExoPlayer.Source.CompositeSequenceableLoader.ContinueLoading(AndroidX.Media3.ExoPlayer.LoadingInfo? loadingInfo) -> bool
AndroidX.Media3.ExoPlayer.Source.CompositeSequenceableLoader.IsLoading.get -> bool
AndroidX.Media3.ExoPlayer.Source.CompositeSequenceableLoader.NextLoadPositionUs.get -> long
AndroidX.Media3.ExoPlayer.Source.CompositeSequenceableLoader.ReevaluateBuffer(long positionUs) -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.AddMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource) -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.AddMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource, Android.OS.Handler? handler, Java.Lang.IRunnable? onCompletionAction) -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.AddMediaSource(int index, AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource) -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.AddMediaSource(int index, AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource, Android.OS.Handler? handler, Java.Lang.IRunnable? onCompletionAction) -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.AddMediaSources(System.Collections.Generic.ICollection<AndroidX.Media3.ExoPlayer.Source.IMediaSource!>? mediaSources) -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.AddMediaSources(System.Collections.Generic.ICollection<AndroidX.Media3.ExoPlayer.Source.IMediaSource!>? mediaSources, Android.OS.Handler? handler, Java.Lang.IRunnable? onCompletionAction) -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.AddMediaSources(int index, System.Collections.Generic.ICollection<AndroidX.Media3.ExoPlayer.Source.IMediaSource!>? mediaSources) -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.AddMediaSources(int index, System.Collections.Generic.ICollection<AndroidX.Media3.ExoPlayer.Source.IMediaSource!>? mediaSources, Android.OS.Handler? handler, Java.Lang.IRunnable? onCompletionAction) -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.Clear() -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.Clear(Android.OS.Handler? handler, Java.Lang.IRunnable? onCompletionAction) -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.ConcatenatingMediaSource(bool isAtomic, AndroidX.Media3.ExoPlayer.Source.IShuffleOrder? shuffleOrder, params AndroidX.Media3.ExoPlayer.Source.IMediaSource![]? mediaSources) -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.ConcatenatingMediaSource(bool isAtomic, bool useLazyPreparation, AndroidX.Media3.ExoPlayer.Source.IShuffleOrder? shuffleOrder, params AndroidX.Media3.ExoPlayer.Source.IMediaSource![]? mediaSources) -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.ConcatenatingMediaSource(bool isAtomic, params AndroidX.Media3.ExoPlayer.Source.IMediaSource![]? mediaSources) -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.ConcatenatingMediaSource(params AndroidX.Media3.ExoPlayer.Source.IMediaSource![]? mediaSources) -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.GetMediaSource(int index) -> AndroidX.Media3.ExoPlayer.Source.IMediaSource?
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.InitialTimeline.get -> AndroidX.Media3.Common.Timeline?
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.IsSingleWindow.get -> bool
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.MoveMediaSource(int currentIndex, int newIndex) -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.MoveMediaSource(int currentIndex, int newIndex, Android.OS.Handler? handler, Java.Lang.IRunnable? onCompletionAction) -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.RemoveMediaSource(int index) -> AndroidX.Media3.ExoPlayer.Source.IMediaSource?
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.RemoveMediaSource(int index, Android.OS.Handler? handler, Java.Lang.IRunnable? onCompletionAction) -> AndroidX.Media3.ExoPlayer.Source.IMediaSource?
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.RemoveMediaSourceRange(int fromIndex, int toIndex) -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.RemoveMediaSourceRange(int fromIndex, int toIndex, Android.OS.Handler? handler, Java.Lang.IRunnable? onCompletionAction) -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.SetShuffleOrder(AndroidX.Media3.ExoPlayer.Source.IShuffleOrder? shuffleOrder) -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.SetShuffleOrder(AndroidX.Media3.ExoPlayer.Source.IShuffleOrder? shuffleOrder, Android.OS.Handler? handler, Java.Lang.IRunnable? onCompletionAction) -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.Size.get -> int
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.Builder
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.Builder.Add(AndroidX.Media3.Common.MediaItem? mediaItem) -> AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.Builder?
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.Builder.Add(AndroidX.Media3.Common.MediaItem? mediaItem, long initialPlaceholderDurationMs) -> AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.Builder?
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.Builder.Add(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource) -> AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.Builder?
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.Builder.Add(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource, long initialPlaceholderDurationMs) -> AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.Builder?
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.Builder.Build() -> AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2?
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.Builder.Builder() -> void
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.Builder.SetMediaItem(AndroidX.Media3.Common.MediaItem? mediaItem) -> AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.Builder?
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.Builder.SetMediaSourceFactory(AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory? mediaSourceFactory) -> AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.Builder?
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.Builder.UseDefaultMediaSourceFactory(Android.Content.Context? context) -> AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.Builder?
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.CanUpdateMediaItem(AndroidX.Media3.Common.MediaItem? mediaItem) -> bool
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.InitialTimeline.get -> AndroidX.Media3.Common.Timeline?
AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.UpdateMediaItem(AndroidX.Media3.Common.MediaItem? mediaItem) -> void
AndroidX.Media3.ExoPlayer.Source.DefaultCompositeSequenceableLoaderFactory
AndroidX.Media3.ExoPlayer.Source.DefaultCompositeSequenceableLoaderFactory.Create(System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.ISequenceableLoader!>? loaders, System.Collections.Generic.IList<System.Collections.Generic.IList<Java.Lang.Integer!>!>? loaderTrackTypes) -> AndroidX.Media3.ExoPlayer.Source.ISequenceableLoader?
AndroidX.Media3.ExoPlayer.Source.DefaultCompositeSequenceableLoaderFactory.CreateCompositeSequenceableLoader(params AndroidX.Media3.ExoPlayer.Source.ISequenceableLoader![]? loaders) -> AndroidX.Media3.ExoPlayer.Source.ISequenceableLoader?
AndroidX.Media3.ExoPlayer.Source.DefaultCompositeSequenceableLoaderFactory.DefaultCompositeSequenceableLoaderFactory() -> void
AndroidX.Media3.ExoPlayer.Source.DefaultCompositeSequenceableLoaderFactory.Empty() -> AndroidX.Media3.ExoPlayer.Source.ISequenceableLoader?
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.ClearLocalAdInsertionComponents() -> AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory?
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.CreateMediaSource(AndroidX.Media3.Common.MediaItem? mediaItem) -> AndroidX.Media3.ExoPlayer.Source.IMediaSource?
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.DefaultMediaSourceFactory(Android.Content.Context? context) -> void
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.DefaultMediaSourceFactory(Android.Content.Context? context, AndroidX.Media3.Extractor.IExtractorsFactory? extractorsFactory) -> void
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.DefaultMediaSourceFactory(AndroidX.Media3.DataSource.IDataSourceFactory? dataSourceFactory) -> void
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.DefaultMediaSourceFactory(AndroidX.Media3.DataSource.IDataSourceFactory? dataSourceFactory, AndroidX.Media3.Extractor.IExtractorsFactory? extractorsFactory) -> void
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.ExperimentalParseSubtitlesDuringExtraction(bool parseSubtitlesDuringExtraction) -> AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory?
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.ExperimentalSetCodecsToParseWithinGopSampleDependencies(int codecsToParseWithinGopSampleDependencies) -> AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory?
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.GetSupportedTypes() -> int[]?
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.IAdsLoaderProvider
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.InterfaceConsts
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.SetAdViewProvider(AndroidX.Media3.Common.IAdViewProvider? adViewProvider) -> AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory?
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.SetAdsLoaderProvider(AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoaderProvider? adsLoaderProvider) -> AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory?
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.SetCmcdConfigurationFactory(AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IFactory? cmcdConfigurationFactory) -> AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory?
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.SetDataSourceFactory(AndroidX.Media3.DataSource.IDataSourceFactory? dataSourceFactory) -> AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory?
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.SetDrmSessionManagerProvider(AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManagerProvider? drmSessionManagerProvider) -> AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory?
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.SetExternalImageLoader(AndroidX.Media3.ExoPlayer.Source.IExternalLoader? externalImageLoader) -> AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory?
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.SetLiveMaxOffsetMs(long liveMaxOffsetMs) -> AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory?
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.SetLiveMaxSpeed(float maxSpeed) -> AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory?
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.SetLiveMinOffsetMs(long liveMinOffsetMs) -> AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory?
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.SetLiveMinSpeed(float minSpeed) -> AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory?
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.SetLiveTargetOffsetMs(long liveTargetOffsetMs) -> AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory?
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.SetLoadErrorHandlingPolicy(AndroidX.Media3.ExoPlayer.Upstream.ILoadErrorHandlingPolicy? loadErrorHandlingPolicy) -> AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory?
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.SetLocalAdInsertionComponents(AndroidX.Media3.ExoPlayer.Source.Ads.IAdsLoaderProvider? adsLoaderProvider, AndroidX.Media3.Common.IAdViewProvider? adViewProvider) -> AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory?
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.SetServerSideAdInsertionMediaSourceFactory(AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory? serverSideAdInsertionMediaSourceFactory) -> AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory?
AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.SetSubtitleParserFactory(AndroidX.Media3.Extractor.Text.ISubtitleParserFactory? subtitleParserFactory) -> AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory?
AndroidX.Media3.ExoPlayer.Source.DownstreamFormatChangedEventArgs
AndroidX.Media3.ExoPlayer.Source.DownstreamFormatChangedEventArgs.DownstreamFormatChangedEventArgs(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Source.DownstreamFormatChangedEventArgs.MediaLoadData.get -> AndroidX.Media3.ExoPlayer.Source.MediaLoadData?
AndroidX.Media3.ExoPlayer.Source.DownstreamFormatChangedEventArgs.MediaPeriodId.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Source.DownstreamFormatChangedEventArgs.WindowIndex.get -> int
AndroidX.Media3.ExoPlayer.Source.EmptySampleStream
AndroidX.Media3.ExoPlayer.Source.EmptySampleStream.EmptySampleStream() -> void
AndroidX.Media3.ExoPlayer.Source.EmptySampleStream.InterfaceConsts
AndroidX.Media3.ExoPlayer.Source.EmptySampleStream.IsReady.get -> bool
AndroidX.Media3.ExoPlayer.Source.EmptySampleStream.MaybeThrowError() -> void
AndroidX.Media3.ExoPlayer.Source.EmptySampleStream.ReadData(AndroidX.Media3.ExoPlayer.FormatHolder? formatHolder, AndroidX.Media3.Decoder.DecoderInputBuffer? buffer, int readFlags) -> int
AndroidX.Media3.ExoPlayer.Source.EmptySampleStream.SkipData(long positionUs) -> int
AndroidX.Media3.ExoPlayer.Source.ExternalLoaderLoadRequest
AndroidX.Media3.ExoPlayer.Source.ExternalLoaderLoadRequest.ExternalLoaderLoadRequest(Android.Net.Uri? uri) -> void
AndroidX.Media3.ExoPlayer.Source.ExternalLoaderLoadRequest.Uri.get -> Android.Net.Uri?
AndroidX.Media3.ExoPlayer.Source.ExternalLoaderLoadRequest.Uri.set -> void
AndroidX.Media3.ExoPlayer.Source.ExternallyLoadedMediaSource
AndroidX.Media3.ExoPlayer.Source.ExternallyLoadedMediaSource.CanUpdateMediaItem(AndroidX.Media3.Common.MediaItem? mediaItem) -> bool
AndroidX.Media3.ExoPlayer.Source.ExternallyLoadedMediaSource.Factory
AndroidX.Media3.ExoPlayer.Source.ExternallyLoadedMediaSource.Factory.CreateMediaSource(AndroidX.Media3.Common.MediaItem? mediaItem) -> AndroidX.Media3.ExoPlayer.Source.IMediaSource?
AndroidX.Media3.ExoPlayer.Source.ExternallyLoadedMediaSource.Factory.Factory(long timelineDurationUs, AndroidX.Media3.ExoPlayer.Source.IExternalLoader? externalLoader) -> void
AndroidX.Media3.ExoPlayer.Source.ExternallyLoadedMediaSource.Factory.GetSupportedTypes() -> int[]?
AndroidX.Media3.ExoPlayer.Source.ExternallyLoadedMediaSource.Factory.InterfaceConsts
AndroidX.Media3.ExoPlayer.Source.ExternallyLoadedMediaSource.Factory.SetDrmSessionManagerProvider(AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManagerProvider? drmSessionManagerProvider) -> AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory?
AndroidX.Media3.ExoPlayer.Source.ExternallyLoadedMediaSource.Factory.SetLoadErrorHandlingPolicy(AndroidX.Media3.ExoPlayer.Upstream.ILoadErrorHandlingPolicy? loadErrorHandlingPolicy) -> AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory?
AndroidX.Media3.ExoPlayer.Source.ExternallyLoadedMediaSource.UpdateMediaItem(AndroidX.Media3.Common.MediaItem? mediaItem) -> void
AndroidX.Media3.ExoPlayer.Source.FilteringMediaSource
AndroidX.Media3.ExoPlayer.Source.FilteringMediaSource.FilteringMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource, System.Collections.Generic.ICollection<Java.Lang.Integer!>? trackTypes) -> void
AndroidX.Media3.ExoPlayer.Source.FilteringMediaSource.FilteringMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource, int trackType) -> void
AndroidX.Media3.ExoPlayer.Source.FilteringMediaSource.FilteringMediaSource(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Source.ForwardingTimeline
AndroidX.Media3.ExoPlayer.Source.ForwardingTimeline.ForwardingTimeline(AndroidX.Media3.Common.Timeline? timeline) -> void
AndroidX.Media3.ExoPlayer.Source.ForwardingTimeline.ForwardingTimeline(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Source.ForwardingTimeline.Timeline.get -> AndroidX.Media3.Common.Timeline?
AndroidX.Media3.ExoPlayer.Source.ForwardingTimeline.Timeline.set -> void
AndroidX.Media3.ExoPlayer.Source.ICompositeSequenceableLoaderFactory
AndroidX.Media3.ExoPlayer.Source.ICompositeSequenceableLoaderFactory.Create(System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.ISequenceableLoader!>? p0, System.Collections.Generic.IList<System.Collections.Generic.IList<Java.Lang.Integer!>!>? p1) -> AndroidX.Media3.ExoPlayer.Source.ISequenceableLoader?
AndroidX.Media3.ExoPlayer.Source.ICompositeSequenceableLoaderFactory.CreateCompositeSequenceableLoader(params AndroidX.Media3.ExoPlayer.Source.ISequenceableLoader![]? p0) -> AndroidX.Media3.ExoPlayer.Source.ISequenceableLoader?
AndroidX.Media3.ExoPlayer.Source.ICompositeSequenceableLoaderFactory.Empty() -> AndroidX.Media3.ExoPlayer.Source.ISequenceableLoader?
AndroidX.Media3.ExoPlayer.Source.IExternalLoader
AndroidX.Media3.ExoPlayer.Source.IExternalLoader.Load(AndroidX.Media3.ExoPlayer.Source.ExternalLoaderLoadRequest? p0) -> Google.Common.Util.Concurrent.IListenableFuture?
AndroidX.Media3.ExoPlayer.Source.IMediaPeriod
AndroidX.Media3.ExoPlayer.Source.IMediaPeriod.BufferedPositionUs.get -> long
AndroidX.Media3.ExoPlayer.Source.IMediaPeriod.ContinueLoading(AndroidX.Media3.ExoPlayer.LoadingInfo? p0) -> bool
AndroidX.Media3.ExoPlayer.Source.IMediaPeriod.DiscardBuffer(long p0, bool p1) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaPeriod.GetAdjustedSeekPositionUs(long p0, AndroidX.Media3.ExoPlayer.SeekParameters? p1) -> long
AndroidX.Media3.ExoPlayer.Source.IMediaPeriod.GetStreamKeys(System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection!>? trackSelections) -> System.Collections.Generic.IList<AndroidX.Media3.Common.StreamKey!>?
AndroidX.Media3.ExoPlayer.Source.IMediaPeriod.IsLoading.get -> bool
AndroidX.Media3.ExoPlayer.Source.IMediaPeriod.MaybeThrowPrepareError() -> void
AndroidX.Media3.ExoPlayer.Source.IMediaPeriod.NextLoadPositionUs.get -> long
AndroidX.Media3.ExoPlayer.Source.IMediaPeriod.Prepare(AndroidX.Media3.ExoPlayer.Source.IMediaPeriodCallback? p0, long p1) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaPeriod.ReadDiscontinuity() -> long
AndroidX.Media3.ExoPlayer.Source.IMediaPeriod.ReevaluateBuffer(long p0) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaPeriod.SeekToUs(long p0) -> long
AndroidX.Media3.ExoPlayer.Source.IMediaPeriod.SelectTracks(AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection![]? p0, bool[]? p1, AndroidX.Media3.ExoPlayer.Source.ISampleStream![]? p2, bool[]? p3, long p4) -> long
AndroidX.Media3.ExoPlayer.Source.IMediaPeriod.TrackGroups.get -> AndroidX.Media3.ExoPlayer.Source.TrackGroupArray?
AndroidX.Media3.ExoPlayer.Source.IMediaPeriodCallback
AndroidX.Media3.ExoPlayer.Source.IMediaPeriodCallback.OnPrepared(AndroidX.Media3.ExoPlayer.Source.IMediaPeriod? p0) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaSource
AndroidX.Media3.ExoPlayer.Source.IMediaSource.AddDrmEventListener(Android.OS.Handler? p0, AndroidX.Media3.ExoPlayer.Drm.IDrmSessionEventListener? p1) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaSource.AddEventListener(Android.OS.Handler? p0, AndroidX.Media3.ExoPlayer.Source.IMediaSourceEventListener? p1) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaSource.CanUpdateMediaItem(AndroidX.Media3.Common.MediaItem? mediaItem) -> bool
AndroidX.Media3.ExoPlayer.Source.IMediaSource.CreatePeriod(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? p0, AndroidX.Media3.ExoPlayer.Upstream.IAllocator? p1, long p2) -> AndroidX.Media3.ExoPlayer.Source.IMediaPeriod?
AndroidX.Media3.ExoPlayer.Source.IMediaSource.Disable(AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceCaller? p0) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaSource.Enable(AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceCaller? p0) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaSource.InitialTimeline.get -> AndroidX.Media3.Common.Timeline?
AndroidX.Media3.ExoPlayer.Source.IMediaSource.IsSingleWindow.get -> bool
AndroidX.Media3.ExoPlayer.Source.IMediaSource.MaybeThrowSourceInfoRefreshError() -> void
AndroidX.Media3.ExoPlayer.Source.IMediaSource.MediaItem.get -> AndroidX.Media3.Common.MediaItem?
AndroidX.Media3.ExoPlayer.Source.IMediaSource.PrepareSource(AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceCaller? caller, AndroidX.Media3.DataSource.ITransferListener? mediaTransferListener) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaSource.PrepareSource(AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceCaller? p0, AndroidX.Media3.DataSource.ITransferListener? p1, AndroidX.Media3.ExoPlayer.Analytics.PlayerId? p2) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaSource.ReleasePeriod(AndroidX.Media3.ExoPlayer.Source.IMediaPeriod? p0) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaSource.ReleaseSource(AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceCaller? p0) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaSource.RemoveDrmEventListener(AndroidX.Media3.ExoPlayer.Drm.IDrmSessionEventListener? p0) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaSource.RemoveEventListener(AndroidX.Media3.ExoPlayer.Source.IMediaSourceEventListener? p0) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaSource.UpdateMediaItem(AndroidX.Media3.Common.MediaItem? mediaItem) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaSourceEventListener
AndroidX.Media3.ExoPlayer.Source.IMediaSourceEventListener.OnDownstreamFormatChanged(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaSourceEventListener.OnLoadCanceled(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaSourceEventListener.OnLoadCompleted(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaSourceEventListener.OnLoadError(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData, Java.IO.IOException? error, bool wasCanceled) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaSourceEventListener.OnLoadStarted(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData, int retryCount) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaSourceEventListener.OnUpstreamDiscarded(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaSourceFactory
AndroidX.Media3.ExoPlayer.Source.IMediaSourceFactory.Unsupported.get -> AndroidX.Media3.ExoPlayer.Source.IMediaSourceFactory?
AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceCaller
AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceCaller.OnSourceInfoRefreshed(AndroidX.Media3.ExoPlayer.Source.IMediaSource? p0, AndroidX.Media3.Common.Timeline? p1) -> void
AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory
AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory.CreateMediaSource(AndroidX.Media3.Common.MediaItem? p0) -> AndroidX.Media3.ExoPlayer.Source.IMediaSource?
AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory.ExperimentalParseSubtitlesDuringExtraction(bool parseSubtitlesDuringExtraction) -> AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory?
AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory.ExperimentalSetCodecsToParseWithinGopSampleDependencies(int codecsToParseWithinGopSampleDependencies) -> AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory?
AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory.GetSupportedTypes() -> int[]?
AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory.SetCmcdConfigurationFactory(AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IFactory? cmcdConfigurationFactory) -> AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory?
AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory.SetDrmSessionManagerProvider(AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManagerProvider? p0) -> AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory?
AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory.SetLoadErrorHandlingPolicy(AndroidX.Media3.ExoPlayer.Upstream.ILoadErrorHandlingPolicy? p0) -> AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory?
AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory.SetSubtitleParserFactory(AndroidX.Media3.Extractor.Text.ISubtitleParserFactory? subtitleParserFactory) -> AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory?
AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory.Unsupported.get -> AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory?
AndroidX.Media3.ExoPlayer.Source.IProgressiveMediaExtractor
AndroidX.Media3.ExoPlayer.Source.IProgressiveMediaExtractor.CurrentInputPosition.get -> long
AndroidX.Media3.ExoPlayer.Source.IProgressiveMediaExtractor.DisableSeekingOnMp3Streams() -> void
AndroidX.Media3.ExoPlayer.Source.IProgressiveMediaExtractor.Init(AndroidX.Media3.Common.IDataReader? p0, Android.Net.Uri? p1, System.Collections.Generic.IDictionary<string!, System.Collections.Generic.IList<string!>!>? p2, long p3, long p4, AndroidX.Media3.Extractor.IExtractorOutput? p5) -> void
AndroidX.Media3.ExoPlayer.Source.IProgressiveMediaExtractor.Read(AndroidX.Media3.Extractor.PositionHolder? p0) -> int
AndroidX.Media3.ExoPlayer.Source.IProgressiveMediaExtractor.Release() -> void
AndroidX.Media3.ExoPlayer.Source.IProgressiveMediaExtractor.Seek(long p0, long p1) -> void
AndroidX.Media3.ExoPlayer.Source.IProgressiveMediaExtractorFactory
AndroidX.Media3.ExoPlayer.Source.IProgressiveMediaExtractorFactory.CreateProgressiveMediaExtractor(AndroidX.Media3.ExoPlayer.Analytics.PlayerId? p0) -> AndroidX.Media3.ExoPlayer.Source.IProgressiveMediaExtractor?
AndroidX.Media3.ExoPlayer.Source.ISampleStream
AndroidX.Media3.ExoPlayer.Source.ISampleStream.IsReady.get -> bool
AndroidX.Media3.ExoPlayer.Source.ISampleStream.MaybeThrowError() -> void
AndroidX.Media3.ExoPlayer.Source.ISampleStream.ReadData(AndroidX.Media3.ExoPlayer.FormatHolder? p0, AndroidX.Media3.Decoder.DecoderInputBuffer? p1, int p2) -> int
AndroidX.Media3.ExoPlayer.Source.ISampleStream.SkipData(long p0) -> int
AndroidX.Media3.ExoPlayer.Source.ISampleStreamReadDataResult
AndroidX.Media3.ExoPlayer.Source.ISampleStreamReadFlags
AndroidX.Media3.ExoPlayer.Source.ISequenceableLoader
AndroidX.Media3.ExoPlayer.Source.ISequenceableLoader.BufferedPositionUs.get -> long
AndroidX.Media3.ExoPlayer.Source.ISequenceableLoader.ContinueLoading(AndroidX.Media3.ExoPlayer.LoadingInfo? p0) -> bool
AndroidX.Media3.ExoPlayer.Source.ISequenceableLoader.IsLoading.get -> bool
AndroidX.Media3.ExoPlayer.Source.ISequenceableLoader.NextLoadPositionUs.get -> long
AndroidX.Media3.ExoPlayer.Source.ISequenceableLoader.ReevaluateBuffer(long p0) -> void
AndroidX.Media3.ExoPlayer.Source.ISequenceableLoaderCallback
AndroidX.Media3.ExoPlayer.Source.ISequenceableLoaderCallback.OnContinueLoadingRequested(Java.Lang.Object? p0) -> void
AndroidX.Media3.ExoPlayer.Source.IShuffleOrder
AndroidX.Media3.ExoPlayer.Source.IShuffleOrder.CloneAndClear() -> AndroidX.Media3.ExoPlayer.Source.IShuffleOrder?
AndroidX.Media3.ExoPlayer.Source.IShuffleOrder.CloneAndInsert(int p0, int p1) -> AndroidX.Media3.ExoPlayer.Source.IShuffleOrder?
AndroidX.Media3.ExoPlayer.Source.IShuffleOrder.CloneAndRemove(int p0, int p1) -> AndroidX.Media3.ExoPlayer.Source.IShuffleOrder?
AndroidX.Media3.ExoPlayer.Source.IShuffleOrder.FirstIndex.get -> int
AndroidX.Media3.ExoPlayer.Source.IShuffleOrder.GetNextIndex(int p0) -> int
AndroidX.Media3.ExoPlayer.Source.IShuffleOrder.GetPreviousIndex(int p0) -> int
AndroidX.Media3.ExoPlayer.Source.IShuffleOrder.LastIndex.get -> int
AndroidX.Media3.ExoPlayer.Source.IShuffleOrder.Length.get -> int
AndroidX.Media3.ExoPlayer.Source.LoadCanceledEventArgs
AndroidX.Media3.ExoPlayer.Source.LoadCanceledEventArgs.LoadCanceledEventArgs(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Source.LoadCanceledEventArgs.LoadEventInfo.get -> AndroidX.Media3.ExoPlayer.Source.LoadEventInfo?
AndroidX.Media3.ExoPlayer.Source.LoadCanceledEventArgs.MediaLoadData.get -> AndroidX.Media3.ExoPlayer.Source.MediaLoadData?
AndroidX.Media3.ExoPlayer.Source.LoadCanceledEventArgs.MediaPeriodId.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Source.LoadCanceledEventArgs.WindowIndex.get -> int
AndroidX.Media3.ExoPlayer.Source.LoadCompletedEventArgs
AndroidX.Media3.ExoPlayer.Source.LoadCompletedEventArgs.LoadCompletedEventArgs(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Source.LoadCompletedEventArgs.LoadEventInfo.get -> AndroidX.Media3.ExoPlayer.Source.LoadEventInfo?
AndroidX.Media3.ExoPlayer.Source.LoadCompletedEventArgs.MediaLoadData.get -> AndroidX.Media3.ExoPlayer.Source.MediaLoadData?
AndroidX.Media3.ExoPlayer.Source.LoadCompletedEventArgs.MediaPeriodId.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Source.LoadCompletedEventArgs.WindowIndex.get -> int
AndroidX.Media3.ExoPlayer.Source.LoadErrorEventArgs
AndroidX.Media3.ExoPlayer.Source.LoadErrorEventArgs.Error.get -> Java.IO.IOException?
AndroidX.Media3.ExoPlayer.Source.LoadErrorEventArgs.LoadErrorEventArgs(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData, Java.IO.IOException? error, bool wasCanceled) -> void
AndroidX.Media3.ExoPlayer.Source.LoadErrorEventArgs.LoadEventInfo.get -> AndroidX.Media3.ExoPlayer.Source.LoadEventInfo?
AndroidX.Media3.ExoPlayer.Source.LoadErrorEventArgs.MediaLoadData.get -> AndroidX.Media3.ExoPlayer.Source.MediaLoadData?
AndroidX.Media3.ExoPlayer.Source.LoadErrorEventArgs.MediaPeriodId.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Source.LoadErrorEventArgs.WasCanceled.get -> bool
AndroidX.Media3.ExoPlayer.Source.LoadErrorEventArgs.WindowIndex.get -> int
AndroidX.Media3.ExoPlayer.Source.LoadEventInfo
AndroidX.Media3.ExoPlayer.Source.LoadEventInfo.BytesLoaded.get -> long
AndroidX.Media3.ExoPlayer.Source.LoadEventInfo.BytesLoaded.set -> void
AndroidX.Media3.ExoPlayer.Source.LoadEventInfo.DataSpec.get -> AndroidX.Media3.DataSource.DataSpec?
AndroidX.Media3.ExoPlayer.Source.LoadEventInfo.DataSpec.set -> void
AndroidX.Media3.ExoPlayer.Source.LoadEventInfo.ElapsedRealtimeMs.get -> long
AndroidX.Media3.ExoPlayer.Source.LoadEventInfo.ElapsedRealtimeMs.set -> void
AndroidX.Media3.ExoPlayer.Source.LoadEventInfo.LoadDurationMs.get -> long
AndroidX.Media3.ExoPlayer.Source.LoadEventInfo.LoadDurationMs.set -> void
AndroidX.Media3.ExoPlayer.Source.LoadEventInfo.LoadEventInfo(long loadTaskId, AndroidX.Media3.DataSource.DataSpec? dataSpec, Android.Net.Uri? uri, System.Collections.Generic.IDictionary<string!, System.Collections.Generic.IList<string!>!>? responseHeaders, long elapsedRealtimeMs, long loadDurationMs, long bytesLoaded) -> void
AndroidX.Media3.ExoPlayer.Source.LoadEventInfo.LoadEventInfo(long loadTaskId, AndroidX.Media3.DataSource.DataSpec? dataSpec, long elapsedRealtimeMs) -> void
AndroidX.Media3.ExoPlayer.Source.LoadEventInfo.LoadTaskId.get -> long
AndroidX.Media3.ExoPlayer.Source.LoadEventInfo.LoadTaskId.set -> void
AndroidX.Media3.ExoPlayer.Source.LoadEventInfo.ResponseHeaders.get -> System.Collections.IDictionary?
AndroidX.Media3.ExoPlayer.Source.LoadEventInfo.ResponseHeaders.set -> void
AndroidX.Media3.ExoPlayer.Source.LoadEventInfo.Uri.get -> Android.Net.Uri?
AndroidX.Media3.ExoPlayer.Source.LoadEventInfo.Uri.set -> void
AndroidX.Media3.ExoPlayer.Source.LoadStartedEventArgs
AndroidX.Media3.ExoPlayer.Source.LoadStartedEventArgs.LoadEventInfo.get -> AndroidX.Media3.ExoPlayer.Source.LoadEventInfo?
AndroidX.Media3.ExoPlayer.Source.LoadStartedEventArgs.LoadStartedEventArgs(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData, int retryCount) -> void
AndroidX.Media3.ExoPlayer.Source.LoadStartedEventArgs.MediaLoadData.get -> AndroidX.Media3.ExoPlayer.Source.MediaLoadData?
AndroidX.Media3.ExoPlayer.Source.LoadStartedEventArgs.MediaPeriodId.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Source.LoadStartedEventArgs.RetryCount.get -> int
AndroidX.Media3.ExoPlayer.Source.LoadStartedEventArgs.WindowIndex.get -> int
AndroidX.Media3.ExoPlayer.Source.LoopingMediaSource
AndroidX.Media3.ExoPlayer.Source.LoopingMediaSource.LoopingMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? childSource) -> void
AndroidX.Media3.ExoPlayer.Source.LoopingMediaSource.LoopingMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? childSource, int loopCount) -> void
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.BufferedPositionUs.get -> long
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.ContinueLoading(AndroidX.Media3.ExoPlayer.LoadingInfo? loadingInfo) -> bool
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.CreatePeriod(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? id) -> void
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.DiscardBuffer(long positionUs, bool toKeyframe) -> void
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.GetAdjustedSeekPositionUs(long positionUs, AndroidX.Media3.ExoPlayer.SeekParameters? seekParameters) -> long
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.IPrepareListener
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.IPrepareListener.OnPrepareComplete(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? p0) -> void
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.IPrepareListener.OnPrepareError(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? p0, Java.IO.IOException? p1) -> void
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.Id.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.Id.set -> void
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.IsLoading.get -> bool
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.MaskingMediaPeriod(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? id, AndroidX.Media3.ExoPlayer.Upstream.IAllocator? allocator, long preparePositionUs) -> void
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.MaybeThrowPrepareError() -> void
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.NextLoadPositionUs.get -> long
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.OnContinueLoadingRequested(Java.Lang.Object? source) -> void
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.OnPrepared(AndroidX.Media3.ExoPlayer.Source.IMediaPeriod? mediaPeriod) -> void
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.OverridePreparePositionUs(long preparePositionUs) -> void
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.Prepare(AndroidX.Media3.ExoPlayer.Source.IMediaPeriodCallback? callback, long positionUs) -> void
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.PrepareComplete -> System.EventHandler<AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.PrepareCompleteEventArgs!>!
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.PrepareCompleteEventArgs
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.PrepareCompleteEventArgs.P0.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.PrepareCompleteEventArgs.PrepareCompleteEventArgs(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? p0) -> void
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.PrepareError -> System.EventHandler<AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.PrepareErrorEventArgs!>!
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.PrepareErrorEventArgs
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.PrepareErrorEventArgs.P0.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.PrepareErrorEventArgs.P1.get -> Java.IO.IOException?
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.PrepareErrorEventArgs.PrepareErrorEventArgs(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? p0, Java.IO.IOException? p1) -> void
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.PreparePositionOverrideUs.get -> long
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.PreparePositionUs.get -> long
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.ReadDiscontinuity() -> long
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.ReevaluateBuffer(long positionUs) -> void
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.ReleasePeriod() -> void
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.SeekToUs(long positionUs) -> long
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.SelectTracks(AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection![]? selections, bool[]? mayRetainStreamFlags, AndroidX.Media3.ExoPlayer.Source.ISampleStream![]? streams, bool[]? streamResetFlags, long positionUs) -> long
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.SetMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource) -> void
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.SetPrepareListener(AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.IPrepareListener? listener) -> void
AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.TrackGroups.get -> AndroidX.Media3.ExoPlayer.Source.TrackGroupArray?
AndroidX.Media3.ExoPlayer.Source.MaskingMediaSource
AndroidX.Media3.ExoPlayer.Source.MaskingMediaSource.MaskingMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource, bool useLazyPreparation) -> void
AndroidX.Media3.ExoPlayer.Source.MaskingMediaSource.PlaceholderTimeline
AndroidX.Media3.ExoPlayer.Source.MaskingMediaSource.PlaceholderTimeline.PlaceholderTimeline(AndroidX.Media3.Common.MediaItem? mediaItem) -> void
AndroidX.Media3.ExoPlayer.Source.MaskingMediaSource.PrepareSourceInternal() -> void
AndroidX.Media3.ExoPlayer.Source.MaskingMediaSource.Timeline.get -> AndroidX.Media3.Common.Timeline?
AndroidX.Media3.ExoPlayer.Source.MediaLoadData
AndroidX.Media3.ExoPlayer.Source.MediaLoadData.DataType.get -> int
AndroidX.Media3.ExoPlayer.Source.MediaLoadData.DataType.set -> void
AndroidX.Media3.ExoPlayer.Source.MediaLoadData.MediaEndTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Source.MediaLoadData.MediaEndTimeMs.set -> void
AndroidX.Media3.ExoPlayer.Source.MediaLoadData.MediaLoadData(int dataType) -> void
AndroidX.Media3.ExoPlayer.Source.MediaLoadData.MediaLoadData(int dataType, int trackType, AndroidX.Media3.Common.Format? trackFormat, int trackSelectionReason, Java.Lang.Object? trackSelectionData, long mediaStartTimeMs, long mediaEndTimeMs) -> void
AndroidX.Media3.ExoPlayer.Source.MediaLoadData.MediaStartTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Source.MediaLoadData.MediaStartTimeMs.set -> void
AndroidX.Media3.ExoPlayer.Source.MediaLoadData.TrackFormat.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.Source.MediaLoadData.TrackFormat.set -> void
AndroidX.Media3.ExoPlayer.Source.MediaLoadData.TrackSelectionData.get -> Java.Lang.Object?
AndroidX.Media3.ExoPlayer.Source.MediaLoadData.TrackSelectionData.set -> void
AndroidX.Media3.ExoPlayer.Source.MediaLoadData.TrackSelectionReason.get -> int
AndroidX.Media3.ExoPlayer.Source.MediaLoadData.TrackSelectionReason.set -> void
AndroidX.Media3.ExoPlayer.Source.MediaLoadData.TrackType.get -> int
AndroidX.Media3.ExoPlayer.Source.MediaLoadData.TrackType.set -> void
AndroidX.Media3.ExoPlayer.Source.MediaParser.InputReaderAdapterV30
AndroidX.Media3.ExoPlayer.Source.MediaParser.InputReaderAdapterV30.AndResetSeekPosition.get -> long
AndroidX.Media3.ExoPlayer.Source.MediaParser.InputReaderAdapterV30.InputReaderAdapterV30() -> void
AndroidX.Media3.ExoPlayer.Source.MediaParser.InputReaderAdapterV30.Length.get -> long
AndroidX.Media3.ExoPlayer.Source.MediaParser.InputReaderAdapterV30.Position.get -> long
AndroidX.Media3.ExoPlayer.Source.MediaParser.InputReaderAdapterV30.Read(byte[]? bytes, int offset, int readLength) -> int
AndroidX.Media3.ExoPlayer.Source.MediaParser.InputReaderAdapterV30.SeekToPosition(long position) -> void
AndroidX.Media3.ExoPlayer.Source.MediaParser.InputReaderAdapterV30.SetCurrentPosition(long position) -> void
AndroidX.Media3.ExoPlayer.Source.MediaParser.InputReaderAdapterV30.SetDataReader(AndroidX.Media3.Common.IDataReader? dataReader, long length) -> void
AndroidX.Media3.ExoPlayer.Source.MediaParser.MediaParserUtil
AndroidX.Media3.ExoPlayer.Source.MediaParser.OutputConsumerAdapterV30
AndroidX.Media3.ExoPlayer.Source.MediaParser.OutputConsumerAdapterV30.ChunkIndex.get -> AndroidX.Media3.Extractor.ChunkIndex?
AndroidX.Media3.ExoPlayer.Source.MediaParser.OutputConsumerAdapterV30.DisableSeeking() -> void
AndroidX.Media3.ExoPlayer.Source.MediaParser.OutputConsumerAdapterV30.DummySeekMap.get -> Android.Media.MediaParser.SeekMap?
AndroidX.Media3.ExoPlayer.Source.MediaParser.OutputConsumerAdapterV30.GetSampleFormats() -> AndroidX.Media3.Common.Format![]?
AndroidX.Media3.ExoPlayer.Source.MediaParser.OutputConsumerAdapterV30.GetSeekPoints(long seekTimeUs) -> Android.Util.Pair?
AndroidX.Media3.ExoPlayer.Source.MediaParser.OutputConsumerAdapterV30.OnSampleCompleted(int trackIndex, long timeUs, int flags, int size, int offset, Android.Media.MediaCodec.CryptoInfo? cryptoInfo) -> void
AndroidX.Media3.ExoPlayer.Source.MediaParser.OutputConsumerAdapterV30.OnSampleDataFound(int trackIndex, Android.Media.MediaParser.IInputReader? sampleData) -> void
AndroidX.Media3.ExoPlayer.Source.MediaParser.OutputConsumerAdapterV30.OnSeekMapFound(Android.Media.MediaParser.SeekMap? seekMap) -> void
AndroidX.Media3.ExoPlayer.Source.MediaParser.OutputConsumerAdapterV30.OnTrackCountFound(int numberOfTracks) -> void
AndroidX.Media3.ExoPlayer.Source.MediaParser.OutputConsumerAdapterV30.OnTrackDataFound(int trackIndex, Android.Media.MediaParser.TrackData? trackData) -> void
AndroidX.Media3.ExoPlayer.Source.MediaParser.OutputConsumerAdapterV30.OutputConsumerAdapterV30() -> void
AndroidX.Media3.ExoPlayer.Source.MediaParser.OutputConsumerAdapterV30.OutputConsumerAdapterV30(AndroidX.Media3.Common.Format? primaryTrackManifestFormat, int primaryTrackType, bool expectDummySeekMap) -> void
AndroidX.Media3.ExoPlayer.Source.MediaParser.OutputConsumerAdapterV30.SetExtractorOutput(AndroidX.Media3.Extractor.IExtractorOutput? extractorOutput) -> void
AndroidX.Media3.ExoPlayer.Source.MediaParser.OutputConsumerAdapterV30.SetMuxedCaptionFormats(System.Collections.Generic.IList<AndroidX.Media3.Common.Format!>? muxedCaptionFormats) -> void
AndroidX.Media3.ExoPlayer.Source.MediaParser.OutputConsumerAdapterV30.SetSampleTimestampUpperLimitFilterUs(long sampleTimestampUpperLimitFilterUs) -> void
AndroidX.Media3.ExoPlayer.Source.MediaParser.OutputConsumerAdapterV30.SetSelectedParserName(string? parserName) -> void
AndroidX.Media3.ExoPlayer.Source.MediaParser.OutputConsumerAdapterV30.SetTimestampAdjuster(AndroidX.Media3.Common.Util.TimestampAdjuster? timestampAdjuster) -> void
AndroidX.Media3.ExoPlayer.Source.MediaParserExtractorAdapter
AndroidX.Media3.ExoPlayer.Source.MediaParserExtractorAdapter.CurrentInputPosition.get -> long
AndroidX.Media3.ExoPlayer.Source.MediaParserExtractorAdapter.DisableSeekingOnMp3Streams() -> void
AndroidX.Media3.ExoPlayer.Source.MediaParserExtractorAdapter.Factory
AndroidX.Media3.ExoPlayer.Source.MediaParserExtractorAdapter.Factory.CreateProgressiveMediaExtractor(AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> AndroidX.Media3.ExoPlayer.Source.IProgressiveMediaExtractor?
AndroidX.Media3.ExoPlayer.Source.MediaParserExtractorAdapter.Factory.Factory() -> void
AndroidX.Media3.ExoPlayer.Source.MediaParserExtractorAdapter.Factory.SetConstantBitrateSeekingEnabled(bool enabled) -> void
AndroidX.Media3.ExoPlayer.Source.MediaParserExtractorAdapter.Init(AndroidX.Media3.Common.IDataReader? dataReader, Android.Net.Uri? uri, System.Collections.Generic.IDictionary<string!, System.Collections.Generic.IList<string!>!>? responseHeaders, long position, long length, AndroidX.Media3.Extractor.IExtractorOutput? output) -> void
AndroidX.Media3.ExoPlayer.Source.MediaParserExtractorAdapter.MediaParserExtractorAdapter(AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> void
AndroidX.Media3.ExoPlayer.Source.MediaParserExtractorAdapter.Read(AndroidX.Media3.Extractor.PositionHolder? positionHolder) -> int
AndroidX.Media3.ExoPlayer.Source.MediaParserExtractorAdapter.Release() -> void
AndroidX.Media3.ExoPlayer.Source.MediaParserExtractorAdapter.Seek(long position, long seekTimeUs) -> void
AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher
AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.MediaPeriodId.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.MediaPeriodId.set -> void
AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.MediaSourceEventListenerEventDispatcher() -> void
AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.MediaSourceEventListenerEventDispatcher(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.WindowIndex.get -> int
AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.WindowIndex.set -> void
AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId
AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId.AdGroupIndex.get -> int
AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId.AdGroupIndex.set -> void
AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId.AdIndexInAdGroup.get -> int
AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId.AdIndexInAdGroup.set -> void
AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId.CopyWithPeriodUid(Java.Lang.Object? newPeriodUid) -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId.CopyWithWindowSequenceNumber(long windowSequenceNumber) -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId.IsAd.get -> bool
AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId.MediaSourceMediaPeriodId(Java.Lang.Object? periodUid) -> void
AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId.MediaSourceMediaPeriodId(Java.Lang.Object? periodUid, int adGroupIndex, int adIndexInAdGroup, long windowSequenceNumber) -> void
AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId.MediaSourceMediaPeriodId(Java.Lang.Object? periodUid, long windowSequenceNumber) -> void
AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId.MediaSourceMediaPeriodId(Java.Lang.Object? periodUid, long windowSequenceNumber, int nextAdGroupIndex) -> void
AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId.NextAdGroupIndex.get -> int
AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId.NextAdGroupIndex.set -> void
AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId.PeriodUid.get -> Java.Lang.Object?
AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId.PeriodUid.set -> void
AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId.WindowSequenceNumber.get -> long
AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId.WindowSequenceNumber.set -> void
AndroidX.Media3.ExoPlayer.Source.MergingMediaSource
AndroidX.Media3.ExoPlayer.Source.MergingMediaSource.CanUpdateMediaItem(AndroidX.Media3.Common.MediaItem? mediaItem) -> bool
AndroidX.Media3.ExoPlayer.Source.MergingMediaSource.IllegalMergeException
AndroidX.Media3.ExoPlayer.Source.MergingMediaSource.IllegalMergeException.IReason
AndroidX.Media3.ExoPlayer.Source.MergingMediaSource.IllegalMergeException.IllegalMergeException(int reason) -> void
AndroidX.Media3.ExoPlayer.Source.MergingMediaSource.IllegalMergeException.Reason.get -> int
AndroidX.Media3.ExoPlayer.Source.MergingMediaSource.IllegalMergeException.Reason.set -> void
AndroidX.Media3.ExoPlayer.Source.MergingMediaSource.MergingMediaSource(bool adjustPeriodTimeOffsets, bool clipDurations, AndroidX.Media3.ExoPlayer.Source.ICompositeSequenceableLoaderFactory? compositeSequenceableLoaderFactory, params AndroidX.Media3.ExoPlayer.Source.IMediaSource![]? mediaSources) -> void
AndroidX.Media3.ExoPlayer.Source.MergingMediaSource.MergingMediaSource(bool adjustPeriodTimeOffsets, bool clipDurations, params AndroidX.Media3.ExoPlayer.Source.IMediaSource![]? mediaSources) -> void
AndroidX.Media3.ExoPlayer.Source.MergingMediaSource.MergingMediaSource(bool adjustPeriodTimeOffsets, params AndroidX.Media3.ExoPlayer.Source.IMediaSource![]? mediaSources) -> void
AndroidX.Media3.ExoPlayer.Source.MergingMediaSource.MergingMediaSource(params AndroidX.Media3.ExoPlayer.Source.IMediaSource![]? mediaSources) -> void
AndroidX.Media3.ExoPlayer.Source.MergingMediaSource.UpdateMediaItem(AndroidX.Media3.Common.MediaItem? mediaItem) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.Add(AndroidX.Media3.Common.MediaItem? mediaItem, Java.Lang.Object? rankingData) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.Add(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource, Java.Lang.Object? rankingData) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.BasePreloadManager(Java.Util.IComparator? rankingDataComparator, AndroidX.Media3.ExoPlayer.Source.Preload.ITargetPreloadStatusControl? targetPreloadStatusControl, AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory? mediaSourceFactory) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.BasePreloadManager(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.BuilderBase
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.BuilderBase.BuilderBase(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.BuilderBase.RankingDataComparator.get -> Java.Util.IComparator?
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.BuilderBase.RankingDataComparator.set -> void
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.BuilderBase.TargetPreloadStatusControl.get -> AndroidX.Media3.ExoPlayer.Source.Preload.ITargetPreloadStatusControl?
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.BuilderBase.TargetPreloadStatusControl.set -> void
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.GetMediaSource(AndroidX.Media3.Common.MediaItem? mediaItem) -> AndroidX.Media3.ExoPlayer.Source.IMediaSource?
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.GetTargetPreloadStatus(AndroidX.Media3.ExoPlayer.Source.IMediaSource? source) -> AndroidX.Media3.ExoPlayer.Source.Preload.ITargetPreloadStatusControlPreloadStatus?
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.Invalidate() -> void
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.OnPreloadCompleted(AndroidX.Media3.ExoPlayer.Source.IMediaSource? source) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.OnPreloadError(AndroidX.Media3.ExoPlayer.Source.Preload.PreloadException? error, AndroidX.Media3.ExoPlayer.Source.IMediaSource? source) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.OnPreloadSkipped(AndroidX.Media3.ExoPlayer.Source.IMediaSource? source) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.RankingDataComparator.get -> Java.Util.IComparator?
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.RankingDataComparator.set -> void
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.Release() -> void
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.Remove(AndroidX.Media3.Common.MediaItem? mediaItem) -> bool
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.Remove(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource) -> bool
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.Reset() -> void
AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.SourceCount.get -> int
AndroidX.Media3.ExoPlayer.Source.Preload.CompletedEventArgs
AndroidX.Media3.ExoPlayer.Source.Preload.CompletedEventArgs.CompletedEventArgs(AndroidX.Media3.Common.MediaItem? mediaItem) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.CompletedEventArgs.MediaItem.get -> AndroidX.Media3.Common.MediaItem?
AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager
AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Builder
AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Builder.Build() -> AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager?
AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Builder.BuildAsBasePreloadManager() -> AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager?
AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Builder.BuildExoPlayer() -> AndroidX.Media3.ExoPlayer.IExoPlayer?
AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Builder.BuildExoPlayer(AndroidX.Media3.ExoPlayer.ExoPlayerBuilder? exoPlayerBuilder) -> AndroidX.Media3.ExoPlayer.IExoPlayer?
AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Builder.Builder(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.Source.Preload.ITargetPreloadStatusControl? targetPreloadStatusControl) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Builder.SetBandwidthMeter(AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter? bandwidthMeter) -> AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Builder?
AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Builder.SetLoadControl(AndroidX.Media3.ExoPlayer.ILoadControl? loadControl) -> AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Builder?
AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Builder.SetMediaSourceFactory(AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory? mediaSourceFactory) -> AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Builder?
AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Builder.SetPreloadLooper(Android.OS.Looper? preloadLooper) -> AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Builder?
AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Builder.SetRenderersFactory(AndroidX.Media3.ExoPlayer.IRenderersFactory? renderersFactory) -> AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Builder?
AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Builder.SetTrackSelectorFactory(AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.IFactory? trackSelectorFactory) -> AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Builder?
AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.CreateMediaSourceForPreloading(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource) -> AndroidX.Media3.ExoPlayer.Source.IMediaSource?
AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.DefaultPreloadManager(AndroidX.Media3.ExoPlayer.Source.Preload.ITargetPreloadStatusControl? targetPreloadStatusControl, AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory? mediaSourceFactory, AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector? trackSelector, AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter? bandwidthMeter, AndroidX.Media3.ExoPlayer.IRendererCapabilitiesListFactory? rendererCapabilitiesListFactory, AndroidX.Media3.ExoPlayer.Upstream.IAllocator? allocator, Android.OS.Looper? preloadLooper) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.SetCurrentPlayingIndex(int currentPlayingIndex) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Status
AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Status.IStage
AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Status.Status(int stage) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Status.Status(int stage, long value) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Status.Status(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.ErrorEventArgs
AndroidX.Media3.ExoPlayer.Source.Preload.ErrorEventArgs.ErrorEventArgs(AndroidX.Media3.ExoPlayer.Source.Preload.PreloadException? exception) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.ErrorEventArgs.Exception.get -> AndroidX.Media3.ExoPlayer.Source.Preload.PreloadException?
AndroidX.Media3.ExoPlayer.Source.Preload.IPreloadManagerListener
AndroidX.Media3.ExoPlayer.Source.Preload.IPreloadManagerListener.OnCompleted(AndroidX.Media3.Common.MediaItem? mediaItem) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.IPreloadManagerListener.OnError(AndroidX.Media3.ExoPlayer.Source.Preload.PreloadException? exception) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.ITargetPreloadStatusControl
AndroidX.Media3.ExoPlayer.Source.Preload.ITargetPreloadStatusControl.GetTargetPreloadStatus(Java.Lang.Object? p0) -> AndroidX.Media3.ExoPlayer.Source.Preload.ITargetPreloadStatusControlPreloadStatus?
AndroidX.Media3.ExoPlayer.Source.Preload.ITargetPreloadStatusControlPreloadStatus
AndroidX.Media3.ExoPlayer.Source.Preload.ITargetPreloadStatusControlPreloadStatus.Stage.get -> int
AndroidX.Media3.ExoPlayer.Source.Preload.ITargetPreloadStatusControlPreloadStatus.Value.get -> long
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadException
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadException.ErrorInfoEquals(AndroidX.Media3.ExoPlayer.Source.Preload.PreloadException? other) -> bool
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadException.MediaItem.get -> AndroidX.Media3.Common.MediaItem?
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadException.MediaItem.set -> void
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadException.PreloadException(AndroidX.Media3.Common.MediaItem? mediaItem, string? message, Java.Lang.Throwable? cause) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.Clear() -> void
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.Factory
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.Factory.CreateMediaSource(AndroidX.Media3.Common.MediaItem? mediaItem) -> AndroidX.Media3.ExoPlayer.Source.IMediaSource?
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.Factory.CreateMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource) -> AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource?
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.Factory.Factory(AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory? mediaSourceFactory, AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.IPreloadControl? preloadControl, AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector? trackSelector, AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter? bandwidthMeter, AndroidX.Media3.ExoPlayer.IRendererCapabilities![]? rendererCapabilities, AndroidX.Media3.ExoPlayer.Upstream.IAllocator? allocator, Android.OS.Looper? preloadLooper) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.Factory.GetSupportedTypes() -> int[]?
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.Factory.InterfaceConsts
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.Factory.SetCmcdConfigurationFactory(AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IFactory? cmcdConfigurationFactory) -> AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.Factory?
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.Factory.SetDrmSessionManagerProvider(AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManagerProvider? drmSessionManagerProvider) -> AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory?
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.Factory.SetLoadErrorHandlingPolicy(AndroidX.Media3.ExoPlayer.Upstream.ILoadErrorHandlingPolicy? loadErrorHandlingPolicy) -> AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory?
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.IPreloadControl
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.IPreloadControl.OnContinueLoadingRequested(AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource? p0, long p1) -> bool
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.IPreloadControl.OnLoadedToTheEndOfSource(AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource? mediaSource) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.IPreloadControl.OnPreloadError(AndroidX.Media3.ExoPlayer.Source.Preload.PreloadException? p0, AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource? p1) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.IPreloadControl.OnSourcePrepared(AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource? p0) -> bool
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.IPreloadControl.OnTracksSelected(AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource? p0) -> bool
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.IPreloadControl.OnUsedByPlayer(AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource? p0) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.Preload(long startPositionUs) -> void
AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.ReleasePreloadMediaSource() -> void
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.CanUpdateMediaItem(AndroidX.Media3.Common.MediaItem? mediaItem) -> bool
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.ClearListener() -> void
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.EventArgs
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.EventArgs.EventArgs(AndroidX.Media3.ExoPlayer.Source.IMediaSource? p0, AndroidX.Media3.Extractor.ISeekMap? p1) -> void
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.EventArgs.P0.get -> AndroidX.Media3.ExoPlayer.Source.IMediaSource?
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.EventArgs.P1.get -> AndroidX.Media3.Extractor.ISeekMap?
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.Factory
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.Factory.CreateMediaSource(AndroidX.Media3.Common.MediaItem? mediaItem) -> AndroidX.Media3.ExoPlayer.Source.IMediaSource?
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.Factory.Factory(AndroidX.Media3.DataSource.IDataSourceFactory? dataSourceFactory) -> void
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.Factory.Factory(AndroidX.Media3.DataSource.IDataSourceFactory? dataSourceFactory, AndroidX.Media3.ExoPlayer.Source.IProgressiveMediaExtractorFactory? progressiveMediaExtractorFactory) -> void
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.Factory.Factory(AndroidX.Media3.DataSource.IDataSourceFactory? dataSourceFactory, AndroidX.Media3.ExoPlayer.Source.IProgressiveMediaExtractorFactory? progressiveMediaExtractorFactory, AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManagerProvider? drmSessionManagerProvider, AndroidX.Media3.ExoPlayer.Upstream.ILoadErrorHandlingPolicy? loadErrorHandlingPolicy, int continueLoadingCheckIntervalBytes) -> void
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.Factory.Factory(AndroidX.Media3.DataSource.IDataSourceFactory? dataSourceFactory, AndroidX.Media3.Extractor.IExtractorsFactory? extractorsFactory) -> void
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.Factory.GetSupportedTypes() -> int[]?
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.Factory.InterfaceConsts
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.Factory.SetContinueLoadingCheckIntervalBytes(int continueLoadingCheckIntervalBytes) -> AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.Factory?
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.Factory.SetDrmSessionManagerProvider(AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManagerProvider? drmSessionManagerProvider) -> AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory?
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.Factory.SetLoadErrorHandlingPolicy(AndroidX.Media3.ExoPlayer.Upstream.ILoadErrorHandlingPolicy? loadErrorHandlingPolicy) -> AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory?
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.IListener
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.IListener.OnSeekMap(AndroidX.Media3.ExoPlayer.Source.IMediaSource? p0, AndroidX.Media3.Extractor.ISeekMap? p1) -> void
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.OnSourceInfoRefreshed(long durationUs, AndroidX.Media3.Extractor.ISeekMap? seekMap, bool isLive) -> void
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.SetListener(AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.IListener? listener) -> void
AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.UpdateMediaItem(AndroidX.Media3.Common.MediaItem? mediaItem) -> void
AndroidX.Media3.ExoPlayer.Source.SampleQueue
AndroidX.Media3.ExoPlayer.Source.SampleQueue.DiscardTo(long timeUs, bool toKeyframe, bool stopAtReadPosition) -> void
AndroidX.Media3.ExoPlayer.Source.SampleQueue.DiscardToEnd() -> void
AndroidX.Media3.ExoPlayer.Source.SampleQueue.DiscardToRead() -> void
AndroidX.Media3.ExoPlayer.Source.SampleQueue.DiscardUpstreamFrom(long timeUs) -> void
AndroidX.Media3.ExoPlayer.Source.SampleQueue.DiscardUpstreamSamples(int discardFromIndex) -> void
AndroidX.Media3.ExoPlayer.Source.SampleQueue.FirstIndex.get -> int
AndroidX.Media3.ExoPlayer.Source.SampleQueue.FirstTimestampUs.get -> long
AndroidX.Media3.ExoPlayer.Source.SampleQueue.Format(AndroidX.Media3.Common.Format? format) -> void
AndroidX.Media3.ExoPlayer.Source.SampleQueue.GetSkipCount(long timeUs, bool allowEndOfQueue) -> int
AndroidX.Media3.ExoPlayer.Source.SampleQueue.IUpstreamFormatChangedListener
AndroidX.Media3.ExoPlayer.Source.SampleQueue.IUpstreamFormatChangedListener.OnUpstreamFormatChanged(AndroidX.Media3.Common.Format? p0) -> void
AndroidX.Media3.ExoPlayer.Source.SampleQueue.InvalidateUpstreamFormatAdjustment() -> void
AndroidX.Media3.ExoPlayer.Source.SampleQueue.IsLastSampleQueued.get -> bool
AndroidX.Media3.ExoPlayer.Source.SampleQueue.LargestQueuedTimestampUs.get -> long
AndroidX.Media3.ExoPlayer.Source.SampleQueue.LargestReadTimestampUs.get -> long
AndroidX.Media3.ExoPlayer.Source.SampleQueue.PeekSourceId() -> long
AndroidX.Media3.ExoPlayer.Source.SampleQueue.ReadIndex.get -> int
AndroidX.Media3.ExoPlayer.Source.SampleQueue.Reset() -> void
AndroidX.Media3.ExoPlayer.Source.SampleQueue.SampleData(AndroidX.Media3.Common.IDataReader? input, int length, bool allowEndOfInput, int sampleDataPart) -> int
AndroidX.Media3.ExoPlayer.Source.SampleQueue.SampleData(AndroidX.Media3.Common.Util.ParsableByteArray? data, int length, int sampleDataPart) -> void
AndroidX.Media3.ExoPlayer.Source.SampleQueue.SampleQueue(AndroidX.Media3.ExoPlayer.Upstream.IAllocator? allocator, AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManager? drmSessionManager, AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher? drmEventDispatcher) -> void
AndroidX.Media3.ExoPlayer.Source.SampleQueue.SampleQueue(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Source.SampleQueue.SeekTo(int sampleIndex) -> bool
AndroidX.Media3.ExoPlayer.Source.SampleQueue.SeekTo(long timeUs, bool allowTimeBeyondBuffer) -> bool
AndroidX.Media3.ExoPlayer.Source.SampleQueue.SetSampleOffsetUs(long sampleOffsetUs) -> void
AndroidX.Media3.ExoPlayer.Source.SampleQueue.SetStartTimeUs(long startTimeUs) -> void
AndroidX.Media3.ExoPlayer.Source.SampleQueue.SetUpstreamFormatChangeListener(AndroidX.Media3.ExoPlayer.Source.SampleQueue.IUpstreamFormatChangedListener? listener) -> void
AndroidX.Media3.ExoPlayer.Source.SampleQueue.Skip(int count) -> void
AndroidX.Media3.ExoPlayer.Source.SampleQueue.SourceId(long sourceId) -> void
AndroidX.Media3.ExoPlayer.Source.SampleQueue.Splice() -> void
AndroidX.Media3.ExoPlayer.Source.SampleQueue.UpstreamFormat.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.Source.SampleQueue.UpstreamFormatChange -> System.EventHandler<AndroidX.Media3.ExoPlayer.Source.SampleQueue.UpstreamFormatChangedEventArgs!>!
AndroidX.Media3.ExoPlayer.Source.SampleQueue.UpstreamFormatChangedEventArgs
AndroidX.Media3.ExoPlayer.Source.SampleQueue.UpstreamFormatChangedEventArgs.P0.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.Source.SampleQueue.UpstreamFormatChangedEventArgs.UpstreamFormatChangedEventArgs(AndroidX.Media3.Common.Format? p0) -> void
AndroidX.Media3.ExoPlayer.Source.SampleQueue.WriteIndex.get -> int
AndroidX.Media3.ExoPlayer.Source.ShuffleOrderDefaultShuffleOrder
AndroidX.Media3.ExoPlayer.Source.ShuffleOrderDefaultShuffleOrder.ShuffleOrderDefaultShuffleOrder(int length) -> void
AndroidX.Media3.ExoPlayer.Source.ShuffleOrderDefaultShuffleOrder.ShuffleOrderDefaultShuffleOrder(int length, long randomSeed) -> void
AndroidX.Media3.ExoPlayer.Source.ShuffleOrderDefaultShuffleOrder.ShuffleOrderDefaultShuffleOrder(int[]? shuffledIndices, long randomSeed) -> void
AndroidX.Media3.ExoPlayer.Source.ShuffleOrderDefaultShuffleOrder.ShuffleOrderDefaultShuffleOrder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Source.ShuffleOrderUnshuffledShuffleOrder
AndroidX.Media3.ExoPlayer.Source.ShuffleOrderUnshuffledShuffleOrder.CloneAndClear() -> AndroidX.Media3.ExoPlayer.Source.IShuffleOrder?
AndroidX.Media3.ExoPlayer.Source.ShuffleOrderUnshuffledShuffleOrder.CloneAndInsert(int insertionIndex, int insertionCount) -> AndroidX.Media3.ExoPlayer.Source.IShuffleOrder?
AndroidX.Media3.ExoPlayer.Source.ShuffleOrderUnshuffledShuffleOrder.CloneAndRemove(int indexFrom, int indexToExclusive) -> AndroidX.Media3.ExoPlayer.Source.IShuffleOrder?
AndroidX.Media3.ExoPlayer.Source.ShuffleOrderUnshuffledShuffleOrder.FirstIndex.get -> int
AndroidX.Media3.ExoPlayer.Source.ShuffleOrderUnshuffledShuffleOrder.GetNextIndex(int index) -> int
AndroidX.Media3.ExoPlayer.Source.ShuffleOrderUnshuffledShuffleOrder.GetPreviousIndex(int index) -> int
AndroidX.Media3.ExoPlayer.Source.ShuffleOrderUnshuffledShuffleOrder.LastIndex.get -> int
AndroidX.Media3.ExoPlayer.Source.ShuffleOrderUnshuffledShuffleOrder.Length.get -> int
AndroidX.Media3.ExoPlayer.Source.ShuffleOrderUnshuffledShuffleOrder.ShuffleOrderUnshuffledShuffleOrder(int length) -> void
AndroidX.Media3.ExoPlayer.Source.SilenceMediaSource
AndroidX.Media3.ExoPlayer.Source.SilenceMediaSource.CanUpdateMediaItem(AndroidX.Media3.Common.MediaItem? mediaItem) -> bool
AndroidX.Media3.ExoPlayer.Source.SilenceMediaSource.Factory
AndroidX.Media3.ExoPlayer.Source.SilenceMediaSource.Factory.CreateMediaSource() -> AndroidX.Media3.ExoPlayer.Source.SilenceMediaSource?
AndroidX.Media3.ExoPlayer.Source.SilenceMediaSource.Factory.Factory() -> void
AndroidX.Media3.ExoPlayer.Source.SilenceMediaSource.Factory.SetDurationUs(long durationUs) -> AndroidX.Media3.ExoPlayer.Source.SilenceMediaSource.Factory?
AndroidX.Media3.ExoPlayer.Source.SilenceMediaSource.Factory.SetTag(Java.Lang.Object? tag) -> AndroidX.Media3.ExoPlayer.Source.SilenceMediaSource.Factory?
AndroidX.Media3.ExoPlayer.Source.SilenceMediaSource.SilenceMediaSource(long durationUs) -> void
AndroidX.Media3.ExoPlayer.Source.SilenceMediaSource.UpdateMediaItem(AndroidX.Media3.Common.MediaItem? mediaItem) -> void
AndroidX.Media3.ExoPlayer.Source.SinglePeriodTimeline
AndroidX.Media3.ExoPlayer.Source.SinglePeriodTimeline.SinglePeriodTimeline(long durationUs, bool isSeekable, bool isDynamic, bool isLive, Java.Lang.Object? manifest, Java.Lang.Object? tag) -> void
AndroidX.Media3.ExoPlayer.Source.SinglePeriodTimeline.SinglePeriodTimeline(long durationUs, bool isSeekable, bool isDynamic, bool useLiveConfiguration, Java.Lang.Object? manifest, AndroidX.Media3.Common.MediaItem? mediaItem) -> void
AndroidX.Media3.ExoPlayer.Source.SinglePeriodTimeline.SinglePeriodTimeline(long periodDurationUs, long windowDurationUs, long windowPositionInPeriodUs, long windowDefaultStartPositionUs, bool isSeekable, bool isDynamic, bool isLive, Java.Lang.Object? manifest, Java.Lang.Object? tag) -> void
AndroidX.Media3.ExoPlayer.Source.SinglePeriodTimeline.SinglePeriodTimeline(long periodDurationUs, long windowDurationUs, long windowPositionInPeriodUs, long windowDefaultStartPositionUs, bool isSeekable, bool isDynamic, bool useLiveConfiguration, Java.Lang.Object? manifest, AndroidX.Media3.Common.MediaItem? mediaItem) -> void
AndroidX.Media3.ExoPlayer.Source.SinglePeriodTimeline.SinglePeriodTimeline(long presentationStartTimeMs, long windowStartTimeMs, long elapsedRealtimeEpochOffsetMs, long periodDurationUs, long windowDurationUs, long windowPositionInPeriodUs, long windowDefaultStartPositionUs, bool isSeekable, bool isDynamic, Java.Lang.Object? manifest, AndroidX.Media3.Common.MediaItem? mediaItem, AndroidX.Media3.Common.MediaItem.LiveConfiguration? liveConfiguration) -> void
AndroidX.Media3.ExoPlayer.Source.SinglePeriodTimeline.SinglePeriodTimeline(long presentationStartTimeMs, long windowStartTimeMs, long elapsedRealtimeEpochOffsetMs, long periodDurationUs, long windowDurationUs, long windowPositionInPeriodUs, long windowDefaultStartPositionUs, bool isSeekable, bool isDynamic, bool isLive, Java.Lang.Object? manifest, Java.Lang.Object? tag) -> void
AndroidX.Media3.ExoPlayer.Source.SinglePeriodTimeline.SinglePeriodTimeline(long presentationStartTimeMs, long windowStartTimeMs, long elapsedRealtimeEpochOffsetMs, long periodDurationUs, long windowDurationUs, long windowPositionInPeriodUs, long windowDefaultStartPositionUs, bool isSeekable, bool isDynamic, bool suppressPositionProjection, Java.Lang.Object? manifest, AndroidX.Media3.Common.MediaItem? mediaItem, AndroidX.Media3.Common.MediaItem.LiveConfiguration? liveConfiguration) -> void
AndroidX.Media3.ExoPlayer.Source.SingleSampleMediaSource
AndroidX.Media3.ExoPlayer.Source.SingleSampleMediaSource.Factory
AndroidX.Media3.ExoPlayer.Source.SingleSampleMediaSource.Factory.CreateMediaSource(AndroidX.Media3.Common.MediaItem.SubtitleConfiguration? subtitleConfiguration, long durationUs) -> AndroidX.Media3.ExoPlayer.Source.SingleSampleMediaSource?
AndroidX.Media3.ExoPlayer.Source.SingleSampleMediaSource.Factory.Factory(AndroidX.Media3.DataSource.IDataSourceFactory? dataSourceFactory) -> void
AndroidX.Media3.ExoPlayer.Source.SingleSampleMediaSource.Factory.SetLoadErrorHandlingPolicy(AndroidX.Media3.ExoPlayer.Upstream.ILoadErrorHandlingPolicy? loadErrorHandlingPolicy) -> AndroidX.Media3.ExoPlayer.Source.SingleSampleMediaSource.Factory?
AndroidX.Media3.ExoPlayer.Source.SingleSampleMediaSource.Factory.SetTag(Java.Lang.Object? tag) -> AndroidX.Media3.ExoPlayer.Source.SingleSampleMediaSource.Factory?
AndroidX.Media3.ExoPlayer.Source.SingleSampleMediaSource.Factory.SetTrackId(string? trackId) -> AndroidX.Media3.ExoPlayer.Source.SingleSampleMediaSource.Factory?
AndroidX.Media3.ExoPlayer.Source.SingleSampleMediaSource.Factory.SetTreatLoadErrorsAsEndOfStream(bool treatLoadErrorsAsEndOfStream) -> AndroidX.Media3.ExoPlayer.Source.SingleSampleMediaSource.Factory?
AndroidX.Media3.ExoPlayer.Source.TimelineWithUpdatedMediaItem
AndroidX.Media3.ExoPlayer.Source.TimelineWithUpdatedMediaItem.TimelineWithUpdatedMediaItem(AndroidX.Media3.Common.Timeline? timeline, AndroidX.Media3.Common.MediaItem? mediaItem) -> void
AndroidX.Media3.ExoPlayer.Source.TrackGroupArray
AndroidX.Media3.ExoPlayer.Source.TrackGroupArray.Get(int index) -> AndroidX.Media3.Common.TrackGroup?
AndroidX.Media3.ExoPlayer.Source.TrackGroupArray.IndexOf(AndroidX.Media3.Common.TrackGroup? group) -> int
AndroidX.Media3.ExoPlayer.Source.TrackGroupArray.IsEmpty.get -> bool
AndroidX.Media3.ExoPlayer.Source.TrackGroupArray.Length.get -> int
AndroidX.Media3.ExoPlayer.Source.TrackGroupArray.Length.set -> void
AndroidX.Media3.ExoPlayer.Source.TrackGroupArray.ToBundle() -> Android.OS.Bundle?
AndroidX.Media3.ExoPlayer.Source.TrackGroupArray.TrackGroupArray(params AndroidX.Media3.Common.TrackGroup![]? trackGroups) -> void
AndroidX.Media3.ExoPlayer.Source.TrackGroupArray.TrackTypes.get -> Google.Common.Collect.ImmutableList?
AndroidX.Media3.ExoPlayer.Source.UnrecognizedInputFormatException
AndroidX.Media3.ExoPlayer.Source.UnrecognizedInputFormatException.SniffFailures.get -> Google.Common.Collect.ImmutableList?
AndroidX.Media3.ExoPlayer.Source.UnrecognizedInputFormatException.SniffFailures.set -> void
AndroidX.Media3.ExoPlayer.Source.UnrecognizedInputFormatException.UnrecognizedInputFormatException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Source.UnrecognizedInputFormatException.UnrecognizedInputFormatException(string? message, Android.Net.Uri? uri) -> void
AndroidX.Media3.ExoPlayer.Source.UnrecognizedInputFormatException.UnrecognizedInputFormatException(string? message, Android.Net.Uri? uri, System.Collections.Generic.IList<AndroidX.Media3.Extractor.ISniffFailure!>? sniffFailures) -> void
AndroidX.Media3.ExoPlayer.Source.UnrecognizedInputFormatException.Uri.get -> Android.Net.Uri?
AndroidX.Media3.ExoPlayer.Source.UnrecognizedInputFormatException.Uri.set -> void
AndroidX.Media3.ExoPlayer.Source.UpstreamDiscardedEventArgs
AndroidX.Media3.ExoPlayer.Source.UpstreamDiscardedEventArgs.MediaLoadData.get -> AndroidX.Media3.ExoPlayer.Source.MediaLoadData?
AndroidX.Media3.ExoPlayer.Source.UpstreamDiscardedEventArgs.MediaPeriodId.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Source.UpstreamDiscardedEventArgs.UpstreamDiscardedEventArgs(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
AndroidX.Media3.ExoPlayer.Source.UpstreamDiscardedEventArgs.WindowIndex.get -> int
AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource
AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.DisableChildSource() -> void
AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.EnableChildSource() -> void
AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.GetMediaPeriodIdForChildMediaPeriodId(Java.Lang.Void? childSourceId, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.GetMediaTimeForChildMediaTime(Java.Lang.Void? childSourceId, long mediaTimeMs, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> long
AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.GetWindowIndexForChildWindowIndex(Java.Lang.Void? childSourceId, int windowIndex) -> int
AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.MediaSource.get -> AndroidX.Media3.ExoPlayer.Source.IMediaSource?
AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.MediaSource.set -> void
AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.OnChildSourceInfoRefreshed(Java.Lang.Object? childSourceId, AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource, AndroidX.Media3.Common.Timeline? newTimeline) -> void
AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.PrepareChildSource() -> void
AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.ReleaseChildSource() -> void
AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.WrappingMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource) -> void
AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.WrappingMediaSource(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.StandaloneMediaClock
AndroidX.Media3.ExoPlayer.StandaloneMediaClock.PlaybackParameters.get -> AndroidX.Media3.Common.PlaybackParameters?
AndroidX.Media3.ExoPlayer.StandaloneMediaClock.PlaybackParameters.set -> void
AndroidX.Media3.ExoPlayer.StandaloneMediaClock.PositionUs.get -> long
AndroidX.Media3.ExoPlayer.StandaloneMediaClock.ResetPosition(long positionUs) -> void
AndroidX.Media3.ExoPlayer.StandaloneMediaClock.StandaloneMediaClock(AndroidX.Media3.Common.Util.IClock? clock) -> void
AndroidX.Media3.ExoPlayer.StandaloneMediaClock.Start() -> void
AndroidX.Media3.ExoPlayer.StandaloneMediaClock.Stop() -> void
AndroidX.Media3.ExoPlayer.Text.ISubtitleDecoderFactory
AndroidX.Media3.ExoPlayer.Text.ISubtitleDecoderFactory.CreateDecoder(AndroidX.Media3.Common.Format? p0) -> AndroidX.Media3.Extractor.Text.ISubtitleDecoder?
AndroidX.Media3.ExoPlayer.Text.ISubtitleDecoderFactory.Default.get -> AndroidX.Media3.ExoPlayer.Text.ISubtitleDecoderFactory?
AndroidX.Media3.ExoPlayer.Text.ISubtitleDecoderFactory.SupportsFormat(AndroidX.Media3.Common.Format? p0) -> bool
AndroidX.Media3.ExoPlayer.Text.ITextOutput
AndroidX.Media3.ExoPlayer.Text.ITextOutput.OnCues(AndroidX.Media3.Common.Text.CueGroup? p0) -> void
AndroidX.Media3.ExoPlayer.Text.ITextOutput.OnCues(System.Collections.Generic.IList<AndroidX.Media3.Common.Text.Cue!>? cues) -> void
AndroidX.Media3.ExoPlayer.Text.TextRenderer
AndroidX.Media3.ExoPlayer.Text.TextRenderer.ExperimentalSetLegacyDecodingEnabled(bool legacyDecodingEnabled) -> void
AndroidX.Media3.ExoPlayer.Text.TextRenderer.HandleMessage(Android.OS.Message? msg) -> bool
AndroidX.Media3.ExoPlayer.Text.TextRenderer.SetFinalStreamEndPositionUs(long streamEndPositionUs) -> void
AndroidX.Media3.ExoPlayer.Text.TextRenderer.TextRenderer(AndroidX.Media3.ExoPlayer.Text.ITextOutput? output, Android.OS.Looper? outputLooper) -> void
AndroidX.Media3.ExoPlayer.Text.TextRenderer.TextRenderer(AndroidX.Media3.ExoPlayer.Text.ITextOutput? output, Android.OS.Looper? outputLooper, AndroidX.Media3.ExoPlayer.Text.ISubtitleDecoderFactory? subtitleDecoderFactory) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection
AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.AdaptationCheckpoint
AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.AdaptationCheckpoint.AdaptationCheckpoint(long totalBandwidth, long allocatedBandwidth) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.AdaptationCheckpoint.AllocatedBandwidth.get -> long
AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.AdaptationCheckpoint.AllocatedBandwidth.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.AdaptationCheckpoint.TotalBandwidth.get -> long
AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.AdaptationCheckpoint.TotalBandwidth.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.AdaptiveTrackSelection(AndroidX.Media3.Common.TrackGroup? group, int[]? tracks, AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter? bandwidthMeter) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.AdaptiveTrackSelection(AndroidX.Media3.Common.TrackGroup? group, int[]? tracks, int type, AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter? bandwidthMeter, long minDurationForQualityIncreaseMs, long maxDurationForQualityDecreaseMs, long minDurationToRetainAfterDiscardMs, int maxWidthToDiscard, int maxHeightToDiscard, float bandwidthFraction, float bufferedFractionToLiveEdgeForQualityIncrease, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.AdaptationCheckpoint!>? adaptationCheckpoints, AndroidX.Media3.Common.Util.IClock? clock) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.AdaptiveTrackSelection(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.Factory
AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.Factory.CreateTrackSelections(AndroidX.Media3.ExoPlayer.TrackSelection.ExoTrackSelectionDefinition![]? definitions, AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter? bandwidthMeter, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.Common.Timeline? timeline) -> AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection![]?
AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.Factory.Factory() -> void
AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.Factory.Factory(int minDurationForQualityIncreaseMs, int maxDurationForQualityDecreaseMs, int minDurationToRetainAfterDiscardMs, float bandwidthFraction) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.Factory.Factory(int minDurationForQualityIncreaseMs, int maxDurationForQualityDecreaseMs, int minDurationToRetainAfterDiscardMs, float bandwidthFraction, float bufferedFractionToLiveEdgeForQualityIncrease, AndroidX.Media3.Common.Util.IClock? clock) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.Factory.Factory(int minDurationForQualityIncreaseMs, int maxDurationForQualityDecreaseMs, int minDurationToRetainAfterDiscardMs, int maxWidthToDiscard, int maxHeightToDiscard, float bandwidthFraction) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.Factory.Factory(int minDurationForQualityIncreaseMs, int maxDurationForQualityDecreaseMs, int minDurationToRetainAfterDiscardMs, int maxWidthToDiscard, int maxHeightToDiscard, float bandwidthFraction, float bufferedFractionToLiveEdgeForQualityIncrease, AndroidX.Media3.Common.Util.IClock? clock) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.Factory.Factory(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection
AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.BaseTrackSelection(AndroidX.Media3.Common.TrackGroup? group, int[]? tracks, int type) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.BaseTrackSelection(AndroidX.Media3.Common.TrackGroup? group, params int[]? tracks) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.BaseTrackSelection(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.GetFormat(int index) -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.GetIndexInTrackGroup(int index) -> int
AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.Group.get -> AndroidX.Media3.Common.TrackGroup?
AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.Group.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.IndexOf(AndroidX.Media3.Common.Format? format) -> int
AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.IndexOf(int indexInTrackGroup) -> int
AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.InterfaceConsts
AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.Length() -> int
AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.PlayWhenReady.get -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.SelectedFormat.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.SelectedIndexInTrackGroup.get -> int
AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.TrackGroup.get -> AndroidX.Media3.Common.TrackGroup?
AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.Tracks.get -> System.Collections.Generic.IList<int>?
AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.Tracks.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.Type.get -> int
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Context.get -> Android.Content.Context?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Context.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.DefaultTrackSelector(Android.Content.Context? context) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.DefaultTrackSelector(Android.Content.Context? context, AndroidX.Media3.Common.TrackSelectionParameters? parameters) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.DefaultTrackSelector(Android.Content.Context? context, AndroidX.Media3.Common.TrackSelectionParameters? parameters, AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelectionFactory? trackSelectionFactory) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.DefaultTrackSelector(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelectionFactory? trackSelectionFactory) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.DefaultTrackSelector(AndroidX.Media3.Common.TrackSelectionParameters? parameters, AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelectionFactory? trackSelectionFactory) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.DefaultTrackSelector(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.AllowAudioMixedChannelCountAdaptiveness.get -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.AllowAudioMixedChannelCountAdaptiveness.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.AllowAudioMixedDecoderSupportAdaptiveness.get -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.AllowAudioMixedDecoderSupportAdaptiveness.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.AllowAudioMixedMimeTypeAdaptiveness.get -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.AllowAudioMixedMimeTypeAdaptiveness.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.AllowAudioMixedSampleRateAdaptiveness.get -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.AllowAudioMixedSampleRateAdaptiveness.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.AllowAudioNonSeamlessAdaptiveness.get -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.AllowAudioNonSeamlessAdaptiveness.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.AllowInvalidateSelectionsOnRendererCapabilitiesChange.get -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.AllowInvalidateSelectionsOnRendererCapabilitiesChange.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.AllowMultipleAdaptiveSelections.get -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.AllowMultipleAdaptiveSelections.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.AllowVideoMixedDecoderSupportAdaptiveness.get -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.AllowVideoMixedDecoderSupportAdaptiveness.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.AllowVideoMixedMimeTypeAdaptiveness.get -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.AllowVideoMixedMimeTypeAdaptiveness.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.AllowVideoNonSeamlessAdaptiveness.get -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.AllowVideoNonSeamlessAdaptiveness.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.Builder() -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.Builder(Android.Content.Context? context) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.ClearSelectionOverride(int rendererIndex, AndroidX.Media3.ExoPlayer.Source.TrackGroupArray? groups) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.ClearSelectionOverrides() -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.ClearSelectionOverrides(int rendererIndex) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.SetAllowAudioMixedChannelCountAdaptiveness(bool allowAudioMixedChannelCountAdaptiveness) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.SetAllowAudioMixedDecoderSupportAdaptiveness(bool allowAudioMixedDecoderSupportAdaptiveness) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.SetAllowAudioMixedMimeTypeAdaptiveness(bool allowAudioMixedMimeTypeAdaptiveness) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.SetAllowAudioMixedSampleRateAdaptiveness(bool allowAudioMixedSampleRateAdaptiveness) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.SetAllowAudioNonSeamlessAdaptiveness(bool allowAudioNonSeamlessAdaptiveness) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.SetAllowInvalidateSelectionsOnRendererCapabilitiesChange(bool allowInvalidateSelectionsOnRendererCapabilitiesChange) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.SetAllowMultipleAdaptiveSelections(bool allowMultipleAdaptiveSelections) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.SetAllowVideoMixedDecoderSupportAdaptiveness(bool allowVideoMixedDecoderSupportAdaptiveness) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.SetAllowVideoMixedMimeTypeAdaptiveness(bool allowVideoMixedMimeTypeAdaptiveness) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.SetAllowVideoNonSeamlessAdaptiveness(bool allowVideoNonSeamlessAdaptiveness) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.SetConstrainAudioChannelCountToDeviceCapabilities(bool enabled) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.SetDisabledTextTrackSelectionFlags(int disabledTextTrackSelectionFlags) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.SetDisabledTrackTypes(System.Collections.Generic.ICollection<Java.Lang.Integer!>? disabledTrackTypes) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.SetExceedAudioConstraintsIfNecessary(bool exceedAudioConstraintsIfNecessary) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.SetExceedRendererCapabilitiesIfNecessary(bool exceedRendererCapabilitiesIfNecessary) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.SetExceedVideoConstraintsIfNecessary(bool exceedVideoConstraintsIfNecessary) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.SetRendererDisabled(int rendererIndex, bool disabled) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.SetSelectionOverride(int rendererIndex, AndroidX.Media3.ExoPlayer.Source.TrackGroupArray? groups, AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionOverride? override) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.SetTunnelingEnabled(bool tunnelingEnabled) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.ConstrainAudioChannelCountToDeviceCapabilities.get -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.ConstrainAudioChannelCountToDeviceCapabilities.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.ExceedAudioConstraintsIfNecessary.get -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.ExceedAudioConstraintsIfNecessary.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.ExceedRendererCapabilitiesIfNecessary.get -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.ExceedRendererCapabilitiesIfNecessary.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.ExceedVideoConstraintsIfNecessary.get -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.ExceedVideoConstraintsIfNecessary.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.GetRendererDisabled(int rendererIndex) -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.GetSelectionOverride(int rendererIndex, AndroidX.Media3.ExoPlayer.Source.TrackGroupArray? groups) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionOverride?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.HasSelectionOverride(int rendererIndex, AndroidX.Media3.ExoPlayer.Source.TrackGroupArray? groups) -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.TunnelingEnabled.get -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.TunnelingEnabled.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.ClearSelectionOverride(int rendererIndex, AndroidX.Media3.ExoPlayer.Source.TrackGroupArray? groups) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.ClearSelectionOverrides() -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.ClearSelectionOverrides(int rendererIndex) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.ParametersBuilder() -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.ParametersBuilder(Android.Content.Context? context) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.SetAllowAudioMixedChannelCountAdaptiveness(bool allowAudioMixedChannelCountAdaptiveness) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.SetAllowAudioMixedDecoderSupportAdaptiveness(bool allowAudioMixedDecoderSupportAdaptiveness) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.SetAllowAudioMixedMimeTypeAdaptiveness(bool allowAudioMixedMimeTypeAdaptiveness) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.SetAllowAudioMixedSampleRateAdaptiveness(bool allowAudioMixedSampleRateAdaptiveness) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.SetAllowMultipleAdaptiveSelections(bool allowMultipleAdaptiveSelections) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.SetAllowVideoMixedDecoderSupportAdaptiveness(bool allowVideoMixedDecoderSupportAdaptiveness) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.SetAllowVideoMixedMimeTypeAdaptiveness(bool allowVideoMixedMimeTypeAdaptiveness) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.SetAllowVideoNonSeamlessAdaptiveness(bool allowVideoNonSeamlessAdaptiveness) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.SetDisabledTextTrackSelectionFlags(int disabledTextTrackSelectionFlags) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.SetDisabledTrackTypes(System.Collections.Generic.ICollection<Java.Lang.Integer!>? disabledTrackTypes) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.SetExceedAudioConstraintsIfNecessary(bool exceedAudioConstraintsIfNecessary) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.SetExceedRendererCapabilitiesIfNecessary(bool exceedRendererCapabilitiesIfNecessary) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.SetExceedVideoConstraintsIfNecessary(bool exceedVideoConstraintsIfNecessary) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.SetRendererDisabled(int rendererIndex, bool disabled) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.SetSelectionOverride(int rendererIndex, AndroidX.Media3.ExoPlayer.Source.TrackGroupArray? groups, AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionOverride? override) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.SetTunnelingEnabled(bool tunnelingEnabled) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionOverride
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionOverride.ContainsTrack(int track) -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionOverride.GroupIndex.get -> int
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionOverride.GroupIndex.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionOverride.Length.get -> int
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionOverride.Length.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionOverride.SelectionOverride(int groupIndex, int[]? tracks, int type) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionOverride.SelectionOverride(int groupIndex, params int[]? tracks) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionOverride.ToBundle() -> Android.OS.Bundle?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionOverride.Tracks.get -> System.Collections.Generic.IList<int>?
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionOverride.Tracks.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionOverride.Type.get -> int
AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionOverride.Type.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.ExoTrackSelectionDefinition
AndroidX.Media3.ExoPlayer.TrackSelection.ExoTrackSelectionDefinition.ExoTrackSelectionDefinition(AndroidX.Media3.Common.TrackGroup? group, int[]? tracks, int type) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.ExoTrackSelectionDefinition.ExoTrackSelectionDefinition(AndroidX.Media3.Common.TrackGroup? group, params int[]? tracks) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.ExoTrackSelectionDefinition.Group.get -> AndroidX.Media3.Common.TrackGroup?
AndroidX.Media3.ExoPlayer.TrackSelection.ExoTrackSelectionDefinition.Group.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.ExoTrackSelectionDefinition.Tracks.get -> System.Collections.Generic.IList<int>?
AndroidX.Media3.ExoPlayer.TrackSelection.ExoTrackSelectionDefinition.Tracks.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.ExoTrackSelectionDefinition.Type.get -> int
AndroidX.Media3.ExoPlayer.TrackSelection.ExoTrackSelectionDefinition.Type.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.FixedTrackSelection
AndroidX.Media3.ExoPlayer.TrackSelection.FixedTrackSelection.FixedTrackSelection(AndroidX.Media3.Common.TrackGroup? group, int track) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.FixedTrackSelection.FixedTrackSelection(AndroidX.Media3.Common.TrackGroup? group, int track, int type) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.FixedTrackSelection.FixedTrackSelection(AndroidX.Media3.Common.TrackGroup? group, int track, int type, int reason, Java.Lang.Object? data) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection
AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection.Disable() -> void
AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection.Enable() -> void
AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection.EvaluateQueueSize(long p0, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk!>? p1) -> int
AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection.ExcludeTrack(int p0, long p1) -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection.IsTrackExcluded(int p0, long p1) -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection.LatestBitrateEstimate.get -> long
AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection.OnDiscontinuity() -> void
AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection.OnPlayWhenReadyChanged(bool playWhenReady) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection.OnPlaybackSpeed(float p0) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection.OnRebuffer() -> void
AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection.SelectedFormat.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection.SelectedIndex.get -> int
AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection.SelectedIndexInTrackGroup.get -> int
AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection.SelectionData.get -> Java.Lang.Object?
AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection.SelectionReason.get -> int
AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection.ShouldCancelChunkLoad(long playbackPositionUs, AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk? loadingChunk, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk!>? queue) -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection.UpdateSelectedTrack(long p0, long p1, long p2, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk!>? p3, AndroidX.Media3.ExoPlayer.Source.Chunk.IMediaChunkIterator![]? p4) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelectionFactory
AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelectionFactory.CreateTrackSelections(AndroidX.Media3.ExoPlayer.TrackSelection.ExoTrackSelectionDefinition![]? p0, AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter? p1, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? p2, AndroidX.Media3.Common.Timeline? p3) -> AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection![]?
AndroidX.Media3.ExoPlayer.TrackSelection.ITrackSelection
AndroidX.Media3.ExoPlayer.TrackSelection.ITrackSelection.GetFormat(int p0) -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.TrackSelection.ITrackSelection.GetIndexInTrackGroup(int p0) -> int
AndroidX.Media3.ExoPlayer.TrackSelection.ITrackSelection.IndexOf(AndroidX.Media3.Common.Format? p0) -> int
AndroidX.Media3.ExoPlayer.TrackSelection.ITrackSelection.IndexOf(int p0) -> int
AndroidX.Media3.ExoPlayer.TrackSelection.ITrackSelection.Length() -> int
AndroidX.Media3.ExoPlayer.TrackSelection.ITrackSelection.TrackGroup.get -> AndroidX.Media3.Common.TrackGroup?
AndroidX.Media3.ExoPlayer.TrackSelection.ITrackSelection.Type.get -> int
AndroidX.Media3.ExoPlayer.TrackSelection.ITrackSelectionType
AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector
AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.CurrentMappedTrackInfo.get -> AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo?
AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo
AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo.GetAdaptiveSupport(int rendererIndex, int groupIndex, bool includeCapabilitiesExceededTracks) -> int
AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo.GetAdaptiveSupport(int rendererIndex, int groupIndex, int[]? trackIndices) -> int
AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo.GetCapabilities(int rendererIndex, int groupIndex, int trackIndex) -> int
AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo.GetRendererName(int rendererIndex) -> string?
AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo.GetRendererSupport(int rendererIndex) -> int
AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo.GetRendererType(int rendererIndex) -> int
AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo.GetTrackGroups(int rendererIndex) -> AndroidX.Media3.ExoPlayer.Source.TrackGroupArray?
AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo.GetTrackSupport(int rendererIndex, int groupIndex, int trackIndex) -> int
AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo.GetTypeSupport(int trackType) -> int
AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo.IRendererSupport
AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo.RendererCount.get -> int
AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo.UnmappedTrackGroups.get -> AndroidX.Media3.ExoPlayer.Source.TrackGroupArray?
AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappingTrackSelector() -> void
AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappingTrackSelector(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.RandomTrackSelection
AndroidX.Media3.ExoPlayer.TrackSelection.RandomTrackSelection.Factory
AndroidX.Media3.ExoPlayer.TrackSelection.RandomTrackSelection.Factory.CreateTrackSelections(AndroidX.Media3.ExoPlayer.TrackSelection.ExoTrackSelectionDefinition![]? definitions, AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter? bandwidthMeter, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.Common.Timeline? timeline) -> AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection![]?
AndroidX.Media3.ExoPlayer.TrackSelection.RandomTrackSelection.Factory.Factory() -> void
AndroidX.Media3.ExoPlayer.TrackSelection.RandomTrackSelection.Factory.Factory(int seed) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.RandomTrackSelection.RandomTrackSelection(AndroidX.Media3.Common.TrackGroup? group, int[]? tracks, int type, Java.Util.Random? random) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectionArray
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectionArray.Get(int index) -> AndroidX.Media3.ExoPlayer.TrackSelection.ITrackSelection?
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectionArray.GetAll() -> AndroidX.Media3.ExoPlayer.TrackSelection.ITrackSelection![]?
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectionArray.Length.get -> int
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectionArray.Length.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectionArray.TrackSelectionArray(params AndroidX.Media3.ExoPlayer.TrackSelection.ITrackSelection![]? trackSelections) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectionUtil
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectionUtil.IAdaptiveTrackSelectionFactory
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectionUtil.IAdaptiveTrackSelectionFactory.CreateAdaptiveTrackSelection(AndroidX.Media3.ExoPlayer.TrackSelection.ExoTrackSelectionDefinition? p0) -> AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection?
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.BandwidthMeter.get -> AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter?
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.IFactory
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.IFactory.CreateTrackSelector(Android.Content.Context? p0) -> AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector?
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.IInvalidationListener
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.IInvalidationListener.OnRendererCapabilitiesChanged(AndroidX.Media3.ExoPlayer.IRenderer? renderer) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.IInvalidationListener.OnTrackSelectionsInvalidated() -> void
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.Invalidate() -> void
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.InvalidateForRendererCapabilitiesChange(AndroidX.Media3.ExoPlayer.IRenderer? renderer) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.RendererCapabilitiesChangedEventArgs
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.RendererCapabilitiesChangedEventArgs.Renderer.get -> AndroidX.Media3.ExoPlayer.IRenderer?
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.RendererCapabilitiesChangedEventArgs.RendererCapabilitiesChangedEventArgs(AndroidX.Media3.ExoPlayer.IRenderer? renderer) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.TrackSelector() -> void
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.TrackSelector(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectorResult
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectorResult.Info.get -> Java.Lang.Object?
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectorResult.Info.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectorResult.IsEquivalent(AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectorResult? other) -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectorResult.IsEquivalent(AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectorResult? other, int index) -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectorResult.IsRendererEnabled(int index) -> bool
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectorResult.Length.get -> int
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectorResult.Length.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectorResult.RendererConfigurations.get -> System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.RendererConfiguration!>?
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectorResult.RendererConfigurations.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectorResult.Selections.get -> System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection!>?
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectorResult.Selections.set -> void
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectorResult.TrackSelectorResult(AndroidX.Media3.ExoPlayer.RendererConfiguration![]? rendererConfigurations, AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection![]? selections, AndroidX.Media3.Common.Tracks? tracks, Java.Lang.Object? info) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectorResult.TrackSelectorResult(AndroidX.Media3.ExoPlayer.RendererConfiguration![]? rendererConfigurations, AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection![]? selections, Java.Lang.Object? info) -> void
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectorResult.Tracks.get -> AndroidX.Media3.Common.Tracks?
AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectorResult.Tracks.set -> void
AndroidX.Media3.ExoPlayer.Upstream.Allocation
AndroidX.Media3.ExoPlayer.Upstream.Allocation.Allocation(byte[]? data, int offset) -> void
AndroidX.Media3.ExoPlayer.Upstream.Allocation.Data.get -> System.Collections.Generic.IList<byte>?
AndroidX.Media3.ExoPlayer.Upstream.Allocation.Data.set -> void
AndroidX.Media3.ExoPlayer.Upstream.Allocation.Offset.get -> int
AndroidX.Media3.ExoPlayer.Upstream.Allocation.Offset.set -> void
AndroidX.Media3.ExoPlayer.Upstream.BandwidthMeterEventEventArgs
AndroidX.Media3.ExoPlayer.Upstream.BandwidthMeterEventEventArgs.BandwidthMeterEventEventArgs(int p0, long p1, long p2) -> void
AndroidX.Media3.ExoPlayer.Upstream.BandwidthMeterEventEventArgs.P0.get -> int
AndroidX.Media3.ExoPlayer.Upstream.BandwidthMeterEventEventArgs.P1.get -> long
AndroidX.Media3.ExoPlayer.Upstream.BandwidthMeterEventEventArgs.P2.get -> long
AndroidX.Media3.ExoPlayer.Upstream.BandwidthMeterEventListenerEventDispatcher
AndroidX.Media3.ExoPlayer.Upstream.BandwidthMeterEventListenerEventDispatcher.AddListener(Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeterEventListener? eventListener) -> void
AndroidX.Media3.ExoPlayer.Upstream.BandwidthMeterEventListenerEventDispatcher.BandwidthMeterEventListenerEventDispatcher() -> void
AndroidX.Media3.ExoPlayer.Upstream.BandwidthMeterEventListenerEventDispatcher.BandwidthSample(int elapsedMs, long bytesTransferred, long bitrateEstimate) -> void
AndroidX.Media3.ExoPlayer.Upstream.BandwidthMeterEventListenerEventDispatcher.RemoveListener(AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeterEventListener? eventListener) -> void
AndroidX.Media3.ExoPlayer.Upstream.CachedRegionTracker
AndroidX.Media3.ExoPlayer.Upstream.CachedRegionTracker.CachedRegionTracker(AndroidX.Media3.DataSource.Cache.ICache? cache, string? cacheKey, AndroidX.Media3.Extractor.ChunkIndex? chunkIndex) -> void
AndroidX.Media3.ExoPlayer.Upstream.CachedRegionTracker.GetRegionEndTimeMs(long byteOffset) -> int
AndroidX.Media3.ExoPlayer.Upstream.CachedRegionTracker.OnSpanAdded(AndroidX.Media3.DataSource.Cache.ICache? cache, AndroidX.Media3.DataSource.Cache.CacheSpan? span) -> void
AndroidX.Media3.ExoPlayer.Upstream.CachedRegionTracker.OnSpanRemoved(AndroidX.Media3.DataSource.Cache.ICache? cache, AndroidX.Media3.DataSource.Cache.CacheSpan? span) -> void
AndroidX.Media3.ExoPlayer.Upstream.CachedRegionTracker.OnSpanTouched(AndroidX.Media3.DataSource.Cache.ICache? cache, AndroidX.Media3.DataSource.Cache.CacheSpan? oldSpan, AndroidX.Media3.DataSource.Cache.CacheSpan? newSpan) -> void
AndroidX.Media3.ExoPlayer.Upstream.CachedRegionTracker.Release() -> void
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.CmcdConfiguration(string? sessionId, string? contentId, AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IRequestConfig? requestConfig) -> void
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.CmcdConfiguration(string? sessionId, string? contentId, AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IRequestConfig? requestConfig, int dataTransmissionMode) -> void
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.ContentId.get -> string?
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.ContentId.set -> void
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.DataTransmissionMode.get -> int
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.DataTransmissionMode.set -> void
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.ICmcdKey
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IDataTransmissionMode
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IFactory
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IFactory.CreateCmcdConfiguration(AndroidX.Media3.Common.MediaItem? p0) -> AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration?
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IFactory.Default.get -> AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IFactory?
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IHeaderKey
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IRequestConfig
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IRequestConfig.GetRequestedMaximumThroughputKbps(int throughputKbps) -> int
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IRequestConfig.IsKeyAllowed(string? key) -> bool
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IsBitrateLoggingAllowed.get -> bool
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IsBufferLengthLoggingAllowed.get -> bool
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IsBufferStarvationLoggingAllowed.get -> bool
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IsContentIdLoggingAllowed.get -> bool
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IsDeadlineLoggingAllowed.get -> bool
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IsMaximumRequestThroughputLoggingAllowed.get -> bool
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IsMeasuredThroughputLoggingAllowed.get -> bool
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IsNextObjectRequestLoggingAllowed.get -> bool
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IsNextRangeRequestLoggingAllowed.get -> bool
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IsObjectDurationLoggingAllowed.get -> bool
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IsObjectTypeLoggingAllowed.get -> bool
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IsPlaybackRateLoggingAllowed.get -> bool
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IsSessionIdLoggingAllowed.get -> bool
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IsStartupLoggingAllowed.get -> bool
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IsStreamTypeLoggingAllowed.get -> bool
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IsStreamingFormatLoggingAllowed.get -> bool
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IsTopBitrateLoggingAllowed.get -> bool
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.RequestConfig.get -> AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.IRequestConfig?
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.RequestConfig.set -> void
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.SessionId.get -> string?
AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.SessionId.set -> void
AndroidX.Media3.ExoPlayer.Upstream.CmcdData
AndroidX.Media3.ExoPlayer.Upstream.CmcdData.AddToDataSpec(AndroidX.Media3.DataSource.DataSpec? dataSpec) -> AndroidX.Media3.DataSource.DataSpec?
AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory
AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory.CreateCmcdData() -> AndroidX.Media3.ExoPlayer.Upstream.CmcdData?
AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory.Factory(AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration? cmcdConfiguration, string? streamingFormat) -> void
AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory.SetBufferedDurationUs(long bufferedDurationUs) -> AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory?
AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory.SetChunkDurationUs(long chunkDurationUs) -> AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory?
AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory.SetDidRebuffer(bool didRebuffer) -> AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory?
AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory.SetIsBufferEmpty(bool isBufferEmpty) -> AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory?
AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory.SetIsLive(bool isLive) -> AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory?
AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory.SetNextObjectRequest(string? nextObjectRequest) -> AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory?
AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory.SetNextRangeRequest(string? nextRangeRequest) -> AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory?
AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory.SetObjectType(string? objectType) -> AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory?
AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory.SetPlaybackRate(float playbackRate) -> AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory?
AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory.SetTrackSelection(AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection? trackSelection) -> AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory?
AndroidX.Media3.ExoPlayer.Upstream.CmcdData.IObjectType
AndroidX.Media3.ExoPlayer.Upstream.CmcdData.IStreamType
AndroidX.Media3.ExoPlayer.Upstream.CmcdData.IStreamingFormat
AndroidX.Media3.ExoPlayer.Upstream.DefaultAllocator
AndroidX.Media3.ExoPlayer.Upstream.DefaultAllocator.Allocate() -> AndroidX.Media3.ExoPlayer.Upstream.Allocation?
AndroidX.Media3.ExoPlayer.Upstream.DefaultAllocator.DefaultAllocator(bool trimOnReset, int individualAllocationSize) -> void
AndroidX.Media3.ExoPlayer.Upstream.DefaultAllocator.DefaultAllocator(bool trimOnReset, int individualAllocationSize, int initialAllocationCount) -> void
AndroidX.Media3.ExoPlayer.Upstream.DefaultAllocator.IndividualAllocationLength.get -> int
AndroidX.Media3.ExoPlayer.Upstream.DefaultAllocator.Release(AndroidX.Media3.ExoPlayer.Upstream.Allocation? allocation) -> void
AndroidX.Media3.ExoPlayer.Upstream.DefaultAllocator.Release(AndroidX.Media3.ExoPlayer.Upstream.IAllocatorAllocationNode? allocationNode) -> void
AndroidX.Media3.ExoPlayer.Upstream.DefaultAllocator.Reset() -> void
AndroidX.Media3.ExoPlayer.Upstream.DefaultAllocator.SetTargetBufferSize(int targetBufferSize) -> void
AndroidX.Media3.ExoPlayer.Upstream.DefaultAllocator.TotalBytesAllocated.get -> int
AndroidX.Media3.ExoPlayer.Upstream.DefaultAllocator.Trim() -> void
AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter
AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.AddEventListener(Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeterEventListener? eventListener) -> void
AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.BitrateEstimate.get -> long
AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.Builder
AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.Builder.Build() -> AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter?
AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.Builder.Builder(Android.Content.Context? context) -> void
AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.Builder.SetClock(AndroidX.Media3.Common.Util.IClock? clock) -> AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.Builder?
AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.Builder.SetInitialBitrateEstimate(int networkType, long initialBitrateEstimate) -> AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.Builder?
AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.Builder.SetInitialBitrateEstimate(long initialBitrateEstimate) -> AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.Builder?
AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.Builder.SetInitialBitrateEstimate(string? countryCode) -> AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.Builder?
AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.Builder.SetResetOnNetworkTypeChange(bool resetOnNetworkTypeChange) -> AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.Builder?
AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.Builder.SetSlidingWindowMaxWeight(int slidingWindowMaxWeight) -> AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.Builder?
AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.OnBytesTransferred(AndroidX.Media3.DataSource.IDataSource? source, AndroidX.Media3.DataSource.DataSpec? dataSpec, bool isNetwork, int bytesTransferred) -> void
AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.OnTransferEnd(AndroidX.Media3.DataSource.IDataSource? source, AndroidX.Media3.DataSource.DataSpec? dataSpec, bool isNetwork) -> void
AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.OnTransferInitializing(AndroidX.Media3.DataSource.IDataSource? source, AndroidX.Media3.DataSource.DataSpec? dataSpec, bool isNetwork) -> void
AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.OnTransferStart(AndroidX.Media3.DataSource.IDataSource? source, AndroidX.Media3.DataSource.DataSpec? dataSpec, bool isNetwork) -> void
AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.RemoveEventListener(AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeterEventListener? eventListener) -> void
AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.SetNetworkTypeOverride(int networkType) -> void
AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.TransferListener.get -> AndroidX.Media3.DataSource.ITransferListener?
AndroidX.Media3.ExoPlayer.Upstream.DefaultLoadErrorHandlingPolicy
AndroidX.Media3.ExoPlayer.Upstream.DefaultLoadErrorHandlingPolicy.DefaultLoadErrorHandlingPolicy() -> void
AndroidX.Media3.ExoPlayer.Upstream.DefaultLoadErrorHandlingPolicy.DefaultLoadErrorHandlingPolicy(int minimumLoadableRetryCount) -> void
AndroidX.Media3.ExoPlayer.Upstream.DefaultLoadErrorHandlingPolicy.DefaultLoadErrorHandlingPolicy(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Upstream.DefaultLoadErrorHandlingPolicy.InterfaceConsts
AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator
AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.Builder
AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.Builder.Builder() -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.CombinedParallelSampleBandwidthEstimator(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.InterfaceConsts
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.AddEventListener(Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeterEventListener? eventListener) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.BitrateEstimate.get -> long
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.Builder
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.Builder.Build() -> AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter?
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.Builder.Builder(Android.Content.Context? context) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.Builder.SetBandwidthEstimator(AndroidX.Media3.ExoPlayer.Upstream.Experimental.IBandwidthEstimator? bandwidthEstimator) -> AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.Builder?
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.Builder.SetInitialBitrateEstimate(int networkType, long initialBitrateEstimate) -> AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.Builder?
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.Builder.SetInitialBitrateEstimate(long initialBitrateEstimate) -> AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.Builder?
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.Builder.SetInitialBitrateEstimate(string? countryCode) -> AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.Builder?
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.Builder.SetResetOnNetworkTypeChange(bool resetOnNetworkTypeChange) -> AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.Builder?
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.Builder.SetTimeToFirstByteEstimator(AndroidX.Media3.ExoPlayer.Upstream.ITimeToFirstByteEstimator? timeToFirstByteEstimator) -> AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.Builder?
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.OnBytesTransferred(AndroidX.Media3.DataSource.IDataSource? source, AndroidX.Media3.DataSource.DataSpec? dataSpec, bool isNetwork, int bytesTransferred) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.OnTransferEnd(AndroidX.Media3.DataSource.IDataSource? source, AndroidX.Media3.DataSource.DataSpec? dataSpec, bool isNetwork) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.OnTransferInitializing(AndroidX.Media3.DataSource.IDataSource? source, AndroidX.Media3.DataSource.DataSpec? dataSpec, bool isNetwork) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.OnTransferStart(AndroidX.Media3.DataSource.IDataSource? source, AndroidX.Media3.DataSource.DataSpec? dataSpec, bool isNetwork) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.RemoveEventListener(AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeterEventListener? eventListener) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.SetNetworkTypeOverride(int networkType) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.TimeToFirstByteEstimateUs.get -> long
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.TransferListener.get -> AndroidX.Media3.DataSource.ITransferListener?
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExponentialWeightedAverageStatistic
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExponentialWeightedAverageStatistic.ExponentialWeightedAverageStatistic() -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExponentialWeightedAverageStatistic.ExponentialWeightedAverageStatistic(double smoothingFactor) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExponentialWeightedAverageStatistic.ExponentialWeightedAverageStatistic(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExponentialWeightedAverageTimeToFirstByteEstimator
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExponentialWeightedAverageTimeToFirstByteEstimator.ExponentialWeightedAverageTimeToFirstByteEstimator() -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExponentialWeightedAverageTimeToFirstByteEstimator.ExponentialWeightedAverageTimeToFirstByteEstimator(double smoothingFactor) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExponentialWeightedAverageTimeToFirstByteEstimator.OnTransferInitializing(AndroidX.Media3.DataSource.DataSpec? dataSpec) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExponentialWeightedAverageTimeToFirstByteEstimator.OnTransferStart(AndroidX.Media3.DataSource.DataSpec? dataSpec) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExponentialWeightedAverageTimeToFirstByteEstimator.Reset() -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExponentialWeightedAverageTimeToFirstByteEstimator.TimeToFirstByteEstimateUs.get -> long
AndroidX.Media3.ExoPlayer.Upstream.Experimental.IBandwidthEstimator
AndroidX.Media3.ExoPlayer.Upstream.Experimental.IBandwidthEstimator.AddEventListener(Android.OS.Handler? p0, AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeterEventListener? p1) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.IBandwidthEstimator.BandwidthEstimate.get -> long
AndroidX.Media3.ExoPlayer.Upstream.Experimental.IBandwidthEstimator.OnBytesTransferred(AndroidX.Media3.DataSource.IDataSource? p0, int p1) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.IBandwidthEstimator.OnNetworkTypeChange(long p0) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.IBandwidthEstimator.OnTransferEnd(AndroidX.Media3.DataSource.IDataSource? p0) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.IBandwidthEstimator.OnTransferInitializing(AndroidX.Media3.DataSource.IDataSource? p0) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.IBandwidthEstimator.OnTransferStart(AndroidX.Media3.DataSource.IDataSource? p0) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.IBandwidthEstimator.RemoveEventListener(AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeterEventListener? p0) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.IBandwidthStatistic
AndroidX.Media3.ExoPlayer.Upstream.Experimental.IBandwidthStatistic.AddSample(long p0, long p1) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.IBandwidthStatistic.BandwidthEstimate.get -> long
AndroidX.Media3.ExoPlayer.Upstream.Experimental.IBandwidthStatistic.Reset() -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.PercentileTimeToFirstByteEstimator
AndroidX.Media3.ExoPlayer.Upstream.Experimental.PercentileTimeToFirstByteEstimator.OnTransferInitializing(AndroidX.Media3.DataSource.DataSpec? dataSpec) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.PercentileTimeToFirstByteEstimator.OnTransferStart(AndroidX.Media3.DataSource.DataSpec? dataSpec) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.PercentileTimeToFirstByteEstimator.PercentileTimeToFirstByteEstimator() -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.PercentileTimeToFirstByteEstimator.PercentileTimeToFirstByteEstimator(int numberOfSamples, float percentile) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.PercentileTimeToFirstByteEstimator.Reset() -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.PercentileTimeToFirstByteEstimator.TimeToFirstByteEstimateUs.get -> long
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingPercentileBandwidthStatistic
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingPercentileBandwidthStatistic.SlidingPercentileBandwidthStatistic() -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingPercentileBandwidthStatistic.SlidingPercentileBandwidthStatistic(int maxSampleCount, double percentile) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingPercentileBandwidthStatistic.SlidingPercentileBandwidthStatistic(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.ISampleEvictionFunction
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.ISampleEvictionFunction.ShouldEvictSample(Java.Util.IDeque? p0) -> bool
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.Sample
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.Sample.Bitrate.get -> long
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.Sample.Bitrate.set -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.Sample.Sample(long bitrate, double weight, long timeAddedMs) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.Sample.Sample(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.Sample.TimeAddedMs.get -> long
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.Sample.TimeAddedMs.set -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.Sample.Weight.get -> double
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.Sample.Weight.set -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.SlidingWeightedAverageBandwidthStatistic() -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.SlidingWeightedAverageBandwidthStatistic(AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.ISampleEvictionFunction? sampleEvictionFunction) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.SlidingWeightedAverageBandwidthStatistic(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.Builder
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.Builder.Builder() -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.InterfaceConsts
AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.SplitParallelSampleBandwidthEstimator(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Upstream.IAllocator
AndroidX.Media3.ExoPlayer.Upstream.IAllocator.Allocate() -> AndroidX.Media3.ExoPlayer.Upstream.Allocation?
AndroidX.Media3.ExoPlayer.Upstream.IAllocator.IndividualAllocationLength.get -> int
AndroidX.Media3.ExoPlayer.Upstream.IAllocator.Release(AndroidX.Media3.ExoPlayer.Upstream.Allocation? p0) -> void
AndroidX.Media3.ExoPlayer.Upstream.IAllocator.Release(AndroidX.Media3.ExoPlayer.Upstream.IAllocatorAllocationNode? p0) -> void
AndroidX.Media3.ExoPlayer.Upstream.IAllocator.TotalBytesAllocated.get -> int
AndroidX.Media3.ExoPlayer.Upstream.IAllocator.Trim() -> void
AndroidX.Media3.ExoPlayer.Upstream.IAllocatorAllocationNode
AndroidX.Media3.ExoPlayer.Upstream.IAllocatorAllocationNode.Allocation.get -> AndroidX.Media3.ExoPlayer.Upstream.Allocation?
AndroidX.Media3.ExoPlayer.Upstream.IAllocatorAllocationNode.Next() -> AndroidX.Media3.ExoPlayer.Upstream.IAllocatorAllocationNode?
AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter
AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter.AddEventListener(Android.OS.Handler? p0, AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeterEventListener? p1) -> void
AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter.BitrateEstimate.get -> long
AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter.RemoveEventListener(AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeterEventListener? p0) -> void
AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter.TimeToFirstByteEstimateUs.get -> long
AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter.TransferListener.get -> AndroidX.Media3.DataSource.ITransferListener?
AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeterEventListener
AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeterEventListener.OnBandwidthSample(int p0, long p1, long p2) -> void
AndroidX.Media3.ExoPlayer.Upstream.ILoadErrorHandlingPolicy
AndroidX.Media3.ExoPlayer.Upstream.ILoadErrorHandlingPolicy.GetFallbackSelectionFor(AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackOptions? p0, AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyLoadErrorInfo? p1) -> AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackSelection?
AndroidX.Media3.ExoPlayer.Upstream.ILoadErrorHandlingPolicy.GetMinimumLoadableRetryCount(int p0) -> int
AndroidX.Media3.ExoPlayer.Upstream.ILoadErrorHandlingPolicy.GetRetryDelayMsFor(AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyLoadErrorInfo? p0) -> long
AndroidX.Media3.ExoPlayer.Upstream.ILoadErrorHandlingPolicy.OnLoadTaskConcluded(long loadTaskId) -> void
AndroidX.Media3.ExoPlayer.Upstream.ILoadErrorHandlingPolicyFallbackType
AndroidX.Media3.ExoPlayer.Upstream.ILoaderErrorThrower
AndroidX.Media3.ExoPlayer.Upstream.ILoaderErrorThrower.MaybeThrowError() -> void
AndroidX.Media3.ExoPlayer.Upstream.ILoaderErrorThrower.MaybeThrowError(int p0) -> void
AndroidX.Media3.ExoPlayer.Upstream.ITimeToFirstByteEstimator
AndroidX.Media3.ExoPlayer.Upstream.ITimeToFirstByteEstimator.OnTransferInitializing(AndroidX.Media3.DataSource.DataSpec? p0) -> void
AndroidX.Media3.ExoPlayer.Upstream.ITimeToFirstByteEstimator.OnTransferStart(AndroidX.Media3.DataSource.DataSpec? p0) -> void
AndroidX.Media3.ExoPlayer.Upstream.ITimeToFirstByteEstimator.Reset() -> void
AndroidX.Media3.ExoPlayer.Upstream.ITimeToFirstByteEstimator.TimeToFirstByteEstimateUs.get -> long
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackOptions
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackOptions.IsFallbackAvailable(int type) -> bool
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackOptions.LoadErrorHandlingPolicyFallbackOptions(int numberOfLocations, int numberOfExcludedLocations, int numberOfTracks, int numberOfExcludedTracks) -> void
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackOptions.NumberOfExcludedLocations.get -> int
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackOptions.NumberOfExcludedLocations.set -> void
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackOptions.NumberOfExcludedTracks.get -> int
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackOptions.NumberOfExcludedTracks.set -> void
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackOptions.NumberOfLocations.get -> int
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackOptions.NumberOfLocations.set -> void
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackOptions.NumberOfTracks.get -> int
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackOptions.NumberOfTracks.set -> void
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackSelection
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackSelection.ExclusionDurationMs.get -> long
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackSelection.ExclusionDurationMs.set -> void
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackSelection.LoadErrorHandlingPolicyFallbackSelection(int type, long exclusionDurationMs) -> void
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackSelection.Type.get -> int
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackSelection.Type.set -> void
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyLoadErrorInfo
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyLoadErrorInfo.ErrorCount.get -> int
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyLoadErrorInfo.ErrorCount.set -> void
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyLoadErrorInfo.Exception.get -> Java.IO.IOException?
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyLoadErrorInfo.Exception.set -> void
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyLoadErrorInfo.LoadErrorHandlingPolicyLoadErrorInfo(AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData, Java.IO.IOException? exception, int errorCount) -> void
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyLoadErrorInfo.LoadEventInfo.get -> AndroidX.Media3.ExoPlayer.Source.LoadEventInfo?
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyLoadErrorInfo.LoadEventInfo.set -> void
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyLoadErrorInfo.MediaLoadData.get -> AndroidX.Media3.ExoPlayer.Source.MediaLoadData?
AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyLoadErrorInfo.MediaLoadData.set -> void
AndroidX.Media3.ExoPlayer.Upstream.Loader
AndroidX.Media3.ExoPlayer.Upstream.Loader.CancelLoading() -> void
AndroidX.Media3.ExoPlayer.Upstream.Loader.ClearFatalError() -> void
AndroidX.Media3.ExoPlayer.Upstream.Loader.HasFatalError.get -> bool
AndroidX.Media3.ExoPlayer.Upstream.Loader.ICallback
AndroidX.Media3.ExoPlayer.Upstream.Loader.ICallback.OnLoadCanceled(Java.Lang.Object? p0, long p1, long p2, bool p3) -> void
AndroidX.Media3.ExoPlayer.Upstream.Loader.ICallback.OnLoadCompleted(Java.Lang.Object? p0, long p1, long p2) -> void
AndroidX.Media3.ExoPlayer.Upstream.Loader.ICallback.OnLoadError(Java.Lang.Object? p0, long p1, long p2, Java.IO.IOException? p3, int p4) -> AndroidX.Media3.ExoPlayer.Upstream.Loader.LoadErrorAction?
AndroidX.Media3.ExoPlayer.Upstream.Loader.ICallback.OnLoadStarted(Java.Lang.Object? loadable, long elapsedRealtimeMs, long loadDurationMs, int retryCount) -> void
AndroidX.Media3.ExoPlayer.Upstream.Loader.ILoadable
AndroidX.Media3.ExoPlayer.Upstream.Loader.ILoadable.CancelLoad() -> void
AndroidX.Media3.ExoPlayer.Upstream.Loader.ILoadable.Load() -> void
AndroidX.Media3.ExoPlayer.Upstream.Loader.IReleaseCallback
AndroidX.Media3.ExoPlayer.Upstream.Loader.IReleaseCallback.OnLoaderReleased() -> void
AndroidX.Media3.ExoPlayer.Upstream.Loader.IsLoading.get -> bool
AndroidX.Media3.ExoPlayer.Upstream.Loader.LoadErrorAction
AndroidX.Media3.ExoPlayer.Upstream.Loader.LoadErrorAction.IsRetry.get -> bool
AndroidX.Media3.ExoPlayer.Upstream.Loader.Loader(AndroidX.Media3.ExoPlayer.Util.IReleasableExecutor? downloadExecutor) -> void
AndroidX.Media3.ExoPlayer.Upstream.Loader.Loader(string? threadNameSuffix) -> void
AndroidX.Media3.ExoPlayer.Upstream.Loader.MaybeThrowError() -> void
AndroidX.Media3.ExoPlayer.Upstream.Loader.MaybeThrowError(int minRetryCount) -> void
AndroidX.Media3.ExoPlayer.Upstream.Loader.Release() -> void
AndroidX.Media3.ExoPlayer.Upstream.Loader.Release(AndroidX.Media3.ExoPlayer.Upstream.Loader.IReleaseCallback? callback) -> void
AndroidX.Media3.ExoPlayer.Upstream.Loader.StartLoading(Java.Lang.Object? loadable, AndroidX.Media3.ExoPlayer.Upstream.Loader.ICallback? callback, int defaultMinRetryCount) -> long
AndroidX.Media3.ExoPlayer.Upstream.Loader.UnexpectedLoaderException
AndroidX.Media3.ExoPlayer.Upstream.Loader.UnexpectedLoaderException.UnexpectedLoaderException(Java.Lang.Throwable? cause) -> void
AndroidX.Media3.ExoPlayer.Upstream.LoaderErrorThrowerPlaceholder
AndroidX.Media3.ExoPlayer.Upstream.LoaderErrorThrowerPlaceholder.LoaderErrorThrowerPlaceholder() -> void
AndroidX.Media3.ExoPlayer.Upstream.LoaderErrorThrowerPlaceholder.MaybeThrowError() -> void
AndroidX.Media3.ExoPlayer.Upstream.LoaderErrorThrowerPlaceholder.MaybeThrowError(int minRetryCount) -> void
AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable
AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.BytesLoaded() -> long
AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.CancelLoad() -> void
AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.DataSpec.get -> AndroidX.Media3.DataSource.DataSpec?
AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.DataSpec.set -> void
AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.IParser
AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.IParser.Parse(Android.Net.Uri? p0, System.IO.Stream? p1) -> Java.Lang.Object?
AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.Load() -> void
AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.LoadTaskId.get -> long
AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.LoadTaskId.set -> void
AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.ParsingLoadable(AndroidX.Media3.DataSource.IDataSource? dataSource, Android.Net.Uri? uri, int type, AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.IParser? parser) -> void
AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.ParsingLoadable(AndroidX.Media3.DataSource.IDataSource? dataSource, AndroidX.Media3.DataSource.DataSpec? dataSpec, int type, AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.IParser? parser) -> void
AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.ResponseHeaders.get -> System.Collections.Generic.IDictionary<string!, System.Collections.Generic.IList<string!>!>?
AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.Result.get -> Java.Lang.Object?
AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.Type.get -> int
AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.Type.set -> void
AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.Uri.get -> Android.Net.Uri?
AndroidX.Media3.ExoPlayer.Upstream.SlidingPercentile
AndroidX.Media3.ExoPlayer.Upstream.SlidingPercentile.SlidingPercentile(int maxWeight) -> void
AndroidX.Media3.ExoPlayer.Upstream.SlidingPercentile.SlidingPercentile(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Util.DebugTextViewHelper
AndroidX.Media3.ExoPlayer.Util.DebugTextViewHelper.DebugTextViewHelper(AndroidX.Media3.ExoPlayer.IExoPlayer? player, Android.Widget.TextView? textView) -> void
AndroidX.Media3.ExoPlayer.Util.DebugTextViewHelper.DebugTextViewHelper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Util.DebugTextViewHelper.Start() -> void
AndroidX.Media3.ExoPlayer.Util.DebugTextViewHelper.Stop() -> void
AndroidX.Media3.ExoPlayer.Util.DebugTextViewHelper.UpdateAndPost() -> void
AndroidX.Media3.ExoPlayer.Util.EventLogger
AndroidX.Media3.ExoPlayer.Util.EventLogger.EventLogger() -> void
AndroidX.Media3.ExoPlayer.Util.EventLogger.EventLogger(AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector? trackSelector) -> void
AndroidX.Media3.ExoPlayer.Util.EventLogger.EventLogger(AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector? trackSelector, string? tag) -> void
AndroidX.Media3.ExoPlayer.Util.EventLogger.EventLogger(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Util.EventLogger.EventLogger(string? tag) -> void
AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts
AndroidX.Media3.ExoPlayer.Util.IReleasableExecutor
AndroidX.Media3.ExoPlayer.Util.IReleasableExecutor.From(Java.Lang.Object? executor, AndroidX.Media3.Common.Util.IConsumer? releaseCallback) -> AndroidX.Media3.ExoPlayer.Util.IReleasableExecutor?
AndroidX.Media3.ExoPlayer.Util.IReleasableExecutor.Release() -> void
AndroidX.Media3.ExoPlayer.Util.SntpClient
AndroidX.Media3.ExoPlayer.Util.SntpClient.IInitializationCallback
AndroidX.Media3.ExoPlayer.Util.SntpClient.IInitializationCallback.OnInitializationFailed(Java.IO.IOException? p0) -> void
AndroidX.Media3.ExoPlayer.Util.SntpClient.IInitializationCallback.OnInitialized() -> void
AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer
AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.DecoderCounters.get -> AndroidX.Media3.ExoPlayer.DecoderCounters?
AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.DecoderCounters.set -> void
AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.DecoderVideoRenderer(long allowedJoiningTimeMs, Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener? eventListener, int maxDroppedFramesToNotify) -> void
AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.DecoderVideoRenderer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.SetOutput(Java.Lang.Object? output) -> void
AndroidX.Media3.ExoPlayer.Video.DroppedFramesEventArgs
AndroidX.Media3.ExoPlayer.Video.DroppedFramesEventArgs.Count.get -> int
AndroidX.Media3.ExoPlayer.Video.DroppedFramesEventArgs.DroppedFramesEventArgs(int count, long elapsedMs) -> void
AndroidX.Media3.ExoPlayer.Video.DroppedFramesEventArgs.ElapsedMs.get -> long
AndroidX.Media3.ExoPlayer.Video.ErrorEventArgs
AndroidX.Media3.ExoPlayer.Video.ErrorEventArgs.ErrorEventArgs(AndroidX.Media3.ExoPlayer.Video.IVideoSink? p0, AndroidX.Media3.ExoPlayer.Video.VideoSinkVideoSinkException? p1) -> void
AndroidX.Media3.ExoPlayer.Video.ErrorEventArgs.P0.get -> AndroidX.Media3.ExoPlayer.Video.IVideoSink?
AndroidX.Media3.ExoPlayer.Video.ErrorEventArgs.P1.get -> AndroidX.Media3.ExoPlayer.Video.VideoSinkVideoSinkException?
AndroidX.Media3.ExoPlayer.Video.FirstFrameRenderedEventArgs
AndroidX.Media3.ExoPlayer.Video.FirstFrameRenderedEventArgs.FirstFrameRenderedEventArgs(AndroidX.Media3.ExoPlayer.Video.IVideoSink? p0) -> void
AndroidX.Media3.ExoPlayer.Video.FirstFrameRenderedEventArgs.P0.get -> AndroidX.Media3.ExoPlayer.Video.IVideoSink?
AndroidX.Media3.ExoPlayer.Video.FrameDroppedEventArgs
AndroidX.Media3.ExoPlayer.Video.FrameDroppedEventArgs.FrameDroppedEventArgs(AndroidX.Media3.ExoPlayer.Video.IVideoSink? p0) -> void
AndroidX.Media3.ExoPlayer.Video.FrameDroppedEventArgs.P0.get -> AndroidX.Media3.ExoPlayer.Video.IVideoSink?
AndroidX.Media3.ExoPlayer.Video.IVideoDecoderOutputBufferRenderer
AndroidX.Media3.ExoPlayer.Video.IVideoDecoderOutputBufferRenderer.SetOutputBuffer(AndroidX.Media3.Decoder.VideoDecoderOutputBuffer? p0) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoFrameMetadataListener
AndroidX.Media3.ExoPlayer.Video.IVideoFrameMetadataListener.OnVideoFrameAboutToBeRendered(long p0, long p1, AndroidX.Media3.Common.Format? p2, Android.Media.MediaFormat? p3) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener
AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener.OnDroppedFrames(int count, long elapsedMs) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener.OnRenderedFirstFrame(Java.Lang.Object? output, long renderTimeMs) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener.OnVideoCodecError(Java.Lang.Exception? videoCodecError) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener.OnVideoDecoderInitialized(string? decoderName, long initializedTimestampMs, long initializationDurationMs) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener.OnVideoDecoderReleased(string? decoderName) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener.OnVideoDisabled(AndroidX.Media3.ExoPlayer.DecoderCounters? counters) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener.OnVideoEnabled(AndroidX.Media3.ExoPlayer.DecoderCounters? counters) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener.OnVideoFrameProcessingOffset(long totalProcessingOffsetUs, int frameCount) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener.OnVideoInputFormatChanged(AndroidX.Media3.Common.Format? format, AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation? decoderReuseEvaluation) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener.OnVideoSizeChanged(AndroidX.Media3.Common.VideoSize? videoSize) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSink
AndroidX.Media3.ExoPlayer.Video.IVideoSink.ClearOutputSurfaceInfo() -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSink.EnableMayRenderStartOfStream() -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSink.Flush(bool p0) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSink.HandleInputBitmap(Android.Graphics.Bitmap? p0, AndroidX.Media3.Common.Util.ITimestampIterator? p1) -> bool
AndroidX.Media3.ExoPlayer.Video.IVideoSink.HandleInputFrame(long p0, bool p1, AndroidX.Media3.ExoPlayer.Video.IVideoSinkVideoFrameHandler? p2) -> bool
AndroidX.Media3.ExoPlayer.Video.IVideoSink.Initialize(AndroidX.Media3.Common.Format? p0) -> bool
AndroidX.Media3.ExoPlayer.Video.IVideoSink.InputSurface.get -> Android.Views.Surface?
AndroidX.Media3.ExoPlayer.Video.IVideoSink.IsEnded.get -> bool
AndroidX.Media3.ExoPlayer.Video.IVideoSink.IsInitialized.get -> bool
AndroidX.Media3.ExoPlayer.Video.IVideoSink.IsReady(bool p0) -> bool
AndroidX.Media3.ExoPlayer.Video.IVideoSink.Join(bool p0) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSink.OnInputStreamChanged(int p0, AndroidX.Media3.Common.Format? p1, System.Collections.Generic.IList<AndroidX.Media3.Common.IEffect!>? p2) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSink.OnRendererDisabled() -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSink.OnRendererEnabled(bool p0) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSink.OnRendererStarted() -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSink.OnRendererStopped() -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSink.Release() -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSink.Render(long p0, long p1) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSink.SetChangeFrameRateStrategy(int p0) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSink.SetListener(AndroidX.Media3.ExoPlayer.Video.IVideoSinkListener? p0, Java.Util.Concurrent.IExecutor? p1) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSink.SetOutputSurfaceInfo(Android.Views.Surface? p0, AndroidX.Media3.Common.Util.Size? p1) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSink.SetPlaybackSpeed(float p0) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSink.SetStreamTimestampInfo(long p0, long p1) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSink.SetVideoEffects(System.Collections.Generic.IList<AndroidX.Media3.Common.IEffect!>? p0) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSink.SetVideoFrameMetadataListener(AndroidX.Media3.ExoPlayer.Video.IVideoFrameMetadataListener? p0) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSink.SetWakeupListener(AndroidX.Media3.ExoPlayer.IRendererWakeupListener? p0) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSink.SignalEndOfCurrentInputStream() -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSink.SignalEndOfInput() -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSinkInputType
AndroidX.Media3.ExoPlayer.Video.IVideoSinkListener
AndroidX.Media3.ExoPlayer.Video.IVideoSinkListener.NoOp.get -> AndroidX.Media3.ExoPlayer.Video.IVideoSinkListener?
AndroidX.Media3.ExoPlayer.Video.IVideoSinkListener.OnError(AndroidX.Media3.ExoPlayer.Video.IVideoSink? p0, AndroidX.Media3.ExoPlayer.Video.VideoSinkVideoSinkException? p1) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSinkListener.OnFirstFrameRendered(AndroidX.Media3.ExoPlayer.Video.IVideoSink? p0) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSinkListener.OnFrameDropped(AndroidX.Media3.ExoPlayer.Video.IVideoSink? p0) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSinkListener.OnVideoSizeChanged(AndroidX.Media3.ExoPlayer.Video.IVideoSink? p0, AndroidX.Media3.Common.VideoSize? p1) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSinkVideoFrameHandler
AndroidX.Media3.ExoPlayer.Video.IVideoSinkVideoFrameHandler.Render(long p0) -> void
AndroidX.Media3.ExoPlayer.Video.IVideoSinkVideoFrameHandler.Skip() -> void
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoDecoderException
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoDecoderException.IsSurfaceValid.get -> bool
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoDecoderException.IsSurfaceValid.set -> void
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoDecoderException.MediaCodecVideoDecoderException(Java.Lang.Throwable? cause, AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo? codecInfo, Android.Views.Surface? surface) -> void
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoDecoderException.MediaCodecVideoDecoderException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoDecoderException.SurfaceIdentityHashCode.get -> int
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoDecoderException.SurfaceIdentityHashCode.set -> void
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder.Build() -> AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer?
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder.Builder(Android.Content.Context? context) -> void
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder.ExperimentalSetLateThresholdToDropDecoderInputUs(long lateThresholdToDropDecoderInputUs) -> AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder?
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder.ExperimentalSetParseAv1SampleDependencies(bool parseAv1SampleDependencies) -> AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder?
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder.SetAllowedJoiningTimeMs(long allowedJoiningTimeMs) -> AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder?
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder.SetAssumedMinimumCodecOperatingRate(float assumedMinimumCodecOperatingRate) -> AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder?
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder.SetCodecAdapterFactory(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterFactory? codecAdapterFactory) -> AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder?
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder.SetEnableDecoderFallback(bool enableDecoderFallback) -> AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder?
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder.SetEventHandler(Android.OS.Handler? eventHandler) -> AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder?
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder.SetEventListener(AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener? eventListener) -> AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder?
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder.SetMaxDroppedFramesToNotify(int maxDroppedFramesToNotify) -> AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder?
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder.SetMediaCodecSelector(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector) -> AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder?
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder.SetVideoSink(AndroidX.Media3.ExoPlayer.Video.IVideoSink? videoSink) -> AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder?
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.CodecMaxValues
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.CodecMaxValues.CodecMaxValues(int width, int height, int inputSize) -> void
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.CodecMaxValues.Height.get -> int
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.CodecMaxValues.Height.set -> void
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.CodecMaxValues.InputSize.get -> int
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.CodecMaxValues.InputSize.set -> void
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.CodecMaxValues.Width.get -> int
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.CodecMaxValues.Width.set -> void
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.MediaCodecVideoRenderer(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterFactory? codecAdapterFactory, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, long allowedJoiningTimeMs, bool enableDecoderFallback, Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener? eventListener, int maxDroppedFramesToNotify) -> void
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.MediaCodecVideoRenderer(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterFactory? codecAdapterFactory, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, long allowedJoiningTimeMs, bool enableDecoderFallback, Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener? eventListener, int maxDroppedFramesToNotify, float assumedMinimumCodecOperatingRate) -> void
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.MediaCodecVideoRenderer(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterFactory? codecAdapterFactory, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, long allowedJoiningTimeMs, bool enableDecoderFallback, Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener? eventListener, int maxDroppedFramesToNotify, float assumedMinimumCodecOperatingRate, AndroidX.Media3.ExoPlayer.Video.IVideoSink? videoSink) -> void
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.MediaCodecVideoRenderer(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector) -> void
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.MediaCodecVideoRenderer(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, long allowedJoiningTimeMs) -> void
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.MediaCodecVideoRenderer(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, long allowedJoiningTimeMs, Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener? eventListener, int maxDroppedFramesToNotify) -> void
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.MediaCodecVideoRenderer(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, long allowedJoiningTimeMs, bool enableDecoderFallback, Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener? eventListener, int maxDroppedFramesToNotify) -> void
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.MediaCodecVideoRenderer(AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder? builder) -> void
AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.MediaCodecVideoRenderer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Video.PlaceholderSurface
AndroidX.Media3.ExoPlayer.Video.PlaceholderSurface.Secure.get -> bool
AndroidX.Media3.ExoPlayer.Video.PlaceholderSurface.Secure.set -> void
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.AddListener(AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.IListener? listener) -> void
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.Builder
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.Builder.Build() -> AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper?
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.Builder.Builder(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl? videoFrameReleaseControl) -> void
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.Builder.SetClock(AndroidX.Media3.Common.Util.IClock? clock) -> AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.Builder?
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.Builder.SetCompositionEffects(System.Collections.Generic.IList<AndroidX.Media3.Common.IEffect!>? compositionEffects) -> AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.Builder?
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.Builder.SetCompositorSettings(AndroidX.Media3.Common.IVideoCompositorSettings? compositorSettings) -> AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.Builder?
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.Builder.SetPreviewingVideoGraphFactory(AndroidX.Media3.Common.IPreviewingVideoGraphFactory? previewingVideoGraphFactory) -> AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.Builder?
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.Builder.SetRequestOpenGlToneMapping(bool requestOpenGlToneMapping) -> AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.Builder?
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.Builder.SetVideoFrameProcessorFactory(AndroidX.Media3.Common.IVideoFrameProcessorFactory? videoFrameProcessorFactory) -> AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.Builder?
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.ClearOutputSurfaceInfo() -> void
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.ErrorEventArgs
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.ErrorEventArgs.ErrorEventArgs(AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper? p0, AndroidX.Media3.Common.VideoFrameProcessingException? p1) -> void
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.ErrorEventArgs.P0.get -> AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper?
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.ErrorEventArgs.P1.get -> AndroidX.Media3.Common.VideoFrameProcessingException?
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.FirstFrameRenderedEventArgs
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.FirstFrameRenderedEventArgs.FirstFrameRenderedEventArgs(AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper? p0) -> void
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.FirstFrameRenderedEventArgs.P0.get -> AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper?
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.FrameDroppedEventArgs
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.FrameDroppedEventArgs.FrameDroppedEventArgs(AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper? p0) -> void
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.FrameDroppedEventArgs.P0.get -> AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper?
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.GetSink(int inputIndex) -> AndroidX.Media3.ExoPlayer.Video.IVideoSink?
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.IListener
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.IListener.OnError(AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper? p0, AndroidX.Media3.Common.VideoFrameProcessingException? p1) -> void
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.IListener.OnFirstFrameRendered(AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper? p0) -> void
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.IListener.OnFrameDropped(AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper? p0) -> void
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.IListener.OnVideoSizeChanged(AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper? p0, AndroidX.Media3.Common.VideoSize? p1) -> void
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.OnEnded(long finalFramePresentationTimeUs) -> void
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.OnError(AndroidX.Media3.Common.VideoFrameProcessingException? exception) -> void
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.OnOutputFrameAvailableForRendering(long framePresentationTimeUs) -> void
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.OnOutputFrameRateChanged(float frameRate) -> void
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.OnOutputSizeChanged(int width, int height) -> void
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.Release() -> void
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.RemoveListener(AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.IListener? listener) -> void
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.SetOutputSurfaceInfo(Android.Views.Surface? outputSurface, AndroidX.Media3.Common.Util.Size? outputResolution) -> void
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.SetTotalVideoInputCount(int totalVideoInputCount) -> void
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.VideoSizeChangedEventArgs
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.VideoSizeChangedEventArgs.P0.get -> AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper?
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.VideoSizeChangedEventArgs.P1.get -> AndroidX.Media3.Common.VideoSize?
AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.VideoSizeChangedEventArgs.VideoSizeChangedEventArgs(AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper? p0, AndroidX.Media3.Common.VideoSize? p1) -> void
AndroidX.Media3.ExoPlayer.Video.RenderedFirstFrameEventArgs
AndroidX.Media3.ExoPlayer.Video.RenderedFirstFrameEventArgs.Output.get -> Java.Lang.Object?
AndroidX.Media3.ExoPlayer.Video.RenderedFirstFrameEventArgs.RenderTimeMs.get -> long
AndroidX.Media3.ExoPlayer.Video.RenderedFirstFrameEventArgs.RenderedFirstFrameEventArgs(Java.Lang.Object? output, long renderTimeMs) -> void
AndroidX.Media3.ExoPlayer.Video.Spherical.CameraMotionEventArgs
AndroidX.Media3.ExoPlayer.Video.Spherical.CameraMotionEventArgs.CameraMotionEventArgs(long p0, float[]? p1) -> void
AndroidX.Media3.ExoPlayer.Video.Spherical.CameraMotionEventArgs.P0.get -> long
AndroidX.Media3.ExoPlayer.Video.Spherical.CameraMotionEventArgs.P1.get -> float[]?
AndroidX.Media3.ExoPlayer.Video.Spherical.CameraMotionRenderer
AndroidX.Media3.ExoPlayer.Video.Spherical.CameraMotionRenderer.CameraMotionRenderer() -> void
AndroidX.Media3.ExoPlayer.Video.Spherical.ICameraMotionListener
AndroidX.Media3.ExoPlayer.Video.Spherical.ICameraMotionListener.OnCameraMotion(long p0, float[]? p1) -> void
AndroidX.Media3.ExoPlayer.Video.Spherical.ICameraMotionListener.OnCameraMotionReset() -> void
AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView
AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.AddVideoSurfaceListener(AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.IVideoSurfaceListener? listener) -> void
AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.CameraMotionListener.get -> AndroidX.Media3.ExoPlayer.Video.Spherical.ICameraMotionListener?
AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.IVideoSurfaceListener
AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.IVideoSurfaceListener.OnVideoSurfaceCreated(Android.Views.Surface? p0) -> void
AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.IVideoSurfaceListener.OnVideoSurfaceDestroyed(Android.Views.Surface? p0) -> void
AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.RemoveVideoSurfaceListener(AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.IVideoSurfaceListener? listener) -> void
AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.SetDefaultStereoMode(int stereoMode) -> void
AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.SetUseSensorRotation(bool useSensorRotation) -> void
AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.SphericalGLSurfaceView(Android.Content.Context? context) -> void
AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.SphericalGLSurfaceView(Android.Content.Context? context, Android.Util.IAttributeSet? attributeSet) -> void
AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.VideoFrameMetadataListener.get -> AndroidX.Media3.ExoPlayer.Video.IVideoFrameMetadataListener?
AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.VideoSurface.get -> Android.Views.Surface?
AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.VideoSurfaceCreated -> System.EventHandler<AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.VideoSurfaceCreatedEventArgs!>!
AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.VideoSurfaceCreatedEventArgs
AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.VideoSurfaceCreatedEventArgs.P0.get -> Android.Views.Surface?
AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.VideoSurfaceCreatedEventArgs.VideoSurfaceCreatedEventArgs(Android.Views.Surface? p0) -> void
AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.VideoSurfaceDestroyed -> System.EventHandler<AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.VideoSurfaceDestroyedEventArgs!>!
AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.VideoSurfaceDestroyedEventArgs
AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.VideoSurfaceDestroyedEventArgs.P0.get -> Android.Views.Surface?
AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.VideoSurfaceDestroyedEventArgs.VideoSurfaceDestroyedEventArgs(Android.Views.Surface? p0) -> void
AndroidX.Media3.ExoPlayer.Video.VideoCodecErrorEventArgs
AndroidX.Media3.ExoPlayer.Video.VideoCodecErrorEventArgs.VideoCodecError.get -> Java.Lang.Exception?
AndroidX.Media3.ExoPlayer.Video.VideoCodecErrorEventArgs.VideoCodecErrorEventArgs(Java.Lang.Exception? videoCodecError) -> void
AndroidX.Media3.ExoPlayer.Video.VideoDecoderGLSurfaceView
AndroidX.Media3.ExoPlayer.Video.VideoDecoderGLSurfaceView.SetOutputBuffer(AndroidX.Media3.Decoder.VideoDecoderOutputBuffer? outputBuffer) -> void
AndroidX.Media3.ExoPlayer.Video.VideoDecoderGLSurfaceView.VideoDecoderGLSurfaceView(Android.Content.Context? context) -> void
AndroidX.Media3.ExoPlayer.Video.VideoDecoderGLSurfaceView.VideoDecoderGLSurfaceView(Android.Content.Context? context, Android.Util.IAttributeSet? attrs) -> void
AndroidX.Media3.ExoPlayer.Video.VideoDecoderGLSurfaceView.VideoDecoderOutputBufferRenderer.get -> AndroidX.Media3.ExoPlayer.Video.IVideoDecoderOutputBufferRenderer?
AndroidX.Media3.ExoPlayer.Video.VideoDecoderInitializedEventArgs
AndroidX.Media3.ExoPlayer.Video.VideoDecoderInitializedEventArgs.DecoderName.get -> string?
AndroidX.Media3.ExoPlayer.Video.VideoDecoderInitializedEventArgs.InitializationDurationMs.get -> long
AndroidX.Media3.ExoPlayer.Video.VideoDecoderInitializedEventArgs.InitializedTimestampMs.get -> long
AndroidX.Media3.ExoPlayer.Video.VideoDecoderInitializedEventArgs.VideoDecoderInitializedEventArgs(string? decoderName, long initializedTimestampMs, long initializationDurationMs) -> void
AndroidX.Media3.ExoPlayer.Video.VideoDecoderReleasedEventArgs
AndroidX.Media3.ExoPlayer.Video.VideoDecoderReleasedEventArgs.DecoderName.get -> string?
AndroidX.Media3.ExoPlayer.Video.VideoDecoderReleasedEventArgs.VideoDecoderReleasedEventArgs(string? decoderName) -> void
AndroidX.Media3.ExoPlayer.Video.VideoDisabledEventArgs
AndroidX.Media3.ExoPlayer.Video.VideoDisabledEventArgs.Counters.get -> AndroidX.Media3.ExoPlayer.DecoderCounters?
AndroidX.Media3.ExoPlayer.Video.VideoDisabledEventArgs.VideoDisabledEventArgs(AndroidX.Media3.ExoPlayer.DecoderCounters? counters) -> void
AndroidX.Media3.ExoPlayer.Video.VideoEnabledEventArgs
AndroidX.Media3.ExoPlayer.Video.VideoEnabledEventArgs.Counters.get -> AndroidX.Media3.ExoPlayer.DecoderCounters?
AndroidX.Media3.ExoPlayer.Video.VideoEnabledEventArgs.VideoEnabledEventArgs(AndroidX.Media3.ExoPlayer.DecoderCounters? counters) -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameMetadataEventArgs
AndroidX.Media3.ExoPlayer.Video.VideoFrameMetadataEventArgs.P0.get -> long
AndroidX.Media3.ExoPlayer.Video.VideoFrameMetadataEventArgs.P1.get -> long
AndroidX.Media3.ExoPlayer.Video.VideoFrameMetadataEventArgs.P2.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.Video.VideoFrameMetadataEventArgs.P3.get -> Android.Media.MediaFormat?
AndroidX.Media3.ExoPlayer.Video.VideoFrameMetadataEventArgs.VideoFrameMetadataEventArgs(long p0, long p1, AndroidX.Media3.Common.Format? p2, Android.Media.MediaFormat? p3) -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameProcessingOffsetEventArgs
AndroidX.Media3.ExoPlayer.Video.VideoFrameProcessingOffsetEventArgs.FrameCount.get -> int
AndroidX.Media3.ExoPlayer.Video.VideoFrameProcessingOffsetEventArgs.TotalProcessingOffsetUs.get -> long
AndroidX.Media3.ExoPlayer.Video.VideoFrameProcessingOffsetEventArgs.VideoFrameProcessingOffsetEventArgs(long totalProcessingOffsetUs, int frameCount) -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.AllowReleaseFirstFrameBeforeStarted() -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.FrameReleaseInfo
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.FrameReleaseInfo.FrameReleaseInfo() -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.FrameReleaseInfo.FrameReleaseInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.GetFrameReleaseAction(long presentationTimeUs, long positionUs, long elapsedRealtimeUs, long outputStreamStartPositionUs, bool isDecodeOnlyFrame, bool isLastFrame, AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.FrameReleaseInfo? frameReleaseInfo) -> int
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.IFrameReleaseAction
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.IFrameTimingEvaluator
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.IFrameTimingEvaluator.ShouldDropFrame(long p0, long p1, bool p2) -> bool
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.IFrameTimingEvaluator.ShouldForceReleaseFrame(long p0, long p1) -> bool
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.IFrameTimingEvaluator.ShouldIgnoreFrame(long p0, long p1, long p2, bool p3, bool p4) -> bool
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.IsReady(bool rendererOtherwiseReady) -> bool
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.Join(bool renderNextFrameImmediately) -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.OnDisabled() -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.OnEnabled(bool releaseFirstFrameBeforeStarted) -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.OnFrameReleasedIsFirstFrame() -> bool
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.OnProcessedStreamChange() -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.OnStarted() -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.OnStopped() -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.Reset() -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.SetChangeFrameRateStrategy(int changeFrameRateStrategy) -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.SetClock(AndroidX.Media3.Common.Util.IClock? clock) -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.SetFrameRate(float frameRate) -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.SetOutputSurface(Android.Views.Surface? outputSurface) -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.SetPlaybackSpeed(float speed) -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.VideoFrameReleaseControl(Android.Content.Context? applicationContext, AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.IFrameTimingEvaluator? frameTimingEvaluator, long allowedJoiningTimeMs) -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseHelper
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseHelper.AdjustReleaseTime(long releaseTimeNs) -> long
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseHelper.OnFormatChanged(float formatFrameRate) -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseHelper.OnNextFrame(long framePresentationTimeUs) -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseHelper.OnPlaybackSpeed(float playbackSpeed) -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseHelper.OnPositionReset() -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseHelper.OnStarted() -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseHelper.OnStopped() -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseHelper.OnSurfaceChanged(Android.Views.Surface? surface) -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseHelper.SetChangeFrameRateStrategy(int changeFrameRateStrategy) -> void
AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseHelper.VideoFrameReleaseHelper(Android.Content.Context? context) -> void
AndroidX.Media3.ExoPlayer.Video.VideoInputFormatChangedEventArgs
AndroidX.Media3.ExoPlayer.Video.VideoInputFormatChangedEventArgs.DecoderReuseEvaluation.get -> AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation?
AndroidX.Media3.ExoPlayer.Video.VideoInputFormatChangedEventArgs.Format.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.Video.VideoInputFormatChangedEventArgs.VideoInputFormatChangedEventArgs(AndroidX.Media3.Common.Format? format, AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation? decoderReuseEvaluation) -> void
AndroidX.Media3.ExoPlayer.Video.VideoRendererEventListenerEventDispatcher
AndroidX.Media3.ExoPlayer.Video.VideoRendererEventListenerEventDispatcher.DecoderInitialized(string? decoderName, long initializedTimestampMs, long initializationDurationMs) -> void
AndroidX.Media3.ExoPlayer.Video.VideoRendererEventListenerEventDispatcher.DecoderReleased(string? decoderName) -> void
AndroidX.Media3.ExoPlayer.Video.VideoRendererEventListenerEventDispatcher.Disabled(AndroidX.Media3.ExoPlayer.DecoderCounters? counters) -> void
AndroidX.Media3.ExoPlayer.Video.VideoRendererEventListenerEventDispatcher.DroppedFrames(int droppedFrameCount, long elapsedMs) -> void
AndroidX.Media3.ExoPlayer.Video.VideoRendererEventListenerEventDispatcher.Enabled(AndroidX.Media3.ExoPlayer.DecoderCounters? decoderCounters) -> void
AndroidX.Media3.ExoPlayer.Video.VideoRendererEventListenerEventDispatcher.InputFormatChanged(AndroidX.Media3.Common.Format? format, AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation? decoderReuseEvaluation) -> void
AndroidX.Media3.ExoPlayer.Video.VideoRendererEventListenerEventDispatcher.RenderedFirstFrame(Java.Lang.Object? output) -> void
AndroidX.Media3.ExoPlayer.Video.VideoRendererEventListenerEventDispatcher.ReportVideoFrameProcessingOffset(long totalProcessingOffsetUs, int frameCount) -> void
AndroidX.Media3.ExoPlayer.Video.VideoRendererEventListenerEventDispatcher.VideoCodecError(Java.Lang.Exception? videoCodecError) -> void
AndroidX.Media3.ExoPlayer.Video.VideoRendererEventListenerEventDispatcher.VideoRendererEventListenerEventDispatcher(Android.OS.Handler? handler, AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener? listener) -> void
AndroidX.Media3.ExoPlayer.Video.VideoRendererEventListenerEventDispatcher.VideoSizeChanged(AndroidX.Media3.Common.VideoSize? videoSize) -> void
AndroidX.Media3.ExoPlayer.Video.VideoSinkVideoSinkException
AndroidX.Media3.ExoPlayer.Video.VideoSinkVideoSinkException.Format.get -> AndroidX.Media3.Common.Format?
AndroidX.Media3.ExoPlayer.Video.VideoSinkVideoSinkException.Format.set -> void
AndroidX.Media3.ExoPlayer.Video.VideoSinkVideoSinkException.VideoSinkVideoSinkException(Java.Lang.Throwable? cause, AndroidX.Media3.Common.Format? format) -> void
AndroidX.Media3.ExoPlayer.Video.VideoSizeChangedEventArgs
AndroidX.Media3.ExoPlayer.Video.VideoSizeChangedEventArgs.P0.get -> AndroidX.Media3.ExoPlayer.Video.IVideoSink?
AndroidX.Media3.ExoPlayer.Video.VideoSizeChangedEventArgs.P1.get -> AndroidX.Media3.Common.VideoSize?
AndroidX.Media3.ExoPlayer.Video.VideoSizeChangedEventArgs.VideoSize.get -> AndroidX.Media3.Common.VideoSize?
AndroidX.Media3.ExoPlayer.Video.VideoSizeChangedEventArgs.VideoSizeChangedEventArgs(AndroidX.Media3.Common.VideoSize? videoSize) -> void
AndroidX.Media3.ExoPlayer.Video.VideoSizeChangedEventArgs.VideoSizeChangedEventArgs(AndroidX.Media3.ExoPlayer.Video.IVideoSink? p0, AndroidX.Media3.Common.VideoSize? p1) -> void
abstract AndroidX.Media3.ExoPlayer.AbstractConcatenatedTimeline.GetChildIndexByChildUid(Java.Lang.Object? p0) -> int
abstract AndroidX.Media3.ExoPlayer.AbstractConcatenatedTimeline.GetChildIndexByPeriodIndex(int p0) -> int
abstract AndroidX.Media3.ExoPlayer.AbstractConcatenatedTimeline.GetChildIndexByWindowIndex(int p0) -> int
abstract AndroidX.Media3.ExoPlayer.AbstractConcatenatedTimeline.GetChildUidByChildIndex(int p0) -> Java.Lang.Object?
abstract AndroidX.Media3.ExoPlayer.AbstractConcatenatedTimeline.GetFirstPeriodIndexByChildIndex(int p0) -> int
abstract AndroidX.Media3.ExoPlayer.AbstractConcatenatedTimeline.GetFirstWindowIndexByChildIndex(int p0) -> int
abstract AndroidX.Media3.ExoPlayer.AbstractConcatenatedTimeline.GetTimelineByChildIndex(int p0) -> AndroidX.Media3.Common.Timeline?
abstract AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.CreateDecoder(AndroidX.Media3.Common.Format? p0, AndroidX.Media3.Decoder.ICryptoConfig? p1) -> Java.Lang.Object?
abstract AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.GetOutputFormat(Java.Lang.Object? p0) -> AndroidX.Media3.Common.Format?
abstract AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.SupportsFormatInternal(AndroidX.Media3.Common.Format? p0) -> int
abstract AndroidX.Media3.ExoPlayer.BaseRenderer.IsEnded.get -> bool
abstract AndroidX.Media3.ExoPlayer.BaseRenderer.IsReady.get -> bool
abstract AndroidX.Media3.ExoPlayer.BaseRenderer.Name.get -> string?
abstract AndroidX.Media3.ExoPlayer.BaseRenderer.NameRendererCapabilities.get -> string?
abstract AndroidX.Media3.ExoPlayer.BaseRenderer.Render(long p0, long p1) -> void
abstract AndroidX.Media3.ExoPlayer.BaseRenderer.SupportsFormat(AndroidX.Media3.Common.Format? p0) -> int
abstract AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.GetDecoderInfos(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? p0, AndroidX.Media3.Common.Format? p1, bool p2) -> System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo!>?
abstract AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.GetMediaCodecConfiguration(AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo? p0, AndroidX.Media3.Common.Format? p1, Android.Media.MediaCrypto? p2, float p3) -> AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration?
abstract AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.ProcessOutputBuffer(long p0, long p1, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter? p2, Java.Nio.ByteBuffer? p3, int p4, int p5, int p6, long p7, bool p8, bool p9, AndroidX.Media3.Common.Format? p10) -> bool
abstract AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.SupportsFormat(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? p0, AndroidX.Media3.Common.Format? p1) -> int
abstract AndroidX.Media3.ExoPlayer.NoSampleRenderer.Name.get -> string?
abstract AndroidX.Media3.ExoPlayer.NoSampleRenderer.NameRendererCapabilities.get -> string?
abstract AndroidX.Media3.ExoPlayer.NoSampleRenderer.Render(long p0, long p1) -> void
abstract AndroidX.Media3.ExoPlayer.Offline.DownloadService.DownloadManager.get -> AndroidX.Media3.ExoPlayer.Offline.DownloadManager?
abstract AndroidX.Media3.ExoPlayer.Offline.DownloadService.GetForegroundNotification(System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Offline.Download!>? p0, int p1) -> Android.App.Notification?
abstract AndroidX.Media3.ExoPlayer.Offline.DownloadService.Scheduler.get -> AndroidX.Media3.ExoPlayer.Scheduler.IScheduler?
abstract AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.GetSegments(AndroidX.Media3.DataSource.IDataSource? p0, Java.Lang.Object? p1, bool p2) -> System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.Segment!>?
abstract AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.CreatePeriod(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? p0, AndroidX.Media3.ExoPlayer.Upstream.IAllocator? p1, long p2) -> AndroidX.Media3.ExoPlayer.Source.IMediaPeriod?
abstract AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.MaybeThrowSourceInfoRefreshError() -> void
abstract AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.MediaItem.get -> AndroidX.Media3.Common.MediaItem?
abstract AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.PrepareSourceInternal(AndroidX.Media3.DataSource.ITransferListener? p0) -> void
abstract AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.ReleasePeriod(AndroidX.Media3.ExoPlayer.Source.IMediaPeriod? p0) -> void
abstract AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.ReleaseSourceInternal() -> void
abstract AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkIterator.ChunkEndTimeUs.get -> long
abstract AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkIterator.ChunkStartTimeUs.get -> long
abstract AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkIterator.DataSpec.get -> AndroidX.Media3.DataSource.DataSpec?
abstract AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.CancelLoad() -> void
abstract AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.Load() -> void
abstract AndroidX.Media3.ExoPlayer.Source.Chunk.DataChunk.Consume(byte[]? p0, int p1) -> void
abstract AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk.IsLoadCompleted.get -> bool
abstract AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.BuilderBase.Build() -> AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager?
abstract AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.ClearSourceInternal(AndroidX.Media3.ExoPlayer.Source.IMediaSource? p0) -> void
abstract AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.PreloadSourceInternal(AndroidX.Media3.ExoPlayer.Source.IMediaSource? p0, long p1) -> void
abstract AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.ReleaseSourceInternal(AndroidX.Media3.ExoPlayer.Source.IMediaSource? p0) -> void
abstract AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.SelectedIndex.get -> int
abstract AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.SelectionData.get -> Java.Lang.Object?
abstract AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.SelectionReason.get -> int
abstract AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.UpdateSelectedTrack(long p0, long p1, long p2, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk!>? p3, AndroidX.Media3.ExoPlayer.Source.Chunk.IMediaChunkIterator![]? p4) -> void
abstract AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.SelectTracks(AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo? p0, int[]![]![]? p1, int[]? p2, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? p3, AndroidX.Media3.Common.Timeline? p4) -> Android.Util.Pair?
abstract AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.OnSelectionActivated(Java.Lang.Object? p0) -> void
abstract AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.SelectTracks(AndroidX.Media3.ExoPlayer.IRendererCapabilities![]? p0, AndroidX.Media3.ExoPlayer.Source.TrackGroupArray? p1, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? p2, AndroidX.Media3.Common.Timeline? p3) -> AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectorResult?
abstract AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.CreateDecoder(AndroidX.Media3.Common.Format? p0, AndroidX.Media3.Decoder.ICryptoConfig? p1) -> AndroidX.Media3.Decoder.IDecoder?
abstract AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.RenderOutputBufferToSurface(AndroidX.Media3.Decoder.VideoDecoderOutputBuffer? p0, Android.Views.Surface? p1) -> void
abstract AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.SetDecoderOutputMode(int p0) -> void
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioAttributesChanged = 20 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioCodecError = 1029 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioDecoderInitialized = 1008 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioDecoderReleased = 1012 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioDisabled = 1013 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioEnabled = 1007 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioInputFormatChanged = 1009 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioPositionAdvancing = 1010 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioSessionId = 21 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioSinkError = 1014 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioTrackInitialized = 1031 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioTrackReleased = 1032 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventAudioUnderrun = 1011 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventAvailableCommandsChanged = 13 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventBandwidthEstimate = 1006 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventCues = 27 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventDeviceInfoChanged = 29 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventDeviceVolumeChanged = 30 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventDownstreamFormatChanged = 1004 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventDrmKeysLoaded = 1023 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventDrmKeysRemoved = 1026 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventDrmKeysRestored = 1025 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventDrmSessionAcquired = 1022 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventDrmSessionManagerError = 1024 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventDrmSessionReleased = 1027 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventDroppedVideoFrames = 1018 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventIsLoadingChanged = 3 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventIsPlayingChanged = 7 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventLoadCanceled = 1002 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventLoadCompleted = 1001 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventLoadError = 1003 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventLoadStarted = 1000 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventMaxSeekToPreviousPositionChanged = 18 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventMediaItemTransition = 1 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventMediaMetadataChanged = 14 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventMetadata = 28 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventPlayWhenReadyChanged = 5 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventPlaybackParametersChanged = 12 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventPlaybackStateChanged = 4 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventPlaybackSuppressionReasonChanged = 6 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventPlayerError = 10 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventPlayerReleased = 1028 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventPlaylistMetadataChanged = 15 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventPositionDiscontinuity = 11 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventRenderedFirstFrame = 26 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventRendererReadyChanged = 1033 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventRepeatModeChanged = 8 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventSeekBackIncrementChanged = 16 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventSeekForwardIncrementChanged = 17 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventShuffleModeEnabledChanged = 9 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventSkipSilenceEnabledChanged = 23 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventSurfaceSizeChanged = 24 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventTimelineChanged = 0 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventTrackSelectionParametersChanged = 19 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventTracksChanged = 2 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventUpstreamDiscarded = 1005 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventVideoCodecError = 1030 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventVideoDecoderInitialized = 1016 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventVideoDecoderReleased = 1019 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventVideoDisabled = 1020 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventVideoEnabled = 1015 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventVideoFrameProcessingOffset = 1021 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventVideoInputFormatChanged = 1017 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventVideoSizeChanged = 25 -> int
const AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.InterfaceConsts.EventVolumeChanged = 22 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.PlaybackStateAbandoned = 15 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.PlaybackStateBuffering = 6 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.PlaybackStateEnded = 11 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.PlaybackStateFailed = 13 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.PlaybackStateInterruptedByAd = 14 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.PlaybackStateJoiningBackground = 1 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.PlaybackStateJoiningForeground = 2 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.PlaybackStateNotStarted = 0 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.PlaybackStatePaused = 4 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.PlaybackStatePausedBuffering = 7 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.PlaybackStatePlaying = 3 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.PlaybackStateSeeking = 5 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.PlaybackStateStopped = 12 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.PlaybackStateSuppressed = 9 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.PlaybackStateSuppressedBuffering = 10 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioAttributesChanged = 20 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioCodecError = 1029 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioDecoderInitialized = 1008 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioDecoderReleased = 1012 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioDisabled = 1013 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioEnabled = 1007 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioInputFormatChanged = 1009 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioPositionAdvancing = 1010 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioSessionId = 21 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioSinkError = 1014 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioTrackInitialized = 1031 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioTrackReleased = 1032 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventAudioUnderrun = 1011 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventAvailableCommandsChanged = 13 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventBandwidthEstimate = 1006 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventCues = 27 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventDeviceInfoChanged = 29 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventDeviceVolumeChanged = 30 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventDownstreamFormatChanged = 1004 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventDrmKeysLoaded = 1023 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventDrmKeysRemoved = 1026 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventDrmKeysRestored = 1025 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventDrmSessionAcquired = 1022 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventDrmSessionManagerError = 1024 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventDrmSessionReleased = 1027 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventDroppedVideoFrames = 1018 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventIsLoadingChanged = 3 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventIsPlayingChanged = 7 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventLoadCanceled = 1002 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventLoadCompleted = 1001 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventLoadError = 1003 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventLoadStarted = 1000 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventMaxSeekToPreviousPositionChanged = 18 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventMediaItemTransition = 1 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventMediaMetadataChanged = 14 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventMetadata = 28 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventPlayWhenReadyChanged = 5 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventPlaybackParametersChanged = 12 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventPlaybackStateChanged = 4 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventPlaybackSuppressionReasonChanged = 6 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventPlayerError = 10 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventPlayerReleased = 1028 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventPlaylistMetadataChanged = 15 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventPositionDiscontinuity = 11 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventRenderedFirstFrame = 26 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventRendererReadyChanged = 1033 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventRepeatModeChanged = 8 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventSeekBackIncrementChanged = 16 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventSeekForwardIncrementChanged = 17 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventShuffleModeEnabledChanged = 9 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventSkipSilenceEnabledChanged = 23 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventSurfaceSizeChanged = 24 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventTimelineChanged = 0 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventTrackSelectionParametersChanged = 19 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventTracksChanged = 2 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventUpstreamDiscarded = 1005 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventVideoCodecError = 1030 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventVideoDecoderInitialized = 1016 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventVideoDecoderReleased = 1019 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventVideoDisabled = 1020 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventVideoEnabled = 1015 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventVideoFrameProcessingOffset = 1021 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventVideoInputFormatChanged = 1017 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventVideoSizeChanged = 25 -> int
const AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.InterfaceConsts.EventVolumeChanged = 22 -> int
const AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.DefaultPlaybackSpeed = 1 -> float
const AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.InterfaceConsts.CurrentPositionNotSet = -9223372036854775808 -> long
const AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.InterfaceConsts.OffloadModeDisabled = 0 -> int
const AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.InterfaceConsts.OffloadModeEnabledGaplessNotRequired = 2 -> int
const AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.InterfaceConsts.OffloadModeEnabledGaplessRequired = 1 -> int
const AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.InterfaceConsts.SinkFormatSupportedDirectly = 2 -> int
const AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.InterfaceConsts.SinkFormatSupportedWithTranscoding = 1 -> int
const AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.InterfaceConsts.SinkFormatUnsupported = 0 -> int
const AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.MaxPitch = 8 -> float
const AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.MaxPlaybackSpeed = 8 -> float
const AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.MinPitch = 0.1 -> float
const AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.MinPlaybackSpeed = 0.1 -> float
const AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.OutputModeOffload = 1 -> int
const AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.OutputModePassthrough = 2 -> int
const AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.OutputModePcm = 0 -> int
const AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.InterfaceConsts.CurrentPositionNotSet = -9223372036854775808 -> long
const AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.InterfaceConsts.OffloadModeDisabled = 0 -> int
const AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.InterfaceConsts.OffloadModeEnabledGaplessNotRequired = 2 -> int
const AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.InterfaceConsts.OffloadModeEnabledGaplessRequired = 1 -> int
const AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.InterfaceConsts.SinkFormatSupportedDirectly = 2 -> int
const AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.InterfaceConsts.SinkFormatSupportedWithTranscoding = 1 -> int
const AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.InterfaceConsts.SinkFormatUnsupported = 0 -> int
const AndroidX.Media3.ExoPlayer.Audio.SilenceSkippingAudioProcessor.DefaultMaxSilenceToKeepDurationUs = 2000000 -> long
const AndroidX.Media3.ExoPlayer.Audio.SilenceSkippingAudioProcessor.DefaultMinVolumeToKeepPercentage = 10 -> int
const AndroidX.Media3.ExoPlayer.Audio.SilenceSkippingAudioProcessor.DefaultMinimumSilenceDurationUs = 100000 -> long
const AndroidX.Media3.ExoPlayer.Audio.SilenceSkippingAudioProcessor.DefaultPaddingSilenceUs = 20000 -> long
const AndroidX.Media3.ExoPlayer.Audio.SilenceSkippingAudioProcessor.DefaultSilenceRetentionRatio = 0.2 -> float
const AndroidX.Media3.ExoPlayer.Audio.SilenceSkippingAudioProcessor.DefaultSilenceThresholdLevel = 1024 -> short
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.AdaptiveNotSeamless = 8 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.AdaptiveNotSupported = 0 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.AdaptiveSeamless = 16 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.AdaptiveSupportMask = 24 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.AudioOffloadGaplessSupported = 1024 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.AudioOffloadNotSupported = 0 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.AudioOffloadSpeedChangeSupported = 2048 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.AudioOffloadSupportMask = 3584 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.AudioOffloadSupported = 512 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.DecoderSupportFallback = 0 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.DecoderSupportFallbackMimetype = 256 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.DecoderSupportMask = 384 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.DecoderSupportPrimary = 128 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.DefaultDurationToProgressUs = 10000 -> long
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.FormatSupportMask = 7 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.HardwareAccelerationNotSupported = 0 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.HardwareAccelerationSupportMask = 64 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.HardwareAccelerationSupported = 64 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.MsgCustomBase = 10000 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.MsgSetAudioAttributes = 3 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.MsgSetAudioSessionId = 10 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.MsgSetAuxEffectInfo = 6 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.MsgSetCameraMotionListener = 8 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.MsgSetChangeFrameRateStrategy = 5 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.MsgSetImageOutput = 15 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.MsgSetPreferredAudioDevice = 12 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.MsgSetPriority = 16 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.MsgSetScalingMode = 4 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.MsgSetSkipSilenceEnabled = 9 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.MsgSetVideoEffects = 13 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.MsgSetVideoFrameMetadataListener = 7 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.MsgSetVideoOutput = 1 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.MsgSetVideoOutputResolution = 14 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.MsgSetVolume = 2 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.MsgSetWakeupListener = 11 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.MsgTransferResources = 17 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.StateDisabled = 0 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.StateEnabled = 1 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.StateStarted = 2 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.TunnelingNotSupported = 0 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.TunnelingSupportMask = 32 -> int
const AndroidX.Media3.ExoPlayer.BaseRenderer.InterfaceConsts.TunnelingSupported = 32 -> int
const AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.DiscardReasonAppOverride = 4 -> int
const AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.DiscardReasonAudioBypassPossible = 32768 -> int
const AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.DiscardReasonAudioChannelCountChanged = 4096 -> int
const AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.DiscardReasonAudioEncodingChanged = 16384 -> int
const AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.DiscardReasonAudioSampleRateChanged = 8192 -> int
const AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.DiscardReasonDrmSessionChanged = 128 -> int
const AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.DiscardReasonInitializationDataChanged = 32 -> int
const AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.DiscardReasonMaxInputSizeExceeded = 64 -> int
const AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.DiscardReasonMimeTypeChanged = 8 -> int
const AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.DiscardReasonOperatingRateChanged = 16 -> int
const AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.DiscardReasonReuseNotImplemented = 1 -> int
const AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.DiscardReasonVideoColorInfoChanged = 2048 -> int
const AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.DiscardReasonVideoMaxResolutionExceeded = 256 -> int
const AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.DiscardReasonVideoResolutionChanged = 512 -> int
const AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.DiscardReasonVideoRotationChanged = 1024 -> int
const AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.DiscardReasonWorkaround = 2 -> int
const AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.ReuseResultNo = 0 -> int
const AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.ReuseResultYesWithFlush = 1 -> int
const AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.ReuseResultYesWithReconfiguration = 2 -> int
const AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.ReuseResultYesWithoutReconfiguration = 3 -> int
const AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.DefaultFallbackMaxPlaybackSpeed = 1.03 -> float
const AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.DefaultFallbackMinPlaybackSpeed = 0.97 -> float
const AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.DefaultMaxLiveOffsetErrorMsForUnitSpeed = 20 -> long
const AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.DefaultMinPossibleLiveOffsetSmoothingFactor = 0.999 -> float
const AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.DefaultMinUpdateIntervalMs = 1000 -> long
const AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.DefaultProportionalControlFactor = 0.1 -> float
const AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.DefaultTargetLiveOffsetIncrementOnRebufferMs = 500 -> long
const AndroidX.Media3.ExoPlayer.DefaultLoadControl.DefaultAudioBufferSize = 13107200 -> int
const AndroidX.Media3.ExoPlayer.DefaultLoadControl.DefaultBackBufferDurationMs = 0 -> int
const AndroidX.Media3.ExoPlayer.DefaultLoadControl.DefaultBufferForPlaybackAfterRebufferMs = 2000 -> int
const AndroidX.Media3.ExoPlayer.DefaultLoadControl.DefaultBufferForPlaybackMs = 1000 -> int
const AndroidX.Media3.ExoPlayer.DefaultLoadControl.DefaultCameraMotionBufferSize = 131072 -> int
const AndroidX.Media3.ExoPlayer.DefaultLoadControl.DefaultImageBufferSize = 131072 -> int
const AndroidX.Media3.ExoPlayer.DefaultLoadControl.DefaultMaxBufferMs = 50000 -> int
const AndroidX.Media3.ExoPlayer.DefaultLoadControl.DefaultMetadataBufferSize = 131072 -> int
const AndroidX.Media3.ExoPlayer.DefaultLoadControl.DefaultMinBufferMs = 50000 -> int
const AndroidX.Media3.ExoPlayer.DefaultLoadControl.DefaultMinBufferSize = 13107200 -> int
const AndroidX.Media3.ExoPlayer.DefaultLoadControl.DefaultMuxedBufferSize = 144310272 -> int
const AndroidX.Media3.ExoPlayer.DefaultLoadControl.DefaultPrioritizeTimeOverSizeThresholds = false -> bool
const AndroidX.Media3.ExoPlayer.DefaultLoadControl.DefaultRetainBackBufferFromKeyframe = false -> bool
const AndroidX.Media3.ExoPlayer.DefaultLoadControl.DefaultTargetBufferBytes = -1 -> int
const AndroidX.Media3.ExoPlayer.DefaultLoadControl.DefaultTextBufferSize = 131072 -> int
const AndroidX.Media3.ExoPlayer.DefaultLoadControl.DefaultVideoBufferSize = 131072000 -> int
const AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.DefaultAllowedVideoJoiningTimeMs = 5000 -> long
const AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.ExtensionRendererModeOff = 0 -> int
const AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.ExtensionRendererModeOn = 1 -> int
const AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.ExtensionRendererModePrefer = 2 -> int
const AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.MaxDroppedVideoFrameCountToNotify = 50 -> int
const AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.DefaultSessionKeepaliveMs = 300000 -> long
const AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.InitialDrmRequestRetryCount = 3 -> int
const AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.ModeDownload = 2 -> int
const AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.ModePlayback = 0 -> int
const AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.ModeQuery = 1 -> int
const AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.ModeRelease = 3 -> int
const AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.PlayreadyCustomDataKey = "PRCustomData" -> string!
const AndroidX.Media3.ExoPlayer.Drm.DrmUtil.ErrorSourceExoMediaDrm = 1 -> int
const AndroidX.Media3.ExoPlayer.Drm.DrmUtil.ErrorSourceLicenseAcquisition = 2 -> int
const AndroidX.Media3.ExoPlayer.Drm.DrmUtil.ErrorSourceProvisioning = 3 -> int
const AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.InterfaceConsts.EventKeyExpired = 3 -> int
const AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.InterfaceConsts.EventKeyRequired = 2 -> int
const AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.InterfaceConsts.EventProvisionRequired = 1 -> int
const AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.InterfaceConsts.KeyTypeOffline = 2 -> int
const AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.InterfaceConsts.KeyTypeRelease = 3 -> int
const AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.InterfaceConsts.KeyTypeStreaming = 1 -> int
const AndroidX.Media3.ExoPlayer.Drm.ErrorStateDrmSession.InterfaceConsts.StateError = 1 -> int
const AndroidX.Media3.ExoPlayer.Drm.ErrorStateDrmSession.InterfaceConsts.StateOpened = 3 -> int
const AndroidX.Media3.ExoPlayer.Drm.ErrorStateDrmSession.InterfaceConsts.StateOpenedWithKeys = 4 -> int
const AndroidX.Media3.ExoPlayer.Drm.ErrorStateDrmSession.InterfaceConsts.StateOpening = 2 -> int
const AndroidX.Media3.ExoPlayer.Drm.ErrorStateDrmSession.InterfaceConsts.StateReleased = 0 -> int
const AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyRequest.RequestTypeInitial = 0 -> int
const AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyRequest.RequestTypeNone = 3 -> int
const AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyRequest.RequestTypeRelease = 2 -> int
const AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyRequest.RequestTypeRenewal = 1 -> int
const AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyRequest.RequestTypeUnknown = -2147483648 -> int
const AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyRequest.RequestTypeUpdate = 4 -> int
const AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.InterfaceConsts.EventKeyExpired = 3 -> int
const AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.InterfaceConsts.EventKeyRequired = 2 -> int
const AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.InterfaceConsts.EventProvisionRequired = 1 -> int
const AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.InterfaceConsts.KeyTypeOffline = 2 -> int
const AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.InterfaceConsts.KeyTypeRelease = 3 -> int
const AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.InterfaceConsts.KeyTypeStreaming = 1 -> int
const AndroidX.Media3.ExoPlayer.Drm.UnsupportedDrmException.ReasonInstantiationError = 2 -> int
const AndroidX.Media3.ExoPlayer.Drm.UnsupportedDrmException.ReasonUnsupportedScheme = 1 -> int
const AndroidX.Media3.ExoPlayer.Drm.WidevineUtil.PropertyLicenseDurationRemaining = "LicenseDurationRemaining" -> string!
const AndroidX.Media3.ExoPlayer.Drm.WidevineUtil.PropertyPlaybackDurationRemaining = "PlaybackDurationRemaining" -> string!
const AndroidX.Media3.ExoPlayer.ExoPlaybackException.TypeRemote = 3 -> int
const AndroidX.Media3.ExoPlayer.ExoPlaybackException.TypeRenderer = 1 -> int
const AndroidX.Media3.ExoPlayer.ExoPlaybackException.TypeSource = 0 -> int
const AndroidX.Media3.ExoPlayer.ExoPlaybackException.TypeUnexpected = 2 -> int
const AndroidX.Media3.ExoPlayer.ExoTimeoutException.TimeoutOperationDetachSurface = 3 -> int
const AndroidX.Media3.ExoPlayer.ExoTimeoutException.TimeoutOperationRelease = 1 -> int
const AndroidX.Media3.ExoPlayer.ExoTimeoutException.TimeoutOperationSetForegroundMode = 2 -> int
const AndroidX.Media3.ExoPlayer.ExoTimeoutException.TimeoutOperationUndefined = 0 -> int
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.DefaultDurationToProgressUs = 10000 -> long
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.MsgCustomBase = 10000 -> int
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.MsgSetAudioAttributes = 3 -> int
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.MsgSetAudioSessionId = 10 -> int
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.MsgSetAuxEffectInfo = 6 -> int
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.MsgSetCameraMotionListener = 8 -> int
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.MsgSetChangeFrameRateStrategy = 5 -> int
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.MsgSetImageOutput = 15 -> int
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.MsgSetPreferredAudioDevice = 12 -> int
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.MsgSetPriority = 16 -> int
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.MsgSetScalingMode = 4 -> int
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.MsgSetSkipSilenceEnabled = 9 -> int
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.MsgSetVideoEffects = 13 -> int
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.MsgSetVideoFrameMetadataListener = 7 -> int
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.MsgSetVideoOutput = 1 -> int
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.MsgSetVideoOutputResolution = 14 -> int
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.MsgSetVolume = 2 -> int
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.MsgSetWakeupListener = 11 -> int
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.MsgTransferResources = 17 -> int
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.StateDisabled = 0 -> int
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.StateEnabled = 1 -> int
const AndroidX.Media3.ExoPlayer.ForwardingRenderer.InterfaceConsts.StateStarted = 2 -> int
const AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.MaxSupportedInstancesUnknown = -1 -> int
const AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.Tag = "MediaCodecInfo" -> string!
const AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.CodecOperatingRateUnset = -1 -> float
const AndroidX.Media3.ExoPlayer.MediaExtractorCompat.SeekToClosestSync = 2 -> int
const AndroidX.Media3.ExoPlayer.MediaExtractorCompat.SeekToNextSync = 1 -> int
const AndroidX.Media3.ExoPlayer.MediaExtractorCompat.SeekToPreviousSync = 0 -> int
const AndroidX.Media3.ExoPlayer.MetadataRetriever.DefaultMaximumParallelRetrievals = 5 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.AdaptiveNotSeamless = 8 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.AdaptiveNotSupported = 0 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.AdaptiveSeamless = 16 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.AdaptiveSupportMask = 24 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.AudioOffloadGaplessSupported = 1024 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.AudioOffloadNotSupported = 0 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.AudioOffloadSpeedChangeSupported = 2048 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.AudioOffloadSupportMask = 3584 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.AudioOffloadSupported = 512 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.DecoderSupportFallback = 0 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.DecoderSupportFallbackMimetype = 256 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.DecoderSupportMask = 384 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.DecoderSupportPrimary = 128 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.DefaultDurationToProgressUs = 10000 -> long
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.FormatSupportMask = 7 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.HardwareAccelerationNotSupported = 0 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.HardwareAccelerationSupportMask = 64 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.HardwareAccelerationSupported = 64 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.MsgCustomBase = 10000 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.MsgSetAudioAttributes = 3 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.MsgSetAudioSessionId = 10 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.MsgSetAuxEffectInfo = 6 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.MsgSetCameraMotionListener = 8 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.MsgSetChangeFrameRateStrategy = 5 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.MsgSetImageOutput = 15 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.MsgSetPreferredAudioDevice = 12 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.MsgSetPriority = 16 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.MsgSetScalingMode = 4 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.MsgSetSkipSilenceEnabled = 9 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.MsgSetVideoEffects = 13 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.MsgSetVideoFrameMetadataListener = 7 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.MsgSetVideoOutput = 1 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.MsgSetVideoOutputResolution = 14 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.MsgSetVolume = 2 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.MsgSetWakeupListener = 11 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.MsgTransferResources = 17 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.StateDisabled = 0 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.StateEnabled = 1 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.StateStarted = 2 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.TunnelingNotSupported = 0 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.TunnelingSupportMask = 32 -> int
const AndroidX.Media3.ExoPlayer.NoSampleRenderer.InterfaceConsts.TunnelingSupported = 32 -> int
const AndroidX.Media3.ExoPlayer.Offline.Download.FailureReasonNone = 0 -> int
const AndroidX.Media3.ExoPlayer.Offline.Download.FailureReasonUnknown = 1 -> int
const AndroidX.Media3.ExoPlayer.Offline.Download.StateCompleted = 3 -> int
const AndroidX.Media3.ExoPlayer.Offline.Download.StateDownloading = 2 -> int
const AndroidX.Media3.ExoPlayer.Offline.Download.StateFailed = 4 -> int
const AndroidX.Media3.ExoPlayer.Offline.Download.StateQueued = 0 -> int
const AndroidX.Media3.ExoPlayer.Offline.Download.StateRemoving = 5 -> int
const AndroidX.Media3.ExoPlayer.Offline.Download.StateRestarting = 7 -> int
const AndroidX.Media3.ExoPlayer.Offline.Download.StateStopped = 1 -> int
const AndroidX.Media3.ExoPlayer.Offline.Download.StopReasonNone = 0 -> int
const AndroidX.Media3.ExoPlayer.Offline.DownloadManager.DefaultMaxParallelDownloads = 3 -> int
const AndroidX.Media3.ExoPlayer.Offline.DownloadManager.DefaultMinRetryCount = 5 -> int
const AndroidX.Media3.ExoPlayer.Offline.DownloadService.ActionAddDownload = "androidx.media3.exoplayer.downloadService.action.ADD_DOWNLOAD" -> string!
const AndroidX.Media3.ExoPlayer.Offline.DownloadService.ActionInit = "androidx.media3.exoplayer.downloadService.action.INIT" -> string!
const AndroidX.Media3.ExoPlayer.Offline.DownloadService.ActionPauseDownloads = "androidx.media3.exoplayer.downloadService.action.PAUSE_DOWNLOADS" -> string!
const AndroidX.Media3.ExoPlayer.Offline.DownloadService.ActionRemoveAllDownloads = "androidx.media3.exoplayer.downloadService.action.REMOVE_ALL_DOWNLOADS" -> string!
const AndroidX.Media3.ExoPlayer.Offline.DownloadService.ActionRemoveDownload = "androidx.media3.exoplayer.downloadService.action.REMOVE_DOWNLOAD" -> string!
const AndroidX.Media3.ExoPlayer.Offline.DownloadService.ActionResumeDownloads = "androidx.media3.exoplayer.downloadService.action.RESUME_DOWNLOADS" -> string!
const AndroidX.Media3.ExoPlayer.Offline.DownloadService.ActionSetRequirements = "androidx.media3.exoplayer.downloadService.action.SET_REQUIREMENTS" -> string!
const AndroidX.Media3.ExoPlayer.Offline.DownloadService.ActionSetStopReason = "androidx.media3.exoplayer.downloadService.action.SET_STOP_REASON" -> string!
const AndroidX.Media3.ExoPlayer.Offline.DownloadService.DefaultForegroundNotificationUpdateInterval = 1000 -> long
const AndroidX.Media3.ExoPlayer.Offline.DownloadService.ForegroundNotificationIdNone = 0 -> int
const AndroidX.Media3.ExoPlayer.Offline.DownloadService.KeyContentId = "content_id" -> string!
const AndroidX.Media3.ExoPlayer.Offline.DownloadService.KeyDownloadRequest = "download_request" -> string!
const AndroidX.Media3.ExoPlayer.Offline.DownloadService.KeyForeground = "foreground" -> string!
const AndroidX.Media3.ExoPlayer.Offline.DownloadService.KeyRequirements = "requirements" -> string!
const AndroidX.Media3.ExoPlayer.Offline.DownloadService.KeyStopReason = "stop_reason" -> string!
const AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.DefaultMaxMergedSegmentStartTimeDiffMs = 20000 -> long
const AndroidX.Media3.ExoPlayer.Scheduler.Requirements.DeviceCharging = 8 -> int
const AndroidX.Media3.ExoPlayer.Scheduler.Requirements.DeviceIdle = 4 -> int
const AndroidX.Media3.ExoPlayer.Scheduler.Requirements.DeviceStorageNotLow = 16 -> int
const AndroidX.Media3.ExoPlayer.Scheduler.Requirements.Network = 1 -> int
const AndroidX.Media3.ExoPlayer.Scheduler.Requirements.NetworkUnmetered = 2 -> int
const AndroidX.Media3.ExoPlayer.SimpleExoPlayer.InterfaceConsts.DefaultDetachSurfaceTimeoutMs = 2000 -> long
const AndroidX.Media3.ExoPlayer.SimpleExoPlayer.InterfaceConsts.DefaultReleaseTimeoutMs = 500 -> long
const AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdLoadException.TypeAd = 0 -> int
const AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdLoadException.TypeAdGroup = 1 -> int
const AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdLoadException.TypeAllAds = 2 -> int
const AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdLoadException.TypeUnexpected = 3 -> int
const AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.EmbeddedSampleStream.InterfaceConsts.FlagOmitSampleData = 4 -> int
const AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.EmbeddedSampleStream.InterfaceConsts.FlagPeek = 1 -> int
const AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.EmbeddedSampleStream.InterfaceConsts.FlagRequireFormat = 2 -> int
const AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.InterfaceConsts.FlagOmitSampleData = 4 -> int
const AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.InterfaceConsts.FlagPeek = 1 -> int
const AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.InterfaceConsts.FlagRequireFormat = 2 -> int
const AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.IllegalClippingException.ReasonInvalidPeriodCount = 0 -> int
const AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.IllegalClippingException.ReasonNotSeekableToStart = 1 -> int
const AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.IllegalClippingException.ReasonStartExceedsEnd = 2 -> int
const AndroidX.Media3.ExoPlayer.Source.EmptySampleStream.InterfaceConsts.FlagOmitSampleData = 4 -> int
const AndroidX.Media3.ExoPlayer.Source.EmptySampleStream.InterfaceConsts.FlagPeek = 1 -> int
const AndroidX.Media3.ExoPlayer.Source.EmptySampleStream.InterfaceConsts.FlagRequireFormat = 2 -> int
const AndroidX.Media3.ExoPlayer.Source.MediaParser.MediaParserUtil.ParameterEagerlyExposeTrackType = "android.media.mediaparser.eagerlyExposeTrackType" -> string!
const AndroidX.Media3.ExoPlayer.Source.MediaParser.MediaParserUtil.ParameterExposeCaptionFormats = "android.media.mediaParser.exposeCaptionFormats" -> string!
const AndroidX.Media3.ExoPlayer.Source.MediaParser.MediaParserUtil.ParameterExposeChunkIndexAsMediaFormat = "android.media.mediaParser.exposeChunkIndexAsMediaFormat" -> string!
const AndroidX.Media3.ExoPlayer.Source.MediaParser.MediaParserUtil.ParameterExposeDummySeekMap = "android.media.mediaparser.exposeDummySeekMap" -> string!
const AndroidX.Media3.ExoPlayer.Source.MediaParser.MediaParserUtil.ParameterIgnoreTimestampOffset = "android.media.mediaparser.ignoreTimestampOffset" -> string!
const AndroidX.Media3.ExoPlayer.Source.MediaParser.MediaParserUtil.ParameterInBandCryptoInfo = "android.media.mediaparser.inBandCryptoInfo" -> string!
const AndroidX.Media3.ExoPlayer.Source.MediaParser.MediaParserUtil.ParameterIncludeSupplementalData = "android.media.mediaparser.includeSupplementalData" -> string!
const AndroidX.Media3.ExoPlayer.Source.MediaParser.MediaParserUtil.ParameterOverrideInBandCaptionDeclarations = "android.media.mediaParser.overrideInBandCaptionDeclarations" -> string!
const AndroidX.Media3.ExoPlayer.Source.MergingMediaSource.IllegalMergeException.ReasonPeriodCountMismatch = 0 -> int
const AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Status.StageLoadedForDurationMs = 2 -> int
const AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Status.StageSourcePrepared = 0 -> int
const AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Status.StageTracksSelected = 1 -> int
const AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.DefaultLoadingCheckIntervalBytes = 1048576 -> int
const AndroidX.Media3.ExoPlayer.Source.SilenceMediaSource.MediaId = "SilenceMediaSource" -> string!
const AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.DefaultBandwidthFraction = 0.7 -> float
const AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.DefaultBufferedFractionToLiveEdgeForQualityIncrease = 0.75 -> float
const AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.DefaultMaxDurationForQualityDecreaseMs = 25000 -> int
const AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.DefaultMaxHeightToDiscard = 719 -> int
const AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.DefaultMaxWidthToDiscard = 1279 -> int
const AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.DefaultMinDurationForQualityIncreaseMs = 10000 -> int
const AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.DefaultMinDurationToRetainAfterDiscardMs = 25000 -> int
const AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.InterfaceConsts.TypeCustomBase = 10000 -> int
const AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.InterfaceConsts.TypeUnset = 0 -> int
const AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionEligibilityAdaptive = 2 -> int
const AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionEligibilityFixed = 1 -> int
const AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionEligibilityNo = 0 -> int
const AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo.RendererSupportExceedsCapabilitiesTracks = 2 -> int
const AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo.RendererSupportNoTracks = 0 -> int
const AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo.RendererSupportPlayableTracks = 3 -> int
const AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo.RendererSupportUnsupportedTracks = 1 -> int
const AndroidX.Media3.ExoPlayer.Upstream.CachedRegionTracker.CachedToEnd = -2 -> int
const AndroidX.Media3.ExoPlayer.Upstream.CachedRegionTracker.NotCached = -1 -> int
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.CmcdQueryParameterKey = "CMCD" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeyBitrate = "br" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeyBufferLength = "bl" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeyBufferStarvation = "bs" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeyCmcdObject = "CMCD-Object" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeyCmcdRequest = "CMCD-Request" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeyCmcdSession = "CMCD-Session" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeyCmcdStatus = "CMCD-Status" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeyContentId = "cid" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeyDeadline = "dl" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeyMaximumRequestedBitrate = "rtp" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeyMeasuredThroughput = "mtp" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeyNextObjectRequest = "nor" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeyNextRangeRequest = "nrr" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeyObjectDuration = "d" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeyObjectType = "ot" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeyPlaybackRate = "pr" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeySessionId = "sid" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeyStartup = "su" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeyStreamType = "st" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeyStreamingFormat = "sf" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeyTopBitrate = "tb" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.KeyVersion = "v" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.MaxIdLength = 64 -> int
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.ModeQueryParameter = 1 -> int
const AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.ModeRequestHeader = 0 -> int
const AndroidX.Media3.ExoPlayer.Upstream.CmcdData.ObjectTypeAudioOnly = "a" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdData.ObjectTypeInitSegment = "i" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdData.ObjectTypeManifest = "m" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdData.ObjectTypeMuxedAudioAndVideo = "av" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdData.ObjectTypeVideoOnly = "v" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdData.StreamTypeLive = "l" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdData.StreamTypeVod = "v" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdData.StreamingFormatDash = "d" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdData.StreamingFormatHls = "h" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.CmcdData.StreamingFormatSs = "s" -> string!
const AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.DefaultInitialBitrateEstimate = 1000000 -> long
const AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.DefaultSlidingWindowMaxWeight = 2000 -> int
const AndroidX.Media3.ExoPlayer.Upstream.DefaultLoadErrorHandlingPolicy.DefaultLocationExclusionMs = 300000 -> long
const AndroidX.Media3.ExoPlayer.Upstream.DefaultLoadErrorHandlingPolicy.DefaultMinLoadableRetryCount = 3 -> int
const AndroidX.Media3.ExoPlayer.Upstream.DefaultLoadErrorHandlingPolicy.DefaultMinLoadableRetryCountProgressiveLive = 6 -> int
const AndroidX.Media3.ExoPlayer.Upstream.DefaultLoadErrorHandlingPolicy.DefaultTrackBlacklistMs = 60000 -> long
const AndroidX.Media3.ExoPlayer.Upstream.DefaultLoadErrorHandlingPolicy.DefaultTrackExclusionMs = 60000 -> long
const AndroidX.Media3.ExoPlayer.Upstream.DefaultLoadErrorHandlingPolicy.InterfaceConsts.FallbackTypeLocation = 1 -> int
const AndroidX.Media3.ExoPlayer.Upstream.DefaultLoadErrorHandlingPolicy.InterfaceConsts.FallbackTypeTrack = 2 -> int
const AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.InterfaceConsts.EstimateNotAvailable = -9223372036854775808 -> long
const AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.DefaultInitialBitrateEstimate = 1000000 -> long
const AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.DefaultTimeToFirstBytePercentile = 0.5 -> float
const AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.DefaultTimeToFirstByteSamples = 20 -> int
const AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExponentialWeightedAverageStatistic.DefaultSmoothingFactor = 0.9999 -> double
const AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExponentialWeightedAverageTimeToFirstByteEstimator.DefaultSmoothingFactor = 0.85 -> double
const AndroidX.Media3.ExoPlayer.Upstream.Experimental.PercentileTimeToFirstByteEstimator.DefaultMaxSamplesCount = 10 -> int
const AndroidX.Media3.ExoPlayer.Upstream.Experimental.PercentileTimeToFirstByteEstimator.DefaultPercentile = 0.5 -> float
const AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingPercentileBandwidthStatistic.DefaultMaxSamplesCount = 10 -> int
const AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingPercentileBandwidthStatistic.DefaultPercentile = 0.5 -> double
const AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.DefaultMaxSamplesCount = 10 -> int
const AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.InterfaceConsts.EstimateNotAvailable = -9223372036854775808 -> long
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventAudioAttributesChanged = 20 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventAudioCodecError = 1029 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventAudioDecoderInitialized = 1008 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventAudioDecoderReleased = 1012 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventAudioDisabled = 1013 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventAudioEnabled = 1007 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventAudioInputFormatChanged = 1009 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventAudioPositionAdvancing = 1010 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventAudioSessionId = 21 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventAudioSinkError = 1014 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventAudioTrackInitialized = 1031 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventAudioTrackReleased = 1032 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventAudioUnderrun = 1011 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventAvailableCommandsChanged = 13 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventBandwidthEstimate = 1006 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventCues = 27 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventDeviceInfoChanged = 29 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventDeviceVolumeChanged = 30 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventDownstreamFormatChanged = 1004 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventDrmKeysLoaded = 1023 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventDrmKeysRemoved = 1026 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventDrmKeysRestored = 1025 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventDrmSessionAcquired = 1022 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventDrmSessionManagerError = 1024 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventDrmSessionReleased = 1027 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventDroppedVideoFrames = 1018 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventIsLoadingChanged = 3 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventIsPlayingChanged = 7 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventLoadCanceled = 1002 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventLoadCompleted = 1001 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventLoadError = 1003 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventLoadStarted = 1000 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventMaxSeekToPreviousPositionChanged = 18 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventMediaItemTransition = 1 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventMediaMetadataChanged = 14 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventMetadata = 28 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventPlayWhenReadyChanged = 5 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventPlaybackParametersChanged = 12 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventPlaybackStateChanged = 4 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventPlaybackSuppressionReasonChanged = 6 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventPlayerError = 10 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventPlayerReleased = 1028 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventPlaylistMetadataChanged = 15 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventPositionDiscontinuity = 11 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventRenderedFirstFrame = 26 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventRendererReadyChanged = 1033 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventRepeatModeChanged = 8 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventSeekBackIncrementChanged = 16 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventSeekForwardIncrementChanged = 17 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventShuffleModeEnabledChanged = 9 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventSkipSilenceEnabledChanged = 23 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventSurfaceSizeChanged = 24 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventTimelineChanged = 0 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventTrackSelectionParametersChanged = 19 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventTracksChanged = 2 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventUpstreamDiscarded = 1005 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventVideoCodecError = 1030 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventVideoDecoderInitialized = 1016 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventVideoDecoderReleased = 1019 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventVideoDisabled = 1020 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventVideoEnabled = 1015 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventVideoFrameProcessingOffset = 1021 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventVideoInputFormatChanged = 1017 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventVideoSizeChanged = 25 -> int
const AndroidX.Media3.ExoPlayer.Util.EventLogger.InterfaceConsts.EventVolumeChanged = 22 -> int
const AndroidX.Media3.ExoPlayer.Util.SntpClient.DefaultNtpHost = "time.android.com" -> string!
const AndroidX.Media3.ExoPlayer.Util.SntpClient.DefaultTimeoutMs = 1000 -> int
const AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.FrameReleaseDrop = 2 -> int
const AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.FrameReleaseIgnore = 4 -> int
const AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.FrameReleaseImmediately = 0 -> int
const AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.FrameReleaseScheduled = 1 -> int
const AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.FrameReleaseSkip = 3 -> int
const AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.FrameReleaseTryAgainLater = 5 -> int
override AndroidX.Media3.ExoPlayer.AbstractConcatenatedTimeline.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.AbstractConcatenatedTimeline.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.AbstractConcatenatedTimeline.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEvents.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Analytics.DefaultPlaybackSessionManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EventTimeAndException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EventTimeAndFormat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.EventTimeAndPlaybackState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Analytics.PlaybackStatsListener.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Analytics.PlayerId.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.AudioCapabilitiesReceiver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.AudioRendererEventListenerEventDispatcher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.AudioSinkConfigurationException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.AudioSinkInitializationException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.AudioSinkUnexpectedDiscontinuityException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.AudioSinkWriteException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.BaseAudioProcessor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.BaseAudioProcessor.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Audio.BaseAudioProcessor.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.IsEnded.get -> bool
override AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.IsReady.get -> bool
override AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.Render(long positionUs, long elapsedRealtimeUs) -> void
override AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Audio.DefaultAudioOffloadSupportProvider.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.DefaultAudioProcessorChain.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.DefaultAudioProcessorChain.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.DefaultAudioProcessorChain.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.InvalidAudioTrackTimestampException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackProvider.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackProvider.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackProvider.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.GetDecoderInfos(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, AndroidX.Media3.Common.Format? format, bool requiresSecureDecoder) -> System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo!>?
override AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.GetMediaCodecConfiguration(AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo? codecInfo, AndroidX.Media3.Common.Format? format, Android.Media.MediaCrypto? crypto, float codecOperatingRate) -> AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration?
override AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.Name.get -> string?
override AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.NameRendererCapabilities.get -> string?
override AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.ProcessOutputBuffer(long positionUs, long elapsedRealtimeUs, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter? codec, Java.Nio.ByteBuffer? buffer, int bufferIndex, int bufferFlags, int sampleCount, long bufferPresentationTimeUs, bool isDecodeOnlyBuffer, bool isLastBuffer, AndroidX.Media3.Common.Format? format) -> bool
override AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.SupportsFormat(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, AndroidX.Media3.Common.Format? format) -> int
override AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Audio.OggOpusAudioPacketizer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.PcmAudioUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.SilenceSkippingAudioProcessor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.SilenceSkippingAudioProcessor.QueueInput(Java.Nio.ByteBuffer? inputBuffer) -> void
override AndroidX.Media3.ExoPlayer.Audio.TeeAudioProcessor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.TeeAudioProcessor.QueueInput(Java.Nio.ByteBuffer? inputBuffer) -> void
override AndroidX.Media3.ExoPlayer.Audio.TeeAudioProcessor.WavFileAudioBufferSink.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.WaveformBar.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.WaveformBar.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.WaveformBar.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.BaseRenderer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.BaseRenderer.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.BaseRenderer.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.DecoderCounters.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.DefaultLivePlaybackSpeedControl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.DefaultLoadControl.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.DefaultLoadControl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.DefaultLoadControl.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.DefaultLoadControl.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.DefaultRendererCapabilitiesList.Factory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.DefaultRendererCapabilitiesList.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.MissingSchemeDataException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManagerProvider.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Drm.DrmSessionDrmSessionException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Drm.DrmSessionDrmSessionException.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Drm.DrmSessionDrmSessionException.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Drm.DrmUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Drm.ErrorStateDrmSession.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmAppManagedProvider.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyRequest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmKeyStatus.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Drm.ExoMediaDrmProvisionRequest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Drm.FrameworkCryptoConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Drm.HttpMediaDrmCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Drm.KeysExpiredException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Drm.LocalMediaDrmCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Drm.MediaDrmCallbackException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Drm.OfflineLicenseHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Drm.UnsupportedDrmException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Drm.WidevineUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.ExoPlaybackException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.ExoPlayerBuilder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.ExoPlayerPreloadConfiguration.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.ExoPlayerPreloadConfiguration.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.ExoPlayerPreloadConfiguration.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.ExoTimeoutException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.FormatHolder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.ForwardingRenderer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.ForwardingRenderer.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.ForwardingRenderer.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Image.BitmapFactoryImageDecoder.Factory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Image.BitmapFactoryImageDecoder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Image.BitmapFactoryImageDecoder.Name.get -> string?
override AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.ExternalImageRequest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.Factory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Image.ImageDecoderException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Image.ImageOutputBuffer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Image.ImageOutputBuffer.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Image.ImageOutputBuffer.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Image.ImageRenderer.IsEnded.get -> bool
override AndroidX.Media3.ExoPlayer.Image.ImageRenderer.IsReady.get -> bool
override AndroidX.Media3.ExoPlayer.Image.ImageRenderer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Image.ImageRenderer.Name.get -> string?
override AndroidX.Media3.ExoPlayer.Image.ImageRenderer.NameRendererCapabilities.get -> string?
override AndroidX.Media3.ExoPlayer.Image.ImageRenderer.Render(long positionUs, long elapsedRealtimeUs) -> void
override AndroidX.Media3.ExoPlayer.Image.ImageRenderer.SupportsFormat(AndroidX.Media3.Common.Format? format) -> int
override AndroidX.Media3.ExoPlayer.Image.ImageRenderer.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Image.ImageRenderer.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.LoadControlParameters.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.LoadingInfo.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.LoadingInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.MediaCodec.DefaultMediaCodecAdapterFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.MediaCodec.LoudnessCodecController.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecDecoderException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecDecoderException.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecDecoderException.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.DecoderInitializationException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.DecoderInitializationException.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.DecoderInitializationException.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.IsEnded.get -> bool
override AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.IsReady.get -> bool
override AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.Render(long positionUs, long elapsedRealtimeUs) -> void
override AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecUtil.DecoderQueryException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecUtil.DecoderQueryException.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecUtil.DecoderQueryException.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.Factory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.Factory.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.Factory.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.MediaExtractorCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Metadata.MetadataRenderer.IsEnded.get -> bool
override AndroidX.Media3.ExoPlayer.Metadata.MetadataRenderer.IsReady.get -> bool
override AndroidX.Media3.ExoPlayer.Metadata.MetadataRenderer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Metadata.MetadataRenderer.Name.get -> string?
override AndroidX.Media3.ExoPlayer.Metadata.MetadataRenderer.NameRendererCapabilities.get -> string?
override AndroidX.Media3.ExoPlayer.Metadata.MetadataRenderer.Render(long positionUs, long elapsedRealtimeUs) -> void
override AndroidX.Media3.ExoPlayer.Metadata.MetadataRenderer.SupportsFormat(AndroidX.Media3.Common.Format? format) -> int
override AndroidX.Media3.ExoPlayer.MetadataRetriever.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.NoSampleRenderer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.NoSampleRenderer.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.NoSampleRenderer.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Offline.DefaultDownloadIndex.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Offline.DefaultDownloaderFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Offline.DefaultDownloaderFactory.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Offline.DefaultDownloaderFactory.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Offline.Download.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Offline.DownloadException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.LiveContentUnsupportedException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.LiveContentUnsupportedException.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.LiveContentUnsupportedException.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Offline.DownloadManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Offline.DownloadNotificationHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Offline.DownloadProgress.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Offline.DownloadProgress.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Offline.DownloadProgress.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Builder.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Builder.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.ByteRange.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.UnsupportedRequestException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.UnsupportedRequestException.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.UnsupportedRequestException.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Offline.DownloadService.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Offline.DownloadService.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Offline.DownloadService.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Offline.FilteringManifestParser.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Offline.ProgressiveDownloader.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.Segment.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.Segment.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.Segment.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.PlaybackLooperProvider.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.PlayerMessage.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.RendererConfiguration.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Scheduler.PlatformScheduler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Scheduler.PlatformScheduler.PlatformSchedulerService.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Scheduler.PlatformScheduler.PlatformSchedulerService.OnStartJob(Android.App.Job.JobParameters? params) -> bool
override AndroidX.Media3.ExoPlayer.Scheduler.PlatformScheduler.PlatformSchedulerService.OnStopJob(Android.App.Job.JobParameters? params) -> bool
override AndroidX.Media3.ExoPlayer.Scheduler.Requirements.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Scheduler.RequirementsWatcher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.SeekParameters.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AddListener(AndroidX.Media3.Common.IPlayerListener? listener) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AddMediaItems(int index, System.Collections.Generic.IList<AndroidX.Media3.Common.MediaItem!>? mediaItems) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.ApplicationLooper.get -> Android.OS.Looper?
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AudioAttributes.get -> AndroidX.Media3.Common.AudioAttributes?
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AvailableCommands.get -> AndroidX.Media3.Common.PlayerCommands?
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.BufferedPosition.get -> long
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.ClearVideoSurface() -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.ClearVideoSurface(Android.Views.Surface? surface) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.ClearVideoSurfaceHolder(Android.Views.ISurfaceHolder? surfaceHolder) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.ClearVideoSurfaceView(Android.Views.SurfaceView? surfaceView) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.ClearVideoTextureView(Android.Views.TextureView? textureView) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.ContentBufferedPosition.get -> long
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.ContentPosition.get -> long
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.CurrentAdGroupIndex.get -> int
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.CurrentAdIndexInAdGroup.get -> int
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.CurrentCues.get -> AndroidX.Media3.Common.Text.CueGroup?
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.CurrentMediaItemIndex.get -> int
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.CurrentPeriodIndex.get -> int
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.CurrentPosition.get -> long
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.CurrentTimeline.get -> AndroidX.Media3.Common.Timeline?
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.CurrentTracks.get -> AndroidX.Media3.Common.Tracks?
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.DecreaseDeviceVolume() -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.DecreaseDeviceVolume(int flags) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.DeviceInfo.get -> AndroidX.Media3.Common.DeviceInfo?
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.DeviceMuted.get -> bool
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.DeviceMuted.set -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.DeviceVolume.get -> int
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.DeviceVolume.set -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Duration.get -> long
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.IncreaseDeviceVolume() -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.IncreaseDeviceVolume(int flags) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.IsLoading.get -> bool
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.IsPlayingAd.get -> bool
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.MaxSeekToPreviousPosition.get -> long
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.MediaMetadata.get -> AndroidX.Media3.Common.MediaMetadata?
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.MoveMediaItems(int fromIndex, int toIndex, int newIndex) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PlayWhenReady.get -> bool
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PlayWhenReady.set -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PlaybackParameters.get -> AndroidX.Media3.Common.PlaybackParameters?
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PlaybackParameters.set -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PlaybackState.get -> int
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PlaybackSuppressionReason.get -> int
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PlayerError.get -> AndroidX.Media3.ExoPlayer.ExoPlaybackException?
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PlaylistMetadata.get -> AndroidX.Media3.Common.MediaMetadata?
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PlaylistMetadata.set -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Prepare() -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Release() -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.RemoveListener(AndroidX.Media3.Common.IPlayerListener? listener) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.RemoveMediaItems(int fromIndex, int toIndex) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.RepeatMode.get -> int
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.RepeatMode.set -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.ReplaceMediaItems(int fromIndex, int toIndex, System.Collections.Generic.IList<AndroidX.Media3.Common.MediaItem!>? mediaItems) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SeekBackIncrement.get -> long
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SeekForwardIncrement.get -> long
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SeekTo(int mediaItemIndex, long positionMs, int seekCommand, bool isRepeatingCurrentItem) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetAudioAttributes(AndroidX.Media3.Common.AudioAttributes? audioAttributes, bool handleAudioFocus) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetDeviceMuted(bool muted, int flags) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetDeviceVolume(int volume, int flags) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetMediaItems(System.Collections.Generic.IList<AndroidX.Media3.Common.MediaItem!>? mediaItems, bool resetPosition) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetMediaItems(System.Collections.Generic.IList<AndroidX.Media3.Common.MediaItem!>? mediaItems, int startIndex, long startPositionMs) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetVideoSurface(Android.Views.Surface? surface) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetVideoSurfaceHolder(Android.Views.ISurfaceHolder? surfaceHolder) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetVideoSurfaceView(Android.Views.SurfaceView? surfaceView) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetVideoTextureView(Android.Views.TextureView? textureView) -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.ShuffleModeEnabled.get -> bool
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.ShuffleModeEnabled.set -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Stop() -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SurfaceSize.get -> AndroidX.Media3.Common.Util.Size?
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.TotalBufferedDuration.get -> long
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.TrackSelectionParameters.get -> AndroidX.Media3.Common.TrackSelectionParameters?
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.TrackSelectionParameters.set -> void
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.VideoSize.get -> AndroidX.Media3.Common.VideoSize?
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Volume.get -> float
override AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Volume.set -> void
override AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdLoadException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.CreatePeriod(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? id, AndroidX.Media3.ExoPlayer.Upstream.IAllocator? allocator, long startPositionUs) -> AndroidX.Media3.ExoPlayer.Source.IMediaPeriod?
override AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.MediaItem.get -> AndroidX.Media3.Common.MediaItem?
override AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.ReleasePeriod(AndroidX.Media3.ExoPlayer.Source.IMediaPeriod? mediaPeriod) -> void
override AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.CreatePeriod(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? id, AndroidX.Media3.ExoPlayer.Upstream.IAllocator? allocator, long startPositionUs) -> AndroidX.Media3.ExoPlayer.Source.IMediaPeriod?
override AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.MaybeThrowSourceInfoRefreshError() -> void
override AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.MediaItem.get -> AndroidX.Media3.Common.MediaItem?
override AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionMediaSource.ReleasePeriod(AndroidX.Media3.ExoPlayer.Source.IMediaPeriod? mediaPeriod) -> void
override AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Ads.SinglePeriodAdTimeline.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Source.BehindLiveWindowException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.BundledExtractorsAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunk.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunk.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunk.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkIterator.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkIterator.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkIterator.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkOutput.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor.Factory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Chunk.BundledChunkExtractor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkHolder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.EmbeddedSampleStream.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Source.Chunk.ContainerMediaChunk.IsLoadCompleted.get -> bool
override AndroidX.Media3.ExoPlayer.Source.Chunk.ContainerMediaChunk.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Chunk.ContainerMediaChunk.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Source.Chunk.ContainerMediaChunk.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Source.Chunk.DataChunk.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Chunk.DataChunk.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Source.Chunk.DataChunk.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Source.Chunk.InitializationChunk.CancelLoad() -> void
override AndroidX.Media3.ExoPlayer.Source.Chunk.InitializationChunk.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Chunk.InitializationChunk.Load() -> void
override AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Source.Chunk.MediaParserChunkExtractor.Factory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Chunk.MediaParserChunkExtractor.Factory.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Source.Chunk.MediaParserChunkExtractor.Factory.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Source.Chunk.MediaParserChunkExtractor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Chunk.SingleSampleMediaChunk.CancelLoad() -> void
override AndroidX.Media3.ExoPlayer.Source.Chunk.SingleSampleMediaChunk.IsLoadCompleted.get -> bool
override AndroidX.Media3.ExoPlayer.Source.Chunk.SingleSampleMediaChunk.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Chunk.SingleSampleMediaChunk.Load() -> void
override AndroidX.Media3.ExoPlayer.Source.ClippingMediaPeriod.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.IllegalClippingException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.ClippingMediaSource.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.CompositeMediaSource.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.CompositeMediaSource.MaybeThrowSourceInfoRefreshError() -> void
override AndroidX.Media3.ExoPlayer.Source.CompositeMediaSource.PrepareSourceInternal(AndroidX.Media3.DataSource.ITransferListener? mediaTransferListener) -> void
override AndroidX.Media3.ExoPlayer.Source.CompositeMediaSource.ReleaseSourceInternal() -> void
override AndroidX.Media3.ExoPlayer.Source.CompositeMediaSource.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Source.CompositeMediaSource.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Source.CompositeSequenceableLoader.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.CreatePeriod(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? id, AndroidX.Media3.ExoPlayer.Upstream.IAllocator? allocator, long startPositionUs) -> AndroidX.Media3.ExoPlayer.Source.IMediaPeriod?
override AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.MediaItem.get -> AndroidX.Media3.Common.MediaItem?
override AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource.ReleasePeriod(AndroidX.Media3.ExoPlayer.Source.IMediaPeriod? mediaPeriod) -> void
override AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.CreatePeriod(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? id, AndroidX.Media3.ExoPlayer.Upstream.IAllocator? allocator, long startPositionUs) -> AndroidX.Media3.ExoPlayer.Source.IMediaPeriod?
override AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.MediaItem.get -> AndroidX.Media3.Common.MediaItem?
override AndroidX.Media3.ExoPlayer.Source.ConcatenatingMediaSource2.ReleasePeriod(AndroidX.Media3.ExoPlayer.Source.IMediaPeriod? mediaPeriod) -> void
override AndroidX.Media3.ExoPlayer.Source.DefaultCompositeSequenceableLoaderFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.EmptySampleStream.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.ExternalLoaderLoadRequest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.ExternallyLoadedMediaSource.CreatePeriod(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? id, AndroidX.Media3.ExoPlayer.Upstream.IAllocator? allocator, long startPositionUs) -> AndroidX.Media3.ExoPlayer.Source.IMediaPeriod?
override AndroidX.Media3.ExoPlayer.Source.ExternallyLoadedMediaSource.Factory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.ExternallyLoadedMediaSource.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.ExternallyLoadedMediaSource.MaybeThrowSourceInfoRefreshError() -> void
override AndroidX.Media3.ExoPlayer.Source.ExternallyLoadedMediaSource.MediaItem.get -> AndroidX.Media3.Common.MediaItem?
override AndroidX.Media3.ExoPlayer.Source.ExternallyLoadedMediaSource.ReleasePeriod(AndroidX.Media3.ExoPlayer.Source.IMediaPeriod? mediaPeriod) -> void
override AndroidX.Media3.ExoPlayer.Source.FilteringMediaSource.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.FilteringMediaSource.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Source.FilteringMediaSource.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Source.ForwardingTimeline.GetIndexOfPeriod(Java.Lang.Object? uid) -> int
override AndroidX.Media3.ExoPlayer.Source.ForwardingTimeline.GetPeriod(int periodIndex, AndroidX.Media3.Common.Timeline.Period? period, bool setIds) -> AndroidX.Media3.Common.Timeline.Period?
override AndroidX.Media3.ExoPlayer.Source.ForwardingTimeline.GetUidOfPeriod(int periodIndex) -> Java.Lang.Object?
override AndroidX.Media3.ExoPlayer.Source.ForwardingTimeline.GetWindow(int windowIndex, AndroidX.Media3.Common.Timeline.Window? window, long defaultPositionProjectionUs) -> AndroidX.Media3.Common.Timeline.Window?
override AndroidX.Media3.ExoPlayer.Source.ForwardingTimeline.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.ForwardingTimeline.PeriodCount.get -> int
override AndroidX.Media3.ExoPlayer.Source.ForwardingTimeline.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Source.ForwardingTimeline.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Source.ForwardingTimeline.WindowCount.get -> int
override AndroidX.Media3.ExoPlayer.Source.LoadEventInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.LoopingMediaSource.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.MaskingMediaPeriod.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.MaskingMediaSource.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.MaskingMediaSource.PlaceholderTimeline.GetIndexOfPeriod(Java.Lang.Object? uid) -> int
override AndroidX.Media3.ExoPlayer.Source.MaskingMediaSource.PlaceholderTimeline.GetPeriod(int periodIndex, AndroidX.Media3.Common.Timeline.Period? period, bool setIds) -> AndroidX.Media3.Common.Timeline.Period?
override AndroidX.Media3.ExoPlayer.Source.MaskingMediaSource.PlaceholderTimeline.GetUidOfPeriod(int periodIndex) -> Java.Lang.Object?
override AndroidX.Media3.ExoPlayer.Source.MaskingMediaSource.PlaceholderTimeline.GetWindow(int windowIndex, AndroidX.Media3.Common.Timeline.Window? window, long defaultPositionProjectionUs) -> AndroidX.Media3.Common.Timeline.Window?
override AndroidX.Media3.ExoPlayer.Source.MaskingMediaSource.PlaceholderTimeline.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.MaskingMediaSource.PlaceholderTimeline.PeriodCount.get -> int
override AndroidX.Media3.ExoPlayer.Source.MaskingMediaSource.PlaceholderTimeline.WindowCount.get -> int
override AndroidX.Media3.ExoPlayer.Source.MediaLoadData.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.MediaParser.InputReaderAdapterV30.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.MediaParser.MediaParserUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.MediaParser.OutputConsumerAdapterV30.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.MediaParserExtractorAdapter.Factory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.MediaParserExtractorAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.MergingMediaSource.CreatePeriod(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? id, AndroidX.Media3.ExoPlayer.Upstream.IAllocator? allocator, long startPositionUs) -> AndroidX.Media3.ExoPlayer.Source.IMediaPeriod?
override AndroidX.Media3.ExoPlayer.Source.MergingMediaSource.IllegalMergeException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.MergingMediaSource.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.MergingMediaSource.MediaItem.get -> AndroidX.Media3.Common.MediaItem?
override AndroidX.Media3.ExoPlayer.Source.MergingMediaSource.ReleasePeriod(AndroidX.Media3.ExoPlayer.Source.IMediaPeriod? mediaPeriod) -> void
override AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.BuilderBase.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.BuilderBase.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.BuilderBase.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Status.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Status.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Status.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Source.Preload.PreloadException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.Factory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.CreatePeriod(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? id, AndroidX.Media3.ExoPlayer.Upstream.IAllocator? allocator, long startPositionUs) -> AndroidX.Media3.ExoPlayer.Source.IMediaPeriod?
override AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.Factory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.MaybeThrowSourceInfoRefreshError() -> void
override AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.MediaItem.get -> AndroidX.Media3.Common.MediaItem?
override AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.ReleasePeriod(AndroidX.Media3.ExoPlayer.Source.IMediaPeriod? mediaPeriod) -> void
override AndroidX.Media3.ExoPlayer.Source.SampleQueue.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.SampleQueue.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Source.SampleQueue.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Source.ShuffleOrderDefaultShuffleOrder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.ShuffleOrderDefaultShuffleOrder.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Source.ShuffleOrderDefaultShuffleOrder.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Source.ShuffleOrderUnshuffledShuffleOrder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.SilenceMediaSource.CreatePeriod(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? id, AndroidX.Media3.ExoPlayer.Upstream.IAllocator? allocator, long startPositionUs) -> AndroidX.Media3.ExoPlayer.Source.IMediaPeriod?
override AndroidX.Media3.ExoPlayer.Source.SilenceMediaSource.Factory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.SilenceMediaSource.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.SilenceMediaSource.MaybeThrowSourceInfoRefreshError() -> void
override AndroidX.Media3.ExoPlayer.Source.SilenceMediaSource.MediaItem.get -> AndroidX.Media3.Common.MediaItem?
override AndroidX.Media3.ExoPlayer.Source.SilenceMediaSource.ReleasePeriod(AndroidX.Media3.ExoPlayer.Source.IMediaPeriod? mediaPeriod) -> void
override AndroidX.Media3.ExoPlayer.Source.SinglePeriodTimeline.GetIndexOfPeriod(Java.Lang.Object? uid) -> int
override AndroidX.Media3.ExoPlayer.Source.SinglePeriodTimeline.GetPeriod(int periodIndex, AndroidX.Media3.Common.Timeline.Period? period, bool setIds) -> AndroidX.Media3.Common.Timeline.Period?
override AndroidX.Media3.ExoPlayer.Source.SinglePeriodTimeline.GetUidOfPeriod(int periodIndex) -> Java.Lang.Object?
override AndroidX.Media3.ExoPlayer.Source.SinglePeriodTimeline.GetWindow(int windowIndex, AndroidX.Media3.Common.Timeline.Window? window, long defaultPositionProjectionUs) -> AndroidX.Media3.Common.Timeline.Window?
override AndroidX.Media3.ExoPlayer.Source.SinglePeriodTimeline.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.SinglePeriodTimeline.PeriodCount.get -> int
override AndroidX.Media3.ExoPlayer.Source.SinglePeriodTimeline.WindowCount.get -> int
override AndroidX.Media3.ExoPlayer.Source.SingleSampleMediaSource.CreatePeriod(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? id, AndroidX.Media3.ExoPlayer.Upstream.IAllocator? allocator, long startPositionUs) -> AndroidX.Media3.ExoPlayer.Source.IMediaPeriod?
override AndroidX.Media3.ExoPlayer.Source.SingleSampleMediaSource.Factory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.SingleSampleMediaSource.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.SingleSampleMediaSource.MaybeThrowSourceInfoRefreshError() -> void
override AndroidX.Media3.ExoPlayer.Source.SingleSampleMediaSource.MediaItem.get -> AndroidX.Media3.Common.MediaItem?
override AndroidX.Media3.ExoPlayer.Source.SingleSampleMediaSource.ReleasePeriod(AndroidX.Media3.ExoPlayer.Source.IMediaPeriod? mediaPeriod) -> void
override AndroidX.Media3.ExoPlayer.Source.TimelineWithUpdatedMediaItem.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.TrackGroupArray.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.UnrecognizedInputFormatException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.UnrecognizedInputFormatException.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Source.UnrecognizedInputFormatException.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.CreatePeriod(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? id, AndroidX.Media3.ExoPlayer.Upstream.IAllocator? allocator, long startPositionUs) -> AndroidX.Media3.ExoPlayer.Source.IMediaPeriod?
override AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.MediaItem.get -> AndroidX.Media3.Common.MediaItem?
override AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.ReleasePeriod(AndroidX.Media3.ExoPlayer.Source.IMediaPeriod? mediaPeriod) -> void
override AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.StandaloneMediaClock.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Text.TextRenderer.IsEnded.get -> bool
override AndroidX.Media3.ExoPlayer.Text.TextRenderer.IsReady.get -> bool
override AndroidX.Media3.ExoPlayer.Text.TextRenderer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Text.TextRenderer.Name.get -> string?
override AndroidX.Media3.ExoPlayer.Text.TextRenderer.NameRendererCapabilities.get -> string?
override AndroidX.Media3.ExoPlayer.Text.TextRenderer.Render(long positionUs, long elapsedRealtimeUs) -> void
override AndroidX.Media3.ExoPlayer.Text.TextRenderer.SupportsFormat(AndroidX.Media3.Common.Format? format) -> int
override AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.AdaptationCheckpoint.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.Factory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.Factory.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.Factory.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.SelectedIndex.get -> int
override AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.SelectionData.get -> Java.Lang.Object?
override AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.SelectionReason.get -> int
override AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.UpdateSelectedTrack(long playbackPositionUs, long bufferedDurationUs, long availableDurationUs, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk!>? queue, AndroidX.Media3.ExoPlayer.Source.Chunk.IMediaChunkIterator![]? mediaChunkIterators) -> void
override AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionOverride.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.TrackSelection.ExoTrackSelectionDefinition.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.TrackSelection.FixedTrackSelection.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.TrackSelection.FixedTrackSelection.SelectedIndex.get -> int
override AndroidX.Media3.ExoPlayer.TrackSelection.FixedTrackSelection.SelectionData.get -> Java.Lang.Object?
override AndroidX.Media3.ExoPlayer.TrackSelection.FixedTrackSelection.SelectionReason.get -> int
override AndroidX.Media3.ExoPlayer.TrackSelection.FixedTrackSelection.UpdateSelectedTrack(long playbackPositionUs, long bufferedDurationUs, long availableDurationUs, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk!>? queue, AndroidX.Media3.ExoPlayer.Source.Chunk.IMediaChunkIterator![]? mediaChunkIterators) -> void
override AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.TrackSelection.RandomTrackSelection.Factory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.TrackSelection.RandomTrackSelection.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.TrackSelection.RandomTrackSelection.SelectedIndex.get -> int
override AndroidX.Media3.ExoPlayer.TrackSelection.RandomTrackSelection.SelectionData.get -> Java.Lang.Object?
override AndroidX.Media3.ExoPlayer.TrackSelection.RandomTrackSelection.SelectionReason.get -> int
override AndroidX.Media3.ExoPlayer.TrackSelection.RandomTrackSelection.UpdateSelectedTrack(long playbackPositionUs, long bufferedDurationUs, long availableDurationUs, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk!>? queue, AndroidX.Media3.ExoPlayer.Source.Chunk.IMediaChunkIterator![]? mediaChunkIterators) -> void
override AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectionArray.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectionUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectorResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.Allocation.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.BandwidthMeterEventListenerEventDispatcher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.CachedRegionTracker.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.CmcdConfiguration.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.CmcdData.Factory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.CmcdData.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.DefaultAllocator.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.DefaultLoadErrorHandlingPolicy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.DefaultLoadErrorHandlingPolicy.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Upstream.DefaultLoadErrorHandlingPolicy.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.Builder.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.Builder.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExponentialWeightedAverageStatistic.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExponentialWeightedAverageStatistic.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExponentialWeightedAverageStatistic.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExponentialWeightedAverageTimeToFirstByteEstimator.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.PercentileTimeToFirstByteEstimator.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingPercentileBandwidthStatistic.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingPercentileBandwidthStatistic.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingPercentileBandwidthStatistic.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.Sample.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.Sample.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.Sample.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.Builder.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.Builder.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackOptions.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackSelection.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyLoadErrorInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.Loader.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.Loader.LoadErrorAction.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.Loader.UnexpectedLoaderException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.LoaderErrorThrowerPlaceholder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.SlidingPercentile.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Upstream.SlidingPercentile.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Upstream.SlidingPercentile.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Util.DebugTextViewHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Util.DebugTextViewHelper.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Util.DebugTextViewHelper.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Util.EventLogger.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Util.EventLogger.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Util.EventLogger.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Util.SntpClient.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.IsEnded.get -> bool
override AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.IsReady.get -> bool
override AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.Render(long positionUs, long elapsedRealtimeUs) -> void
override AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoDecoderException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoDecoderException.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoDecoderException.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.CodecMaxValues.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.GetDecoderInfos(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, AndroidX.Media3.Common.Format? format, bool requiresSecureDecoder) -> System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo!>?
override AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.GetMediaCodecConfiguration(AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo? codecInfo, AndroidX.Media3.Common.Format? format, Android.Media.MediaCrypto? crypto, float codecOperatingRate) -> AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration?
override AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Name.get -> string?
override AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.NameRendererCapabilities.get -> string?
override AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.ProcessOutputBuffer(long positionUs, long elapsedRealtimeUs, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter? codec, Java.Nio.ByteBuffer? buffer, int bufferIndex, int bufferFlags, int sampleCount, long bufferPresentationTimeUs, bool isDecodeOnlyBuffer, bool isLastBuffer, AndroidX.Media3.Common.Format? format) -> bool
override AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.SupportsFormat(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, AndroidX.Media3.Common.Format? format) -> int
override AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Video.PlaceholderSurface.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Video.PlaybackVideoGraphWrapper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Video.Spherical.CameraMotionRenderer.IsEnded.get -> bool
override AndroidX.Media3.ExoPlayer.Video.Spherical.CameraMotionRenderer.IsReady.get -> bool
override AndroidX.Media3.ExoPlayer.Video.Spherical.CameraMotionRenderer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Video.Spherical.CameraMotionRenderer.Name.get -> string?
override AndroidX.Media3.ExoPlayer.Video.Spherical.CameraMotionRenderer.NameRendererCapabilities.get -> string?
override AndroidX.Media3.ExoPlayer.Video.Spherical.CameraMotionRenderer.Render(long positionUs, long elapsedRealtimeUs) -> void
override AndroidX.Media3.ExoPlayer.Video.Spherical.CameraMotionRenderer.SupportsFormat(AndroidX.Media3.Common.Format? format) -> int
override AndroidX.Media3.ExoPlayer.Video.Spherical.SphericalGLSurfaceView.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Video.VideoDecoderGLSurfaceView.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.FrameReleaseInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.FrameReleaseInfo.ThresholdClass.get -> nint
override AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.FrameReleaseInfo.ThresholdType.get -> System.Type!
override AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Video.VideoRendererEventListenerEventDispatcher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.ExoPlayer.Video.VideoSinkVideoSinkException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override sealed AndroidX.Media3.ExoPlayer.AbstractConcatenatedTimeline.GetIndexOfPeriod(Java.Lang.Object? uid) -> int
override sealed AndroidX.Media3.ExoPlayer.AbstractConcatenatedTimeline.GetPeriod(int periodIndex, AndroidX.Media3.Common.Timeline.Period? period, bool setIds) -> AndroidX.Media3.Common.Timeline.Period?
override sealed AndroidX.Media3.ExoPlayer.AbstractConcatenatedTimeline.GetPeriodByUid(Java.Lang.Object? periodUid, AndroidX.Media3.Common.Timeline.Period? period) -> AndroidX.Media3.Common.Timeline.Period?
override sealed AndroidX.Media3.ExoPlayer.AbstractConcatenatedTimeline.GetUidOfPeriod(int periodIndex) -> Java.Lang.Object?
override sealed AndroidX.Media3.ExoPlayer.AbstractConcatenatedTimeline.GetWindow(int windowIndex, AndroidX.Media3.Common.Timeline.Window? window, long defaultPositionProjectionUs) -> AndroidX.Media3.Common.Timeline.Window?
override sealed AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.SupportsFormat(AndroidX.Media3.Common.Format? format) -> int
override sealed AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.SupportsFormat(AndroidX.Media3.Common.Format? format) -> int
override sealed AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.SupportsMixedMimeTypeAdaptation() -> int
override sealed AndroidX.Media3.ExoPlayer.Offline.DownloadService.OnBind(Android.Content.Intent? intent) -> Android.OS.IBinder?
override sealed AndroidX.Media3.ExoPlayer.Source.Chunk.ContainerMediaChunk.CancelLoad() -> void
override sealed AndroidX.Media3.ExoPlayer.Source.Chunk.ContainerMediaChunk.Load() -> void
override sealed AndroidX.Media3.ExoPlayer.Source.Chunk.DataChunk.CancelLoad() -> void
override sealed AndroidX.Media3.ExoPlayer.Source.Chunk.DataChunk.Load() -> void
override sealed AndroidX.Media3.ExoPlayer.Source.ForwardingTimeline.Equals(Java.Lang.Object? obj) -> bool
override sealed AndroidX.Media3.ExoPlayer.Source.ForwardingTimeline.GetHashCode() -> int
override sealed AndroidX.Media3.ExoPlayer.Source.ForwardingTimeline.GetPeriodByUid(Java.Lang.Object? periodUid, AndroidX.Media3.Common.Timeline.Period? period) -> AndroidX.Media3.Common.Timeline.Period?
override sealed AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.PrepareSourceInternal(AndroidX.Media3.DataSource.ITransferListener? mediaTransferListener) -> void
override sealed AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectTracks(AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo? mappedTrackInfo, int[]![]![]? rendererFormatSupports, int[]? rendererMixedMimeTypeAdaptationSupport, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.Common.Timeline? timeline) -> Android.Util.Pair?
override sealed AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.OnSelectionActivated(Java.Lang.Object? info) -> void
override sealed AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.SelectTracks(AndroidX.Media3.ExoPlayer.IRendererCapabilities![]? rendererCapabilities, AndroidX.Media3.ExoPlayer.Source.TrackGroupArray? trackGroups, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? periodId, AndroidX.Media3.Common.Timeline? timeline) -> AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectorResult?
static AndroidX.Media3.ExoPlayer.AbstractConcatenatedTimeline.GetChildPeriodUidFromConcatenatedUid(Java.Lang.Object? concatenatedUid) -> Java.Lang.Object?
static AndroidX.Media3.ExoPlayer.AbstractConcatenatedTimeline.GetChildTimelineUidFromConcatenatedUid(Java.Lang.Object? concatenatedUid) -> Java.Lang.Object?
static AndroidX.Media3.ExoPlayer.AbstractConcatenatedTimeline.GetConcatenatedUid(Java.Lang.Object? childTimelineUid, Java.Lang.Object? childPeriodOrWindowUid) -> Java.Lang.Object?
static AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener.Create(Android.Content.Context? context) -> AndroidX.Media3.ExoPlayer.Analytics.MediaMetricsListener?
static AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.Empty.get -> AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats?
static AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats.Merge(params AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats![]? playbackStats) -> AndroidX.Media3.ExoPlayer.Analytics.PlaybackStats?
static AndroidX.Media3.ExoPlayer.Analytics.PlayerId.Unset.get -> AndroidX.Media3.ExoPlayer.Analytics.PlayerId?
static AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities.DefaultAudioCapabilities.get -> AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities?
static AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities.GetCapabilities(Android.Content.Context? context) -> AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities?
static AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities.GetCapabilities(Android.Content.Context? context, AndroidX.Media3.Common.AudioAttributes? audioAttributes, Android.Media.AudioDeviceInfo? routedDevice) -> AndroidX.Media3.ExoPlayer.Audio.AudioCapabilities?
static AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport.DefaultUnsupported.get -> AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport?
static AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.FailOnSpuriousAudioTimestamp.get -> bool
static AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.FailOnSpuriousAudioTimestamp.set -> void
static AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.DurationUsToBytes(int durationUs, int samplingRate, int frameSize) -> int
static AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.GetMaximumEncodedRateBytesPerSecond(int encoding) -> int
static AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.InterfaceConsts.Default.get -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.IAudioTrackBufferSizeProvider?
static AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackProvider.InterfaceConsts.Default.get -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.IAudioTrackProvider?
static AndroidX.Media3.ExoPlayer.Audio.PcmAudioUtil.RampUpVolume(Java.Nio.ByteBuffer? buffer, int pcmEncoding, int pcmFrameSize, int startFrameIndex, int rampFrameCount) -> Java.Nio.ByteBuffer?
static AndroidX.Media3.ExoPlayer.Audio.PcmAudioUtil.ReadAs32BitIntPcm(Java.Nio.ByteBuffer? buffer, int pcmEncoding) -> int
static AndroidX.Media3.ExoPlayer.Audio.PcmAudioUtil.Write32BitIntPcm(Java.Nio.ByteBuffer? buffer, int pcm32bit, int pcmEncoding) -> void
static AndroidX.Media3.ExoPlayer.DefaultLoadControl.InterfaceConsts.EmptyMediaPeriodId.get -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
static AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.InterfaceConsts.DrmUnsupported.get -> AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManager?
static AndroidX.Media3.ExoPlayer.Drm.DrmUtil.ExecutePost(AndroidX.Media3.DataSource.IDataSource? dataSource, string? url, byte[]? httpBody, System.Collections.Generic.IDictionary<string!, string!>? requestProperties) -> byte[]?
static AndroidX.Media3.ExoPlayer.Drm.DrmUtil.GetErrorCodeForMediaDrmException(Java.Lang.Throwable? exception, int errorSource) -> int
static AndroidX.Media3.ExoPlayer.Drm.DrmUtil.IsFailureToConstructNotProvisionedException(Java.Lang.Throwable? e) -> bool
static AndroidX.Media3.ExoPlayer.Drm.DrmUtil.IsFailureToConstructResourceBusyException(Java.Lang.Throwable? e) -> bool
static AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm.Instance.get -> AndroidX.Media3.ExoPlayer.Drm.DummyExoMediaDrm?
static AndroidX.Media3.ExoPlayer.Drm.FrameworkCryptoConfig.WorkaroundDeviceNeedsKeysToConfigureCodec.get -> bool
static AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.DefaultProvider.get -> AndroidX.Media3.ExoPlayer.Drm.IExoMediaDrmProvider?
static AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.IsCryptoSchemeSupported(Java.Util.UUID? uuid) -> bool
static AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm.NewInstance(Java.Util.UUID? uuid) -> AndroidX.Media3.ExoPlayer.Drm.FrameworkMediaDrm?
static AndroidX.Media3.ExoPlayer.Drm.OfflineLicenseHelper.NewWidevineInstance(string? defaultLicenseUrl, AndroidX.Media3.DataSource.IDataSourceFactory? dataSourceFactory, AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher? eventDispatcher) -> AndroidX.Media3.ExoPlayer.Drm.OfflineLicenseHelper?
static AndroidX.Media3.ExoPlayer.Drm.OfflineLicenseHelper.NewWidevineInstance(string? defaultLicenseUrl, bool forceDefaultLicenseUrl, AndroidX.Media3.DataSource.IDataSourceFactory? dataSourceFactory, AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher? eventDispatcher) -> AndroidX.Media3.ExoPlayer.Drm.OfflineLicenseHelper?
static AndroidX.Media3.ExoPlayer.Drm.OfflineLicenseHelper.NewWidevineInstance(string? defaultLicenseUrl, bool forceDefaultLicenseUrl, AndroidX.Media3.DataSource.IDataSourceFactory? dataSourceFactory, System.Collections.Generic.IDictionary<string!, string!>? optionalKeyRequestParameters, AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher? eventDispatcher) -> AndroidX.Media3.ExoPlayer.Drm.OfflineLicenseHelper?
static AndroidX.Media3.ExoPlayer.Drm.WidevineUtil.GetLicenseDurationRemainingSec(AndroidX.Media3.ExoPlayer.Drm.IDrmSession? drmSession) -> Android.Util.Pair?
static AndroidX.Media3.ExoPlayer.ExoPlaybackException.CreateForRemote(string? message) -> AndroidX.Media3.ExoPlayer.ExoPlaybackException?
static AndroidX.Media3.ExoPlayer.ExoPlaybackException.CreateForRenderer(Java.Lang.Throwable? cause, string? rendererName, int rendererIndex, AndroidX.Media3.Common.Format? rendererFormat, int rendererFormatSupport, bool isRecoverable, int errorCode) -> AndroidX.Media3.ExoPlayer.ExoPlaybackException?
static AndroidX.Media3.ExoPlayer.ExoPlaybackException.CreateForSource(Java.IO.IOException? cause, int errorCode) -> AndroidX.Media3.ExoPlayer.ExoPlaybackException?
static AndroidX.Media3.ExoPlayer.ExoPlaybackException.CreateForUnexpected(Java.Lang.RuntimeException? cause) -> AndroidX.Media3.ExoPlayer.ExoPlaybackException?
static AndroidX.Media3.ExoPlayer.ExoPlaybackException.CreateForUnexpected(Java.Lang.RuntimeException? cause, int errorCode) -> AndroidX.Media3.ExoPlayer.ExoPlaybackException?
static AndroidX.Media3.ExoPlayer.ExoPlayerPreloadConfiguration.Default.get -> AndroidX.Media3.ExoPlayer.ExoPlayerPreloadConfiguration?
static AndroidX.Media3.ExoPlayer.Image.BitmapFactoryImageDecoder.Factory.InterfaceConsts.Default.get -> AndroidX.Media3.ExoPlayer.Image.IImageDecoderFactory?
static AndroidX.Media3.ExoPlayer.Image.ExternallyLoadedImageDecoder.Factory.InterfaceConsts.Default.get -> AndroidX.Media3.ExoPlayer.Image.IImageDecoderFactory?
static AndroidX.Media3.ExoPlayer.MediaCodec.DefaultMediaCodecAdapterFactory.InterfaceConsts.Default.get -> AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterFactory?
static AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration.CreateForAudioDecoding(AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo? codecInfo, Android.Media.MediaFormat? mediaFormat, AndroidX.Media3.Common.Format? format, Android.Media.MediaCrypto? crypto, AndroidX.Media3.ExoPlayer.MediaCodec.LoudnessCodecController? loudnessCodecController) -> AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration?
static AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration.CreateForVideoDecoding(AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo? codecInfo, Android.Media.MediaFormat? mediaFormat, AndroidX.Media3.Common.Format? format, Android.Views.Surface? surface, Android.Media.MediaCrypto? crypto) -> AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration?
static AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo.NewInstance(string? name, string? mimeType, string? codecMimeType, Android.Media.MediaCodecInfo.CodecCapabilities? capabilities, bool hardwareAccelerated, bool softwareOnly, bool vendor, bool forceDisableAdaptive, bool forceSecure) -> AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo?
static AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.SupportsFormatDrm(AndroidX.Media3.Common.Format? format) -> bool
static AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecUtil.ClearDecoderInfoCache() -> void
static AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecUtil.DecryptOnlyDecoderInfo.get -> AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo?
static AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecUtil.GetAlternativeCodecMimeType(AndroidX.Media3.Common.Format? format) -> string?
static AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecUtil.GetAlternativeDecoderInfos(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, AndroidX.Media3.Common.Format? format, bool requiresSecureDecoder, bool requiresTunnelingDecoder) -> System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo!>?
static AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecUtil.GetCodecProfileAndLevel(AndroidX.Media3.Common.Format? format) -> Android.Util.Pair?
static AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecUtil.GetDecoderInfo(string? mimeType, bool secure, bool tunneling) -> AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo?
static AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecUtil.GetDecoderInfos(string? mimeType, bool secure, bool tunneling) -> System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo!>?
static AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecUtil.GetDecoderInfosSoftMatch(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, AndroidX.Media3.Common.Format? format, bool requiresSecureDecoder, bool requiresTunnelingDecoder) -> System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo!>?
static AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecUtil.GetDecoderInfosSortedByFormatSupport(System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo!>? decoderInfos, AndroidX.Media3.Common.Format? format) -> System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo!>?
static AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecUtil.GetDecoderInfosSortedByFullFormatSupport(System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo!>? decoderInfos, AndroidX.Media3.Common.Format? format) -> System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo!>?
static AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecUtil.GetDecoderInfosSortedBySoftwareOnly(System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo!>? decoderInfos) -> System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo!>?
static AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecUtil.GetHevcBaseLayerCodecProfileAndLevel(AndroidX.Media3.Common.Format? format) -> Android.Util.Pair?
static AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecUtil.MaxH264DecodableFrameSize() -> int
static AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecUtil.WarmDecoderInfoCache(string? mimeType, bool secure, bool tunneling) -> void
static AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.Factory.InterfaceConsts.Default.get -> AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterFactory?
static AndroidX.Media3.ExoPlayer.MetadataRetriever.RetrieveMetadata(Android.Content.Context? context, AndroidX.Media3.Common.MediaItem? mediaItem) -> Google.Common.Util.Concurrent.IListenableFuture?
static AndroidX.Media3.ExoPlayer.MetadataRetriever.RetrieveMetadata(AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory? mediaSourceFactory, AndroidX.Media3.Common.MediaItem? mediaItem) -> Google.Common.Util.Concurrent.IListenableFuture?
static AndroidX.Media3.ExoPlayer.MetadataRetriever.SetMaximumParallelRetrievals(int maximumParallelRetrievals) -> void
static AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.CreateMediaSource(AndroidX.Media3.ExoPlayer.Offline.DownloadRequest? downloadRequest, AndroidX.Media3.DataSource.IDataSourceFactory? dataSourceFactory) -> AndroidX.Media3.ExoPlayer.Source.IMediaSource?
static AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.CreateMediaSource(AndroidX.Media3.ExoPlayer.Offline.DownloadRequest? downloadRequest, AndroidX.Media3.DataSource.IDataSourceFactory? dataSourceFactory, AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManager? drmSessionManager) -> AndroidX.Media3.ExoPlayer.Source.IMediaSource?
static AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.DefaultTrackSelectorParameters.get -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters?
static AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.DefaultTrackSelectorParametersWithoutContext.get -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters?
static AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.ForMediaItem(Android.Content.Context? context, AndroidX.Media3.Common.MediaItem? mediaItem) -> AndroidX.Media3.ExoPlayer.Offline.DownloadHelper?
static AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.ForMediaItem(Android.Content.Context? context, AndroidX.Media3.Common.MediaItem? mediaItem, AndroidX.Media3.ExoPlayer.IRenderersFactory? renderersFactory, AndroidX.Media3.DataSource.IDataSourceFactory? dataSourceFactory) -> AndroidX.Media3.ExoPlayer.Offline.DownloadHelper?
static AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.ForMediaItem(AndroidX.Media3.Common.MediaItem? mediaItem, AndroidX.Media3.Common.TrackSelectionParameters? trackSelectionParameters, AndroidX.Media3.ExoPlayer.IRenderersFactory? renderersFactory, AndroidX.Media3.DataSource.IDataSourceFactory? dataSourceFactory) -> AndroidX.Media3.ExoPlayer.Offline.DownloadHelper?
static AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.ForMediaItem(AndroidX.Media3.Common.MediaItem? mediaItem, AndroidX.Media3.Common.TrackSelectionParameters? trackSelectionParameters, AndroidX.Media3.ExoPlayer.IRenderersFactory? renderersFactory, AndroidX.Media3.DataSource.IDataSourceFactory? dataSourceFactory, AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManager? drmSessionManager) -> AndroidX.Media3.ExoPlayer.Offline.DownloadHelper?
static AndroidX.Media3.ExoPlayer.Offline.DownloadHelper.GetDefaultTrackSelectorParameters(Android.Content.Context? context) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters?
static AndroidX.Media3.ExoPlayer.Offline.DownloadManager.DefaultRequirements.get -> AndroidX.Media3.ExoPlayer.Scheduler.Requirements?
static AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.ByteRange.Creator.get -> Android.OS.IParcelableCreator?
static AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Creator.get -> Android.OS.IParcelableCreator?
static AndroidX.Media3.ExoPlayer.Offline.DownloadService.BuildAddDownloadIntent(Android.Content.Context? context, Java.Lang.Class? clazz, AndroidX.Media3.ExoPlayer.Offline.DownloadRequest? downloadRequest, bool foreground) -> Android.Content.Intent?
static AndroidX.Media3.ExoPlayer.Offline.DownloadService.BuildAddDownloadIntent(Android.Content.Context? context, Java.Lang.Class? clazz, AndroidX.Media3.ExoPlayer.Offline.DownloadRequest? downloadRequest, int stopReason, bool foreground) -> Android.Content.Intent?
static AndroidX.Media3.ExoPlayer.Offline.DownloadService.BuildPauseDownloadsIntent(Android.Content.Context? context, Java.Lang.Class? clazz, bool foreground) -> Android.Content.Intent?
static AndroidX.Media3.ExoPlayer.Offline.DownloadService.BuildRemoveAllDownloadsIntent(Android.Content.Context? context, Java.Lang.Class? clazz, bool foreground) -> Android.Content.Intent?
static AndroidX.Media3.ExoPlayer.Offline.DownloadService.BuildRemoveDownloadIntent(Android.Content.Context? context, Java.Lang.Class? clazz, string? id, bool foreground) -> Android.Content.Intent?
static AndroidX.Media3.ExoPlayer.Offline.DownloadService.BuildResumeDownloadsIntent(Android.Content.Context? context, Java.Lang.Class? clazz, bool foreground) -> Android.Content.Intent?
static AndroidX.Media3.ExoPlayer.Offline.DownloadService.BuildSetRequirementsIntent(Android.Content.Context? context, Java.Lang.Class? clazz, AndroidX.Media3.ExoPlayer.Scheduler.Requirements? requirements, bool foreground) -> Android.Content.Intent?
static AndroidX.Media3.ExoPlayer.Offline.DownloadService.BuildSetStopReasonIntent(Android.Content.Context? context, Java.Lang.Class? clazz, string? id, int stopReason, bool foreground) -> Android.Content.Intent?
static AndroidX.Media3.ExoPlayer.Offline.DownloadService.ClearDownloadManagerHelpers() -> void
static AndroidX.Media3.ExoPlayer.Offline.DownloadService.SendAddDownload(Android.Content.Context? context, Java.Lang.Class? clazz, AndroidX.Media3.ExoPlayer.Offline.DownloadRequest? downloadRequest, bool foreground) -> void
static AndroidX.Media3.ExoPlayer.Offline.DownloadService.SendAddDownload(Android.Content.Context? context, Java.Lang.Class? clazz, AndroidX.Media3.ExoPlayer.Offline.DownloadRequest? downloadRequest, int stopReason, bool foreground) -> void
static AndroidX.Media3.ExoPlayer.Offline.DownloadService.SendPauseDownloads(Android.Content.Context? context, Java.Lang.Class? clazz, bool foreground) -> void
static AndroidX.Media3.ExoPlayer.Offline.DownloadService.SendRemoveAllDownloads(Android.Content.Context? context, Java.Lang.Class? clazz, bool foreground) -> void
static AndroidX.Media3.ExoPlayer.Offline.DownloadService.SendRemoveDownload(Android.Content.Context? context, Java.Lang.Class? clazz, string? id, bool foreground) -> void
static AndroidX.Media3.ExoPlayer.Offline.DownloadService.SendResumeDownloads(Android.Content.Context? context, Java.Lang.Class? clazz, bool foreground) -> void
static AndroidX.Media3.ExoPlayer.Offline.DownloadService.SendSetRequirements(Android.Content.Context? context, Java.Lang.Class? clazz, AndroidX.Media3.ExoPlayer.Scheduler.Requirements? requirements, bool foreground) -> void
static AndroidX.Media3.ExoPlayer.Offline.DownloadService.SendSetStopReason(Android.Content.Context? context, Java.Lang.Class? clazz, string? id, int stopReason, bool foreground) -> void
static AndroidX.Media3.ExoPlayer.Offline.DownloadService.Start(Android.Content.Context? context, Java.Lang.Class? clazz) -> void
static AndroidX.Media3.ExoPlayer.Offline.DownloadService.StartForeground(Android.Content.Context? context, Java.Lang.Class? clazz) -> void
static AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.GetCompressibleDataSpec(Android.Net.Uri? uri) -> AndroidX.Media3.DataSource.DataSpec?
static AndroidX.Media3.ExoPlayer.RendererConfiguration.Default.get -> AndroidX.Media3.ExoPlayer.RendererConfiguration?
static AndroidX.Media3.ExoPlayer.Scheduler.Requirements.Creator.get -> Android.OS.IParcelableCreator?
static AndroidX.Media3.ExoPlayer.SeekParameters.ClosestSync.get -> AndroidX.Media3.ExoPlayer.SeekParameters?
static AndroidX.Media3.ExoPlayer.SeekParameters.Default.get -> AndroidX.Media3.ExoPlayer.SeekParameters?
static AndroidX.Media3.ExoPlayer.SeekParameters.Exact.get -> AndroidX.Media3.ExoPlayer.SeekParameters?
static AndroidX.Media3.ExoPlayer.SeekParameters.NextSync.get -> AndroidX.Media3.ExoPlayer.SeekParameters?
static AndroidX.Media3.ExoPlayer.SeekParameters.PreviousSync.get -> AndroidX.Media3.ExoPlayer.SeekParameters?
static AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdLoadException.CreateForAd(Java.Lang.Exception? error) -> AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdLoadException?
static AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdLoadException.CreateForAdGroup(Java.Lang.Exception? error, int adGroupIndex) -> AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdLoadException?
static AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdLoadException.CreateForAllAds(Java.Lang.Exception? error) -> AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdLoadException?
static AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdLoadException.CreateForUnexpected(Java.Lang.RuntimeException? error) -> AndroidX.Media3.ExoPlayer.Source.Ads.AdsMediaSource.AdLoadException?
static AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionUtil.AddAdGroupToAdPlaybackState(AndroidX.Media3.Common.AdPlaybackState? adPlaybackState, long fromPositionUs, long contentResumeOffsetUs, params long[]? adDurationsUs) -> AndroidX.Media3.Common.AdPlaybackState?
static AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionUtil.GetAdCountInGroup(AndroidX.Media3.Common.AdPlaybackState? adPlaybackState, int adGroupIndex) -> int
static AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionUtil.GetMediaPeriodPositionUs(long positionUs, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.Common.AdPlaybackState? adPlaybackState) -> long
static AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionUtil.GetMediaPeriodPositionUsForAd(long positionUs, int adGroupIndex, int adIndexInAdGroup, AndroidX.Media3.Common.AdPlaybackState? adPlaybackState) -> long
static AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionUtil.GetMediaPeriodPositionUsForContent(long positionUs, int nextAdGroupIndex, AndroidX.Media3.Common.AdPlaybackState? adPlaybackState) -> long
static AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionUtil.GetStreamPositionUs(AndroidX.Media3.Common.IPlayer? player, AndroidX.Media3.Common.AdPlaybackState? adPlaybackState) -> long
static AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionUtil.GetStreamPositionUs(long positionUs, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, AndroidX.Media3.Common.AdPlaybackState? adPlaybackState) -> long
static AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionUtil.GetStreamPositionUsForAd(long positionUs, int adGroupIndex, int adIndexInAdGroup, AndroidX.Media3.Common.AdPlaybackState? adPlaybackState) -> long
static AndroidX.Media3.ExoPlayer.Source.Ads.ServerSideAdInsertionUtil.GetStreamPositionUsForContent(long positionUs, int nextAdGroupIndex, AndroidX.Media3.Common.AdPlaybackState? adPlaybackState) -> long
static AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkIterator.InterfaceConsts.Empty.get -> AndroidX.Media3.ExoPlayer.Source.Chunk.IMediaChunkIterator?
static AndroidX.Media3.ExoPlayer.Source.DefaultMediaSourceFactory.InterfaceConsts.Unsupported.get -> AndroidX.Media3.ExoPlayer.Source.IMediaSourceFactory?
static AndroidX.Media3.ExoPlayer.Source.ExternallyLoadedMediaSource.Factory.InterfaceConsts.Unsupported.get -> AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory?
static AndroidX.Media3.ExoPlayer.Source.LoadEventInfo.NewId.get -> long
static AndroidX.Media3.ExoPlayer.Source.MediaParser.MediaParserUtil.SetLogSessionIdOnMediaParser(Android.Media.MediaParser? mediaParser, AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> void
static AndroidX.Media3.ExoPlayer.Source.MediaParser.MediaParserUtil.ToCaptionsMediaFormat(AndroidX.Media3.Common.Format? format) -> Android.Media.MediaFormat?
static AndroidX.Media3.ExoPlayer.Source.Preload.PreloadMediaSource.Factory.InterfaceConsts.Unsupported.get -> AndroidX.Media3.ExoPlayer.Source.IMediaSourceMediaSourceIFactory?
static AndroidX.Media3.ExoPlayer.Source.ProgressiveMediaSource.Factory.InterfaceConsts.Unsupported.get -> AndroidX.Media3.ExoPlayer.Source.IMediaSourceFactory?
static AndroidX.Media3.ExoPlayer.Source.SampleQueue.CreateWithDrm(AndroidX.Media3.ExoPlayer.Upstream.IAllocator? allocator, Android.OS.Looper? playbackLooper, AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManager? drmSessionManager, AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher? drmEventDispatcher) -> AndroidX.Media3.ExoPlayer.Source.SampleQueue?
static AndroidX.Media3.ExoPlayer.Source.SampleQueue.CreateWithDrm(AndroidX.Media3.ExoPlayer.Upstream.IAllocator? allocator, AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManager? drmSessionManager, AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher? drmEventDispatcher) -> AndroidX.Media3.ExoPlayer.Source.SampleQueue?
static AndroidX.Media3.ExoPlayer.Source.SampleQueue.CreateWithoutDrm(AndroidX.Media3.ExoPlayer.Upstream.IAllocator? allocator) -> AndroidX.Media3.ExoPlayer.Source.SampleQueue?
static AndroidX.Media3.ExoPlayer.Source.TrackGroupArray.Empty.get -> AndroidX.Media3.ExoPlayer.Source.TrackGroupArray?
static AndroidX.Media3.ExoPlayer.Source.TrackGroupArray.FromBundle(Android.OS.Bundle? bundle) -> AndroidX.Media3.ExoPlayer.Source.TrackGroupArray?
static AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.GetFormatLanguageScore(AndroidX.Media3.Common.Format? format, string? language, bool allowUndeterminedFormatLanguage) -> int
static AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.IsSupported(int formatSupport, bool allowExceedsCapabilities) -> bool
static AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.NormalizeUndeterminedLanguageToNull(string? language) -> string?
static AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Default.get -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters?
static AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.DefaultWithoutContext.get -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters?
static AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.FromBundle(Android.OS.Bundle? bundle) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters?
static AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.GetDefaults(Android.Content.Context? context) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters?
static AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionOverride.FromBundle(Android.OS.Bundle? bundle) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionOverride?
static AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectionUtil.BuildTracks(AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo? mappedTrackInfo, AndroidX.Media3.ExoPlayer.TrackSelection.ITrackSelection![]? selections) -> AndroidX.Media3.Common.Tracks?
static AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectionUtil.BuildTracks(AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo? mappedTrackInfo, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.TrackSelection.ITrackSelection!>![]? selections) -> AndroidX.Media3.Common.Tracks?
static AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectionUtil.CreateFallbackOptions(AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection? trackSelection) -> AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackOptions?
static AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectionUtil.CreateTrackSelectionsForDefinitions(AndroidX.Media3.ExoPlayer.TrackSelection.ExoTrackSelectionDefinition![]? definitions, AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectionUtil.IAdaptiveTrackSelectionFactory? adaptiveTrackSelectionFactory) -> AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection![]?
static AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectionUtil.GetMaxVideoSizeInViewport(bool orientationMayChange, int viewportWidth, int viewportHeight, int videoWidth, int videoHeight) -> Android.Graphics.Point?
static AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectionUtil.UpdateParametersWithOverride(AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters? parameters, int rendererIndex, AndroidX.Media3.ExoPlayer.Source.TrackGroupArray? trackGroupArray, bool isDisabled, AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectionOverride? override) -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters?
static AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.DefaultInitialBitrateEstimates2g.get -> Google.Common.Collect.ImmutableList?
static AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.DefaultInitialBitrateEstimates3g.get -> Google.Common.Collect.ImmutableList?
static AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.DefaultInitialBitrateEstimates4g.get -> Google.Common.Collect.ImmutableList?
static AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.DefaultInitialBitrateEstimates5gNsa.get -> Google.Common.Collect.ImmutableList?
static AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.DefaultInitialBitrateEstimates5gSa.get -> Google.Common.Collect.ImmutableList?
static AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.DefaultInitialBitrateEstimatesWifi.get -> Google.Common.Collect.ImmutableList?
static AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter.GetSingletonInstance(Android.Content.Context? context) -> AndroidX.Media3.ExoPlayer.Upstream.DefaultBandwidthMeter?
static AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.DefaultInitialBitrateEstimates2g.get -> Google.Common.Collect.ImmutableList?
static AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.DefaultInitialBitrateEstimates3g.get -> Google.Common.Collect.ImmutableList?
static AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.DefaultInitialBitrateEstimates4g.get -> Google.Common.Collect.ImmutableList?
static AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.DefaultInitialBitrateEstimates5gNsa.get -> Google.Common.Collect.ImmutableList?
static AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.DefaultInitialBitrateEstimates5gSa.get -> Google.Common.Collect.ImmutableList?
static AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExperimentalBandwidthMeter.DefaultInitialBitrateEstimatesWifi.get -> Google.Common.Collect.ImmutableList?
static AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.GetAgeBasedEvictionFunction(long maxAgeMs) -> AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.ISampleEvictionFunction?
static AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.GetMaxCountEvictionFunction(long maxSamplesCount) -> AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.ISampleEvictionFunction?
static AndroidX.Media3.ExoPlayer.Upstream.Loader.CreateRetryAction(bool resetErrorCount, long retryDelayMillis) -> AndroidX.Media3.ExoPlayer.Upstream.Loader.LoadErrorAction?
static AndroidX.Media3.ExoPlayer.Upstream.Loader.DontRetry.get -> AndroidX.Media3.ExoPlayer.Upstream.Loader.LoadErrorAction?
static AndroidX.Media3.ExoPlayer.Upstream.Loader.DontRetryFatal.get -> AndroidX.Media3.ExoPlayer.Upstream.Loader.LoadErrorAction?
static AndroidX.Media3.ExoPlayer.Upstream.Loader.Retry.get -> AndroidX.Media3.ExoPlayer.Upstream.Loader.LoadErrorAction?
static AndroidX.Media3.ExoPlayer.Upstream.Loader.RetryResetErrorCount.get -> AndroidX.Media3.ExoPlayer.Upstream.Loader.LoadErrorAction?
static AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.Load(AndroidX.Media3.DataSource.IDataSource? dataSource, AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.IParser? parser, Android.Net.Uri? uri, int type) -> Java.Lang.Object?
static AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.Load(AndroidX.Media3.DataSource.IDataSource? dataSource, AndroidX.Media3.ExoPlayer.Upstream.ParsingLoadable.IParser? parser, AndroidX.Media3.DataSource.DataSpec? dataSpec, int type) -> Java.Lang.Object?
static AndroidX.Media3.ExoPlayer.Util.SntpClient.ElapsedRealtimeOffsetMs.get -> long
static AndroidX.Media3.ExoPlayer.Util.SntpClient.Initialize(AndroidX.Media3.ExoPlayer.Upstream.Loader? loader, AndroidX.Media3.ExoPlayer.Util.SntpClient.IInitializationCallback? callback) -> void
static AndroidX.Media3.ExoPlayer.Util.SntpClient.IsInitialized.get -> bool
static AndroidX.Media3.ExoPlayer.Util.SntpClient.MaxElapsedTimeUntilUpdateMs.get -> long
static AndroidX.Media3.ExoPlayer.Util.SntpClient.MaxElapsedTimeUntilUpdateMs.set -> void
static AndroidX.Media3.ExoPlayer.Util.SntpClient.NtpHost.get -> string?
static AndroidX.Media3.ExoPlayer.Util.SntpClient.NtpHost.set -> void
static AndroidX.Media3.ExoPlayer.Util.SntpClient.TimeoutMs.get -> int
static AndroidX.Media3.ExoPlayer.Util.SntpClient.TimeoutMs.set -> void
static AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.GetCodecMaxInputSize(AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo? codecInfo, AndroidX.Media3.Common.Format? format) -> int
static AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.GetMaxInputSize(AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo? codecInfo, AndroidX.Media3.Common.Format? format) -> int
static AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.SupportsFormat(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, AndroidX.Media3.Common.Format? format) -> int
static AndroidX.Media3.ExoPlayer.Video.PlaceholderSurface.IsSecureSupported(Android.Content.Context? context) -> bool
static AndroidX.Media3.ExoPlayer.Video.PlaceholderSurface.NewInstance(Android.Content.Context? context, bool secure) -> AndroidX.Media3.ExoPlayer.Video.PlaceholderSurface?
static AndroidX.Media3.ExoPlayer.Video.PlaceholderSurface.NewInstanceV17(Android.Content.Context? context, bool secure) -> AndroidX.Media3.ExoPlayer.Video.PlaceholderSurface?
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.AddListener(AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener? listener) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnAudioTrackInitialized(AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? audioTrackConfig) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnAudioTrackReleased(AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? audioTrackConfig) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnAvailableCommandsChanged(AndroidX.Media3.Common.PlayerCommands? availableCommands) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnCues(AndroidX.Media3.Common.Text.CueGroup? cueGroup) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnCues(System.Collections.Generic.IList<AndroidX.Media3.Common.Text.Cue!>? cues) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnDeviceInfoChanged(AndroidX.Media3.Common.DeviceInfo? deviceInfo) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnDeviceVolumeChanged(int volume, bool muted) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnEvents(AndroidX.Media3.Common.IPlayer? player, AndroidX.Media3.Common.PlayerEvents? events) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnIsPlayingChanged(bool isPlaying) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnLoadingChanged(bool isLoading) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnMaxSeekToPreviousPositionChanged(long maxSeekToPreviousPositionMs) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnMediaMetadataChanged(AndroidX.Media3.Common.MediaMetadata? mediaMetadata) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnPlayerErrorChanged(AndroidX.Media3.Common.PlaybackException? error) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnPlaylistMetadataChanged(AndroidX.Media3.Common.MediaMetadata? playlistMetadata) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnPositionDiscontinuity(int reason) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnRenderedFirstFrame() -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnRendererReadyChanged(int rendererIndex, int rendererTrackType, bool isRendererReady) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnSeekBackIncrementChanged(long seekBackIncrementMs) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnSeekForwardIncrementChanged(long seekForwardIncrementMs) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnTrackSelectionParametersChanged(AndroidX.Media3.Common.TrackSelectionParameters? parameters) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.OnTracksChanged(AndroidX.Media3.Common.Tracks? tracks) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.Release() -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.RemoveListener(AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener? listener) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.SetPlayer(AndroidX.Media3.Common.IPlayer? player, Android.OS.Looper? looper) -> void
virtual AndroidX.Media3.ExoPlayer.Analytics.DefaultAnalyticsCollector.SetThrowsWhenUsingWrongThread(bool throwsWhenUsingWrongThread) -> void
virtual AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.CanReuseDecoder(string? decoderName, AndroidX.Media3.Common.Format? oldFormat, AndroidX.Media3.Common.Format? newFormat) -> AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation?
virtual AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.GetChannelMapping(Java.Lang.Object? decoder) -> int[]?
virtual AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.GetDurationToProgressUs(long positionUs, long elapsedRealtimeUs) -> long
virtual AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.HasSkippedSilenceSinceLastCall.get -> bool
virtual AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.OnPositionDiscontinuity() -> void
virtual AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.PlaybackParameters.get -> AndroidX.Media3.Common.PlaybackParameters?
virtual AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.PlaybackParameters.set -> void
virtual AndroidX.Media3.ExoPlayer.Audio.DecoderAudioRenderer.PositionUs.get -> long
virtual AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.DefaultAudioProcessorChain.ApplyPlaybackParameters(AndroidX.Media3.Common.PlaybackParameters? playbackParameters) -> AndroidX.Media3.Common.PlaybackParameters?
virtual AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.DefaultAudioProcessorChain.ApplySkipSilenceEnabled(bool skipSilenceEnabled) -> bool
virtual AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.DefaultAudioProcessorChain.GetAudioProcessors() -> AndroidX.Media3.Common.Audio.IAudioProcessor![]?
virtual AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.DefaultAudioProcessorChain.GetMediaDuration(long playoutDuration) -> long
virtual AndroidX.Media3.ExoPlayer.Audio.DefaultAudioSink.DefaultAudioProcessorChain.SkippedOutputFrameCount.get -> long
virtual AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder.Build() -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider?
virtual AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder.SetAc3BufferMultiplicationFactor(int ac3BufferMultiplicationFactor) -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder?
virtual AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder.SetDtshdBufferMultiplicationFactor(int dtshdBufferMultiplicationFactor) -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder?
virtual AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder.SetMaxPcmBufferDurationUs(int maxPcmBufferDurationUs) -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder?
virtual AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder.SetMinPcmBufferDurationUs(int minPcmBufferDurationUs) -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder?
virtual AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder.SetOffloadBufferDurationUs(int offloadBufferDurationUs) -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder?
virtual AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder.SetPassthroughBufferDurationUs(int passthroughBufferDurationUs) -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder?
virtual AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder.SetPcmBufferMultiplicationFactor(int pcmBufferMultiplicationFactor) -> AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Builder?
virtual AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.Get1xBufferSizeInBytes(int minBufferSizeInBytes, int encoding, int outputMode, int pcmFrameSize, int sampleRate, int bitrate) -> int
virtual AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.GetBufferSizeInBytes(int minBufferSizeInBytes, int encoding, int outputMode, int pcmFrameSize, int sampleRate, int bitrate, double maxAudioTrackPlaybackSpeed) -> int
virtual AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.GetOffloadBufferSizeInBytes(int encoding) -> int
virtual AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.GetPassthroughBufferSizeInBytes(int encoding, int bitrate) -> int
virtual AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackBufferSizeProvider.GetPcmBufferSizeInBytes(int minBufferSizeInBytes, int samplingRate, int frameSize) -> int
virtual AndroidX.Media3.ExoPlayer.Audio.DefaultAudioTrackProvider.CustomizeAudioTrackBuilder(Android.Media.AudioTrack.Builder? audioTrackBuilder) -> Android.Media.AudioTrack.Builder?
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.AudioAttributes.get -> AndroidX.Media3.Common.AudioAttributes?
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.AudioAttributes.set -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.AudioTrackBufferSizeUs.get -> long
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.Configure(AndroidX.Media3.Common.Format? inputFormat, int specifiedBufferSize, int[]? outputChannels) -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.DisableTunneling() -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.EnableTunnelingV21() -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.Flush() -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.GetCurrentPositionUs(bool sourceEnded) -> long
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.GetFormatOffloadSupport(AndroidX.Media3.Common.Format? format) -> AndroidX.Media3.ExoPlayer.Audio.AudioOffloadSupport?
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.GetFormatSupport(AndroidX.Media3.Common.Format? format) -> int
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.HandleBuffer(Java.Nio.ByteBuffer? buffer, long presentationTimeUs, int encodedAccessUnitCount) -> bool
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.HandleDiscontinuity() -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.HasPendingData.get -> bool
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.IsEnded.get -> bool
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.Pause() -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.Play() -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.PlayToEndOfStream() -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.PlaybackParameters.get -> AndroidX.Media3.Common.PlaybackParameters?
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.PlaybackParameters.set -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.Release() -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.Reset() -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.SetAudioSessionId(int audioSessionId) -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.SetAuxEffectInfo(AndroidX.Media3.Common.AuxEffectInfo? auxEffectInfo) -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.SetClock(AndroidX.Media3.Common.Util.IClock? clock) -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.SetListener(AndroidX.Media3.ExoPlayer.Audio.IAudioSinkListener? listener) -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.SetOffloadDelayPadding(int delayInFrames, int paddingInFrames) -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.SetOffloadMode(int offloadMode) -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.SetOutputStreamOffsetUs(long outputStreamOffsetUs) -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.SetPlayerId(AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.SetPreferredDevice(Android.Media.AudioDeviceInfo? audioDeviceInfo) -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.SetVolume(float volume) -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.SkipSilenceEnabled.get -> bool
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.SkipSilenceEnabled.set -> void
virtual AndroidX.Media3.ExoPlayer.Audio.ForwardingAudioSink.SupportsFormat(AndroidX.Media3.Common.Format? format) -> bool
virtual AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.GetCodecMaxInputSize(AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo? codecInfo, AndroidX.Media3.Common.Format? format, AndroidX.Media3.Common.Format![]? streamFormats) -> int
virtual AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.GetMediaFormat(AndroidX.Media3.Common.Format? format, string? codecMimeType, int codecMaxInputSize, float codecOperatingRate) -> Android.Media.MediaFormat?
virtual AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.HasSkippedSilenceSinceLastCall.get -> bool
virtual AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.OnPositionDiscontinuity() -> void
virtual AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.PlaybackParameters.get -> AndroidX.Media3.Common.PlaybackParameters?
virtual AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.PlaybackParameters.set -> void
virtual AndroidX.Media3.ExoPlayer.Audio.MediaCodecAudioRenderer.PositionUs.get -> long
virtual AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.Flush(int sampleRateHz, int channelCount, int encoding) -> void
virtual AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.HandleBuffer(Java.Nio.ByteBuffer? buffer) -> void
virtual AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.WaveformBar.AddSample(float sample) -> void
virtual AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.WaveformBar.MaxSampleValue.get -> double
virtual AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.WaveformBar.MinSampleValue.get -> double
virtual AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.WaveformBar.RootMeanSquare.get -> double
virtual AndroidX.Media3.ExoPlayer.Audio.WaveformAudioBufferSink.WaveformBar.SampleCount.get -> int
virtual AndroidX.Media3.ExoPlayer.BaseRenderer.HandleMessage(int messageType, Java.Lang.Object? message) -> void
virtual AndroidX.Media3.ExoPlayer.BaseRenderer.MediaClock.get -> AndroidX.Media3.ExoPlayer.IMediaClock?
virtual AndroidX.Media3.ExoPlayer.BaseRenderer.OnDisabled() -> void
virtual AndroidX.Media3.ExoPlayer.BaseRenderer.OnEnabled(bool joining, bool mayRenderStartOfStream) -> void
virtual AndroidX.Media3.ExoPlayer.BaseRenderer.OnInit() -> void
virtual AndroidX.Media3.ExoPlayer.BaseRenderer.OnPositionReset(long positionUs, bool joining) -> void
virtual AndroidX.Media3.ExoPlayer.BaseRenderer.OnRelease() -> void
virtual AndroidX.Media3.ExoPlayer.BaseRenderer.OnReset() -> void
virtual AndroidX.Media3.ExoPlayer.BaseRenderer.OnStarted() -> void
virtual AndroidX.Media3.ExoPlayer.BaseRenderer.OnStopped() -> void
virtual AndroidX.Media3.ExoPlayer.BaseRenderer.OnStreamChanged(AndroidX.Media3.Common.Format![]? formats, long startPositionUs, long offsetUs, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
virtual AndroidX.Media3.ExoPlayer.BaseRenderer.OnTimelineChanged(AndroidX.Media3.Common.Timeline? timeline) -> void
virtual AndroidX.Media3.ExoPlayer.BaseRenderer.SkipSource(long positionUs) -> int
virtual AndroidX.Media3.ExoPlayer.BaseRenderer.SupportsMixedMimeTypeAdaptation() -> int
virtual AndroidX.Media3.ExoPlayer.DefaultLoadControl.Allocator.get -> AndroidX.Media3.ExoPlayer.Upstream.IAllocator?
virtual AndroidX.Media3.ExoPlayer.DefaultLoadControl.CalculateTargetBufferBytes(AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection![]? trackSelectionArray) -> int
virtual AndroidX.Media3.ExoPlayer.DefaultLoadControl.GetBackBufferDurationUs(AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> long
virtual AndroidX.Media3.ExoPlayer.DefaultLoadControl.OnPrepared(AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> void
virtual AndroidX.Media3.ExoPlayer.DefaultLoadControl.OnReleased(AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> void
virtual AndroidX.Media3.ExoPlayer.DefaultLoadControl.OnStopped(AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> void
virtual AndroidX.Media3.ExoPlayer.DefaultLoadControl.OnTracksSelected(AndroidX.Media3.ExoPlayer.LoadControlParameters? parameters, AndroidX.Media3.ExoPlayer.Source.TrackGroupArray? trackGroups, AndroidX.Media3.ExoPlayer.TrackSelection.IExoTrackSelection![]? trackSelections) -> void
virtual AndroidX.Media3.ExoPlayer.DefaultLoadControl.RetainBackBufferFromKeyframe(AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> bool
virtual AndroidX.Media3.ExoPlayer.DefaultLoadControl.ShouldContinueLoading(AndroidX.Media3.ExoPlayer.LoadControlParameters? parameters) -> bool
virtual AndroidX.Media3.ExoPlayer.DefaultLoadControl.ShouldContinuePreloading(AndroidX.Media3.Common.Timeline? timeline, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, long bufferedDurationUs) -> bool
virtual AndroidX.Media3.ExoPlayer.DefaultLoadControl.ShouldStartPlayback(AndroidX.Media3.ExoPlayer.LoadControlParameters? parameters) -> bool
virtual AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.BuildAudioRenderers(Android.Content.Context? context, int extensionRendererMode, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, bool enableDecoderFallback, AndroidX.Media3.ExoPlayer.Audio.IAudioSink? audioSink, Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener? eventListener, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.IRenderer!>? out) -> void
virtual AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.BuildAudioSink(Android.Content.Context? context, bool enableFloatOutput, bool enableAudioTrackPlaybackParams) -> AndroidX.Media3.ExoPlayer.Audio.IAudioSink?
virtual AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.BuildCameraMotionRenderers(Android.Content.Context? context, int extensionRendererMode, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.IRenderer!>? out) -> void
virtual AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.BuildImageRenderers(System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.IRenderer!>? out) -> void
virtual AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.BuildMetadataRenderers(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.Metadata.IMetadataOutput? output, Android.OS.Looper? outputLooper, int extensionRendererMode, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.IRenderer!>? out) -> void
virtual AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.BuildMiscellaneousRenderers(Android.Content.Context? context, Android.OS.Handler? eventHandler, int extensionRendererMode, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.IRenderer!>? out) -> void
virtual AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.BuildSecondaryVideoRenderer(AndroidX.Media3.ExoPlayer.IRenderer? renderer, Android.Content.Context? context, int extensionRendererMode, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, bool enableDecoderFallback, Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener? eventListener, long allowedVideoJoiningTimeMs) -> AndroidX.Media3.ExoPlayer.IRenderer?
virtual AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.BuildTextRenderers(Android.Content.Context? context, AndroidX.Media3.ExoPlayer.Text.ITextOutput? output, Android.OS.Looper? outputLooper, int extensionRendererMode, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.IRenderer!>? out) -> void
virtual AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.BuildVideoRenderers(Android.Content.Context? context, int extensionRendererMode, AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecSelector? mediaCodecSelector, bool enableDecoderFallback, Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener? eventListener, long allowedVideoJoiningTimeMs, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.IRenderer!>? out) -> void
virtual AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.CodecAdapterFactory.get -> AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapterFactory?
virtual AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.CreateRenderers(Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener? videoRendererEventListener, AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener? audioRendererEventListener, AndroidX.Media3.ExoPlayer.Text.ITextOutput? textRendererOutput, AndroidX.Media3.ExoPlayer.Metadata.IMetadataOutput? metadataRendererOutput) -> AndroidX.Media3.ExoPlayer.IRenderer![]?
virtual AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.CreateSecondaryRenderer(AndroidX.Media3.ExoPlayer.IRenderer? renderer, Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Video.IVideoRendererEventListener? videoRendererEventListener, AndroidX.Media3.ExoPlayer.Audio.IAudioRendererEventListener? audioRendererEventListener, AndroidX.Media3.ExoPlayer.Text.ITextOutput? textRendererOutput, AndroidX.Media3.ExoPlayer.Metadata.IMetadataOutput? metadataRendererOutput) -> AndroidX.Media3.ExoPlayer.IRenderer?
virtual AndroidX.Media3.ExoPlayer.DefaultRenderersFactory.ImageDecoderFactory.get -> AndroidX.Media3.ExoPlayer.Image.IImageDecoderFactory?
virtual AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.AcquireSession(AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher? eventDispatcher, AndroidX.Media3.Common.Format? format) -> AndroidX.Media3.ExoPlayer.Drm.IDrmSession?
virtual AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.GetCryptoType(AndroidX.Media3.Common.Format? format) -> int
virtual AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.PreacquireSession(AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher? eventDispatcher, AndroidX.Media3.Common.Format? format) -> AndroidX.Media3.ExoPlayer.Drm.IDrmSessionManagerDrmSessionReference?
virtual AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.SetMode(int mode, byte[]? offlineLicenseKeySetId) -> void
virtual AndroidX.Media3.ExoPlayer.Drm.DefaultDrmSessionManager.SetPlayer(Android.OS.Looper? playbackLooper, AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> void
virtual AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher.AddEventListener(Android.OS.Handler? handler, AndroidX.Media3.ExoPlayer.Drm.IDrmSessionEventListener? eventListener) -> void
virtual AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher.DrmKeysLoaded() -> void
virtual AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher.DrmKeysRemoved() -> void
virtual AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher.DrmKeysRestored() -> void
virtual AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher.DrmSessionAcquired(int state) -> void
virtual AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher.DrmSessionManagerError(Java.Lang.Exception? error) -> void
virtual AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher.DrmSessionReleased() -> void
virtual AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher.RemoveEventListener(AndroidX.Media3.ExoPlayer.Drm.IDrmSessionEventListener? eventListener) -> void
virtual AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher.WithParameters(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> AndroidX.Media3.ExoPlayer.Drm.DrmSessionEventListenerEventDispatcher?
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.Capabilities.get -> AndroidX.Media3.ExoPlayer.IRendererCapabilities?
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.Disable() -> void
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.Enable(AndroidX.Media3.ExoPlayer.RendererConfiguration? configuration, AndroidX.Media3.Common.Format![]? formats, AndroidX.Media3.ExoPlayer.Source.ISampleStream? stream, long positionUs, bool joining, bool mayRenderStartOfStream, long startPositionUs, long offsetUs, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.EnableMayRenderStartOfStream() -> void
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.GetDurationToProgressUs(long positionUs, long elapsedRealtimeUs) -> long
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.HandleMessage(int messageType, Java.Lang.Object? message) -> void
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.HasReadStreamToEnd.get -> bool
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.Init(int index, AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId, AndroidX.Media3.Common.Util.IClock? clock) -> void
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.IsCurrentStreamFinal.get -> bool
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.IsEnded.get -> bool
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.IsReady.get -> bool
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.MaybeThrowStreamError() -> void
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.MediaClock.get -> AndroidX.Media3.ExoPlayer.IMediaClock?
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.Name.get -> string?
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.ReadingPositionUs.get -> long
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.Release() -> void
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.Render(long positionUs, long elapsedRealtimeUs) -> void
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.ReplaceStream(AndroidX.Media3.Common.Format![]? formats, AndroidX.Media3.ExoPlayer.Source.ISampleStream? stream, long startPositionUs, long offsetUs, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> void
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.Reset() -> void
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.ResetPosition(long positionUs) -> void
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.SetCurrentStreamFinal() -> void
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.SetPlaybackSpeed(float currentPlaybackSpeed, float targetPlaybackSpeed) -> void
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.SetTimeline(AndroidX.Media3.Common.Timeline? timeline) -> void
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.Start() -> void
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.State.get -> int
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.Stop() -> void
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.Stream.get -> AndroidX.Media3.ExoPlayer.Source.ISampleStream?
virtual AndroidX.Media3.ExoPlayer.ForwardingRenderer.TrackType.get -> int
virtual AndroidX.Media3.ExoPlayer.Image.ImageRenderer.MaybeInitializeProcessingPipeline() -> bool
virtual AndroidX.Media3.ExoPlayer.Image.ImageRenderer.ProcessOutputBuffer(long positionUs, long elapsedRealtimeUs, Android.Graphics.Bitmap? outputBitmap, long bufferPresentationTimeUs) -> bool
virtual AndroidX.Media3.ExoPlayer.MediaCodec.LoudnessCodecController.LoudnessParameterUpdateHandler.Invoke(Android.OS.Bundle? p0) -> Android.OS.Bundle?
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.CanReuseCodec(AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo? codecInfo, AndroidX.Media3.Common.Format? oldFormat, AndroidX.Media3.Common.Format? newFormat) -> AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation?
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.CodecNeedsEosPropagation.get -> bool
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.CodecOperatingRate.get -> float
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.CreateDecoderException(Java.Lang.Throwable? cause, AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo? codecInfo) -> AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecDecoderException?
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.ExperimentalEnableProcessedStreamChangedAtStart() -> void
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.FlushOrReleaseCodec() -> bool
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.GetCodecBufferFlags(AndroidX.Media3.Decoder.DecoderInputBuffer? buffer) -> int
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.GetCodecOperatingRateV23(float targetPlaybackSpeed, AndroidX.Media3.Common.Format? format, AndroidX.Media3.Common.Format![]? streamFormats) -> float
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.GetDurationToProgressUs(long positionUs, long elapsedRealtimeUs, bool isOnBufferAvailableListenerRegistered) -> long
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.HandleInputBufferSupplementalData(AndroidX.Media3.Decoder.DecoderInputBuffer? buffer) -> void
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.LastBufferInStreamPresentationTimeUs.get -> long
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.MaybeInitializeProcessingPipeline(AndroidX.Media3.Common.Format? format) -> bool
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.OnCodecError(Java.Lang.Exception? codecError) -> void
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.OnCodecInitialized(string? name, AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration? configuration, long initializedTimestampMs, long initializationDurationMs) -> void
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.OnCodecReleased(string? name) -> void
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.OnInputFormatChanged(AndroidX.Media3.ExoPlayer.FormatHolder? formatHolder) -> AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation?
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.OnOutputFormatChanged(AndroidX.Media3.Common.Format? format, Android.Media.MediaFormat? mediaFormat) -> void
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.OnOutputStreamOffsetUsChanged(long outputStreamOffsetUs) -> void
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.OnProcessedOutputBuffer(long presentationTimeUs) -> void
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.OnProcessedStreamChange() -> void
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.OnQueueInputBuffer(AndroidX.Media3.Decoder.DecoderInputBuffer? buffer) -> void
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.OnWakeupListenerSet(AndroidX.Media3.ExoPlayer.IRendererWakeupListener? wakeupListener) -> void
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.PlaybackSpeed.get -> float
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.ReleaseCodec() -> void
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.RenderToEndOfStream() -> void
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.ResetCodecStateForFlush() -> void
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.ResetCodecStateForRelease() -> void
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.SetPlaybackSpeed(float currentPlaybackSpeed, float targetPlaybackSpeed) -> void
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.SetRenderTimeLimitMs(long renderTimeLimitMs) -> void
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.ShouldDiscardDecoderInputBuffer(AndroidX.Media3.Decoder.DecoderInputBuffer? buffer) -> bool
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.ShouldInitCodec(AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo? codecInfo) -> bool
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.ShouldReinitCodec() -> bool
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.ShouldSkipDecoderInputBuffer(AndroidX.Media3.Decoder.DecoderInputBuffer? buffer) -> bool
virtual AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecRenderer.ShouldUseBypass(AndroidX.Media3.Common.Format? format) -> bool
virtual AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.Factory.CreateAdapter(AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration? configuration) -> AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter?
virtual AndroidX.Media3.ExoPlayer.MediaCodec.SynchronousMediaCodecAdapter.Factory.CreateCodec(AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecAdapterConfiguration? configuration) -> Android.Media.MediaCodec?
virtual AndroidX.Media3.ExoPlayer.NoSampleRenderer.HandleMessage(int messageType, Java.Lang.Object? message) -> void
virtual AndroidX.Media3.ExoPlayer.NoSampleRenderer.IsEnded.get -> bool
virtual AndroidX.Media3.ExoPlayer.NoSampleRenderer.IsReady.get -> bool
virtual AndroidX.Media3.ExoPlayer.NoSampleRenderer.MediaClock.get -> AndroidX.Media3.ExoPlayer.IMediaClock?
virtual AndroidX.Media3.ExoPlayer.NoSampleRenderer.OnDisabled() -> void
virtual AndroidX.Media3.ExoPlayer.NoSampleRenderer.OnEnabled(bool joining) -> void
virtual AndroidX.Media3.ExoPlayer.NoSampleRenderer.OnPositionReset(long positionUs, bool joining) -> void
virtual AndroidX.Media3.ExoPlayer.NoSampleRenderer.OnRendererOffsetChanged(long offsetUs) -> void
virtual AndroidX.Media3.ExoPlayer.NoSampleRenderer.OnReset() -> void
virtual AndroidX.Media3.ExoPlayer.NoSampleRenderer.OnStarted() -> void
virtual AndroidX.Media3.ExoPlayer.NoSampleRenderer.OnStopped() -> void
virtual AndroidX.Media3.ExoPlayer.NoSampleRenderer.ReadingPositionUs.get -> long
virtual AndroidX.Media3.ExoPlayer.NoSampleRenderer.SetTimeline(AndroidX.Media3.Common.Timeline? timeline) -> void
virtual AndroidX.Media3.ExoPlayer.NoSampleRenderer.SupportsFormat(AndroidX.Media3.Common.Format? format) -> int
virtual AndroidX.Media3.ExoPlayer.NoSampleRenderer.SupportsMixedMimeTypeAdaptation() -> int
virtual AndroidX.Media3.ExoPlayer.Offline.DefaultDownloaderFactory.CreateDownloader(AndroidX.Media3.ExoPlayer.Offline.DownloadRequest? request) -> AndroidX.Media3.ExoPlayer.Offline.IDownloader?
virtual AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Builder.Build() -> AndroidX.Media3.ExoPlayer.Offline.DownloadRequest?
virtual AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Builder.SetByteRange(long offset, long length) -> AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Builder?
virtual AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Builder.SetCustomCacheKey(string? customCacheKey) -> AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Builder?
virtual AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Builder.SetData(byte[]? data) -> AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Builder?
virtual AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Builder.SetKeySetId(byte[]? keySetId) -> AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Builder?
virtual AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Builder.SetMimeType(string? mimeType) -> AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Builder?
virtual AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Builder.SetStreamKeys(System.Collections.Generic.IList<AndroidX.Media3.Common.StreamKey!>? streamKeys) -> AndroidX.Media3.ExoPlayer.Offline.DownloadRequest.Builder?
virtual AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.Cancel() -> void
virtual AndroidX.Media3.ExoPlayer.Offline.SegmentDownloader.Segment.CompareTo(Java.Lang.Object? other) -> int
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AddAnalyticsListener(AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener? listener) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AddAudioOffloadListener(AndroidX.Media3.ExoPlayer.IExoPlayerAudioOffloadListener? listener) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AddMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AddMediaSource(int index, AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AddMediaSources(System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.IMediaSource!>? mediaSources) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AddMediaSources(int index, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.IMediaSource!>? mediaSources) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AnalyticsCollector.get -> AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsCollector?
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AudioDecoderCounters.get -> AndroidX.Media3.ExoPlayer.DecoderCounters?
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AudioFormat.get -> AndroidX.Media3.Common.Format?
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AudioSessionId.get -> int
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.AudioSessionId.set -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.ClearAuxEffectInfo() -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.ClearCameraMotionListener(AndroidX.Media3.ExoPlayer.Video.Spherical.ICameraMotionListener? listener) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.ClearVideoFrameMetadataListener(AndroidX.Media3.ExoPlayer.Video.IVideoFrameMetadataListener? listener) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Clock.get -> AndroidX.Media3.Common.Util.IClock?
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.CreateMessage(AndroidX.Media3.ExoPlayer.PlayerMessage.ITarget? target) -> AndroidX.Media3.ExoPlayer.PlayerMessage?
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.CurrentTrackGroups.get -> AndroidX.Media3.ExoPlayer.Source.TrackGroupArray?
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.CurrentTrackSelections.get -> AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelectionArray?
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.GetRenderer(int index) -> AndroidX.Media3.ExoPlayer.IRenderer?
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.GetRendererType(int index) -> int
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.IsReleased.get -> bool
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.IsSleepingForOffload.get -> bool
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.IsTunnelingEnabled.get -> bool
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PauseAtEndOfMediaItems.get -> bool
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PauseAtEndOfMediaItems.set -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PlaybackLooper.get -> Android.OS.Looper?
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PreloadConfiguration.get -> AndroidX.Media3.ExoPlayer.ExoPlayerPreloadConfiguration?
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.PreloadConfiguration.set -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Prepare(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.Prepare(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource, bool resetPosition, bool resetState) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.RemoveAnalyticsListener(AndroidX.Media3.ExoPlayer.Analytics.IAnalyticsListener? listener) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.RemoveAudioOffloadListener(AndroidX.Media3.ExoPlayer.IExoPlayerAudioOffloadListener? listener) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.RendererCount.get -> int
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SeekParameters.get -> AndroidX.Media3.ExoPlayer.SeekParameters?
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SeekParameters.set -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetAuxEffectInfo(AndroidX.Media3.Common.AuxEffectInfo? auxEffectInfo) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetCameraMotionListener(AndroidX.Media3.ExoPlayer.Video.Spherical.ICameraMotionListener? listener) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetForegroundMode(bool foregroundMode) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetHandleAudioBecomingNoisy(bool handleAudioBecomingNoisy) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetImageOutput(AndroidX.Media3.ExoPlayer.Image.IImageOutput? imageOutput) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource, bool resetPosition) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetMediaSource(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource, long startPositionMs) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetMediaSources(System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.IMediaSource!>? mediaSources) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetMediaSources(System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.IMediaSource!>? mediaSources, bool resetPosition) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetMediaSources(System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.IMediaSource!>? mediaSources, int startMediaItemIndex, long startPositionMs) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetPreferredAudioDevice(Android.Media.AudioDeviceInfo? audioDeviceInfo) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetPriority(int priority) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetPriorityTaskManager(AndroidX.Media3.Common.PriorityTaskManager? priorityTaskManager) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetShuffleOrder(AndroidX.Media3.ExoPlayer.Source.IShuffleOrder? shuffleOrder) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetVideoEffects(System.Collections.Generic.IList<AndroidX.Media3.Common.IEffect!>? videoEffects) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetVideoFrameMetadataListener(AndroidX.Media3.ExoPlayer.Video.IVideoFrameMetadataListener? listener) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SetWakeMode(int wakeMode) -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SkipSilenceEnabled.get -> bool
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.SkipSilenceEnabled.set -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.TrackSelector.get -> AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector?
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.VideoChangeFrameRateStrategy.get -> int
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.VideoChangeFrameRateStrategy.set -> void
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.VideoDecoderCounters.get -> AndroidX.Media3.ExoPlayer.DecoderCounters?
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.VideoFormat.get -> AndroidX.Media3.Common.Format?
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.VideoScalingMode.get -> int
virtual AndroidX.Media3.ExoPlayer.SimpleExoPlayer.VideoScalingMode.set -> void
virtual AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.DisableInternal() -> void
virtual AndroidX.Media3.ExoPlayer.Source.BaseMediaSource.EnableInternal() -> void
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunk.Init(AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkOutput? output) -> void
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkIterator.IsEnded.get -> bool
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkIterator.Next() -> bool
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkIterator.Reset() -> void
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.BufferedPositionUs.get -> long
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.ChunkSource.get -> Java.Lang.Object?
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.ConsumeInitialDiscontinuity() -> bool
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.ContinueLoading(AndroidX.Media3.ExoPlayer.LoadingInfo? loadingInfo) -> bool
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.DiscardBuffer(long positionUs, bool toKeyframe) -> void
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.DiscardUpstreamSamplesForClippedDuration(long clippedDurationUs) -> void
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.GetAdjustedSeekPositionUs(long positionUs, AndroidX.Media3.ExoPlayer.SeekParameters? seekParameters) -> long
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.IsLoading.get -> bool
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.IsReady.get -> bool
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.MaybeThrowError() -> void
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.NextLoadPositionUs.get -> long
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.OnLoadCanceled(AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk? loadable, long elapsedRealtimeMs, long loadDurationMs, bool released) -> void
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.OnLoadCompleted(AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk? loadable, long elapsedRealtimeMs, long loadDurationMs) -> void
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.OnLoadError(AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk? loadable, long elapsedRealtimeMs, long loadDurationMs, Java.IO.IOException? error, int errorCount) -> AndroidX.Media3.ExoPlayer.Upstream.Loader.LoadErrorAction?
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.OnLoadStarted(AndroidX.Media3.ExoPlayer.Source.Chunk.Chunk? loadable, long elapsedRealtimeMs, long loadDurationMs, int retryCount) -> void
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.OnLoaderReleased() -> void
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.ReadData(AndroidX.Media3.ExoPlayer.FormatHolder? formatHolder, AndroidX.Media3.Decoder.DecoderInputBuffer? buffer, int readFlags) -> int
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.ReevaluateBuffer(long positionUs) -> void
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.Release() -> void
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.Release(AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.IReleaseCallback? callback) -> void
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.SeekToUs(long positionUs) -> void
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.SelectEmbeddedTrack(long positionUs, int trackType) -> AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.EmbeddedSampleStream?
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ChunkSampleStream.SkipData(long positionUs) -> int
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ContainerMediaChunk.GetTrackOutputProvider(AndroidX.Media3.ExoPlayer.Source.Chunk.BaseMediaChunkOutput? baseMediaChunkOutput) -> AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractorTrackOutputProvider?
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.ContainerMediaChunk.OnLoadEnded() -> void
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.DataChunk.GetDataHolder() -> byte[]?
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk.NextChunkIndex.get -> long
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.MediaParserChunkExtractor.Factory.CreateProgressiveMediaExtractor(int primaryTrackType, AndroidX.Media3.Common.Format? representationFormat, bool enableEventMessageTrack, System.Collections.Generic.IList<AndroidX.Media3.Common.Format!>? closedCaptionFormats, AndroidX.Media3.Extractor.ITrackOutput? playerEmsgTrackOutput, AndroidX.Media3.ExoPlayer.Analytics.PlayerId? playerId) -> AndroidX.Media3.ExoPlayer.Source.Chunk.IChunkExtractor?
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.MediaParserChunkExtractor.Factory.ExperimentalParseSubtitlesDuringExtraction(bool parseSubtitlesDuringExtraction) -> AndroidX.Media3.ExoPlayer.Source.Chunk.MediaParserChunkExtractor.Factory?
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.MediaParserChunkExtractor.Factory.GetOutputTextFormat(AndroidX.Media3.Common.Format? sourceFormat) -> AndroidX.Media3.Common.Format?
virtual AndroidX.Media3.ExoPlayer.Source.Chunk.MediaParserChunkExtractor.Factory.SetSubtitleParserFactory(AndroidX.Media3.Extractor.Text.ISubtitleParserFactory? subtitleParserFactory) -> AndroidX.Media3.ExoPlayer.Source.Chunk.MediaParserChunkExtractor.Factory?
virtual AndroidX.Media3.ExoPlayer.Source.CompositeMediaSource.GetMediaPeriodIdForChildMediaPeriodId(Java.Lang.Object? childSourceId, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
virtual AndroidX.Media3.ExoPlayer.Source.CompositeMediaSource.GetMediaTimeForChildMediaTime(Java.Lang.Object? childSourceId, long mediaTimeMs, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> long
virtual AndroidX.Media3.ExoPlayer.Source.CompositeMediaSource.GetWindowIndexForChildWindowIndex(Java.Lang.Object? childSourceId, int windowIndex) -> int
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.AddEventListener(Android.OS.Handler? handler, AndroidX.Media3.ExoPlayer.Source.IMediaSourceEventListener? eventListener) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.DispatchEvent(AndroidX.Media3.Common.Util.IConsumer? e) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.DownstreamFormatChanged(AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.DownstreamFormatChanged(int trackType, AndroidX.Media3.Common.Format? trackFormat, int trackSelectionReason, Java.Lang.Object? trackSelectionData, long mediaTimeUs) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.LoadCanceled(AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.LoadCanceled(AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, int dataType) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.LoadCanceled(AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, int dataType, int trackType, AndroidX.Media3.Common.Format? trackFormat, int trackSelectionReason, Java.Lang.Object? trackSelectionData, long mediaStartTimeUs, long mediaEndTimeUs) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.LoadCompleted(AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.LoadCompleted(AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, int dataType) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.LoadCompleted(AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, int dataType, int trackType, AndroidX.Media3.Common.Format? trackFormat, int trackSelectionReason, Java.Lang.Object? trackSelectionData, long mediaStartTimeUs, long mediaEndTimeUs) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.LoadError(AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData, Java.IO.IOException? error, bool wasCanceled) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.LoadError(AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, int dataType, Java.IO.IOException? error, bool wasCanceled) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.LoadError(AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, int dataType, int trackType, AndroidX.Media3.Common.Format? trackFormat, int trackSelectionReason, Java.Lang.Object? trackSelectionData, long mediaStartTimeUs, long mediaEndTimeUs, Java.IO.IOException? error, bool wasCanceled) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.LoadStarted(AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.LoadStarted(AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData, int retryCount) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.LoadStarted(AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, int dataType) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.LoadStarted(AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, int dataType, int retryCount) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.LoadStarted(AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, int dataType, int trackType, AndroidX.Media3.Common.Format? trackFormat, int trackSelectionReason, Java.Lang.Object? trackSelectionData, long mediaStartTimeUs, long mediaEndTimeUs) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.LoadStarted(AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, int dataType, int trackType, AndroidX.Media3.Common.Format? trackFormat, int trackSelectionReason, Java.Lang.Object? trackSelectionData, long mediaStartTimeUs, long mediaEndTimeUs, int retryCount) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.RemoveEventListener(AndroidX.Media3.ExoPlayer.Source.IMediaSourceEventListener? eventListener) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.UpstreamDiscarded(AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.UpstreamDiscarded(int trackType, long mediaStartTimeUs, long mediaEndTimeUs) -> void
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.WithParameters(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher?
virtual AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher.WithParameters(int windowIndex, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId, long mediaTimeOffsetMs) -> AndroidX.Media3.ExoPlayer.Source.MediaSourceEventListenerEventDispatcher?
virtual AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.AddListener(AndroidX.Media3.ExoPlayer.Source.Preload.IPreloadManagerListener? listener) -> void
virtual AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.ClearListeners() -> void
virtual AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.CreateMediaSourceForPreloading(AndroidX.Media3.ExoPlayer.Source.IMediaSource? mediaSource) -> AndroidX.Media3.ExoPlayer.Source.IMediaSource?
virtual AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.ReleaseInternal() -> void
virtual AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.RemoveListener(AndroidX.Media3.ExoPlayer.Source.Preload.IPreloadManagerListener? listener) -> void
virtual AndroidX.Media3.ExoPlayer.Source.Preload.BasePreloadManager.ShouldStartPreloadingNextSource() -> bool
virtual AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Status.Stage.get -> int
virtual AndroidX.Media3.ExoPlayer.Source.Preload.DefaultPreloadManager.Status.Value.get -> long
virtual AndroidX.Media3.ExoPlayer.Source.SampleQueue.DiscardSampleMetadataToRead() -> long
virtual AndroidX.Media3.ExoPlayer.Source.SampleQueue.GetAdjustedUpstreamFormat(AndroidX.Media3.Common.Format? format) -> AndroidX.Media3.Common.Format?
virtual AndroidX.Media3.ExoPlayer.Source.SampleQueue.IsReady(bool loadingFinished) -> bool
virtual AndroidX.Media3.ExoPlayer.Source.SampleQueue.MaybeThrowError() -> void
virtual AndroidX.Media3.ExoPlayer.Source.SampleQueue.PreRelease() -> void
virtual AndroidX.Media3.ExoPlayer.Source.SampleQueue.Read(AndroidX.Media3.ExoPlayer.FormatHolder? formatHolder, AndroidX.Media3.Decoder.DecoderInputBuffer? buffer, int readFlags, bool loadingFinished) -> int
virtual AndroidX.Media3.ExoPlayer.Source.SampleQueue.Release() -> void
virtual AndroidX.Media3.ExoPlayer.Source.SampleQueue.Reset(bool resetUpstreamFormat) -> void
virtual AndroidX.Media3.ExoPlayer.Source.SampleQueue.SampleMetadata(long timeUs, int flags, int size, int offset, AndroidX.Media3.Extractor.TrackOutputCryptoData? cryptoData) -> void
virtual AndroidX.Media3.ExoPlayer.Source.ShuffleOrderDefaultShuffleOrder.CloneAndClear() -> AndroidX.Media3.ExoPlayer.Source.IShuffleOrder?
virtual AndroidX.Media3.ExoPlayer.Source.ShuffleOrderDefaultShuffleOrder.CloneAndInsert(int insertionIndex, int insertionCount) -> AndroidX.Media3.ExoPlayer.Source.IShuffleOrder?
virtual AndroidX.Media3.ExoPlayer.Source.ShuffleOrderDefaultShuffleOrder.CloneAndRemove(int indexFrom, int indexToExclusive) -> AndroidX.Media3.ExoPlayer.Source.IShuffleOrder?
virtual AndroidX.Media3.ExoPlayer.Source.ShuffleOrderDefaultShuffleOrder.FirstIndex.get -> int
virtual AndroidX.Media3.ExoPlayer.Source.ShuffleOrderDefaultShuffleOrder.GetNextIndex(int index) -> int
virtual AndroidX.Media3.ExoPlayer.Source.ShuffleOrderDefaultShuffleOrder.GetPreviousIndex(int index) -> int
virtual AndroidX.Media3.ExoPlayer.Source.ShuffleOrderDefaultShuffleOrder.LastIndex.get -> int
virtual AndroidX.Media3.ExoPlayer.Source.ShuffleOrderDefaultShuffleOrder.Length.get -> int
virtual AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.CanUpdateMediaItem(AndroidX.Media3.Common.MediaItem? mediaItem) -> bool
virtual AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.GetMediaPeriodIdForChildMediaPeriodId(AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId?
virtual AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.GetMediaTimeForChildMediaTime(long mediaTimeMs, AndroidX.Media3.ExoPlayer.Source.MediaSourceMediaPeriodId? mediaPeriodId) -> long
virtual AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.GetWindowIndexForChildWindowIndex(int windowIndex) -> int
virtual AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.InitialTimeline.get -> AndroidX.Media3.Common.Timeline?
virtual AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.IsSingleWindow.get -> bool
virtual AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.OnChildSourceInfoRefreshed(AndroidX.Media3.Common.Timeline? newTimeline) -> void
virtual AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.PrepareSourceInternal() -> void
virtual AndroidX.Media3.ExoPlayer.Source.WrappingMediaSource.UpdateMediaItem(AndroidX.Media3.Common.MediaItem? mediaItem) -> void
virtual AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.CanSelectFormat(AndroidX.Media3.Common.Format? format, int trackBitrate, long effectiveBitrate) -> bool
virtual AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.Factory.CreateAdaptiveTrackSelection(AndroidX.Media3.Common.TrackGroup? group, int[]? tracks, int type, AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter? bandwidthMeter, Google.Common.Collect.ImmutableList? adaptationCheckpoints) -> AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection?
virtual AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.LatestBitrateEstimate.get -> long
virtual AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.MinDurationToRetainAfterDiscardUs.get -> long
virtual AndroidX.Media3.ExoPlayer.TrackSelection.AdaptiveTrackSelection.ShouldEvaluateQueueSize(long nowMs, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk!>? queue) -> bool
virtual AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.Disable() -> void
virtual AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.Enable() -> void
virtual AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.EvaluateQueueSize(long playbackPositionUs, System.Collections.Generic.IList<AndroidX.Media3.ExoPlayer.Source.Chunk.MediaChunk!>? queue) -> int
virtual AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.ExcludeTrack(int index, long exclusionDurationMs) -> bool
virtual AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.IsTrackExcluded(int index, long nowMs) -> bool
virtual AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.OnPlayWhenReadyChanged(bool playWhenReady) -> void
virtual AndroidX.Media3.ExoPlayer.TrackSelection.BaseTrackSelection.OnPlaybackSpeed(float playbackSpeed) -> void
virtual AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.BuildUponParameters() -> AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder?
virtual AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.OnRendererCapabilitiesChanged(AndroidX.Media3.ExoPlayer.IRenderer? renderer) -> void
virtual AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectAllTracks(AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo? mappedTrackInfo, int[]![]![]? rendererFormatSupports, int[]? rendererMixedMimeTypeAdaptationSupports, AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters? params) -> AndroidX.Media3.ExoPlayer.TrackSelection.ExoTrackSelectionDefinition![]?
virtual AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectAudioTrack(AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo? mappedTrackInfo, int[]![]![]? rendererFormatSupports, int[]? rendererMixedMimeTypeAdaptationSupports, AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters? params) -> Android.Util.Pair?
virtual AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectImageTrack(AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo? mappedTrackInfo, int[]![]![]? rendererFormatSupports, AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters? params) -> Android.Util.Pair?
virtual AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectOtherTrack(int trackType, AndroidX.Media3.ExoPlayer.Source.TrackGroupArray? groups, int[]![]? formatSupport, AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters? params) -> AndroidX.Media3.ExoPlayer.TrackSelection.ExoTrackSelectionDefinition?
virtual AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectTextTrack(AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo? mappedTrackInfo, int[]![]![]? rendererFormatSupports, AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters? params, string? selectedAudioLanguage) -> Android.Util.Pair?
virtual AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SelectVideoTrack(AndroidX.Media3.ExoPlayer.TrackSelection.MappingTrackSelector.MappedTrackInfo? mappedTrackInfo, int[]![]![]? rendererFormatSupports, int[]? mixedMimeTypeSupports, AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters? params, string? selectedAudioLanguage) -> Android.Util.Pair?
virtual AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SetParameters(AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.Parameters.Builder? parametersBuilder) -> void
virtual AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.SetParameters(AndroidX.Media3.ExoPlayer.TrackSelection.DefaultTrackSelector.ParametersBuilder? parametersBuilder) -> void
virtual AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.Init(AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.IInvalidationListener? listener, AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeter? bandwidthMeter) -> void
virtual AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.IsSetParametersSupported.get -> bool
virtual AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.Parameters.get -> AndroidX.Media3.Common.TrackSelectionParameters?
virtual AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.Parameters.set -> void
virtual AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.Release() -> void
virtual AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.RendererCapabilitiesListener.get -> AndroidX.Media3.ExoPlayer.IRendererCapabilitiesListener?
virtual AndroidX.Media3.ExoPlayer.TrackSelection.TrackSelector.SetAudioAttributes(AndroidX.Media3.Common.AudioAttributes? audioAttributes) -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.DefaultLoadErrorHandlingPolicy.GetFallbackSelectionFor(AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackOptions? fallbackOptions, AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyLoadErrorInfo? loadErrorInfo) -> AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyFallbackSelection?
virtual AndroidX.Media3.ExoPlayer.Upstream.DefaultLoadErrorHandlingPolicy.GetMinimumLoadableRetryCount(int dataType) -> int
virtual AndroidX.Media3.ExoPlayer.Upstream.DefaultLoadErrorHandlingPolicy.GetRetryDelayMsFor(AndroidX.Media3.ExoPlayer.Upstream.LoadErrorHandlingPolicyLoadErrorInfo? loadErrorInfo) -> long
virtual AndroidX.Media3.ExoPlayer.Upstream.DefaultLoadErrorHandlingPolicy.IsEligibleForFallback(Java.IO.IOException? exception) -> bool
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.AddEventListener(Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeterEventListener? eventListener) -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.BandwidthEstimate.get -> long
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.Builder.Build() -> AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator?
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.Builder.SetBandwidthStatistic(AndroidX.Media3.ExoPlayer.Upstream.Experimental.IBandwidthStatistic? bandwidthStatistic) -> AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.Builder?
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.Builder.SetMinBytesTransferred(long minBytesTransferred) -> AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.Builder?
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.Builder.SetMinSamples(int minSamples) -> AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.Builder?
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.OnBytesTransferred(AndroidX.Media3.DataSource.IDataSource? source, int bytesTransferred) -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.OnNetworkTypeChange(long newBandwidthEstimate) -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.OnTransferEnd(AndroidX.Media3.DataSource.IDataSource? source) -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.OnTransferInitializing(AndroidX.Media3.DataSource.IDataSource? source) -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.OnTransferStart(AndroidX.Media3.DataSource.IDataSource? source) -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.CombinedParallelSampleBandwidthEstimator.RemoveEventListener(AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeterEventListener? eventListener) -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExponentialWeightedAverageStatistic.AddSample(long bytes, long durationUs) -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExponentialWeightedAverageStatistic.BandwidthEstimate.get -> long
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.ExponentialWeightedAverageStatistic.Reset() -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingPercentileBandwidthStatistic.AddSample(long bytes, long durationUs) -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingPercentileBandwidthStatistic.BandwidthEstimate.get -> long
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingPercentileBandwidthStatistic.Reset() -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.AddSample(long bytes, long durationUs) -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.BandwidthEstimate.get -> long
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.SlidingWeightedAverageBandwidthStatistic.Reset() -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.AddEventListener(Android.OS.Handler? eventHandler, AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeterEventListener? eventListener) -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.BandwidthEstimate.get -> long
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.Builder.Build() -> AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator?
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.Builder.SetBandwidthStatistic(AndroidX.Media3.ExoPlayer.Upstream.Experimental.IBandwidthStatistic? bandwidthStatistic) -> AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.Builder?
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.Builder.SetMinBytesTransferred(long minBytesTransferred) -> AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.Builder?
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.Builder.SetMinSamples(int minSamples) -> AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.Builder?
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.OnBytesTransferred(AndroidX.Media3.DataSource.IDataSource? source, int bytesTransferred) -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.OnNetworkTypeChange(long newBandwidthEstimate) -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.OnTransferEnd(AndroidX.Media3.DataSource.IDataSource? source) -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.OnTransferInitializing(AndroidX.Media3.DataSource.IDataSource? source) -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.OnTransferStart(AndroidX.Media3.DataSource.IDataSource? source) -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.Experimental.SplitParallelSampleBandwidthEstimator.RemoveEventListener(AndroidX.Media3.ExoPlayer.Upstream.IBandwidthMeterEventListener? eventListener) -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.SlidingPercentile.AddSample(int weight, float value) -> void
virtual AndroidX.Media3.ExoPlayer.Upstream.SlidingPercentile.GetPercentile(float percentile) -> float
virtual AndroidX.Media3.ExoPlayer.Upstream.SlidingPercentile.Reset() -> void
virtual AndroidX.Media3.ExoPlayer.Util.DebugTextViewHelper.AudioString.get -> string?
virtual AndroidX.Media3.ExoPlayer.Util.DebugTextViewHelper.DebugString.get -> string?
virtual AndroidX.Media3.ExoPlayer.Util.DebugTextViewHelper.PlayerStateString.get -> string?
virtual AndroidX.Media3.ExoPlayer.Util.DebugTextViewHelper.VideoString.get -> string?
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.Logd(string? msg) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.Loge(string? msg) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnAudioAttributesChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.AudioAttributes? audioAttributes) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnAudioDecoderInitialized(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? decoderName, long initializedTimestampMs, long initializationDurationMs) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnAudioDecoderReleased(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? decoderName) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnAudioDisabled(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.DecoderCounters? decoderCounters) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnAudioEnabled(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.DecoderCounters? decoderCounters) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnAudioInputFormatChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.Format? format, AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation? decoderReuseEvaluation) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnAudioSessionIdChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int audioSessionId) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnAudioTrackInitialized(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? audioTrackConfig) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnAudioTrackReleased(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Audio.AudioSinkAudioTrackConfig? audioTrackConfig) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnAudioUnderrun(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int bufferSize, long bufferSizeMs, long elapsedSinceLastFeedMs) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnDownstreamFormatChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnDrmKeysLoaded(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnDrmKeysRemoved(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnDrmKeysRestored(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnDrmSessionAcquired(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int state) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnDrmSessionManagerError(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, Java.Lang.Exception? error) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnDrmSessionReleased(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnDroppedVideoFrames(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int droppedFrames, long elapsedMs) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnIsLoadingChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, bool isLoading) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnIsPlayingChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, bool isPlaying) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnLoadError(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Source.LoadEventInfo? loadEventInfo, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData, Java.IO.IOException? error, bool wasCanceled) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnMediaItemTransition(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.MediaItem? mediaItem, int reason) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnMetadata(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.Metadata? metadata) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnPlayWhenReadyChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, bool playWhenReady, int reason) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnPlaybackParametersChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.PlaybackParameters? playbackParameters) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnPlaybackStateChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int state) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnPlaybackSuppressionReasonChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int playbackSuppressionReason) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnPlayerError(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.PlaybackException? error) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnPositionDiscontinuity(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.PlayerPositionInfo? oldPosition, AndroidX.Media3.Common.PlayerPositionInfo? newPosition, int reason) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnRenderedFirstFrame(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, Java.Lang.Object? output, long renderTimeMs) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnRendererReadyChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int rendererIndex, int rendererTrackType, bool isRendererReady) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnRepeatModeChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int repeatMode) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnShuffleModeChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, bool shuffleModeEnabled) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnSkipSilenceEnabledChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, bool skipSilenceEnabled) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnSurfaceSizeChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int width, int height) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnTimelineChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, int reason) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnTracksChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.Tracks? tracks) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnUpstreamDiscarded(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.Source.MediaLoadData? mediaLoadData) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnVideoDecoderInitialized(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? decoderName, long initializedTimestampMs, long initializationDurationMs) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnVideoDecoderReleased(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, string? decoderName) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnVideoDisabled(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.DecoderCounters? decoderCounters) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnVideoEnabled(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.ExoPlayer.DecoderCounters? decoderCounters) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnVideoInputFormatChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.Format? format, AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation? decoderReuseEvaluation) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnVideoSizeChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, AndroidX.Media3.Common.VideoSize? videoSize) -> void
virtual AndroidX.Media3.ExoPlayer.Util.EventLogger.OnVolumeChanged(AndroidX.Media3.ExoPlayer.Analytics.AnalyticsListenerEventTime? eventTime, float volume) -> void
virtual AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.CanReuseDecoder(string? decoderName, AndroidX.Media3.Common.Format? oldFormat, AndroidX.Media3.Common.Format? newFormat) -> AndroidX.Media3.ExoPlayer.DecoderReuseEvaluation?
virtual AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.DropOutputBuffer(AndroidX.Media3.Decoder.VideoDecoderOutputBuffer? outputBuffer) -> void
virtual AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.EnableMayRenderStartOfStream() -> void
virtual AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.FlushDecoder() -> void
virtual AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.MaybeDropBuffersToKeyframe(long positionUs) -> bool
virtual AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.OnInputFormatChanged(AndroidX.Media3.ExoPlayer.FormatHolder? formatHolder) -> void
virtual AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.OnProcessedOutputBuffer(long presentationTimeUs) -> void
virtual AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.OnQueueInputBuffer(AndroidX.Media3.Decoder.DecoderInputBuffer? buffer) -> void
virtual AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.ReleaseDecoder() -> void
virtual AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.RenderOutputBuffer(AndroidX.Media3.Decoder.VideoDecoderOutputBuffer? outputBuffer, long presentationTimeUs, AndroidX.Media3.Common.Format? outputFormat) -> void
virtual AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.ShouldDropBuffersToKeyframe(long earlyUs, long elapsedRealtimeUs) -> bool
virtual AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.ShouldDropOutputBuffer(long earlyUs, long elapsedRealtimeUs) -> bool
virtual AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.ShouldForceRenderOutputBuffer(long earlyUs, long elapsedSinceLastRenderUs) -> bool
virtual AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.SkipOutputBuffer(AndroidX.Media3.Decoder.VideoDecoderOutputBuffer? outputBuffer) -> void
virtual AndroidX.Media3.ExoPlayer.Video.DecoderVideoRenderer.UpdateDroppedBufferCounters(int droppedInputBufferCount, int droppedDecoderBufferCount) -> void
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.BufferTimestampAdjustmentUs.get -> long
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.ChangeVideoSinkInputStream(AndroidX.Media3.ExoPlayer.Video.IVideoSink? videoSink, int inputType, AndroidX.Media3.Common.Format? format) -> void
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.CodecNeedsSetOutputSurfaceWorkaround(string? name) -> bool
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.DetachOutputSurfaceV35(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter? codec) -> void
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.DropOutputBuffer(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter? codec, int index, long presentationTimeUs) -> void
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.EnableMayRenderStartOfStream() -> void
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.GetCodecMaxValues(AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo? codecInfo, AndroidX.Media3.Common.Format? format, AndroidX.Media3.Common.Format![]? streamFormats) -> AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.CodecMaxValues?
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.GetMediaFormat(AndroidX.Media3.Common.Format? format, string? codecMimeType, AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.CodecMaxValues? codecMaxValues, float codecOperatingRate, bool deviceNeedsNoPostProcessWorkaround, int tunnelingAudioSessionId) -> Android.Media.MediaFormat?
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.MaybeDropBuffersToKeyframe(long positionUs, bool treatDroppedBuffersAsSkipped) -> bool
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.OnProcessedTunneledBuffer(long presentationTimeUs) -> void
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.RenderOutputBuffer(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter? codec, int index, long presentationTimeUs) -> void
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.RenderOutputBufferV21(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter? codec, int index, long presentationTimeUs, long releaseTimeNs) -> void
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.SetOutputSurfaceV23(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter? codec, Android.Views.Surface? surface) -> void
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.SetVideoEffects(System.Collections.Generic.IList<AndroidX.Media3.Common.IEffect!>? effects) -> void
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.ShouldDropBuffersToKeyframe(long earlyUs, long elapsedRealtimeUs, bool isLastBuffer) -> bool
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.ShouldDropFrame(long earlyUs, long elapsedRealtimeUs, bool isLastFrame) -> bool
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.ShouldDropOutputBuffer(long earlyUs, long elapsedRealtimeUs, bool isLastBuffer) -> bool
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.ShouldForceReleaseFrame(long earlyUs, long elapsedSinceLastReleaseUs) -> bool
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.ShouldForceRenderOutputBuffer(long earlyUs, long elapsedSinceLastRenderUs) -> bool
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.ShouldIgnoreFrame(long earlyUs, long positionUs, long elapsedRealtimeUs, bool isLastFrame, bool treatDroppedBuffersAsSkipped) -> bool
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.ShouldSkipBuffersWithIdenticalReleaseTime() -> bool
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.ShouldUseDetachedSurface(AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo? codecInfo) -> bool
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.ShouldUsePlaceholderSurface(AndroidX.Media3.ExoPlayer.MediaCodec.MediaCodecInfo? codecInfo) -> bool
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.SkipOutputBuffer(AndroidX.Media3.ExoPlayer.MediaCodec.IMediaCodecAdapter? codec, int index, long presentationTimeUs) -> void
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.Surface.get -> Android.Views.Surface?
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.UpdateDroppedBufferCounters(int droppedInputBufferCount, int droppedDecoderBufferCount) -> void
virtual AndroidX.Media3.ExoPlayer.Video.MediaCodecVideoRenderer.UpdateVideoFrameProcessingOffsetCounters(long processingOffsetUs) -> void
virtual AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.FrameReleaseInfo.EarlyUs.get -> long
virtual AndroidX.Media3.ExoPlayer.Video.VideoFrameReleaseControl.FrameReleaseInfo.ReleaseTimeNs.get -> long
