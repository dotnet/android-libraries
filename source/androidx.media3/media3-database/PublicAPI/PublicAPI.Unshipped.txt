#nullable enable
AndroidX.Media3.Database.DatabaseIOException
AndroidX.Media3.Database.DatabaseIOException.DatabaseIOException(Android.Database.SQLException? cause) -> void
AndroidX.Media3.Database.DatabaseIOException.DatabaseIOException(Android.Database.SQLException? cause, string? message) -> void
AndroidX.Media3.Database.DefaultDatabaseProvider
AndroidX.Media3.Database.DefaultDatabaseProvider.DefaultDatabaseProvider(Android.Database.Sqlite.SQLiteOpenHelper? sqliteOpenHelper) -> void
AndroidX.Media3.Database.DefaultDatabaseProvider.InterfaceConsts
AndroidX.Media3.Database.DefaultDatabaseProvider.ReadableDatabase.get -> Android.Database.Sqlite.SQLiteDatabase?
AndroidX.Media3.Database.DefaultDatabaseProvider.WritableDatabase.get -> Android.Database.Sqlite.SQLiteDatabase?
AndroidX.Media3.Database.ExoDatabaseProvider
AndroidX.Media3.Database.ExoDatabaseProvider.ExoDatabaseProvider(Android.Content.Context? context) -> void
AndroidX.Media3.Database.IDatabaseProvider
AndroidX.Media3.Database.IDatabaseProvider.ReadableDatabase.get -> Android.Database.Sqlite.SQLiteDatabase?
AndroidX.Media3.Database.IDatabaseProvider.WritableDatabase.get -> Android.Database.Sqlite.SQLiteDatabase?
AndroidX.Media3.Database.StandaloneDatabaseProvider
AndroidX.Media3.Database.StandaloneDatabaseProvider.InterfaceConsts
AndroidX.Media3.Database.StandaloneDatabaseProvider.StandaloneDatabaseProvider(Android.Content.Context? context) -> void
AndroidX.Media3.Database.StandaloneDatabaseProvider.StandaloneDatabaseProvider(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.Database.VersionTable
const AndroidX.Media3.Database.DefaultDatabaseProvider.InterfaceConsts.TablePrefix = "ExoPlayer" -> string!
const AndroidX.Media3.Database.StandaloneDatabaseProvider.InterfaceConsts.TablePrefix = "ExoPlayer" -> string!
const AndroidX.Media3.Database.VersionTable.FeatureCacheContentMetadata = 1 -> int
const AndroidX.Media3.Database.VersionTable.FeatureCacheFileMetadata = 2 -> int
const AndroidX.Media3.Database.VersionTable.FeatureExternal = 1000 -> int
const AndroidX.Media3.Database.VersionTable.FeatureOffline = 0 -> int
const AndroidX.Media3.Database.VersionTable.VersionUnset = -1 -> int
override AndroidX.Media3.Database.DatabaseIOException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.Database.DefaultDatabaseProvider.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.Database.ExoDatabaseProvider.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.Database.StandaloneDatabaseProvider.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.Database.StandaloneDatabaseProvider.OnCreate(Android.Database.Sqlite.SQLiteDatabase? db) -> void
override AndroidX.Media3.Database.StandaloneDatabaseProvider.OnUpgrade(Android.Database.Sqlite.SQLiteDatabase? db, int oldVersion, int newVersion) -> void
override AndroidX.Media3.Database.StandaloneDatabaseProvider.ThresholdClass.get -> nint
override AndroidX.Media3.Database.StandaloneDatabaseProvider.ThresholdType.get -> System.Type!
override AndroidX.Media3.Database.VersionTable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
static AndroidX.Media3.Database.VersionTable.GetVersion(Android.Database.Sqlite.SQLiteDatabase? database, int feature, string? instanceUid) -> int
static AndroidX.Media3.Database.VersionTable.RemoveVersion(Android.Database.Sqlite.SQLiteDatabase? writableDatabase, int feature, string? instanceUid) -> void
static AndroidX.Media3.Database.VersionTable.SetVersion(Android.Database.Sqlite.SQLiteDatabase? writableDatabase, int feature, string? instanceUid, int version) -> void
