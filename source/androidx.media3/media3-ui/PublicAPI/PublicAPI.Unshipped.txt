#nullable enable
AndroidX.Media3.UI.AspectRatioFrameLayout
AndroidX.Media3.UI.AspectRatioFrameLayout.AspectRatio -> System.EventHandler<AndroidX.Media3.UI.AspectRatioFrameLayout.AspectRatioEventArgs!>!
AndroidX.Media3.UI.AspectRatioFrameLayout.AspectRatioEventArgs
AndroidX.Media3.UI.AspectRatioFrameLayout.AspectRatioEventArgs.AspectRatioEventArgs(float p0, float p1, bool p2) -> void
AndroidX.Media3.UI.AspectRatioFrameLayout.AspectRatioEventArgs.P0.get -> float
AndroidX.Media3.UI.AspectRatioFrameLayout.AspectRatioEventArgs.P1.get -> float
AndroidX.Media3.UI.AspectRatioFrameLayout.AspectRatioEventArgs.P2.get -> bool
AndroidX.Media3.UI.AspectRatioFrameLayout.AspectRatioFrameLayout(Android.Content.Context? context) -> void
AndroidX.Media3.UI.AspectRatioFrameLayout.AspectRatioFrameLayout(Android.Content.Context? context, Android.Util.IAttributeSet? attrs) -> void
AndroidX.Media3.UI.AspectRatioFrameLayout.IAspectRatioListener
AndroidX.Media3.UI.AspectRatioFrameLayout.IAspectRatioListener.OnAspectRatioUpdated(float p0, float p1, bool p2) -> void
AndroidX.Media3.UI.AspectRatioFrameLayout.IResizeMode
AndroidX.Media3.UI.AspectRatioFrameLayout.ResizeMode.get -> int
AndroidX.Media3.UI.AspectRatioFrameLayout.ResizeMode.set -> void
AndroidX.Media3.UI.AspectRatioFrameLayout.SetAspectRatio(float widthHeightRatio) -> void
AndroidX.Media3.UI.AspectRatioFrameLayout.SetAspectRatioListener(AndroidX.Media3.UI.AspectRatioFrameLayout.IAspectRatioListener? listener) -> void
AndroidX.Media3.UI.CaptionStyleCompat
AndroidX.Media3.UI.CaptionStyleCompat.BackgroundColor.get -> int
AndroidX.Media3.UI.CaptionStyleCompat.BackgroundColor.set -> void
AndroidX.Media3.UI.CaptionStyleCompat.CaptionStyleCompat(int foregroundColor, int backgroundColor, int windowColor, int edgeType, int edgeColor, Android.Graphics.Typeface? typeface) -> void
AndroidX.Media3.UI.CaptionStyleCompat.EdgeColor.get -> int
AndroidX.Media3.UI.CaptionStyleCompat.EdgeColor.set -> void
AndroidX.Media3.UI.CaptionStyleCompat.EdgeType.get -> int
AndroidX.Media3.UI.CaptionStyleCompat.EdgeType.set -> void
AndroidX.Media3.UI.CaptionStyleCompat.ForegroundColor.get -> int
AndroidX.Media3.UI.CaptionStyleCompat.ForegroundColor.set -> void
AndroidX.Media3.UI.CaptionStyleCompat.IEdgeType
AndroidX.Media3.UI.CaptionStyleCompat.Typeface.get -> Android.Graphics.Typeface?
AndroidX.Media3.UI.CaptionStyleCompat.Typeface.set -> void
AndroidX.Media3.UI.CaptionStyleCompat.WindowColor.get -> int
AndroidX.Media3.UI.CaptionStyleCompat.WindowColor.set -> void
AndroidX.Media3.UI.DefaultMediaDescriptionAdapter
AndroidX.Media3.UI.DefaultMediaDescriptionAdapter.CreateCurrentContentIntent(AndroidX.Media3.Common.IPlayer? player) -> Android.App.PendingIntent?
AndroidX.Media3.UI.DefaultMediaDescriptionAdapter.DefaultMediaDescriptionAdapter(Android.App.PendingIntent? pendingIntent) -> void
AndroidX.Media3.UI.DefaultMediaDescriptionAdapter.GetCurrentContentText(AndroidX.Media3.Common.IPlayer? player) -> string?
AndroidX.Media3.UI.DefaultMediaDescriptionAdapter.GetCurrentContentTextFormatted(AndroidX.Media3.Common.IPlayer? player) -> Java.Lang.ICharSequence?
AndroidX.Media3.UI.DefaultMediaDescriptionAdapter.GetCurrentContentTitle(AndroidX.Media3.Common.IPlayer? player) -> string?
AndroidX.Media3.UI.DefaultMediaDescriptionAdapter.GetCurrentContentTitleFormatted(AndroidX.Media3.Common.IPlayer? player) -> Java.Lang.ICharSequence?
AndroidX.Media3.UI.DefaultMediaDescriptionAdapter.GetCurrentLargeIcon(AndroidX.Media3.Common.IPlayer? player, AndroidX.Media3.UI.PlayerNotificationManager.BitmapCallback? callback) -> Android.Graphics.Bitmap?
AndroidX.Media3.UI.DefaultTimeBar
AndroidX.Media3.UI.DefaultTimeBar.DefaultTimeBar(Android.Content.Context? context) -> void
AndroidX.Media3.UI.DefaultTimeBar.DefaultTimeBar(Android.Content.Context? context, Android.Util.IAttributeSet? attrs) -> void
AndroidX.Media3.UI.DefaultTimeBar.DefaultTimeBar(Android.Content.Context? context, Android.Util.IAttributeSet? attrs, int defStyleAttr) -> void
AndroidX.Media3.UI.DefaultTimeBar.DefaultTimeBar(Android.Content.Context? context, Android.Util.IAttributeSet? attrs, int defStyleAttr, Android.Util.IAttributeSet? timebarAttrs) -> void
AndroidX.Media3.UI.DefaultTimeBar.DefaultTimeBar(Android.Content.Context? context, Android.Util.IAttributeSet? attrs, int defStyleAttr, Android.Util.IAttributeSet? timebarAttrs, int defStyleRes) -> void
AndroidX.Media3.UI.DefaultTimeBar.DefaultTimeBar(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.UI.DefaultTimeBar.SetEnabled(bool p0) -> void
AndroidX.Media3.UI.DefaultTrackNameProvider
AndroidX.Media3.UI.DefaultTrackNameProvider.DefaultTrackNameProvider(Android.Content.Res.Resources? resources) -> void
AndroidX.Media3.UI.DefaultTrackNameProvider.DefaultTrackNameProvider(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.UI.ITimeBar
AndroidX.Media3.UI.ITimeBar.AddListener(AndroidX.Media3.UI.ITimeBarOnScrubListener? p0) -> void
AndroidX.Media3.UI.ITimeBar.PreferredUpdateDelay.get -> long
AndroidX.Media3.UI.ITimeBar.RemoveListener(AndroidX.Media3.UI.ITimeBarOnScrubListener? p0) -> void
AndroidX.Media3.UI.ITimeBar.SetAdGroupTimesMs(long[]? p0, bool[]? p1, int p2) -> void
AndroidX.Media3.UI.ITimeBar.SetBufferedPosition(long p0) -> void
AndroidX.Media3.UI.ITimeBar.SetDuration(long p0) -> void
AndroidX.Media3.UI.ITimeBar.SetEnabled(bool p0) -> void
AndroidX.Media3.UI.ITimeBar.SetKeyCountIncrement(int p0) -> void
AndroidX.Media3.UI.ITimeBar.SetKeyTimeIncrement(long p0) -> void
AndroidX.Media3.UI.ITimeBar.SetPosition(long p0) -> void
AndroidX.Media3.UI.ITimeBarOnScrubListener
AndroidX.Media3.UI.ITimeBarOnScrubListener.OnScrubMove(AndroidX.Media3.UI.ITimeBar? p0, long p1) -> void
AndroidX.Media3.UI.ITimeBarOnScrubListener.OnScrubStart(AndroidX.Media3.UI.ITimeBar? p0, long p1) -> void
AndroidX.Media3.UI.ITimeBarOnScrubListener.OnScrubStop(AndroidX.Media3.UI.ITimeBar? p0, long p1, bool p2) -> void
AndroidX.Media3.UI.ITrackNameProvider
AndroidX.Media3.UI.ITrackNameProvider.GetTrackName(AndroidX.Media3.Common.Format? p0) -> string?
AndroidX.Media3.UI.LegacyPlayerControlView
AndroidX.Media3.UI.LegacyPlayerControlView.IProgressUpdateListener
AndroidX.Media3.UI.LegacyPlayerControlView.IProgressUpdateListener.OnProgressUpdate(long p0, long p1) -> void
AndroidX.Media3.UI.LegacyPlayerControlView.IVisibilityListener
AndroidX.Media3.UI.LegacyPlayerControlView.IVisibilityListener.OnVisibilityChange(int p0) -> void
AndroidX.Media3.UI.LegacyPlayerControlView.LegacyPlayerControlView(Android.Content.Context? context) -> void
AndroidX.Media3.UI.LegacyPlayerControlView.LegacyPlayerControlView(Android.Content.Context? context, Android.Util.IAttributeSet? attrs) -> void
AndroidX.Media3.UI.LegacyPlayerControlView.LegacyPlayerControlView(Android.Content.Context? context, Android.Util.IAttributeSet? attrs, int defStyleAttr) -> void
AndroidX.Media3.UI.LegacyPlayerControlView.LegacyPlayerControlView(Android.Content.Context? context, Android.Util.IAttributeSet? attrs, int defStyleAttr, Android.Util.IAttributeSet? playbackAttrs) -> void
AndroidX.Media3.UI.LegacyPlayerControlView.LegacyPlayerControlView(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.UI.LegacyPlayerControlView.ProgressUpdate -> System.EventHandler<AndroidX.Media3.UI.LegacyPlayerControlView.ProgressUpdateEventArgs!>!
AndroidX.Media3.UI.LegacyPlayerControlView.ProgressUpdateEventArgs
AndroidX.Media3.UI.LegacyPlayerControlView.ProgressUpdateEventArgs.P0.get -> long
AndroidX.Media3.UI.LegacyPlayerControlView.ProgressUpdateEventArgs.P1.get -> long
AndroidX.Media3.UI.LegacyPlayerControlView.ProgressUpdateEventArgs.ProgressUpdateEventArgs(long p0, long p1) -> void
AndroidX.Media3.UI.LegacyPlayerControlView.VisibilityEvent -> System.EventHandler<AndroidX.Media3.UI.LegacyPlayerControlView.VisibilityEventArgs!>!
AndroidX.Media3.UI.LegacyPlayerControlView.VisibilityEventArgs
AndroidX.Media3.UI.LegacyPlayerControlView.VisibilityEventArgs.P0.get -> int
AndroidX.Media3.UI.LegacyPlayerControlView.VisibilityEventArgs.VisibilityEventArgs(int p0) -> void
AndroidX.Media3.UI.PlayerControlView
AndroidX.Media3.UI.PlayerControlView.FullScreenModeChanged -> System.EventHandler<AndroidX.Media3.UI.PlayerControlView.FullScreenModeChangedEventArgs!>!
AndroidX.Media3.UI.PlayerControlView.FullScreenModeChangedEventArgs
AndroidX.Media3.UI.PlayerControlView.FullScreenModeChangedEventArgs.FullScreenModeChangedEventArgs(bool p0) -> void
AndroidX.Media3.UI.PlayerControlView.FullScreenModeChangedEventArgs.P0.get -> bool
AndroidX.Media3.UI.PlayerControlView.IOnFullScreenModeChangedListener
AndroidX.Media3.UI.PlayerControlView.IOnFullScreenModeChangedListener.OnFullScreenModeChanged(bool p0) -> void
AndroidX.Media3.UI.PlayerControlView.IProgressUpdateListener
AndroidX.Media3.UI.PlayerControlView.IProgressUpdateListener.OnProgressUpdate(long p0, long p1) -> void
AndroidX.Media3.UI.PlayerControlView.IVisibilityListener
AndroidX.Media3.UI.PlayerControlView.IVisibilityListener.OnVisibilityChange(int p0) -> void
AndroidX.Media3.UI.PlayerControlView.PlayerControlView(Android.Content.Context? context) -> void
AndroidX.Media3.UI.PlayerControlView.PlayerControlView(Android.Content.Context? context, Android.Util.IAttributeSet? attrs) -> void
AndroidX.Media3.UI.PlayerControlView.PlayerControlView(Android.Content.Context? context, Android.Util.IAttributeSet? attrs, int defStyleAttr) -> void
AndroidX.Media3.UI.PlayerControlView.PlayerControlView(Android.Content.Context? context, Android.Util.IAttributeSet? attrs, int defStyleAttr, Android.Util.IAttributeSet? playbackAttrs) -> void
AndroidX.Media3.UI.PlayerControlView.PlayerControlView(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.UI.PlayerControlView.ProgressUpdate -> System.EventHandler<AndroidX.Media3.UI.PlayerControlView.ProgressUpdateEventArgs!>!
AndroidX.Media3.UI.PlayerControlView.ProgressUpdateEventArgs
AndroidX.Media3.UI.PlayerControlView.ProgressUpdateEventArgs.P0.get -> long
AndroidX.Media3.UI.PlayerControlView.ProgressUpdateEventArgs.P1.get -> long
AndroidX.Media3.UI.PlayerControlView.ProgressUpdateEventArgs.ProgressUpdateEventArgs(long p0, long p1) -> void
AndroidX.Media3.UI.PlayerControlView.VisibilityEvent -> System.EventHandler<AndroidX.Media3.UI.PlayerControlView.VisibilityEventArgs!>!
AndroidX.Media3.UI.PlayerControlView.VisibilityEventArgs
AndroidX.Media3.UI.PlayerControlView.VisibilityEventArgs.P0.get -> int
AndroidX.Media3.UI.PlayerControlView.VisibilityEventArgs.VisibilityEventArgs(int p0) -> void
AndroidX.Media3.UI.PlayerNotificationManager
AndroidX.Media3.UI.PlayerNotificationManager.BitmapCallback
AndroidX.Media3.UI.PlayerNotificationManager.BitmapCallback.OnBitmap(Android.Graphics.Bitmap? bitmap) -> void
AndroidX.Media3.UI.PlayerNotificationManager.Builder
AndroidX.Media3.UI.PlayerNotificationManager.Builder.Builder(Android.Content.Context? context, int notificationId, string? channelId) -> void
AndroidX.Media3.UI.PlayerNotificationManager.Builder.Builder(Android.Content.Context? context, int notificationId, string? channelId, AndroidX.Media3.UI.PlayerNotificationManager.IMediaDescriptionAdapter? mediaDescriptionAdapter) -> void
AndroidX.Media3.UI.PlayerNotificationManager.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.UI.PlayerNotificationManager.Builder.ChannelDescriptionResourceId.get -> int
AndroidX.Media3.UI.PlayerNotificationManager.Builder.ChannelDescriptionResourceId.set -> void
AndroidX.Media3.UI.PlayerNotificationManager.Builder.ChannelId.get -> string?
AndroidX.Media3.UI.PlayerNotificationManager.Builder.ChannelId.set -> void
AndroidX.Media3.UI.PlayerNotificationManager.Builder.ChannelImportance.get -> int
AndroidX.Media3.UI.PlayerNotificationManager.Builder.ChannelImportance.set -> void
AndroidX.Media3.UI.PlayerNotificationManager.Builder.ChannelNameResourceId.get -> int
AndroidX.Media3.UI.PlayerNotificationManager.Builder.ChannelNameResourceId.set -> void
AndroidX.Media3.UI.PlayerNotificationManager.Builder.Context.get -> Android.Content.Context?
AndroidX.Media3.UI.PlayerNotificationManager.Builder.Context.set -> void
AndroidX.Media3.UI.PlayerNotificationManager.Builder.CustomActionReceiver.get -> AndroidX.Media3.UI.PlayerNotificationManager.ICustomActionReceiver?
AndroidX.Media3.UI.PlayerNotificationManager.Builder.CustomActionReceiver.set -> void
AndroidX.Media3.UI.PlayerNotificationManager.Builder.FastForwardActionIconResourceId.get -> int
AndroidX.Media3.UI.PlayerNotificationManager.Builder.FastForwardActionIconResourceId.set -> void
AndroidX.Media3.UI.PlayerNotificationManager.Builder.GroupKey.get -> string?
AndroidX.Media3.UI.PlayerNotificationManager.Builder.GroupKey.set -> void
AndroidX.Media3.UI.PlayerNotificationManager.Builder.MediaDescriptionAdapter.get -> AndroidX.Media3.UI.PlayerNotificationManager.IMediaDescriptionAdapter?
AndroidX.Media3.UI.PlayerNotificationManager.Builder.MediaDescriptionAdapter.set -> void
AndroidX.Media3.UI.PlayerNotificationManager.Builder.NextActionIconResourceId.get -> int
AndroidX.Media3.UI.PlayerNotificationManager.Builder.NextActionIconResourceId.set -> void
AndroidX.Media3.UI.PlayerNotificationManager.Builder.NotificationId.get -> int
AndroidX.Media3.UI.PlayerNotificationManager.Builder.NotificationId.set -> void
AndroidX.Media3.UI.PlayerNotificationManager.Builder.NotificationListener.get -> AndroidX.Media3.UI.PlayerNotificationManager.INotificationListener?
AndroidX.Media3.UI.PlayerNotificationManager.Builder.NotificationListener.set -> void
AndroidX.Media3.UI.PlayerNotificationManager.Builder.PauseActionIconResourceId.get -> int
AndroidX.Media3.UI.PlayerNotificationManager.Builder.PauseActionIconResourceId.set -> void
AndroidX.Media3.UI.PlayerNotificationManager.Builder.PlayActionIconResourceId.get -> int
AndroidX.Media3.UI.PlayerNotificationManager.Builder.PlayActionIconResourceId.set -> void
AndroidX.Media3.UI.PlayerNotificationManager.Builder.PreviousActionIconResourceId.get -> int
AndroidX.Media3.UI.PlayerNotificationManager.Builder.PreviousActionIconResourceId.set -> void
AndroidX.Media3.UI.PlayerNotificationManager.Builder.RewindActionIconResourceId.get -> int
AndroidX.Media3.UI.PlayerNotificationManager.Builder.RewindActionIconResourceId.set -> void
AndroidX.Media3.UI.PlayerNotificationManager.Builder.SmallIconResourceId.get -> int
AndroidX.Media3.UI.PlayerNotificationManager.Builder.SmallIconResourceId.set -> void
AndroidX.Media3.UI.PlayerNotificationManager.Builder.StopActionIconResourceId.get -> int
AndroidX.Media3.UI.PlayerNotificationManager.Builder.StopActionIconResourceId.set -> void
AndroidX.Media3.UI.PlayerNotificationManager.ICustomActionReceiver
AndroidX.Media3.UI.PlayerNotificationManager.ICustomActionReceiver.CreateCustomActions(Android.Content.Context? p0, int p1) -> System.Collections.Generic.IDictionary<string!, AndroidX.Core.App.NotificationCompat.Action!>?
AndroidX.Media3.UI.PlayerNotificationManager.ICustomActionReceiver.GetCustomActions(AndroidX.Media3.Common.IPlayer? p0) -> System.Collections.Generic.IList<string!>?
AndroidX.Media3.UI.PlayerNotificationManager.ICustomActionReceiver.OnCustomAction(AndroidX.Media3.Common.IPlayer? p0, string? p1, Android.Content.Intent? p2) -> void
AndroidX.Media3.UI.PlayerNotificationManager.IMediaDescriptionAdapter
AndroidX.Media3.UI.PlayerNotificationManager.IMediaDescriptionAdapter.CreateCurrentContentIntent(AndroidX.Media3.Common.IPlayer? p0) -> Android.App.PendingIntent?
AndroidX.Media3.UI.PlayerNotificationManager.IMediaDescriptionAdapter.GetCurrentContentTextFormatted(AndroidX.Media3.Common.IPlayer? p0) -> Java.Lang.ICharSequence?
AndroidX.Media3.UI.PlayerNotificationManager.IMediaDescriptionAdapter.GetCurrentContentTitleFormatted(AndroidX.Media3.Common.IPlayer? p0) -> Java.Lang.ICharSequence?
AndroidX.Media3.UI.PlayerNotificationManager.IMediaDescriptionAdapter.GetCurrentLargeIcon(AndroidX.Media3.Common.IPlayer? p0, AndroidX.Media3.UI.PlayerNotificationManager.BitmapCallback? p1) -> Android.Graphics.Bitmap?
AndroidX.Media3.UI.PlayerNotificationManager.IMediaDescriptionAdapter.GetCurrentSubText(AndroidX.Media3.Common.IPlayer? player) -> string?
AndroidX.Media3.UI.PlayerNotificationManager.IMediaDescriptionAdapter.GetCurrentSubTextFormatted(AndroidX.Media3.Common.IPlayer? player) -> Java.Lang.ICharSequence?
AndroidX.Media3.UI.PlayerNotificationManager.INotificationListener
AndroidX.Media3.UI.PlayerNotificationManager.INotificationListener.OnNotificationCancelled(int notificationId, bool dismissedByUser) -> void
AndroidX.Media3.UI.PlayerNotificationManager.INotificationListener.OnNotificationPosted(int notificationId, Android.App.Notification? notification, bool ongoing) -> void
AndroidX.Media3.UI.PlayerNotificationManager.IPriority
AndroidX.Media3.UI.PlayerNotificationManager.IVisibility
AndroidX.Media3.UI.PlayerNotificationManager.Invalidate() -> void
AndroidX.Media3.UI.PlayerNotificationManager.NotificationCancelledEventArgs
AndroidX.Media3.UI.PlayerNotificationManager.NotificationCancelledEventArgs.DismissedByUser.get -> bool
AndroidX.Media3.UI.PlayerNotificationManager.NotificationCancelledEventArgs.NotificationCancelledEventArgs(int notificationId, bool dismissedByUser) -> void
AndroidX.Media3.UI.PlayerNotificationManager.NotificationCancelledEventArgs.NotificationId.get -> int
AndroidX.Media3.UI.PlayerNotificationManager.NotificationPostedEventArgs
AndroidX.Media3.UI.PlayerNotificationManager.NotificationPostedEventArgs.Notification.get -> Android.App.Notification?
AndroidX.Media3.UI.PlayerNotificationManager.NotificationPostedEventArgs.NotificationId.get -> int
AndroidX.Media3.UI.PlayerNotificationManager.NotificationPostedEventArgs.NotificationPostedEventArgs(int notificationId, Android.App.Notification? notification, bool ongoing) -> void
AndroidX.Media3.UI.PlayerNotificationManager.NotificationPostedEventArgs.Ongoing.get -> bool
AndroidX.Media3.UI.PlayerNotificationManager.PlayerNotificationManager(Android.Content.Context? context, string? channelId, int notificationId, AndroidX.Media3.UI.PlayerNotificationManager.IMediaDescriptionAdapter? mediaDescriptionAdapter, AndroidX.Media3.UI.PlayerNotificationManager.INotificationListener? notificationListener, AndroidX.Media3.UI.PlayerNotificationManager.ICustomActionReceiver? customActionReceiver, int smallIconResourceId, int playActionIconResourceId, int pauseActionIconResourceId, int stopActionIconResourceId, int rewindActionIconResourceId, int fastForwardActionIconResourceId, int previousActionIconResourceId, int nextActionIconResourceId, string? groupKey) -> void
AndroidX.Media3.UI.PlayerNotificationManager.PlayerNotificationManager(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.UI.PlayerNotificationManager.SetBadgeIconType(int badgeIconType) -> void
AndroidX.Media3.UI.PlayerNotificationManager.SetColor(int color) -> void
AndroidX.Media3.UI.PlayerNotificationManager.SetColorized(bool colorized) -> void
AndroidX.Media3.UI.PlayerNotificationManager.SetDefaults(int defaults) -> void
AndroidX.Media3.UI.PlayerNotificationManager.SetMediaSessionToken(Android.Media.Session.MediaSession.Token? token) -> void
AndroidX.Media3.UI.PlayerNotificationManager.SetPlayer(AndroidX.Media3.Common.IPlayer? player) -> void
AndroidX.Media3.UI.PlayerNotificationManager.SetPriority(int priority) -> void
AndroidX.Media3.UI.PlayerNotificationManager.SetSmallIcon(int smallIconResourceId) -> void
AndroidX.Media3.UI.PlayerNotificationManager.SetUseChronometer(bool useChronometer) -> void
AndroidX.Media3.UI.PlayerNotificationManager.SetUseFastForwardAction(bool useFastForwardAction) -> void
AndroidX.Media3.UI.PlayerNotificationManager.SetUseFastForwardActionInCompactView(bool useFastForwardActionInCompactView) -> void
AndroidX.Media3.UI.PlayerNotificationManager.SetUseNextAction(bool useNextAction) -> void
AndroidX.Media3.UI.PlayerNotificationManager.SetUseNextActionInCompactView(bool useNextActionInCompactView) -> void
AndroidX.Media3.UI.PlayerNotificationManager.SetUsePlayPauseActions(bool usePlayPauseActions) -> void
AndroidX.Media3.UI.PlayerNotificationManager.SetUsePreviousAction(bool usePreviousAction) -> void
AndroidX.Media3.UI.PlayerNotificationManager.SetUsePreviousActionInCompactView(bool usePreviousActionInCompactView) -> void
AndroidX.Media3.UI.PlayerNotificationManager.SetUseRewindAction(bool useRewindAction) -> void
AndroidX.Media3.UI.PlayerNotificationManager.SetUseRewindActionInCompactView(bool useRewindActionInCompactView) -> void
AndroidX.Media3.UI.PlayerNotificationManager.SetUseStopAction(bool useStopAction) -> void
AndroidX.Media3.UI.PlayerNotificationManager.SetVisibility(int visibility) -> void
AndroidX.Media3.UI.PlayerNotificationManagerIMediaDescriptionAdapterExtensions
AndroidX.Media3.UI.PlayerView
AndroidX.Media3.UI.PlayerView.AspectRatio -> System.EventHandler<AndroidX.Media3.UI.AspectRatioFrameLayout.AspectRatioEventArgs!>!
AndroidX.Media3.UI.PlayerView.ControllerOnFullScreenModeChanged -> System.EventHandler<AndroidX.Media3.UI.PlayerControlView.FullScreenModeChangedEventArgs!>!
AndroidX.Media3.UI.PlayerView.ControllerVisibility -> System.EventHandler<AndroidX.Media3.UI.PlayerView.ControllerVisibilityEventArgs!>!
AndroidX.Media3.UI.PlayerView.ControllerVisibilityEventArgs
AndroidX.Media3.UI.PlayerView.ControllerVisibilityEventArgs.ControllerVisibilityEventArgs(int p0) -> void
AndroidX.Media3.UI.PlayerView.ControllerVisibilityEventArgs.P0.get -> int
AndroidX.Media3.UI.PlayerView.FullscreenButtonClick -> System.EventHandler<AndroidX.Media3.UI.PlayerView.FullscreenButtonClickEventArgs!>!
AndroidX.Media3.UI.PlayerView.FullscreenButtonClickEventArgs
AndroidX.Media3.UI.PlayerView.FullscreenButtonClickEventArgs.FullscreenButtonClickEventArgs(bool p0) -> void
AndroidX.Media3.UI.PlayerView.FullscreenButtonClickEventArgs.P0.get -> bool
AndroidX.Media3.UI.PlayerView.IArtworkDisplayMode
AndroidX.Media3.UI.PlayerView.IControllerVisibilityListener
AndroidX.Media3.UI.PlayerView.IControllerVisibilityListener.OnVisibilityChanged(int p0) -> void
AndroidX.Media3.UI.PlayerView.IFullscreenButtonClickListener
AndroidX.Media3.UI.PlayerView.IFullscreenButtonClickListener.OnFullscreenButtonClick(bool p0) -> void
AndroidX.Media3.UI.PlayerView.IImageDisplayMode
AndroidX.Media3.UI.PlayerView.IShowBuffering
AndroidX.Media3.UI.PlayerView.PlayerView(Android.Content.Context? context) -> void
AndroidX.Media3.UI.PlayerView.PlayerView(Android.Content.Context? context, Android.Util.IAttributeSet? attrs) -> void
AndroidX.Media3.UI.PlayerView.PlayerView(Android.Content.Context? context, Android.Util.IAttributeSet? attrs, int defStyleAttr) -> void
AndroidX.Media3.UI.PlayerView.PlayerView(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.UI.PlayerView.SetCustomErrorMessage(string? message) -> void
AndroidX.Media3.UI.ScrubMoveEventArgs
AndroidX.Media3.UI.ScrubMoveEventArgs.P0.get -> AndroidX.Media3.UI.ITimeBar?
AndroidX.Media3.UI.ScrubMoveEventArgs.P1.get -> long
AndroidX.Media3.UI.ScrubMoveEventArgs.ScrubMoveEventArgs(AndroidX.Media3.UI.ITimeBar? p0, long p1) -> void
AndroidX.Media3.UI.ScrubStartEventArgs
AndroidX.Media3.UI.ScrubStartEventArgs.P0.get -> AndroidX.Media3.UI.ITimeBar?
AndroidX.Media3.UI.ScrubStartEventArgs.P1.get -> long
AndroidX.Media3.UI.ScrubStartEventArgs.ScrubStartEventArgs(AndroidX.Media3.UI.ITimeBar? p0, long p1) -> void
AndroidX.Media3.UI.ScrubStopEventArgs
AndroidX.Media3.UI.ScrubStopEventArgs.P0.get -> AndroidX.Media3.UI.ITimeBar?
AndroidX.Media3.UI.ScrubStopEventArgs.P1.get -> long
AndroidX.Media3.UI.ScrubStopEventArgs.P2.get -> bool
AndroidX.Media3.UI.ScrubStopEventArgs.ScrubStopEventArgs(AndroidX.Media3.UI.ITimeBar? p0, long p1, bool p2) -> void
AndroidX.Media3.UI.SubtitleView
AndroidX.Media3.UI.SubtitleView.IViewType
AndroidX.Media3.UI.SubtitleView.SetApplyEmbeddedFontSizes(bool applyEmbeddedFontSizes) -> void
AndroidX.Media3.UI.SubtitleView.SetApplyEmbeddedStyles(bool applyEmbeddedStyles) -> void
AndroidX.Media3.UI.SubtitleView.SetBottomPaddingFraction(float bottomPaddingFraction) -> void
AndroidX.Media3.UI.SubtitleView.SetCues(System.Collections.Generic.IList<AndroidX.Media3.Common.Text.Cue!>? cues) -> void
AndroidX.Media3.UI.SubtitleView.SetFixedTextSize(int unit, float size) -> void
AndroidX.Media3.UI.SubtitleView.SetFractionalTextSize(float fractionOfHeight) -> void
AndroidX.Media3.UI.SubtitleView.SetFractionalTextSize(float fractionOfHeight, bool ignorePadding) -> void
AndroidX.Media3.UI.SubtitleView.SetStyle(AndroidX.Media3.UI.CaptionStyleCompat? style) -> void
AndroidX.Media3.UI.SubtitleView.SetUserDefaultStyle() -> void
AndroidX.Media3.UI.SubtitleView.SetUserDefaultTextSize() -> void
AndroidX.Media3.UI.SubtitleView.SetViewType(int viewType) -> void
AndroidX.Media3.UI.SubtitleView.SubtitleView(Android.Content.Context? context) -> void
AndroidX.Media3.UI.SubtitleView.SubtitleView(Android.Content.Context? context, Android.Util.IAttributeSet? attrs) -> void
AndroidX.Media3.UI.TrackSelectionDialogBuilder
AndroidX.Media3.UI.TrackSelectionDialogBuilder.Build() -> Android.App.Dialog?
AndroidX.Media3.UI.TrackSelectionDialogBuilder.IDialogCallback
AndroidX.Media3.UI.TrackSelectionDialogBuilder.IDialogCallback.OnTracksSelected(bool p0, System.Collections.Generic.IDictionary<AndroidX.Media3.Common.TrackGroup!, AndroidX.Media3.Common.TrackSelectionOverride!>? p1) -> void
AndroidX.Media3.UI.TrackSelectionDialogBuilder.SetAllowAdaptiveSelections(bool allowAdaptiveSelections) -> AndroidX.Media3.UI.TrackSelectionDialogBuilder?
AndroidX.Media3.UI.TrackSelectionDialogBuilder.SetAllowMultipleOverrides(bool allowMultipleOverrides) -> AndroidX.Media3.UI.TrackSelectionDialogBuilder?
AndroidX.Media3.UI.TrackSelectionDialogBuilder.SetIsDisabled(bool isDisabled) -> AndroidX.Media3.UI.TrackSelectionDialogBuilder?
AndroidX.Media3.UI.TrackSelectionDialogBuilder.SetOverride(AndroidX.Media3.Common.TrackSelectionOverride? override) -> AndroidX.Media3.UI.TrackSelectionDialogBuilder?
AndroidX.Media3.UI.TrackSelectionDialogBuilder.SetOverrides(System.Collections.Generic.IDictionary<AndroidX.Media3.Common.TrackGroup!, AndroidX.Media3.Common.TrackSelectionOverride!>? overrides) -> AndroidX.Media3.UI.TrackSelectionDialogBuilder?
AndroidX.Media3.UI.TrackSelectionDialogBuilder.SetShowDisableOption(bool showDisableOption) -> AndroidX.Media3.UI.TrackSelectionDialogBuilder?
AndroidX.Media3.UI.TrackSelectionDialogBuilder.SetTheme(int themeResId) -> AndroidX.Media3.UI.TrackSelectionDialogBuilder?
AndroidX.Media3.UI.TrackSelectionDialogBuilder.SetTrackFormatComparator(Java.Util.IComparator? trackFormatComparator) -> void
AndroidX.Media3.UI.TrackSelectionDialogBuilder.SetTrackNameProvider(AndroidX.Media3.UI.ITrackNameProvider? trackNameProvider) -> AndroidX.Media3.UI.TrackSelectionDialogBuilder?
AndroidX.Media3.UI.TrackSelectionDialogBuilder.TrackSelectionDialogBuilder(Android.Content.Context? context, Java.Lang.ICharSequence? title, AndroidX.Media3.Common.IPlayer? player, int trackType) -> void
AndroidX.Media3.UI.TrackSelectionDialogBuilder.TrackSelectionDialogBuilder(Android.Content.Context? context, Java.Lang.ICharSequence? title, System.Collections.Generic.IList<AndroidX.Media3.Common.Tracks.Group!>? trackGroups, AndroidX.Media3.UI.TrackSelectionDialogBuilder.IDialogCallback? callback) -> void
AndroidX.Media3.UI.TrackSelectionDialogBuilder.TrackSelectionDialogBuilder(Android.Content.Context? context, string? title, AndroidX.Media3.Common.IPlayer? player, int trackType) -> void
AndroidX.Media3.UI.TrackSelectionDialogBuilder.TrackSelectionDialogBuilder(Android.Content.Context? context, string? title, System.Collections.Generic.IList<AndroidX.Media3.Common.Tracks.Group!>? trackGroups, AndroidX.Media3.UI.TrackSelectionDialogBuilder.IDialogCallback? callback) -> void
AndroidX.Media3.UI.TrackSelectionView
AndroidX.Media3.UI.TrackSelectionView.ITrackSelectionListener
AndroidX.Media3.UI.TrackSelectionView.ITrackSelectionListener.OnTrackSelectionChanged(bool p0, System.Collections.Generic.IDictionary<AndroidX.Media3.Common.TrackGroup!, AndroidX.Media3.Common.TrackSelectionOverride!>? p1) -> void
AndroidX.Media3.UI.TrackSelectionView.TrackSelectionEventArgs
AndroidX.Media3.UI.TrackSelectionView.TrackSelectionEventArgs.P0.get -> bool
AndroidX.Media3.UI.TrackSelectionView.TrackSelectionEventArgs.P1.get -> System.Collections.Generic.IDictionary<AndroidX.Media3.Common.TrackGroup!, AndroidX.Media3.Common.TrackSelectionOverride!>?
AndroidX.Media3.UI.TrackSelectionView.TrackSelectionEventArgs.TrackSelectionEventArgs(bool p0, System.Collections.Generic.IDictionary<AndroidX.Media3.Common.TrackGroup!, AndroidX.Media3.Common.TrackSelectionOverride!>? p1) -> void
AndroidX.Media3.UI.TrackSelectionView.TrackSelectionView(Android.Content.Context? context) -> void
AndroidX.Media3.UI.TrackSelectionView.TrackSelectionView(Android.Content.Context? context, Android.Util.IAttributeSet? attrs) -> void
AndroidX.Media3.UI.TrackSelectionView.TrackSelectionView(Android.Content.Context? context, Android.Util.IAttributeSet? attrs, int defStyleAttr) -> void
AndroidX.Media3.UI.TrackSelectionView.TrackSelectionView(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media3.UI.WearUnsuitableOutputPlaybackSuppressionResolverListener
AndroidX.Media3.UI.WearUnsuitableOutputPlaybackSuppressionResolverListener.OnEvents(AndroidX.Media3.Common.IPlayer? player, AndroidX.Media3.Common.PlayerEvents? events) -> void
AndroidX.Media3.UI.WearUnsuitableOutputPlaybackSuppressionResolverListener.WearUnsuitableOutputPlaybackSuppressionResolverListener(Android.Content.Context? context) -> void
AndroidX.Media3.UI.WearUnsuitableOutputPlaybackSuppressionResolverListener.WearUnsuitableOutputPlaybackSuppressionResolverListener(Android.Content.Context? context, long autoResumeTimeoutMs) -> void
const AndroidX.Media3.UI.AspectRatioFrameLayout.ResizeModeFill = 3 -> int
const AndroidX.Media3.UI.AspectRatioFrameLayout.ResizeModeFit = 0 -> int
const AndroidX.Media3.UI.AspectRatioFrameLayout.ResizeModeFixedHeight = 2 -> int
const AndroidX.Media3.UI.AspectRatioFrameLayout.ResizeModeFixedWidth = 1 -> int
const AndroidX.Media3.UI.AspectRatioFrameLayout.ResizeModeZoom = 4 -> int
const AndroidX.Media3.UI.CaptionStyleCompat.EdgeTypeDepressed = 4 -> int
const AndroidX.Media3.UI.CaptionStyleCompat.EdgeTypeDropShadow = 2 -> int
const AndroidX.Media3.UI.CaptionStyleCompat.EdgeTypeNone = 0 -> int
const AndroidX.Media3.UI.CaptionStyleCompat.EdgeTypeOutline = 1 -> int
const AndroidX.Media3.UI.CaptionStyleCompat.EdgeTypeRaised = 3 -> int
const AndroidX.Media3.UI.CaptionStyleCompat.UseTrackColorSettings = 1 -> int
const AndroidX.Media3.UI.DefaultTimeBar.BarGravityBottom = 1 -> int
const AndroidX.Media3.UI.DefaultTimeBar.BarGravityCenter = 0 -> int
const AndroidX.Media3.UI.DefaultTimeBar.DefaultAdMarkerColor = -1291845888 -> int
const AndroidX.Media3.UI.DefaultTimeBar.DefaultAdMarkerWidthDp = 4 -> int
const AndroidX.Media3.UI.DefaultTimeBar.DefaultBarHeightDp = 4 -> int
const AndroidX.Media3.UI.DefaultTimeBar.DefaultBufferedColor = -855638017 -> int
const AndroidX.Media3.UI.DefaultTimeBar.DefaultPlayedAdMarkerColor = 872414976 -> int
const AndroidX.Media3.UI.DefaultTimeBar.DefaultPlayedColor = -1 -> int
const AndroidX.Media3.UI.DefaultTimeBar.DefaultScrubberColor = -1 -> int
const AndroidX.Media3.UI.DefaultTimeBar.DefaultScrubberDisabledSizeDp = 0 -> int
const AndroidX.Media3.UI.DefaultTimeBar.DefaultScrubberDraggedSizeDp = 16 -> int
const AndroidX.Media3.UI.DefaultTimeBar.DefaultScrubberEnabledSizeDp = 12 -> int
const AndroidX.Media3.UI.DefaultTimeBar.DefaultTouchTargetHeightDp = 26 -> int
const AndroidX.Media3.UI.DefaultTimeBar.DefaultUnplayedColor = 872415231 -> int
const AndroidX.Media3.UI.LegacyPlayerControlView.DefaultRepeatToggleModes = 0 -> int
const AndroidX.Media3.UI.LegacyPlayerControlView.DefaultShowTimeoutMs = 5000 -> int
const AndroidX.Media3.UI.LegacyPlayerControlView.DefaultTimeBarMinUpdateIntervalMs = 200 -> int
const AndroidX.Media3.UI.LegacyPlayerControlView.MaxWindowsForMultiWindowTimeBar = 100 -> int
const AndroidX.Media3.UI.PlayerControlView.DefaultRepeatToggleModes = 0 -> int
const AndroidX.Media3.UI.PlayerControlView.DefaultShowTimeoutMs = 5000 -> int
const AndroidX.Media3.UI.PlayerControlView.DefaultTimeBarMinUpdateIntervalMs = 200 -> int
const AndroidX.Media3.UI.PlayerControlView.MaxWindowsForMultiWindowTimeBar = 100 -> int
const AndroidX.Media3.UI.PlayerNotificationManager.ActionFastForward = "androidx.media3.ui.notification.ffwd" -> string!
const AndroidX.Media3.UI.PlayerNotificationManager.ActionNext = "androidx.media3.ui.notification.next" -> string!
const AndroidX.Media3.UI.PlayerNotificationManager.ActionPause = "androidx.media3.ui.notification.pause" -> string!
const AndroidX.Media3.UI.PlayerNotificationManager.ActionPlay = "androidx.media3.ui.notification.play" -> string!
const AndroidX.Media3.UI.PlayerNotificationManager.ActionPrevious = "androidx.media3.ui.notification.prev" -> string!
const AndroidX.Media3.UI.PlayerNotificationManager.ActionRewind = "androidx.media3.ui.notification.rewind" -> string!
const AndroidX.Media3.UI.PlayerNotificationManager.ActionStop = "androidx.media3.ui.notification.stop" -> string!
const AndroidX.Media3.UI.PlayerNotificationManager.ExtraInstanceId = "INSTANCE_ID" -> string!
const AndroidX.Media3.UI.PlayerView.ArtworkDisplayModeFill = 2 -> int
const AndroidX.Media3.UI.PlayerView.ArtworkDisplayModeFit = 1 -> int
const AndroidX.Media3.UI.PlayerView.ArtworkDisplayModeOff = 0 -> int
const AndroidX.Media3.UI.PlayerView.ImageDisplayModeFill = 1 -> int
const AndroidX.Media3.UI.PlayerView.ImageDisplayModeFit = 0 -> int
const AndroidX.Media3.UI.PlayerView.ShowBufferingAlways = 2 -> int
const AndroidX.Media3.UI.PlayerView.ShowBufferingNever = 0 -> int
const AndroidX.Media3.UI.PlayerView.ShowBufferingWhenPlaying = 1 -> int
const AndroidX.Media3.UI.SubtitleView.DefaultBottomPaddingFraction = 0.08 -> float
const AndroidX.Media3.UI.SubtitleView.DefaultTextSizeFraction = 0.0533 -> float
const AndroidX.Media3.UI.SubtitleView.ViewTypeCanvas = 1 -> int
const AndroidX.Media3.UI.SubtitleView.ViewTypeWeb = 2 -> int
override AndroidX.Media3.UI.AspectRatioFrameLayout.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.UI.CaptionStyleCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.UI.DefaultMediaDescriptionAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.UI.DefaultTimeBar.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.UI.DefaultTimeBar.ThresholdClass.get -> nint
override AndroidX.Media3.UI.DefaultTimeBar.ThresholdType.get -> System.Type!
override AndroidX.Media3.UI.DefaultTrackNameProvider.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.UI.DefaultTrackNameProvider.ThresholdClass.get -> nint
override AndroidX.Media3.UI.DefaultTrackNameProvider.ThresholdType.get -> System.Type!
override AndroidX.Media3.UI.LegacyPlayerControlView.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.UI.LegacyPlayerControlView.ThresholdClass.get -> nint
override AndroidX.Media3.UI.LegacyPlayerControlView.ThresholdType.get -> System.Type!
override AndroidX.Media3.UI.PlayerControlView.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.UI.PlayerControlView.ThresholdClass.get -> nint
override AndroidX.Media3.UI.PlayerControlView.ThresholdType.get -> System.Type!
override AndroidX.Media3.UI.PlayerNotificationManager.BitmapCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.UI.PlayerNotificationManager.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.UI.PlayerNotificationManager.Builder.ThresholdClass.get -> nint
override AndroidX.Media3.UI.PlayerNotificationManager.Builder.ThresholdType.get -> System.Type!
override AndroidX.Media3.UI.PlayerNotificationManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.UI.PlayerNotificationManager.ThresholdClass.get -> nint
override AndroidX.Media3.UI.PlayerNotificationManager.ThresholdType.get -> System.Type!
override AndroidX.Media3.UI.PlayerView.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.UI.PlayerView.ThresholdClass.get -> nint
override AndroidX.Media3.UI.PlayerView.ThresholdType.get -> System.Type!
override AndroidX.Media3.UI.SubtitleView.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.UI.TrackSelectionDialogBuilder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.UI.TrackSelectionView.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media3.UI.TrackSelectionView.ThresholdClass.get -> nint
override AndroidX.Media3.UI.TrackSelectionView.ThresholdType.get -> System.Type!
override AndroidX.Media3.UI.WearUnsuitableOutputPlaybackSuppressionResolverListener.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override sealed AndroidX.Media3.UI.LegacyPlayerControlView.DispatchTouchEvent(Android.Views.MotionEvent? ev) -> bool
static AndroidX.Media3.UI.CaptionStyleCompat.CreateFromCaptionStyle(Android.Views.Accessibility.CaptioningManager.CaptionStyle? captionStyle) -> AndroidX.Media3.UI.CaptionStyleCompat?
static AndroidX.Media3.UI.CaptionStyleCompat.Default.get -> AndroidX.Media3.UI.CaptionStyleCompat?
static AndroidX.Media3.UI.PlayerNotificationManagerIMediaDescriptionAdapterExtensions.GetCurrentContentText(this AndroidX.Media3.UI.PlayerNotificationManager.IMediaDescriptionAdapter! self, AndroidX.Media3.Common.IPlayer? p0) -> string?
static AndroidX.Media3.UI.PlayerNotificationManagerIMediaDescriptionAdapterExtensions.GetCurrentContentTitle(this AndroidX.Media3.UI.PlayerNotificationManager.IMediaDescriptionAdapter! self, AndroidX.Media3.Common.IPlayer? p0) -> string?
static AndroidX.Media3.UI.PlayerNotificationManagerIMediaDescriptionAdapterExtensions.GetCurrentSubText(this AndroidX.Media3.UI.PlayerNotificationManager.IMediaDescriptionAdapter! self, AndroidX.Media3.Common.IPlayer? player) -> string?
static AndroidX.Media3.UI.PlayerView.SwitchTargetView(AndroidX.Media3.Common.IPlayer? player, AndroidX.Media3.UI.PlayerView? oldPlayerView, AndroidX.Media3.UI.PlayerView? newPlayerView) -> void
static AndroidX.Media3.UI.TrackSelectionView.FilterOverrides(System.Collections.Generic.IDictionary<AndroidX.Media3.Common.TrackGroup!, AndroidX.Media3.Common.TrackSelectionOverride!>? overrides, System.Collections.Generic.IList<AndroidX.Media3.Common.Tracks.Group!>? trackGroups, bool allowMultipleOverrides) -> System.Collections.Generic.IDictionary<AndroidX.Media3.Common.TrackGroup!, AndroidX.Media3.Common.TrackSelectionOverride!>?
static AndroidX.Media3.UI.WearUnsuitableOutputPlaybackSuppressionResolverListener.DefaultPlaybackSuppressionAutoResumeTimeoutMs.get -> long
virtual AndroidX.Media3.UI.DefaultTimeBar.AddListener(AndroidX.Media3.UI.ITimeBarOnScrubListener? listener) -> void
virtual AndroidX.Media3.UI.DefaultTimeBar.HideScrubber(bool disableScrubberPadding) -> void
virtual AndroidX.Media3.UI.DefaultTimeBar.HideScrubber(long hideAnimationDurationMs) -> void
virtual AndroidX.Media3.UI.DefaultTimeBar.OnDraw(Android.Graphics.Canvas? canvas) -> void
virtual AndroidX.Media3.UI.DefaultTimeBar.PreferredUpdateDelay.get -> long
virtual AndroidX.Media3.UI.DefaultTimeBar.RemoveListener(AndroidX.Media3.UI.ITimeBarOnScrubListener? listener) -> void
virtual AndroidX.Media3.UI.DefaultTimeBar.SetAdGroupTimesMs(long[]? adGroupTimesMs, bool[]? playedAdGroups, int adGroupCount) -> void
virtual AndroidX.Media3.UI.DefaultTimeBar.SetAdMarkerColor(int adMarkerColor) -> void
virtual AndroidX.Media3.UI.DefaultTimeBar.SetBufferedColor(int bufferedColor) -> void
virtual AndroidX.Media3.UI.DefaultTimeBar.SetBufferedPosition(long bufferedPosition) -> void
virtual AndroidX.Media3.UI.DefaultTimeBar.SetDuration(long duration) -> void
virtual AndroidX.Media3.UI.DefaultTimeBar.SetKeyCountIncrement(int count) -> void
virtual AndroidX.Media3.UI.DefaultTimeBar.SetKeyTimeIncrement(long time) -> void
virtual AndroidX.Media3.UI.DefaultTimeBar.SetPlayedAdMarkerColor(int playedAdMarkerColor) -> void
virtual AndroidX.Media3.UI.DefaultTimeBar.SetPlayedColor(int playedColor) -> void
virtual AndroidX.Media3.UI.DefaultTimeBar.SetPosition(long position) -> void
virtual AndroidX.Media3.UI.DefaultTimeBar.SetScrubberColor(int scrubberColor) -> void
virtual AndroidX.Media3.UI.DefaultTimeBar.SetUnplayedColor(int unplayedColor) -> void
virtual AndroidX.Media3.UI.DefaultTimeBar.ShowScrubber() -> void
virtual AndroidX.Media3.UI.DefaultTimeBar.ShowScrubber(long showAnimationDurationMs) -> void
virtual AndroidX.Media3.UI.DefaultTrackNameProvider.GetTrackName(AndroidX.Media3.Common.Format? format) -> string?
virtual AndroidX.Media3.UI.LegacyPlayerControlView.AddVisibilityListener(AndroidX.Media3.UI.LegacyPlayerControlView.IVisibilityListener? listener) -> void
virtual AndroidX.Media3.UI.LegacyPlayerControlView.DispatchMediaKeyEvent(Android.Views.KeyEvent? e) -> bool
virtual AndroidX.Media3.UI.LegacyPlayerControlView.Hide() -> void
virtual AndroidX.Media3.UI.LegacyPlayerControlView.IsVisible.get -> bool
virtual AndroidX.Media3.UI.LegacyPlayerControlView.OnAttachedToWindow() -> void
virtual AndroidX.Media3.UI.LegacyPlayerControlView.OnDetachedFromWindow() -> void
virtual AndroidX.Media3.UI.LegacyPlayerControlView.Player.get -> AndroidX.Media3.Common.IPlayer?
virtual AndroidX.Media3.UI.LegacyPlayerControlView.Player.set -> void
virtual AndroidX.Media3.UI.LegacyPlayerControlView.RemoveVisibilityListener(AndroidX.Media3.UI.LegacyPlayerControlView.IVisibilityListener? listener) -> void
virtual AndroidX.Media3.UI.LegacyPlayerControlView.RepeatToggleModes.get -> int
virtual AndroidX.Media3.UI.LegacyPlayerControlView.RepeatToggleModes.set -> void
virtual AndroidX.Media3.UI.LegacyPlayerControlView.SetExtraAdGroupMarkers(long[]? extraAdGroupTimesMs, bool[]? extraPlayedAdGroups) -> void
virtual AndroidX.Media3.UI.LegacyPlayerControlView.SetProgressUpdateListener(AndroidX.Media3.UI.LegacyPlayerControlView.IProgressUpdateListener? listener) -> void
virtual AndroidX.Media3.UI.LegacyPlayerControlView.SetShowFastForwardButton(bool showFastForwardButton) -> void
virtual AndroidX.Media3.UI.LegacyPlayerControlView.SetShowMultiWindowTimeBar(bool showMultiWindowTimeBar) -> void
virtual AndroidX.Media3.UI.LegacyPlayerControlView.SetShowNextButton(bool showNextButton) -> void
virtual AndroidX.Media3.UI.LegacyPlayerControlView.SetShowPlayButtonIfPlaybackIsSuppressed(bool showPlayButtonIfSuppressed) -> void
virtual AndroidX.Media3.UI.LegacyPlayerControlView.SetShowPreviousButton(bool showPreviousButton) -> void
virtual AndroidX.Media3.UI.LegacyPlayerControlView.SetShowRewindButton(bool showRewindButton) -> void
virtual AndroidX.Media3.UI.LegacyPlayerControlView.SetTimeBarMinUpdateInterval(int minUpdateIntervalMs) -> void
virtual AndroidX.Media3.UI.LegacyPlayerControlView.SetVrButtonListener(Android.Views.View.IOnClickListener? onClickListener) -> void
virtual AndroidX.Media3.UI.LegacyPlayerControlView.Show() -> void
virtual AndroidX.Media3.UI.LegacyPlayerControlView.ShowShuffleButton.get -> bool
virtual AndroidX.Media3.UI.LegacyPlayerControlView.ShowShuffleButton.set -> void
virtual AndroidX.Media3.UI.LegacyPlayerControlView.ShowTimeoutMs.get -> int
virtual AndroidX.Media3.UI.LegacyPlayerControlView.ShowTimeoutMs.set -> void
virtual AndroidX.Media3.UI.LegacyPlayerControlView.ShowVrButton.get -> bool
virtual AndroidX.Media3.UI.LegacyPlayerControlView.ShowVrButton.set -> void
virtual AndroidX.Media3.UI.PlayerControlView.AddVisibilityListener(AndroidX.Media3.UI.PlayerControlView.IVisibilityListener? listener) -> void
virtual AndroidX.Media3.UI.PlayerControlView.AnimationEnabled.get -> bool
virtual AndroidX.Media3.UI.PlayerControlView.AnimationEnabled.set -> void
virtual AndroidX.Media3.UI.PlayerControlView.DispatchMediaKeyEvent(Android.Views.KeyEvent? e) -> bool
virtual AndroidX.Media3.UI.PlayerControlView.Hide() -> void
virtual AndroidX.Media3.UI.PlayerControlView.HideImmediately() -> void
virtual AndroidX.Media3.UI.PlayerControlView.IsFullyVisible.get -> bool
virtual AndroidX.Media3.UI.PlayerControlView.IsVisible.get -> bool
virtual AndroidX.Media3.UI.PlayerControlView.OnAttachedToWindow() -> void
virtual AndroidX.Media3.UI.PlayerControlView.OnDetachedFromWindow() -> void
virtual AndroidX.Media3.UI.PlayerControlView.Player.get -> AndroidX.Media3.Common.IPlayer?
virtual AndroidX.Media3.UI.PlayerControlView.Player.set -> void
virtual AndroidX.Media3.UI.PlayerControlView.RemoveVisibilityListener(AndroidX.Media3.UI.PlayerControlView.IVisibilityListener? listener) -> void
virtual AndroidX.Media3.UI.PlayerControlView.RepeatToggleModes.get -> int
virtual AndroidX.Media3.UI.PlayerControlView.RepeatToggleModes.set -> void
virtual AndroidX.Media3.UI.PlayerControlView.SetExtraAdGroupMarkers(long[]? extraAdGroupTimesMs, bool[]? extraPlayedAdGroups) -> void
virtual AndroidX.Media3.UI.PlayerControlView.SetOnFullScreenModeChangedListener(AndroidX.Media3.UI.PlayerControlView.IOnFullScreenModeChangedListener? listener) -> void
virtual AndroidX.Media3.UI.PlayerControlView.SetProgressUpdateListener(AndroidX.Media3.UI.PlayerControlView.IProgressUpdateListener? listener) -> void
virtual AndroidX.Media3.UI.PlayerControlView.SetShowFastForwardButton(bool showFastForwardButton) -> void
virtual AndroidX.Media3.UI.PlayerControlView.SetShowMultiWindowTimeBar(bool showMultiWindowTimeBar) -> void
virtual AndroidX.Media3.UI.PlayerControlView.SetShowNextButton(bool showNextButton) -> void
virtual AndroidX.Media3.UI.PlayerControlView.SetShowPlayButtonIfPlaybackIsSuppressed(bool showPlayButtonIfSuppressed) -> void
virtual AndroidX.Media3.UI.PlayerControlView.SetShowPreviousButton(bool showPreviousButton) -> void
virtual AndroidX.Media3.UI.PlayerControlView.SetShowRewindButton(bool showRewindButton) -> void
virtual AndroidX.Media3.UI.PlayerControlView.SetTimeBarMinUpdateInterval(int minUpdateIntervalMs) -> void
virtual AndroidX.Media3.UI.PlayerControlView.SetVrButtonListener(Android.Views.View.IOnClickListener? onClickListener) -> void
virtual AndroidX.Media3.UI.PlayerControlView.Show() -> void
virtual AndroidX.Media3.UI.PlayerControlView.ShowShuffleButton.get -> bool
virtual AndroidX.Media3.UI.PlayerControlView.ShowShuffleButton.set -> void
virtual AndroidX.Media3.UI.PlayerControlView.ShowSubtitleButton.get -> bool
virtual AndroidX.Media3.UI.PlayerControlView.ShowSubtitleButton.set -> void
virtual AndroidX.Media3.UI.PlayerControlView.ShowTimeoutMs.get -> int
virtual AndroidX.Media3.UI.PlayerControlView.ShowTimeoutMs.set -> void
virtual AndroidX.Media3.UI.PlayerControlView.ShowVrButton.get -> bool
virtual AndroidX.Media3.UI.PlayerControlView.ShowVrButton.set -> void
virtual AndroidX.Media3.UI.PlayerControlView.UpdateIsFullscreen(bool isFullscreen) -> void
virtual AndroidX.Media3.UI.PlayerNotificationManager.Builder.Build() -> AndroidX.Media3.UI.PlayerNotificationManager?
virtual AndroidX.Media3.UI.PlayerNotificationManager.Builder.SetChannelDescriptionResourceId(int channelDescriptionResourceId) -> AndroidX.Media3.UI.PlayerNotificationManager.Builder?
virtual AndroidX.Media3.UI.PlayerNotificationManager.Builder.SetChannelImportance(int channelImportance) -> AndroidX.Media3.UI.PlayerNotificationManager.Builder?
virtual AndroidX.Media3.UI.PlayerNotificationManager.Builder.SetChannelNameResourceId(int channelNameResourceId) -> AndroidX.Media3.UI.PlayerNotificationManager.Builder?
virtual AndroidX.Media3.UI.PlayerNotificationManager.Builder.SetCustomActionReceiver(AndroidX.Media3.UI.PlayerNotificationManager.ICustomActionReceiver? customActionReceiver) -> AndroidX.Media3.UI.PlayerNotificationManager.Builder?
virtual AndroidX.Media3.UI.PlayerNotificationManager.Builder.SetFastForwardActionIconResourceId(int fastForwardActionIconResourceId) -> AndroidX.Media3.UI.PlayerNotificationManager.Builder?
virtual AndroidX.Media3.UI.PlayerNotificationManager.Builder.SetGroup(string? groupKey) -> AndroidX.Media3.UI.PlayerNotificationManager.Builder?
virtual AndroidX.Media3.UI.PlayerNotificationManager.Builder.SetMediaDescriptionAdapter(AndroidX.Media3.UI.PlayerNotificationManager.IMediaDescriptionAdapter? mediaDescriptionAdapter) -> AndroidX.Media3.UI.PlayerNotificationManager.Builder?
virtual AndroidX.Media3.UI.PlayerNotificationManager.Builder.SetNextActionIconResourceId(int nextActionIconResourceId) -> AndroidX.Media3.UI.PlayerNotificationManager.Builder?
virtual AndroidX.Media3.UI.PlayerNotificationManager.Builder.SetNotificationListener(AndroidX.Media3.UI.PlayerNotificationManager.INotificationListener? notificationListener) -> AndroidX.Media3.UI.PlayerNotificationManager.Builder?
virtual AndroidX.Media3.UI.PlayerNotificationManager.Builder.SetPauseActionIconResourceId(int pauseActionIconResourceId) -> AndroidX.Media3.UI.PlayerNotificationManager.Builder?
virtual AndroidX.Media3.UI.PlayerNotificationManager.Builder.SetPlayActionIconResourceId(int playActionIconResourceId) -> AndroidX.Media3.UI.PlayerNotificationManager.Builder?
virtual AndroidX.Media3.UI.PlayerNotificationManager.Builder.SetPreviousActionIconResourceId(int previousActionIconResourceId) -> AndroidX.Media3.UI.PlayerNotificationManager.Builder?
virtual AndroidX.Media3.UI.PlayerNotificationManager.Builder.SetRewindActionIconResourceId(int rewindActionIconResourceId) -> AndroidX.Media3.UI.PlayerNotificationManager.Builder?
virtual AndroidX.Media3.UI.PlayerNotificationManager.Builder.SetSmallIconResourceId(int smallIconResourceId) -> AndroidX.Media3.UI.PlayerNotificationManager.Builder?
virtual AndroidX.Media3.UI.PlayerNotificationManager.Builder.SetStopActionIconResourceId(int stopActionIconResourceId) -> AndroidX.Media3.UI.PlayerNotificationManager.Builder?
virtual AndroidX.Media3.UI.PlayerNotificationManager.CreateNotification(AndroidX.Media3.Common.IPlayer? player, AndroidX.Core.App.NotificationCompat.Builder? builder, bool ongoing, Android.Graphics.Bitmap? largeIcon) -> AndroidX.Core.App.NotificationCompat.Builder?
virtual AndroidX.Media3.UI.PlayerNotificationManager.GetActionIndicesForCompactView(System.Collections.Generic.IList<string!>? actionNames, AndroidX.Media3.Common.IPlayer? player) -> int[]?
virtual AndroidX.Media3.UI.PlayerNotificationManager.GetActions(AndroidX.Media3.Common.IPlayer? player) -> System.Collections.Generic.IList<string!>?
virtual AndroidX.Media3.UI.PlayerNotificationManager.GetOngoing(AndroidX.Media3.Common.IPlayer? player) -> bool
virtual AndroidX.Media3.UI.PlayerNotificationManager.SetShowPlayButtonIfPlaybackIsSuppressed(bool showPlayButtonIfSuppressed) -> void
virtual AndroidX.Media3.UI.PlayerView.AdOverlayInfos.get -> System.Collections.Generic.IList<AndroidX.Media3.Common.AdOverlayInfo!>?
virtual AndroidX.Media3.UI.PlayerView.AdViewGroup.get -> Android.Views.ViewGroup?
virtual AndroidX.Media3.UI.PlayerView.ArtworkDisplayMode.get -> int
virtual AndroidX.Media3.UI.PlayerView.ArtworkDisplayMode.set -> void
virtual AndroidX.Media3.UI.PlayerView.ControllerAutoShow.get -> bool
virtual AndroidX.Media3.UI.PlayerView.ControllerAutoShow.set -> void
virtual AndroidX.Media3.UI.PlayerView.ControllerHideOnTouch.get -> bool
virtual AndroidX.Media3.UI.PlayerView.ControllerHideOnTouch.set -> void
virtual AndroidX.Media3.UI.PlayerView.ControllerShowTimeoutMs.get -> int
virtual AndroidX.Media3.UI.PlayerView.ControllerShowTimeoutMs.set -> void
virtual AndroidX.Media3.UI.PlayerView.DefaultArtwork.get -> Android.Graphics.Drawables.Drawable?
virtual AndroidX.Media3.UI.PlayerView.DefaultArtwork.set -> void
virtual AndroidX.Media3.UI.PlayerView.DispatchMediaKeyEvent(Android.Views.KeyEvent? e) -> bool
virtual AndroidX.Media3.UI.PlayerView.HideController() -> void
virtual AndroidX.Media3.UI.PlayerView.ImageDisplayMode.get -> int
virtual AndroidX.Media3.UI.PlayerView.ImageDisplayMode.set -> void
virtual AndroidX.Media3.UI.PlayerView.IsControllerFullyVisible.get -> bool
virtual AndroidX.Media3.UI.PlayerView.OnContentAspectRatioChanged(AndroidX.Media3.UI.AspectRatioFrameLayout? contentFrame, float aspectRatio) -> void
virtual AndroidX.Media3.UI.PlayerView.OnPause() -> void
virtual AndroidX.Media3.UI.PlayerView.OnResume() -> void
virtual AndroidX.Media3.UI.PlayerView.OverlayFrameLayout.get -> Android.Widget.FrameLayout?
virtual AndroidX.Media3.UI.PlayerView.Player.get -> AndroidX.Media3.Common.IPlayer?
virtual AndroidX.Media3.UI.PlayerView.Player.set -> void
virtual AndroidX.Media3.UI.PlayerView.ResizeMode.get -> int
virtual AndroidX.Media3.UI.PlayerView.ResizeMode.set -> void
virtual AndroidX.Media3.UI.PlayerView.SetAspectRatioListener(AndroidX.Media3.UI.AspectRatioFrameLayout.IAspectRatioListener? listener) -> void
virtual AndroidX.Media3.UI.PlayerView.SetControllerAnimationEnabled(bool animationEnabled) -> void
virtual AndroidX.Media3.UI.PlayerView.SetControllerHideDuringAds(bool controllerHideDuringAds) -> void
virtual AndroidX.Media3.UI.PlayerView.SetControllerOnFullScreenModeChangedListener(AndroidX.Media3.UI.PlayerControlView.IOnFullScreenModeChangedListener? listener) -> void
virtual AndroidX.Media3.UI.PlayerView.SetControllerVisibilityListener(AndroidX.Media3.UI.PlayerView.IControllerVisibilityListener? listener) -> void
virtual AndroidX.Media3.UI.PlayerView.SetCustomErrorMessage(Java.Lang.ICharSequence? message) -> void
virtual AndroidX.Media3.UI.PlayerView.SetEnableComposeSurfaceSyncWorkaround(bool enableComposeSurfaceSyncWorkaround) -> void
virtual AndroidX.Media3.UI.PlayerView.SetErrorMessageProvider(AndroidX.Media3.Common.IErrorMessageProvider? errorMessageProvider) -> void
virtual AndroidX.Media3.UI.PlayerView.SetExtraAdGroupMarkers(long[]? extraAdGroupTimesMs, bool[]? extraPlayedAdGroups) -> void
virtual AndroidX.Media3.UI.PlayerView.SetFullscreenButtonClickListener(AndroidX.Media3.UI.PlayerView.IFullscreenButtonClickListener? listener) -> void
virtual AndroidX.Media3.UI.PlayerView.SetFullscreenButtonState(bool isFullscreen) -> void
virtual AndroidX.Media3.UI.PlayerView.SetKeepContentOnPlayerReset(bool keepContentOnPlayerReset) -> void
virtual AndroidX.Media3.UI.PlayerView.SetRepeatToggleModes(int repeatToggleModes) -> void
virtual AndroidX.Media3.UI.PlayerView.SetShowBuffering(int showBuffering) -> void
virtual AndroidX.Media3.UI.PlayerView.SetShowFastForwardButton(bool showFastForwardButton) -> void
virtual AndroidX.Media3.UI.PlayerView.SetShowMultiWindowTimeBar(bool showMultiWindowTimeBar) -> void
virtual AndroidX.Media3.UI.PlayerView.SetShowNextButton(bool showNextButton) -> void
virtual AndroidX.Media3.UI.PlayerView.SetShowPlayButtonIfPlaybackIsSuppressed(bool showPlayButtonIfSuppressed) -> void
virtual AndroidX.Media3.UI.PlayerView.SetShowPreviousButton(bool showPreviousButton) -> void
virtual AndroidX.Media3.UI.PlayerView.SetShowRewindButton(bool showRewindButton) -> void
virtual AndroidX.Media3.UI.PlayerView.SetShowShuffleButton(bool showShuffleButton) -> void
virtual AndroidX.Media3.UI.PlayerView.SetShowSubtitleButton(bool showSubtitleButton) -> void
virtual AndroidX.Media3.UI.PlayerView.SetShowVrButton(bool showVrButton) -> void
virtual AndroidX.Media3.UI.PlayerView.SetShutterBackgroundColor(int color) -> void
virtual AndroidX.Media3.UI.PlayerView.ShowController() -> void
virtual AndroidX.Media3.UI.PlayerView.SubtitleView.get -> AndroidX.Media3.UI.SubtitleView?
virtual AndroidX.Media3.UI.PlayerView.UseArtwork.get -> bool
virtual AndroidX.Media3.UI.PlayerView.UseArtwork.set -> void
virtual AndroidX.Media3.UI.PlayerView.UseController.get -> bool
virtual AndroidX.Media3.UI.PlayerView.UseController.set -> void
virtual AndroidX.Media3.UI.PlayerView.VideoSurfaceView.get -> Android.Views.View?
virtual AndroidX.Media3.UI.TrackSelectionView.Init(System.Collections.Generic.IList<AndroidX.Media3.Common.Tracks.Group!>? trackGroups, bool isDisabled, System.Collections.Generic.IDictionary<AndroidX.Media3.Common.TrackGroup!, AndroidX.Media3.Common.TrackSelectionOverride!>? overrides, Java.Util.IComparator? trackFormatComparator, AndroidX.Media3.UI.TrackSelectionView.ITrackSelectionListener? listener) -> void
virtual AndroidX.Media3.UI.TrackSelectionView.IsDisabled.get -> bool
virtual AndroidX.Media3.UI.TrackSelectionView.Overrides.get -> System.Collections.Generic.IDictionary<AndroidX.Media3.Common.TrackGroup!, AndroidX.Media3.Common.TrackSelectionOverride!>?
virtual AndroidX.Media3.UI.TrackSelectionView.SetAllowAdaptiveSelections(bool allowAdaptiveSelections) -> void
virtual AndroidX.Media3.UI.TrackSelectionView.SetAllowMultipleOverrides(bool allowMultipleOverrides) -> void
virtual AndroidX.Media3.UI.TrackSelectionView.SetShowDisableOption(bool showDisableOption) -> void
virtual AndroidX.Media3.UI.TrackSelectionView.SetTrackNameProvider(AndroidX.Media3.UI.ITrackNameProvider? trackNameProvider) -> void
