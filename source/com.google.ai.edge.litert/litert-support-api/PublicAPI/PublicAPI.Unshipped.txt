#nullable enable
Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio
Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudio(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat
Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat.Builder
Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat.Builder.Builder() -> void
Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat.TensorAudioFormat() -> void
Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat.TensorAudioFormat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Common.FileUtil
Xamarin.TensorFlow.Lite.Support.Common.FileUtil.FileUtil(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Common.IOperator
Xamarin.TensorFlow.Lite.Support.Common.IOperator.Apply(Java.Lang.Object? x) -> Java.Lang.Object?
Xamarin.TensorFlow.Lite.Support.Common.IProcessor
Xamarin.TensorFlow.Lite.Support.Common.IProcessor.Process(Java.Lang.Object? input) -> Java.Lang.Object?
Xamarin.TensorFlow.Lite.Support.Common.ITensorOperator
Xamarin.TensorFlow.Lite.Support.Common.ITensorOperator.Apply(Java.Lang.Object? input) -> Java.Lang.Object?
Xamarin.TensorFlow.Lite.Support.Common.Internal.SupportPreconditions
Xamarin.TensorFlow.Lite.Support.Common.Ops.CastOp
Xamarin.TensorFlow.Lite.Support.Common.Ops.CastOp.CastOp(Xamarin.TensorFlow.Lite.DataType? destinationType) -> void
Xamarin.TensorFlow.Lite.Support.Common.Ops.CastOp.CastOp(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Common.Ops.DequantizeOp
Xamarin.TensorFlow.Lite.Support.Common.Ops.DequantizeOp.DequantizeOp(float zeroPoint, float scale) -> void
Xamarin.TensorFlow.Lite.Support.Common.Ops.DequantizeOp.DequantizeOp(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Common.Ops.NormalizeOp
Xamarin.TensorFlow.Lite.Support.Common.Ops.NormalizeOp.NormalizeOp(float mean, float stddev) -> void
Xamarin.TensorFlow.Lite.Support.Common.Ops.NormalizeOp.NormalizeOp(float[]? mean, float[]? stddev) -> void
Xamarin.TensorFlow.Lite.Support.Common.Ops.NormalizeOp.NormalizeOp(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Common.Ops.QuantizeOp
Xamarin.TensorFlow.Lite.Support.Common.Ops.QuantizeOp.QuantizeOp(float zeroPoint, float scale) -> void
Xamarin.TensorFlow.Lite.Support.Common.Ops.QuantizeOp.QuantizeOp(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor
Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor.Builder
Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor.Builder.Builder() -> void
Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor.OperatorIndex.get -> System.Collections.IDictionary?
Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor.OperatorIndex.set -> void
Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor.OperatorList.get -> System.Collections.IList?
Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor.OperatorList.set -> void
Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor.SequentialProcessor(Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor.Builder? builder) -> void
Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor.SequentialProcessor(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Common.TensorProcessor
Xamarin.TensorFlow.Lite.Support.Common.TensorProcessor.Builder
Xamarin.TensorFlow.Lite.Support.Common.TensorProcessor.Builder.Builder() -> void
Xamarin.TensorFlow.Lite.Support.Common.TensorProcessor.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Common.TensorProcessor.TensorProcessor(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil
Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.CoordinateType
Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.Type
Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType
Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType.ColorSpaceType(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Image.IImageOperator
Xamarin.TensorFlow.Lite.Support.Image.IImageOperator.Apply(Java.Lang.Object? image) -> Java.Lang.Object?
Xamarin.TensorFlow.Lite.Support.Image.IImageOperator.GetOutputImageHeight(int inputImageHeight, int inputImageWidth) -> int
Xamarin.TensorFlow.Lite.Support.Image.IImageOperator.GetOutputImageWidth(int inputImageHeight, int inputImageWidth) -> int
Xamarin.TensorFlow.Lite.Support.Image.IImageOperator.InverseTransform(Android.Graphics.PointF? point, int inputImageHeight, int inputImageWidth) -> Android.Graphics.PointF?
Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor
Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor.Builder
Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor.Builder.Builder() -> void
Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor.ImageProcessor(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Image.ImageProperties
Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.Builder
Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.Builder.Builder() -> void
Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.ImageProperties() -> void
Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.ImageProperties(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Image.MlImageAdapter
Xamarin.TensorFlow.Lite.Support.Image.MlImageAdapter.MlImageAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeOp
Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeOp.ResizeMethod
Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeOp.ResizeOp(int targetHeight, int targetWidth, Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeOp.ResizeMethod? resizeMethod) -> void
Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeOp.ResizeOp(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeWithCropOrPadOp
Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeWithCropOrPadOp.ResizeWithCropOrPadOp(int targetHeight, int targetWidth) -> void
Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeWithCropOrPadOp.ResizeWithCropOrPadOp(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Image.Ops.Rot90Op
Xamarin.TensorFlow.Lite.Support.Image.Ops.Rot90Op.Rot90Op() -> void
Xamarin.TensorFlow.Lite.Support.Image.Ops.Rot90Op.Rot90Op(int k) -> void
Xamarin.TensorFlow.Lite.Support.Image.Ops.Rot90Op.Rot90Op(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Image.Ops.TensorOperatorWrapper
Xamarin.TensorFlow.Lite.Support.Image.Ops.TensorOperatorWrapper.TensorOperatorWrapper(Xamarin.TensorFlow.Lite.Support.Common.ITensorOperator? op) -> void
Xamarin.TensorFlow.Lite.Support.Image.Ops.TensorOperatorWrapper.TensorOperatorWrapper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Image.Ops.TransformToGrayscaleOp
Xamarin.TensorFlow.Lite.Support.Image.Ops.TransformToGrayscaleOp.TransformToGrayscaleOp() -> void
Xamarin.TensorFlow.Lite.Support.Image.Ops.TransformToGrayscaleOp.TransformToGrayscaleOp(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Image.TensorImage
Xamarin.TensorFlow.Lite.Support.Image.TensorImage.TensorImage() -> void
Xamarin.TensorFlow.Lite.Support.Image.TensorImage.TensorImage(Xamarin.TensorFlow.Lite.DataType? dataType) -> void
Xamarin.TensorFlow.Lite.Support.Image.TensorImage.TensorImage(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Label.Category
Xamarin.TensorFlow.Lite.Support.Label.Category.Category(string? label, float score) -> void
Xamarin.TensorFlow.Lite.Support.Label.Category.DisplayName.get -> string?
Xamarin.TensorFlow.Lite.Support.Label.Category.Index.get -> int
Xamarin.TensorFlow.Lite.Support.Label.Category.Label.get -> string?
Xamarin.TensorFlow.Lite.Support.Label.Category.Score.get -> float
Xamarin.TensorFlow.Lite.Support.Label.LabelUtil
Xamarin.TensorFlow.Lite.Support.Label.LabelUtil.LabelUtil(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Label.Ops.LabelAxisOp
Xamarin.TensorFlow.Lite.Support.Label.Ops.LabelAxisOp.Builder
Xamarin.TensorFlow.Lite.Support.Label.Ops.LabelAxisOp.Builder.Builder() -> void
Xamarin.TensorFlow.Lite.Support.Label.Ops.LabelAxisOp.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Label.Ops.LabelAxisOp.LabelAxisOp(Xamarin.TensorFlow.Lite.Support.Label.Ops.LabelAxisOp.Builder? builder) -> void
Xamarin.TensorFlow.Lite.Support.Label.Ops.LabelAxisOp.LabelAxisOp(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Label.TensorLabel
Xamarin.TensorFlow.Lite.Support.Label.TensorLabel.TensorLabel(System.Collections.Generic.IDictionary<Java.Lang.Integer!, System.Collections.Generic.IList<string!>!>? axisLabels, Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer? tensorBuffer) -> void
Xamarin.TensorFlow.Lite.Support.Label.TensorLabel.TensorLabel(System.Collections.Generic.IList<string!>? axisLabels, Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer? tensorBuffer) -> void
Xamarin.TensorFlow.Lite.Support.Label.TensorLabel.TensorLabel(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Model.Model
Xamarin.TensorFlow.Lite.Support.Model.Model.Builder
Xamarin.TensorFlow.Lite.Support.Model.Model.Builder.Builder(Android.Content.Context? context, string? modelPath) -> void
Xamarin.TensorFlow.Lite.Support.Model.Model.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Model.Model.Device
Xamarin.TensorFlow.Lite.Support.Model.Model.Model(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Model.Model.Options
Xamarin.TensorFlow.Lite.Support.Model.Model.Options.Builder
Xamarin.TensorFlow.Lite.Support.Model.Model.Options.Builder.Builder() -> void
Xamarin.TensorFlow.Lite.Support.Model.Model.Options.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.Model.Model.Options.Options(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer
Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.Shape.get -> System.Collections.Generic.IList<int>?
Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.Shape.set -> void
Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.TensorBuffer() -> void
Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.TensorBuffer(int[]? shape) -> void
Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.TensorBuffer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBufferFloat
Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBufferUint8
abstract Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat.Builder.SetChannels(int value) -> Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat.Builder?
abstract Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat.Builder.SetSampleRate(int value) -> Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat.Builder?
abstract Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat.Channels.get -> int
abstract Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat.SampleRate.get -> int
abstract Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.Builder.SetColorSpaceType(Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType? colorSpaceType) -> Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.Builder?
abstract Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.Builder.SetHeight(int height) -> Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.Builder?
abstract Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.Builder.SetWidth(int width) -> Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.Builder?
abstract Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.ColorSpaceType.get -> Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType?
abstract Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.Height.get -> int
abstract Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.Width.get -> int
abstract Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.DataType.get -> Xamarin.TensorFlow.Lite.DataType?
abstract Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.GetFloatArray() -> float[]?
abstract Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.GetFloatValue(int absIndex) -> float
abstract Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.GetIntArray() -> int[]?
abstract Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.GetIntValue(int absIndex) -> int
abstract Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.LoadArray(float[]? src, int[]? shape) -> void
abstract Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.LoadArray(int[]? src, int[]? shape) -> void
abstract Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.TypeSize.get -> int
override Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat.Builder.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat.Builder.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Common.FileUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Common.FileUtil.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Common.FileUtil.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Common.Internal.SupportPreconditions.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Common.Ops.CastOp.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Common.Ops.CastOp.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Common.Ops.CastOp.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Common.Ops.DequantizeOp.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Common.Ops.DequantizeOp.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Common.Ops.DequantizeOp.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Common.Ops.NormalizeOp.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Common.Ops.NormalizeOp.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Common.Ops.NormalizeOp.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Common.Ops.QuantizeOp.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Common.Ops.QuantizeOp.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Common.Ops.QuantizeOp.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor.Builder.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor.Builder.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Common.TensorProcessor.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Common.TensorProcessor.Builder.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Common.TensorProcessor.Builder.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Common.TensorProcessor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Common.TensorProcessor.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Common.TensorProcessor.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.CoordinateType.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.Type.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor.Builder.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor.Builder.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.Builder.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.Builder.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Image.MlImageAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Image.MlImageAdapter.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Image.MlImageAdapter.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeOp.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeOp.ResizeMethod.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeOp.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeOp.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeWithCropOrPadOp.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeWithCropOrPadOp.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeWithCropOrPadOp.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Image.Ops.Rot90Op.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Image.Ops.Rot90Op.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Image.Ops.Rot90Op.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Image.Ops.TensorOperatorWrapper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Image.Ops.TensorOperatorWrapper.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Image.Ops.TensorOperatorWrapper.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Image.Ops.TransformToGrayscaleOp.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Image.Ops.TransformToGrayscaleOp.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Image.Ops.TransformToGrayscaleOp.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Image.TensorImage.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Image.TensorImage.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Image.TensorImage.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Label.Category.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Label.LabelUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Label.LabelUtil.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Label.LabelUtil.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Label.Ops.LabelAxisOp.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Label.Ops.LabelAxisOp.Builder.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Label.Ops.LabelAxisOp.Builder.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Label.Ops.LabelAxisOp.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Label.Ops.LabelAxisOp.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Label.Ops.LabelAxisOp.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Label.TensorLabel.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Label.TensorLabel.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Label.TensorLabel.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Model.Model.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Model.Model.Builder.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Model.Model.Builder.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Model.Model.Device.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Model.Model.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Model.Model.Options.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Model.Model.Options.Builder.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Model.Model.Options.Builder.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Model.Model.Options.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.Model.Model.Options.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Model.Model.Options.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.Model.Model.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.Model.Model.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.ThresholdClass.get -> nint
override Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.ThresholdType.get -> System.Type!
override Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBufferFloat.DataType.get -> Xamarin.TensorFlow.Lite.DataType?
override Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBufferFloat.GetFloatArray() -> float[]?
override Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBufferFloat.GetFloatValue(int absIndex) -> float
override Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBufferFloat.GetIntArray() -> int[]?
override Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBufferFloat.GetIntValue(int absIndex) -> int
override Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBufferFloat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBufferFloat.LoadArray(float[]? src, int[]? shape) -> void
override Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBufferFloat.LoadArray(int[]? src, int[]? shape) -> void
override Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBufferFloat.TypeSize.get -> int
override Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBufferUint8.DataType.get -> Xamarin.TensorFlow.Lite.DataType?
override Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBufferUint8.GetFloatArray() -> float[]?
override Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBufferUint8.GetFloatValue(int index) -> float
override Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBufferUint8.GetIntArray() -> int[]?
override Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBufferUint8.GetIntValue(int index) -> int
override Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBufferUint8.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBufferUint8.LoadArray(float[]? src, int[]? shape) -> void
override Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBufferUint8.LoadArray(int[]? src, int[]? shape) -> void
override Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBufferUint8.TypeSize.get -> int
static Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.Create(Android.Media.AudioFormat? format, int sampleCounts) -> Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio?
static Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.Create(Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat? format, int sampleCounts) -> Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio?
static Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat.Create(Android.Media.AudioFormat? format) -> Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat?
static Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat.InvokeBuilder() -> Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat.Builder?
static Xamarin.TensorFlow.Lite.Support.Common.FileUtil.LoadByteFromFile(Android.Content.Context? context, string? filePath) -> byte[]?
static Xamarin.TensorFlow.Lite.Support.Common.FileUtil.LoadLabels(Android.Content.Context? context, string? filePath) -> System.Collections.Generic.IList<string!>?
static Xamarin.TensorFlow.Lite.Support.Common.FileUtil.LoadLabels(Android.Content.Context? context, string? filePath, Java.Nio.Charset.Charset? cs) -> System.Collections.Generic.IList<string!>?
static Xamarin.TensorFlow.Lite.Support.Common.FileUtil.LoadLabels(System.IO.Stream? inputStream) -> System.Collections.Generic.IList<string!>?
static Xamarin.TensorFlow.Lite.Support.Common.FileUtil.LoadLabels(System.IO.Stream? inputStream, Java.Nio.Charset.Charset? cs) -> System.Collections.Generic.IList<string!>?
static Xamarin.TensorFlow.Lite.Support.Common.FileUtil.LoadMappedFile(Android.Content.Context? context, string? filePath) -> Java.Nio.MappedByteBuffer?
static Xamarin.TensorFlow.Lite.Support.Common.FileUtil.LoadSingleColumnTextFile(Android.Content.Context? context, string? filePath, Java.Nio.Charset.Charset? cs) -> System.Collections.Generic.IList<string!>?
static Xamarin.TensorFlow.Lite.Support.Common.FileUtil.LoadSingleColumnTextFile(System.IO.Stream? inputStream, Java.Nio.Charset.Charset? cs) -> System.Collections.Generic.IList<string!>?
static Xamarin.TensorFlow.Lite.Support.Common.Internal.SupportPreconditions.CheckArgument(bool expression) -> void
static Xamarin.TensorFlow.Lite.Support.Common.Internal.SupportPreconditions.CheckArgument(bool expression, Java.Lang.Object? errorMessage) -> void
static Xamarin.TensorFlow.Lite.Support.Common.Internal.SupportPreconditions.CheckElementIndex(int index, int size) -> int
static Xamarin.TensorFlow.Lite.Support.Common.Internal.SupportPreconditions.CheckElementIndex(int index, int size, string? desc) -> int
static Xamarin.TensorFlow.Lite.Support.Common.Internal.SupportPreconditions.CheckNotEmpty(string? string) -> string?
static Xamarin.TensorFlow.Lite.Support.Common.Internal.SupportPreconditions.CheckNotEmpty(string? string, Java.Lang.Object? errorMessage) -> string?
static Xamarin.TensorFlow.Lite.Support.Common.Internal.SupportPreconditions.CheckNotNull(Java.Lang.Object? reference) -> Java.Lang.Object?
static Xamarin.TensorFlow.Lite.Support.Common.Internal.SupportPreconditions.CheckNotNull(Java.Lang.Object? reference, Java.Lang.Object? errorMessage) -> Java.Lang.Object?
static Xamarin.TensorFlow.Lite.Support.Common.Internal.SupportPreconditions.CheckState(bool expression) -> void
static Xamarin.TensorFlow.Lite.Support.Common.Internal.SupportPreconditions.CheckState(bool expression, Java.Lang.Object? errorMessage) -> void
static Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.Convert(Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer? tensor, int[]? valueIndex, int boundingBoxAxis, Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.Type? type, Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.CoordinateType? coordinateType, int height, int width) -> System.Collections.Generic.IList<Android.Graphics.RectF!>?
static Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.CoordinateType.Pixel.get -> Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.CoordinateType?
static Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.CoordinateType.Ratio.get -> Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.CoordinateType?
static Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.CoordinateType.ValueOf(string? name) -> Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.CoordinateType?
static Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.CoordinateType.Values() -> Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.CoordinateType![]?
static Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.Type.Boundaries.get -> Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.Type?
static Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.Type.Center.get -> Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.Type?
static Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.Type.UpperLeft.get -> Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.Type?
static Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.Type.ValueOf(string? name) -> Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.Type?
static Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.Type.Values() -> Xamarin.TensorFlow.Lite.Support.Image.BoundingBoxUtil.Type![]?
static Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType.Grayscale.get -> Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType?
static Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType.Nv12.get -> Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType?
static Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType.Nv21.get -> Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType?
static Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType.Rgb.get -> Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType?
static Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType.ValueOf(string? name) -> Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType?
static Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType.Values() -> Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType![]?
static Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType.Yuv420888.get -> Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType?
static Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType.Yv12.get -> Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType?
static Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType.Yv21.get -> Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType?
static Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.InvokeBuilder() -> Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.Builder?
static Xamarin.TensorFlow.Lite.Support.Image.MlImageAdapter.CreateColorSpaceTypeFrom(int imageFormat) -> Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType?
static Xamarin.TensorFlow.Lite.Support.Image.MlImageAdapter.CreateTensorImageFrom(Xamarin.Google.Android.Odml.Image.MlImage? mlImage) -> Xamarin.TensorFlow.Lite.Support.Image.TensorImage?
static Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeOp.ResizeMethod.Bilinear.get -> Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeOp.ResizeMethod?
static Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeOp.ResizeMethod.NearestNeighbor.get -> Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeOp.ResizeMethod?
static Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeOp.ResizeMethod.ValueOf(string? name) -> Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeOp.ResizeMethod?
static Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeOp.ResizeMethod.Values() -> Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeOp.ResizeMethod![]?
static Xamarin.TensorFlow.Lite.Support.Image.TensorImage.CreateFrom(Xamarin.TensorFlow.Lite.Support.Image.TensorImage? src, Xamarin.TensorFlow.Lite.DataType? dataType) -> Xamarin.TensorFlow.Lite.Support.Image.TensorImage?
static Xamarin.TensorFlow.Lite.Support.Image.TensorImage.FromBitmap(Android.Graphics.Bitmap? bitmap) -> Xamarin.TensorFlow.Lite.Support.Image.TensorImage?
static Xamarin.TensorFlow.Lite.Support.Label.Category.Create(string? label, string? displayName, float score) -> Xamarin.TensorFlow.Lite.Support.Label.Category?
static Xamarin.TensorFlow.Lite.Support.Label.Category.Create(string? label, string? displayName, float score, int index) -> Xamarin.TensorFlow.Lite.Support.Label.Category?
static Xamarin.TensorFlow.Lite.Support.Label.LabelUtil.MapValueToLabels(Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer? tensorBuffer, System.Collections.Generic.IList<string!>? labels, int offset) -> System.Collections.Generic.IList<string!>?
static Xamarin.TensorFlow.Lite.Support.Model.Model.CreateModel(Android.Content.Context? context, string? modelPath) -> Xamarin.TensorFlow.Lite.Support.Model.Model?
static Xamarin.TensorFlow.Lite.Support.Model.Model.CreateModel(Android.Content.Context? context, string? modelPath, Xamarin.TensorFlow.Lite.Support.Model.Model.Options? options) -> Xamarin.TensorFlow.Lite.Support.Model.Model?
static Xamarin.TensorFlow.Lite.Support.Model.Model.CreateModel(Java.Nio.MappedByteBuffer? byteModel, string? modelPath, Xamarin.TensorFlow.Lite.Support.Model.Model.Options? options) -> Xamarin.TensorFlow.Lite.Support.Model.Model?
static Xamarin.TensorFlow.Lite.Support.Model.Model.Device.Cpu.get -> Xamarin.TensorFlow.Lite.Support.Model.Model.Device?
static Xamarin.TensorFlow.Lite.Support.Model.Model.Device.Gpu.get -> Xamarin.TensorFlow.Lite.Support.Model.Model.Device?
static Xamarin.TensorFlow.Lite.Support.Model.Model.Device.Nnapi.get -> Xamarin.TensorFlow.Lite.Support.Model.Model.Device?
static Xamarin.TensorFlow.Lite.Support.Model.Model.Device.ValueOf(string? name) -> Xamarin.TensorFlow.Lite.Support.Model.Model.Device?
static Xamarin.TensorFlow.Lite.Support.Model.Model.Device.Values() -> Xamarin.TensorFlow.Lite.Support.Model.Model.Device![]?
static Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.ComputeFlatSize(int[]? shape) -> int
static Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.CreateDynamic(Xamarin.TensorFlow.Lite.DataType? dataType) -> Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer?
static Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.CreateFixedSize(int[]? shape, Xamarin.TensorFlow.Lite.DataType? dataType) -> Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer?
static Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.CreateFrom(Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer? buffer, Xamarin.TensorFlow.Lite.DataType? dataType) -> Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer?
virtual Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.Format.get -> Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat?
virtual Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.Load(Android.Media.AudioRecord? record) -> int
virtual Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.Load(float[]? src) -> void
virtual Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.Load(float[]? src, int offsetInFloat, int sizeInFloat) -> void
virtual Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.Load(short[]? src) -> void
virtual Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.Load(short[]? src, int offsetInShort, int sizeInShort) -> void
virtual Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat.Builder.Build() -> Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorAudioFormat?
virtual Xamarin.TensorFlow.Lite.Support.Audio.TensorAudio.TensorBuffer.get -> Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer?
virtual Xamarin.TensorFlow.Lite.Support.Common.Ops.CastOp.Apply(Java.Lang.Object? input) -> Java.Lang.Object?
virtual Xamarin.TensorFlow.Lite.Support.Common.Ops.NormalizeOp.Apply(Java.Lang.Object? input) -> Java.Lang.Object?
virtual Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor.Builder.Add(Xamarin.TensorFlow.Lite.Support.Common.IOperator? op) -> Java.Lang.Object?
virtual Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor.Builder.Build() -> Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor?
virtual Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor.Process(Java.Lang.Object? x) -> Java.Lang.Object?
virtual Xamarin.TensorFlow.Lite.Support.Common.TensorProcessor.Builder.Add(Xamarin.TensorFlow.Lite.Support.Common.IOperator? op) -> Java.Lang.Object?
virtual Xamarin.TensorFlow.Lite.Support.Common.TensorProcessor.Builder.Add(Xamarin.TensorFlow.Lite.Support.Common.ITensorOperator? op) -> Xamarin.TensorFlow.Lite.Support.Common.TensorProcessor.Builder?
virtual Xamarin.TensorFlow.Lite.Support.Common.TensorProcessor.Builder.Build() -> Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor?
virtual Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType.IsValidNormalizedShape(int[]? shape) -> bool
virtual Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType.Value.get -> int
virtual Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor.Builder.Add(Xamarin.TensorFlow.Lite.Support.Common.IOperator? op) -> Java.Lang.Object?
virtual Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor.Builder.Add(Xamarin.TensorFlow.Lite.Support.Common.ITensorOperator? op) -> Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor.Builder?
virtual Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor.Builder.Add(Xamarin.TensorFlow.Lite.Support.Image.IImageOperator? op) -> Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor.Builder?
virtual Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor.Builder.Build() -> Xamarin.TensorFlow.Lite.Support.Common.SequentialProcessor?
virtual Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor.InverseTransform(Android.Graphics.PointF? point, int inputImageHeight, int inputImageWidth) -> Android.Graphics.PointF?
virtual Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor.InverseTransform(Android.Graphics.RectF? rect, int inputImageHeight, int inputImageWidth) -> Android.Graphics.RectF?
virtual Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor.Process(Xamarin.TensorFlow.Lite.Support.Image.TensorImage? image) -> Xamarin.TensorFlow.Lite.Support.Image.TensorImage?
virtual Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor.UpdateNumberOfRotations(int k) -> void
virtual Xamarin.TensorFlow.Lite.Support.Image.ImageProcessor.UpdateNumberOfRotations(int k, int occurrence) -> void
virtual Xamarin.TensorFlow.Lite.Support.Image.ImageProperties.Builder.Build() -> Xamarin.TensorFlow.Lite.Support.Image.ImageProperties?
virtual Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeOp.Apply(Java.Lang.Object? image) -> Java.Lang.Object?
virtual Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeOp.GetOutputImageHeight(int inputImageHeight, int inputImageWidth) -> int
virtual Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeOp.GetOutputImageWidth(int inputImageHeight, int inputImageWidth) -> int
virtual Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeOp.InverseTransform(Android.Graphics.PointF? point, int inputImageHeight, int inputImageWidth) -> Android.Graphics.PointF?
virtual Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeWithCropOrPadOp.Apply(Java.Lang.Object? image) -> Java.Lang.Object?
virtual Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeWithCropOrPadOp.GetOutputImageHeight(int inputImageHeight, int inputImageWidth) -> int
virtual Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeWithCropOrPadOp.GetOutputImageWidth(int inputImageHeight, int inputImageWidth) -> int
virtual Xamarin.TensorFlow.Lite.Support.Image.Ops.ResizeWithCropOrPadOp.InverseTransform(Android.Graphics.PointF? point, int inputImageHeight, int inputImageWidth) -> Android.Graphics.PointF?
virtual Xamarin.TensorFlow.Lite.Support.Image.Ops.Rot90Op.Apply(Java.Lang.Object? image) -> Java.Lang.Object?
virtual Xamarin.TensorFlow.Lite.Support.Image.Ops.Rot90Op.GetOutputImageHeight(int inputImageHeight, int inputImageWidth) -> int
virtual Xamarin.TensorFlow.Lite.Support.Image.Ops.Rot90Op.GetOutputImageWidth(int inputImageHeight, int inputImageWidth) -> int
virtual Xamarin.TensorFlow.Lite.Support.Image.Ops.Rot90Op.InverseTransform(Android.Graphics.PointF? point, int inputImageHeight, int inputImageWidth) -> Android.Graphics.PointF?
virtual Xamarin.TensorFlow.Lite.Support.Image.Ops.TensorOperatorWrapper.Apply(Java.Lang.Object? image) -> Java.Lang.Object?
virtual Xamarin.TensorFlow.Lite.Support.Image.Ops.TensorOperatorWrapper.GetOutputImageHeight(int inputImageHeight, int inputImageWidth) -> int
virtual Xamarin.TensorFlow.Lite.Support.Image.Ops.TensorOperatorWrapper.GetOutputImageWidth(int inputImageHeight, int inputImageWidth) -> int
virtual Xamarin.TensorFlow.Lite.Support.Image.Ops.TensorOperatorWrapper.InverseTransform(Android.Graphics.PointF? point, int inputImageHeight, int inputImageWidth) -> Android.Graphics.PointF?
virtual Xamarin.TensorFlow.Lite.Support.Image.Ops.TransformToGrayscaleOp.Apply(Java.Lang.Object? image) -> Java.Lang.Object?
virtual Xamarin.TensorFlow.Lite.Support.Image.Ops.TransformToGrayscaleOp.GetOutputImageHeight(int inputImageHeight, int inputImageWidth) -> int
virtual Xamarin.TensorFlow.Lite.Support.Image.Ops.TransformToGrayscaleOp.GetOutputImageWidth(int inputImageHeight, int inputImageWidth) -> int
virtual Xamarin.TensorFlow.Lite.Support.Image.Ops.TransformToGrayscaleOp.InverseTransform(Android.Graphics.PointF? point, int inputImageHeight, int inputImageWidth) -> Android.Graphics.PointF?
virtual Xamarin.TensorFlow.Lite.Support.Image.TensorImage.Bitmap.get -> Android.Graphics.Bitmap?
virtual Xamarin.TensorFlow.Lite.Support.Image.TensorImage.Buffer.get -> Java.Nio.ByteBuffer?
virtual Xamarin.TensorFlow.Lite.Support.Image.TensorImage.ColorSpaceType.get -> Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType?
virtual Xamarin.TensorFlow.Lite.Support.Image.TensorImage.DataType.get -> Xamarin.TensorFlow.Lite.DataType?
virtual Xamarin.TensorFlow.Lite.Support.Image.TensorImage.Height.get -> int
virtual Xamarin.TensorFlow.Lite.Support.Image.TensorImage.Load(Android.Graphics.Bitmap? bitmap) -> void
virtual Xamarin.TensorFlow.Lite.Support.Image.TensorImage.Load(Android.Media.Image? image) -> void
virtual Xamarin.TensorFlow.Lite.Support.Image.TensorImage.Load(Java.Nio.ByteBuffer? buffer, Xamarin.TensorFlow.Lite.Support.Image.ImageProperties? imageProperties) -> void
virtual Xamarin.TensorFlow.Lite.Support.Image.TensorImage.Load(Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer? buffer) -> void
virtual Xamarin.TensorFlow.Lite.Support.Image.TensorImage.Load(Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer? buffer, Xamarin.TensorFlow.Lite.Support.Image.ColorSpaceType? colorSpaceType) -> void
virtual Xamarin.TensorFlow.Lite.Support.Image.TensorImage.Load(Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer? buffer, Xamarin.TensorFlow.Lite.Support.Image.ImageProperties? imageProperties) -> void
virtual Xamarin.TensorFlow.Lite.Support.Image.TensorImage.Load(float[]? pixels, int[]? shape) -> void
virtual Xamarin.TensorFlow.Lite.Support.Image.TensorImage.Load(int[]? pixels, int[]? shape) -> void
virtual Xamarin.TensorFlow.Lite.Support.Image.TensorImage.MediaImage.get -> Android.Media.Image?
virtual Xamarin.TensorFlow.Lite.Support.Image.TensorImage.TensorBuffer.get -> Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer?
virtual Xamarin.TensorFlow.Lite.Support.Image.TensorImage.Width.get -> int
virtual Xamarin.TensorFlow.Lite.Support.Label.Ops.LabelAxisOp.Apply(Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer? buffer) -> Xamarin.TensorFlow.Lite.Support.Label.TensorLabel?
virtual Xamarin.TensorFlow.Lite.Support.Label.Ops.LabelAxisOp.Builder.AddAxisLabel(Android.Content.Context? context, int axis, string? filePath) -> Xamarin.TensorFlow.Lite.Support.Label.Ops.LabelAxisOp.Builder?
virtual Xamarin.TensorFlow.Lite.Support.Label.Ops.LabelAxisOp.Builder.AddAxisLabel(int axis, System.Collections.Generic.IList<string!>? labels) -> Xamarin.TensorFlow.Lite.Support.Label.Ops.LabelAxisOp.Builder?
virtual Xamarin.TensorFlow.Lite.Support.Label.Ops.LabelAxisOp.Builder.Build() -> Xamarin.TensorFlow.Lite.Support.Label.Ops.LabelAxisOp?
virtual Xamarin.TensorFlow.Lite.Support.Label.TensorLabel.CategoryList.get -> System.Collections.Generic.IList<Xamarin.TensorFlow.Lite.Support.Label.Category!>?
virtual Xamarin.TensorFlow.Lite.Support.Label.TensorLabel.MapWithFloatValue.get -> System.Collections.Generic.IDictionary<string!, Java.Lang.Float!>?
virtual Xamarin.TensorFlow.Lite.Support.Label.TensorLabel.MapWithTensorBuffer.get -> System.Collections.Generic.IDictionary<string!, Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer!>?
virtual Xamarin.TensorFlow.Lite.Support.Model.Model.Builder.Build() -> Xamarin.TensorFlow.Lite.Support.Model.Model?
virtual Xamarin.TensorFlow.Lite.Support.Model.Model.Builder.SetDevice(Xamarin.TensorFlow.Lite.Support.Model.Model.Device? device) -> Xamarin.TensorFlow.Lite.Support.Model.Model.Builder?
virtual Xamarin.TensorFlow.Lite.Support.Model.Model.Builder.SetNumThreads(int numThreads) -> Xamarin.TensorFlow.Lite.Support.Model.Model.Builder?
virtual Xamarin.TensorFlow.Lite.Support.Model.Model.Close() -> void
virtual Xamarin.TensorFlow.Lite.Support.Model.Model.Data.get -> Java.Nio.MappedByteBuffer?
virtual Xamarin.TensorFlow.Lite.Support.Model.Model.GetInputTensor(int inputIndex) -> Xamarin.TensorFlow.Lite.ITensor?
virtual Xamarin.TensorFlow.Lite.Support.Model.Model.GetOutputTensor(int outputIndex) -> Xamarin.TensorFlow.Lite.ITensor?
virtual Xamarin.TensorFlow.Lite.Support.Model.Model.GetOutputTensorShape(int outputIndex) -> int[]?
virtual Xamarin.TensorFlow.Lite.Support.Model.Model.Options.Builder.Build() -> Xamarin.TensorFlow.Lite.Support.Model.Model.Options?
virtual Xamarin.TensorFlow.Lite.Support.Model.Model.Options.Builder.SetDevice(Xamarin.TensorFlow.Lite.Support.Model.Model.Device? device) -> Xamarin.TensorFlow.Lite.Support.Model.Model.Options.Builder?
virtual Xamarin.TensorFlow.Lite.Support.Model.Model.Options.Builder.SetNumThreads(int numThreads) -> Xamarin.TensorFlow.Lite.Support.Model.Model.Options.Builder?
virtual Xamarin.TensorFlow.Lite.Support.Model.Model.Options.Builder.SetTfLiteRuntime(Xamarin.TensorFlow.Lite.InterpreterApiOptions.TfLiteRuntime? tfLiteRuntime) -> Xamarin.TensorFlow.Lite.Support.Model.Model.Options.Builder?
virtual Xamarin.TensorFlow.Lite.Support.Model.Model.Path.get -> string?
virtual Xamarin.TensorFlow.Lite.Support.Model.Model.Run(Java.Lang.Object![]? inputs, System.Collections.Generic.IDictionary<Java.Lang.Integer!, Java.Lang.Object!>? outputs) -> void
virtual Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.Buffer.get -> Java.Nio.ByteBuffer?
virtual Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.CopyByteBufferIfReadOnly() -> void
virtual Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.FlatSize.get -> int
virtual Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.GetShape() -> int[]?
virtual Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.IsDynamic.get -> bool
virtual Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.LoadArray(float[]? src) -> void
virtual Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.LoadArray(int[]? src) -> void
virtual Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.LoadBuffer(Java.Nio.ByteBuffer? buffer) -> void
virtual Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.LoadBuffer(Java.Nio.ByteBuffer? buffer, int[]? shape) -> void
virtual Xamarin.TensorFlow.Lite.Support.TensorBuffer.TensorBuffer.Resize(int[]? shape) -> void
