#nullable enable
AndroidX.Wear.WatchFace.Client.ClientDisconnectedWithParamEventArgs
AndroidX.Wear.WatchFace.Client.ClientDisconnectedWithParamEventArgs.ClientDisconnectedWithParamEventArgs(int disconnectReason) -> void
AndroidX.Wear.WatchFace.Client.ClientDisconnectedWithParamEventArgs.DisconnectReason.get -> int
AndroidX.Wear.WatchFace.Client.ComplicationSlotMetadata
AndroidX.Wear.WatchFace.Client.ComplicationSlotMetadata.BoundingArc.get -> AndroidX.Wear.WatchFace.BoundingArc?
AndroidX.Wear.WatchFace.Client.ComplicationSlotMetadata.Bounds.get -> AndroidX.Wear.WatchFace.Complications.ComplicationSlotBounds?
AndroidX.Wear.WatchFace.Client.ComplicationSlotMetadata.BoundsType.get -> int
AndroidX.Wear.WatchFace.Client.ComplicationSlotMetadata.ComplicationConfigExtras.get -> Android.OS.Bundle!
AndroidX.Wear.WatchFace.Client.ComplicationSlotMetadata.ComplicationSlotMetadata(AndroidX.Wear.WatchFace.Complications.ComplicationSlotBounds? bounds, int boundsType, System.Collections.Generic.IList<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>! supportedTypes, AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy! defaultDataSourcePolicy, bool isInitiallyEnabled, bool fixedComplicationDataSource, Android.OS.Bundle! complicationConfigExtras) -> void
AndroidX.Wear.WatchFace.Client.ComplicationSlotMetadata.ComplicationSlotMetadata(AndroidX.Wear.WatchFace.Complications.ComplicationSlotBounds? bounds, int boundsType, System.Collections.Generic.IList<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>! supportedTypes, AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy! defaultDataSourcePolicy, bool isInitiallyEnabled, bool fixedComplicationDataSource, Android.OS.Bundle! complicationConfigExtras, AndroidX.Wear.WatchFace.BoundingArc? boundingArc) -> void
AndroidX.Wear.WatchFace.Client.ComplicationSlotMetadata.DefaultDataSourcePolicy.get -> AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy!
AndroidX.Wear.WatchFace.Client.ComplicationSlotMetadata.FixedComplicationDataSource.get -> bool
AndroidX.Wear.WatchFace.Client.ComplicationSlotMetadata.IsInitiallyEnabled.get -> bool
AndroidX.Wear.WatchFace.Client.ComplicationSlotMetadata.SupportedTypes.get -> System.Collections.Generic.IList<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>!
AndroidX.Wear.WatchFace.Client.ComplicationSlotState
AndroidX.Wear.WatchFace.Client.ComplicationSlotState.BoundingArc.get -> AndroidX.Wear.WatchFace.BoundingArc?
AndroidX.Wear.WatchFace.Client.ComplicationSlotState.Bounds.get -> Android.Graphics.Rect!
AndroidX.Wear.WatchFace.Client.ComplicationSlotState.BoundsType.get -> int
AndroidX.Wear.WatchFace.Client.ComplicationSlotState.ComplicationConfigExtras.get -> Android.OS.Bundle!
AndroidX.Wear.WatchFace.Client.ComplicationSlotState.ComplicationSlotState(Android.Graphics.Rect! bounds, int boundsType, System.Collections.Generic.IList<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>! supportedTypes, AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy! defaultDataSourcePolicy, AndroidX.Wear.WatchFace.Complications.Data.ComplicationType! defaultDataSourceType, bool isEnabled, bool isInitiallyEnabled, AndroidX.Wear.WatchFace.Complications.Data.ComplicationType! currentType, bool fixedComplicationDataSource, Android.OS.Bundle! complicationConfigExtras) -> void
AndroidX.Wear.WatchFace.Client.ComplicationSlotState.ComplicationSlotState(Android.Graphics.Rect! bounds, int boundsType, System.Collections.Generic.IList<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>! supportedTypes, AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy! defaultDataSourcePolicy, bool isEnabled, bool isInitiallyEnabled, AndroidX.Wear.WatchFace.Complications.Data.ComplicationType! currentType, bool fixedComplicationDataSource, Android.OS.Bundle! complicationConfigExtras, Java.Lang.Integer? nameResourceId, Java.Lang.Integer? screenReaderNameResourceId) -> void
AndroidX.Wear.WatchFace.Client.ComplicationSlotState.ComplicationSlotState(Android.Graphics.Rect! bounds, int boundsType, System.Collections.Generic.IList<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>! supportedTypes, AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy! defaultDataSourcePolicy, bool isEnabled, bool isInitiallyEnabled, AndroidX.Wear.WatchFace.Complications.Data.ComplicationType! currentType, bool fixedComplicationDataSource, Android.OS.Bundle! complicationConfigExtras, Java.Lang.Integer? nameResourceId, Java.Lang.Integer? screenReaderNameResourceId, AndroidX.Wear.WatchFace.BoundingArc? edgeComplicationBoundingArc) -> void
AndroidX.Wear.WatchFace.Client.ComplicationSlotState.ComplicationSlotState(AndroidX.Wear.WatchFace.Data.ComplicationStateWireFormat! complicationStateWireFormat) -> void
AndroidX.Wear.WatchFace.Client.ComplicationSlotState.CurrentType.get -> AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!
AndroidX.Wear.WatchFace.Client.ComplicationSlotState.DefaultDataSourcePolicy.get -> AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy!
AndroidX.Wear.WatchFace.Client.ComplicationSlotState.DefaultDataSourceType.get -> AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!
AndroidX.Wear.WatchFace.Client.ComplicationSlotState.FixedComplicationDataSource.get -> bool
AndroidX.Wear.WatchFace.Client.ComplicationSlotState.IsEnabled.get -> bool
AndroidX.Wear.WatchFace.Client.ComplicationSlotState.IsInitiallyEnabled.get -> bool
AndroidX.Wear.WatchFace.Client.ComplicationSlotState.NameResourceId.get -> Java.Lang.Integer?
AndroidX.Wear.WatchFace.Client.ComplicationSlotState.ScreenReaderNameResourceId.get -> Java.Lang.Integer?
AndroidX.Wear.WatchFace.Client.ComplicationSlotState.SupportedTypes.get -> System.Collections.Generic.IList<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>!
AndroidX.Wear.WatchFace.Client.DefaultComplicationDataSourcePolicyAndType
AndroidX.Wear.WatchFace.Client.DefaultComplicationDataSourcePolicyAndType.DefaultComplicationDataSourcePolicyAndType(AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy! policy, AndroidX.Wear.WatchFace.Complications.Data.ComplicationType! type) -> void
AndroidX.Wear.WatchFace.Client.DefaultComplicationDataSourcePolicyAndType.Policy.get -> AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy!
AndroidX.Wear.WatchFace.Client.DefaultComplicationDataSourcePolicyAndType.Type.get -> AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!
AndroidX.Wear.WatchFace.Client.DeviceConfig
AndroidX.Wear.WatchFace.Client.DeviceConfig.AnalogPreviewReferenceTimeMillis.get -> long
AndroidX.Wear.WatchFace.Client.DeviceConfig.AsWireDeviceConfig() -> AndroidX.Wear.WatchFace.Data.DeviceConfig!
AndroidX.Wear.WatchFace.Client.DeviceConfig.DeviceConfig(bool hasLowBitAmbient, bool hasBurnInProtection, long analogPreviewReferenceTimeMillis, long digitalPreviewReferenceTimeMillis) -> void
AndroidX.Wear.WatchFace.Client.DeviceConfig.DigitalPreviewReferenceTimeMillis.get -> long
AndroidX.Wear.WatchFace.Client.DeviceConfig.HasBurnInProtection.get -> bool
AndroidX.Wear.WatchFace.Client.DeviceConfig.HasLowBitAmbient.get -> bool
AndroidX.Wear.WatchFace.Client.DeviceConfigKt
AndroidX.Wear.WatchFace.Client.DisconnectReasonAttribute
AndroidX.Wear.WatchFace.Client.DisconnectReasonAttribute.DisconnectReasonAttribute() -> void
AndroidX.Wear.WatchFace.Client.DisconnectReasons
AndroidX.Wear.WatchFace.Client.EditorEventArgs
AndroidX.Wear.WatchFace.Client.EditorEventArgs.EditorEventArgs(AndroidX.Wear.WatchFace.Client.EditorState! editorState) -> void
AndroidX.Wear.WatchFace.Client.EditorEventArgs.EditorState.get -> AndroidX.Wear.WatchFace.Client.EditorState!
AndroidX.Wear.WatchFace.Client.EditorState
AndroidX.Wear.WatchFace.Client.EditorState.PreviewComplicationsData.get -> System.Collections.Generic.IDictionary<Java.Lang.Integer!, AndroidX.Wear.WatchFace.Complications.Data.ComplicationData!>!
AndroidX.Wear.WatchFace.Client.EditorState.PreviewImage.get -> Android.Graphics.Bitmap?
AndroidX.Wear.WatchFace.Client.EditorState.ShouldCommitChanges() -> bool
AndroidX.Wear.WatchFace.Client.EditorState.UserStyle.get -> AndroidX.Wear.WatchFace.Style.UserStyleData!
AndroidX.Wear.WatchFace.Client.EditorState.WatchFaceId.get -> AndroidX.Wear.WatchFace.Client.WatchFaceId!
AndroidX.Wear.WatchFace.Client.EditorStateKt
AndroidX.Wear.WatchFace.Client.HeadlessWatchFaceClient
AndroidX.Wear.WatchFace.Client.HeadlessWatchFaceClientCompanion
AndroidX.Wear.WatchFace.Client.HeadlessWatchFaceClientCompanion.CreateFromBundle(Android.OS.Bundle! bundle) -> AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClient!
AndroidX.Wear.WatchFace.Client.HeadlessWatchFaceClientConsts
AndroidX.Wear.WatchFace.Client.IDisconnectReason
AndroidX.Wear.WatchFace.Client.IEditorListener
AndroidX.Wear.WatchFace.Client.IEditorListener.OnEditorStateChanged(AndroidX.Wear.WatchFace.Client.EditorState! editorState) -> void
AndroidX.Wear.WatchFace.Client.IEditorServiceClient
AndroidX.Wear.WatchFace.Client.IEditorServiceClient.AddListener(AndroidX.Wear.WatchFace.Client.IEditorListener! editorListener, Java.Util.Concurrent.IExecutor! listenerExecutor) -> void
AndroidX.Wear.WatchFace.Client.IEditorServiceClient.CloseEditor() -> void
AndroidX.Wear.WatchFace.Client.IEditorServiceClient.RemoveListener(AndroidX.Wear.WatchFace.Client.IEditorListener! editorListener) -> void
AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClient
AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClient.AddClientDisconnectListener(AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClientClientDisconnectListener! listener, Java.Util.Concurrent.IExecutor! executor) -> void
AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClient.Companion.get -> AndroidX.Wear.WatchFace.Client.HeadlessWatchFaceClientCompanion!
AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClient.ComplicationSlotsState.get -> System.Collections.Generic.IDictionary<Java.Lang.Integer!, AndroidX.Wear.WatchFace.Client.ComplicationSlotState!>!
AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClient.CreateFromBundle(Android.OS.Bundle! bundle) -> AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClient!
AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClient.GetUserStyleSchemaDigestHash() -> byte[]!
AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClient.IsConnectionAlive.get -> bool
AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClient.IsRenderWatchFaceToSurfaceSupported.get -> bool
AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClient.PreviewReferenceInstant.get -> Java.Time.Instant!
AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClient.RemoveClientDisconnectListener(AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClientClientDisconnectListener! listener) -> void
AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClient.RenderComplicationToBitmap(int complicationSlotId, AndroidX.Wear.WatchFace.RenderParameters! renderParameters, Java.Time.Instant! instant, AndroidX.Wear.WatchFace.Complications.Data.ComplicationData! complicationData, AndroidX.Wear.WatchFace.Style.UserStyle? userStyle) -> Android.Graphics.Bitmap?
AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClient.RenderWatchFaceToBitmap(AndroidX.Wear.WatchFace.RenderParameters! renderParameters, Java.Time.Instant! instant, AndroidX.Wear.WatchFace.Style.UserStyle? userStyle, System.Collections.Generic.IDictionary<Java.Lang.Integer!, AndroidX.Wear.WatchFace.Complications.Data.ComplicationData!>? slotIdToComplicationData) -> Android.Graphics.Bitmap!
AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClient.ToBundle() -> Android.OS.Bundle!
AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClient.UserStyleFlavors.get -> AndroidX.Wear.WatchFace.Style.UserStyleFlavors!
AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClient.UserStyleSchema.get -> AndroidX.Wear.WatchFace.Style.UserStyleSchema!
AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClientClientDisconnectListener
AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClientClientDisconnectListener.OnClientDisconnected() -> void
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.AddClientDisconnectListener(AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClientClientDisconnectListener! listener, Java.Util.Concurrent.IExecutor! executor) -> void
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.AddOnWatchFaceColorsListener(Java.Util.Concurrent.IExecutor! executor, AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.AddOnWatchFaceReadyListener(Java.Util.Concurrent.IExecutor! executor, AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClientOnWatchFaceReadyListener! listener) -> void
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.Companion.get -> AndroidX.Wear.WatchFace.Client.InteractiveWatchFaceClientCompanion!
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.ComplicationSlotsState.get -> System.Collections.Generic.IDictionary<Java.Lang.Integer!, AndroidX.Wear.WatchFace.Client.ComplicationSlotState!>!
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.ContentDescriptionLabels.get -> System.Collections.Generic.IList<AndroidX.Wear.WatchFace.ContentDescriptionLabel!>!
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.CreateRemoteWatchFaceViewHost(Android.OS.IBinder! hostToken, int width, int height) -> AndroidX.Wear.WatchFace.Client.IRemoteWatchFaceViewHost?
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.GetComplicationIdAt(int x, int y) -> Java.Lang.Integer?
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.InstanceId.get -> string!
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.IsComplicationDisplayPolicySupported.get -> bool
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.IsConnectionAlive.get -> bool
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.IsRemoteWatchFaceViewHostSupported.get -> bool
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.OverlayStyle.get -> AndroidX.Wear.WatchFace.Client.OverlayStyle!
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.PerformAmbientTick() -> void
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.PreviewReferenceInstant.get -> Java.Time.Instant!
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.RemoveClientDisconnectListener(AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClientClientDisconnectListener! listener) -> void
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.RemoveOnWatchFaceColorsListener(AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.RemoveOnWatchFaceReadyListener(AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClientOnWatchFaceReadyListener! listener) -> void
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.RenderWatchFaceToBitmap(AndroidX.Wear.WatchFace.RenderParameters! renderParameters, Java.Time.Instant! instant, AndroidX.Wear.WatchFace.Style.UserStyle? userStyle, System.Collections.Generic.IDictionary<Java.Lang.Integer!, AndroidX.Wear.WatchFace.Complications.Data.ComplicationData!>? idAndComplicationData) -> Android.Graphics.Bitmap!
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.SendTouchEvent(int xPosition, int yPosition, int tapType) -> void
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.SetWatchUiState(AndroidX.Wear.WatchFace.Client.WatchUiState! watchUiState) -> void
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.UpdateComplicationData(System.Collections.Generic.IDictionary<Java.Lang.Integer!, AndroidX.Wear.WatchFace.Complications.Data.ComplicationData!>! slotIdToComplicationData) -> void
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.UpdateWatchFaceInstance(string! newInstanceId, AndroidX.Wear.WatchFace.Style.UserStyle! userStyle) -> void
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.UpdateWatchFaceInstance(string! newInstanceId, AndroidX.Wear.WatchFace.Style.UserStyleData! userStyle) -> void
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient.UserStyleSchema.get -> AndroidX.Wear.WatchFace.Style.UserStyleSchema!
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClientClientDisconnectListener
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClientClientDisconnectListener.OnClientDisconnected() -> void
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClientClientDisconnectListener.OnClientDisconnectedWithParam(int disconnectReason) -> void
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClientOnWatchFaceReadyListener
AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClientOnWatchFaceReadyListener.OnWatchFaceReady() -> void
AndroidX.Wear.WatchFace.Client.IInterruptionFilter
AndroidX.Wear.WatchFace.Client.IRemoteWatchFaceViewHost
AndroidX.Wear.WatchFace.Client.IRemoteWatchFaceViewHost.RenderWatchFace(AndroidX.Wear.WatchFace.RenderParameters! renderParameters, Java.Time.Instant! instant, AndroidX.Wear.WatchFace.Style.UserStyle? userStyle, System.Collections.Generic.IDictionary<Java.Lang.Integer!, AndroidX.Wear.WatchFace.Complications.Data.ComplicationData!>? idAndComplicationData) -> void
AndroidX.Wear.WatchFace.Client.IRemoteWatchFaceViewHost.SurfacePackage.get -> Android.Views.SurfaceControlViewHost.SurfacePackage!
AndroidX.Wear.WatchFace.Client.IWatchFaceClientExperimental
AndroidX.Wear.WatchFace.Client.IWatchFaceControlClient
AndroidX.Wear.WatchFace.Client.IWatchFaceControlClient.Companion.get -> AndroidX.Wear.WatchFace.Client.WatchFaceControlClientCompanion!
AndroidX.Wear.WatchFace.Client.IWatchFaceControlClient.CreateHeadlessWatchFaceClient(Android.Content.ComponentName! watchFaceName, AndroidX.Wear.WatchFace.Client.DeviceConfig! deviceConfig, int surfaceWidth, int surfaceHeight) -> AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClient?
AndroidX.Wear.WatchFace.Client.IWatchFaceControlClient.CreateHeadlessWatchFaceClient(string! id, Android.Content.ComponentName! watchFaceName, AndroidX.Wear.WatchFace.Client.DeviceConfig! deviceConfig, int surfaceWidth, int surfaceHeight) -> AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClient?
AndroidX.Wear.WatchFace.Client.IWatchFaceControlClient.CreateWatchFaceControlClient(Android.Content.Context! context, string! watchFacePackageName, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
AndroidX.Wear.WatchFace.Client.IWatchFaceControlClient.CreateWatchFaceRuntimeControlClient(Android.Content.Context! context, string! runtimePackageName, string! resourceOnlyWatchFacePackageName, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
AndroidX.Wear.WatchFace.Client.IWatchFaceControlClient.EditorServiceClient.get -> AndroidX.Wear.WatchFace.Client.IEditorServiceClient!
AndroidX.Wear.WatchFace.Client.IWatchFaceControlClient.GetDefaultComplicationDataSourcePoliciesAndType(Android.Content.ComponentName! watchFaceName) -> System.Collections.Generic.IDictionary<Java.Lang.Integer!, AndroidX.Wear.WatchFace.Client.DefaultComplicationDataSourcePolicyAndType!>!
AndroidX.Wear.WatchFace.Client.IWatchFaceControlClient.GetInteractiveWatchFaceClientInstance(string! instanceId) -> AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClient?
AndroidX.Wear.WatchFace.Client.IWatchFaceControlClient.GetOrCreateInteractiveWatchFaceClient(string! id, AndroidX.Wear.WatchFace.Client.DeviceConfig! deviceConfig, AndroidX.Wear.WatchFace.Client.WatchUiState! watchUiState, AndroidX.Wear.WatchFace.Style.UserStyleData? userStyle, System.Collections.Generic.IDictionary<Java.Lang.Integer!, AndroidX.Wear.WatchFace.Complications.Data.ComplicationData!>? slotIdToComplicationData, Kotlin.Coroutines.IContinuation! p5) -> Java.Lang.Object?
AndroidX.Wear.WatchFace.Client.IWatchFaceControlClient.GetOrCreateInteractiveWatchFaceClient(string! instanceId, AndroidX.Wear.WatchFace.Client.DeviceConfig! deviceConfig, AndroidX.Wear.WatchFace.Client.WatchUiState! watchUiState, AndroidX.Wear.WatchFace.Style.UserStyleData? userStyle, System.Collections.Generic.IDictionary<Java.Lang.Integer!, AndroidX.Wear.WatchFace.Complications.Data.ComplicationData!>? slotIdToComplicationData, Java.Util.Concurrent.IExecutor! previewImageUpdateRequestedExecutor, AndroidX.Core.Util.IConsumer! previewImageUpdateRequestedListener, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
AndroidX.Wear.WatchFace.Client.IWatchFaceControlClient.HasComplicationDataCache.get -> bool
AndroidX.Wear.WatchFace.Client.IWatchFaceMetadataClient
AndroidX.Wear.WatchFace.Client.IWatchFaceMetadataClient.Companion.get -> AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientCompanion!
AndroidX.Wear.WatchFace.Client.IWatchFaceMetadataClient.ComplicationSlotMetadataMap.get -> System.Collections.Generic.IDictionary<Java.Lang.Integer!, AndroidX.Wear.WatchFace.Client.ComplicationSlotMetadata!>!
AndroidX.Wear.WatchFace.Client.IWatchFaceMetadataClient.IsUserStyleSchemaStatic.get -> bool
AndroidX.Wear.WatchFace.Client.IWatchFaceMetadataClient.UserStyleFlavors.get -> AndroidX.Wear.WatchFace.Style.UserStyleFlavors!
AndroidX.Wear.WatchFace.Client.IWatchFaceMetadataClient.UserStyleSchema.get -> AndroidX.Wear.WatchFace.Style.UserStyleSchema!
AndroidX.Wear.WatchFace.Client.InteractiveWatchFaceClient
AndroidX.Wear.WatchFace.Client.InteractiveWatchFaceClientClientDisconnectListenerDefaultImpls
AndroidX.Wear.WatchFace.Client.InteractiveWatchFaceClientCompanion
AndroidX.Wear.WatchFace.Client.InteractiveWatchFaceClientConsts
AndroidX.Wear.WatchFace.Client.InterruptionFilterAttribute
AndroidX.Wear.WatchFace.Client.InterruptionFilterAttribute.InterruptionFilterAttribute() -> void
AndroidX.Wear.WatchFace.Client.OverlayStyle
AndroidX.Wear.WatchFace.Client.OverlayStyle.BackgroundColor.get -> Android.Graphics.ColorObject?
AndroidX.Wear.WatchFace.Client.OverlayStyle.ForegroundColor.get -> Android.Graphics.ColorObject?
AndroidX.Wear.WatchFace.Client.OverlayStyle.OverlayStyle() -> void
AndroidX.Wear.WatchFace.Client.OverlayStyle.OverlayStyle(Android.Graphics.ColorObject? backgroundColor, Android.Graphics.ColorObject? foregroundColor) -> void
AndroidX.Wear.WatchFace.Client.WatchFaceClientExperimentalAttribute
AndroidX.Wear.WatchFace.Client.WatchFaceClientExperimentalAttribute.WatchFaceClientExperimentalAttribute() -> void
AndroidX.Wear.WatchFace.Client.WatchFaceControlClient
AndroidX.Wear.WatchFace.Client.WatchFaceControlClientCompanion
AndroidX.Wear.WatchFace.Client.WatchFaceControlClientCompanion.CreateWatchFaceControlClient(Android.Content.Context! context, string! watchFacePackageName, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
AndroidX.Wear.WatchFace.Client.WatchFaceControlClientCompanion.CreateWatchFaceControlClientImpl(Android.Content.Context! context, Android.Content.Intent! intent, string? resourceOnlyWatchFacePackageName, Kotlin.Coroutines.IContinuation! p3) -> Java.Lang.Object?
AndroidX.Wear.WatchFace.Client.WatchFaceControlClientCompanion.CreateWatchFaceRuntimeControlClient(Android.Content.Context! context, string! runtimePackageName, string! resourceOnlyWatchFacePackageName, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
AndroidX.Wear.WatchFace.Client.WatchFaceControlClientConsts
AndroidX.Wear.WatchFace.Client.WatchFaceControlClientServiceNotBoundException
AndroidX.Wear.WatchFace.Client.WatchFaceControlClientServiceNotBoundException.WatchFaceControlClientServiceNotBoundException() -> void
AndroidX.Wear.WatchFace.Client.WatchFaceControlClientServiceStartFailureException
AndroidX.Wear.WatchFace.Client.WatchFaceControlClientServiceStartFailureException.WatchFaceControlClientServiceStartFailureException() -> void
AndroidX.Wear.WatchFace.Client.WatchFaceControlClientServiceStartFailureException.WatchFaceControlClientServiceStartFailureException(string! message) -> void
AndroidX.Wear.WatchFace.Client.WatchFaceExceptionKt
AndroidX.Wear.WatchFace.Client.WatchFaceId
AndroidX.Wear.WatchFace.Client.WatchFaceId.Id.get -> string!
AndroidX.Wear.WatchFace.Client.WatchFaceId.WatchFaceId(string! id) -> void
AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClient
AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientCompanion
AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientCompanion.Create(Android.Content.Context! context, Android.Content.ComponentName! watchFaceName, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientCompanion.CreateForRuntime(Android.Content.Context! context, Android.Content.ComponentName! watchFaceName, string! runtimePackage, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientCompanion.CreateImpl(Android.Content.Context! context, Android.Content.Intent! intent, Android.Content.ComponentName! watchFaceName, AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientCompanion.ParserProvider? parserProvider, Kotlin.Coroutines.IContinuation! p4) -> Java.Lang.Object?
AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientCompanion.ParserProvider
AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientCompanion.ParserProvider.ParserProvider() -> void
AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientCompanion.ParserProvider.ParserProvider(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientConsts
AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientKt
AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientServiceNotBoundException
AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientServiceNotBoundException.WatchFaceMetadataClientServiceNotBoundException() -> void
AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientServiceStartFailureException
AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientServiceStartFailureException.WatchFaceMetadataClientServiceStartFailureException() -> void
AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientServiceStartFailureException.WatchFaceMetadataClientServiceStartFailureException(string! message) -> void
AndroidX.Wear.WatchFace.Client.WatchUiState
AndroidX.Wear.WatchFace.Client.WatchUiState.InAmbientMode() -> bool
AndroidX.Wear.WatchFace.Client.WatchUiState.InterruptionFilter.get -> int
AndroidX.Wear.WatchFace.Client.WatchUiState.WatchUiState(bool inAmbientMode, int interruptionFilter) -> void
const AndroidX.Wear.WatchFace.Client.DisconnectReasons.EngineDetached = 2 -> int
const AndroidX.Wear.WatchFace.Client.DisconnectReasons.EngineDied = 1 -> int
const AndroidX.Wear.WatchFace.Client.HeadlessWatchFaceClient.BinderKey = "HeadlessWatchFaceClient" -> string!
const AndroidX.Wear.WatchFace.Client.InteractiveWatchFaceClient.TapTypeCancel = 1 -> int
const AndroidX.Wear.WatchFace.Client.InteractiveWatchFaceClient.TapTypeDown = 0 -> int
const AndroidX.Wear.WatchFace.Client.InteractiveWatchFaceClient.TapTypeUp = 2 -> int
const AndroidX.Wear.WatchFace.Client.InteractiveWatchFaceClientCompanion.TapTypeCancel = 1 -> int
const AndroidX.Wear.WatchFace.Client.InteractiveWatchFaceClientCompanion.TapTypeDown = 0 -> int
const AndroidX.Wear.WatchFace.Client.InteractiveWatchFaceClientCompanion.TapTypeUp = 2 -> int
override AndroidX.Wear.WatchFace.Client.ComplicationSlotMetadata.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.ComplicationSlotState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.DefaultComplicationDataSourcePolicyAndType.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.DeviceConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.DeviceConfigKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.DisconnectReasons.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.EditorState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.EditorStateKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.HeadlessWatchFaceClientCompanion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.InteractiveWatchFaceClientClientDisconnectListenerDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.InteractiveWatchFaceClientCompanion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.OverlayStyle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.WatchFaceControlClientCompanion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.WatchFaceControlClientServiceNotBoundException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.WatchFaceControlClientServiceStartFailureException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.WatchFaceExceptionKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.WatchFaceId.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientCompanion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientCompanion.ParserProvider.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientCompanion.ParserProvider.ThresholdClass.get -> nint
override AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientCompanion.ParserProvider.ThresholdType.get -> System.Type!
override AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientServiceNotBoundException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientServiceStartFailureException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Client.WatchUiState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
static AndroidX.Wear.WatchFace.Client.DeviceConfigKt.AsApiDeviceConfig(AndroidX.Wear.WatchFace.Data.DeviceConfig! obj) -> AndroidX.Wear.WatchFace.Client.DeviceConfig!
static AndroidX.Wear.WatchFace.Client.DisconnectReasons.Instance.get -> AndroidX.Wear.WatchFace.Client.DisconnectReasons!
static AndroidX.Wear.WatchFace.Client.EditorStateKt.AsApiEditorState(AndroidX.Wear.WatchFace.Editor.Data.EditorStateWireFormat! obj) -> AndroidX.Wear.WatchFace.Client.EditorState!
static AndroidX.Wear.WatchFace.Client.HeadlessWatchFaceClient.Companion.get -> AndroidX.Wear.WatchFace.Client.HeadlessWatchFaceClientCompanion!
static AndroidX.Wear.WatchFace.Client.HeadlessWatchFaceClient.CreateFromBundle(Android.OS.Bundle! bundle) -> AndroidX.Wear.WatchFace.Client.IHeadlessWatchFaceClient!
static AndroidX.Wear.WatchFace.Client.InteractiveWatchFaceClient.Companion.get -> AndroidX.Wear.WatchFace.Client.InteractiveWatchFaceClientCompanion!
static AndroidX.Wear.WatchFace.Client.InteractiveWatchFaceClientClientDisconnectListenerDefaultImpls.OnClientDisconnected(AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClientClientDisconnectListener! _this) -> void
static AndroidX.Wear.WatchFace.Client.InteractiveWatchFaceClientClientDisconnectListenerDefaultImpls.OnClientDisconnected(AndroidX.Wear.WatchFace.Client.IInteractiveWatchFaceClientClientDisconnectListener! _this, int disconnectReason) -> void
static AndroidX.Wear.WatchFace.Client.WatchFaceControlClient.Companion.get -> AndroidX.Wear.WatchFace.Client.WatchFaceControlClientCompanion!
static AndroidX.Wear.WatchFace.Client.WatchFaceControlClient.CreateWatchFaceControlClient(Android.Content.Context! context, string! watchFacePackageName, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Wear.WatchFace.Client.WatchFaceControlClient.CreateWatchFaceRuntimeControlClient(Android.Content.Context! context, string! runtimePackageName, string! resourceOnlyWatchFacePackageName, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClient.Companion.get -> AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientCompanion!
virtual AndroidX.Wear.WatchFace.Client.WatchFaceMetadataClientCompanion.ParserProvider.GetParser(Android.Content.Context! context, Android.Content.ComponentName! watchFaceName) -> System.Xml.XmlReader?
