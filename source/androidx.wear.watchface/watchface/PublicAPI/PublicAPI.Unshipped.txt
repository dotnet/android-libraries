#nullable enable
AndroidX.Wear.WatchFace.BackgroundComplicationTapFilter
AndroidX.Wear.WatchFace.BackgroundComplicationTapFilter.BackgroundComplicationTapFilter() -> void
AndroidX.Wear.WatchFace.BackgroundComplicationTapFilter.HitTest(AndroidX.Wear.WatchFace.ComplicationSlot! complicationSlot, Android.Graphics.Rect! screenBounds, int x, int y, bool includeMargins) -> bool
AndroidX.Wear.WatchFace.BoundingArc
AndroidX.Wear.WatchFace.BoundingArc.BoundingArc(float startAngle, float totalAngle, float thickness) -> void
AndroidX.Wear.WatchFace.BoundingArc.HitTest(Android.Graphics.Rect! rect, float x, float y) -> bool
AndroidX.Wear.WatchFace.BoundingArc.StartAngle.get -> float
AndroidX.Wear.WatchFace.BoundingArc.Thickness.get -> float
AndroidX.Wear.WatchFace.BoundingArc.ToWireFormat() -> AndroidX.Wear.WatchFace.Data.BoundingArcWireFormat!
AndroidX.Wear.WatchFace.BoundingArc.TotalAngle.get -> float
AndroidX.Wear.WatchFace.BroadcastsObserver
AndroidX.Wear.WatchFace.BroadcastsObserver.BroadcastsObserver(AndroidX.Wear.WatchFace.WatchState! watchState, AndroidX.Wear.WatchFace.IWatchFaceHostApi! watchFaceHostApi, Xamarin.KotlinX.Coroutines.IDeferred! deferredWatchFaceImpl, Xamarin.KotlinX.Coroutines.ICoroutineScope! uiThreadCoroutineScope) -> void
AndroidX.Wear.WatchFace.BroadcastsObserver.OnActionAmbientStarted() -> void
AndroidX.Wear.WatchFace.BroadcastsObserver.OnActionAmbientStopped() -> void
AndroidX.Wear.WatchFace.BroadcastsObserver.OnActionBatteryLow() -> void
AndroidX.Wear.WatchFace.BroadcastsObserver.OnActionBatteryOkay() -> void
AndroidX.Wear.WatchFace.BroadcastsObserver.OnActionPowerConnected() -> void
AndroidX.Wear.WatchFace.BroadcastsObserver.OnActionPowerDisconnected() -> void
AndroidX.Wear.WatchFace.BroadcastsObserver.OnActionScreenOff() -> void
AndroidX.Wear.WatchFace.BroadcastsObserver.OnActionTimeChanged() -> void
AndroidX.Wear.WatchFace.BroadcastsObserver.OnActionTimeTick() -> void
AndroidX.Wear.WatchFace.BroadcastsObserver.OnActionTimeZoneChanged() -> void
AndroidX.Wear.WatchFace.BroadcastsObserver.OnActionUserPresent() -> void
AndroidX.Wear.WatchFace.BroadcastsObserver.OnMockTime(Android.Content.Intent! intent) -> void
AndroidX.Wear.WatchFace.BroadcastsObserver.OnSysUiHasSentWatchUiState() -> void
AndroidX.Wear.WatchFace.BroadcastsReceiver
AndroidX.Wear.WatchFace.BroadcastsReceiver.BroadcastsReceiver(Android.Content.Context! context, AndroidX.Wear.WatchFace.BroadcastsReceiver.IBroadcastEventObserver! observer) -> void
AndroidX.Wear.WatchFace.BroadcastsReceiver.Companion
AndroidX.Wear.WatchFace.BroadcastsReceiver.IBroadcastEventObserver
AndroidX.Wear.WatchFace.BroadcastsReceiver.IBroadcastEventObserver.OnActionAmbientStarted() -> void
AndroidX.Wear.WatchFace.BroadcastsReceiver.IBroadcastEventObserver.OnActionAmbientStopped() -> void
AndroidX.Wear.WatchFace.BroadcastsReceiver.IBroadcastEventObserver.OnActionBatteryLow() -> void
AndroidX.Wear.WatchFace.BroadcastsReceiver.IBroadcastEventObserver.OnActionBatteryOkay() -> void
AndroidX.Wear.WatchFace.BroadcastsReceiver.IBroadcastEventObserver.OnActionPowerConnected() -> void
AndroidX.Wear.WatchFace.BroadcastsReceiver.IBroadcastEventObserver.OnActionPowerDisconnected() -> void
AndroidX.Wear.WatchFace.BroadcastsReceiver.IBroadcastEventObserver.OnActionScreenOff() -> void
AndroidX.Wear.WatchFace.BroadcastsReceiver.IBroadcastEventObserver.OnActionTimeChanged() -> void
AndroidX.Wear.WatchFace.BroadcastsReceiver.IBroadcastEventObserver.OnActionTimeTick() -> void
AndroidX.Wear.WatchFace.BroadcastsReceiver.IBroadcastEventObserver.OnActionTimeZoneChanged() -> void
AndroidX.Wear.WatchFace.BroadcastsReceiver.IBroadcastEventObserver.OnActionUserPresent() -> void
AndroidX.Wear.WatchFace.BroadcastsReceiver.IBroadcastEventObserver.OnMockTime(Android.Content.Intent! intent) -> void
AndroidX.Wear.WatchFace.BroadcastsReceiver.OnDestroy() -> void
AndroidX.Wear.WatchFace.CanvasComplicationDefaultImpls
AndroidX.Wear.WatchFace.CanvasType
AndroidX.Wear.WatchFace.CanvasTypeIntDefAttribute
AndroidX.Wear.WatchFace.CanvasTypeIntDefAttribute.CanvasTypeIntDefAttribute() -> void
AndroidX.Wear.WatchFace.ComplicationDataSourceChooserIntent
AndroidX.Wear.WatchFace.ComplicationDataSourceChooserIntent.ComplicationDataSourceChooserIntent(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Wear.WatchFace.ComplicationHelperActivity
AndroidX.Wear.WatchFace.ComplicationHelperActivity.ComplicationHelperActivity() -> void
AndroidX.Wear.WatchFace.ComplicationSlot
AndroidX.Wear.WatchFace.ComplicationSlot.AccessibilityTraversalIndex.get -> int
AndroidX.Wear.WatchFace.ComplicationSlot.BoundingArc.get -> AndroidX.Wear.WatchFace.BoundingArc?
AndroidX.Wear.WatchFace.ComplicationSlot.BoundsType.get -> int
AndroidX.Wear.WatchFace.ComplicationSlot.Builder
AndroidX.Wear.WatchFace.ComplicationSlot.Builder.Build() -> AndroidX.Wear.WatchFace.ComplicationSlot!
AndroidX.Wear.WatchFace.ComplicationSlot.Builder.SetAccessibilityTraversalIndex(int accessibilityTraversalIndex) -> AndroidX.Wear.WatchFace.ComplicationSlot.Builder!
AndroidX.Wear.WatchFace.ComplicationSlot.Builder.SetConfigExtras(Android.OS.Bundle! extras) -> AndroidX.Wear.WatchFace.ComplicationSlot.Builder!
AndroidX.Wear.WatchFace.ComplicationSlot.Builder.SetDefaultDataSourceType(AndroidX.Wear.WatchFace.Complications.Data.ComplicationType! defaultDataSourceType) -> AndroidX.Wear.WatchFace.ComplicationSlot.Builder!
AndroidX.Wear.WatchFace.ComplicationSlot.Builder.SetEnabled(bool enabled) -> AndroidX.Wear.WatchFace.ComplicationSlot.Builder!
AndroidX.Wear.WatchFace.ComplicationSlot.Builder.SetFixedComplicationDataSource(bool fixedComplicationDataSource) -> AndroidX.Wear.WatchFace.ComplicationSlot.Builder!
AndroidX.Wear.WatchFace.ComplicationSlot.Builder.SetNameResourceId(Java.Lang.Integer? nameResourceId) -> AndroidX.Wear.WatchFace.ComplicationSlot.Builder!
AndroidX.Wear.WatchFace.ComplicationSlot.Builder.SetScreenReaderNameResourceId(Java.Lang.Integer? screenReaderNameResourceId) -> AndroidX.Wear.WatchFace.ComplicationSlot.Builder!
AndroidX.Wear.WatchFace.ComplicationSlot.CanvasComplicationFactory.get -> AndroidX.Wear.WatchFace.ICanvasComplicationFactory!
AndroidX.Wear.WatchFace.ComplicationSlot.Companion
AndroidX.Wear.WatchFace.ComplicationSlot.Companion.CreateBackgroundComplicationSlotBuilder(int id, AndroidX.Wear.WatchFace.ICanvasComplicationFactory! canvasComplicationFactory, System.Collections.Generic.IList<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>! supportedTypes, AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy! defaultDataSourcePolicy) -> AndroidX.Wear.WatchFace.ComplicationSlot.Builder!
AndroidX.Wear.WatchFace.ComplicationSlot.Companion.CreateEdgeComplicationSlotBuilder(int id, AndroidX.Wear.WatchFace.ICanvasComplicationFactory! canvasComplicationFactory, System.Collections.Generic.IList<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>! supportedTypes, AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy! defaultDataSourcePolicy, AndroidX.Wear.WatchFace.Complications.ComplicationSlotBounds! bounds, AndroidX.Wear.WatchFace.BoundingArc! boundingArc) -> AndroidX.Wear.WatchFace.ComplicationSlot.Builder!
AndroidX.Wear.WatchFace.ComplicationSlot.Companion.CreateEdgeComplicationSlotBuilder(int id, AndroidX.Wear.WatchFace.ICanvasComplicationFactory! canvasComplicationFactory, System.Collections.Generic.IList<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>! supportedTypes, AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy! defaultDataSourcePolicy, AndroidX.Wear.WatchFace.Complications.ComplicationSlotBounds! bounds, AndroidX.Wear.WatchFace.BoundingArc! boundingArc, AndroidX.Wear.WatchFace.IComplicationTapFilter! complicationTapFilter) -> AndroidX.Wear.WatchFace.ComplicationSlot.Builder!
AndroidX.Wear.WatchFace.ComplicationSlot.Companion.CreateEdgeComplicationSlotBuilder(int id, AndroidX.Wear.WatchFace.ICanvasComplicationFactory! canvasComplicationFactory, System.Collections.Generic.IList<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>! supportedTypes, AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy! defaultDataSourcePolicy, AndroidX.Wear.WatchFace.Complications.ComplicationSlotBounds! bounds, AndroidX.Wear.WatchFace.IComplicationTapFilter! complicationTapFilter) -> AndroidX.Wear.WatchFace.ComplicationSlot.Builder!
AndroidX.Wear.WatchFace.ComplicationSlot.Companion.CreateRoundRectComplicationSlotBuilder(int id, AndroidX.Wear.WatchFace.ICanvasComplicationFactory! canvasComplicationFactory, System.Collections.Generic.IList<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>! supportedTypes, AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy! defaultDataSourcePolicy, AndroidX.Wear.WatchFace.Complications.ComplicationSlotBounds! bounds) -> AndroidX.Wear.WatchFace.ComplicationSlot.Builder!
AndroidX.Wear.WatchFace.ComplicationSlot.ComplicationData.get -> Xamarin.KotlinX.Coroutines.Flow.IStateFlow!
AndroidX.Wear.WatchFace.ComplicationSlot.ComplicationSlot(int id, int accessibilityTraversalIndex, int boundsType, AndroidX.Wear.WatchFace.Complications.ComplicationSlotBounds! bounds, AndroidX.Wear.WatchFace.ICanvasComplicationFactory! canvasComplicationFactory, System.Collections.Generic.IList<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>! supportedTypes, AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy! defaultPolicy, AndroidX.Wear.WatchFace.Complications.Data.ComplicationType! defaultDataSourceType, bool initiallyEnabled, Android.OS.Bundle! configExtras, bool fixedComplicationDataSource, AndroidX.Wear.WatchFace.IComplicationTapFilter! tapFilter, Java.Lang.Integer? nameResourceId, Java.Lang.Integer? screenReaderNameResourceId, AndroidX.Wear.WatchFace.BoundingArc? boundingArc) -> void
AndroidX.Wear.WatchFace.ComplicationSlot.ComplicationSlotBounds.get -> AndroidX.Wear.WatchFace.Complications.ComplicationSlotBounds!
AndroidX.Wear.WatchFace.ComplicationSlot.ComputeBounds(Android.Graphics.Rect! screen) -> Android.Graphics.Rect!
AndroidX.Wear.WatchFace.ComplicationSlot.ComputeBounds(Android.Graphics.Rect! screen, AndroidX.Wear.WatchFace.Complications.Data.ComplicationType! complicationType) -> Android.Graphics.Rect!
AndroidX.Wear.WatchFace.ComplicationSlot.ComputeBounds(Android.Graphics.Rect! screen, AndroidX.Wear.WatchFace.Complications.Data.ComplicationType! complicationType, bool applyMargins) -> Android.Graphics.Rect!
AndroidX.Wear.WatchFace.ComplicationSlot.ComputeBounds(Android.Graphics.Rect! screen, bool applyMargins) -> Android.Graphics.Rect!
AndroidX.Wear.WatchFace.ComplicationSlot.ConfigExtras.get -> Android.OS.Bundle!
AndroidX.Wear.WatchFace.ComplicationSlot.ConfigExtras.set -> void
AndroidX.Wear.WatchFace.ComplicationSlot.DefaultDataSourcePolicy.get -> AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy!
AndroidX.Wear.WatchFace.ComplicationSlot.DefaultDataSourceType.get -> AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!
AndroidX.Wear.WatchFace.ComplicationSlot.Id.get -> int
AndroidX.Wear.WatchFace.ComplicationSlot.IsActiveAt(Java.Time.Instant! instant) -> bool
AndroidX.Wear.WatchFace.ComplicationSlot.IsEnabled.get -> bool
AndroidX.Wear.WatchFace.ComplicationSlot.IsFixedComplicationDataSource.get -> bool
AndroidX.Wear.WatchFace.ComplicationSlot.IsInitiallyEnabled.get -> bool
AndroidX.Wear.WatchFace.ComplicationSlot.NameResourceId.get -> Java.Lang.Integer?
AndroidX.Wear.WatchFace.ComplicationSlot.Render(Android.Graphics.Canvas! canvas, Java.Time.ZonedDateTime! zonedDateTime, AndroidX.Wear.WatchFace.RenderParameters! renderParameters) -> void
AndroidX.Wear.WatchFace.ComplicationSlot.RenderHighlightLayer(Android.Graphics.Canvas! canvas, Java.Time.ZonedDateTime! zonedDateTime, AndroidX.Wear.WatchFace.RenderParameters! renderParameters) -> void
AndroidX.Wear.WatchFace.ComplicationSlot.Renderer.get -> AndroidX.Wear.WatchFace.ICanvasComplication!
AndroidX.Wear.WatchFace.ComplicationSlot.ScreenReaderNameResourceId.get -> Java.Lang.Integer?
AndroidX.Wear.WatchFace.ComplicationSlot.SupportedTypes.get -> System.Collections.Generic.IList<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>!
AndroidX.Wear.WatchFace.ComplicationSlot.TapFilter.get -> AndroidX.Wear.WatchFace.IComplicationTapFilter!
AndroidX.Wear.WatchFace.ComplicationSlot.WhenMappings
AndroidX.Wear.WatchFace.ComplicationSlotBoundsType
AndroidX.Wear.WatchFace.ComplicationSlotBoundsTypeIntDefAttribute
AndroidX.Wear.WatchFace.ComplicationSlotBoundsTypeIntDefAttribute.ComplicationSlotBoundsTypeIntDefAttribute() -> void
AndroidX.Wear.WatchFace.ComplicationSlotInflationFactory
AndroidX.Wear.WatchFace.ComplicationSlotInflationFactory.ComplicationSlotInflationFactory() -> void
AndroidX.Wear.WatchFace.ComplicationSlotInflationFactory.ComplicationSlotInflationFactory(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Wear.WatchFace.ComplicationSlotsManager
AndroidX.Wear.WatchFace.ComplicationSlotsManager.AddTapListener(AndroidX.Wear.WatchFace.ComplicationSlotsManager.ITapCallback! tapCallback) -> void
AndroidX.Wear.WatchFace.ComplicationSlotsManager.BackgroundComplicationSlot.get -> AndroidX.Wear.WatchFace.ComplicationSlot?
AndroidX.Wear.WatchFace.ComplicationSlotsManager.ComplicationSlots.get -> System.Collections.Generic.IDictionary<Java.Lang.Integer!, AndroidX.Wear.WatchFace.ComplicationSlot!>!
AndroidX.Wear.WatchFace.ComplicationSlotsManager.ComplicationSlotsManager(System.Collections.Generic.ICollection<AndroidX.Wear.WatchFace.ComplicationSlot!>! complicationSlotCollection, AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository) -> void
AndroidX.Wear.WatchFace.ComplicationSlotsManager.ComplicationSlotsManager(System.Collections.Generic.ICollection<AndroidX.Wear.WatchFace.ComplicationSlot!>! complicationSlotCollection, AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository, AndroidX.Wear.WatchFace.Renderer! renderer) -> void
AndroidX.Wear.WatchFace.ComplicationSlotsManager.ConfigExtrasChangeCallback.get -> AndroidX.Wear.WatchFace.WatchFace.IComplicationSlotConfigExtrasChangeCallback?
AndroidX.Wear.WatchFace.ComplicationSlotsManager.ConfigExtrasChangeCallback.set -> void
AndroidX.Wear.WatchFace.ComplicationSlotsManager.FreezeSlotForEdit(int slotId, AndroidX.Wear.WatchFace.Complications.ComplicationDataSourceInfo? from, AndroidX.Wear.WatchFace.Complications.ComplicationDataSourceInfo? to) -> void
AndroidX.Wear.WatchFace.ComplicationSlotsManager.Get(int id) -> AndroidX.Wear.WatchFace.ComplicationSlot?
AndroidX.Wear.WatchFace.ComplicationSlotsManager.GetComplicationSlotAt(int x, int y) -> AndroidX.Wear.WatchFace.ComplicationSlot?
AndroidX.Wear.WatchFace.ComplicationSlotsManager.ITapCallback
AndroidX.Wear.WatchFace.ComplicationSlotsManager.ITapCallback.OnComplicationSlotTapped(int complicationSlotId) -> void
AndroidX.Wear.WatchFace.ComplicationSlotsManager.LastComplicationTapDownEvents.get -> System.Collections.Generic.IDictionary<Java.Lang.Integer!, AndroidX.Wear.WatchFace.TapEvent!>!
AndroidX.Wear.WatchFace.ComplicationSlotsManager.ListenForStyleChanges(Xamarin.KotlinX.Coroutines.ICoroutineScope! coroutineScope) -> void
AndroidX.Wear.WatchFace.ComplicationSlotsManager.RemoveTapListener(AndroidX.Wear.WatchFace.ComplicationSlotsManager.ITapCallback! tapCallback) -> void
AndroidX.Wear.WatchFace.ComplicationSlotsManager.UnfreezeAllSlotsForEdit(bool clearData) -> void
AndroidX.Wear.WatchFace.ComplicationSlotsManager.WatchState.get -> AndroidX.Wear.WatchFace.WatchState!
AndroidX.Wear.WatchFace.ComplicationSlotsManager.WatchState.set -> void
AndroidX.Wear.WatchFace.ComplicationSlotsManagerKt
AndroidX.Wear.WatchFace.ComplicationTapFilterDefaultImpls
AndroidX.Wear.WatchFace.ContentDescriptionLabel
AndroidX.Wear.WatchFace.ContentDescriptionLabel.Bounds.get -> Android.Graphics.Rect!
AndroidX.Wear.WatchFace.ContentDescriptionLabel.ContentDescriptionLabel(AndroidX.Wear.WatchFace.Complications.Data.IComplicationText! text, Android.Graphics.Rect! bounds, Android.App.PendingIntent? tapAction) -> void
AndroidX.Wear.WatchFace.ContentDescriptionLabel.GetTextAt(Android.Content.Res.Resources! resources, Java.Time.Instant! instant) -> string!
AndroidX.Wear.WatchFace.ContentDescriptionLabel.GetTextAtFormatted(Android.Content.Res.Resources! resources, Java.Time.Instant! instant) -> Java.Lang.ICharSequence!
AndroidX.Wear.WatchFace.ContentDescriptionLabel.TapAction.get -> Android.App.PendingIntent?
AndroidX.Wear.WatchFace.ContentDescriptionLabel.Text.get -> AndroidX.Wear.WatchFace.Complications.Data.IComplicationText!
AndroidX.Wear.WatchFace.Control.IWatchFaceInstanceServiceStub
AndroidX.Wear.WatchFace.Control.IWatchFaceInstanceServiceStub.IWatchFaceInstanceServiceStub(AndroidX.Wear.WatchFace.Control.WatchFaceControlService? service, Xamarin.KotlinX.Coroutines.ICoroutineScope! uiThreadCoroutineScope) -> void
AndroidX.Wear.WatchFace.Control.IWatchFaceInstanceServiceStub.IWatchFaceInstanceServiceStub(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Wear.WatchFace.Control.IWatchFaceInstanceServiceStub.OnDestroy() -> void
AndroidX.Wear.WatchFace.Control.WatchFaceControlService
AndroidX.Wear.WatchFace.Control.WatchFaceControlService.Companion
AndroidX.Wear.WatchFace.Control.WatchFaceControlService.SetContext(Android.Content.Context! context) -> void
AndroidX.Wear.WatchFace.Control.WatchFaceControlService.WatchFaceControlService() -> void
AndroidX.Wear.WatchFace.Control.WatchFaceControlService.WatchFaceControlService(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Wear.WatchFace.DrawMode
AndroidX.Wear.WatchFace.Editor.EditorService
AndroidX.Wear.WatchFace.Editor.EditorService.AddCloseCallback(AndroidX.Wear.WatchFace.Editor.EditorService.CloseCallback! closeCallback) -> void
AndroidX.Wear.WatchFace.Editor.EditorService.BroadcastEditorState(AndroidX.Wear.WatchFace.Editor.Data.EditorStateWireFormat! editorState) -> void
AndroidX.Wear.WatchFace.Editor.EditorService.ClearCloseCallbacks() -> void
AndroidX.Wear.WatchFace.Editor.EditorService.CloseCallback
AndroidX.Wear.WatchFace.Editor.EditorService.CloseCallback.CloseCallback() -> void
AndroidX.Wear.WatchFace.Editor.EditorService.CloseCallback.CloseCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Wear.WatchFace.Editor.EditorService.Companion
AndroidX.Wear.WatchFace.Editor.EditorService.Companion.GlobalEditorService.get -> AndroidX.Wear.WatchFace.Editor.EditorService!
AndroidX.Wear.WatchFace.Editor.EditorService.EditorService() -> void
AndroidX.Wear.WatchFace.Editor.EditorService.RemoveCloseCallback(AndroidX.Wear.WatchFace.Editor.EditorService.CloseCallback! closeCallback) -> void
AndroidX.Wear.WatchFace.ICanvasComplication
AndroidX.Wear.WatchFace.ICanvasComplication.Data.get -> AndroidX.Wear.WatchFace.Complications.Data.ComplicationData!
AndroidX.Wear.WatchFace.ICanvasComplication.DrawHighlight(Android.Graphics.Canvas! canvas, Android.Graphics.Rect! bounds, int boundsType, Java.Time.ZonedDateTime! zonedDateTime, int color) -> void
AndroidX.Wear.WatchFace.ICanvasComplication.DrawHighlight(Android.Graphics.Canvas! canvas, Android.Graphics.Rect! bounds, int boundsType, Java.Time.ZonedDateTime! zonedDateTime, int color, AndroidX.Wear.WatchFace.BoundingArc? boundingArc) -> void
AndroidX.Wear.WatchFace.ICanvasComplication.LoadData(AndroidX.Wear.WatchFace.Complications.Data.ComplicationData! complicationData, bool loadDrawablesAsynchronous) -> void
AndroidX.Wear.WatchFace.ICanvasComplication.OnRendererCreated(AndroidX.Wear.WatchFace.Renderer! renderer) -> void
AndroidX.Wear.WatchFace.ICanvasComplication.Render(Android.Graphics.Canvas! canvas, Android.Graphics.Rect! bounds, Java.Time.ZonedDateTime! zonedDateTime, AndroidX.Wear.WatchFace.RenderParameters! renderParameters, int slotId) -> void
AndroidX.Wear.WatchFace.ICanvasComplicationFactory
AndroidX.Wear.WatchFace.ICanvasComplicationFactory.Create(AndroidX.Wear.WatchFace.WatchState! p0, AndroidX.Wear.WatchFace.ICanvasComplicationInvalidateCallback! p1) -> AndroidX.Wear.WatchFace.ICanvasComplication!
AndroidX.Wear.WatchFace.ICanvasComplicationInvalidateCallback
AndroidX.Wear.WatchFace.ICanvasComplicationInvalidateCallback.OnInvalidate() -> void
AndroidX.Wear.WatchFace.ICanvasTypeIntDef
AndroidX.Wear.WatchFace.IComplicationSlotBoundsTypeIntDef
AndroidX.Wear.WatchFace.IComplicationTapFilter
AndroidX.Wear.WatchFace.IComplicationTapFilter.HitTest(AndroidX.Wear.WatchFace.ComplicationSlot! complicationSlot, Android.Graphics.Rect! screenBounds, int x, int y) -> bool
AndroidX.Wear.WatchFace.IComplicationTapFilter.HitTest(AndroidX.Wear.WatchFace.ComplicationSlot! complicationSlot, Android.Graphics.Rect! screenBounds, int x, int y, bool includeMargins) -> bool
AndroidX.Wear.WatchFace.ITapTypeIntDef
AndroidX.Wear.WatchFace.IWatchFaceExperimental
AndroidX.Wear.WatchFace.IWatchFaceHostApi
AndroidX.Wear.WatchFace.IWatchFaceHostApi.BackgroundThreadHandler.get -> Android.OS.Handler!
AndroidX.Wear.WatchFace.IWatchFaceHostApi.ComplicationDeniedIntent.get -> Android.Content.Intent?
AndroidX.Wear.WatchFace.IWatchFaceHostApi.ComplicationRationaleIntent.get -> Android.Content.Intent?
AndroidX.Wear.WatchFace.IWatchFaceHostApi.ComponentName.get -> Android.Content.ComponentName!
AndroidX.Wear.WatchFace.IWatchFaceHostApi.Context.get -> Android.Content.Context!
AndroidX.Wear.WatchFace.IWatchFaceHostApi.InitialUserStyle.get -> AndroidX.Wear.WatchFace.Style.Data.UserStyleWireFormat?
AndroidX.Wear.WatchFace.IWatchFaceHostApi.Invalidate() -> void
AndroidX.Wear.WatchFace.IWatchFaceHostApi.OnActionTimeTick() -> void
AndroidX.Wear.WatchFace.IWatchFaceHostApi.OnWatchFaceColorsChanged(AndroidX.Wear.WatchFace.WatchFaceColors? watchFaceColors) -> void
AndroidX.Wear.WatchFace.IWatchFaceHostApi.PostInvalidate(Java.Time.Duration! delay) -> void
AndroidX.Wear.WatchFace.IWatchFaceHostApi.SendPreviewImageNeedsUpdateRequest() -> void
AndroidX.Wear.WatchFace.IWatchFaceHostApi.SetActiveComplicationSlots(int[]! complicationSlotIds) -> void
AndroidX.Wear.WatchFace.IWatchFaceHostApi.SetDefaultComplicationDataSourceWithFallbacks(int complicationSlotId, System.Collections.Generic.IList<Android.Content.ComponentName!>? dataSources, int fallbackSystemProvider, int type) -> void
AndroidX.Wear.WatchFace.IWatchFaceHostApi.SystemTimeProvider.get -> AndroidX.Wear.WatchFace.WatchFaceService.ISystemTimeProvider!
AndroidX.Wear.WatchFace.IWatchFaceHostApi.UiThreadCoroutineScope.get -> Xamarin.KotlinX.Coroutines.ICoroutineScope!
AndroidX.Wear.WatchFace.IWatchFaceHostApi.UiThreadHandler.get -> Android.OS.Handler!
AndroidX.Wear.WatchFace.IWatchFaceHostApi.UpdateContentDescriptionLabels() -> void
AndroidX.Wear.WatchFace.IWatchFaceHostApi.WearSdkVersion.get -> int
AndroidX.Wear.WatchFace.IWatchFaceTypeIntDef
AndroidX.Wear.WatchFace.MutableWatchState
AndroidX.Wear.WatchFace.MutableWatchState.AnalogPreviewReferenceTimeMillis.get -> long
AndroidX.Wear.WatchFace.MutableWatchState.AnalogPreviewReferenceTimeMillis.set -> void
AndroidX.Wear.WatchFace.MutableWatchState.AsWatchState() -> AndroidX.Wear.WatchFace.WatchState!
AndroidX.Wear.WatchFace.MutableWatchState.ChinHeight.get -> int
AndroidX.Wear.WatchFace.MutableWatchState.ChinHeight.set -> void
AndroidX.Wear.WatchFace.MutableWatchState.DigitalPreviewReferenceTimeMillis.get -> long
AndroidX.Wear.WatchFace.MutableWatchState.DigitalPreviewReferenceTimeMillis.set -> void
AndroidX.Wear.WatchFace.MutableWatchState.HasBurnInProtection.get -> bool
AndroidX.Wear.WatchFace.MutableWatchState.HasBurnInProtection.set -> void
AndroidX.Wear.WatchFace.MutableWatchState.HasLowBitAmbient.get -> bool
AndroidX.Wear.WatchFace.MutableWatchState.HasLowBitAmbient.set -> void
AndroidX.Wear.WatchFace.MutableWatchState.Headless.get -> bool
AndroidX.Wear.WatchFace.MutableWatchState.Headless.set -> void
AndroidX.Wear.WatchFace.MutableWatchState.InterruptionFilter.get -> Xamarin.KotlinX.Coroutines.Flow.IMutableStateFlow!
AndroidX.Wear.WatchFace.MutableWatchState.IsAmbient() -> Xamarin.KotlinX.Coroutines.Flow.IMutableStateFlow!
AndroidX.Wear.WatchFace.MutableWatchState.IsBatteryLowAndNotCharging() -> Xamarin.KotlinX.Coroutines.Flow.IMutableStateFlow!
AndroidX.Wear.WatchFace.MutableWatchState.IsLocked() -> Xamarin.KotlinX.Coroutines.Flow.IMutableStateFlow!
AndroidX.Wear.WatchFace.MutableWatchState.IsVisible() -> Xamarin.KotlinX.Coroutines.Flow.IMutableStateFlow!
AndroidX.Wear.WatchFace.MutableWatchState.MutableWatchState() -> void
AndroidX.Wear.WatchFace.MutableWatchState.WatchFaceInstanceId.get -> Xamarin.KotlinX.Coroutines.Flow.IMutableStateFlow!
AndroidX.Wear.WatchFace.RenderBufferTextureKt
AndroidX.Wear.WatchFace.RenderParameters
AndroidX.Wear.WatchFace.RenderParameters.Companion
AndroidX.Wear.WatchFace.RenderParameters.DrawMode.get -> AndroidX.Wear.WatchFace.DrawMode!
AndroidX.Wear.WatchFace.RenderParameters.GetHighlightLayer() -> AndroidX.Wear.WatchFace.RenderParameters.HighlightLayer?
AndroidX.Wear.WatchFace.RenderParameters.HighlightLayer
AndroidX.Wear.WatchFace.RenderParameters.HighlightLayer.BackgroundTint.get -> int
AndroidX.Wear.WatchFace.RenderParameters.HighlightLayer.HighlightLayer(AndroidX.Wear.WatchFace.RenderParameters.HighlightedElement! highlightedElement, int highlightTint, int backgroundTint) -> void
AndroidX.Wear.WatchFace.RenderParameters.HighlightLayer.HighlightTint.get -> int
AndroidX.Wear.WatchFace.RenderParameters.HighlightLayer.HighlightedElement.get -> AndroidX.Wear.WatchFace.RenderParameters.HighlightedElement!
AndroidX.Wear.WatchFace.RenderParameters.HighlightedElement
AndroidX.Wear.WatchFace.RenderParameters.HighlightedElement.AllComplicationSlots
AndroidX.Wear.WatchFace.RenderParameters.HighlightedElement.ComplicationSlot
AndroidX.Wear.WatchFace.RenderParameters.HighlightedElement.ComplicationSlot.ComplicationSlot(int id) -> void
AndroidX.Wear.WatchFace.RenderParameters.HighlightedElement.ComplicationSlot.Id.get -> int
AndroidX.Wear.WatchFace.RenderParameters.HighlightedElement.HighlightedElement(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Wear.WatchFace.RenderParameters.HighlightedElement.UserStyle
AndroidX.Wear.WatchFace.RenderParameters.HighlightedElement.UserStyle.Id.get -> AndroidX.Wear.WatchFace.Style.UserStyleSetting.Id!
AndroidX.Wear.WatchFace.RenderParameters.HighlightedElement.UserStyle.UserStyle(AndroidX.Wear.WatchFace.Style.UserStyleSetting.Id! id) -> void
AndroidX.Wear.WatchFace.RenderParameters.IsForScreenshot.get -> bool
AndroidX.Wear.WatchFace.RenderParameters.LastComplicationTapDownEvents.get -> System.Collections.Generic.IDictionary<Java.Lang.Integer!, AndroidX.Wear.WatchFace.TapEvent!>!
AndroidX.Wear.WatchFace.RenderParameters.RenderParameters(AndroidX.Wear.WatchFace.Data.RenderParametersWireFormat! wireFormat) -> void
AndroidX.Wear.WatchFace.RenderParameters.RenderParameters(AndroidX.Wear.WatchFace.DrawMode! drawMode, System.Collections.Generic.ICollection<AndroidX.Wear.WatchFace.Style.WatchFaceLayer!>! watchFaceLayers) -> void
AndroidX.Wear.WatchFace.RenderParameters.RenderParameters(AndroidX.Wear.WatchFace.DrawMode! drawMode, System.Collections.Generic.ICollection<AndroidX.Wear.WatchFace.Style.WatchFaceLayer!>! watchFaceLayers, AndroidX.Wear.WatchFace.RenderParameters.HighlightLayer? highlightLayer) -> void
AndroidX.Wear.WatchFace.RenderParameters.RenderParameters(AndroidX.Wear.WatchFace.DrawMode! drawMode, System.Collections.Generic.ICollection<AndroidX.Wear.WatchFace.Style.WatchFaceLayer!>! watchFaceLayers, AndroidX.Wear.WatchFace.RenderParameters.HighlightLayer? highlightLayer, System.Collections.Generic.IDictionary<Java.Lang.Integer!, AndroidX.Wear.WatchFace.TapEvent!>! lastComplicationTapDownEvents) -> void
AndroidX.Wear.WatchFace.RenderParameters.ToWireFormat() -> AndroidX.Wear.WatchFace.Data.RenderParametersWireFormat!
AndroidX.Wear.WatchFace.RenderParameters.WatchFaceLayers.get -> System.Collections.Generic.ICollection<AndroidX.Wear.WatchFace.Style.WatchFaceLayer!>!
AndroidX.Wear.WatchFace.Renderer
AndroidX.Wear.WatchFace.Renderer.AdditionalContentDescriptionLabels.get -> System.Collections.Generic.ICollection<Kotlin.Pair!>!
AndroidX.Wear.WatchFace.Renderer.AdditionalContentDescriptionLabels.set -> void
AndroidX.Wear.WatchFace.Renderer.CanvasRenderer
AndroidX.Wear.WatchFace.Renderer.CanvasRenderer.CanvasRenderer(Android.Views.ISurfaceHolder! surfaceHolder, AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository, AndroidX.Wear.WatchFace.WatchState! watchState, int canvasType, long interactiveDrawModeUpdateDelayMillis) -> void
AndroidX.Wear.WatchFace.Renderer.CanvasRenderer.CanvasRenderer(Android.Views.ISurfaceHolder! surfaceHolder, AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository, AndroidX.Wear.WatchFace.WatchState! watchState, int canvasType, long interactiveDrawModeUpdateDelayMillis, bool clearWithBackgroundTintBeforeRenderingHighlightLayer) -> void
AndroidX.Wear.WatchFace.Renderer.CanvasRenderer.CanvasRenderer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Wear.WatchFace.Renderer.CanvasRenderer.ClearWithBackgroundTintBeforeRenderingHighlightLayer.get -> bool
AndroidX.Wear.WatchFace.Renderer.CanvasRenderer2
AndroidX.Wear.WatchFace.Renderer.CanvasRenderer2.CanvasRenderer2(Android.Views.ISurfaceHolder! surfaceHolder, AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository, AndroidX.Wear.WatchFace.WatchState! watchState, int canvasType, long interactiveDrawModeUpdateDelayMillis, bool clearWithBackgroundTintBeforeRenderingHighlightLayer) -> void
AndroidX.Wear.WatchFace.Renderer.CanvasRenderer2.CanvasRenderer2(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Wear.WatchFace.Renderer.CenterX.get -> float
AndroidX.Wear.WatchFace.Renderer.CenterY.get -> float
AndroidX.Wear.WatchFace.Renderer.GlesRenderer
AndroidX.Wear.WatchFace.Renderer.GlesRenderer.EglBackgroundThreadContext.get -> Android.Opengl.EGLContext!
AndroidX.Wear.WatchFace.Renderer.GlesRenderer.EglConfig.get -> Android.Opengl.EGLConfig!
AndroidX.Wear.WatchFace.Renderer.GlesRenderer.EglConfig.set -> void
AndroidX.Wear.WatchFace.Renderer.GlesRenderer.EglDisplay.get -> Android.Opengl.EGLDisplay!
AndroidX.Wear.WatchFace.Renderer.GlesRenderer.EglDisplay.set -> void
AndroidX.Wear.WatchFace.Renderer.GlesRenderer.EglUiThreadContext.get -> Android.Opengl.EGLContext!
AndroidX.Wear.WatchFace.Renderer.GlesRenderer.GlesException
AndroidX.Wear.WatchFace.Renderer.GlesRenderer.GlesException.GlesException(string! message) -> void
AndroidX.Wear.WatchFace.Renderer.GlesRenderer.GlesRenderer(Android.Views.ISurfaceHolder! surfaceHolder, AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository, AndroidX.Wear.WatchFace.WatchState! watchState, long interactiveDrawModeUpdateDelayMillis) -> void
AndroidX.Wear.WatchFace.Renderer.GlesRenderer.GlesRenderer(Android.Views.ISurfaceHolder! surfaceHolder, AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository, AndroidX.Wear.WatchFace.WatchState! watchState, long interactiveDrawModeUpdateDelayMillis, int[]! eglConfigAttribList) -> void
AndroidX.Wear.WatchFace.Renderer.GlesRenderer.GlesRenderer(Android.Views.ISurfaceHolder! surfaceHolder, AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository, AndroidX.Wear.WatchFace.WatchState! watchState, long interactiveDrawModeUpdateDelayMillis, int[]! eglConfigAttribList, int[]! eglSurfaceAttribList) -> void
AndroidX.Wear.WatchFace.Renderer.GlesRenderer.GlesRenderer(Android.Views.ISurfaceHolder! surfaceHolder, AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository, AndroidX.Wear.WatchFace.WatchState! watchState, long interactiveDrawModeUpdateDelayMillis, int[]! eglConfigAttribList, int[]! eglSurfaceAttribList, int[]! eglContextAttribList) -> void
AndroidX.Wear.WatchFace.Renderer.GlesRenderer.GlesRenderer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Wear.WatchFace.Renderer.GlesRenderer.RunBackgroundThreadGlCommands(Kotlin.Jvm.Functions.IFunction1! commands, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
AndroidX.Wear.WatchFace.Renderer.GlesRenderer.RunUiThreadGlCommands(Kotlin.Jvm.Functions.IFunction1! commands, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
AndroidX.Wear.WatchFace.Renderer.GlesRenderer2
AndroidX.Wear.WatchFace.Renderer.GlesRenderer2.GlesRenderer2(Android.Views.ISurfaceHolder! surfaceHolder, AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository, AndroidX.Wear.WatchFace.WatchState! watchState, long interactiveDrawModeUpdateDelayMillis) -> void
AndroidX.Wear.WatchFace.Renderer.GlesRenderer2.GlesRenderer2(Android.Views.ISurfaceHolder! surfaceHolder, AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository, AndroidX.Wear.WatchFace.WatchState! watchState, long interactiveDrawModeUpdateDelayMillis, int[]! eglConfigAttribList) -> void
AndroidX.Wear.WatchFace.Renderer.GlesRenderer2.GlesRenderer2(Android.Views.ISurfaceHolder! surfaceHolder, AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository, AndroidX.Wear.WatchFace.WatchState! watchState, long interactiveDrawModeUpdateDelayMillis, int[]! eglConfigAttribList, int[]! eglSurfaceAttribList) -> void
AndroidX.Wear.WatchFace.Renderer.GlesRenderer2.GlesRenderer2(Android.Views.ISurfaceHolder! surfaceHolder, AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository, AndroidX.Wear.WatchFace.WatchState! watchState, long interactiveDrawModeUpdateDelayMillis, int[]! eglConfigAttribList, int[]! eglSurfaceAttribList, int[]! eglContextAttribList) -> void
AndroidX.Wear.WatchFace.Renderer.GlesRenderer2.GlesRenderer2(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Wear.WatchFace.Renderer.ISharedAssets
AndroidX.Wear.WatchFace.Renderer.ISharedAssets.OnDestroy() -> void
AndroidX.Wear.WatchFace.Renderer.InteractiveDrawModeUpdateDelayMillis.get -> long
AndroidX.Wear.WatchFace.Renderer.InteractiveDrawModeUpdateDelayMillis.set -> void
AndroidX.Wear.WatchFace.Renderer.Invalidate() -> void
AndroidX.Wear.WatchFace.Renderer.PostInvalidate() -> void
AndroidX.Wear.WatchFace.Renderer.RenderParameters.get -> AndroidX.Wear.WatchFace.RenderParameters!
AndroidX.Wear.WatchFace.Renderer.Renderer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Wear.WatchFace.Renderer.ScreenBounds.get -> Android.Graphics.Rect!
AndroidX.Wear.WatchFace.Renderer.SendPreviewImageNeedsUpdateRequest() -> void
AndroidX.Wear.WatchFace.Renderer.SetSurfaceHolder(Android.Views.ISurfaceHolder! value) -> void
AndroidX.Wear.WatchFace.Renderer.SurfaceHolder.get -> Android.Views.ISurfaceHolder!
AndroidX.Wear.WatchFace.Renderer.WatchfaceColors.get -> AndroidX.Wear.WatchFace.WatchFaceColors?
AndroidX.Wear.WatchFace.Renderer.WatchfaceColors.set -> void
AndroidX.Wear.WatchFace.RendererKt
AndroidX.Wear.WatchFace.RoundRectComplicationTapFilter
AndroidX.Wear.WatchFace.RoundRectComplicationTapFilter.HitTest(AndroidX.Wear.WatchFace.ComplicationSlot! complicationSlot, Android.Graphics.Rect! screenBounds, int x, int y, bool includeMargins) -> bool
AndroidX.Wear.WatchFace.RoundRectComplicationTapFilter.RoundRectComplicationTapFilter() -> void
AndroidX.Wear.WatchFace.TapEvent
AndroidX.Wear.WatchFace.TapEvent.TapEvent(int xPos, int yPos, Java.Time.Instant! tapTime) -> void
AndroidX.Wear.WatchFace.TapEvent.TapTime.get -> Java.Time.Instant!
AndroidX.Wear.WatchFace.TapEvent.XPos.get -> int
AndroidX.Wear.WatchFace.TapEvent.YPos.get -> int
AndroidX.Wear.WatchFace.TapType
AndroidX.Wear.WatchFace.TapTypeIntDefAttribute
AndroidX.Wear.WatchFace.TapTypeIntDefAttribute.TapTypeIntDefAttribute() -> void
AndroidX.Wear.WatchFace.WatchFace
AndroidX.Wear.WatchFace.WatchFace.Companion
AndroidX.Wear.WatchFace.WatchFace.Companion.ClearAllEditorDelegates() -> void
AndroidX.Wear.WatchFace.WatchFace.Companion.CreateHeadlessSessionDelegate(Android.Content.ComponentName! componentName, AndroidX.Wear.WatchFace.Control.Data.HeadlessWatchFaceInstanceParams! params, Android.Content.Context! context, Kotlin.Coroutines.IContinuation! p3) -> Java.Lang.Object?
AndroidX.Wear.WatchFace.WatchFace.Companion.GetOrCreateEditorDelegate(Android.Content.ComponentName! componentName) -> Xamarin.KotlinX.Coroutines.ICompletableDeferred!
AndroidX.Wear.WatchFace.WatchFace.Companion.IsLegacyWatchFaceOverlayStyleSupported.get -> bool
AndroidX.Wear.WatchFace.WatchFace.Companion.RegisterEditorDelegate(Android.Content.ComponentName! componentName, AndroidX.Wear.WatchFace.WatchFace.IEditorDelegate! editorDelegate) -> void
AndroidX.Wear.WatchFace.WatchFace.GetOverlayStyle() -> AndroidX.Wear.WatchFace.WatchFace.OverlayStyle!
AndroidX.Wear.WatchFace.WatchFace.IComplicationSlotConfigExtrasChangeCallback
AndroidX.Wear.WatchFace.WatchFace.IComplicationSlotConfigExtrasChangeCallback.OnComplicationSlotConfigExtrasChanged() -> void
AndroidX.Wear.WatchFace.WatchFace.IEditorDelegate
AndroidX.Wear.WatchFace.WatchFace.IEditorDelegate.BackgroundThreadHandler.get -> Android.OS.Handler!
AndroidX.Wear.WatchFace.WatchFace.IEditorDelegate.ComplicationDeniedDialogIntent.get -> Android.Content.Intent?
AndroidX.Wear.WatchFace.WatchFace.IEditorDelegate.ComplicationRationaleDialogIntent.get -> Android.Content.Intent?
AndroidX.Wear.WatchFace.WatchFace.IEditorDelegate.ComplicationSlotsManager.get -> AndroidX.Wear.WatchFace.ComplicationSlotsManager!
AndroidX.Wear.WatchFace.WatchFace.IEditorDelegate.EditorObscuresWatchFace.get -> bool
AndroidX.Wear.WatchFace.WatchFace.IEditorDelegate.EditorObscuresWatchFace.set -> void
AndroidX.Wear.WatchFace.WatchFace.IEditorDelegate.OnDestroy() -> void
AndroidX.Wear.WatchFace.WatchFace.IEditorDelegate.PreviewReferenceInstant.get -> Java.Time.Instant!
AndroidX.Wear.WatchFace.WatchFace.IEditorDelegate.RenderWatchFaceToBitmap(AndroidX.Wear.WatchFace.RenderParameters! renderParameters, Java.Time.Instant! instant, System.Collections.Generic.IDictionary<Java.Lang.Integer!, AndroidX.Wear.WatchFace.Complications.Data.ComplicationData!>? slotIdToComplicationData) -> Android.Graphics.Bitmap!
AndroidX.Wear.WatchFace.WatchFace.IEditorDelegate.ScreenBounds.get -> Android.Graphics.Rect!
AndroidX.Wear.WatchFace.WatchFace.IEditorDelegate.SetComplicationSlotConfigExtrasChangeCallback(AndroidX.Wear.WatchFace.WatchFace.IComplicationSlotConfigExtrasChangeCallback? callback) -> void
AndroidX.Wear.WatchFace.WatchFace.IEditorDelegate.UserStyle.get -> AndroidX.Wear.WatchFace.Style.UserStyle!
AndroidX.Wear.WatchFace.WatchFace.IEditorDelegate.UserStyle.set -> void
AndroidX.Wear.WatchFace.WatchFace.IEditorDelegate.UserStyleSchema.get -> AndroidX.Wear.WatchFace.Style.UserStyleSchema!
AndroidX.Wear.WatchFace.WatchFace.ITapListener
AndroidX.Wear.WatchFace.WatchFace.ITapListener.OnTapEvent(int tapType, AndroidX.Wear.WatchFace.TapEvent! tapEvent, AndroidX.Wear.WatchFace.ComplicationSlot? complicationSlot) -> void
AndroidX.Wear.WatchFace.WatchFace.LegacyWatchFaceOverlayStyle
AndroidX.Wear.WatchFace.WatchFace.LegacyWatchFaceOverlayStyle.AccentColor.get -> int
AndroidX.Wear.WatchFace.WatchFace.LegacyWatchFaceOverlayStyle.IsTapEventsAccepted.get -> bool
AndroidX.Wear.WatchFace.WatchFace.LegacyWatchFaceOverlayStyle.LegacyWatchFaceOverlayStyle(int viewProtectionMode, int statusBarGravity, bool tapEventsAccepted) -> void
AndroidX.Wear.WatchFace.WatchFace.LegacyWatchFaceOverlayStyle.LegacyWatchFaceOverlayStyle(int viewProtectionMode, int statusBarGravity, bool tapEventsAccepted, int accentColor) -> void
AndroidX.Wear.WatchFace.WatchFace.LegacyWatchFaceOverlayStyle.StatusBarGravity.get -> int
AndroidX.Wear.WatchFace.WatchFace.LegacyWatchFaceOverlayStyle.ViewProtectionMode.get -> int
AndroidX.Wear.WatchFace.WatchFace.LegacyWatchFaceStyle.get -> AndroidX.Wear.WatchFace.WatchFace.LegacyWatchFaceOverlayStyle!
AndroidX.Wear.WatchFace.WatchFace.OverlayStyle
AndroidX.Wear.WatchFace.WatchFace.OverlayStyle.BackgroundColor.get -> Android.Graphics.ColorObject?
AndroidX.Wear.WatchFace.WatchFace.OverlayStyle.ForegroundColor.get -> Android.Graphics.ColorObject?
AndroidX.Wear.WatchFace.WatchFace.OverlayStyle.OverlayStyle() -> void
AndroidX.Wear.WatchFace.WatchFace.OverlayStyle.OverlayStyle(Android.Graphics.ColorObject? backgroundColor, Android.Graphics.ColorObject? foregroundColor) -> void
AndroidX.Wear.WatchFace.WatchFace.OverridePreviewReferenceInstant.get -> Java.Time.Instant?
AndroidX.Wear.WatchFace.WatchFace.Renderer.get -> AndroidX.Wear.WatchFace.Renderer!
AndroidX.Wear.WatchFace.WatchFace.SetComplicationDeniedDialogIntent(Android.Content.Intent? complicationDeniedDialogIntent) -> AndroidX.Wear.WatchFace.WatchFace!
AndroidX.Wear.WatchFace.WatchFace.SetComplicationRationaleDialogIntent(Android.Content.Intent? complicationRationaleDialogIntent) -> AndroidX.Wear.WatchFace.WatchFace!
AndroidX.Wear.WatchFace.WatchFace.SetLegacyWatchFaceStyle(AndroidX.Wear.WatchFace.WatchFace.LegacyWatchFaceOverlayStyle! legacyWatchFaceStyle) -> AndroidX.Wear.WatchFace.WatchFace!
AndroidX.Wear.WatchFace.WatchFace.SetOverlayStyle(AndroidX.Wear.WatchFace.WatchFace.OverlayStyle! watchFaceOverlayStyle) -> AndroidX.Wear.WatchFace.WatchFace!
AndroidX.Wear.WatchFace.WatchFace.SetOverridePreviewReferenceInstant(Java.Time.Instant! previewReferenceTimeMillis) -> AndroidX.Wear.WatchFace.WatchFace!
AndroidX.Wear.WatchFace.WatchFace.SetTapListener(AndroidX.Wear.WatchFace.WatchFace.ITapListener? tapListener) -> AndroidX.Wear.WatchFace.WatchFace!
AndroidX.Wear.WatchFace.WatchFace.TapEventArgs
AndroidX.Wear.WatchFace.WatchFace.TapEventArgs.ComplicationSlot.get -> AndroidX.Wear.WatchFace.ComplicationSlot?
AndroidX.Wear.WatchFace.WatchFace.TapEventArgs.TapEvent.get -> AndroidX.Wear.WatchFace.TapEvent!
AndroidX.Wear.WatchFace.WatchFace.TapEventArgs.TapEventArgs(int tapType, AndroidX.Wear.WatchFace.TapEvent! tapEvent, AndroidX.Wear.WatchFace.ComplicationSlot? complicationSlot) -> void
AndroidX.Wear.WatchFace.WatchFace.TapEventArgs.TapType.get -> int
AndroidX.Wear.WatchFace.WatchFace.WatchFace(int watchFaceType, AndroidX.Wear.WatchFace.Renderer! renderer) -> void
AndroidX.Wear.WatchFace.WatchFace.WatchFaceType.get -> int
AndroidX.Wear.WatchFace.WatchFace.WatchFaceType.set -> void
AndroidX.Wear.WatchFace.WatchFaceColors
AndroidX.Wear.WatchFace.WatchFaceColors.PrimaryColor.get -> Android.Graphics.ColorObject!
AndroidX.Wear.WatchFace.WatchFaceColors.SecondaryColor.get -> Android.Graphics.ColorObject!
AndroidX.Wear.WatchFace.WatchFaceColors.TertiaryColor.get -> Android.Graphics.ColorObject!
AndroidX.Wear.WatchFace.WatchFaceColors.WatchFaceColors(Android.Graphics.ColorObject! primaryColor, Android.Graphics.ColorObject! secondaryColor, Android.Graphics.ColorObject! tertiaryColor) -> void
AndroidX.Wear.WatchFace.WatchFaceColorsKt
AndroidX.Wear.WatchFace.WatchFaceExperimentalAttribute
AndroidX.Wear.WatchFace.WatchFaceExperimentalAttribute.WatchFaceExperimentalAttribute() -> void
AndroidX.Wear.WatchFace.WatchFaceImpl
AndroidX.Wear.WatchFace.WatchFaceImpl.ComplicationSlotsManager.get -> AndroidX.Wear.WatchFace.ComplicationSlotsManager!
AndroidX.Wear.WatchFace.WatchFaceImpl.ComplicationSlotsManager.set -> void
AndroidX.Wear.WatchFace.WatchFaceImpl.OnDraw() -> void
AndroidX.Wear.WatchFace.WatchFaceImpl.PreviewReferenceInstant.get -> Java.Time.Instant!
AndroidX.Wear.WatchFace.WatchFaceImpl.WatchFaceImpl(AndroidX.Wear.WatchFace.WatchFace! watchface, AndroidX.Wear.WatchFace.IWatchFaceHostApi! watchFaceHostApi, AndroidX.Wear.WatchFace.WatchState! watchState, AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository, AndroidX.Wear.WatchFace.ComplicationSlotsManager! complicationSlotsManager, AndroidX.Wear.WatchFace.BroadcastsObserver! broadcastsObserver, AndroidX.Wear.WatchFace.BroadcastsReceiver? broadcastsReceiver) -> void
AndroidX.Wear.WatchFace.WatchFaceKt
AndroidX.Wear.WatchFace.WatchFaceRuntimeService
AndroidX.Wear.WatchFace.WatchFaceRuntimeService.WatchFaceRuntimeService() -> void
AndroidX.Wear.WatchFace.WatchFaceRuntimeService.WatchFaceRuntimeService(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Wear.WatchFace.WatchFaceService
AndroidX.Wear.WatchFace.WatchFaceService.BackgroundThreadHandler.get -> Android.OS.Handler!
AndroidX.Wear.WatchFace.WatchFaceService.Companion
AndroidX.Wear.WatchFace.WatchFaceService.ISystemTimeProvider
AndroidX.Wear.WatchFace.WatchFaceService.ISystemTimeProvider.SystemTimeMillis.get -> long
AndroidX.Wear.WatchFace.WatchFaceService.ISystemTimeProvider.SystemTimeZoneId.get -> Java.Time.ZoneId!
AndroidX.Wear.WatchFace.WatchFaceService.UiThreadHandler.get -> Android.OS.Handler!
AndroidX.Wear.WatchFace.WatchFaceService.WatchFaceService() -> void
AndroidX.Wear.WatchFace.WatchFaceService.WatchFaceService(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Wear.WatchFace.WatchFaceServiceKt
AndroidX.Wear.WatchFace.WatchFaceType
AndroidX.Wear.WatchFace.WatchFaceTypeIntDefAttribute
AndroidX.Wear.WatchFace.WatchFaceTypeIntDefAttribute.WatchFaceTypeIntDefAttribute() -> void
AndroidX.Wear.WatchFace.WatchState
AndroidX.Wear.WatchFace.WatchState.AnalogPreviewReferenceTimeMillis.get -> long
AndroidX.Wear.WatchFace.WatchState.ChinHeight.get -> int
AndroidX.Wear.WatchFace.WatchState.DigitalPreviewReferenceTimeMillis.get -> long
AndroidX.Wear.WatchFace.WatchState.HasBurnInProtection.get -> bool
AndroidX.Wear.WatchFace.WatchState.HasLowBitAmbient.get -> bool
AndroidX.Wear.WatchFace.WatchState.InterruptionFilter.get -> Xamarin.KotlinX.Coroutines.Flow.IStateFlow!
AndroidX.Wear.WatchFace.WatchState.IsAmbient() -> Xamarin.KotlinX.Coroutines.Flow.IStateFlow!
AndroidX.Wear.WatchFace.WatchState.IsBatteryLowAndNotCharging() -> Xamarin.KotlinX.Coroutines.Flow.IStateFlow!
AndroidX.Wear.WatchFace.WatchState.IsHeadless.get -> bool
AndroidX.Wear.WatchFace.WatchState.IsVisible() -> Xamarin.KotlinX.Coroutines.Flow.IStateFlow!
AndroidX.Wear.WatchFace.WatchState.WatchFaceInstanceId.get -> Xamarin.KotlinX.Coroutines.Flow.IStateFlow!
AndroidX.Wear.WatchFace.WatchState.WatchState(Xamarin.KotlinX.Coroutines.Flow.IStateFlow! interruptionFilter, Xamarin.KotlinX.Coroutines.Flow.IStateFlow! isAmbient, Xamarin.KotlinX.Coroutines.Flow.IStateFlow! isBatteryLowAndNotCharging, Xamarin.KotlinX.Coroutines.Flow.IStateFlow! isVisible, bool hasLowBitAmbient, bool hasBurnInProtection, long analogPreviewReferenceTimeMillis, long digitalPreviewReferenceTimeMillis, int chinHeight, bool isHeadless) -> void
AndroidX.Wear.WatchFace.WatchState.WatchState(Xamarin.KotlinX.Coroutines.Flow.IStateFlow! interruptionFilter, Xamarin.KotlinX.Coroutines.Flow.IStateFlow! isAmbient, Xamarin.KotlinX.Coroutines.Flow.IStateFlow! isBatteryLowAndNotCharging, Xamarin.KotlinX.Coroutines.Flow.IStateFlow! isVisible, bool hasLowBitAmbient, bool hasBurnInProtection, long analogPreviewReferenceTimeMillis, long digitalPreviewReferenceTimeMillis, int chinHeight, bool isHeadless, Xamarin.KotlinX.Coroutines.Flow.IStateFlow! watchFaceInstanceId) -> void
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.BuildComplicationSlotsManager(AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository, AndroidX.Wear.WatchFace.ComplicationSlotInflationFactory! complicationSlotInflationFactory) -> AndroidX.Wear.WatchFace.ComplicationSlotsManager!
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.Companion
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.Companion.Inflate(Android.Content.Res.Resources! resources, System.Xml.XmlReader! parser) -> AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition!
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.ComplicationSlotStaticData
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.ComplicationSlotStaticData.AccessibilityTraversalIndex.get -> Java.Lang.Integer?
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.ComplicationSlotStaticData.BoundingArc.get -> AndroidX.Wear.WatchFace.BoundingArc?
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.ComplicationSlotStaticData.Bounds.get -> AndroidX.Wear.WatchFace.Complications.ComplicationSlotBounds!
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.ComplicationSlotStaticData.BoundsType.get -> int
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.ComplicationSlotStaticData.Companion
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.ComplicationSlotStaticData.Companion.Inflate(Android.Content.Res.Resources! resources, System.Xml.XmlReader! parser, float complicationScaleX, float complicationScaleY) -> AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.ComplicationSlotStaticData!
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.ComplicationSlotStaticData.ComplicationSlotStaticData(int slotId, Java.Lang.Integer? accessibilityTraversalIndex, int boundsType, AndroidX.Wear.WatchFace.Complications.ComplicationSlotBounds! bounds, System.Collections.Generic.IList<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>! supportedTypes, AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy! defaultDataSourcePolicy, bool initiallyEnabled, bool fixedComplicationDataSource, Java.Lang.Integer? nameResourceId, Java.Lang.Integer? screenReaderNameResourceId, AndroidX.Wear.WatchFace.BoundingArc? boundingArc) -> void
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.ComplicationSlotStaticData.DefaultDataSourcePolicy.get -> AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy!
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.ComplicationSlotStaticData.FixedComplicationDataSource.get -> bool
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.ComplicationSlotStaticData.InitiallyEnabled.get -> bool
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.ComplicationSlotStaticData.NameResourceId.get -> Java.Lang.Integer?
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.ComplicationSlotStaticData.ScreenReaderNameResourceId.get -> Java.Lang.Integer?
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.ComplicationSlotStaticData.SlotId.get -> int
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.ComplicationSlotStaticData.SupportedTypes.get -> System.Collections.Generic.IList<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>!
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.ComplicationSlots.get -> System.Collections.Generic.IList<AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.ComplicationSlotStaticData!>!
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.Flavors.get -> AndroidX.Wear.WatchFace.Style.UserStyleFlavors?
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.Schema.get -> AndroidX.Wear.WatchFace.Style.UserStyleSchema?
AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.XmlSchemaAndComplicationSlotsDefinition(AndroidX.Wear.WatchFace.Style.UserStyleSchema? schema, System.Collections.Generic.IList<AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.ComplicationSlotStaticData!>! complicationSlots, AndroidX.Wear.WatchFace.Style.UserStyleFlavors? flavors) -> void
abstract AndroidX.Wear.WatchFace.ComplicationSlotInflationFactory.GetCanvasComplicationFactory(int slotId) -> AndroidX.Wear.WatchFace.ICanvasComplicationFactory!
abstract AndroidX.Wear.WatchFace.Editor.EditorService.CloseCallback.OnClose() -> void
abstract AndroidX.Wear.WatchFace.Renderer.CanvasRenderer.Render(Android.Graphics.Canvas! canvas, Android.Graphics.Rect! bounds, Java.Time.ZonedDateTime! zonedDateTime) -> void
abstract AndroidX.Wear.WatchFace.Renderer.CanvasRenderer.RenderHighlightLayer(Android.Graphics.Canvas! canvas, Android.Graphics.Rect! bounds, Java.Time.ZonedDateTime! zonedDateTime) -> void
abstract AndroidX.Wear.WatchFace.Renderer.CanvasRenderer2.CreateSharedAssets(Kotlin.Coroutines.IContinuation! p0) -> Java.Lang.Object?
abstract AndroidX.Wear.WatchFace.Renderer.CanvasRenderer2.Render(Android.Graphics.Canvas! canvas, Android.Graphics.Rect! bounds, Java.Time.ZonedDateTime! zonedDateTime, Java.Lang.Object! sharedAssets) -> void
abstract AndroidX.Wear.WatchFace.Renderer.CanvasRenderer2.RenderHighlightLayer(Android.Graphics.Canvas! canvas, Android.Graphics.Rect! bounds, Java.Time.ZonedDateTime! zonedDateTime, Java.Lang.Object! sharedAssets) -> void
abstract AndroidX.Wear.WatchFace.Renderer.GlesRenderer.Render(Java.Time.ZonedDateTime! zonedDateTime) -> void
abstract AndroidX.Wear.WatchFace.Renderer.GlesRenderer.RenderHighlightLayer(Java.Time.ZonedDateTime! zonedDateTime) -> void
abstract AndroidX.Wear.WatchFace.Renderer.GlesRenderer2.CreateSharedAssets(Kotlin.Coroutines.IContinuation! p0) -> Java.Lang.Object?
abstract AndroidX.Wear.WatchFace.Renderer.GlesRenderer2.Render(Java.Time.ZonedDateTime! zonedDateTime, Java.Lang.Object! sharedAssets) -> void
abstract AndroidX.Wear.WatchFace.Renderer.GlesRenderer2.RenderHighlightLayer(Java.Time.ZonedDateTime! zonedDateTime, Java.Lang.Object! sharedAssets) -> void
abstract AndroidX.Wear.WatchFace.Renderer.OnDump(Java.IO.PrintWriter! writer) -> void
abstract AndroidX.Wear.WatchFace.WatchFaceRuntimeService.CreateComplicationSlotsManager(AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository, string! resourceOnlyWatchFacePackageName) -> AndroidX.Wear.WatchFace.ComplicationSlotsManager!
abstract AndroidX.Wear.WatchFace.WatchFaceRuntimeService.CreateUserStyleFlavors(AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository, AndroidX.Wear.WatchFace.ComplicationSlotsManager! complicationSlotsManager, string! resourceOnlyWatchFacePackageName) -> AndroidX.Wear.WatchFace.Style.UserStyleFlavors!
abstract AndroidX.Wear.WatchFace.WatchFaceRuntimeService.CreateUserStyleSchema(string! resourceOnlyWatchFacePackageName) -> AndroidX.Wear.WatchFace.Style.UserStyleSchema!
abstract AndroidX.Wear.WatchFace.WatchFaceRuntimeService.CreateWatchFace(Android.Views.ISurfaceHolder! surfaceHolder, AndroidX.Wear.WatchFace.WatchState! watchState, AndroidX.Wear.WatchFace.ComplicationSlotsManager! complicationSlotsManager, AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository, string! resourceOnlyWatchFacePackageName, Kotlin.Coroutines.IContinuation! p5) -> Java.Lang.Object?
abstract AndroidX.Wear.WatchFace.WatchFaceService.CreateWatchFace(Android.Views.ISurfaceHolder! surfaceHolder, AndroidX.Wear.WatchFace.WatchState! watchState, AndroidX.Wear.WatchFace.ComplicationSlotsManager! complicationSlotsManager, AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository, Kotlin.Coroutines.IContinuation! p4) -> Java.Lang.Object?
const AndroidX.Wear.WatchFace.BroadcastsObserver.AmbientEnabledPath = "ambient_enabled" -> string!
const AndroidX.Wear.WatchFace.BroadcastsReceiver.ActionAmbientStarted = "com.google.android.wearable.action.AMBIENT_STARTED" -> string!
const AndroidX.Wear.WatchFace.BroadcastsReceiver.ActionAmbientStopped = "com.google.android.wearable.action.AMBIENT_STOPPED" -> string!
const AndroidX.Wear.WatchFace.BroadcastsReceiver.InitialLowBatteryThreshold = 15 -> float
const AndroidX.Wear.WatchFace.BroadcastsReceiver.Tag = "BroadcastsReceiver" -> string!
const AndroidX.Wear.WatchFace.CanvasType.Hardware = 1 -> int
const AndroidX.Wear.WatchFace.CanvasType.Software = 0 -> int
const AndroidX.Wear.WatchFace.ComplicationDataSourceChooserIntent.ExtraComplicationDenied = "androidx.wear.watchface.complications.EXTRA_COMPLICATION_DENIED" -> string!
const AndroidX.Wear.WatchFace.ComplicationDataSourceChooserIntent.ExtraComplicationId = "android.support.wearable.complications.EXTRA_COMPLICATION_ID" -> string!
const AndroidX.Wear.WatchFace.ComplicationDataSourceChooserIntent.ExtraComplicationRationale = "androidx.wear.watchface.complications.EXTRA_COMPLICATION_RATIONALE" -> string!
const AndroidX.Wear.WatchFace.ComplicationDataSourceChooserIntent.ExtraPendingIntent = "android.support.wearable.complications.EXTRA_PENDING_INTENT" -> string!
const AndroidX.Wear.WatchFace.ComplicationDataSourceChooserIntent.ExtraProviderInfo = "android.support.wearable.complications.EXTRA_PROVIDER_INFO" -> string!
const AndroidX.Wear.WatchFace.ComplicationDataSourceChooserIntent.ExtraSupportedTypes = "android.support.wearable.complications.EXTRA_SUPPORTED_TYPES" -> string!
const AndroidX.Wear.WatchFace.ComplicationDataSourceChooserIntent.ExtraUserStyle = "androidx.wear.watchface.complications.EXTRA_USER_STYLE" -> string!
const AndroidX.Wear.WatchFace.ComplicationDataSourceChooserIntent.ExtraWatchFaceComponentName = "android.support.wearable.complications.EXTRA_WATCH_FACE_COMPONENT_NAME" -> string!
const AndroidX.Wear.WatchFace.ComplicationDataSourceChooserIntent.ExtraWatchfaceInstanceId = "androidx.wear.watchface.complications.EXTRA_WATCHFACE_INSTANCE_ID" -> string!
const AndroidX.Wear.WatchFace.ComplicationHelperActivity.ActionPermissionRequestOnly = "android.support.wearable.complications.ACTION_PERMISSION_REQUEST_ONLY" -> string!
const AndroidX.Wear.WatchFace.ComplicationHelperActivity.ActionRequestUpdateAllActive = "android.support.wearable.complications.ACTION_REQUEST_UPDATE_ALL_ACTIVE" -> string!
const AndroidX.Wear.WatchFace.ComplicationHelperActivity.ActionStartProviderChooser = "android.support.wearable.complications.ACTION_START_PROVIDER_CHOOSER" -> string!
const AndroidX.Wear.WatchFace.ComplicationHelperActivity.ExtraWatchFaceComponent = "android.support.wearable.complications.EXTRA_WATCH_FACE_COMPONENT" -> string!
const AndroidX.Wear.WatchFace.ComplicationSlotBoundsType.Background = 1 -> int
const AndroidX.Wear.WatchFace.ComplicationSlotBoundsType.Edge = 2 -> int
const AndroidX.Wear.WatchFace.ComplicationSlotBoundsType.RoundRect = 0 -> int
const AndroidX.Wear.WatchFace.ComplicationSlotsManager.Tag = "ComplicationSlotsManager" -> string!
const AndroidX.Wear.WatchFace.Control.IWatchFaceInstanceServiceStub.Tag = "IWatchFaceInstanceServiceStub" -> string!
const AndroidX.Wear.WatchFace.Control.WatchFaceControlService.ActionWatchfaceControlService = "com.google.android.wearable.action.WATCH_FACE_CONTROL" -> string!
const AndroidX.Wear.WatchFace.Control.WatchFaceControlService.Tag = "IWatchFaceInstanceServiceStub" -> string!
const AndroidX.Wear.WatchFace.Editor.EditorService.Tag = "EditorService" -> string!
const AndroidX.Wear.WatchFace.Renderer.GlesRenderer.Tag = "Gles2WatchFace" -> string!
const AndroidX.Wear.WatchFace.TapType.Cancel = 1 -> int
const AndroidX.Wear.WatchFace.TapType.Down = 0 -> int
const AndroidX.Wear.WatchFace.TapType.Up = 2 -> int
const AndroidX.Wear.WatchFace.WatchFaceImpl.ExtraMockTimeSpeedMultiplier = "androidx.wear.watchface.extra.MOCK_TIME_SPEED_MULTIPLIER" -> string!
const AndroidX.Wear.WatchFace.WatchFaceImpl.ExtraMockTimeWrappingMaxTime = "androidx.wear.watchface.extra.MOCK_TIME_WRAPPING_MAX_TIME" -> string!
const AndroidX.Wear.WatchFace.WatchFaceImpl.ExtraMockTimeWrappingMinTime = "androidx.wear.watchface.extra.MOCK_TIME_WRAPPING_MIN_TIME" -> string!
const AndroidX.Wear.WatchFace.WatchFaceImpl.MaxLowPowerInteractiveUpdateRateMs = 100 -> long
const AndroidX.Wear.WatchFace.WatchFaceImpl.MockTimeIntent = "androidx.wear.watchface.MockTime" -> string!
const AndroidX.Wear.WatchFace.WatchFaceImpl.NoDefaultDataSource = -1 -> int
const AndroidX.Wear.WatchFace.WatchFaceImpl.PostChoreographerFrameMillisBeforeDeadline = 10 -> int
const AndroidX.Wear.WatchFace.WatchFaceService.MaxCreateWatchfaceTimeMillis = 5000 -> int
const AndroidX.Wear.WatchFace.WatchFaceService.MaxReasonableSchemaIconHeight = 400 -> int
const AndroidX.Wear.WatchFace.WatchFaceService.MaxReasonableSchemaIconWidth = 400 -> int
const AndroidX.Wear.WatchFace.WatchFaceService.MaxReasonableSchemaWireSizeBytes = 50000 -> int
const AndroidX.Wear.WatchFace.WatchFaceServiceKt.DefaultInstanceId = "defaultInstance" -> string!
const AndroidX.Wear.WatchFace.WatchFaceServiceKt.SystemSupportsConsistentIdsPrefix = "wfId-" -> string!
const AndroidX.Wear.WatchFace.WatchFaceType.Analog = 0 -> int
const AndroidX.Wear.WatchFace.WatchFaceType.Digital = 1 -> int
override AndroidX.Wear.WatchFace.BackgroundComplicationTapFilter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.BoundingArc.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.BroadcastsObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.BroadcastsReceiver.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.BroadcastsReceiver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.CanvasComplicationDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.CanvasType.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.ComplicationDataSourceChooserIntent.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.ComplicationDataSourceChooserIntent.ThresholdClass.get -> nint
override AndroidX.Wear.WatchFace.ComplicationDataSourceChooserIntent.ThresholdType.get -> System.Type!
override AndroidX.Wear.WatchFace.ComplicationHelperActivity.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.ComplicationSlot.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.ComplicationSlot.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.ComplicationSlot.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.ComplicationSlot.WhenMappings.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.ComplicationSlotBoundsType.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.ComplicationSlotInflationFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.ComplicationSlotInflationFactory.ThresholdClass.get -> nint
override AndroidX.Wear.WatchFace.ComplicationSlotInflationFactory.ThresholdType.get -> System.Type!
override AndroidX.Wear.WatchFace.ComplicationSlotsManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.ComplicationSlotsManagerKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.ComplicationTapFilterDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.ContentDescriptionLabel.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Control.IWatchFaceInstanceServiceStub.ApiVersion.get -> int
override AndroidX.Wear.WatchFace.Control.IWatchFaceInstanceServiceStub.CreateHeadlessWatchFaceInstance(AndroidX.Wear.WatchFace.Control.Data.HeadlessWatchFaceInstanceParams! params) -> AndroidX.Wear.WatchFace.Control.IHeadlessWatchFace?
override AndroidX.Wear.WatchFace.Control.IWatchFaceInstanceServiceStub.EditorService.get -> AndroidX.Wear.WatchFace.Editor.IEditorService!
override AndroidX.Wear.WatchFace.Control.IWatchFaceInstanceServiceStub.GetComplicationSlotMetadata(AndroidX.Wear.WatchFace.Control.Data.GetComplicationSlotMetadataParams! params) -> AndroidX.Wear.WatchFace.Data.ComplicationSlotMetadataWireFormat![]?
override AndroidX.Wear.WatchFace.Control.IWatchFaceInstanceServiceStub.GetDefaultProviderPolicies(AndroidX.Wear.WatchFace.Control.Data.DefaultProviderPoliciesParams! params) -> AndroidX.Wear.WatchFace.Control.Data.IdTypeAndDefaultProviderPolicyWireFormat![]?
override AndroidX.Wear.WatchFace.Control.IWatchFaceInstanceServiceStub.GetInteractiveWatchFaceInstance(string! instanceId) -> AndroidX.Wear.WatchFace.Control.IInteractiveWatchFace?
override AndroidX.Wear.WatchFace.Control.IWatchFaceInstanceServiceStub.GetOrCreateInteractiveWatchFace(AndroidX.Wear.WatchFace.Control.Data.WallpaperInteractiveWatchFaceInstanceParams! params, AndroidX.Wear.WatchFace.Control.IPendingInteractiveWatchFace! callback) -> AndroidX.Wear.WatchFace.Control.IInteractiveWatchFace?
override AndroidX.Wear.WatchFace.Control.IWatchFaceInstanceServiceStub.GetUserStyleFlavors(AndroidX.Wear.WatchFace.Control.Data.GetUserStyleFlavorsParams! params) -> AndroidX.Wear.WatchFace.Style.Data.UserStyleFlavorsWireFormat?
override AndroidX.Wear.WatchFace.Control.IWatchFaceInstanceServiceStub.GetUserStyleSchema(AndroidX.Wear.WatchFace.Control.Data.GetUserStyleSchemaParams! params) -> AndroidX.Wear.WatchFace.Style.Data.UserStyleSchemaWireFormat?
override AndroidX.Wear.WatchFace.Control.IWatchFaceInstanceServiceStub.HasComplicationCache.get -> bool
override AndroidX.Wear.WatchFace.Control.IWatchFaceInstanceServiceStub.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Control.IWatchFaceInstanceServiceStub.ThresholdClass.get -> nint
override AndroidX.Wear.WatchFace.Control.IWatchFaceInstanceServiceStub.ThresholdType.get -> System.Type!
override AndroidX.Wear.WatchFace.Control.WatchFaceControlService.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Control.WatchFaceControlService.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Control.WatchFaceControlService.OnBind(Android.Content.Intent? intent) -> Android.OS.IBinder?
override AndroidX.Wear.WatchFace.Control.WatchFaceControlService.ThresholdClass.get -> nint
override AndroidX.Wear.WatchFace.Control.WatchFaceControlService.ThresholdType.get -> System.Type!
override AndroidX.Wear.WatchFace.DrawMode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Editor.EditorService.ApiVersion.get -> int
override AndroidX.Wear.WatchFace.Editor.EditorService.CloseCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Editor.EditorService.CloseCallback.ThresholdClass.get -> nint
override AndroidX.Wear.WatchFace.Editor.EditorService.CloseCallback.ThresholdType.get -> System.Type!
override AndroidX.Wear.WatchFace.Editor.EditorService.CloseEditor() -> void
override AndroidX.Wear.WatchFace.Editor.EditorService.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Editor.EditorService.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Editor.EditorService.RegisterObserver(AndroidX.Wear.WatchFace.Editor.IEditorObserver! observer) -> int
override AndroidX.Wear.WatchFace.Editor.EditorService.UnregisterObserver(int observerId) -> void
override AndroidX.Wear.WatchFace.MutableWatchState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.RenderBufferTextureKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.RenderParameters.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.RenderParameters.HighlightLayer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.RenderParameters.HighlightedElement.AllComplicationSlots.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.RenderParameters.HighlightedElement.ComplicationSlot.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.RenderParameters.HighlightedElement.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.RenderParameters.HighlightedElement.ThresholdClass.get -> nint
override AndroidX.Wear.WatchFace.RenderParameters.HighlightedElement.ThresholdType.get -> System.Type!
override AndroidX.Wear.WatchFace.RenderParameters.HighlightedElement.UserStyle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.RenderParameters.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Renderer.CanvasRenderer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Renderer.CanvasRenderer.OnDump(Java.IO.PrintWriter! writer) -> void
override AndroidX.Wear.WatchFace.Renderer.CanvasRenderer.ThresholdClass.get -> nint
override AndroidX.Wear.WatchFace.Renderer.CanvasRenderer.ThresholdType.get -> System.Type!
override AndroidX.Wear.WatchFace.Renderer.CanvasRenderer2.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Renderer.CanvasRenderer2.ThresholdClass.get -> nint
override AndroidX.Wear.WatchFace.Renderer.CanvasRenderer2.ThresholdType.get -> System.Type!
override AndroidX.Wear.WatchFace.Renderer.GlesRenderer.GlesException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Renderer.GlesRenderer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Renderer.GlesRenderer.OnDump(Java.IO.PrintWriter! writer) -> void
override AndroidX.Wear.WatchFace.Renderer.GlesRenderer.ThresholdClass.get -> nint
override AndroidX.Wear.WatchFace.Renderer.GlesRenderer.ThresholdType.get -> System.Type!
override AndroidX.Wear.WatchFace.Renderer.GlesRenderer2.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Renderer.GlesRenderer2.ThresholdClass.get -> nint
override AndroidX.Wear.WatchFace.Renderer.GlesRenderer2.ThresholdType.get -> System.Type!
override AndroidX.Wear.WatchFace.Renderer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.Renderer.ThresholdClass.get -> nint
override AndroidX.Wear.WatchFace.Renderer.ThresholdType.get -> System.Type!
override AndroidX.Wear.WatchFace.RendererKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.RoundRectComplicationTapFilter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.TapEvent.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.TapType.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.WatchFace.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.WatchFace.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.WatchFace.LegacyWatchFaceOverlayStyle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.WatchFace.OverlayStyle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.WatchFaceColors.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.WatchFaceColorsKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.WatchFaceImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.WatchFaceKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.WatchFaceRuntimeService.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.WatchFaceRuntimeService.ThresholdClass.get -> nint
override AndroidX.Wear.WatchFace.WatchFaceRuntimeService.ThresholdType.get -> System.Type!
override AndroidX.Wear.WatchFace.WatchFaceService.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.WatchFaceService.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.WatchFaceService.ThresholdClass.get -> nint
override AndroidX.Wear.WatchFace.WatchFaceService.ThresholdType.get -> System.Type!
override AndroidX.Wear.WatchFace.WatchFaceServiceKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.WatchFaceType.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.WatchState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.ComplicationSlotStaticData.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.ComplicationSlotStaticData.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Wear.WatchFace.XmlSchemaAndComplicationSlotsDefinition.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override sealed AndroidX.Wear.WatchFace.Renderer.CanvasRenderer2.Render(Android.Graphics.Canvas! canvas, Android.Graphics.Rect! bounds, Java.Time.ZonedDateTime! zonedDateTime) -> void
override sealed AndroidX.Wear.WatchFace.Renderer.CanvasRenderer2.RenderHighlightLayer(Android.Graphics.Canvas! canvas, Android.Graphics.Rect! bounds, Java.Time.ZonedDateTime! zonedDateTime) -> void
override sealed AndroidX.Wear.WatchFace.Renderer.GlesRenderer2.Render(Java.Time.ZonedDateTime! zonedDateTime) -> void
override sealed AndroidX.Wear.WatchFace.Renderer.GlesRenderer2.RenderHighlightLayer(Java.Time.ZonedDateTime! zonedDateTime) -> void
override sealed AndroidX.Wear.WatchFace.WatchFaceRuntimeService.CreateComplicationSlotsManager(AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository) -> AndroidX.Wear.WatchFace.ComplicationSlotsManager!
override sealed AndroidX.Wear.WatchFace.WatchFaceRuntimeService.CreateUserStyleFlavors(AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository, AndroidX.Wear.WatchFace.ComplicationSlotsManager! complicationSlotsManager) -> AndroidX.Wear.WatchFace.Style.UserStyleFlavors!
override sealed AndroidX.Wear.WatchFace.WatchFaceRuntimeService.CreateUserStyleSchema() -> AndroidX.Wear.WatchFace.Style.UserStyleSchema!
override sealed AndroidX.Wear.WatchFace.WatchFaceRuntimeService.CreateWatchFace(Android.Views.ISurfaceHolder! surfaceHolder, AndroidX.Wear.WatchFace.WatchState! watchState, AndroidX.Wear.WatchFace.ComplicationSlotsManager! complicationSlotsManager, AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
override sealed AndroidX.Wear.WatchFace.WatchFaceService.OnCreateEngine() -> Android.Service.Wallpaper.WallpaperService.Engine!
static AndroidX.Wear.WatchFace.CanvasComplicationDefaultImpls.DrawHighlight(AndroidX.Wear.WatchFace.ICanvasComplication! _this, Android.Graphics.Canvas! canvas, Android.Graphics.Rect! bounds, int boundsType, Java.Time.ZonedDateTime! zonedDateTime, int color, AndroidX.Wear.WatchFace.BoundingArc? boundingArc) -> void
static AndroidX.Wear.WatchFace.CanvasComplicationDefaultImpls.OnRendererCreated(AndroidX.Wear.WatchFace.ICanvasComplication! _this, AndroidX.Wear.WatchFace.Renderer! renderer) -> void
static AndroidX.Wear.WatchFace.CanvasType.Instance.get -> AndroidX.Wear.WatchFace.CanvasType!
static AndroidX.Wear.WatchFace.ComplicationDataSourceChooserIntent.CreateComplicationDataSourceChooserIntent(Android.Content.ComponentName! watchFace, int watchFaceComplicationId, params int[]! supportedTypes) -> Android.Content.Intent!
static AndroidX.Wear.WatchFace.ComplicationDataSourceChooserIntent.StartProviderChooserActivity(Android.Content.Context! context, Android.Content.ComponentName! watchFace, int watchFaceComplicationId, params int[]! supportedTypes) -> void
static AndroidX.Wear.WatchFace.ComplicationHelperActivity.CreateComplicationDataSourceChooserHelperIntent(Android.Content.Context! context, Android.Content.ComponentName! watchFace, int watchFaceComplicationId, System.Collections.Generic.ICollection<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>! supportedTypes, string? watchFaceInstanceId, Android.Content.Intent? complicationDenied, Android.Content.Intent? complicationRationale, AndroidX.Wear.WatchFace.Style.UserStyleData? userStyleData) -> Android.Content.Intent!
static AndroidX.Wear.WatchFace.ComplicationHelperActivity.CreatePermissionRequestHelperIntent(Android.Content.Context! context, Android.Content.ComponentName! watchFace, Android.Content.Intent? complicationDenied, Android.Content.Intent? complicationRationale) -> Android.Content.Intent!
static AndroidX.Wear.WatchFace.ComplicationHelperActivity.SkipPermissionCheck.get -> bool
static AndroidX.Wear.WatchFace.ComplicationHelperActivity.SkipPermissionCheck.set -> void
static AndroidX.Wear.WatchFace.ComplicationHelperActivity.UseTestComplicationDataSourceChooserActivity.get -> bool
static AndroidX.Wear.WatchFace.ComplicationHelperActivity.UseTestComplicationDataSourceChooserActivity.set -> void
static AndroidX.Wear.WatchFace.ComplicationSlot.CreateBackgroundComplicationSlotBuilder(int id, AndroidX.Wear.WatchFace.ICanvasComplicationFactory! canvasComplicationFactory, System.Collections.Generic.IList<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>! supportedTypes, AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy! defaultDataSourcePolicy) -> AndroidX.Wear.WatchFace.ComplicationSlot.Builder!
static AndroidX.Wear.WatchFace.ComplicationSlot.CreateEdgeComplicationSlotBuilder(int id, AndroidX.Wear.WatchFace.ICanvasComplicationFactory! canvasComplicationFactory, System.Collections.Generic.IList<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>! supportedTypes, AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy! defaultDataSourcePolicy, AndroidX.Wear.WatchFace.Complications.ComplicationSlotBounds! bounds, AndroidX.Wear.WatchFace.BoundingArc! boundingArc) -> AndroidX.Wear.WatchFace.ComplicationSlot.Builder!
static AndroidX.Wear.WatchFace.ComplicationSlot.CreateEdgeComplicationSlotBuilder(int id, AndroidX.Wear.WatchFace.ICanvasComplicationFactory! canvasComplicationFactory, System.Collections.Generic.IList<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>! supportedTypes, AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy! defaultDataSourcePolicy, AndroidX.Wear.WatchFace.Complications.ComplicationSlotBounds! bounds, AndroidX.Wear.WatchFace.BoundingArc! boundingArc, AndroidX.Wear.WatchFace.IComplicationTapFilter! complicationTapFilter) -> AndroidX.Wear.WatchFace.ComplicationSlot.Builder!
static AndroidX.Wear.WatchFace.ComplicationSlot.CreateEdgeComplicationSlotBuilder(int id, AndroidX.Wear.WatchFace.ICanvasComplicationFactory! canvasComplicationFactory, System.Collections.Generic.IList<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>! supportedTypes, AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy! defaultDataSourcePolicy, AndroidX.Wear.WatchFace.Complications.ComplicationSlotBounds! bounds, AndroidX.Wear.WatchFace.IComplicationTapFilter! complicationTapFilter) -> AndroidX.Wear.WatchFace.ComplicationSlot.Builder!
static AndroidX.Wear.WatchFace.ComplicationSlot.CreateRoundRectComplicationSlotBuilder(int id, AndroidX.Wear.WatchFace.ICanvasComplicationFactory! canvasComplicationFactory, System.Collections.Generic.IList<AndroidX.Wear.WatchFace.Complications.Data.ComplicationType!>! supportedTypes, AndroidX.Wear.WatchFace.Complications.DefaultComplicationDataSourcePolicy! defaultDataSourcePolicy, AndroidX.Wear.WatchFace.Complications.ComplicationSlotBounds! bounds) -> AndroidX.Wear.WatchFace.ComplicationSlot.Builder!
static AndroidX.Wear.WatchFace.ComplicationSlotBoundsType.Instance.get -> AndroidX.Wear.WatchFace.ComplicationSlotBoundsType!
static AndroidX.Wear.WatchFace.ComplicationTapFilterDefaultImpls.HitTest(AndroidX.Wear.WatchFace.IComplicationTapFilter! _this, AndroidX.Wear.WatchFace.ComplicationSlot! complicationSlot, Android.Graphics.Rect! screenBounds, int x, int y) -> bool
static AndroidX.Wear.WatchFace.ComplicationTapFilterDefaultImpls.HitTest(AndroidX.Wear.WatchFace.IComplicationTapFilter! _this, AndroidX.Wear.WatchFace.ComplicationSlot! complicationSlot, Android.Graphics.Rect! screenBounds, int x, int y, bool includeMargins) -> bool
static AndroidX.Wear.WatchFace.DrawMode.Ambient.get -> AndroidX.Wear.WatchFace.DrawMode?
static AndroidX.Wear.WatchFace.DrawMode.Interactive.get -> AndroidX.Wear.WatchFace.DrawMode?
static AndroidX.Wear.WatchFace.DrawMode.LowBatteryInteractive.get -> AndroidX.Wear.WatchFace.DrawMode?
static AndroidX.Wear.WatchFace.DrawMode.Mute.get -> AndroidX.Wear.WatchFace.DrawMode?
static AndroidX.Wear.WatchFace.DrawMode.ValueOf(string? value) -> AndroidX.Wear.WatchFace.DrawMode?
static AndroidX.Wear.WatchFace.DrawMode.Values() -> AndroidX.Wear.WatchFace.DrawMode![]?
static AndroidX.Wear.WatchFace.RenderParameters.DefaultInteractive.get -> AndroidX.Wear.WatchFace.RenderParameters!
static AndroidX.Wear.WatchFace.RenderParameters.HighlightedElement.AllComplicationSlots.Instance.get -> AndroidX.Wear.WatchFace.RenderParameters.HighlightedElement.AllComplicationSlots!
static AndroidX.Wear.WatchFace.RendererKt.GetEGL_CONFIG_ATTRIB_LIST() -> int[]!
static AndroidX.Wear.WatchFace.RendererKt.GetEGL_SURFACE_ATTRIB_LIST() -> int[]!
static AndroidX.Wear.WatchFace.TapType.Instance.get -> AndroidX.Wear.WatchFace.TapType!
static AndroidX.Wear.WatchFace.WatchFace.ClearAllEditorDelegates() -> void
static AndroidX.Wear.WatchFace.WatchFace.CreateHeadlessSessionDelegate(Android.Content.ComponentName! componentName, AndroidX.Wear.WatchFace.Control.Data.HeadlessWatchFaceInstanceParams! params, Android.Content.Context! context, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Wear.WatchFace.WatchFace.GetOrCreateEditorDelegate(Android.Content.ComponentName! componentName) -> Xamarin.KotlinX.Coroutines.ICompletableDeferred!
static AndroidX.Wear.WatchFace.WatchFace.IsLegacyWatchFaceOverlayStyleSupported.get -> bool
static AndroidX.Wear.WatchFace.WatchFace.RegisterEditorDelegate(Android.Content.ComponentName! componentName, AndroidX.Wear.WatchFace.WatchFace.IEditorDelegate! editorDelegate) -> void
static AndroidX.Wear.WatchFace.WatchFaceColorsKt.ToApiFormat(AndroidX.Wear.WatchFace.Data.WatchFaceColorsWireFormat! obj) -> AndroidX.Wear.WatchFace.WatchFaceColors!
static AndroidX.Wear.WatchFace.WatchFaceService.XmlWatchFaceMetadata.get -> string!
static AndroidX.Wear.WatchFace.WatchFaceServiceKt.SanitizeWatchFaceId(string? instanceId) -> string!
static AndroidX.Wear.WatchFace.WatchFaceType.Instance.get -> AndroidX.Wear.WatchFace.WatchFaceType!
virtual AndroidX.Wear.WatchFace.ComplicationSlotInflationFactory.GetEdgeComplicationTapFilter(int slotId) -> AndroidX.Wear.WatchFace.IComplicationTapFilter!
virtual AndroidX.Wear.WatchFace.Control.WatchFaceControlService.CreateServiceStub() -> AndroidX.Wear.WatchFace.Control.IWatchFaceInstanceServiceStub!
virtual AndroidX.Wear.WatchFace.Control.WatchFaceControlService.CreateWatchFaceService(Android.Content.ComponentName! watchFaceName) -> AndroidX.Wear.WatchFace.WatchFaceService?
virtual AndroidX.Wear.WatchFace.Renderer.CanvasRenderer.Init(Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
virtual AndroidX.Wear.WatchFace.Renderer.GlesRenderer.OnBackgroundThreadGlContextCreated(Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
virtual AndroidX.Wear.WatchFace.Renderer.GlesRenderer.OnUiThreadGlSurfaceCreated(int width, int height, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
virtual AndroidX.Wear.WatchFace.Renderer.MainClockElementBounds.get -> Android.Graphics.Rect!
virtual AndroidX.Wear.WatchFace.Renderer.OnDestroy() -> void
virtual AndroidX.Wear.WatchFace.Renderer.OnRenderParametersChanged(AndroidX.Wear.WatchFace.RenderParameters! renderParameters) -> void
virtual AndroidX.Wear.WatchFace.Renderer.ShouldAnimate() -> bool
virtual AndroidX.Wear.WatchFace.WatchFaceService.ComplicationSlotInflationFactory.get -> AndroidX.Wear.WatchFace.ComplicationSlotInflationFactory?
virtual AndroidX.Wear.WatchFace.WatchFaceService.CreateComplicationSlotsManager(AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository) -> AndroidX.Wear.WatchFace.ComplicationSlotsManager!
virtual AndroidX.Wear.WatchFace.WatchFaceService.CreateUserStyleFlavors(AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository, AndroidX.Wear.WatchFace.ComplicationSlotsManager! complicationSlotsManager) -> AndroidX.Wear.WatchFace.Style.UserStyleFlavors!
virtual AndroidX.Wear.WatchFace.WatchFaceService.CreateUserStyleSchema() -> AndroidX.Wear.WatchFace.Style.UserStyleSchema!
virtual AndroidX.Wear.WatchFace.WatchFaceService.ForceIsVisibleForTesting() -> bool
virtual AndroidX.Wear.WatchFace.WatchFaceService.GetComplicationSlotInflationFactory(AndroidX.Wear.WatchFace.Style.CurrentUserStyleRepository! currentUserStyleRepository) -> AndroidX.Wear.WatchFace.ComplicationSlotInflationFactory!
virtual AndroidX.Wear.WatchFace.WatchFaceService.GetResourcesContext(string! runtimePackage) -> Android.Content.Context!
virtual AndroidX.Wear.WatchFace.WatchFaceService.SystemTimeProvider.get -> AndroidX.Wear.WatchFace.WatchFaceService.ISystemTimeProvider!
virtual AndroidX.Wear.WatchFace.WatchFaceService.WallpaperSurfaceHolderOverride.get -> Android.Views.ISurfaceHolder?
virtual AndroidX.Wear.WatchFace.WatchFaceService.XmlWatchFaceResourceId.get -> int
