#nullable enable
ReactiveX.RxJava3.Android.MainThreadDisposable
ReactiveX.RxJava3.Android.MainThreadDisposable.Dispose() -> void
ReactiveX.RxJava3.Android.MainThreadDisposable.IsDisposed.get -> bool
ReactiveX.RxJava3.Android.MainThreadDisposable.MainThreadDisposable() -> void
ReactiveX.RxJava3.Android.MainThreadDisposable.MainThreadDisposable(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.RxJava3.Android.Plugins.RxAndroidPlugins
ReactiveX.RxJava3.Android.Schedulers.AndroidSchedulers
abstract ReactiveX.RxJava3.Android.MainThreadDisposable.OnDispose() -> void
override ReactiveX.RxJava3.Android.MainThreadDisposable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.RxJava3.Android.MainThreadDisposable.ThresholdClass.get -> nint
override ReactiveX.RxJava3.Android.MainThreadDisposable.ThresholdType.get -> System.Type!
override ReactiveX.RxJava3.Android.Plugins.RxAndroidPlugins.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.RxJava3.Android.Schedulers.AndroidSchedulers.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
static ReactiveX.RxJava3.Android.MainThreadDisposable.VerifyMainThread() -> void
static ReactiveX.RxJava3.Android.Plugins.RxAndroidPlugins.InitMainThreadScheduler(Java.Util.Concurrent.ICallable? scheduler) -> ReactiveX.RxJava3.Core.Scheduler?
static ReactiveX.RxJava3.Android.Plugins.RxAndroidPlugins.InitMainThreadSchedulerHandler.get -> ReactiveX.RxJava3.Functions.IFunction?
static ReactiveX.RxJava3.Android.Plugins.RxAndroidPlugins.InitMainThreadSchedulerHandler.set -> void
static ReactiveX.RxJava3.Android.Plugins.RxAndroidPlugins.OnMainThreadScheduler(ReactiveX.RxJava3.Core.Scheduler? scheduler) -> ReactiveX.RxJava3.Core.Scheduler?
static ReactiveX.RxJava3.Android.Plugins.RxAndroidPlugins.OnMainThreadSchedulerHandler.get -> ReactiveX.RxJava3.Functions.IFunction?
static ReactiveX.RxJava3.Android.Plugins.RxAndroidPlugins.Reset() -> void
static ReactiveX.RxJava3.Android.Plugins.RxAndroidPlugins.SetMainThreadSchedulerHandler(ReactiveX.RxJava3.Functions.IFunction? handler) -> void
static ReactiveX.RxJava3.Android.Schedulers.AndroidSchedulers.From(Android.OS.Looper? looper) -> ReactiveX.RxJava3.Core.Scheduler?
static ReactiveX.RxJava3.Android.Schedulers.AndroidSchedulers.From(Android.OS.Looper? looper, bool async) -> ReactiveX.RxJava3.Core.Scheduler?
static ReactiveX.RxJava3.Android.Schedulers.AndroidSchedulers.MainThread() -> ReactiveX.RxJava3.Core.Scheduler?
