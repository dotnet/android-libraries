//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;
using Java.Lang;

namespace Com.Google.Common.Util.Concurrent {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.google.common.util.concurrent']/class[@name='AbstractListeningExecutorService']"
	[global::Android.Runtime.Register ("com/google/common/util/concurrent/AbstractListeningExecutorService", DoNotGenerateAcw=true)]
	public abstract partial class AbstractListeningExecutorService : global::Java.Util.Concurrent.AbstractExecutorService {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/google/common/util/concurrent/AbstractListeningExecutorService", typeof (AbstractListeningExecutorService));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected AbstractListeningExecutorService (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.google.common.util.concurrent']/class[@name='AbstractListeningExecutorService']/constructor[@name='AbstractListeningExecutorService' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe AbstractListeningExecutorService () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.google.common.util.concurrent']/class[@name='AbstractListeningExecutorService']/method[@name='newTaskFor' and count(parameter)=2 and parameter[1][@type='java.lang.Runnable'] and parameter[2][@type='T']]"
		[Register ("newTaskFor", "(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/RunnableFuture;", "")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"T"})]
		protected override sealed unsafe global::Java.Util.Concurrent.IRunnableFuture? NewTaskFor (global::Java.Lang.IRunnable? runnable, global::Java.Lang.Object? value)
		{
			const string __id = "newTaskFor.(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/RunnableFuture;";
			IntPtr native_value = JNIEnv.ToLocalJniHandle (value);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((runnable == null) ? IntPtr.Zero : ((global::Java.Lang.Object) runnable).Handle);
				__args [1] = new JniArgumentValue (native_value);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Util.Concurrent.IRunnableFuture> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_value);
				global::System.GC.KeepAlive (runnable);
				global::System.GC.KeepAlive (value);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.google.common.util.concurrent']/class[@name='AbstractListeningExecutorService']/method[@name='newTaskFor' and count(parameter)=1 and parameter[1][@type='java.util.concurrent.Callable&lt;T&gt;']]"
		[Register ("newTaskFor", "(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/RunnableFuture;", "")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"T"})]
		protected override sealed unsafe global::Java.Util.Concurrent.IRunnableFuture? NewTaskFor (global::Java.Util.Concurrent.ICallable? callable)
		{
			const string __id = "newTaskFor.(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/RunnableFuture;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((callable == null) ? IntPtr.Zero : ((global::Java.Lang.Object) callable).Handle);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Util.Concurrent.IRunnableFuture> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (callable);
			}
		}

		static Delegate? cb_submit_Submit_Ljava_lang_Runnable_Ljava_lang_Object__Lcom_google_common_util_concurrent_ListenableFuture_;
#pragma warning disable 0169
		static Delegate GetSubmit_Ljava_lang_Runnable_Ljava_lang_Object_Handler ()
		{
			if (cb_submit_Submit_Ljava_lang_Runnable_Ljava_lang_Object__Lcom_google_common_util_concurrent_ListenableFuture_ == null)
				cb_submit_Submit_Ljava_lang_Runnable_Ljava_lang_Object__Lcom_google_common_util_concurrent_ListenableFuture_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLL_L (n_Submit_Ljava_lang_Runnable_Ljava_lang_Object_));
			return cb_submit_Submit_Ljava_lang_Runnable_Ljava_lang_Object__Lcom_google_common_util_concurrent_ListenableFuture_;
		}

		static IntPtr n_Submit_Ljava_lang_Runnable_Ljava_lang_Object_ (IntPtr jnienv, IntPtr native__this, IntPtr native_task, IntPtr native_result)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Google.Common.Util.Concurrent.AbstractListeningExecutorService> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var task = (global::Java.Lang.IRunnable?)global::Java.Lang.Object.GetObject<global::Java.Lang.IRunnable> (native_task, JniHandleOwnership.DoNotTransfer);
			var result = global::Java.Lang.Object.GetObject<global::Java.Lang.Object> (native_result, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.Submit (task, result));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.google.common.util.concurrent']/class[@name='AbstractListeningExecutorService']/method[@name='submit' and count(parameter)=2 and parameter[1][@type='java.lang.Runnable'] and parameter[2][@type='T']]"
		[Register ("submit", "(Ljava/lang/Runnable;Ljava/lang/Object;)Lcom/google/common/util/concurrent/ListenableFuture;", "GetSubmit_Ljava_lang_Runnable_Ljava_lang_Object_Handler")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"T"})]
		public virtual unsafe global::Com.Google.Common.Util.Concurrent.IListenableFuture? Submit (global::Java.Lang.IRunnable? task, global::Java.Lang.Object? result)
		{
			const string __id = "submit.(Ljava/lang/Runnable;Ljava/lang/Object;)Lcom/google/common/util/concurrent/ListenableFuture;";
			IntPtr native_result = JNIEnv.ToLocalJniHandle (result);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((task == null) ? IntPtr.Zero : ((global::Java.Lang.Object) task).Handle);
				__args [1] = new JniArgumentValue (native_result);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Google.Common.Util.Concurrent.IListenableFuture> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_result);
				global::System.GC.KeepAlive (task);
				global::System.GC.KeepAlive (result);
			}
		}

		static Delegate? cb_submit_Submit_Ljava_util_concurrent_Callable__Lcom_google_common_util_concurrent_ListenableFuture_;
#pragma warning disable 0169
		static Delegate GetSubmit_Ljava_util_concurrent_Callable_Handler ()
		{
			if (cb_submit_Submit_Ljava_util_concurrent_Callable__Lcom_google_common_util_concurrent_ListenableFuture_ == null)
				cb_submit_Submit_Ljava_util_concurrent_Callable__Lcom_google_common_util_concurrent_ListenableFuture_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_L (n_Submit_Ljava_util_concurrent_Callable_));
			return cb_submit_Submit_Ljava_util_concurrent_Callable__Lcom_google_common_util_concurrent_ListenableFuture_;
		}

		static IntPtr n_Submit_Ljava_util_concurrent_Callable_ (IntPtr jnienv, IntPtr native__this, IntPtr native_task)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Google.Common.Util.Concurrent.AbstractListeningExecutorService> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var task = (global::Java.Util.Concurrent.ICallable?)global::Java.Lang.Object.GetObject<global::Java.Util.Concurrent.ICallable> (native_task, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.Submit (task));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.google.common.util.concurrent']/class[@name='AbstractListeningExecutorService']/method[@name='submit' and count(parameter)=1 and parameter[1][@type='java.util.concurrent.Callable&lt;T&gt;']]"
		[Register ("submit", "(Ljava/util/concurrent/Callable;)Lcom/google/common/util/concurrent/ListenableFuture;", "GetSubmit_Ljava_util_concurrent_Callable_Handler")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"T"})]
		public virtual unsafe global::Com.Google.Common.Util.Concurrent.IListenableFuture? Submit (global::Java.Util.Concurrent.ICallable? task)
		{
			const string __id = "submit.(Ljava/util/concurrent/Callable;)Lcom/google/common/util/concurrent/ListenableFuture;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((task == null) ? IntPtr.Zero : ((global::Java.Lang.Object) task).Handle);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Com.Google.Common.Util.Concurrent.IListenableFuture> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (task);
			}
		}

	}

	[global::Android.Runtime.Register ("com/google/common/util/concurrent/AbstractListeningExecutorService", DoNotGenerateAcw=true)]
	internal partial class AbstractListeningExecutorServiceInvoker : AbstractListeningExecutorService {
		public AbstractListeningExecutorServiceInvoker (IntPtr handle, JniHandleOwnership transfer) : base (handle, transfer)
		{
		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/google/common/util/concurrent/AbstractListeningExecutorService", typeof (AbstractListeningExecutorServiceInvoker));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		public override unsafe bool IsShutdown {
			[Register ("isShutdown", "()Z", "GetIsShutdownHandler")]
			get {
				const string __id = "isShutdown.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public override unsafe bool IsTerminated {
			[Register ("isTerminated", "()Z", "GetIsTerminatedHandler")]
			get {
				const string __id = "isTerminated.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		[Register ("awaitTermination", "(JLjava/util/concurrent/TimeUnit;)Z", "GetAwaitTermination_JLjava_util_concurrent_TimeUnit_Handler")]
		public override unsafe bool AwaitTermination (long timeout, global::Java.Util.Concurrent.TimeUnit? unit)
		{
			const string __id = "awaitTermination.(JLjava/util/concurrent/TimeUnit;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (timeout);
				__args [1] = new JniArgumentValue ((unit == null) ? IntPtr.Zero : ((global::Java.Lang.Object) unit).Handle);
				var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (unit);
			}
		}

		[Register ("shutdown", "()V", "GetShutdownHandler")]
		public override unsafe void Shutdown ()
		{
			const string __id = "shutdown.()V";
			try {
				_members.InstanceMethods.InvokeAbstractVoidMethod (__id, this, null);
			} finally {
			}
		}

		[Register ("shutdownNow", "()Ljava/util/List;", "GetShutdownNowHandler")]
		public override unsafe global::System.Collections.Generic.IList<global::Java.Lang.IRunnable>? ShutdownNow ()
		{
			const string __id = "shutdownNow.()Ljava/util/List;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Android.Runtime.JavaList<IRunnable>.FromJniHandle (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		[Register ("execute", "(Ljava/lang/Runnable;)V", "GetExecute_Ljava_lang_Runnable_Handler")]
		public override unsafe void Execute (global::Java.Lang.IRunnable? command)
		{
			const string __id = "execute.(Ljava/lang/Runnable;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((command == null) ? IntPtr.Zero : ((global::Java.Lang.Object) command).Handle);
				_members.InstanceMethods.InvokeAbstractVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (command);
			}
		}

	}
}
