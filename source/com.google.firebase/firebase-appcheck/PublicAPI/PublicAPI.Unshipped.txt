#nullable enable
Firebase.AppCheck.AppCheckToken
Firebase.AppCheck.AppCheckToken.AppCheckToken() -> void
Firebase.AppCheck.AppCheckToken.AppCheckToken(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.AppCheck.BuildConfig
Firebase.AppCheck.BuildConfig.BuildConfig() -> void
Firebase.AppCheck.FirebaseAppCheck
Firebase.AppCheck.FirebaseAppCheck.AppCheck -> System.EventHandler<Firebase.AppCheck.FirebaseAppCheck.AppCheckEventArgs!>!
Firebase.AppCheck.FirebaseAppCheck.AppCheckEventArgs
Firebase.AppCheck.FirebaseAppCheck.AppCheckEventArgs.AppCheckEventArgs(Firebase.AppCheck.AppCheckToken! p0) -> void
Firebase.AppCheck.FirebaseAppCheck.AppCheckEventArgs.P0.get -> Firebase.AppCheck.AppCheckToken!
Firebase.AppCheck.FirebaseAppCheck.FirebaseAppCheck() -> void
Firebase.AppCheck.FirebaseAppCheck.FirebaseAppCheck(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.AppCheck.FirebaseAppCheck.GetLimitedUseToken() -> Android.Gms.Tasks.Task!
Firebase.AppCheck.FirebaseAppCheck.IAppCheckListener
Firebase.AppCheck.FirebaseAppCheck.IAppCheckListener.OnAppCheckTokenChanged(Firebase.AppCheck.AppCheckToken! p0) -> void
Firebase.AppCheck.FirebaseAppCheckKt
Firebase.AppCheck.FirebaseAppCheckKtxRegistrar
Firebase.AppCheck.FirebaseAppCheckKtxRegistrar.Components.get -> System.Collections.Generic.IList<Firebase.Components.Component!>!
Firebase.AppCheck.FirebaseAppCheckKtxRegistrar.FirebaseAppCheckKtxRegistrar() -> void
Firebase.AppCheck.FirebaseAppCheckRegistrar
Firebase.AppCheck.FirebaseAppCheckRegistrar.FirebaseAppCheckRegistrar() -> void
Firebase.AppCheck.FirebaseAppCheckRegistrar.FirebaseAppCheckRegistrar(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.AppCheck.IAppCheckProvider
Firebase.AppCheck.IAppCheckProvider.GetToken() -> Android.Gms.Tasks.Task!
Firebase.AppCheck.IAppCheckProviderFactory
Firebase.AppCheck.IAppCheckProviderFactory.Create(Firebase.FirebaseApp! p0) -> Firebase.AppCheck.IAppCheckProvider!
Firebase.AppCheck.Internal.AppCheckTokenResponse
Firebase.AppCheck.Internal.AppCheckTokenResponse.AppCheckTokenResponse(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.AppCheck.Internal.DefaultAppCheckToken
Firebase.AppCheck.Internal.DefaultAppCheckTokenResult
Firebase.AppCheck.Internal.DefaultFirebaseAppCheck
Firebase.AppCheck.Internal.DefaultFirebaseAppCheck.AppCheck -> System.EventHandler<Firebase.AppCheck.FirebaseAppCheck.AppCheckEventArgs!>!
Firebase.AppCheck.Internal.DefaultFirebaseAppCheck.DefaultFirebaseAppCheck(Firebase.FirebaseApp! firebaseApp, Firebase.Inject.IProvider! heartBeatController, Java.Util.Concurrent.IExecutor? uiExecutor, Java.Util.Concurrent.IExecutor? liteExecutor, Java.Util.Concurrent.IExecutor? backgroundExecutor, Java.Util.Concurrent.IScheduledExecutorService? scheduledExecutorService) -> void
Firebase.AppCheck.Internal.DefaultFirebaseAppCheck.DefaultFirebaseAppCheck(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.AppCheck.Internal.DefaultTokenRefresher
Firebase.AppCheck.Internal.DefaultTokenRefresher.DefaultTokenRefresher(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.AppCheck.Internal.HttpErrorResponse
Firebase.AppCheck.Internal.HttpErrorResponse.HttpErrorResponse(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.AppCheck.Internal.NetworkClient
Firebase.AppCheck.Internal.NetworkClient.IAttestationTokenType
Firebase.AppCheck.Internal.NetworkClient.NetworkClient(Firebase.FirebaseApp! firebaseApp) -> void
Firebase.AppCheck.Internal.NetworkClient.NetworkClient(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.AppCheck.Internal.RetryManager
Firebase.AppCheck.Internal.RetryManager.RetryManager() -> void
Firebase.AppCheck.Internal.RetryManager.RetryManager(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.AppCheck.Internal.StorageHelper
Firebase.AppCheck.Internal.StorageHelper.StorageHelper(Android.Content.Context! context, string! persistenceKey) -> void
Firebase.AppCheck.Internal.StorageHelper.StorageHelper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.AppCheck.Internal.TokenRefreshManager
Firebase.AppCheck.Internal.TokenRefreshManager.MaybeScheduleTokenRefresh(Firebase.AppCheck.AppCheckToken! token) -> void
Firebase.AppCheck.Internal.TokenRefreshManager.OnListenerCountChanged(int newListenerCount) -> void
Firebase.AppCheck.Internal.TokenRefreshManager.SetIsAutoRefreshEnabled(bool isAutoRefreshEnabled) -> void
Firebase.AppCheck.Internal.Util.ClockDefaultClock
Firebase.AppCheck.Internal.Util.ClockDefaultClock.ClockDefaultClock() -> void
Firebase.AppCheck.Internal.Util.ClockDefaultClock.ClockDefaultClock(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.AppCheck.Internal.Util.IClock
Firebase.AppCheck.Internal.Util.IClock.CurrentTimeMillis() -> long
Firebase.AppCheck.Internal.Util.Logger
Firebase.AppCheck.Internal.Util.Logger.Logger(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.AppCheck.Internal.Util.Logger.Logger(string! tag) -> void
Firebase.AppCheck.Internal.Util.TokenParser
Firebase.AppCheck.Internal.Util.TokenParser.TokenParser() -> void
Firebase.AppCheck.Internal.Util.TokenParser.TokenParser(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.AppCheck.Ktx.FirebaseAppCheckKt
Firebase.AppCheck.Ktx.FirebaseAppCheckKtxRegistrar
Firebase.AppCheck.Ktx.FirebaseAppCheckKtxRegistrar.Components.get -> System.Collections.Generic.IList<Firebase.Components.Component!>!
Firebase.AppCheck.Ktx.FirebaseAppCheckKtxRegistrar.FirebaseAppCheckKtxRegistrar() -> void
abstract Firebase.AppCheck.AppCheckToken.ExpireTimeMillis.get -> long
abstract Firebase.AppCheck.AppCheckToken.Token.get -> string!
abstract Firebase.AppCheck.FirebaseAppCheck.AddAppCheckListener(Firebase.AppCheck.FirebaseAppCheck.IAppCheckListener! p0) -> void
abstract Firebase.AppCheck.FirebaseAppCheck.AddAppCheckTokenListener(Firebase.AppCheck.Interop.IAppCheckTokenListener! p0) -> void
abstract Firebase.AppCheck.FirebaseAppCheck.GetAppCheckToken(bool p0) -> Android.Gms.Tasks.Task!
abstract Firebase.AppCheck.FirebaseAppCheck.GetLimitedUseAppCheckToken() -> Android.Gms.Tasks.Task!
abstract Firebase.AppCheck.FirebaseAppCheck.GetToken(bool p0) -> Android.Gms.Tasks.Task!
abstract Firebase.AppCheck.FirebaseAppCheck.InstallAppCheckProviderFactory(Firebase.AppCheck.IAppCheckProviderFactory! p0) -> void
abstract Firebase.AppCheck.FirebaseAppCheck.InstallAppCheckProviderFactory(Firebase.AppCheck.IAppCheckProviderFactory! p0, bool p1) -> void
abstract Firebase.AppCheck.FirebaseAppCheck.LimitedUseToken.get -> Android.Gms.Tasks.Task!
abstract Firebase.AppCheck.FirebaseAppCheck.RemoveAppCheckListener(Firebase.AppCheck.FirebaseAppCheck.IAppCheckListener! p0) -> void
abstract Firebase.AppCheck.FirebaseAppCheck.RemoveAppCheckTokenListener(Firebase.AppCheck.Interop.IAppCheckTokenListener! p0) -> void
abstract Firebase.AppCheck.FirebaseAppCheck.SetTokenAutoRefreshEnabled(bool p0) -> void
const Firebase.AppCheck.BuildConfig.BuildType = "release" -> string!
const Firebase.AppCheck.BuildConfig.Debug = false -> bool
const Firebase.AppCheck.BuildConfig.LibraryPackageName = "com.google.firebase.appcheck" -> string!
const Firebase.AppCheck.BuildConfig.VersionName = "18.0.0" -> string!
const Firebase.AppCheck.Internal.NetworkClient.Debug = 2 -> int
const Firebase.AppCheck.Internal.NetworkClient.PlayIntegrity = 3 -> int
const Firebase.AppCheck.Internal.NetworkClient.Unknown = 0 -> int
const Firebase.AppCheck.Internal.Util.Logger.Tag = "FirebaseAppCheck" -> string!
override Firebase.AppCheck.AppCheckToken.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.AppCheck.AppCheckToken.ThresholdClass.get -> nint
override Firebase.AppCheck.AppCheckToken.ThresholdType.get -> System.Type!
override Firebase.AppCheck.BuildConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.AppCheck.FirebaseAppCheck.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.AppCheck.FirebaseAppCheck.ThresholdClass.get -> nint
override Firebase.AppCheck.FirebaseAppCheck.ThresholdType.get -> System.Type!
override Firebase.AppCheck.FirebaseAppCheckKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.AppCheck.FirebaseAppCheckKtxRegistrar.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.AppCheck.FirebaseAppCheckRegistrar.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.AppCheck.FirebaseAppCheckRegistrar.ThresholdClass.get -> nint
override Firebase.AppCheck.FirebaseAppCheckRegistrar.ThresholdType.get -> System.Type!
override Firebase.AppCheck.Internal.AppCheckTokenResponse.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.AppCheck.Internal.AppCheckTokenResponse.ThresholdClass.get -> nint
override Firebase.AppCheck.Internal.AppCheckTokenResponse.ThresholdType.get -> System.Type!
override Firebase.AppCheck.Internal.DefaultAppCheckToken.ExpireTimeMillis.get -> long
override Firebase.AppCheck.Internal.DefaultAppCheckToken.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.AppCheck.Internal.DefaultAppCheckToken.Token.get -> string!
override Firebase.AppCheck.Internal.DefaultAppCheckTokenResult.Error.get -> Java.Lang.Exception?
override Firebase.AppCheck.Internal.DefaultAppCheckTokenResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.AppCheck.Internal.DefaultAppCheckTokenResult.Token.get -> string!
override Firebase.AppCheck.Internal.DefaultFirebaseAppCheck.AddAppCheckListener(Firebase.AppCheck.FirebaseAppCheck.IAppCheckListener! listener) -> void
override Firebase.AppCheck.Internal.DefaultFirebaseAppCheck.AddAppCheckTokenListener(Firebase.AppCheck.Interop.IAppCheckTokenListener! listener) -> void
override Firebase.AppCheck.Internal.DefaultFirebaseAppCheck.GetAppCheckToken(bool forceRefresh) -> Android.Gms.Tasks.Task!
override Firebase.AppCheck.Internal.DefaultFirebaseAppCheck.GetLimitedUseAppCheckToken() -> Android.Gms.Tasks.Task!
override Firebase.AppCheck.Internal.DefaultFirebaseAppCheck.GetToken(bool forceRefresh) -> Android.Gms.Tasks.Task!
override Firebase.AppCheck.Internal.DefaultFirebaseAppCheck.InstallAppCheckProviderFactory(Firebase.AppCheck.IAppCheckProviderFactory! factory) -> void
override Firebase.AppCheck.Internal.DefaultFirebaseAppCheck.InstallAppCheckProviderFactory(Firebase.AppCheck.IAppCheckProviderFactory! factory, bool isTokenAutoRefreshEnabled) -> void
override Firebase.AppCheck.Internal.DefaultFirebaseAppCheck.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.AppCheck.Internal.DefaultFirebaseAppCheck.LimitedUseToken.get -> Android.Gms.Tasks.Task!
override Firebase.AppCheck.Internal.DefaultFirebaseAppCheck.RemoveAppCheckListener(Firebase.AppCheck.FirebaseAppCheck.IAppCheckListener! listener) -> void
override Firebase.AppCheck.Internal.DefaultFirebaseAppCheck.RemoveAppCheckTokenListener(Firebase.AppCheck.Interop.IAppCheckTokenListener! listener) -> void
override Firebase.AppCheck.Internal.DefaultFirebaseAppCheck.SetTokenAutoRefreshEnabled(bool isTokenAutoRefreshEnabled) -> void
override Firebase.AppCheck.Internal.DefaultFirebaseAppCheck.ThresholdClass.get -> nint
override Firebase.AppCheck.Internal.DefaultFirebaseAppCheck.ThresholdType.get -> System.Type!
override Firebase.AppCheck.Internal.DefaultTokenRefresher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.AppCheck.Internal.DefaultTokenRefresher.ThresholdClass.get -> nint
override Firebase.AppCheck.Internal.DefaultTokenRefresher.ThresholdType.get -> System.Type!
override Firebase.AppCheck.Internal.HttpErrorResponse.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.AppCheck.Internal.HttpErrorResponse.ThresholdClass.get -> nint
override Firebase.AppCheck.Internal.HttpErrorResponse.ThresholdType.get -> System.Type!
override Firebase.AppCheck.Internal.NetworkClient.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.AppCheck.Internal.NetworkClient.ThresholdClass.get -> nint
override Firebase.AppCheck.Internal.NetworkClient.ThresholdType.get -> System.Type!
override Firebase.AppCheck.Internal.RetryManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.AppCheck.Internal.RetryManager.ThresholdClass.get -> nint
override Firebase.AppCheck.Internal.RetryManager.ThresholdType.get -> System.Type!
override Firebase.AppCheck.Internal.StorageHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.AppCheck.Internal.StorageHelper.ThresholdClass.get -> nint
override Firebase.AppCheck.Internal.StorageHelper.ThresholdType.get -> System.Type!
override Firebase.AppCheck.Internal.TokenRefreshManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.AppCheck.Internal.Util.ClockDefaultClock.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.AppCheck.Internal.Util.ClockDefaultClock.ThresholdClass.get -> nint
override Firebase.AppCheck.Internal.Util.ClockDefaultClock.ThresholdType.get -> System.Type!
override Firebase.AppCheck.Internal.Util.Logger.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.AppCheck.Internal.Util.Logger.ThresholdClass.get -> nint
override Firebase.AppCheck.Internal.Util.Logger.ThresholdType.get -> System.Type!
override Firebase.AppCheck.Internal.Util.TokenParser.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.AppCheck.Internal.Util.TokenParser.ThresholdClass.get -> nint
override Firebase.AppCheck.Internal.Util.TokenParser.ThresholdType.get -> System.Type!
override Firebase.AppCheck.Ktx.FirebaseAppCheckKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.AppCheck.Ktx.FirebaseAppCheckKtxRegistrar.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
static Firebase.AppCheck.FirebaseAppCheck.GetInstance(Firebase.FirebaseApp! firebaseApp) -> Firebase.AppCheck.FirebaseAppCheck!
static Firebase.AppCheck.FirebaseAppCheck.Instance.get -> Firebase.AppCheck.FirebaseAppCheck!
static Firebase.AppCheck.FirebaseAppCheckKt.AppCheck(Firebase.Firebase! obj, Firebase.FirebaseApp! app) -> Firebase.AppCheck.FirebaseAppCheck!
static Firebase.AppCheck.FirebaseAppCheckKt.Component1(Firebase.AppCheck.AppCheckToken! obj) -> string!
static Firebase.AppCheck.FirebaseAppCheckKt.Component2(Firebase.AppCheck.AppCheckToken! obj) -> long
static Firebase.AppCheck.FirebaseAppCheckKt.GetAppCheck(Firebase.Firebase! obj) -> Firebase.AppCheck.FirebaseAppCheck!
static Firebase.AppCheck.Internal.AppCheckTokenResponse.FromJsonString(string! jsonString) -> Firebase.AppCheck.Internal.AppCheckTokenResponse!
static Firebase.AppCheck.Internal.DefaultAppCheckToken.ConstructFromAppCheckTokenResponse(Firebase.AppCheck.Internal.AppCheckTokenResponse! tokenResponse) -> Firebase.AppCheck.Internal.DefaultAppCheckToken!
static Firebase.AppCheck.Internal.DefaultAppCheckToken.ConstructFromRawToken(string! token) -> Firebase.AppCheck.Internal.DefaultAppCheckToken!
static Firebase.AppCheck.Internal.DefaultAppCheckTokenResult.ConstructFromAppCheckToken(Firebase.AppCheck.AppCheckToken! token) -> Firebase.AppCheck.Internal.DefaultAppCheckTokenResult!
static Firebase.AppCheck.Internal.DefaultAppCheckTokenResult.ConstructFromError(Firebase.FirebaseException! error) -> Firebase.AppCheck.Internal.DefaultAppCheckTokenResult!
static Firebase.AppCheck.Internal.HttpErrorResponse.FromJsonString(string! jsonString) -> Firebase.AppCheck.Internal.HttpErrorResponse!
static Firebase.AppCheck.Internal.Util.Logger.GetLogger() -> Firebase.AppCheck.Internal.Util.Logger!
static Firebase.AppCheck.Internal.Util.TokenParser.ParseTokenClaims(string! token) -> System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>!
static Firebase.AppCheck.Ktx.FirebaseAppCheckKt.Component1(Firebase.AppCheck.AppCheckToken! obj) -> string!
static Firebase.AppCheck.Ktx.FirebaseAppCheckKt.Component2(Firebase.AppCheck.AppCheckToken! obj) -> long
virtual Firebase.AppCheck.FirebaseAppCheckRegistrar.Components.get -> System.Collections.Generic.IList<Firebase.Components.Component!>?
virtual Firebase.AppCheck.Internal.AppCheckTokenResponse.TimeToLive.get -> string!
virtual Firebase.AppCheck.Internal.AppCheckTokenResponse.Token.get -> string!
virtual Firebase.AppCheck.Internal.DefaultFirebaseAppCheck.GetLimitedUseToken() -> Android.Gms.Tasks.Task!
virtual Firebase.AppCheck.Internal.DefaultFirebaseAppCheck.InstalledAppCheckProviderFactory.get -> Firebase.AppCheck.IAppCheckProviderFactory?
virtual Firebase.AppCheck.Internal.DefaultFirebaseAppCheck.ResetAppCheckState() -> void
virtual Firebase.AppCheck.Internal.DefaultTokenRefresher.Cancel() -> void
virtual Firebase.AppCheck.Internal.DefaultTokenRefresher.ScheduleRefresh(long timeToRefreshMillis) -> void
virtual Firebase.AppCheck.Internal.HttpErrorResponse.ErrorCode.get -> int
virtual Firebase.AppCheck.Internal.HttpErrorResponse.ErrorMessage.get -> string!
virtual Firebase.AppCheck.Internal.NetworkClient.ExchangeAttestationForAppCheckToken(byte[]! requestBytes, int tokenType, Firebase.AppCheck.Internal.RetryManager! retryManager) -> Firebase.AppCheck.Internal.AppCheckTokenResponse!
virtual Firebase.AppCheck.Internal.NetworkClient.GeneratePlayIntegrityChallenge(byte[]! requestBytes, Firebase.AppCheck.Internal.RetryManager! retryManager) -> string!
virtual Firebase.AppCheck.Internal.RetryManager.CanRetry() -> bool
virtual Firebase.AppCheck.Internal.RetryManager.ResetBackoffOnSuccess() -> void
virtual Firebase.AppCheck.Internal.RetryManager.UpdateBackoffOnFailure(int errorCode) -> void
virtual Firebase.AppCheck.Internal.StorageHelper.RetrieveAppCheckToken() -> Firebase.AppCheck.AppCheckToken?
virtual Firebase.AppCheck.Internal.StorageHelper.SaveAppCheckToken(Firebase.AppCheck.AppCheckToken! appCheckToken) -> void
virtual Firebase.AppCheck.Internal.Util.ClockDefaultClock.CurrentTimeMillis() -> long
virtual Firebase.AppCheck.Internal.Util.Logger.D(string! text) -> void
virtual Firebase.AppCheck.Internal.Util.Logger.D(string! text, Java.Lang.Throwable? throwable) -> void
virtual Firebase.AppCheck.Internal.Util.Logger.E(string! text) -> void
virtual Firebase.AppCheck.Internal.Util.Logger.E(string! text, Java.Lang.Throwable? throwable) -> void
virtual Firebase.AppCheck.Internal.Util.Logger.I(string! text) -> void
virtual Firebase.AppCheck.Internal.Util.Logger.I(string! text, Java.Lang.Throwable? throwable) -> void
virtual Firebase.AppCheck.Internal.Util.Logger.Log(int priority, string! msg) -> void
virtual Firebase.AppCheck.Internal.Util.Logger.Log(int priority, string! msg, bool forceLog) -> void
virtual Firebase.AppCheck.Internal.Util.Logger.V(string! text) -> void
virtual Firebase.AppCheck.Internal.Util.Logger.V(string! text, Java.Lang.Throwable? throwable) -> void
virtual Firebase.AppCheck.Internal.Util.Logger.W(string! text) -> void
virtual Firebase.AppCheck.Internal.Util.Logger.W(string! text, Java.Lang.Throwable? throwable) -> void
