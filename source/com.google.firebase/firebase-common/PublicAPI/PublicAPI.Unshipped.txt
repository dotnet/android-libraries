#nullable enable
Firebase.Annotations.IPublicApi
Firebase.Annotations.PublicApiAttribute
Firebase.Annotations.PublicApiAttribute.PublicApiAttribute() -> void
Firebase.BuildConfig
Firebase.BuildConfig.BuildConfig() -> void
Firebase.Components.ComponentDiscoveryService
Firebase.Components.ComponentDiscoveryService.ComponentDiscoveryService() -> void
Firebase.Components.ComponentDiscoveryService.ComponentDiscoveryService(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Concurrent.ExecutorsRegistrar
Firebase.Concurrent.ExecutorsRegistrar.ExecutorsRegistrar() -> void
Firebase.Concurrent.ExecutorsRegistrar.ExecutorsRegistrar(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Concurrent.FirebaseExecutors
Firebase.Concurrent.FirebaseExecutors.FirebaseExecutors(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Concurrent.IPausableExecutor
Firebase.Concurrent.IPausableExecutor.IsPaused.get -> bool
Firebase.Concurrent.IPausableExecutor.Pause() -> void
Firebase.Concurrent.IPausableExecutor.Resume() -> void
Firebase.Concurrent.IPausableExecutorService
Firebase.Concurrent.IPausableScheduledExecutorService
Firebase.Concurrent.UiExecutor
Firebase.Concurrent.UiExecutor.Execute(Java.Lang.IRunnable? command) -> void
Firebase.DataCollectionDefaultChange
Firebase.DataCollectionDefaultChange.DataCollectionDefaultChange(bool enabled) -> void
Firebase.DataCollectionDefaultChange.Enabled.get -> bool
Firebase.DataCollectionDefaultChange.Enabled.set -> void
Firebase.Emulators.EmulatedServiceSettings
Firebase.Emulators.EmulatedServiceSettings.EmulatedServiceSettings(string! host, int port) -> void
Firebase.Emulators.EmulatedServiceSettings.Host.get -> string?
Firebase.Emulators.EmulatedServiceSettings.Port.get -> int
Firebase.Firebase
Firebase.FirebaseApp
Firebase.FirebaseApp.BackgroundStateChange -> System.EventHandler<Firebase.FirebaseApp.BackgroundStateChangeEventArgs!>!
Firebase.FirebaseApp.BackgroundStateChangeEventArgs
Firebase.FirebaseApp.BackgroundStateChangeEventArgs.BackgroundStateChangeEventArgs(bool p0) -> void
Firebase.FirebaseApp.BackgroundStateChangeEventArgs.P0.get -> bool
Firebase.FirebaseApp.FirebaseApp(Android.Content.Context? applicationContext, string? name, Firebase.FirebaseOptions? options) -> void
Firebase.FirebaseApp.FirebaseApp(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.FirebaseApp.IBackgroundStateChangeListener
Firebase.FirebaseApp.IBackgroundStateChangeListener.OnBackgroundStateChanged(bool p0) -> void
Firebase.FirebaseApp.LifecycleEvent -> System.EventHandler<Firebase.FirebaseAppLifecycleEventArgs!>!
Firebase.FirebaseAppLifecycleEventArgs
Firebase.FirebaseAppLifecycleEventArgs.FirebaseAppLifecycleEventArgs(string? p0, Firebase.FirebaseOptions? p1) -> void
Firebase.FirebaseAppLifecycleEventArgs.P0.get -> string?
Firebase.FirebaseAppLifecycleEventArgs.P1.get -> Firebase.FirebaseOptions?
Firebase.FirebaseCommonKtxRegistrar
Firebase.FirebaseCommonKtxRegistrar.Components.get -> System.Collections.Generic.IList<Firebase.Components.Component!>!
Firebase.FirebaseCommonKtxRegistrar.FirebaseCommonKtxRegistrar() -> void
Firebase.FirebaseCommonRegistrar
Firebase.FirebaseCommonRegistrar.FirebaseCommonRegistrar() -> void
Firebase.FirebaseCommonRegistrar.FirebaseCommonRegistrar(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.FirebaseError
Firebase.FirebaseError.FirebaseError(int errorCode) -> void
Firebase.FirebaseError.FirebaseError(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.FirebaseKt
Firebase.FirebaseNetworkException
Firebase.FirebaseNetworkException.FirebaseNetworkException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.FirebaseNetworkException.FirebaseNetworkException(string! detailMessage) -> void
Firebase.FirebaseOptions
Firebase.FirebaseOptions.ApiKey.get -> string!
Firebase.FirebaseOptions.ApplicationId.get -> string!
Firebase.FirebaseOptions.Builder
Firebase.FirebaseOptions.Builder.Build() -> Firebase.FirebaseOptions!
Firebase.FirebaseOptions.Builder.Builder() -> void
Firebase.FirebaseOptions.Builder.Builder(Firebase.FirebaseOptions! options) -> void
Firebase.FirebaseOptions.Builder.SetApiKey(string! apiKey) -> Firebase.FirebaseOptions.Builder!
Firebase.FirebaseOptions.Builder.SetApplicationId(string! applicationId) -> Firebase.FirebaseOptions.Builder!
Firebase.FirebaseOptions.Builder.SetDatabaseUrl(string? databaseUrl) -> Firebase.FirebaseOptions.Builder!
Firebase.FirebaseOptions.Builder.SetGaTrackingId(string? gaTrackingId) -> Firebase.FirebaseOptions.Builder!
Firebase.FirebaseOptions.Builder.SetGcmSenderId(string? gcmSenderId) -> Firebase.FirebaseOptions.Builder!
Firebase.FirebaseOptions.Builder.SetProjectId(string? projectId) -> Firebase.FirebaseOptions.Builder!
Firebase.FirebaseOptions.Builder.SetStorageBucket(string? storageBucket) -> Firebase.FirebaseOptions.Builder!
Firebase.FirebaseOptions.DatabaseUrl.get -> string?
Firebase.FirebaseOptions.GaTrackingId.get -> string?
Firebase.FirebaseOptions.GcmSenderId.get -> string?
Firebase.FirebaseOptions.ProjectId.get -> string?
Firebase.FirebaseOptions.StorageBucket.get -> string?
Firebase.FirebaseTooManyRequestsException
Firebase.FirebaseTooManyRequestsException.FirebaseTooManyRequestsException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.FirebaseTooManyRequestsException.FirebaseTooManyRequestsException(string! message) -> void
Firebase.HeartBeatInfo.DefaultHeartBeatController
Firebase.HeartBeatInfo.DefaultHeartBeatController.DefaultHeartBeatController(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.HeartBeatInfo.HeartBeatConsumerComponent
Firebase.HeartBeatInfo.HeartBeatConsumerComponent.HeartBeatConsumerComponent(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.HeartBeatInfo.HeartBeatInfoHeartBeat
Firebase.HeartBeatInfo.HeartBeatInfoHeartBeat.Code.get -> int
Firebase.HeartBeatInfo.HeartBeatResult
Firebase.HeartBeatInfo.HeartBeatResult.HeartBeatResult() -> void
Firebase.HeartBeatInfo.HeartBeatResult.HeartBeatResult(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.HeartBeatInfo.IHeartBeatConsumer
Firebase.HeartBeatInfo.IHeartBeatController
Firebase.HeartBeatInfo.IHeartBeatController.GetHeartBeatsHeader() -> Android.Gms.Tasks.Task?
Firebase.HeartBeatInfo.IHeartBeatInfo
Firebase.HeartBeatInfo.IHeartBeatInfo.GetHeartBeatCode(string! p0) -> Firebase.HeartBeatInfo.HeartBeatInfoHeartBeat!
Firebase.HeartBeatInfo.SdkHeartBeatResult
Firebase.HeartBeatInfo.SdkHeartBeatResult.SdkHeartBeatResult() -> void
Firebase.HeartBeatInfo.SdkHeartBeatResult.SdkHeartBeatResult(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.IFirebaseAppLifecycleListener
Firebase.IFirebaseAppLifecycleListener.OnDeleted(string? p0, Firebase.FirebaseOptions? p1) -> void
Firebase.Internal.DataCollectionConfigStorage
Firebase.Internal.DataCollectionConfigStorage.DataCollectionConfigStorage(Android.Content.Context? applicationContext, string? persistenceKey, Firebase.Events.IPublisher? publisher) -> void
Firebase.Internal.DataCollectionConfigStorage.DataCollectionConfigStorage(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Logger.Logger
Firebase.Logger.Logger.Companion
Firebase.Logger.Logger.Companion.GetLogger(string! tag, bool enabled, Firebase.Logger.Logger.Level! minLevel) -> Firebase.Logger.Logger!
Firebase.Logger.Logger.Companion.SetupFakeLogger(string! tag, bool enabled, Firebase.Logger.Logger.Level! minLevel) -> Firebase.Logger.Logger.FakeLogger!
Firebase.Logger.Logger.Debug(string! format, Java.Lang.Object![]! args, Java.Lang.Throwable? throwable) -> int
Firebase.Logger.Logger.Debug(string! format, params Java.Lang.Object![]! args) -> int
Firebase.Logger.Logger.Debug(string! msg) -> int
Firebase.Logger.Logger.Debug(string! msg, Java.Lang.Throwable? throwable) -> int
Firebase.Logger.Logger.Enabled.get -> bool
Firebase.Logger.Logger.Enabled.set -> void
Firebase.Logger.Logger.Error(string! format, Java.Lang.Object![]! args, Java.Lang.Throwable? throwable) -> int
Firebase.Logger.Logger.Error(string! format, params Java.Lang.Object![]! args) -> int
Firebase.Logger.Logger.Error(string! msg) -> int
Firebase.Logger.Logger.Error(string! msg, Java.Lang.Throwable? throwable) -> int
Firebase.Logger.Logger.FakeLogger
Firebase.Logger.Logger.FakeLogger.ClearLogMessages() -> void
Firebase.Logger.Logger.FakeLogger.HasLogMessage(string! message) -> bool
Firebase.Logger.Logger.FakeLogger.HasLogMessageThat(Kotlin.Jvm.Functions.IFunction1! predicate) -> bool
Firebase.Logger.Logger.Info(string! format, Java.Lang.Object![]! args, Java.Lang.Throwable? throwable) -> int
Firebase.Logger.Logger.Info(string! format, params Java.Lang.Object![]! args) -> int
Firebase.Logger.Logger.Info(string! msg) -> int
Firebase.Logger.Logger.Info(string! msg, Java.Lang.Throwable? throwable) -> int
Firebase.Logger.Logger.Level
Firebase.Logger.Logger.Logger(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Logger.Logger.MinLevel.get -> Firebase.Logger.Logger.Level!
Firebase.Logger.Logger.MinLevel.set -> void
Firebase.Logger.Logger.Tag.get -> string!
Firebase.Logger.Logger.Verbose(string! format, Java.Lang.Object![]! args, Java.Lang.Throwable? throwable) -> int
Firebase.Logger.Logger.Verbose(string! format, params Java.Lang.Object![]! args) -> int
Firebase.Logger.Logger.Verbose(string! msg) -> int
Firebase.Logger.Logger.Verbose(string! msg, Java.Lang.Throwable? throwable) -> int
Firebase.Logger.Logger.Warn(string! format, Java.Lang.Object![]! args, Java.Lang.Throwable? throwable) -> int
Firebase.Logger.Logger.Warn(string! format, params Java.Lang.Object![]! args) -> int
Firebase.Logger.Logger.Warn(string! msg) -> int
Firebase.Logger.Logger.Warn(string! msg, Java.Lang.Throwable? throwable) -> int
Firebase.PlatformInfo.DefaultUserAgentPublisher
Firebase.PlatformInfo.DefaultUserAgentPublisher.DefaultUserAgentPublisher(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.PlatformInfo.GlobalLibraryVersionRegistrar
Firebase.PlatformInfo.GlobalLibraryVersionRegistrar.GlobalLibraryVersionRegistrar(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.PlatformInfo.IUserAgentPublisher
Firebase.PlatformInfo.IUserAgentPublisher.UserAgent.get -> string?
Firebase.PlatformInfo.KotlinDetector
Firebase.PlatformInfo.LibraryVersionComponent
Firebase.PlatformInfo.LibraryVersionComponent.IVersionExtractor
Firebase.PlatformInfo.LibraryVersionComponent.IVersionExtractor.Extract(Java.Lang.Object? p0) -> string?
Firebase.PlatformInfo.LibraryVersionComponent.LibraryVersionComponent(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Provider.FirebaseInitProvider
Firebase.Provider.FirebaseInitProvider.FirebaseInitProvider() -> void
Firebase.Provider.FirebaseInitProvider.FirebaseInitProvider(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.StartupTime
Firebase.StartupTime.StartupTime() -> void
Firebase.StartupTime.StartupTime(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Timestamp
Firebase.Timestamp.Companion
Firebase.Timestamp.Companion.Now() -> Firebase.Timestamp!
Firebase.Timestamp.CompareTo(Java.Lang.Object! other) -> int
Firebase.Timestamp.DescribeContents() -> int
Firebase.Timestamp.Nanoseconds.get -> int
Firebase.Timestamp.Seconds.get -> long
Firebase.Timestamp.Timestamp(Java.Time.Instant! time) -> void
Firebase.Timestamp.Timestamp(Java.Util.Date! date) -> void
Firebase.Timestamp.Timestamp(long seconds, int nanoseconds) -> void
Firebase.Timestamp.ToDate() -> Java.Util.Date!
Firebase.Timestamp.ToInstant() -> Java.Time.Instant!
Firebase.Timestamp.WriteToParcel(Android.OS.Parcel! dest, Android.OS.ParcelableWriteFlags flags) -> void
Firebase.Tracing.ComponentMonitor
Firebase.Tracing.ComponentMonitor.ComponentMonitor() -> void
Firebase.Tracing.ComponentMonitor.ComponentMonitor(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Tracing.FirebaseTrace
Firebase.Util.RandomUtilKt
Google.Firebase.Datastorage.JavaDataStorage
Google.Firebase.Datastorage.JavaDataStorage.AllSync.get -> System.Collections.Generic.IDictionary<AndroidX.DataStore.Preferences.Core.Preferences.Key!, Java.Lang.Object!>!
Google.Firebase.Datastorage.JavaDataStorage.Contains(AndroidX.DataStore.Preferences.Core.Preferences.Key! key) -> bool
Google.Firebase.Datastorage.JavaDataStorage.Context.get -> Android.Content.Context!
Google.Firebase.Datastorage.JavaDataStorage.EditSync(Kotlin.Jvm.Functions.IFunction1! transform) -> AndroidX.DataStore.Preferences.Core.Preferences!
Google.Firebase.Datastorage.JavaDataStorage.GetSync(AndroidX.DataStore.Preferences.Core.Preferences.Key! key, Java.Lang.Object? defaultValue) -> Java.Lang.Object?
Google.Firebase.Datastorage.JavaDataStorage.JavaDataStorage(Android.Content.Context! context, string! name) -> void
Google.Firebase.Datastorage.JavaDataStorage.Name.get -> string!
Google.Firebase.Datastorage.JavaDataStorage.PutSync(AndroidX.DataStore.Preferences.Core.Preferences.Key! key, Java.Lang.Object? value) -> AndroidX.DataStore.Preferences.Core.Preferences!
Google.Firebase.Datastorage.JavaDataStorageKt
abstract Firebase.HeartBeatInfo.HeartBeatResult.UsedDates.get -> System.Collections.Generic.IList<string!>?
abstract Firebase.HeartBeatInfo.HeartBeatResult.UserAgent.get -> string?
abstract Firebase.HeartBeatInfo.SdkHeartBeatResult.CompareTo(Java.Lang.Object! o) -> int
abstract Firebase.HeartBeatInfo.SdkHeartBeatResult.Millis.get -> long
abstract Firebase.HeartBeatInfo.SdkHeartBeatResult.SdkName.get -> string?
abstract Firebase.Logger.Logger.Log(Firebase.Logger.Logger.Level! level, string! format, Java.Lang.Object![]! args, Java.Lang.Throwable? throwable) -> int
abstract Firebase.StartupTime.ElapsedRealtime.get -> long
abstract Firebase.StartupTime.EpochMillis.get -> long
abstract Firebase.StartupTime.UptimeMillis.get -> long
const Firebase.BuildConfig.BuildType = "release" -> string!
const Firebase.BuildConfig.Debug = false -> bool
const Firebase.BuildConfig.LibraryPackageName = "com.google.firebase" -> string!
const Firebase.BuildConfig.VersionName = "22.0.0" -> string!
const Firebase.FirebaseApp.DefaultAppName = "[DEFAULT]" -> string!
const Firebase.FirebaseError.ErrorAccountExistsWithDifferentCredential = 17012 -> int
const Firebase.FirebaseError.ErrorAppNotAuthorized = 17028 -> int
const Firebase.FirebaseError.ErrorCredentialAlreadyInUse = 17025 -> int
const Firebase.FirebaseError.ErrorCustomTokenMismatch = 17002 -> int
const Firebase.FirebaseError.ErrorEmailAlreadyInUse = 17007 -> int
const Firebase.FirebaseError.ErrorInternalError = 17499 -> int
const Firebase.FirebaseError.ErrorInvalidApiKey = 17023 -> int
const Firebase.FirebaseError.ErrorInvalidCredential = 17004 -> int
const Firebase.FirebaseError.ErrorInvalidCustomToken = 17000 -> int
const Firebase.FirebaseError.ErrorInvalidEmail = 17008 -> int
const Firebase.FirebaseError.ErrorInvalidUserToken = 17017 -> int
const Firebase.FirebaseError.ErrorNetworkRequestFailed = 17020 -> int
const Firebase.FirebaseError.ErrorNoSignedInUser = 17495 -> int
const Firebase.FirebaseError.ErrorNoSuchProvider = 17016 -> int
const Firebase.FirebaseError.ErrorOperationNotAllowed = 17006 -> int
const Firebase.FirebaseError.ErrorProviderAlreadyLinked = 17015 -> int
const Firebase.FirebaseError.ErrorRequiresRecentLogin = 17014 -> int
const Firebase.FirebaseError.ErrorTooManyRequests = 17010 -> int
const Firebase.FirebaseError.ErrorUserDisabled = 17005 -> int
const Firebase.FirebaseError.ErrorUserMismatch = 17024 -> int
const Firebase.FirebaseError.ErrorUserNotFound = 17011 -> int
const Firebase.FirebaseError.ErrorUserTokenExpired = 17021 -> int
const Firebase.FirebaseError.ErrorWeakPassword = 17026 -> int
const Firebase.FirebaseError.ErrorWrongPassword = 17009 -> int
const Firebase.Internal.DataCollectionConfigStorage.DataCollectionDefaultEnabled = "firebase_data_collection_default_enabled" -> string!
override Firebase.BuildConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Components.ComponentDiscoveryService.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Components.ComponentDiscoveryService.OnBind(Android.Content.Intent? intent) -> Android.OS.IBinder?
override Firebase.Components.ComponentDiscoveryService.ThresholdClass.get -> nint
override Firebase.Components.ComponentDiscoveryService.ThresholdType.get -> System.Type!
override Firebase.Concurrent.ExecutorsRegistrar.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Concurrent.ExecutorsRegistrar.ThresholdClass.get -> nint
override Firebase.Concurrent.ExecutorsRegistrar.ThresholdType.get -> System.Type!
override Firebase.Concurrent.FirebaseExecutors.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Concurrent.FirebaseExecutors.ThresholdClass.get -> nint
override Firebase.Concurrent.FirebaseExecutors.ThresholdType.get -> System.Type!
override Firebase.Concurrent.UiExecutor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.DataCollectionDefaultChange.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Emulators.EmulatedServiceSettings.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Firebase.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.FirebaseApp.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.FirebaseApp.ThresholdClass.get -> nint
override Firebase.FirebaseApp.ThresholdType.get -> System.Type!
override Firebase.FirebaseCommonKtxRegistrar.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.FirebaseCommonRegistrar.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.FirebaseCommonRegistrar.ThresholdClass.get -> nint
override Firebase.FirebaseCommonRegistrar.ThresholdType.get -> System.Type!
override Firebase.FirebaseError.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.FirebaseError.ThresholdClass.get -> nint
override Firebase.FirebaseError.ThresholdType.get -> System.Type!
override Firebase.FirebaseKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.FirebaseNetworkException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.FirebaseNetworkException.ThresholdClass.get -> nint
override Firebase.FirebaseNetworkException.ThresholdType.get -> System.Type!
override Firebase.FirebaseOptions.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.FirebaseOptions.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.FirebaseTooManyRequestsException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.FirebaseTooManyRequestsException.ThresholdClass.get -> nint
override Firebase.FirebaseTooManyRequestsException.ThresholdType.get -> System.Type!
override Firebase.HeartBeatInfo.DefaultHeartBeatController.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.HeartBeatInfo.DefaultHeartBeatController.ThresholdClass.get -> nint
override Firebase.HeartBeatInfo.DefaultHeartBeatController.ThresholdType.get -> System.Type!
override Firebase.HeartBeatInfo.HeartBeatConsumerComponent.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.HeartBeatInfo.HeartBeatConsumerComponent.ThresholdClass.get -> nint
override Firebase.HeartBeatInfo.HeartBeatConsumerComponent.ThresholdType.get -> System.Type!
override Firebase.HeartBeatInfo.HeartBeatInfoHeartBeat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.HeartBeatInfo.HeartBeatResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.HeartBeatInfo.HeartBeatResult.ThresholdClass.get -> nint
override Firebase.HeartBeatInfo.HeartBeatResult.ThresholdType.get -> System.Type!
override Firebase.HeartBeatInfo.SdkHeartBeatResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.HeartBeatInfo.SdkHeartBeatResult.ThresholdClass.get -> nint
override Firebase.HeartBeatInfo.SdkHeartBeatResult.ThresholdType.get -> System.Type!
override Firebase.Internal.DataCollectionConfigStorage.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Internal.DataCollectionConfigStorage.ThresholdClass.get -> nint
override Firebase.Internal.DataCollectionConfigStorage.ThresholdType.get -> System.Type!
override Firebase.Logger.Logger.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Logger.Logger.FakeLogger.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Logger.Logger.FakeLogger.Log(Firebase.Logger.Logger.Level! level, string! format, Java.Lang.Object![]! args, Java.Lang.Throwable? throwable) -> int
override Firebase.Logger.Logger.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Logger.Logger.Level.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Logger.Logger.ThresholdClass.get -> nint
override Firebase.Logger.Logger.ThresholdType.get -> System.Type!
override Firebase.PlatformInfo.DefaultUserAgentPublisher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.PlatformInfo.DefaultUserAgentPublisher.ThresholdClass.get -> nint
override Firebase.PlatformInfo.DefaultUserAgentPublisher.ThresholdType.get -> System.Type!
override Firebase.PlatformInfo.GlobalLibraryVersionRegistrar.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.PlatformInfo.GlobalLibraryVersionRegistrar.ThresholdClass.get -> nint
override Firebase.PlatformInfo.GlobalLibraryVersionRegistrar.ThresholdType.get -> System.Type!
override Firebase.PlatformInfo.KotlinDetector.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.PlatformInfo.LibraryVersionComponent.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.PlatformInfo.LibraryVersionComponent.ThresholdClass.get -> nint
override Firebase.PlatformInfo.LibraryVersionComponent.ThresholdType.get -> System.Type!
override Firebase.Provider.FirebaseInitProvider.Delete(Android.Net.Uri! uri, string? selection, string![]? selectionArgs) -> int
override Firebase.Provider.FirebaseInitProvider.GetType(Android.Net.Uri! uri) -> string?
override Firebase.Provider.FirebaseInitProvider.Insert(Android.Net.Uri! uri, Android.Content.ContentValues? values) -> Android.Net.Uri?
override Firebase.Provider.FirebaseInitProvider.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Provider.FirebaseInitProvider.OnCreate() -> bool
override Firebase.Provider.FirebaseInitProvider.Query(Android.Net.Uri! uri, string![]? projection, string? selection, string![]? selectionArgs, string? sortOrder) -> Android.Database.ICursor?
override Firebase.Provider.FirebaseInitProvider.ThresholdClass.get -> nint
override Firebase.Provider.FirebaseInitProvider.ThresholdType.get -> System.Type!
override Firebase.Provider.FirebaseInitProvider.Update(Android.Net.Uri! uri, Android.Content.ContentValues? values, string? selection, string![]? selectionArgs) -> int
override Firebase.StartupTime.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.StartupTime.ThresholdClass.get -> nint
override Firebase.StartupTime.ThresholdType.get -> System.Type!
override Firebase.Timestamp.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Timestamp.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Tracing.ComponentMonitor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Tracing.ComponentMonitor.ThresholdClass.get -> nint
override Firebase.Tracing.ComponentMonitor.ThresholdType.get -> System.Type!
override Firebase.Tracing.FirebaseTrace.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Util.RandomUtilKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Google.Firebase.Datastorage.JavaDataStorage.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Google.Firebase.Datastorage.JavaDataStorageKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
static Firebase.Concurrent.FirebaseExecutors.DirectExecutor() -> Java.Util.Concurrent.IExecutor?
static Firebase.Concurrent.FirebaseExecutors.NewLimitedConcurrencyExecutor(Java.Util.Concurrent.IExecutor? delegate, int concurrency) -> Java.Util.Concurrent.IExecutor?
static Firebase.Concurrent.FirebaseExecutors.NewLimitedConcurrencyExecutorService(Java.Util.Concurrent.IExecutorService? delegate, int concurrency) -> Java.Util.Concurrent.IExecutorService?
static Firebase.Concurrent.FirebaseExecutors.NewLimitedConcurrencyScheduledExecutorService(Java.Util.Concurrent.IExecutorService? delegate, int concurrency) -> Java.Util.Concurrent.IScheduledExecutorService?
static Firebase.Concurrent.FirebaseExecutors.NewPausableExecutor(Java.Util.Concurrent.IExecutor? delegate) -> Firebase.Concurrent.IPausableExecutor?
static Firebase.Concurrent.FirebaseExecutors.NewPausableExecutorService(Java.Util.Concurrent.IExecutorService? delegate) -> Firebase.Concurrent.IPausableExecutorService?
static Firebase.Concurrent.FirebaseExecutors.NewPausableScheduledExecutorService(Java.Util.Concurrent.IScheduledExecutorService? delegate) -> Firebase.Concurrent.IPausableScheduledExecutorService?
static Firebase.Concurrent.FirebaseExecutors.NewSequentialExecutor(Java.Util.Concurrent.IExecutor? delegate) -> Java.Util.Concurrent.IExecutor?
static Firebase.Concurrent.UiExecutor.Instance.get -> Firebase.Concurrent.UiExecutor?
static Firebase.Concurrent.UiExecutor.ValueOf(string? name) -> Firebase.Concurrent.UiExecutor?
static Firebase.Concurrent.UiExecutor.Values() -> Firebase.Concurrent.UiExecutor![]?
static Firebase.Firebase.Instance.get -> Firebase.Firebase!
static Firebase.FirebaseApp.ClearInstancesForTest() -> void
static Firebase.FirebaseApp.GetApps(Android.Content.Context! context) -> System.Collections.Generic.IList<Firebase.FirebaseApp!>!
static Firebase.FirebaseApp.GetInstance(string! name) -> Firebase.FirebaseApp!
static Firebase.FirebaseApp.GetPersistenceKey(string? name, Firebase.FirebaseOptions? options) -> string?
static Firebase.FirebaseApp.InitializeApp(Android.Content.Context! context) -> Firebase.FirebaseApp?
static Firebase.FirebaseApp.InitializeApp(Android.Content.Context! context, Firebase.FirebaseOptions! options) -> Firebase.FirebaseApp!
static Firebase.FirebaseApp.InitializeApp(Android.Content.Context! context, Firebase.FirebaseOptions! options, string! name) -> Firebase.FirebaseApp!
static Firebase.FirebaseApp.Instance.get -> Firebase.FirebaseApp!
static Firebase.FirebaseKt.App(Firebase.Firebase! obj, string! name) -> Firebase.FirebaseApp!
static Firebase.FirebaseKt.GetApp(Firebase.Firebase! obj) -> Firebase.FirebaseApp!
static Firebase.FirebaseKt.GetOptions(Firebase.Firebase! obj) -> Firebase.FirebaseOptions!
static Firebase.FirebaseKt.Initialize(Firebase.Firebase! obj, Android.Content.Context! context) -> Firebase.FirebaseApp?
static Firebase.FirebaseKt.Initialize(Firebase.Firebase! obj, Android.Content.Context! context, Firebase.FirebaseOptions! options) -> Firebase.FirebaseApp!
static Firebase.FirebaseKt.Initialize(Firebase.Firebase! obj, Android.Content.Context! context, Firebase.FirebaseOptions! options, string! name) -> Firebase.FirebaseApp!
static Firebase.FirebaseOptions.FromResource(Android.Content.Context! context) -> Firebase.FirebaseOptions?
static Firebase.HeartBeatInfo.DefaultHeartBeatController.Component() -> Firebase.Components.Component!
static Firebase.HeartBeatInfo.HeartBeatConsumerComponent.Create() -> Firebase.Components.Component?
static Firebase.HeartBeatInfo.HeartBeatInfoHeartBeat.Combined.get -> Firebase.HeartBeatInfo.HeartBeatInfoHeartBeat?
static Firebase.HeartBeatInfo.HeartBeatInfoHeartBeat.Global.get -> Firebase.HeartBeatInfo.HeartBeatInfoHeartBeat?
static Firebase.HeartBeatInfo.HeartBeatInfoHeartBeat.None.get -> Firebase.HeartBeatInfo.HeartBeatInfoHeartBeat?
static Firebase.HeartBeatInfo.HeartBeatInfoHeartBeat.Sdk.get -> Firebase.HeartBeatInfo.HeartBeatInfoHeartBeat?
static Firebase.HeartBeatInfo.HeartBeatInfoHeartBeat.ValueOf(string? name) -> Firebase.HeartBeatInfo.HeartBeatInfoHeartBeat?
static Firebase.HeartBeatInfo.HeartBeatInfoHeartBeat.Values() -> Firebase.HeartBeatInfo.HeartBeatInfoHeartBeat![]?
static Firebase.HeartBeatInfo.HeartBeatResult.Create(string? userAgent, System.Collections.Generic.IList<string!>? dateList) -> Firebase.HeartBeatInfo.HeartBeatResult?
static Firebase.HeartBeatInfo.SdkHeartBeatResult.Create(string? sdkName, long millis) -> Firebase.HeartBeatInfo.SdkHeartBeatResult?
static Firebase.Logger.Logger.GetLogger(string! tag, bool enabled, Firebase.Logger.Logger.Level! minLevel) -> Firebase.Logger.Logger!
static Firebase.Logger.Logger.Level.Debug.get -> Firebase.Logger.Logger.Level?
static Firebase.Logger.Logger.Level.Entries.get -> Kotlin.Enums.IEnumEntries!
static Firebase.Logger.Logger.Level.Error.get -> Firebase.Logger.Logger.Level?
static Firebase.Logger.Logger.Level.Info.get -> Firebase.Logger.Logger.Level?
static Firebase.Logger.Logger.Level.ValueOf(string? value) -> Firebase.Logger.Logger.Level?
static Firebase.Logger.Logger.Level.Values() -> Firebase.Logger.Logger.Level![]?
static Firebase.Logger.Logger.Level.Verbose.get -> Firebase.Logger.Logger.Level?
static Firebase.Logger.Logger.Level.Warn.get -> Firebase.Logger.Logger.Level?
static Firebase.Logger.Logger.SetupFakeLogger(string! tag, bool enabled, Firebase.Logger.Logger.Level! minLevel) -> Firebase.Logger.Logger.FakeLogger!
static Firebase.PlatformInfo.DefaultUserAgentPublisher.Component() -> Firebase.Components.Component?
static Firebase.PlatformInfo.GlobalLibraryVersionRegistrar.Instance.get -> Firebase.PlatformInfo.GlobalLibraryVersionRegistrar?
static Firebase.PlatformInfo.KotlinDetector.DetectVersion() -> string?
static Firebase.PlatformInfo.LibraryVersionComponent.Create(string? sdkName, string? version) -> Firebase.Components.Component?
static Firebase.PlatformInfo.LibraryVersionComponent.FromContext(string? sdkName, Firebase.PlatformInfo.LibraryVersionComponent.IVersionExtractor? extractor) -> Firebase.Components.Component?
static Firebase.Provider.FirebaseInitProvider.IsCurrentlyInitializing.get -> bool
static Firebase.Provider.FirebaseInitProvider.StartupTime.get -> Firebase.StartupTime?
static Firebase.StartupTime.Create(long epochMillis, long elapsedRealtime, long uptimeMillis) -> Firebase.StartupTime!
static Firebase.StartupTime.Now() -> Firebase.StartupTime!
static Firebase.Timestamp.Creator.get -> Android.OS.IParcelableCreator!
static Firebase.Timestamp.Now() -> Firebase.Timestamp!
static Firebase.Tracing.FirebaseTrace.PopTrace() -> void
static Firebase.Tracing.FirebaseTrace.PushTrace(string? name) -> void
static Firebase.Util.RandomUtilKt.NextAlphanumericString(Kotlin.Random.Random! obj, int length) -> string!
static Google.Firebase.Datastorage.JavaDataStorageKt.GetOrDefault(AndroidX.DataStore.Preferences.Core.Preferences! obj, AndroidX.DataStore.Preferences.Core.Preferences.Key! key, Java.Lang.Object? defaultValue) -> Java.Lang.Object?
virtual Firebase.Concurrent.ExecutorsRegistrar.Components.get -> System.Collections.Generic.IList<Firebase.Components.Component!>?
virtual Firebase.FirebaseApp.AddBackgroundStateChangeListener(Firebase.FirebaseApp.IBackgroundStateChangeListener? listener) -> void
virtual Firebase.FirebaseApp.AddLifecycleEventListener(Firebase.IFirebaseAppLifecycleListener! listener) -> void
virtual Firebase.FirebaseApp.ApplicationContext.get -> Android.Content.Context!
virtual Firebase.FirebaseApp.DataCollectionDefaultEnabled.get -> bool
virtual Firebase.FirebaseApp.DataCollectionDefaultEnabled.set -> void
virtual Firebase.FirebaseApp.Delete() -> void
virtual Firebase.FirebaseApp.Get(Java.Lang.Class? anInterface) -> Java.Lang.Object?
virtual Firebase.FirebaseApp.IsDefaultApp.get -> bool
virtual Firebase.FirebaseApp.Name.get -> string!
virtual Firebase.FirebaseApp.Options.get -> Firebase.FirebaseOptions!
virtual Firebase.FirebaseApp.PersistenceKey.get -> string?
virtual Firebase.FirebaseApp.RemoveBackgroundStateChangeListener(Firebase.FirebaseApp.IBackgroundStateChangeListener? listener) -> void
virtual Firebase.FirebaseApp.RemoveLifecycleEventListener(Firebase.IFirebaseAppLifecycleListener! listener) -> void
virtual Firebase.FirebaseApp.SetAutomaticResourceManagementEnabled(bool enabled) -> void
virtual Firebase.FirebaseApp.SetDataCollectionDefaultEnabled(Java.Lang.Boolean? enabled) -> void
virtual Firebase.FirebaseCommonRegistrar.Components.get -> System.Collections.Generic.IList<Firebase.Components.Component!>?
virtual Firebase.FirebaseError.ErrorCode.get -> int
virtual Firebase.HeartBeatInfo.DefaultHeartBeatController.GetHeartBeatCode(string! heartBeatTag) -> Firebase.HeartBeatInfo.HeartBeatInfoHeartBeat!
virtual Firebase.HeartBeatInfo.DefaultHeartBeatController.GetHeartBeatsHeader() -> Android.Gms.Tasks.Task?
virtual Firebase.HeartBeatInfo.DefaultHeartBeatController.RegisterHeartBeat() -> Android.Gms.Tasks.Task?
virtual Firebase.HeartBeatInfo.SdkHeartBeatResult.CompareTo(Firebase.HeartBeatInfo.SdkHeartBeatResult? sdkHeartBeatResult) -> int
virtual Firebase.Internal.DataCollectionConfigStorage.IsEnabled.get -> bool
virtual Firebase.Internal.DataCollectionConfigStorage.SetEnabled(Java.Lang.Boolean? enabled) -> void
virtual Firebase.PlatformInfo.DefaultUserAgentPublisher.UserAgent.get -> string?
virtual Firebase.PlatformInfo.GlobalLibraryVersionRegistrar.RegisterVersion(string? sdkName, string? version) -> void
virtual Firebase.Tracing.ComponentMonitor.ProcessRegistrar(Firebase.Components.IComponentRegistrar? registrar) -> System.Collections.Generic.IList<Firebase.Components.Component!>?
