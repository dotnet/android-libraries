#nullable enable
Firebase.RemoteConfig.BuildConfig
Firebase.RemoteConfig.BuildConfig.BuildConfig() -> void
Firebase.RemoteConfig.ConfigUpdate
Firebase.RemoteConfig.ConfigUpdate.ConfigUpdate() -> void
Firebase.RemoteConfig.ConfigUpdate.ConfigUpdate(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.CustomSignals
Firebase.RemoteConfig.CustomSignals.Builder
Firebase.RemoteConfig.CustomSignals.Builder.Builder() -> void
Firebase.RemoteConfig.CustomSignals.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.CustomSignals.CustomSignals(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.ErrorEventArgs
Firebase.RemoteConfig.ErrorEventArgs.ErrorEventArgs(Firebase.RemoteConfig.FirebaseRemoteConfigException! p0) -> void
Firebase.RemoteConfig.ErrorEventArgs.P0.get -> Firebase.RemoteConfig.FirebaseRemoteConfigException!
Firebase.RemoteConfig.FirebaseRemoteConfig
Firebase.RemoteConfig.FirebaseRemoteConfig.FetchAsync() -> System.Threading.Tasks.Task!
Firebase.RemoteConfig.FirebaseRemoteConfig.FetchAsync(long timeout) -> System.Threading.Tasks.Task!
Firebase.RemoteConfig.FirebaseRemoteConfig.FirebaseRemoteConfig(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigClientException
Firebase.RemoteConfig.FirebaseRemoteConfigClientException.FirebaseRemoteConfigClientException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigClientException.FirebaseRemoteConfigClientException(string! detailMessage) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigClientException.FirebaseRemoteConfigClientException(string! detailMessage, Firebase.RemoteConfig.FirebaseRemoteConfigException.Code! code) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigClientException.FirebaseRemoteConfigClientException(string! detailMessage, Java.Lang.Throwable? cause) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigClientException.FirebaseRemoteConfigClientException(string! detailMessage, Java.Lang.Throwable? cause, Firebase.RemoteConfig.FirebaseRemoteConfigException.Code! code) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigException
Firebase.RemoteConfig.FirebaseRemoteConfigException.Code
Firebase.RemoteConfig.FirebaseRemoteConfigException.Code.Value() -> int
Firebase.RemoteConfig.FirebaseRemoteConfigException.FirebaseRemoteConfigException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigException.FirebaseRemoteConfigException(string! detailMessage) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigException.FirebaseRemoteConfigException(string! detailMessage, Firebase.RemoteConfig.FirebaseRemoteConfigException.Code! code) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigException.FirebaseRemoteConfigException(string! detailMessage, Java.Lang.Throwable? cause) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigException.FirebaseRemoteConfigException(string! detailMessage, Java.Lang.Throwable? cause, Firebase.RemoteConfig.FirebaseRemoteConfigException.Code! code) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigFetchThrottledException
Firebase.RemoteConfig.FirebaseRemoteConfigFetchThrottledException.FirebaseRemoteConfigFetchThrottledException(long throttleEndTimeMillis) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigFetchThrottledException.FirebaseRemoteConfigFetchThrottledException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigFetchThrottledException.FirebaseRemoteConfigFetchThrottledException(string? message, long throttledEndTimeInMillis) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigKtxRegistrar
Firebase.RemoteConfig.FirebaseRemoteConfigKtxRegistrar.Components.get -> System.Collections.Generic.IList<Firebase.Components.Component!>!
Firebase.RemoteConfig.FirebaseRemoteConfigKtxRegistrar.FirebaseRemoteConfigKtxRegistrar() -> void
Firebase.RemoteConfig.FirebaseRemoteConfigServerException
Firebase.RemoteConfig.FirebaseRemoteConfigServerException.FirebaseRemoteConfigServerException(int httpStatusCode, string! detailMessage) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigServerException.FirebaseRemoteConfigServerException(int httpStatusCode, string! detailMessage, Firebase.RemoteConfig.FirebaseRemoteConfigException.Code! code) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigServerException.FirebaseRemoteConfigServerException(int httpStatusCode, string! detailMessage, Java.Lang.Throwable? cause) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigServerException.FirebaseRemoteConfigServerException(int httpStatusCode, string! detailMessage, Java.Lang.Throwable? cause, Firebase.RemoteConfig.FirebaseRemoteConfigException.Code! code) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigServerException.FirebaseRemoteConfigServerException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigServerException.FirebaseRemoteConfigServerException(string! detailMessage, Firebase.RemoteConfig.FirebaseRemoteConfigException.Code! code) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigServerException.FirebaseRemoteConfigServerException(string! detailMessage, Java.Lang.Throwable? cause, Firebase.RemoteConfig.FirebaseRemoteConfigException.Code! code) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigSettings
Firebase.RemoteConfig.FirebaseRemoteConfigSettings.Builder
Firebase.RemoteConfig.FirebaseRemoteConfigSettings.Builder.Builder() -> void
Firebase.RemoteConfig.FirebaseRemoteConfigSettings.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.FirebaseRemoteConfigSettings.FirebaseRemoteConfigSettings(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.IConfigUpdateListener
Firebase.RemoteConfig.IConfigUpdateListener.OnError(Firebase.RemoteConfig.FirebaseRemoteConfigException! p0) -> void
Firebase.RemoteConfig.IConfigUpdateListener.OnUpdate(Firebase.RemoteConfig.ConfigUpdate! p0) -> void
Firebase.RemoteConfig.IConfigUpdateListenerRegistration
Firebase.RemoteConfig.IConfigUpdateListenerRegistration.Remove() -> void
Firebase.RemoteConfig.IFirebaseRemoteConfigInfo
Firebase.RemoteConfig.IFirebaseRemoteConfigInfo.ConfigSettings.get -> Firebase.RemoteConfig.FirebaseRemoteConfigSettings!
Firebase.RemoteConfig.IFirebaseRemoteConfigInfo.FetchTimeMillis.get -> long
Firebase.RemoteConfig.IFirebaseRemoteConfigInfo.LastFetchStatus.get -> int
Firebase.RemoteConfig.IFirebaseRemoteConfigValue
Firebase.RemoteConfig.IFirebaseRemoteConfigValue.AsBoolean() -> bool
Firebase.RemoteConfig.IFirebaseRemoteConfigValue.AsByteArray() -> byte[]!
Firebase.RemoteConfig.IFirebaseRemoteConfigValue.AsDouble() -> double
Firebase.RemoteConfig.IFirebaseRemoteConfigValue.AsLong() -> long
Firebase.RemoteConfig.IFirebaseRemoteConfigValue.AsString() -> string!
Firebase.RemoteConfig.IFirebaseRemoteConfigValue.Source.get -> int
Firebase.RemoteConfig.Internal.Code
Firebase.RemoteConfig.Internal.CodeAttribute
Firebase.RemoteConfig.Internal.CodeAttribute.CodeAttribute() -> void
Firebase.RemoteConfig.Internal.CodeConsts
Firebase.RemoteConfig.Internal.ConfigAutoFetch
Firebase.RemoteConfig.Internal.ConfigAutoFetch.ConfigAutoFetch(Java.Net.HttpURLConnection? httpURLConnection, Firebase.RemoteConfig.Internal.ConfigFetchHandler? configFetchHandler, Firebase.RemoteConfig.Internal.ConfigCacheClient? activatedCache, System.Collections.Generic.ICollection<Firebase.RemoteConfig.IConfigUpdateListener!>? eventListeners, Firebase.RemoteConfig.IConfigUpdateListener? retryCallback, Java.Util.Concurrent.IScheduledExecutorService? scheduledExecutorService) -> void
Firebase.RemoteConfig.Internal.ConfigAutoFetch.ConfigAutoFetch(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.Internal.ConfigCacheClient
Firebase.RemoteConfig.Internal.ConfigCacheClient.ConfigCacheClient(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.Internal.ConfigContainer
Firebase.RemoteConfig.Internal.ConfigContainer.Builder
Firebase.RemoteConfig.Internal.ConfigContainer.Builder.Builder(Firebase.RemoteConfig.Internal.ConfigContainer? otherContainer) -> void
Firebase.RemoteConfig.Internal.ConfigContainer.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.Internal.ConfigContainer.ConfigContainer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.Internal.ConfigFetchHandler
Firebase.RemoteConfig.Internal.ConfigFetchHandler.ConfigFetchHandler(Firebase.Installations.IFirebaseInstallationsApi? firebaseInstallations, Firebase.Inject.IProvider? analyticsConnector, Java.Util.Concurrent.IExecutor? executor, Android.Gms.Common.Util.IClock? clock, Java.Util.Random? randomGenerator, Firebase.RemoteConfig.Internal.ConfigCacheClient? fetchedConfigsCache, Firebase.RemoteConfig.Internal.ConfigFetchHttpClient? frcBackendApiClient, Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient? frcSharedPrefs, System.Collections.Generic.IDictionary<string!, string!>? customHttpHeaders) -> void
Firebase.RemoteConfig.Internal.ConfigFetchHandler.ConfigFetchHandler(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchResponse
Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchResponse.FetchResponse(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchResponse.IStatus
Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchResponse.Status
Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchResponse.StatusConsts
Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchType
Firebase.RemoteConfig.Internal.ConfigFetchHttpClient
Firebase.RemoteConfig.Internal.ConfigFetchHttpClient.ConfigFetchHttpClient(Android.Content.Context? context, string? appId, string? apiKey, string? namespace, long connectTimeoutInSeconds, long readTimeoutInSeconds) -> void
Firebase.RemoteConfig.Internal.ConfigFetchHttpClient.ConfigFetchHttpClient(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.Internal.ConfigGetParameterHandler
Firebase.RemoteConfig.Internal.ConfigGetParameterHandler.ConfigGetParameterHandler(Java.Util.Concurrent.IExecutor? executor, Firebase.RemoteConfig.Internal.ConfigCacheClient? activatedConfigsCache, Firebase.RemoteConfig.Internal.ConfigCacheClient? defaultConfigsCache) -> void
Firebase.RemoteConfig.Internal.ConfigGetParameterHandler.ConfigGetParameterHandler(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.Internal.ConfigRealtimeHandler
Firebase.RemoteConfig.Internal.ConfigRealtimeHandler.ConfigRealtimeHandler(Firebase.FirebaseApp? firebaseApp, Firebase.Installations.IFirebaseInstallationsApi? firebaseInstallations, Firebase.RemoteConfig.Internal.ConfigFetchHandler? configFetchHandler, Firebase.RemoteConfig.Internal.ConfigCacheClient? activatedCacheClient, Android.Content.Context? context, string? namespace, Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient? sharedPrefsClient, Java.Util.Concurrent.IScheduledExecutorService? scheduledExecutorService) -> void
Firebase.RemoteConfig.Internal.ConfigRealtimeHandler.ConfigRealtimeHandler(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.Internal.ConfigRealtimeHandler.ConfigUpdateListenerRegistrationInternal
Firebase.RemoteConfig.Internal.ConfigRealtimeHandler.ConfigUpdateListenerRegistrationInternal.ConfigUpdateListenerRegistrationInternal(Firebase.RemoteConfig.Internal.ConfigRealtimeHandler? __self, Firebase.RemoteConfig.IConfigUpdateListener? listener) -> void
Firebase.RemoteConfig.Internal.ConfigRealtimeHandler.ConfigUpdateListenerRegistrationInternal.ConfigUpdateListenerRegistrationInternal(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.Internal.ConfigRealtimeHttpClient
Firebase.RemoteConfig.Internal.ConfigRealtimeHttpClient.ConfigRealtimeHttpClient(Firebase.FirebaseApp? firebaseApp, Firebase.Installations.IFirebaseInstallationsApi? firebaseInstallations, Firebase.RemoteConfig.Internal.ConfigFetchHandler? configFetchHandler, Firebase.RemoteConfig.Internal.ConfigCacheClient? activatedCache, Android.Content.Context? context, string? namespace, System.Collections.Generic.ICollection<Firebase.RemoteConfig.IConfigUpdateListener!>? listeners, Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient? sharedPrefsClient, Java.Util.Concurrent.IScheduledExecutorService? scheduledExecutorService) -> void
Firebase.RemoteConfig.Internal.ConfigRealtimeHttpClient.ConfigRealtimeHttpClient(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient
Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.ConfigSharedPrefsClient(Android.Content.ISharedPreferences? frcSharedPrefs) -> void
Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.ConfigSharedPrefsClient(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.RealtimeBackoffMetadata
Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.RealtimeBackoffMetadata.RealtimeBackoffMetadata(int numFailedStreams, Java.Util.Date? backoffEndTime) -> void
Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.RealtimeBackoffMetadata.RealtimeBackoffMetadata(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.Internal.ConfigStorageClient
Firebase.RemoteConfig.Internal.ConfigStorageClient.ConfigStorageClient(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.Internal.DefaultsXmlParser
Firebase.RemoteConfig.Internal.DefaultsXmlParser.DefaultsXmlParser() -> void
Firebase.RemoteConfig.Internal.DefaultsXmlParser.DefaultsXmlParser(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.Internal.FirebaseRemoteConfigInfoImpl
Firebase.RemoteConfig.Internal.FirebaseRemoteConfigInfoImpl.Builder
Firebase.RemoteConfig.Internal.FirebaseRemoteConfigInfoImpl.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.Internal.FirebaseRemoteConfigInfoImpl.FirebaseRemoteConfigInfoImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.Internal.FirebaseRemoteConfigValueImpl
Firebase.RemoteConfig.Internal.FirebaseRemoteConfigValueImpl.FirebaseRemoteConfigValueImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.Internal.ICode
Firebase.RemoteConfig.Internal.Personalization
Firebase.RemoteConfig.Internal.Personalization.Personalization(Firebase.Inject.IProvider? analyticsConnector) -> void
Firebase.RemoteConfig.Internal.Personalization.Personalization(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.Internal.Rollouts.RolloutsStateFactory
Firebase.RemoteConfig.Internal.Rollouts.RolloutsStateFactory.RolloutsStateFactory(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.Internal.Rollouts.RolloutsStateSubscriptionsHandler
Firebase.RemoteConfig.Internal.Rollouts.RolloutsStateSubscriptionsHandler.RolloutsStateSubscriptionsHandler(Firebase.RemoteConfig.Internal.ConfigCacheClient! activatedConfigsCache, Firebase.RemoteConfig.Internal.Rollouts.RolloutsStateFactory! rolloutsStateFactory, Java.Util.Concurrent.IExecutor! executor) -> void
Firebase.RemoteConfig.Internal.Rollouts.RolloutsStateSubscriptionsHandler.RolloutsStateSubscriptionsHandler(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.Ktx.FirebaseRemoteConfigKtxRegistrar
Firebase.RemoteConfig.Ktx.FirebaseRemoteConfigKtxRegistrar.Components.get -> System.Collections.Generic.IList<Firebase.Components.Component!>!
Firebase.RemoteConfig.Ktx.FirebaseRemoteConfigKtxRegistrar.FirebaseRemoteConfigKtxRegistrar() -> void
Firebase.RemoteConfig.Ktx.RemoteConfigKt
Firebase.RemoteConfig.RemoteConfigComponent
Firebase.RemoteConfig.RemoteConfigComponent.RemoteConfigComponent(Android.Content.Context? context, Java.Util.Concurrent.IScheduledExecutorService? executor, Firebase.FirebaseApp? firebaseApp, Firebase.Installations.IFirebaseInstallationsApi? firebaseInstallations, Firebase.Abt.FirebaseABTesting? firebaseAbt, Firebase.Inject.IProvider? analyticsConnector, bool loadGetDefault) -> void
Firebase.RemoteConfig.RemoteConfigComponent.RemoteConfigComponent(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.RemoteConfigConstants
Firebase.RemoteConfig.RemoteConfigConstants.ExperimentDescriptionFieldKey
Firebase.RemoteConfig.RemoteConfigConstants.ExperimentDescriptionFieldKeyConsts
Firebase.RemoteConfig.RemoteConfigConstants.IExperimentDescriptionFieldKey
Firebase.RemoteConfig.RemoteConfigConstants.IRequestFieldKey
Firebase.RemoteConfig.RemoteConfigConstants.IResponseFieldKey
Firebase.RemoteConfig.RemoteConfigConstants.RequestFieldKey
Firebase.RemoteConfig.RemoteConfigConstants.RequestFieldKeyConsts
Firebase.RemoteConfig.RemoteConfigConstants.ResponseFieldKey
Firebase.RemoteConfig.RemoteConfigConstants.ResponseFieldKeyConsts
Firebase.RemoteConfig.RemoteConfigKt
Firebase.RemoteConfig.RemoteConfigRegistrar
Firebase.RemoteConfig.RemoteConfigRegistrar.RemoteConfigRegistrar() -> void
Firebase.RemoteConfig.RemoteConfigRegistrar.RemoteConfigRegistrar(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.RemoteConfig.UpdateEventArgs
Firebase.RemoteConfig.UpdateEventArgs.P0.get -> Firebase.RemoteConfig.ConfigUpdate!
Firebase.RemoteConfig.UpdateEventArgs.UpdateEventArgs(Firebase.RemoteConfig.ConfigUpdate! p0) -> void
abstract Firebase.RemoteConfig.ConfigUpdate.UpdatedKeys.get -> System.Collections.Generic.ICollection<string!>!
const Firebase.RemoteConfig.BuildConfig.BuildType = "release" -> string!
const Firebase.RemoteConfig.BuildConfig.Debug = false -> bool
const Firebase.RemoteConfig.BuildConfig.LibraryPackageName = "com.google.firebase.remoteconfig" -> string!
const Firebase.RemoteConfig.BuildConfig.VersionName = "22.1.2" -> string!
const Firebase.RemoteConfig.FirebaseRemoteConfig.DefaultValueForBoolean = false -> bool
const Firebase.RemoteConfig.FirebaseRemoteConfig.DefaultValueForDouble = 0 -> double
const Firebase.RemoteConfig.FirebaseRemoteConfig.DefaultValueForLong = 0 -> long
const Firebase.RemoteConfig.FirebaseRemoteConfig.DefaultValueForString = "" -> string!
const Firebase.RemoteConfig.FirebaseRemoteConfig.LastFetchStatusFailure = 1 -> int
const Firebase.RemoteConfig.FirebaseRemoteConfig.LastFetchStatusNoFetchYet = 0 -> int
const Firebase.RemoteConfig.FirebaseRemoteConfig.LastFetchStatusSuccess = -1 -> int
const Firebase.RemoteConfig.FirebaseRemoteConfig.LastFetchStatusThrottled = 2 -> int
const Firebase.RemoteConfig.FirebaseRemoteConfig.Tag = "FirebaseRemoteConfig" -> string!
const Firebase.RemoteConfig.FirebaseRemoteConfig.ValueSourceDefault = 1 -> int
const Firebase.RemoteConfig.FirebaseRemoteConfig.ValueSourceRemote = 2 -> int
const Firebase.RemoteConfig.FirebaseRemoteConfig.ValueSourceStatic = 0 -> int
const Firebase.RemoteConfig.Internal.Code.Aborted = 10 -> int
const Firebase.RemoteConfig.Internal.Code.AlreadyExists = 6 -> int
const Firebase.RemoteConfig.Internal.Code.Cancelled = 1 -> int
const Firebase.RemoteConfig.Internal.Code.DataLoss = 15 -> int
const Firebase.RemoteConfig.Internal.Code.DeadlineExceeded = 4 -> int
const Firebase.RemoteConfig.Internal.Code.FailedPrecondition = 9 -> int
const Firebase.RemoteConfig.Internal.Code.Internal = 13 -> int
const Firebase.RemoteConfig.Internal.Code.InvalidArgument = 3 -> int
const Firebase.RemoteConfig.Internal.Code.NotFound = 5 -> int
const Firebase.RemoteConfig.Internal.Code.Ok = 0 -> int
const Firebase.RemoteConfig.Internal.Code.OutOfRange = 11 -> int
const Firebase.RemoteConfig.Internal.Code.PermissionDenied = 7 -> int
const Firebase.RemoteConfig.Internal.Code.ResourceExhausted = 8 -> int
const Firebase.RemoteConfig.Internal.Code.Unauthenticated = 16 -> int
const Firebase.RemoteConfig.Internal.Code.Unavailable = 14 -> int
const Firebase.RemoteConfig.Internal.Code.Unimplemented = 12 -> int
const Firebase.RemoteConfig.Internal.Code.Unknown = 2 -> int
const Firebase.RemoteConfig.Internal.ConfigContainer.RolloutMetadataAffectedKeys = "affectedParameterKeys" -> string!
const Firebase.RemoteConfig.Internal.ConfigContainer.RolloutMetadataId = "rolloutId" -> string!
const Firebase.RemoteConfig.Internal.ConfigContainer.RolloutMetadataVariantId = "variantId" -> string!
const Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchResponse.Status.BackendHasNoUpdates = 1 -> int
const Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchResponse.Status.BackendUpdatesFetched = 0 -> int
const Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchResponse.Status.LocalStorageUsed = 2 -> int
const Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.LastFetchTimeInMillisNoFetchYet = -1 -> long
const Firebase.RemoteConfig.Internal.Personalization.AnalyticsOriginPersonalization = "fp" -> string!
const Firebase.RemoteConfig.Internal.Personalization.ArmIndex = "armIndex" -> string!
const Firebase.RemoteConfig.Internal.Personalization.ChoiceId = "choiceId" -> string!
const Firebase.RemoteConfig.Internal.Personalization.ExternalArmIndexParam = "arm_index" -> string!
const Firebase.RemoteConfig.Internal.Personalization.ExternalArmValueParam = "arm_value" -> string!
const Firebase.RemoteConfig.Internal.Personalization.ExternalEvent = "personalization_assignment" -> string!
const Firebase.RemoteConfig.Internal.Personalization.ExternalGroupParam = "group" -> string!
const Firebase.RemoteConfig.Internal.Personalization.ExternalPersonalizationIdParam = "personalization_id" -> string!
const Firebase.RemoteConfig.Internal.Personalization.ExternalRcParameterParam = "arm_key" -> string!
const Firebase.RemoteConfig.Internal.Personalization.Group = "group" -> string!
const Firebase.RemoteConfig.Internal.Personalization.InternalChoiceIdParam = "_fpid" -> string!
const Firebase.RemoteConfig.Internal.Personalization.InternalEvent = "_fpc" -> string!
const Firebase.RemoteConfig.Internal.Personalization.PersonalizationId = "personalizationId" -> string!
const Firebase.RemoteConfig.RemoteConfigComponent.ActivateFileName = "activate" -> string!
const Firebase.RemoteConfig.RemoteConfigComponent.ConnectionTimeoutInSeconds = 60 -> long
const Firebase.RemoteConfig.RemoteConfigComponent.DefaultNamespace = "firebase" -> string!
const Firebase.RemoteConfig.RemoteConfigComponent.DefaultsFileName = "defaults" -> string!
const Firebase.RemoteConfig.RemoteConfigComponent.FetchFileName = "fetch" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.ExperimentDescriptionFieldKey.ExperimentId = "experimentId" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.ExperimentDescriptionFieldKey.VariantId = "variantId" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.FetchRegexUrl = "https://firebaseremoteconfig.googleapis.com/v1/projects/%s/namespaces/%s:fetch" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.RealtimeRegexUrl = "https://firebaseremoteconfigrealtime.googleapis.com/v1/projects/%s/namespaces/%s:streamFetchInvalidations" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.RequestFieldKey.AnalyticsUserProperties = "analyticsUserProperties" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.RequestFieldKey.AppBuild = "appBuild" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.RequestFieldKey.AppId = "appId" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.RequestFieldKey.AppVersion = "appVersion" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.RequestFieldKey.CountryCode = "countryCode" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.RequestFieldKey.CustomSignals = "customSignals" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.RequestFieldKey.FirstOpenTime = "firstOpenTime" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.RequestFieldKey.InstanceId = "appInstanceId" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.RequestFieldKey.InstanceIdToken = "appInstanceIdToken" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.RequestFieldKey.LanguageCode = "languageCode" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.RequestFieldKey.PackageName = "packageName" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.RequestFieldKey.PlatformVersion = "platformVersion" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.RequestFieldKey.SdkVersion = "sdkVersion" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.RequestFieldKey.TimeZone = "timeZone" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.ResponseFieldKey.Entries = "entries" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.ResponseFieldKey.ExperimentDescriptions = "experimentDescriptions" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.ResponseFieldKey.PersonalizationMetadata = "personalizationMetadata" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.ResponseFieldKey.RolloutMetadata = "rolloutMetadata" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.ResponseFieldKey.State = "state" -> string!
const Firebase.RemoteConfig.RemoteConfigConstants.ResponseFieldKey.TemplateVersionNumber = "templateVersion" -> string!
override Firebase.RemoteConfig.BuildConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.ConfigUpdate.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.ConfigUpdate.ThresholdClass.get -> nint
override Firebase.RemoteConfig.ConfigUpdate.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.CustomSignals.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.CustomSignals.Builder.ThresholdClass.get -> nint
override Firebase.RemoteConfig.CustomSignals.Builder.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.CustomSignals.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.CustomSignals.ThresholdClass.get -> nint
override Firebase.RemoteConfig.CustomSignals.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.FirebaseRemoteConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.FirebaseRemoteConfig.ThresholdClass.get -> nint
override Firebase.RemoteConfig.FirebaseRemoteConfig.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.FirebaseRemoteConfigClientException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.FirebaseRemoteConfigClientException.ThresholdClass.get -> nint
override Firebase.RemoteConfig.FirebaseRemoteConfigClientException.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.FirebaseRemoteConfigException.Code.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.FirebaseRemoteConfigException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.FirebaseRemoteConfigException.ThresholdClass.get -> nint
override Firebase.RemoteConfig.FirebaseRemoteConfigException.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.FirebaseRemoteConfigFetchThrottledException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.FirebaseRemoteConfigFetchThrottledException.ThresholdClass.get -> nint
override Firebase.RemoteConfig.FirebaseRemoteConfigFetchThrottledException.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.FirebaseRemoteConfigKtxRegistrar.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.FirebaseRemoteConfigServerException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.FirebaseRemoteConfigServerException.ThresholdClass.get -> nint
override Firebase.RemoteConfig.FirebaseRemoteConfigServerException.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.FirebaseRemoteConfigSettings.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.FirebaseRemoteConfigSettings.Builder.ThresholdClass.get -> nint
override Firebase.RemoteConfig.FirebaseRemoteConfigSettings.Builder.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.FirebaseRemoteConfigSettings.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.FirebaseRemoteConfigSettings.ThresholdClass.get -> nint
override Firebase.RemoteConfig.FirebaseRemoteConfigSettings.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Internal.ConfigAutoFetch.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.ConfigAutoFetch.ThresholdClass.get -> nint
override Firebase.RemoteConfig.Internal.ConfigAutoFetch.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Internal.ConfigCacheClient.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.ConfigCacheClient.ThresholdClass.get -> nint
override Firebase.RemoteConfig.Internal.ConfigCacheClient.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Internal.ConfigContainer.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.ConfigContainer.Builder.ThresholdClass.get -> nint
override Firebase.RemoteConfig.Internal.ConfigContainer.Builder.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Internal.ConfigContainer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.ConfigContainer.ThresholdClass.get -> nint
override Firebase.RemoteConfig.Internal.ConfigContainer.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchResponse.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchResponse.ThresholdClass.get -> nint
override Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchResponse.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchType.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.ConfigFetchHandler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.ConfigFetchHandler.ThresholdClass.get -> nint
override Firebase.RemoteConfig.Internal.ConfigFetchHandler.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Internal.ConfigFetchHttpClient.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.ConfigFetchHttpClient.ThresholdClass.get -> nint
override Firebase.RemoteConfig.Internal.ConfigFetchHttpClient.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Internal.ConfigGetParameterHandler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.ConfigGetParameterHandler.ThresholdClass.get -> nint
override Firebase.RemoteConfig.Internal.ConfigGetParameterHandler.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Internal.ConfigRealtimeHandler.ConfigUpdateListenerRegistrationInternal.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.ConfigRealtimeHandler.ConfigUpdateListenerRegistrationInternal.ThresholdClass.get -> nint
override Firebase.RemoteConfig.Internal.ConfigRealtimeHandler.ConfigUpdateListenerRegistrationInternal.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Internal.ConfigRealtimeHandler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.ConfigRealtimeHandler.ThresholdClass.get -> nint
override Firebase.RemoteConfig.Internal.ConfigRealtimeHandler.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Internal.ConfigRealtimeHttpClient.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.ConfigRealtimeHttpClient.ThresholdClass.get -> nint
override Firebase.RemoteConfig.Internal.ConfigRealtimeHttpClient.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.RealtimeBackoffMetadata.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.RealtimeBackoffMetadata.ThresholdClass.get -> nint
override Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.RealtimeBackoffMetadata.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.ThresholdClass.get -> nint
override Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Internal.ConfigStorageClient.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.ConfigStorageClient.ThresholdClass.get -> nint
override Firebase.RemoteConfig.Internal.ConfigStorageClient.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Internal.DefaultsXmlParser.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.DefaultsXmlParser.ThresholdClass.get -> nint
override Firebase.RemoteConfig.Internal.DefaultsXmlParser.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Internal.FirebaseRemoteConfigInfoImpl.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.FirebaseRemoteConfigInfoImpl.Builder.ThresholdClass.get -> nint
override Firebase.RemoteConfig.Internal.FirebaseRemoteConfigInfoImpl.Builder.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Internal.FirebaseRemoteConfigInfoImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.FirebaseRemoteConfigInfoImpl.ThresholdClass.get -> nint
override Firebase.RemoteConfig.Internal.FirebaseRemoteConfigInfoImpl.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Internal.FirebaseRemoteConfigValueImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.FirebaseRemoteConfigValueImpl.ThresholdClass.get -> nint
override Firebase.RemoteConfig.Internal.FirebaseRemoteConfigValueImpl.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Internal.Personalization.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.Personalization.ThresholdClass.get -> nint
override Firebase.RemoteConfig.Internal.Personalization.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Internal.Rollouts.RolloutsStateFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.Rollouts.RolloutsStateFactory.ThresholdClass.get -> nint
override Firebase.RemoteConfig.Internal.Rollouts.RolloutsStateFactory.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Internal.Rollouts.RolloutsStateSubscriptionsHandler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Internal.Rollouts.RolloutsStateSubscriptionsHandler.ThresholdClass.get -> nint
override Firebase.RemoteConfig.Internal.Rollouts.RolloutsStateSubscriptionsHandler.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.Ktx.FirebaseRemoteConfigKtxRegistrar.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.Ktx.RemoteConfigKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.RemoteConfigComponent.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.RemoteConfigComponent.ThresholdClass.get -> nint
override Firebase.RemoteConfig.RemoteConfigComponent.ThresholdType.get -> System.Type!
override Firebase.RemoteConfig.RemoteConfigConstants.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.RemoteConfigKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.RemoteConfigRegistrar.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.RemoteConfig.RemoteConfigRegistrar.ThresholdClass.get -> nint
override Firebase.RemoteConfig.RemoteConfigRegistrar.ThresholdType.get -> System.Type!
static Firebase.RemoteConfig.ConfigUpdate.Create(System.Collections.Generic.ICollection<string!>! updatedKeys) -> Firebase.RemoteConfig.ConfigUpdate!
static Firebase.RemoteConfig.FirebaseRemoteConfig.DefaultValueForByteArray.get -> System.Collections.Generic.IList<byte>?
static Firebase.RemoteConfig.FirebaseRemoteConfig.GetInstance(Firebase.FirebaseApp! app) -> Firebase.RemoteConfig.FirebaseRemoteConfig!
static Firebase.RemoteConfig.FirebaseRemoteConfig.Instance.get -> Firebase.RemoteConfig.FirebaseRemoteConfig!
static Firebase.RemoteConfig.FirebaseRemoteConfigException.Code.ConfigUpdateMessageInvalid.get -> Firebase.RemoteConfig.FirebaseRemoteConfigException.Code?
static Firebase.RemoteConfig.FirebaseRemoteConfigException.Code.ConfigUpdateNotFetched.get -> Firebase.RemoteConfig.FirebaseRemoteConfigException.Code?
static Firebase.RemoteConfig.FirebaseRemoteConfigException.Code.ConfigUpdateStreamError.get -> Firebase.RemoteConfig.FirebaseRemoteConfigException.Code?
static Firebase.RemoteConfig.FirebaseRemoteConfigException.Code.ConfigUpdateUnavailable.get -> Firebase.RemoteConfig.FirebaseRemoteConfigException.Code?
static Firebase.RemoteConfig.FirebaseRemoteConfigException.Code.Unknown.get -> Firebase.RemoteConfig.FirebaseRemoteConfigException.Code?
static Firebase.RemoteConfig.FirebaseRemoteConfigException.Code.ValueOf(string? name) -> Firebase.RemoteConfig.FirebaseRemoteConfigException.Code?
static Firebase.RemoteConfig.FirebaseRemoteConfigException.Code.Values() -> Firebase.RemoteConfig.FirebaseRemoteConfigException.Code![]?
static Firebase.RemoteConfig.Internal.ConfigCacheClient.ClearInstancesForTest() -> void
static Firebase.RemoteConfig.Internal.ConfigCacheClient.GetInstance(Java.Util.Concurrent.IExecutor? executor, Firebase.RemoteConfig.Internal.ConfigStorageClient? storageClient) -> Firebase.RemoteConfig.Internal.ConfigCacheClient?
static Firebase.RemoteConfig.Internal.ConfigContainer.NewBuilder() -> Firebase.RemoteConfig.Internal.ConfigContainer.Builder?
static Firebase.RemoteConfig.Internal.ConfigContainer.NewBuilder(Firebase.RemoteConfig.Internal.ConfigContainer? otherContainer) -> Firebase.RemoteConfig.Internal.ConfigContainer.Builder?
static Firebase.RemoteConfig.Internal.ConfigFetchHandler.DefaultMinimumFetchIntervalInSeconds.get -> long
static Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchResponse.ForBackendHasNoUpdates(Java.Util.Date? fetchTime, Firebase.RemoteConfig.Internal.ConfigContainer? fetchedConfigs) -> Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchResponse?
static Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchResponse.ForBackendUpdatesFetched(Firebase.RemoteConfig.Internal.ConfigContainer? fetchedConfigs, string? lastFetchETag) -> Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchResponse?
static Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchResponse.ForLocalStorageUsed(Java.Util.Date? fetchTime) -> Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchResponse?
static Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchType.Base.get -> Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchType?
static Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchType.Realtime.get -> Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchType?
static Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchType.ValueOf(string? name) -> Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchType?
static Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchType.Values() -> Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchType![]?
static Firebase.RemoteConfig.Internal.ConfigGetParameterHandler.FrcByteArrayEncoding.get -> Java.Nio.Charset.Charset?
static Firebase.RemoteConfig.Internal.ConfigStorageClient.ClearInstancesForTest() -> void
static Firebase.RemoteConfig.Internal.ConfigStorageClient.GetInstance(Android.Content.Context? context, string? fileName) -> Firebase.RemoteConfig.Internal.ConfigStorageClient?
static Firebase.RemoteConfig.Internal.DefaultsXmlParser.GetDefaultsFromXml(Android.Content.Context? context, int resourceId) -> System.Collections.Generic.IDictionary<string!, string!>?
static Firebase.RemoteConfig.Internal.Rollouts.RolloutsStateFactory.Create(Firebase.RemoteConfig.Internal.ConfigCacheClient! activatedConfigsCache, Firebase.RemoteConfig.Internal.ConfigCacheClient! defaultConfigsCache) -> Firebase.RemoteConfig.Internal.Rollouts.RolloutsStateFactory!
static Firebase.RemoteConfig.Ktx.RemoteConfigKt.Get(Firebase.RemoteConfig.FirebaseRemoteConfig! obj, string! key) -> Firebase.RemoteConfig.IFirebaseRemoteConfigValue!
static Firebase.RemoteConfig.Ktx.RemoteConfigKt.GetConfigUpdates(Firebase.RemoteConfig.FirebaseRemoteConfig! obj) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Firebase.RemoteConfig.Ktx.RemoteConfigKt.RemoteConfigSettings(Kotlin.Jvm.Functions.IFunction1! init) -> Firebase.RemoteConfig.FirebaseRemoteConfigSettings!
static Firebase.RemoteConfig.RemoteConfigKt.CustomSignals(Kotlin.Jvm.Functions.IFunction1! builder) -> Firebase.RemoteConfig.CustomSignals!
static Firebase.RemoteConfig.RemoteConfigKt.Get(Firebase.RemoteConfig.FirebaseRemoteConfig! obj, string! key) -> Firebase.RemoteConfig.IFirebaseRemoteConfigValue!
static Firebase.RemoteConfig.RemoteConfigKt.GetConfigUpdates(Firebase.RemoteConfig.FirebaseRemoteConfig! obj) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Firebase.RemoteConfig.RemoteConfigKt.GetRemoteConfig(Firebase.Firebase! obj) -> Firebase.RemoteConfig.FirebaseRemoteConfig!
static Firebase.RemoteConfig.RemoteConfigKt.RemoteConfig(Firebase.Firebase! obj, Firebase.FirebaseApp! app) -> Firebase.RemoteConfig.FirebaseRemoteConfig!
static Firebase.RemoteConfig.RemoteConfigKt.RemoteConfigSettings(Kotlin.Jvm.Functions.IFunction1! init) -> Firebase.RemoteConfig.FirebaseRemoteConfigSettings!
virtual Firebase.RemoteConfig.CustomSignals.Builder.Build() -> Firebase.RemoteConfig.CustomSignals!
virtual Firebase.RemoteConfig.CustomSignals.Builder.Put(string! key, double value) -> Firebase.RemoteConfig.CustomSignals.Builder!
virtual Firebase.RemoteConfig.CustomSignals.Builder.Put(string! key, long value) -> Firebase.RemoteConfig.CustomSignals.Builder!
virtual Firebase.RemoteConfig.CustomSignals.Builder.Put(string! key, string? value) -> Firebase.RemoteConfig.CustomSignals.Builder!
virtual Firebase.RemoteConfig.FirebaseRemoteConfig.Activate() -> Android.Gms.Tasks.Task!
virtual Firebase.RemoteConfig.FirebaseRemoteConfig.AddOnConfigUpdateListener(Firebase.RemoteConfig.IConfigUpdateListener! configUpdateListener) -> Firebase.RemoteConfig.IConfigUpdateListenerRegistration!
virtual Firebase.RemoteConfig.FirebaseRemoteConfig.All.get -> System.Collections.Generic.IDictionary<string!, Firebase.RemoteConfig.IFirebaseRemoteConfigValue!>!
virtual Firebase.RemoteConfig.FirebaseRemoteConfig.EnsureInitialized() -> Android.Gms.Tasks.Task!
virtual Firebase.RemoteConfig.FirebaseRemoteConfig.Fetch() -> Android.Gms.Tasks.Task!
virtual Firebase.RemoteConfig.FirebaseRemoteConfig.Fetch(long minimumFetchIntervalInSeconds) -> Android.Gms.Tasks.Task!
virtual Firebase.RemoteConfig.FirebaseRemoteConfig.FetchAndActivate() -> Android.Gms.Tasks.Task!
virtual Firebase.RemoteConfig.FirebaseRemoteConfig.GetBoolean(string! key) -> bool
virtual Firebase.RemoteConfig.FirebaseRemoteConfig.GetDouble(string! key) -> double
virtual Firebase.RemoteConfig.FirebaseRemoteConfig.GetKeysByPrefix(string! prefix) -> System.Collections.Generic.ICollection<string!>!
virtual Firebase.RemoteConfig.FirebaseRemoteConfig.GetLong(string! key) -> long
virtual Firebase.RemoteConfig.FirebaseRemoteConfig.GetString(string! key) -> string!
virtual Firebase.RemoteConfig.FirebaseRemoteConfig.GetValue(string! key) -> Firebase.RemoteConfig.IFirebaseRemoteConfigValue!
virtual Firebase.RemoteConfig.FirebaseRemoteConfig.Info.get -> Firebase.RemoteConfig.IFirebaseRemoteConfigInfo!
virtual Firebase.RemoteConfig.FirebaseRemoteConfig.Reset() -> Android.Gms.Tasks.Task!
virtual Firebase.RemoteConfig.FirebaseRemoteConfig.Schedule(Java.Lang.IRunnable? runnable) -> void
virtual Firebase.RemoteConfig.FirebaseRemoteConfig.SetConfigSettingsAsync(Firebase.RemoteConfig.FirebaseRemoteConfigSettings! settings) -> Android.Gms.Tasks.Task!
virtual Firebase.RemoteConfig.FirebaseRemoteConfig.SetCustomSignals(Firebase.RemoteConfig.CustomSignals! customSignals) -> Android.Gms.Tasks.Task!
virtual Firebase.RemoteConfig.FirebaseRemoteConfig.SetDefaultsAsync(System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>! defaults) -> Android.Gms.Tasks.Task!
virtual Firebase.RemoteConfig.FirebaseRemoteConfig.SetDefaultsAsync(int resourceId) -> Android.Gms.Tasks.Task!
virtual Firebase.RemoteConfig.FirebaseRemoteConfigException.GetCode() -> Firebase.RemoteConfig.FirebaseRemoteConfigException.Code!
virtual Firebase.RemoteConfig.FirebaseRemoteConfigFetchThrottledException.ThrottleEndTimeMillis.get -> long
virtual Firebase.RemoteConfig.FirebaseRemoteConfigServerException.HttpStatusCode.get -> int
virtual Firebase.RemoteConfig.FirebaseRemoteConfigSettings.Builder.Build() -> Firebase.RemoteConfig.FirebaseRemoteConfigSettings!
virtual Firebase.RemoteConfig.FirebaseRemoteConfigSettings.Builder.FetchTimeoutInSeconds.get -> long
virtual Firebase.RemoteConfig.FirebaseRemoteConfigSettings.Builder.MinimumFetchIntervalInSeconds.get -> long
virtual Firebase.RemoteConfig.FirebaseRemoteConfigSettings.Builder.SetFetchTimeoutInSeconds(long duration) -> Firebase.RemoteConfig.FirebaseRemoteConfigSettings.Builder!
virtual Firebase.RemoteConfig.FirebaseRemoteConfigSettings.Builder.SetMinimumFetchIntervalInSeconds(long duration) -> Firebase.RemoteConfig.FirebaseRemoteConfigSettings.Builder!
virtual Firebase.RemoteConfig.FirebaseRemoteConfigSettings.FetchTimeoutInSeconds.get -> long
virtual Firebase.RemoteConfig.FirebaseRemoteConfigSettings.MinimumFetchIntervalInSeconds.get -> long
virtual Firebase.RemoteConfig.FirebaseRemoteConfigSettings.ToBuilder() -> Firebase.RemoteConfig.FirebaseRemoteConfigSettings.Builder!
virtual Firebase.RemoteConfig.Internal.ConfigAutoFetch.FetchLatestConfig(int remainingAttempts, long targetVersion) -> Android.Gms.Tasks.Task?
virtual Firebase.RemoteConfig.Internal.ConfigAutoFetch.ListenForNotifications() -> void
virtual Firebase.RemoteConfig.Internal.ConfigAutoFetch.SetIsInBackground(bool isInBackground) -> void
virtual Firebase.RemoteConfig.Internal.ConfigCacheClient.Blocking.get -> Firebase.RemoteConfig.Internal.ConfigContainer?
virtual Firebase.RemoteConfig.Internal.ConfigCacheClient.Clear() -> void
virtual Firebase.RemoteConfig.Internal.ConfigCacheClient.Get() -> Android.Gms.Tasks.Task?
virtual Firebase.RemoteConfig.Internal.ConfigCacheClient.Put(Firebase.RemoteConfig.Internal.ConfigContainer? configContainer) -> Android.Gms.Tasks.Task?
virtual Firebase.RemoteConfig.Internal.ConfigCacheClient.Put(Firebase.RemoteConfig.Internal.ConfigContainer? configContainer, bool shouldUpdateInMemoryContainer) -> Android.Gms.Tasks.Task?
virtual Firebase.RemoteConfig.Internal.ConfigContainer.AbtExperiments.get -> Org.Json.JSONArray?
virtual Firebase.RemoteConfig.Internal.ConfigContainer.Builder.Build() -> Firebase.RemoteConfig.Internal.ConfigContainer?
virtual Firebase.RemoteConfig.Internal.ConfigContainer.Builder.ReplaceConfigsWith(Org.Json.JSONObject? configsJson) -> Firebase.RemoteConfig.Internal.ConfigContainer.Builder?
virtual Firebase.RemoteConfig.Internal.ConfigContainer.Builder.ReplaceConfigsWith(System.Collections.Generic.IDictionary<string!, string!>? configsMap) -> Firebase.RemoteConfig.Internal.ConfigContainer.Builder?
virtual Firebase.RemoteConfig.Internal.ConfigContainer.Builder.WithAbtExperiments(Org.Json.JSONArray? abtExperiments) -> Firebase.RemoteConfig.Internal.ConfigContainer.Builder?
virtual Firebase.RemoteConfig.Internal.ConfigContainer.Builder.WithFetchTime(Java.Util.Date? fetchTime) -> Firebase.RemoteConfig.Internal.ConfigContainer.Builder?
virtual Firebase.RemoteConfig.Internal.ConfigContainer.Builder.WithPersonalizationMetadata(Org.Json.JSONObject? personalizationMetadata) -> Firebase.RemoteConfig.Internal.ConfigContainer.Builder?
virtual Firebase.RemoteConfig.Internal.ConfigContainer.Builder.WithRolloutMetadata(Org.Json.JSONArray? rolloutMetadata) -> Firebase.RemoteConfig.Internal.ConfigContainer.Builder?
virtual Firebase.RemoteConfig.Internal.ConfigContainer.Builder.WithTemplateVersionNumber(long templateVersionNumber) -> Firebase.RemoteConfig.Internal.ConfigContainer.Builder?
virtual Firebase.RemoteConfig.Internal.ConfigContainer.Configs.get -> Org.Json.JSONObject?
virtual Firebase.RemoteConfig.Internal.ConfigContainer.FetchTime.get -> Java.Util.Date?
virtual Firebase.RemoteConfig.Internal.ConfigContainer.GetChangedParams(Firebase.RemoteConfig.Internal.ConfigContainer? other) -> System.Collections.Generic.ICollection<string!>?
virtual Firebase.RemoteConfig.Internal.ConfigContainer.PersonalizationMetadata.get -> Org.Json.JSONObject?
virtual Firebase.RemoteConfig.Internal.ConfigContainer.RolloutMetadata.get -> Org.Json.JSONArray?
virtual Firebase.RemoteConfig.Internal.ConfigContainer.TemplateVersionNumber.get -> long
virtual Firebase.RemoteConfig.Internal.ConfigFetchHandler.AnalyticsConnector.get -> Firebase.Inject.IProvider?
virtual Firebase.RemoteConfig.Internal.ConfigFetchHandler.Fetch() -> Android.Gms.Tasks.Task?
virtual Firebase.RemoteConfig.Internal.ConfigFetchHandler.Fetch(long minimumFetchIntervalInSeconds) -> Android.Gms.Tasks.Task?
virtual Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchNowWithTypeAndAttemptNumber(Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchType? fetchType, int fetchAttemptNumber) -> Android.Gms.Tasks.Task?
virtual Firebase.RemoteConfig.Internal.ConfigFetchHandler.FetchResponse.FetchedConfigs.get -> Firebase.RemoteConfig.Internal.ConfigContainer?
virtual Firebase.RemoteConfig.Internal.ConfigFetchHandler.TemplateVersionNumber.get -> long
virtual Firebase.RemoteConfig.Internal.ConfigFetchHttpClient.ConnectTimeoutInSeconds.get -> long
virtual Firebase.RemoteConfig.Internal.ConfigFetchHttpClient.ReadTimeoutInSeconds.get -> long
virtual Firebase.RemoteConfig.Internal.ConfigGetParameterHandler.AddListener(Android.Gms.Common.Util.IBiConsumer? listener) -> void
virtual Firebase.RemoteConfig.Internal.ConfigGetParameterHandler.All.get -> System.Collections.Generic.IDictionary<string!, Firebase.RemoteConfig.IFirebaseRemoteConfigValue!>?
virtual Firebase.RemoteConfig.Internal.ConfigGetParameterHandler.GetBoolean(string? key) -> bool
virtual Firebase.RemoteConfig.Internal.ConfigGetParameterHandler.GetByteArray(string? key) -> byte[]?
virtual Firebase.RemoteConfig.Internal.ConfigGetParameterHandler.GetDouble(string? key) -> double
virtual Firebase.RemoteConfig.Internal.ConfigGetParameterHandler.GetKeysByPrefix(string? prefix) -> System.Collections.Generic.ICollection<string!>?
virtual Firebase.RemoteConfig.Internal.ConfigGetParameterHandler.GetLong(string? key) -> long
virtual Firebase.RemoteConfig.Internal.ConfigGetParameterHandler.GetString(string? key) -> string?
virtual Firebase.RemoteConfig.Internal.ConfigGetParameterHandler.GetValue(string? key) -> Firebase.RemoteConfig.IFirebaseRemoteConfigValue?
virtual Firebase.RemoteConfig.Internal.ConfigRealtimeHandler.AddRealtimeConfigUpdateListener(Firebase.RemoteConfig.IConfigUpdateListener! configUpdateListener) -> Firebase.RemoteConfig.IConfigUpdateListenerRegistration!
virtual Firebase.RemoteConfig.Internal.ConfigRealtimeHandler.ConfigUpdateListenerRegistrationInternal.Remove() -> void
virtual Firebase.RemoteConfig.Internal.ConfigRealtimeHandler.SetBackgroundState(bool isInBackground) -> void
virtual Firebase.RemoteConfig.Internal.ConfigRealtimeHttpClient.BackoffEndTime.get -> Java.Util.Date?
virtual Firebase.RemoteConfig.Internal.ConfigRealtimeHttpClient.BeginRealtimeHttpStream() -> void
virtual Firebase.RemoteConfig.Internal.ConfigRealtimeHttpClient.CloseRealtimeHttpConnection(System.IO.Stream? inputStream, System.IO.Stream? errorStream) -> void
virtual Firebase.RemoteConfig.Internal.ConfigRealtimeHttpClient.CreateRealtimeConnection() -> Android.Gms.Tasks.Task?
virtual Firebase.RemoteConfig.Internal.ConfigRealtimeHttpClient.NumberOfFailedStreams.get -> int
virtual Firebase.RemoteConfig.Internal.ConfigRealtimeHttpClient.RetryHttpConnectionWhenBackoffEnds() -> void
virtual Firebase.RemoteConfig.Internal.ConfigRealtimeHttpClient.SetIsInBackground(bool isInBackground) -> void
virtual Firebase.RemoteConfig.Internal.ConfigRealtimeHttpClient.SetRequestParams(Java.Net.HttpURLConnection? httpURLConnection, string? installationId, string? authtoken) -> void
virtual Firebase.RemoteConfig.Internal.ConfigRealtimeHttpClient.StartAutoFetch(Java.Net.HttpURLConnection? httpURLConnection) -> Firebase.RemoteConfig.Internal.ConfigAutoFetch?
virtual Firebase.RemoteConfig.Internal.ConfigRealtimeHttpClient.StartHttpConnection() -> void
virtual Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.Clear() -> void
virtual Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.CustomSignals.get -> System.Collections.Generic.IDictionary<string!, string!>?
virtual Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.CustomSignals.set -> void
virtual Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.FetchTimeoutInSeconds.get -> long
virtual Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.GetRealtimeBackoffMetadata() -> Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.RealtimeBackoffMetadata?
virtual Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.Info.get -> Firebase.RemoteConfig.IFirebaseRemoteConfigInfo?
virtual Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.MinimumFetchIntervalInSeconds.get -> long
virtual Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.SetConfigSettings(Firebase.RemoteConfig.FirebaseRemoteConfigSettings? settings) -> void
virtual Firebase.RemoteConfig.Internal.ConfigSharedPrefsClient.SetConfigSettingsWithoutWaitingOnDiskWrite(Firebase.RemoteConfig.FirebaseRemoteConfigSettings? settings) -> void
virtual Firebase.RemoteConfig.Internal.ConfigStorageClient.Clear() -> Java.Lang.Void?
virtual Firebase.RemoteConfig.Internal.ConfigStorageClient.Read() -> Firebase.RemoteConfig.Internal.ConfigContainer?
virtual Firebase.RemoteConfig.Internal.ConfigStorageClient.Write(Firebase.RemoteConfig.Internal.ConfigContainer? container) -> Java.Lang.Void?
virtual Firebase.RemoteConfig.Internal.FirebaseRemoteConfigInfoImpl.Builder.Build() -> Firebase.RemoteConfig.Internal.FirebaseRemoteConfigInfoImpl?
virtual Firebase.RemoteConfig.Internal.FirebaseRemoteConfigInfoImpl.Builder.WithLastSuccessfulFetchTimeInMillis(long fetchTimeInMillis) -> Firebase.RemoteConfig.Internal.FirebaseRemoteConfigInfoImpl.Builder?
virtual Firebase.RemoteConfig.Internal.FirebaseRemoteConfigInfoImpl.ConfigSettings.get -> Firebase.RemoteConfig.FirebaseRemoteConfigSettings?
virtual Firebase.RemoteConfig.Internal.FirebaseRemoteConfigInfoImpl.FetchTimeMillis.get -> long
virtual Firebase.RemoteConfig.Internal.FirebaseRemoteConfigInfoImpl.LastFetchStatus.get -> int
virtual Firebase.RemoteConfig.Internal.FirebaseRemoteConfigValueImpl.AsBoolean() -> bool
virtual Firebase.RemoteConfig.Internal.FirebaseRemoteConfigValueImpl.AsByteArray() -> byte[]?
virtual Firebase.RemoteConfig.Internal.FirebaseRemoteConfigValueImpl.AsDouble() -> double
virtual Firebase.RemoteConfig.Internal.FirebaseRemoteConfigValueImpl.AsLong() -> long
virtual Firebase.RemoteConfig.Internal.FirebaseRemoteConfigValueImpl.AsString() -> string?
virtual Firebase.RemoteConfig.Internal.FirebaseRemoteConfigValueImpl.Source.get -> int
virtual Firebase.RemoteConfig.Internal.Personalization.LogArmActive(string! rcParameter, Firebase.RemoteConfig.Internal.ConfigContainer! configContainer) -> void
virtual Firebase.RemoteConfig.Internal.Rollouts.RolloutsStateSubscriptionsHandler.PublishActiveRolloutsState(Firebase.RemoteConfig.Internal.ConfigContainer! configContainer) -> void
virtual Firebase.RemoteConfig.Internal.Rollouts.RolloutsStateSubscriptionsHandler.RegisterRolloutsStateSubscriber(Firebase.RemoteConfig.InterOp.Rollouts.IRolloutsStateSubscriber! subscriber) -> void
virtual Firebase.RemoteConfig.RemoteConfigComponent.Get(string? namespace) -> Firebase.RemoteConfig.FirebaseRemoteConfig?
virtual Firebase.RemoteConfig.RemoteConfigComponent.RegisterRolloutsStateSubscriber(string! namespace, Firebase.RemoteConfig.InterOp.Rollouts.IRolloutsStateSubscriber! subscriber) -> void
virtual Firebase.RemoteConfig.RemoteConfigComponent.SetCustomHeaders(System.Collections.Generic.IDictionary<string!, string!>? customHeaders) -> void
virtual Firebase.RemoteConfig.RemoteConfigRegistrar.Components.get -> System.Collections.Generic.IList<Firebase.Components.Component!>?
