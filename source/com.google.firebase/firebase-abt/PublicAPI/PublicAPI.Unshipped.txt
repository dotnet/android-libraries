#nullable enable
Firebase.Abt.AbtException
Firebase.Abt.AbtException.AbtException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Abt.AbtException.AbtException(string? message) -> void
Firebase.Abt.AbtException.AbtException(string? message, Java.Lang.Exception? cause) -> void
Firebase.Abt.AbtExperimentInfo
Firebase.Abt.AbtExperimentInfo.AbtExperimentInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Abt.AbtExperimentInfo.AbtExperimentInfo(string? experimentId, string? variantId, string? triggerEventName, Java.Util.Date? experimentStartTime, long triggerTimeoutInMillis, long timeToLiveInMillis) -> void
Firebase.Abt.BuildConfig
Firebase.Abt.BuildConfig.BuildConfig() -> void
Firebase.Abt.Component.AbtComponent
Firebase.Abt.Component.AbtComponent.AbtComponent(Android.Content.Context? appContext, Firebase.Inject.IProvider? analyticsConnector) -> void
Firebase.Abt.Component.AbtComponent.AbtComponent(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Abt.Component.AbtRegistrar
Firebase.Abt.Component.AbtRegistrar.AbtRegistrar() -> void
Firebase.Abt.Component.AbtRegistrar.AbtRegistrar(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Abt.FirebaseABTesting
Firebase.Abt.FirebaseABTesting.FirebaseABTesting(Android.Content.Context? unusedAppContext, Firebase.Inject.IProvider? analyticsConnector, string? originService) -> void
Firebase.Abt.FirebaseABTesting.FirebaseABTesting(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Abt.FirebaseABTesting.IOriginService
Firebase.Abt.FirebaseABTesting.OriginService
Firebase.Abt.FirebaseABTesting.OriginServiceConsts
const Firebase.Abt.BuildConfig.BuildType = "release" -> string!
const Firebase.Abt.BuildConfig.Debug = false -> bool
const Firebase.Abt.BuildConfig.LibraryPackageName = "com.google.firebase.abt" -> string!
const Firebase.Abt.BuildConfig.VersionName = "23.0.0" -> string!
const Firebase.Abt.FirebaseABTesting.OriginService.InappMessaging = "fiam" -> string!
const Firebase.Abt.FirebaseABTesting.OriginService.RemoteConfig = "frc" -> string!
override Firebase.Abt.AbtException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Abt.AbtException.ThresholdClass.get -> nint
override Firebase.Abt.AbtException.ThresholdType.get -> System.Type!
override Firebase.Abt.AbtExperimentInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Abt.AbtExperimentInfo.ThresholdClass.get -> nint
override Firebase.Abt.AbtExperimentInfo.ThresholdType.get -> System.Type!
override Firebase.Abt.BuildConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Abt.Component.AbtComponent.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Abt.Component.AbtComponent.ThresholdClass.get -> nint
override Firebase.Abt.Component.AbtComponent.ThresholdType.get -> System.Type!
override Firebase.Abt.Component.AbtRegistrar.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Abt.Component.AbtRegistrar.ThresholdClass.get -> nint
override Firebase.Abt.Component.AbtRegistrar.ThresholdType.get -> System.Type!
override Firebase.Abt.FirebaseABTesting.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Abt.FirebaseABTesting.ThresholdClass.get -> nint
override Firebase.Abt.FirebaseABTesting.ThresholdType.get -> System.Type!
virtual Firebase.Abt.Component.AbtComponent.CreateAbtInstance(string? originService) -> Firebase.Abt.FirebaseABTesting?
virtual Firebase.Abt.Component.AbtComponent.Get(string? originService) -> Firebase.Abt.FirebaseABTesting?
virtual Firebase.Abt.Component.AbtRegistrar.Components.get -> System.Collections.Generic.IList<Firebase.Components.Component!>?
virtual Firebase.Abt.FirebaseABTesting.AllExperiments.get -> System.Collections.Generic.IList<Firebase.Abt.AbtExperimentInfo!>?
virtual Firebase.Abt.FirebaseABTesting.RemoveAllExperiments() -> void
virtual Firebase.Abt.FirebaseABTesting.ReplaceAllExperiments(System.Collections.Generic.IList<System.Collections.Generic.IDictionary<string!, string!>!>? replacementExperiments) -> void
virtual Firebase.Abt.FirebaseABTesting.ReportActiveExperiment(Firebase.Abt.AbtExperimentInfo? activeExperiment) -> void
virtual Firebase.Abt.FirebaseABTesting.ValidateRunningExperiments(System.Collections.Generic.IList<Firebase.Abt.AbtExperimentInfo!>? runningExperiments) -> void
