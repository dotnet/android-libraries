#nullable enable
Firebase.Database.Android.AndroidAppCheckTokenProvider
Firebase.Database.Android.AndroidAppCheckTokenProvider.AndroidAppCheckTokenProvider(Firebase.Inject.IDeferred? deferredAppCheckProvider) -> void
Firebase.Database.Android.AndroidAppCheckTokenProvider.AndroidAppCheckTokenProvider(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Android.AndroidAuthTokenProvider
Firebase.Database.Android.AndroidAuthTokenProvider.AndroidAuthTokenProvider(Firebase.Inject.IDeferred? deferredAuthProvider) -> void
Firebase.Database.Android.AndroidAuthTokenProvider.AndroidAuthTokenProvider(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Android.AndroidEventTarget
Firebase.Database.Android.AndroidEventTarget.AndroidEventTarget() -> void
Firebase.Database.Android.AndroidEventTarget.AndroidEventTarget(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Android.AndroidPlatform
Firebase.Database.Android.AndroidPlatform.AndroidPlatform(Firebase.FirebaseApp? app) -> void
Firebase.Database.Android.AndroidPlatform.AndroidPlatform(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Android.SqlPersistenceStorageEngine
Firebase.Database.Android.SqlPersistenceStorageEngine.SqlPersistenceStorageEngine(Android.Content.Context? context, Firebase.Database.Core.Context? firebaseContext, string? cacheId) -> void
Firebase.Database.Android.SqlPersistenceStorageEngine.SqlPersistenceStorageEngine(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Annotations.INotNull
Firebase.Database.Annotations.INotNull.Value() -> string?
Firebase.Database.Annotations.INullable
Firebase.Database.Annotations.INullable.Value() -> string?
Firebase.Database.Annotations.NotNullAttribute
Firebase.Database.Annotations.NotNullAttribute.NotNullAttribute() -> void
Firebase.Database.Annotations.NotNullAttribute.Value.get -> string?
Firebase.Database.Annotations.NotNullAttribute.Value.set -> void
Firebase.Database.Annotations.NullableAttribute
Firebase.Database.Annotations.NullableAttribute.NullableAttribute() -> void
Firebase.Database.Annotations.NullableAttribute.Value.get -> string?
Firebase.Database.Annotations.NullableAttribute.Value.set -> void
Firebase.Database.BuildConfig
Firebase.Database.BuildConfig.BuildConfig() -> void
Firebase.Database.ChildAddedEventArgs
Firebase.Database.ChildAddedEventArgs.ChildAddedEventArgs(Firebase.Database.DataSnapshot! snapshot, string? previousChildName) -> void
Firebase.Database.ChildAddedEventArgs.PreviousChildName.get -> string?
Firebase.Database.ChildAddedEventArgs.Snapshot.get -> Firebase.Database.DataSnapshot!
Firebase.Database.ChildChangedEventArgs
Firebase.Database.ChildChangedEventArgs.ChildChangedEventArgs(Firebase.Database.DataSnapshot! snapshot, string? previousChildName) -> void
Firebase.Database.ChildChangedEventArgs.PreviousChildName.get -> string?
Firebase.Database.ChildChangedEventArgs.Snapshot.get -> Firebase.Database.DataSnapshot!
Firebase.Database.ChildEvent
Firebase.Database.ChildEvent.Added
Firebase.Database.ChildEvent.Added.Added(Firebase.Database.DataSnapshot! snapshot, string? previousChildName) -> void
Firebase.Database.ChildEvent.Added.Component1() -> Firebase.Database.DataSnapshot!
Firebase.Database.ChildEvent.Added.Component2() -> string?
Firebase.Database.ChildEvent.Added.Copy(Firebase.Database.DataSnapshot! snapshot, string? previousChildName) -> Firebase.Database.ChildEvent.Added!
Firebase.Database.ChildEvent.Added.PreviousChildName.get -> string?
Firebase.Database.ChildEvent.Added.Snapshot.get -> Firebase.Database.DataSnapshot!
Firebase.Database.ChildEvent.Changed
Firebase.Database.ChildEvent.Changed.Changed(Firebase.Database.DataSnapshot! snapshot, string? previousChildName) -> void
Firebase.Database.ChildEvent.Changed.Component1() -> Firebase.Database.DataSnapshot!
Firebase.Database.ChildEvent.Changed.Component2() -> string?
Firebase.Database.ChildEvent.Changed.Copy(Firebase.Database.DataSnapshot! snapshot, string? previousChildName) -> Firebase.Database.ChildEvent.Changed!
Firebase.Database.ChildEvent.Changed.PreviousChildName.get -> string?
Firebase.Database.ChildEvent.Changed.Snapshot.get -> Firebase.Database.DataSnapshot!
Firebase.Database.ChildEvent.ChildEvent(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.ChildEvent.Moved
Firebase.Database.ChildEvent.Moved.Component1() -> Firebase.Database.DataSnapshot!
Firebase.Database.ChildEvent.Moved.Component2() -> string?
Firebase.Database.ChildEvent.Moved.Copy(Firebase.Database.DataSnapshot! snapshot, string? previousChildName) -> Firebase.Database.ChildEvent.Moved!
Firebase.Database.ChildEvent.Moved.Moved(Firebase.Database.DataSnapshot! snapshot, string? previousChildName) -> void
Firebase.Database.ChildEvent.Moved.PreviousChildName.get -> string?
Firebase.Database.ChildEvent.Moved.Snapshot.get -> Firebase.Database.DataSnapshot!
Firebase.Database.ChildEvent.Removed
Firebase.Database.ChildEvent.Removed.Component1() -> Firebase.Database.DataSnapshot!
Firebase.Database.ChildEvent.Removed.Copy(Firebase.Database.DataSnapshot! snapshot) -> Firebase.Database.ChildEvent.Removed!
Firebase.Database.ChildEvent.Removed.Removed(Firebase.Database.DataSnapshot! snapshot) -> void
Firebase.Database.ChildEvent.Removed.Snapshot.get -> Firebase.Database.DataSnapshot!
Firebase.Database.ChildEventArgs
Firebase.Database.ChildEventArgs.ChildEventArgs(Firebase.Database.DatabaseError! error) -> void
Firebase.Database.ChildEventArgs.Error.get -> Firebase.Database.DatabaseError!
Firebase.Database.ChildMovedEventArgs
Firebase.Database.ChildMovedEventArgs.ChildMovedEventArgs(Firebase.Database.DataSnapshot! snapshot, string? previousChildName) -> void
Firebase.Database.ChildMovedEventArgs.PreviousChildName.get -> string?
Firebase.Database.ChildMovedEventArgs.Snapshot.get -> Firebase.Database.DataSnapshot!
Firebase.Database.ChildRemovedEventArgs
Firebase.Database.ChildRemovedEventArgs.ChildRemovedEventArgs(Firebase.Database.DataSnapshot! snapshot) -> void
Firebase.Database.ChildRemovedEventArgs.Snapshot.get -> Firebase.Database.DataSnapshot!
Firebase.Database.Connection.CompoundHash
Firebase.Database.Connection.CompoundHash.CompoundHash(System.Collections.Generic.IList<System.Collections.Generic.IList<string!>!>? posts, System.Collections.Generic.IList<string!>? hashes) -> void
Firebase.Database.Connection.CompoundHash.CompoundHash(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Connection.ConnectionContext
Firebase.Database.Connection.ConnectionContext.ConnectionContext(Firebase.Database.Logging.ILogger? logger, Firebase.Database.Connection.IConnectionTokenProvider? authTokenProvider, Firebase.Database.Connection.IConnectionTokenProvider? appCheckTokenProvider, Java.Util.Concurrent.IScheduledExecutorService? executorService, bool persistenceEnabled, string? clientSdkVersion, string? userAgent, string? applicationId, string? sslCacheDirectory) -> void
Firebase.Database.Connection.ConnectionContext.ConnectionContext(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Connection.ConnectionUtils
Firebase.Database.Connection.ConnectionUtils.ConnectionUtils() -> void
Firebase.Database.Connection.ConnectionUtils.ConnectionUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Connection.HostInfo
Firebase.Database.Connection.HostInfo.HostInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Connection.HostInfo.HostInfo(string? host, string? namespace, bool secure) -> void
Firebase.Database.Connection.IConnectionTokenProvider
Firebase.Database.Connection.IConnectionTokenProvider.GetToken(bool p0, Firebase.Database.Connection.IConnectionTokenProviderGetTokenCallback? p1) -> void
Firebase.Database.Connection.IConnectionTokenProviderGetTokenCallback
Firebase.Database.Connection.IConnectionTokenProviderGetTokenCallback.OnError(string? p0) -> void
Firebase.Database.Connection.IConnectionTokenProviderGetTokenCallback.OnSuccess(string? p0) -> void
Firebase.Database.Connection.IListenHashProvider
Firebase.Database.Connection.IListenHashProvider.CompoundHash.get -> Firebase.Database.Connection.CompoundHash?
Firebase.Database.Connection.IListenHashProvider.ShouldIncludeCompoundHash() -> bool
Firebase.Database.Connection.IListenHashProvider.SimpleHash.get -> string?
Firebase.Database.Connection.IPersistentConnection
Firebase.Database.Connection.IPersistentConnection.CompareAndPut(System.Collections.Generic.IList<string!>? p0, Java.Lang.Object? p1, string? p2, Firebase.Database.Connection.IRequestResultCallback? p3) -> void
Firebase.Database.Connection.IPersistentConnection.Get(System.Collections.Generic.IList<string!>? p0, System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? p1) -> Android.Gms.Tasks.Task?
Firebase.Database.Connection.IPersistentConnection.Initialize() -> void
Firebase.Database.Connection.IPersistentConnection.Interrupt(string? p0) -> void
Firebase.Database.Connection.IPersistentConnection.IsInterrupted(string? p0) -> bool
Firebase.Database.Connection.IPersistentConnection.Listen(System.Collections.Generic.IList<string!>? p0, System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? p1, Firebase.Database.Connection.IListenHashProvider? p2, Java.Lang.Long? p3, Firebase.Database.Connection.IRequestResultCallback? p4) -> void
Firebase.Database.Connection.IPersistentConnection.Merge(System.Collections.Generic.IList<string!>? p0, System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? p1, Firebase.Database.Connection.IRequestResultCallback? p2) -> void
Firebase.Database.Connection.IPersistentConnection.OnDisconnectCancel(System.Collections.Generic.IList<string!>? p0, Firebase.Database.Connection.IRequestResultCallback? p1) -> void
Firebase.Database.Connection.IPersistentConnection.OnDisconnectMerge(System.Collections.Generic.IList<string!>? p0, System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? p1, Firebase.Database.Connection.IRequestResultCallback? p2) -> void
Firebase.Database.Connection.IPersistentConnection.OnDisconnectPut(System.Collections.Generic.IList<string!>? p0, Java.Lang.Object? p1, Firebase.Database.Connection.IRequestResultCallback? p2) -> void
Firebase.Database.Connection.IPersistentConnection.PurgeOutstandingWrites() -> void
Firebase.Database.Connection.IPersistentConnection.Put(System.Collections.Generic.IList<string!>? p0, Java.Lang.Object? p1, Firebase.Database.Connection.IRequestResultCallback? p2) -> void
Firebase.Database.Connection.IPersistentConnection.RefreshAppCheckToken() -> void
Firebase.Database.Connection.IPersistentConnection.RefreshAppCheckToken(string? p0) -> void
Firebase.Database.Connection.IPersistentConnection.RefreshAuthToken() -> void
Firebase.Database.Connection.IPersistentConnection.RefreshAuthToken(string? p0) -> void
Firebase.Database.Connection.IPersistentConnection.Resume(string? p0) -> void
Firebase.Database.Connection.IPersistentConnection.Shutdown() -> void
Firebase.Database.Connection.IPersistentConnection.Unlisten(System.Collections.Generic.IList<string!>? p0, System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? p1) -> void
Firebase.Database.Connection.IPersistentConnectionDelegate
Firebase.Database.Connection.IPersistentConnectionDelegate.OnConnect() -> void
Firebase.Database.Connection.IPersistentConnectionDelegate.OnConnectionStatus(bool p0) -> void
Firebase.Database.Connection.IPersistentConnectionDelegate.OnDataUpdate(System.Collections.Generic.IList<string!>? p0, Java.Lang.Object? p1, bool p2, Java.Lang.Long? p3) -> void
Firebase.Database.Connection.IPersistentConnectionDelegate.OnDisconnect() -> void
Firebase.Database.Connection.IPersistentConnectionDelegate.OnRangeMergeUpdate(System.Collections.Generic.IList<string!>? p0, System.Collections.Generic.IList<Firebase.Database.Connection.RangeMerge!>? p1, Java.Lang.Long? p2) -> void
Firebase.Database.Connection.IPersistentConnectionDelegate.OnServerInfoUpdate(System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? p0) -> void
Firebase.Database.Connection.IRequestResultCallback
Firebase.Database.Connection.IRequestResultCallback.OnRequestResult(string? p0, string? p1) -> void
Firebase.Database.Connection.PersistentConnectionImpl
Firebase.Database.Connection.PersistentConnectionImpl.PersistentConnectionImpl(Firebase.Database.Connection.ConnectionContext? context, Firebase.Database.Connection.HostInfo? info, Firebase.Database.Connection.IPersistentConnectionDelegate? delegate) -> void
Firebase.Database.Connection.PersistentConnectionImpl.PersistentConnectionImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Connection.RangeMerge
Firebase.Database.Connection.RangeMerge.RangeMerge(System.Collections.Generic.IList<string!>? optExclusiveStart, System.Collections.Generic.IList<string!>? optInclusiveEnd, Java.Lang.Object? snap) -> void
Firebase.Database.Connection.RangeMerge.RangeMerge(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Connection.Util.RetryHelper
Firebase.Database.Connection.Util.RetryHelper.Builder
Firebase.Database.Connection.Util.RetryHelper.Builder.Builder(Java.Util.Concurrent.IScheduledExecutorService? service, Firebase.Database.Logging.ILogger? logger, string? tag) -> void
Firebase.Database.Connection.Util.RetryHelper.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Connection.Util.RetryHelper.RetryHelper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Connection.Util.StringListReader
Firebase.Database.Connection.Util.StringListReader.StringListReader() -> void
Firebase.Database.Connection.Util.StringListReader.StringListReader(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.ChildEventRegistration
Firebase.Database.Core.ChildEventRegistration.ChildEventRegistration(Firebase.Database.Core.Repo? repo, Firebase.Database.IChildEventListener? eventListener, Firebase.Database.Core.View.QuerySpec? spec) -> void
Firebase.Database.Core.ChildEventRegistration.ChildEventRegistration(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.CompoundWrite
Firebase.Database.Core.CompoundWrite.AddWrite(Firebase.Database.Core.Path? path, Firebase.Database.Snapshot.INode? node) -> Firebase.Database.Core.CompoundWrite?
Firebase.Database.Core.CompoundWrite.AddWrite(Firebase.Database.Snapshot.ChildKey? key, Firebase.Database.Snapshot.INode? node) -> Firebase.Database.Core.CompoundWrite?
Firebase.Database.Core.CompoundWrite.AddWrites(Firebase.Database.Core.Path? path, Firebase.Database.Core.CompoundWrite? updates) -> Firebase.Database.Core.CompoundWrite?
Firebase.Database.Core.CompoundWrite.Apply(Firebase.Database.Snapshot.INode? node) -> Firebase.Database.Snapshot.INode?
Firebase.Database.Core.CompoundWrite.ChildCompoundWrite(Firebase.Database.Core.Path? path) -> Firebase.Database.Core.CompoundWrite?
Firebase.Database.Core.CompoundWrite.ChildCompoundWrites() -> System.Collections.Generic.IDictionary<Firebase.Database.Snapshot.ChildKey!, Firebase.Database.Core.CompoundWrite!>?
Firebase.Database.Core.CompoundWrite.CompleteChildren.get -> System.Collections.Generic.IList<Firebase.Database.Snapshot.NamedNode!>?
Firebase.Database.Core.CompoundWrite.GetCompleteNode(Firebase.Database.Core.Path? path) -> Firebase.Database.Snapshot.INode?
Firebase.Database.Core.CompoundWrite.GetValue(bool exportFormat) -> System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>?
Firebase.Database.Core.CompoundWrite.HasCompleteWrite(Firebase.Database.Core.Path? path) -> bool
Firebase.Database.Core.CompoundWrite.IsEmpty.get -> bool
Firebase.Database.Core.CompoundWrite.Iterator() -> Java.Util.IIterator?
Firebase.Database.Core.CompoundWrite.RemoveWrite(Firebase.Database.Core.Path? path) -> Firebase.Database.Core.CompoundWrite?
Firebase.Database.Core.CompoundWrite.RootWrite() -> Firebase.Database.Snapshot.INode?
Firebase.Database.Core.Constants
Firebase.Database.Core.Constants.Constants() -> void
Firebase.Database.Core.Constants.Constants(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Context
Firebase.Database.Core.Context.CacheSize.get -> long
Firebase.Database.Core.Context.CacheSize.set -> void
Firebase.Database.Core.Context.Context() -> void
Firebase.Database.Core.Context.Context(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Context.FirebaseApp.get -> Firebase.FirebaseApp?
Firebase.Database.Core.Context.FirebaseApp.set -> void
Firebase.Database.Core.Context.LoggedComponents.get -> System.Collections.IList?
Firebase.Database.Core.Context.LoggedComponents.set -> void
Firebase.Database.Core.Context.PersistenceEnabled.get -> bool
Firebase.Database.Core.Context.PersistenceEnabled.set -> void
Firebase.Database.Core.Context.PersistenceKey.get -> string?
Firebase.Database.Core.Context.PersistenceKey.set -> void
Firebase.Database.Core.DatabaseConfig
Firebase.Database.Core.DatabaseConfig.DatabaseConfig() -> void
Firebase.Database.Core.DatabaseConfig.DatabaseConfig(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.ErrorEventArgs
Firebase.Database.Core.ErrorEventArgs.ErrorEventArgs(string? p0) -> void
Firebase.Database.Core.ErrorEventArgs.P0.get -> string?
Firebase.Database.Core.EventRegistration
Firebase.Database.Core.EventRegistration.EventRegistration() -> void
Firebase.Database.Core.EventRegistration.EventRegistration(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.EventRegistration.Zombied -> System.EventHandler<Firebase.Database.Core.EventRegistrationZombieEventArgs!>!
Firebase.Database.Core.EventRegistrationZombieEventArgs
Firebase.Database.Core.EventRegistrationZombieEventArgs.EventRegistrationZombieEventArgs(Firebase.Database.Core.EventRegistration? p0) -> void
Firebase.Database.Core.EventRegistrationZombieEventArgs.P0.get -> Firebase.Database.Core.EventRegistration?
Firebase.Database.Core.IEventRegistrationZombieListener
Firebase.Database.Core.IEventRegistrationZombieListener.OnZombied(Firebase.Database.Core.EventRegistration? p0) -> void
Firebase.Database.Core.IEventTarget
Firebase.Database.Core.IEventTarget.PostEvent(Java.Lang.IRunnable? p0) -> void
Firebase.Database.Core.IEventTarget.Restart() -> void
Firebase.Database.Core.IEventTarget.Shutdown() -> void
Firebase.Database.Core.IPlatform
Firebase.Database.Core.IPlatform.CreatePersistenceManager(Firebase.Database.Core.Context? p0, string? p1) -> Firebase.Database.Core.Persistence.IPersistenceManager?
Firebase.Database.Core.IPlatform.GetUserAgent(Firebase.Database.Core.Context? p0) -> string?
Firebase.Database.Core.IPlatform.NewEventTarget(Firebase.Database.Core.Context? p0) -> Firebase.Database.Core.IEventTarget?
Firebase.Database.Core.IPlatform.NewLogger(Firebase.Database.Core.Context? p0, Firebase.Database.Logging.LoggerLevel? p1, System.Collections.Generic.IList<string!>? p2) -> Firebase.Database.Logging.ILogger?
Firebase.Database.Core.IPlatform.NewPersistentConnection(Firebase.Database.Core.Context? p0, Firebase.Database.Connection.ConnectionContext? p1, Firebase.Database.Connection.HostInfo? p2, Firebase.Database.Connection.IPersistentConnectionDelegate? p3) -> Firebase.Database.Connection.IPersistentConnection?
Firebase.Database.Core.IPlatform.NewRunLoop(Firebase.Database.Core.Context? p0) -> Firebase.Database.Core.IRunLoop?
Firebase.Database.Core.IPlatform.PlatformVersion.get -> string?
Firebase.Database.Core.IPlatform.SSLCacheDirectory.get -> Java.IO.File?
Firebase.Database.Core.IRunLoop
Firebase.Database.Core.IRunLoop.Restart() -> void
Firebase.Database.Core.IRunLoop.Schedule(Java.Lang.IRunnable? p0, long p1) -> Java.Util.Concurrent.IScheduledFuture?
Firebase.Database.Core.IRunLoop.ScheduleNow(Java.Lang.IRunnable? p0) -> void
Firebase.Database.Core.IRunLoop.Shutdown() -> void
Firebase.Database.Core.IThreadInitializer
Firebase.Database.Core.IThreadInitializer.DefaultInstance.get -> Firebase.Database.Core.IThreadInitializer?
Firebase.Database.Core.IThreadInitializer.SetDaemon(Java.Lang.Thread? p0, bool p1) -> void
Firebase.Database.Core.IThreadInitializer.SetName(Java.Lang.Thread? p0, string? p1) -> void
Firebase.Database.Core.IThreadInitializer.SetUncaughtExceptionHandler(Java.Lang.Thread? p0, Java.Lang.Thread.IUncaughtExceptionHandler? p1) -> void
Firebase.Database.Core.ITokenProvider
Firebase.Database.Core.ITokenProvider.AddTokenChangeListener(Java.Util.Concurrent.IExecutorService? p0, Firebase.Database.Core.ITokenProviderTokenChangeListener? p1) -> void
Firebase.Database.Core.ITokenProvider.GetToken(bool p0, Firebase.Database.Core.ITokenProviderGetTokenCompletionListener? p1) -> void
Firebase.Database.Core.ITokenProvider.RemoveTokenChangeListener(Firebase.Database.Core.ITokenProviderTokenChangeListener? p0) -> void
Firebase.Database.Core.ITokenProviderGetTokenCompletionListener
Firebase.Database.Core.ITokenProviderGetTokenCompletionListener.OnError(string? p0) -> void
Firebase.Database.Core.ITokenProviderGetTokenCompletionListener.OnSuccess(string? p0) -> void
Firebase.Database.Core.ITokenProviderTokenChangeListener
Firebase.Database.Core.ITokenProviderTokenChangeListener.OnTokenChange() -> void
Firebase.Database.Core.ITokenProviderTokenChangeListener.OnTokenChangeString(string? p0) -> void
Firebase.Database.Core.Operation.AckUserWrite
Firebase.Database.Core.Operation.AckUserWrite.AckUserWrite(Firebase.Database.Core.Path? path, Firebase.Database.Core.Utilities.ImmutableTree? affectedTree, bool revert) -> void
Firebase.Database.Core.Operation.AckUserWrite.AckUserWrite(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Operation.ListenComplete
Firebase.Database.Core.Operation.ListenComplete.ListenComplete(Firebase.Database.Core.Operation.OperationSource? source, Firebase.Database.Core.Path? path) -> void
Firebase.Database.Core.Operation.ListenComplete.ListenComplete(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Operation.Merge
Firebase.Database.Core.Operation.Merge.Merge(Firebase.Database.Core.Operation.OperationSource? source, Firebase.Database.Core.Path? path, Firebase.Database.Core.CompoundWrite? children) -> void
Firebase.Database.Core.Operation.Merge.Merge(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Operation.Operation
Firebase.Database.Core.Operation.Operation.Operation(Firebase.Database.Core.Operation.Operation.OperationType? type, Firebase.Database.Core.Operation.OperationSource? source, Firebase.Database.Core.Path? path) -> void
Firebase.Database.Core.Operation.Operation.Operation(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Operation.Operation.OperationType
Firebase.Database.Core.Operation.OperationSource
Firebase.Database.Core.Operation.OperationSource.OperationSource(Java.Lang.Enum? source, Firebase.Database.Core.View.QueryParams? queryParams, bool tagged) -> void
Firebase.Database.Core.Operation.OperationSource.OperationSource(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Operation.Overwrite
Firebase.Database.Core.Operation.Overwrite.Overwrite(Firebase.Database.Core.Operation.OperationSource? source, Firebase.Database.Core.Path? path, Firebase.Database.Snapshot.INode? snapshot) -> void
Firebase.Database.Core.Operation.Overwrite.Overwrite(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Path
Firebase.Database.Core.Path.Path(System.Collections.Generic.IList<string!>? segments) -> void
Firebase.Database.Core.Path.Path(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Path.Path(params Firebase.Database.Snapshot.ChildKey![]? segments) -> void
Firebase.Database.Core.Path.Path(string? pathString) -> void
Firebase.Database.Core.Persistence.CachePolicy
Firebase.Database.Core.Persistence.CachePolicyConsts
Firebase.Database.Core.Persistence.DefaultPersistenceManager
Firebase.Database.Core.Persistence.DefaultPersistenceManager.DefaultPersistenceManager(Firebase.Database.Core.Context? ctx, Firebase.Database.Core.Persistence.IPersistenceStorageEngine? engine, Firebase.Database.Core.Persistence.ICachePolicy? cachePolicy) -> void
Firebase.Database.Core.Persistence.DefaultPersistenceManager.DefaultPersistenceManager(Firebase.Database.Core.Context? ctx, Firebase.Database.Core.Persistence.IPersistenceStorageEngine? engine, Firebase.Database.Core.Persistence.ICachePolicy? cachePolicy, Firebase.Database.Core.Utilities.IClock? clock) -> void
Firebase.Database.Core.Persistence.DefaultPersistenceManager.DefaultPersistenceManager(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Persistence.ICachePolicy
Firebase.Database.Core.Persistence.ICachePolicy.MaxNumberOfQueriesToKeep.get -> long
Firebase.Database.Core.Persistence.ICachePolicy.None.get -> Firebase.Database.Core.Persistence.ICachePolicy?
Firebase.Database.Core.Persistence.ICachePolicy.PercentOfQueriesToPruneAtOnce.get -> float
Firebase.Database.Core.Persistence.ICachePolicy.ShouldCheckCacheSize(long p0) -> bool
Firebase.Database.Core.Persistence.ICachePolicy.ShouldPrune(long p0, long p1) -> bool
Firebase.Database.Core.Persistence.IPersistenceManager
Firebase.Database.Core.Persistence.IPersistenceManager.ApplyUserWriteToServerCache(Firebase.Database.Core.Path? p0, Firebase.Database.Core.CompoundWrite? p1) -> void
Firebase.Database.Core.Persistence.IPersistenceManager.ApplyUserWriteToServerCache(Firebase.Database.Core.Path? p0, Firebase.Database.Snapshot.INode? p1) -> void
Firebase.Database.Core.Persistence.IPersistenceManager.LoadUserWrites() -> System.Collections.Generic.IList<Firebase.Database.Core.UserWriteRecord!>?
Firebase.Database.Core.Persistence.IPersistenceManager.RemoveAllUserWrites() -> void
Firebase.Database.Core.Persistence.IPersistenceManager.RemoveUserWrite(long p0) -> void
Firebase.Database.Core.Persistence.IPersistenceManager.RunInTransaction(Java.Util.Concurrent.ICallable? p0) -> Java.Lang.Object?
Firebase.Database.Core.Persistence.IPersistenceManager.SaveUserMerge(Firebase.Database.Core.Path? p0, Firebase.Database.Core.CompoundWrite? p1, long p2) -> void
Firebase.Database.Core.Persistence.IPersistenceManager.SaveUserOverwrite(Firebase.Database.Core.Path? p0, Firebase.Database.Snapshot.INode? p1, long p2) -> void
Firebase.Database.Core.Persistence.IPersistenceManager.ServerCache(Firebase.Database.Core.View.QuerySpec? p0) -> Firebase.Database.Core.View.CacheNode?
Firebase.Database.Core.Persistence.IPersistenceManager.SetQueryActive(Firebase.Database.Core.View.QuerySpec? p0) -> void
Firebase.Database.Core.Persistence.IPersistenceManager.SetQueryComplete(Firebase.Database.Core.View.QuerySpec? p0) -> void
Firebase.Database.Core.Persistence.IPersistenceManager.SetQueryInactive(Firebase.Database.Core.View.QuerySpec? p0) -> void
Firebase.Database.Core.Persistence.IPersistenceManager.SetTrackedQueryKeys(Firebase.Database.Core.View.QuerySpec? p0, System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>? p1) -> void
Firebase.Database.Core.Persistence.IPersistenceManager.UpdateServerCache(Firebase.Database.Core.Path? p0, Firebase.Database.Core.CompoundWrite? p1) -> void
Firebase.Database.Core.Persistence.IPersistenceManager.UpdateServerCache(Firebase.Database.Core.View.QuerySpec? p0, Firebase.Database.Snapshot.INode? p1) -> void
Firebase.Database.Core.Persistence.IPersistenceManager.UpdateTrackedQueryKeys(Firebase.Database.Core.View.QuerySpec? p0, System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>? p1, System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>? p2) -> void
Firebase.Database.Core.Persistence.IPersistenceStorageEngine
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.BeginTransaction() -> void
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.Close() -> void
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.DeleteTrackedQuery(long p0) -> void
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.EndTransaction() -> void
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.LoadTrackedQueries() -> System.Collections.Generic.IList<Firebase.Database.Core.Persistence.TrackedQuery!>?
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.LoadTrackedQueryKeys(System.Collections.Generic.ICollection<Java.Lang.Long!>? p0) -> System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>?
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.LoadTrackedQueryKeys(long p0) -> System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>?
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.LoadUserWrites() -> System.Collections.Generic.IList<Firebase.Database.Core.UserWriteRecord!>?
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.MergeIntoServerCache(Firebase.Database.Core.Path? p0, Firebase.Database.Core.CompoundWrite? p1) -> void
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.MergeIntoServerCache(Firebase.Database.Core.Path? p0, Firebase.Database.Snapshot.INode? p1) -> void
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.OverwriteServerCache(Firebase.Database.Core.Path? p0, Firebase.Database.Snapshot.INode? p1) -> void
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.PruneCache(Firebase.Database.Core.Path? p0, Firebase.Database.Core.Persistence.PruneForest? p1) -> void
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.RemoveAllUserWrites() -> void
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.RemoveUserWrite(long p0) -> void
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.ResetPreviouslyActiveTrackedQueries(long p0) -> void
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.SaveTrackedQuery(Firebase.Database.Core.Persistence.TrackedQuery? p0) -> void
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.SaveTrackedQueryKeys(long p0, System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>? p1) -> void
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.SaveUserMerge(Firebase.Database.Core.Path? p0, Firebase.Database.Core.CompoundWrite? p1, long p2) -> void
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.SaveUserOverwrite(Firebase.Database.Core.Path? p0, Firebase.Database.Snapshot.INode? p1, long p2) -> void
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.ServerCache(Firebase.Database.Core.Path? p0) -> Firebase.Database.Snapshot.INode?
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.ServerCacheEstimatedSizeInBytes() -> long
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.SetTransactionSuccessful() -> void
Firebase.Database.Core.Persistence.IPersistenceStorageEngine.UpdateTrackedQueryKeys(long p0, System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>? p1, System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>? p2) -> void
Firebase.Database.Core.Persistence.LRUCachePolicy
Firebase.Database.Core.Persistence.LRUCachePolicy.InterfaceConsts
Firebase.Database.Core.Persistence.LRUCachePolicy.LRUCachePolicy(long maxSizeBytes) -> void
Firebase.Database.Core.Persistence.LRUCachePolicy.LRUCachePolicy(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Persistence.LRUCachePolicy.MaxSizeBytes.get -> long
Firebase.Database.Core.Persistence.LRUCachePolicy.MaxSizeBytes.set -> void
Firebase.Database.Core.Persistence.NoopPersistenceManager
Firebase.Database.Core.Persistence.NoopPersistenceManager.NoopPersistenceManager() -> void
Firebase.Database.Core.Persistence.NoopPersistenceManager.NoopPersistenceManager(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Persistence.PruneForest
Firebase.Database.Core.Persistence.PruneForest.PruneForest() -> void
Firebase.Database.Core.Persistence.PruneForest.PruneForest(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Persistence.TrackedQuery
Firebase.Database.Core.Persistence.TrackedQuery.Active.get -> bool
Firebase.Database.Core.Persistence.TrackedQuery.Active.set -> void
Firebase.Database.Core.Persistence.TrackedQuery.Complete.get -> bool
Firebase.Database.Core.Persistence.TrackedQuery.Complete.set -> void
Firebase.Database.Core.Persistence.TrackedQuery.Id.get -> long
Firebase.Database.Core.Persistence.TrackedQuery.Id.set -> void
Firebase.Database.Core.Persistence.TrackedQuery.LastUse.get -> long
Firebase.Database.Core.Persistence.TrackedQuery.LastUse.set -> void
Firebase.Database.Core.Persistence.TrackedQuery.QuerySpec.get -> Firebase.Database.Core.View.QuerySpec?
Firebase.Database.Core.Persistence.TrackedQuery.QuerySpec.set -> void
Firebase.Database.Core.Persistence.TrackedQuery.SetActiveState(bool isActive) -> Firebase.Database.Core.Persistence.TrackedQuery?
Firebase.Database.Core.Persistence.TrackedQuery.SetComplete() -> Firebase.Database.Core.Persistence.TrackedQuery?
Firebase.Database.Core.Persistence.TrackedQuery.TrackedQuery(long id, Firebase.Database.Core.View.QuerySpec? querySpec, long lastUse, bool complete, bool active) -> void
Firebase.Database.Core.Persistence.TrackedQuery.UpdateLastUse(long lastUse) -> Firebase.Database.Core.Persistence.TrackedQuery?
Firebase.Database.Core.Persistence.TrackedQueryManager
Firebase.Database.Core.Persistence.TrackedQueryManager.TrackedQueryManager(Firebase.Database.Core.Persistence.IPersistenceStorageEngine? storageLayer, Firebase.Database.Logging.LogWrapper? logger, Firebase.Database.Core.Utilities.IClock? clock) -> void
Firebase.Database.Core.Persistence.TrackedQueryManager.TrackedQueryManager(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Repo
Firebase.Database.Core.Repo.DataUpdateCount.get -> long
Firebase.Database.Core.Repo.DataUpdateCount.set -> void
Firebase.Database.Core.Repo.Repo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.RepoInfo
Firebase.Database.Core.RepoInfo.ApplyEmulatorSettings(Firebase.Emulators.EmulatedServiceSettings? settings) -> void
Firebase.Database.Core.RepoInfo.GetConnectionURL(string? optLastSessionId) -> Java.Net.URI?
Firebase.Database.Core.RepoInfo.Host.get -> string?
Firebase.Database.Core.RepoInfo.Host.set -> void
Firebase.Database.Core.RepoInfo.InternalHost.get -> string?
Firebase.Database.Core.RepoInfo.InternalHost.set -> void
Firebase.Database.Core.RepoInfo.IsCacheableHost.get -> bool
Firebase.Database.Core.RepoInfo.IsCustomHost.get -> bool
Firebase.Database.Core.RepoInfo.IsDemoHost.get -> bool
Firebase.Database.Core.RepoInfo.IsSecure.get -> bool
Firebase.Database.Core.RepoInfo.Namespace.get -> string?
Firebase.Database.Core.RepoInfo.Namespace.set -> void
Firebase.Database.Core.RepoInfo.RepoInfo() -> void
Firebase.Database.Core.RepoInfo.Secure.get -> bool
Firebase.Database.Core.RepoInfo.Secure.set -> void
Firebase.Database.Core.RepoInfo.ToDebugString() -> string?
Firebase.Database.Core.RepoManager
Firebase.Database.Core.RepoManager.RepoManager() -> void
Firebase.Database.Core.RepoManager.RepoManager(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.ServerValues
Firebase.Database.Core.ServerValues.ServerValues() -> void
Firebase.Database.Core.ServerValues.ServerValues(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.SnapshotHolder
Firebase.Database.Core.SnapshotHolder.SnapshotHolder(Firebase.Database.Snapshot.INode? node) -> void
Firebase.Database.Core.SnapshotHolder.SnapshotHolder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.SuccessEventArgs
Firebase.Database.Core.SuccessEventArgs.P0.get -> string?
Firebase.Database.Core.SuccessEventArgs.SuccessEventArgs(string? p0) -> void
Firebase.Database.Core.SyncPoint
Firebase.Database.Core.SyncPoint.SyncPoint(Firebase.Database.Core.Persistence.IPersistenceManager? persistenceManager) -> void
Firebase.Database.Core.SyncPoint.SyncPoint(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.SyncTree
Firebase.Database.Core.SyncTree.CompletionHandler
Firebase.Database.Core.SyncTree.ICompletionListener
Firebase.Database.Core.SyncTree.ICompletionListener.OnListenComplete(Firebase.Database.DatabaseError? p0) -> System.Collections.Generic.IList<Firebase.Database.Core.View.IEvent!>?
Firebase.Database.Core.SyncTree.IListenProvider
Firebase.Database.Core.SyncTree.IListenProvider.StartListening(Firebase.Database.Core.View.QuerySpec? p0, Firebase.Database.Core.Tag? p1, Firebase.Database.Connection.IListenHashProvider? p2, Firebase.Database.Core.SyncTree.ICompletionListener? p3) -> void
Firebase.Database.Core.SyncTree.IListenProvider.StopListening(Firebase.Database.Core.View.QuerySpec? p0, Firebase.Database.Core.Tag? p1) -> void
Firebase.Database.Core.SyncTree.SyncTree(Firebase.Database.Core.Context? context, Firebase.Database.Core.Persistence.IPersistenceManager? persistenceManager, Firebase.Database.Core.SyncTree.IListenProvider? listenProvider) -> void
Firebase.Database.Core.SyncTree.SyncTree(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Tag
Firebase.Database.Core.Tag.Tag(long tagNumber) -> void
Firebase.Database.Core.Tag.TagNumber.get -> long
Firebase.Database.Core.ThreadBackgroundExecutor
Firebase.Database.Core.ThreadBackgroundExecutor.ThreadBackgroundExecutor() -> void
Firebase.Database.Core.ThreadBackgroundExecutor.ThreadBackgroundExecutor(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.ThreadInitializer
Firebase.Database.Core.ThreadInitializerConsts
Firebase.Database.Core.TokenChangeStringEventArgs
Firebase.Database.Core.TokenChangeStringEventArgs.P0.get -> string?
Firebase.Database.Core.TokenChangeStringEventArgs.TokenChangeStringEventArgs(string? p0) -> void
Firebase.Database.Core.UserWriteRecord
Firebase.Database.Core.UserWriteRecord.IsMerge.get -> bool
Firebase.Database.Core.UserWriteRecord.IsOverwrite.get -> bool
Firebase.Database.Core.UserWriteRecord.IsVisible.get -> bool
Firebase.Database.Core.UserWriteRecord.Merge.get -> Firebase.Database.Core.CompoundWrite?
Firebase.Database.Core.UserWriteRecord.Overwrite.get -> Firebase.Database.Snapshot.INode?
Firebase.Database.Core.UserWriteRecord.Path.get -> Firebase.Database.Core.Path?
Firebase.Database.Core.UserWriteRecord.UserWriteRecord(long writeId, Firebase.Database.Core.Path? path, Firebase.Database.Core.CompoundWrite? merge) -> void
Firebase.Database.Core.UserWriteRecord.UserWriteRecord(long writeId, Firebase.Database.Core.Path? path, Firebase.Database.Snapshot.INode? overwrite, bool visible) -> void
Firebase.Database.Core.UserWriteRecord.WriteId.get -> long
Firebase.Database.Core.Utilities.DefaultClock
Firebase.Database.Core.Utilities.DefaultClock.DefaultClock() -> void
Firebase.Database.Core.Utilities.DefaultClock.DefaultClock(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Utilities.DefaultRunLoop
Firebase.Database.Core.Utilities.DefaultRunLoop.DefaultRunLoop() -> void
Firebase.Database.Core.Utilities.DefaultRunLoop.DefaultRunLoop(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Utilities.Encoding.CustomClassMapper
Firebase.Database.Core.Utilities.Encoding.CustomClassMapper.CustomClassMapper() -> void
Firebase.Database.Core.Utilities.Encoding.CustomClassMapper.CustomClassMapper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Utilities.IClock
Firebase.Database.Core.Utilities.IClock.Millis() -> long
Firebase.Database.Core.Utilities.IPredicate
Firebase.Database.Core.Utilities.IPredicate.Evaluate(Java.Lang.Object? p0) -> bool
Firebase.Database.Core.Utilities.IPredicate.True.get -> Firebase.Database.Core.Utilities.IPredicate?
Firebase.Database.Core.Utilities.ImmutableTree
Firebase.Database.Core.Utilities.ImmutableTree.Children.get -> Firebase.Database.Collection.ImmutableSortedMap?
Firebase.Database.Core.Utilities.ImmutableTree.ContainsMatchingValue(Firebase.Database.Core.Utilities.IPredicate? predicate) -> bool
Firebase.Database.Core.Utilities.ImmutableTree.FindRootMostMatchingPath(Firebase.Database.Core.Path? relativePath, Firebase.Database.Core.Utilities.IPredicate? predicate) -> Firebase.Database.Core.Path?
Firebase.Database.Core.Utilities.ImmutableTree.FindRootMostPathWithValue(Firebase.Database.Core.Path? relativePath) -> Firebase.Database.Core.Path?
Firebase.Database.Core.Utilities.ImmutableTree.Fold(Java.Lang.Object? accum, Firebase.Database.Core.Utilities.ImmutableTree.ITreeVisitor? visitor) -> Java.Lang.Object?
Firebase.Database.Core.Utilities.ImmutableTree.Foreach(Firebase.Database.Core.Utilities.ImmutableTree.ITreeVisitor? visitor) -> void
Firebase.Database.Core.Utilities.ImmutableTree.Get(Firebase.Database.Core.Path? relativePath) -> Java.Lang.Object?
Firebase.Database.Core.Utilities.ImmutableTree.GetChild(Firebase.Database.Snapshot.ChildKey? child) -> Firebase.Database.Core.Utilities.ImmutableTree?
Firebase.Database.Core.Utilities.ImmutableTree.ITreeVisitor
Firebase.Database.Core.Utilities.ImmutableTree.ITreeVisitor.OnNodeValue(Firebase.Database.Core.Path? p0, Java.Lang.Object? p1, Java.Lang.Object? p2) -> Java.Lang.Object?
Firebase.Database.Core.Utilities.ImmutableTree.ImmutableTree(Java.Lang.Object? value) -> void
Firebase.Database.Core.Utilities.ImmutableTree.ImmutableTree(Java.Lang.Object? value, Firebase.Database.Collection.ImmutableSortedMap? children) -> void
Firebase.Database.Core.Utilities.ImmutableTree.IsEmpty.get -> bool
Firebase.Database.Core.Utilities.ImmutableTree.Iterator() -> Java.Util.IIterator?
Firebase.Database.Core.Utilities.ImmutableTree.LeafMostValue(Firebase.Database.Core.Path? relativePath) -> Java.Lang.Object?
Firebase.Database.Core.Utilities.ImmutableTree.LeafMostValueMatching(Firebase.Database.Core.Path? path, Firebase.Database.Core.Utilities.IPredicate? predicate) -> Java.Lang.Object?
Firebase.Database.Core.Utilities.ImmutableTree.Remove(Firebase.Database.Core.Path? relativePath) -> Firebase.Database.Core.Utilities.ImmutableTree?
Firebase.Database.Core.Utilities.ImmutableTree.RootMostValue(Firebase.Database.Core.Path? relativePath) -> Java.Lang.Object?
Firebase.Database.Core.Utilities.ImmutableTree.RootMostValueMatching(Firebase.Database.Core.Path? relativePath, Firebase.Database.Core.Utilities.IPredicate? predicate) -> Java.Lang.Object?
Firebase.Database.Core.Utilities.ImmutableTree.Set(Firebase.Database.Core.Path? relativePath, Java.Lang.Object? value) -> Firebase.Database.Core.Utilities.ImmutableTree?
Firebase.Database.Core.Utilities.ImmutableTree.SetTree(Firebase.Database.Core.Path? relativePath, Firebase.Database.Core.Utilities.ImmutableTree? newTree) -> Firebase.Database.Core.Utilities.ImmutableTree?
Firebase.Database.Core.Utilities.ImmutableTree.Subtree(Firebase.Database.Core.Path? relativePath) -> Firebase.Database.Core.Utilities.ImmutableTree?
Firebase.Database.Core.Utilities.ImmutableTree.Value.get -> Java.Lang.Object?
Firebase.Database.Core.Utilities.ImmutableTree.Values() -> System.Collections.ICollection?
Firebase.Database.Core.Utilities.NodeSizeEstimator
Firebase.Database.Core.Utilities.NodeSizeEstimator.NodeSizeEstimator() -> void
Firebase.Database.Core.Utilities.NodeSizeEstimator.NodeSizeEstimator(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Utilities.OffsetClock
Firebase.Database.Core.Utilities.OffsetClock.OffsetClock(Firebase.Database.Core.Utilities.IClock? baseClock, long offset) -> void
Firebase.Database.Core.Utilities.OffsetClock.OffsetClock(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Utilities.Pair
Firebase.Database.Core.Utilities.Pair.First.get -> Java.Lang.Object?
Firebase.Database.Core.Utilities.Pair.Pair(Java.Lang.Object? first, Java.Lang.Object? second) -> void
Firebase.Database.Core.Utilities.Pair.Second.get -> Java.Lang.Object?
Firebase.Database.Core.Utilities.ParsedUrl
Firebase.Database.Core.Utilities.ParsedUrl.ParsedUrl() -> void
Firebase.Database.Core.Utilities.ParsedUrl.Path.get -> Firebase.Database.Core.Path?
Firebase.Database.Core.Utilities.ParsedUrl.Path.set -> void
Firebase.Database.Core.Utilities.ParsedUrl.RepoInfo.get -> Firebase.Database.Core.RepoInfo?
Firebase.Database.Core.Utilities.ParsedUrl.RepoInfo.set -> void
Firebase.Database.Core.Utilities.Predicate
Firebase.Database.Core.Utilities.PredicateConsts
Firebase.Database.Core.Utilities.PushIdGenerator
Firebase.Database.Core.Utilities.PushIdGenerator.PushIdGenerator() -> void
Firebase.Database.Core.Utilities.PushIdGenerator.PushIdGenerator(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Utilities.Tree
Firebase.Database.Core.Utilities.Tree.ITreeFilter
Firebase.Database.Core.Utilities.Tree.ITreeFilter.FilterTreeNode(Firebase.Database.Core.Utilities.Tree? p0) -> bool
Firebase.Database.Core.Utilities.Tree.ITreeVisitor
Firebase.Database.Core.Utilities.Tree.ITreeVisitor.VisitTree(Firebase.Database.Core.Utilities.Tree? p0) -> void
Firebase.Database.Core.Utilities.Tree.Tree() -> void
Firebase.Database.Core.Utilities.Tree.Tree(Firebase.Database.Snapshot.ChildKey? name, Firebase.Database.Core.Utilities.Tree? parent, Firebase.Database.Core.Utilities.TreeNode? node) -> void
Firebase.Database.Core.Utilities.Tree.Tree(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Utilities.TreeNode
Firebase.Database.Core.Utilities.TreeNode.Children.get -> System.Collections.IDictionary?
Firebase.Database.Core.Utilities.TreeNode.Children.set -> void
Firebase.Database.Core.Utilities.TreeNode.TreeNode() -> void
Firebase.Database.Core.Utilities.TreeNode.TreeNode(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Utilities.TreeNode.Value.get -> Java.Lang.Object?
Firebase.Database.Core.Utilities.TreeNode.Value.set -> void
Firebase.Database.Core.Utilities.Tuple.NameAndPriority
Firebase.Database.Core.Utilities.Tuple.NameAndPriority.NameAndPriority(Firebase.Database.Snapshot.ChildKey? name, Firebase.Database.Snapshot.INode? priority) -> void
Firebase.Database.Core.Utilities.Tuple.NameAndPriority.NameAndPriority(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Utilities.Tuple.NodeAndPath
Firebase.Database.Core.Utilities.Tuple.NodeAndPath.NodeAndPath(Firebase.Database.Snapshot.INode? node, Firebase.Database.Core.Path? path) -> void
Firebase.Database.Core.Utilities.Tuple.NodeAndPath.NodeAndPath(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Utilities.Tuple.PathAndId
Firebase.Database.Core.Utilities.Tuple.PathAndId.PathAndId(Firebase.Database.Core.Path? path, long id) -> void
Firebase.Database.Core.Utilities.Tuple.PathAndId.PathAndId(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Utilities.Utilities
Firebase.Database.Core.Utilities.Utilities.Utilities() -> void
Firebase.Database.Core.Utilities.Utilities.Utilities(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.Utilities.Validation
Firebase.Database.Core.Utilities.Validation.Validation() -> void
Firebase.Database.Core.Utilities.Validation.Validation(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.ValidationPath
Firebase.Database.Core.ValidationPath.ValidationPath(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.ValueEventRegistration
Firebase.Database.Core.ValueEventRegistration.ValueEventRegistration(Firebase.Database.Core.Repo? repo, Firebase.Database.IValueEventListener? eventListener, Firebase.Database.Core.View.QuerySpec? spec) -> void
Firebase.Database.Core.ValueEventRegistration.ValueEventRegistration(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.View.CacheNode
Firebase.Database.Core.View.CacheNode.CacheNode(Firebase.Database.Snapshot.IndexedNode? node, bool fullyInitialized, bool filtered) -> void
Firebase.Database.Core.View.CacheNode.CacheNode(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.View.CancelEvent
Firebase.Database.Core.View.CancelEvent.CancelEvent(Firebase.Database.Core.EventRegistration? eventRegistration, Firebase.Database.DatabaseError? error, Firebase.Database.Core.Path? path) -> void
Firebase.Database.Core.View.CancelEvent.CancelEvent(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.View.Change
Firebase.Database.Core.View.Change.Change(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.View.DataEvent
Firebase.Database.Core.View.DataEvent.DataEvent(Firebase.Database.Core.View.EventEventType? eventType, Firebase.Database.Core.EventRegistration? eventRegistration, Firebase.Database.DataSnapshot? snapshot, string? prevName) -> void
Firebase.Database.Core.View.DataEvent.DataEvent(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.View.EventEventType
Firebase.Database.Core.View.EventGenerator
Firebase.Database.Core.View.EventGenerator.EventGenerator(Firebase.Database.Core.View.QuerySpec? query) -> void
Firebase.Database.Core.View.EventGenerator.EventGenerator(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.View.EventRaiser
Firebase.Database.Core.View.EventRaiser.EventRaiser(Firebase.Database.Core.Context? ctx) -> void
Firebase.Database.Core.View.EventRaiser.EventRaiser(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.View.Filter.ChildChangeAccumulator
Firebase.Database.Core.View.Filter.ChildChangeAccumulator.ChildChangeAccumulator() -> void
Firebase.Database.Core.View.Filter.ChildChangeAccumulator.ChildChangeAccumulator(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.View.Filter.INodeFilter
Firebase.Database.Core.View.Filter.INodeFilter.FiltersNodes() -> bool
Firebase.Database.Core.View.Filter.INodeFilter.Index.get -> Firebase.Database.Snapshot.Index?
Firebase.Database.Core.View.Filter.INodeFilter.IndexedFilter.get -> Firebase.Database.Core.View.Filter.INodeFilter?
Firebase.Database.Core.View.Filter.INodeFilter.UpdateChild(Firebase.Database.Snapshot.IndexedNode? p0, Firebase.Database.Snapshot.ChildKey? p1, Firebase.Database.Snapshot.INode? p2, Firebase.Database.Core.Path? p3, Firebase.Database.Core.View.Filter.INodeFilterCompleteChildSource? p4, Firebase.Database.Core.View.Filter.ChildChangeAccumulator? p5) -> Firebase.Database.Snapshot.IndexedNode?
Firebase.Database.Core.View.Filter.INodeFilter.UpdateFullNode(Firebase.Database.Snapshot.IndexedNode? p0, Firebase.Database.Snapshot.IndexedNode? p1, Firebase.Database.Core.View.Filter.ChildChangeAccumulator? p2) -> Firebase.Database.Snapshot.IndexedNode?
Firebase.Database.Core.View.Filter.INodeFilter.UpdatePriority(Firebase.Database.Snapshot.IndexedNode? p0, Firebase.Database.Snapshot.INode? p1) -> Firebase.Database.Snapshot.IndexedNode?
Firebase.Database.Core.View.Filter.INodeFilterCompleteChildSource
Firebase.Database.Core.View.Filter.INodeFilterCompleteChildSource.GetChildAfterChild(Firebase.Database.Snapshot.Index? p0, Firebase.Database.Snapshot.NamedNode? p1, bool p2) -> Firebase.Database.Snapshot.NamedNode?
Firebase.Database.Core.View.Filter.INodeFilterCompleteChildSource.GetCompleteChild(Firebase.Database.Snapshot.ChildKey? p0) -> Firebase.Database.Snapshot.INode?
Firebase.Database.Core.View.Filter.IndexedFilter
Firebase.Database.Core.View.Filter.IndexedFilter.IndexedFilter(Firebase.Database.Snapshot.Index? index) -> void
Firebase.Database.Core.View.Filter.IndexedFilter.IndexedFilter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.View.Filter.LimitedFilter
Firebase.Database.Core.View.Filter.LimitedFilter.LimitedFilter(Firebase.Database.Core.View.QueryParams? params) -> void
Firebase.Database.Core.View.Filter.LimitedFilter.LimitedFilter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.View.Filter.RangedFilter
Firebase.Database.Core.View.Filter.RangedFilter.RangedFilter(Firebase.Database.Core.View.QueryParams? params) -> void
Firebase.Database.Core.View.Filter.RangedFilter.RangedFilter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.View.IEvent
Firebase.Database.Core.View.IEvent.Fire() -> void
Firebase.Database.Core.View.IEvent.Path.get -> Firebase.Database.Core.Path?
Firebase.Database.Core.View.IEvent.ToString() -> string?
Firebase.Database.Core.View.QueryParams
Firebase.Database.Core.View.QueryParams.EndAt(Firebase.Database.Snapshot.INode? indexEndValue, Firebase.Database.Snapshot.ChildKey? indexEndName) -> Firebase.Database.Core.View.QueryParams?
Firebase.Database.Core.View.QueryParams.HasAnchoredLimit.get -> bool
Firebase.Database.Core.View.QueryParams.HasEnd.get -> bool
Firebase.Database.Core.View.QueryParams.HasLimit.get -> bool
Firebase.Database.Core.View.QueryParams.HasStart.get -> bool
Firebase.Database.Core.View.QueryParams.Index.get -> Firebase.Database.Snapshot.Index?
Firebase.Database.Core.View.QueryParams.IndexEndName.get -> Firebase.Database.Snapshot.ChildKey?
Firebase.Database.Core.View.QueryParams.IndexEndValue.get -> Firebase.Database.Snapshot.INode?
Firebase.Database.Core.View.QueryParams.IndexStartName.get -> Firebase.Database.Snapshot.ChildKey?
Firebase.Database.Core.View.QueryParams.IndexStartValue.get -> Firebase.Database.Snapshot.INode?
Firebase.Database.Core.View.QueryParams.IsDefault.get -> bool
Firebase.Database.Core.View.QueryParams.IsValid.get -> bool
Firebase.Database.Core.View.QueryParams.IsViewFromLeft.get -> bool
Firebase.Database.Core.View.QueryParams.Limit.get -> int
Firebase.Database.Core.View.QueryParams.LimitToFirst(int limit) -> Firebase.Database.Core.View.QueryParams?
Firebase.Database.Core.View.QueryParams.LimitToLast(int limit) -> Firebase.Database.Core.View.QueryParams?
Firebase.Database.Core.View.QueryParams.LoadsAllData() -> bool
Firebase.Database.Core.View.QueryParams.NodeFilter.get -> Firebase.Database.Core.View.Filter.INodeFilter?
Firebase.Database.Core.View.QueryParams.OrderBy(Firebase.Database.Snapshot.Index? index) -> Firebase.Database.Core.View.QueryParams?
Firebase.Database.Core.View.QueryParams.QueryParams() -> void
Firebase.Database.Core.View.QueryParams.StartAt(Firebase.Database.Snapshot.INode? indexStartValue, Firebase.Database.Snapshot.ChildKey? indexStartName) -> Firebase.Database.Core.View.QueryParams?
Firebase.Database.Core.View.QueryParams.ToJSON() -> string?
Firebase.Database.Core.View.QueryParams.WireProtocolParams.get -> System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>?
Firebase.Database.Core.View.QuerySpec
Firebase.Database.Core.View.QuerySpec.Index.get -> Firebase.Database.Snapshot.Index?
Firebase.Database.Core.View.QuerySpec.IsDefault.get -> bool
Firebase.Database.Core.View.QuerySpec.LoadsAllData() -> bool
Firebase.Database.Core.View.QuerySpec.Params.get -> Firebase.Database.Core.View.QueryParams?
Firebase.Database.Core.View.QuerySpec.Path.get -> Firebase.Database.Core.Path?
Firebase.Database.Core.View.QuerySpec.QuerySpec(Firebase.Database.Core.Path? path, Firebase.Database.Core.View.QueryParams? params) -> void
Firebase.Database.Core.View.View
Firebase.Database.Core.View.View.OperationResult
Firebase.Database.Core.View.View.OperationResult.Changes.get -> System.Collections.IList?
Firebase.Database.Core.View.View.OperationResult.Changes.set -> void
Firebase.Database.Core.View.View.OperationResult.Events.get -> System.Collections.IList?
Firebase.Database.Core.View.View.OperationResult.Events.set -> void
Firebase.Database.Core.View.View.OperationResult.OperationResult(System.Collections.Generic.IList<Firebase.Database.Core.View.DataEvent!>? events, System.Collections.Generic.IList<Firebase.Database.Core.View.Change!>? changes) -> void
Firebase.Database.Core.View.View.OperationResult.OperationResult(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.View.View.View(Firebase.Database.Core.View.QuerySpec? query, Firebase.Database.Core.View.ViewCache? initialViewCache) -> void
Firebase.Database.Core.View.View.View(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.View.ViewCache
Firebase.Database.Core.View.ViewCache.ViewCache(Firebase.Database.Core.View.CacheNode? eventSnap, Firebase.Database.Core.View.CacheNode? serverSnap) -> void
Firebase.Database.Core.View.ViewCache.ViewCache(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.View.ViewProcessor
Firebase.Database.Core.View.ViewProcessor.ProcessorResult
Firebase.Database.Core.View.ViewProcessor.ProcessorResult.Changes.get -> System.Collections.IList?
Firebase.Database.Core.View.ViewProcessor.ProcessorResult.Changes.set -> void
Firebase.Database.Core.View.ViewProcessor.ProcessorResult.ProcessorResult(Firebase.Database.Core.View.ViewCache? viewCache, System.Collections.Generic.IList<Firebase.Database.Core.View.Change!>? changes) -> void
Firebase.Database.Core.View.ViewProcessor.ProcessorResult.ProcessorResult(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.View.ViewProcessor.ProcessorResult.ViewCache.get -> Firebase.Database.Core.View.ViewCache?
Firebase.Database.Core.View.ViewProcessor.ProcessorResult.ViewCache.set -> void
Firebase.Database.Core.View.ViewProcessor.ViewProcessor(Firebase.Database.Core.View.Filter.INodeFilter? filter) -> void
Firebase.Database.Core.View.ViewProcessor.ViewProcessor(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.WriteTree
Firebase.Database.Core.WriteTree.WriteTree() -> void
Firebase.Database.Core.WriteTree.WriteTree(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.WriteTreeRef
Firebase.Database.Core.WriteTreeRef.WriteTreeRef(Firebase.Database.Core.Path? path, Firebase.Database.Core.WriteTree? writeTree) -> void
Firebase.Database.Core.WriteTreeRef.WriteTreeRef(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Core.ZombieEventManager
Firebase.Database.Core.ZombieEventManager.ZombieEventManager(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.DataChangeEventArgs
Firebase.Database.DataChangeEventArgs.DataChangeEventArgs(Firebase.Database.DataSnapshot! snapshot) -> void
Firebase.Database.DataChangeEventArgs.Snapshot.get -> Firebase.Database.DataSnapshot!
Firebase.Database.DataSnapshot
Firebase.Database.DataSnapshot.DataSnapshot(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.DatabaseError
Firebase.Database.DatabaseError.DatabaseError(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.DatabaseException
Firebase.Database.DatabaseException.DatabaseException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.DatabaseException.DatabaseException(string? message) -> void
Firebase.Database.DatabaseException.DatabaseException(string? message, Java.Lang.Throwable? cause) -> void
Firebase.Database.DatabaseKt
Firebase.Database.DatabaseReference
Firebase.Database.DatabaseReference.CompletionEventArgs
Firebase.Database.DatabaseReference.CompletionEventArgs.CompletionEventArgs(Firebase.Database.DatabaseError? error, Firebase.Database.DatabaseReference! reference) -> void
Firebase.Database.DatabaseReference.CompletionEventArgs.Error.get -> Firebase.Database.DatabaseError?
Firebase.Database.DatabaseReference.CompletionEventArgs.Reference.get -> Firebase.Database.DatabaseReference!
Firebase.Database.DatabaseReference.DatabaseReference(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.DatabaseReference.ICompletionListener
Firebase.Database.DatabaseReference.ICompletionListener.OnComplete(Firebase.Database.DatabaseError? error, Firebase.Database.DatabaseReference! reference) -> void
Firebase.Database.DatabaseReference.RemoveValueAsync() -> System.Threading.Tasks.Task!
Firebase.Database.DatabaseReference.SetPriorityAsync(Java.Lang.Object! obj) -> System.Threading.Tasks.Task!
Firebase.Database.DatabaseReference.SetValueAsync(Java.Lang.Object! obj) -> System.Threading.Tasks.Task!
Firebase.Database.DatabaseReference.SetValueAsync(Java.Lang.Object! obj1, Java.Lang.Object! obj2) -> System.Threading.Tasks.Task!
Firebase.Database.DatabaseReference.UpdateChildrenAsync(System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>! map) -> System.Threading.Tasks.Task!
Firebase.Database.DatabaseRegistrar
Firebase.Database.DatabaseRegistrar.DatabaseRegistrar() -> void
Firebase.Database.DatabaseRegistrar.DatabaseRegistrar(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.ExcludeAttribute
Firebase.Database.ExcludeAttribute.ExcludeAttribute() -> void
Firebase.Database.FirebaseDatabase
Firebase.Database.FirebaseDatabase.FirebaseDatabase(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.FirebaseDatabaseKtxRegistrar
Firebase.Database.FirebaseDatabaseKtxRegistrar.Components.get -> System.Collections.Generic.IList<Firebase.Components.Component!>!
Firebase.Database.FirebaseDatabaseKtxRegistrar.FirebaseDatabaseKtxRegistrar() -> void
Firebase.Database.GenericTypeIndicator
Firebase.Database.GenericTypeIndicator.GenericTypeIndicator() -> void
Firebase.Database.GenericTypeIndicator.GenericTypeIndicator(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.IChildEventListener
Firebase.Database.IChildEventListener.OnCancelled(Firebase.Database.DatabaseError! error) -> void
Firebase.Database.IChildEventListener.OnChildAdded(Firebase.Database.DataSnapshot! snapshot, string? previousChildName) -> void
Firebase.Database.IChildEventListener.OnChildChanged(Firebase.Database.DataSnapshot! snapshot, string? previousChildName) -> void
Firebase.Database.IChildEventListener.OnChildMoved(Firebase.Database.DataSnapshot! snapshot, string? previousChildName) -> void
Firebase.Database.IChildEventListener.OnChildRemoved(Firebase.Database.DataSnapshot! snapshot) -> void
Firebase.Database.IExclude
Firebase.Database.IIgnoreExtraProperties
Firebase.Database.ILogger
Firebase.Database.IPropertyName
Firebase.Database.IPropertyName.Value() -> string?
Firebase.Database.IThrowOnExtraProperties
Firebase.Database.IValueEventListener
Firebase.Database.IValueEventListener.OnCancelled(Firebase.Database.DatabaseError! error) -> void
Firebase.Database.IValueEventListener.OnDataChange(Firebase.Database.DataSnapshot! snapshot) -> void
Firebase.Database.IgnoreExtraPropertiesAttribute
Firebase.Database.IgnoreExtraPropertiesAttribute.IgnoreExtraPropertiesAttribute() -> void
Firebase.Database.InternalHelpers
Firebase.Database.InternalHelpers.InternalHelpers() -> void
Firebase.Database.InternalHelpers.InternalHelpers(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Ktx.ChildEvent
Firebase.Database.Ktx.ChildEvent.Added
Firebase.Database.Ktx.ChildEvent.Added.Added(Firebase.Database.DataSnapshot! snapshot, string? previousChildName) -> void
Firebase.Database.Ktx.ChildEvent.Added.Component1() -> Firebase.Database.DataSnapshot!
Firebase.Database.Ktx.ChildEvent.Added.Component2() -> string?
Firebase.Database.Ktx.ChildEvent.Added.Copy(Firebase.Database.DataSnapshot! snapshot, string? previousChildName) -> Firebase.Database.Ktx.ChildEvent.Added!
Firebase.Database.Ktx.ChildEvent.Added.PreviousChildName.get -> string?
Firebase.Database.Ktx.ChildEvent.Added.Snapshot.get -> Firebase.Database.DataSnapshot!
Firebase.Database.Ktx.ChildEvent.Changed
Firebase.Database.Ktx.ChildEvent.Changed.Changed(Firebase.Database.DataSnapshot! snapshot, string? previousChildName) -> void
Firebase.Database.Ktx.ChildEvent.Changed.Component1() -> Firebase.Database.DataSnapshot!
Firebase.Database.Ktx.ChildEvent.Changed.Component2() -> string?
Firebase.Database.Ktx.ChildEvent.Changed.Copy(Firebase.Database.DataSnapshot! snapshot, string? previousChildName) -> Firebase.Database.Ktx.ChildEvent.Changed!
Firebase.Database.Ktx.ChildEvent.Changed.PreviousChildName.get -> string?
Firebase.Database.Ktx.ChildEvent.Changed.Snapshot.get -> Firebase.Database.DataSnapshot!
Firebase.Database.Ktx.ChildEvent.ChildEvent(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Ktx.ChildEvent.Moved
Firebase.Database.Ktx.ChildEvent.Moved.Component1() -> Firebase.Database.DataSnapshot!
Firebase.Database.Ktx.ChildEvent.Moved.Component2() -> string?
Firebase.Database.Ktx.ChildEvent.Moved.Copy(Firebase.Database.DataSnapshot! snapshot, string? previousChildName) -> Firebase.Database.Ktx.ChildEvent.Moved!
Firebase.Database.Ktx.ChildEvent.Moved.Moved(Firebase.Database.DataSnapshot! snapshot, string? previousChildName) -> void
Firebase.Database.Ktx.ChildEvent.Moved.PreviousChildName.get -> string?
Firebase.Database.Ktx.ChildEvent.Moved.Snapshot.get -> Firebase.Database.DataSnapshot!
Firebase.Database.Ktx.ChildEvent.Removed
Firebase.Database.Ktx.ChildEvent.Removed.Component1() -> Firebase.Database.DataSnapshot!
Firebase.Database.Ktx.ChildEvent.Removed.Copy(Firebase.Database.DataSnapshot! snapshot) -> Firebase.Database.Ktx.ChildEvent.Removed!
Firebase.Database.Ktx.ChildEvent.Removed.Removed(Firebase.Database.DataSnapshot! snapshot) -> void
Firebase.Database.Ktx.ChildEvent.Removed.Snapshot.get -> Firebase.Database.DataSnapshot!
Firebase.Database.Ktx.DatabaseKt
Firebase.Database.Ktx.FirebaseDatabaseKtxRegistrar
Firebase.Database.Ktx.FirebaseDatabaseKtxRegistrar.Components.get -> System.Collections.Generic.IList<Firebase.Components.Component!>!
Firebase.Database.Ktx.FirebaseDatabaseKtxRegistrar.FirebaseDatabaseKtxRegistrar() -> void
Firebase.Database.LoggerLevel
Firebase.Database.Logging.AndroidLogger
Firebase.Database.Logging.AndroidLogger.AndroidLogger(Firebase.Database.Logging.LoggerLevel? level, System.Collections.Generic.IList<string!>? enabledComponents) -> void
Firebase.Database.Logging.AndroidLogger.AndroidLogger(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Logging.DefaultLogger
Firebase.Database.Logging.DefaultLogger.DefaultLogger(Firebase.Database.Logging.LoggerLevel? level, System.Collections.Generic.IList<string!>? enabledComponents) -> void
Firebase.Database.Logging.DefaultLogger.DefaultLogger(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Logging.ILogger
Firebase.Database.Logging.ILogger.LogLevel.get -> Firebase.Database.Logging.LoggerLevel?
Firebase.Database.Logging.ILogger.OnLogMessage(Firebase.Database.Logging.LoggerLevel? p0, string? p1, string? p2, long p3) -> void
Firebase.Database.Logging.LogWrapper
Firebase.Database.Logging.LogWrapper.LogWrapper(Firebase.Database.Logging.ILogger? logger, string? component) -> void
Firebase.Database.Logging.LogWrapper.LogWrapper(Firebase.Database.Logging.ILogger? logger, string? component, string? prefix) -> void
Firebase.Database.Logging.LogWrapper.LogWrapper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Logging.LoggerLevel
Firebase.Database.MutableData
Firebase.Database.MutableData.MutableData(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.OnDisconnect
Firebase.Database.OnDisconnect.CancelAsync() -> System.Threading.Tasks.Task!
Firebase.Database.OnDisconnect.OnDisconnect(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.OnDisconnect.RemoveValueAsync() -> System.Threading.Tasks.Task!
Firebase.Database.OnDisconnect.SetValueAsync(Java.Lang.Object! obj) -> System.Threading.Tasks.Task!
Firebase.Database.OnDisconnect.SetValueAsync(Java.Lang.Object! obj, double val) -> System.Threading.Tasks.Task!
Firebase.Database.OnDisconnect.SetValueAsync(Java.Lang.Object! obj, string! key) -> System.Threading.Tasks.Task!
Firebase.Database.OnDisconnect.UpdateChildrenAsync(System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>! map) -> System.Threading.Tasks.Task!
Firebase.Database.PropertyNameAttribute
Firebase.Database.PropertyNameAttribute.PropertyNameAttribute() -> void
Firebase.Database.PropertyNameAttribute.Value.get -> string?
Firebase.Database.PropertyNameAttribute.Value.set -> void
Firebase.Database.Query
Firebase.Database.Query.Params.get -> Firebase.Database.Core.View.QueryParams?
Firebase.Database.Query.Params.set -> void
Firebase.Database.Query.Query(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.ServerValue
Firebase.Database.ServerValue.ServerValue() -> void
Firebase.Database.ServerValue.ServerValue(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Snapshot.BooleanNode
Firebase.Database.Snapshot.BooleanNode.BooleanNode(Java.Lang.Boolean? value, Firebase.Database.Snapshot.INode? priority) -> void
Firebase.Database.Snapshot.BooleanNode.BooleanNode(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Snapshot.ChildKey
Firebase.Database.Snapshot.ChildKey.ChildKey(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Snapshot.ChildrenNode
Firebase.Database.Snapshot.ChildrenNode.ChildVisitor
Firebase.Database.Snapshot.ChildrenNode.ChildVisitor.ChildVisitor() -> void
Firebase.Database.Snapshot.ChildrenNode.ChildVisitor.ChildVisitor(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Snapshot.ChildrenNode.ChildrenNode() -> void
Firebase.Database.Snapshot.ChildrenNode.ChildrenNode(Firebase.Database.Collection.ImmutableSortedMap? children, Firebase.Database.Snapshot.INode? priority) -> void
Firebase.Database.Snapshot.ChildrenNode.ChildrenNode(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Snapshot.ChildrenNode.InterfaceConsts
Firebase.Database.Snapshot.CompoundHash
Firebase.Database.Snapshot.CompoundHash.CompoundHash(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Snapshot.CompoundHash.ISplitStrategy
Firebase.Database.Snapshot.DeferredValueNode
Firebase.Database.Snapshot.DeferredValueNode.DeferredValueNode(System.Collections.Generic.IDictionary<Java.Lang.Object!, Java.Lang.Object!>? value, Firebase.Database.Snapshot.INode? priority) -> void
Firebase.Database.Snapshot.DeferredValueNode.DeferredValueNode(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Snapshot.DoubleNode
Firebase.Database.Snapshot.DoubleNode.DoubleNode(Java.Lang.Double? value, Firebase.Database.Snapshot.INode? priority) -> void
Firebase.Database.Snapshot.DoubleNode.DoubleNode(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Snapshot.EmptyNode
Firebase.Database.Snapshot.EmptyNode.EmptyNode(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Snapshot.INode
Firebase.Database.Snapshot.INode.ChildCount.get -> int
Firebase.Database.Snapshot.INode.GetChild(Firebase.Database.Core.Path? p0) -> Firebase.Database.Snapshot.INode?
Firebase.Database.Snapshot.INode.GetHashRepresentation(Firebase.Database.Snapshot.NodeHashVersion? p0) -> string?
Firebase.Database.Snapshot.INode.GetImmediateChild(Firebase.Database.Snapshot.ChildKey? p0) -> Firebase.Database.Snapshot.INode?
Firebase.Database.Snapshot.INode.GetPredecessorChildKey(Firebase.Database.Snapshot.ChildKey? p0) -> Firebase.Database.Snapshot.ChildKey?
Firebase.Database.Snapshot.INode.GetSuccessorChildKey(Firebase.Database.Snapshot.ChildKey? p0) -> Firebase.Database.Snapshot.ChildKey?
Firebase.Database.Snapshot.INode.GetValue(bool p0) -> Java.Lang.Object?
Firebase.Database.Snapshot.INode.HasChild(Firebase.Database.Snapshot.ChildKey? p0) -> bool
Firebase.Database.Snapshot.INode.Hash.get -> string?
Firebase.Database.Snapshot.INode.IsEmpty.get -> bool
Firebase.Database.Snapshot.INode.IsLeafNode.get -> bool
Firebase.Database.Snapshot.INode.MaxNode.get -> Firebase.Database.Snapshot.ChildrenNode?
Firebase.Database.Snapshot.INode.Priority.get -> Firebase.Database.Snapshot.INode?
Firebase.Database.Snapshot.INode.ReverseIterator() -> Java.Util.IIterator?
Firebase.Database.Snapshot.INode.UpdateChild(Firebase.Database.Core.Path? p0, Firebase.Database.Snapshot.INode? p1) -> Firebase.Database.Snapshot.INode?
Firebase.Database.Snapshot.INode.UpdateImmediateChild(Firebase.Database.Snapshot.ChildKey? p0, Firebase.Database.Snapshot.INode? p1) -> Firebase.Database.Snapshot.INode?
Firebase.Database.Snapshot.INode.UpdatePriority(Firebase.Database.Snapshot.INode? p0) -> Firebase.Database.Snapshot.INode?
Firebase.Database.Snapshot.INode.Value.get -> Java.Lang.Object?
Firebase.Database.Snapshot.Index
Firebase.Database.Snapshot.Index.Index() -> void
Firebase.Database.Snapshot.Index.Index(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Snapshot.IndexedNode
Firebase.Database.Snapshot.IndexedNode.IndexedNode(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Snapshot.KeyIndex
Firebase.Database.Snapshot.KeyIndex.KeyIndex(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Snapshot.LeafNode
Firebase.Database.Snapshot.LeafNode.LeafNode(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Snapshot.LeafNode.LeafType
Firebase.Database.Snapshot.LongNode
Firebase.Database.Snapshot.LongNode.LongNode(Java.Lang.Long? value, Firebase.Database.Snapshot.INode? priority) -> void
Firebase.Database.Snapshot.LongNode.LongNode(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Snapshot.NamedNode
Firebase.Database.Snapshot.NamedNode.Name.get -> Firebase.Database.Snapshot.ChildKey?
Firebase.Database.Snapshot.NamedNode.NamedNode(Firebase.Database.Snapshot.ChildKey? name, Firebase.Database.Snapshot.INode? node) -> void
Firebase.Database.Snapshot.NamedNode.Node.get -> Firebase.Database.Snapshot.INode?
Firebase.Database.Snapshot.Node
Firebase.Database.Snapshot.NodeConsts
Firebase.Database.Snapshot.NodeHashVersion
Firebase.Database.Snapshot.NodeUtilities
Firebase.Database.Snapshot.NodeUtilities.NodeUtilities() -> void
Firebase.Database.Snapshot.NodeUtilities.NodeUtilities(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Snapshot.PathIndex
Firebase.Database.Snapshot.PathIndex.Compare(Firebase.Database.Snapshot.NamedNode? a, Firebase.Database.Snapshot.NamedNode? b) -> int
Firebase.Database.Snapshot.PathIndex.PathIndex(Firebase.Database.Core.Path? indexPath) -> void
Firebase.Database.Snapshot.PriorityIndex
Firebase.Database.Snapshot.PriorityIndex.PriorityIndex(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Snapshot.PriorityUtilities
Firebase.Database.Snapshot.PriorityUtilities.PriorityUtilities() -> void
Firebase.Database.Snapshot.PriorityUtilities.PriorityUtilities(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Snapshot.RangeMerge
Firebase.Database.Snapshot.RangeMerge.RangeMerge(Firebase.Database.Connection.RangeMerge? rangeMerge) -> void
Firebase.Database.Snapshot.RangeMerge.RangeMerge(Firebase.Database.Core.Path? optExclusiveStart, Firebase.Database.Core.Path? optInclusiveEnd, Firebase.Database.Snapshot.INode? snap) -> void
Firebase.Database.Snapshot.RangeMerge.RangeMerge(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Snapshot.StringNode
Firebase.Database.Snapshot.StringNode.StringNode(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Snapshot.StringNode.StringNode(string? value, Firebase.Database.Snapshot.INode? priority) -> void
Firebase.Database.Snapshot.ValueIndex
Firebase.Database.Snapshot.ValueIndex.ValueIndex(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.ThrowOnExtraPropertiesAttribute
Firebase.Database.ThrowOnExtraPropertiesAttribute.ThrowOnExtraPropertiesAttribute() -> void
Firebase.Database.Transaction
Firebase.Database.Transaction.IHandler
Firebase.Database.Transaction.IHandler.DoTransaction(Firebase.Database.MutableData! p0) -> Firebase.Database.Transaction.Result!
Firebase.Database.Transaction.IHandler.OnComplete(Firebase.Database.DatabaseError? p0, bool p1, Firebase.Database.DataSnapshot? p2) -> void
Firebase.Database.Transaction.Result
Firebase.Database.Transaction.Result.Result(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Transaction.Transaction() -> void
Firebase.Database.Transaction.Transaction(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Tubesock.IThreadInitializer
Firebase.Database.Tubesock.IThreadInitializer.SetName(Java.Lang.Thread? p0, string? p1) -> void
Firebase.Database.Tubesock.IWebSocketEventHandler
Firebase.Database.Tubesock.IWebSocketEventHandler.OnClose() -> void
Firebase.Database.Tubesock.IWebSocketEventHandler.OnError(Firebase.Database.Tubesock.WebSocketException? p0) -> void
Firebase.Database.Tubesock.IWebSocketEventHandler.OnLogMessage(string? p0) -> void
Firebase.Database.Tubesock.IWebSocketEventHandler.OnMessage(Firebase.Database.Tubesock.WebSocketMessage? p0) -> void
Firebase.Database.Tubesock.IWebSocketEventHandler.OnOpen() -> void
Firebase.Database.Tubesock.WebSocket
Firebase.Database.Tubesock.WebSocket.WebSocket(Firebase.Database.Connection.ConnectionContext? context, Java.Net.URI? url) -> void
Firebase.Database.Tubesock.WebSocket.WebSocket(Firebase.Database.Connection.ConnectionContext? context, Java.Net.URI? url, string? protocol) -> void
Firebase.Database.Tubesock.WebSocket.WebSocket(Firebase.Database.Connection.ConnectionContext? context, Java.Net.URI? url, string? protocol, System.Collections.Generic.IDictionary<string!, string!>? extraHeaders) -> void
Firebase.Database.Tubesock.WebSocket.WebSocket(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Tubesock.WebSocketException
Firebase.Database.Tubesock.WebSocketException.WebSocketException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Tubesock.WebSocketException.WebSocketException(string? message) -> void
Firebase.Database.Tubesock.WebSocketException.WebSocketException(string? message, Java.Lang.Throwable? t) -> void
Firebase.Database.Tubesock.WebSocketMessage
Firebase.Database.Tubesock.WebSocketMessage.WebSocketMessage(byte[]? message) -> void
Firebase.Database.Tubesock.WebSocketMessage.WebSocketMessage(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Tubesock.WebSocketMessage.WebSocketMessage(string? message) -> void
Firebase.Database.Util.GAuthToken
Firebase.Database.Util.GAuthToken.GAuthToken(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Util.GAuthToken.GAuthToken(string? token, System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? auth) -> void
Firebase.Database.Util.JsonMapper
Firebase.Database.Util.JsonMapper.JsonMapper() -> void
Firebase.Database.Util.JsonMapper.JsonMapper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.ValueEventArgs
Firebase.Database.ValueEventArgs.Error.get -> Firebase.Database.DatabaseError!
Firebase.Database.ValueEventArgs.ValueEventArgs(Firebase.Database.DatabaseError! error) -> void
abstract Firebase.Database.Core.EventRegistration.Clone(Firebase.Database.Core.View.QuerySpec? p0) -> Firebase.Database.Core.EventRegistration?
abstract Firebase.Database.Core.EventRegistration.CreateEvent(Firebase.Database.Core.View.Change? p0, Firebase.Database.Core.View.QuerySpec? p1) -> Firebase.Database.Core.View.DataEvent?
abstract Firebase.Database.Core.EventRegistration.FireCancelEvent(Firebase.Database.DatabaseError? p0) -> void
abstract Firebase.Database.Core.EventRegistration.FireEvent(Firebase.Database.Core.View.DataEvent? p0) -> void
abstract Firebase.Database.Core.EventRegistration.IsSameListener(Firebase.Database.Core.EventRegistration? p0) -> bool
abstract Firebase.Database.Core.EventRegistration.QuerySpec.get -> Firebase.Database.Core.View.QuerySpec?
abstract Firebase.Database.Core.EventRegistration.RespondsTo(Firebase.Database.Core.View.EventEventType? p0) -> bool
abstract Firebase.Database.Core.Operation.Operation.OperationForChild(Firebase.Database.Snapshot.ChildKey? p0) -> Firebase.Database.Core.Operation.Operation?
abstract Firebase.Database.Core.Utilities.DefaultRunLoop.HandleException(Java.Lang.Throwable? p0) -> void
abstract Firebase.Database.Snapshot.ChildrenNode.ChildVisitor.VisitChild(Firebase.Database.Snapshot.ChildKey? p0, Firebase.Database.Snapshot.INode? p1) -> void
abstract Firebase.Database.Snapshot.Index.IsDefinedOn(Firebase.Database.Snapshot.INode? p0) -> bool
abstract Firebase.Database.Snapshot.Index.MakePost(Firebase.Database.Snapshot.ChildKey? p0, Firebase.Database.Snapshot.INode? p1) -> Firebase.Database.Snapshot.NamedNode?
abstract Firebase.Database.Snapshot.Index.MaxPost() -> Firebase.Database.Snapshot.NamedNode?
abstract Firebase.Database.Snapshot.Index.QueryDefinition.get -> string?
abstract Firebase.Database.Snapshot.LeafNode.CompareLeafValues(Java.Lang.Object? p0) -> int
abstract Firebase.Database.Snapshot.LeafNode.Equals(Java.Lang.Object? p0) -> bool
abstract Firebase.Database.Snapshot.LeafNode.GetHashCode() -> int
abstract Firebase.Database.Snapshot.LeafNode.GetLeafType() -> Firebase.Database.Snapshot.LeafNode.LeafType?
const Firebase.Database.BuildConfig.BuildType = "release" -> string!
const Firebase.Database.BuildConfig.Debug = false -> bool
const Firebase.Database.BuildConfig.LibraryPackageName = "com.google.firebase.database" -> string!
const Firebase.Database.BuildConfig.VersionName = "21.0.0" -> string!
const Firebase.Database.Core.Constants.WireProtocolVersion = "5" -> string!
const Firebase.Database.Core.ServerValues.NameOpIncrement = "increment" -> string!
const Firebase.Database.Core.ServerValues.NameOpTimestamp = "timestamp" -> string!
const Firebase.Database.Core.ServerValues.NameSubkeyServervalue = ".sv" -> string!
const Firebase.Database.Core.ValidationPath.MaxPathDepth = 32 -> int
const Firebase.Database.Core.ValidationPath.MaxPathLengthBytes = 768 -> int
const Firebase.Database.DatabaseError.DataStale = -1 -> int
const Firebase.Database.DatabaseError.Disconnected = -4 -> int
const Firebase.Database.DatabaseError.ExpiredToken = -6 -> int
const Firebase.Database.DatabaseError.InvalidToken = -7 -> int
const Firebase.Database.DatabaseError.MaxRetries = -8 -> int
const Firebase.Database.DatabaseError.NetworkError = -24 -> int
const Firebase.Database.DatabaseError.OperationFailed = -2 -> int
const Firebase.Database.DatabaseError.OverriddenBySet = -9 -> int
const Firebase.Database.DatabaseError.PermissionDenied = -3 -> int
const Firebase.Database.DatabaseError.Unavailable = -10 -> int
const Firebase.Database.DatabaseError.UnknownError = -999 -> int
const Firebase.Database.DatabaseError.UserCodeException = -11 -> int
const Firebase.Database.DatabaseError.WriteCanceled = -25 -> int
const Firebase.Database.Snapshot.ChildKey.MaxKeyName = "[MAX_KEY]" -> string!
const Firebase.Database.Snapshot.ChildKey.MinKeyName = "[MIN_NAME]" -> string!
override Firebase.Database.Android.AndroidAppCheckTokenProvider.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Android.AndroidAppCheckTokenProvider.ThresholdClass.get -> nint
override Firebase.Database.Android.AndroidAppCheckTokenProvider.ThresholdType.get -> System.Type!
override Firebase.Database.Android.AndroidAuthTokenProvider.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Android.AndroidAuthTokenProvider.ThresholdClass.get -> nint
override Firebase.Database.Android.AndroidAuthTokenProvider.ThresholdType.get -> System.Type!
override Firebase.Database.Android.AndroidEventTarget.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Android.AndroidEventTarget.ThresholdClass.get -> nint
override Firebase.Database.Android.AndroidEventTarget.ThresholdType.get -> System.Type!
override Firebase.Database.Android.AndroidPlatform.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Android.AndroidPlatform.ThresholdClass.get -> nint
override Firebase.Database.Android.AndroidPlatform.ThresholdType.get -> System.Type!
override Firebase.Database.Android.SqlPersistenceStorageEngine.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Android.SqlPersistenceStorageEngine.ThresholdClass.get -> nint
override Firebase.Database.Android.SqlPersistenceStorageEngine.ThresholdType.get -> System.Type!
override Firebase.Database.BuildConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.ChildEvent.Added.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.ChildEvent.Changed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.ChildEvent.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.ChildEvent.Moved.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.ChildEvent.Removed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.ChildEvent.ThresholdClass.get -> nint
override Firebase.Database.ChildEvent.ThresholdType.get -> System.Type!
override Firebase.Database.Connection.CompoundHash.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Connection.CompoundHash.ThresholdClass.get -> nint
override Firebase.Database.Connection.CompoundHash.ThresholdType.get -> System.Type!
override Firebase.Database.Connection.ConnectionContext.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Connection.ConnectionContext.ThresholdClass.get -> nint
override Firebase.Database.Connection.ConnectionContext.ThresholdType.get -> System.Type!
override Firebase.Database.Connection.ConnectionUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Connection.ConnectionUtils.ThresholdClass.get -> nint
override Firebase.Database.Connection.ConnectionUtils.ThresholdType.get -> System.Type!
override Firebase.Database.Connection.HostInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Connection.HostInfo.ThresholdClass.get -> nint
override Firebase.Database.Connection.HostInfo.ThresholdType.get -> System.Type!
override Firebase.Database.Connection.PersistentConnectionImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Connection.PersistentConnectionImpl.ThresholdClass.get -> nint
override Firebase.Database.Connection.PersistentConnectionImpl.ThresholdType.get -> System.Type!
override Firebase.Database.Connection.RangeMerge.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Connection.RangeMerge.ThresholdClass.get -> nint
override Firebase.Database.Connection.RangeMerge.ThresholdType.get -> System.Type!
override Firebase.Database.Connection.Util.RetryHelper.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Connection.Util.RetryHelper.Builder.ThresholdClass.get -> nint
override Firebase.Database.Connection.Util.RetryHelper.Builder.ThresholdType.get -> System.Type!
override Firebase.Database.Connection.Util.RetryHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Connection.Util.RetryHelper.ThresholdClass.get -> nint
override Firebase.Database.Connection.Util.RetryHelper.ThresholdType.get -> System.Type!
override Firebase.Database.Connection.Util.StringListReader.Close() -> void
override Firebase.Database.Connection.Util.StringListReader.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Connection.Util.StringListReader.Read(char[]? cbuf, int off, int len) -> int
override Firebase.Database.Connection.Util.StringListReader.ThresholdClass.get -> nint
override Firebase.Database.Connection.Util.StringListReader.ThresholdType.get -> System.Type!
override Firebase.Database.Core.ChildEventRegistration.Clone(Firebase.Database.Core.View.QuerySpec? newQuery) -> Firebase.Database.Core.EventRegistration?
override Firebase.Database.Core.ChildEventRegistration.CreateEvent(Firebase.Database.Core.View.Change? change, Firebase.Database.Core.View.QuerySpec? query) -> Firebase.Database.Core.View.DataEvent?
override Firebase.Database.Core.ChildEventRegistration.FireCancelEvent(Firebase.Database.DatabaseError? error) -> void
override Firebase.Database.Core.ChildEventRegistration.FireEvent(Firebase.Database.Core.View.DataEvent? eventData) -> void
override Firebase.Database.Core.ChildEventRegistration.IsSameListener(Firebase.Database.Core.EventRegistration? other) -> bool
override Firebase.Database.Core.ChildEventRegistration.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.ChildEventRegistration.QuerySpec.get -> Firebase.Database.Core.View.QuerySpec?
override Firebase.Database.Core.ChildEventRegistration.RespondsTo(Firebase.Database.Core.View.EventEventType? eventType) -> bool
override Firebase.Database.Core.ChildEventRegistration.ThresholdClass.get -> nint
override Firebase.Database.Core.ChildEventRegistration.ThresholdType.get -> System.Type!
override Firebase.Database.Core.CompoundWrite.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Constants.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Constants.ThresholdClass.get -> nint
override Firebase.Database.Core.Constants.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Context.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Context.ThresholdClass.get -> nint
override Firebase.Database.Core.Context.ThresholdType.get -> System.Type!
override Firebase.Database.Core.DatabaseConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.DatabaseConfig.ThresholdClass.get -> nint
override Firebase.Database.Core.DatabaseConfig.ThresholdType.get -> System.Type!
override Firebase.Database.Core.EventRegistration.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.EventRegistration.ThresholdClass.get -> nint
override Firebase.Database.Core.EventRegistration.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Operation.AckUserWrite.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Operation.AckUserWrite.OperationForChild(Firebase.Database.Snapshot.ChildKey? childKey) -> Firebase.Database.Core.Operation.Operation?
override Firebase.Database.Core.Operation.AckUserWrite.ThresholdClass.get -> nint
override Firebase.Database.Core.Operation.AckUserWrite.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Operation.ListenComplete.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Operation.ListenComplete.OperationForChild(Firebase.Database.Snapshot.ChildKey? childKey) -> Firebase.Database.Core.Operation.Operation?
override Firebase.Database.Core.Operation.ListenComplete.ThresholdClass.get -> nint
override Firebase.Database.Core.Operation.ListenComplete.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Operation.Merge.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Operation.Merge.OperationForChild(Firebase.Database.Snapshot.ChildKey? childKey) -> Firebase.Database.Core.Operation.Operation?
override Firebase.Database.Core.Operation.Merge.ThresholdClass.get -> nint
override Firebase.Database.Core.Operation.Merge.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Operation.Operation.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Operation.Operation.OperationType.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Operation.Operation.ThresholdClass.get -> nint
override Firebase.Database.Core.Operation.Operation.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Operation.OperationSource.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Operation.OperationSource.ThresholdClass.get -> nint
override Firebase.Database.Core.Operation.OperationSource.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Operation.Overwrite.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Operation.Overwrite.OperationForChild(Firebase.Database.Snapshot.ChildKey? childKey) -> Firebase.Database.Core.Operation.Operation?
override Firebase.Database.Core.Operation.Overwrite.ThresholdClass.get -> nint
override Firebase.Database.Core.Operation.Overwrite.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Path.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Path.ThresholdClass.get -> nint
override Firebase.Database.Core.Path.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Persistence.DefaultPersistenceManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Persistence.DefaultPersistenceManager.ThresholdClass.get -> nint
override Firebase.Database.Core.Persistence.DefaultPersistenceManager.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Persistence.LRUCachePolicy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Persistence.LRUCachePolicy.ThresholdClass.get -> nint
override Firebase.Database.Core.Persistence.LRUCachePolicy.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Persistence.NoopPersistenceManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Persistence.NoopPersistenceManager.ThresholdClass.get -> nint
override Firebase.Database.Core.Persistence.NoopPersistenceManager.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Persistence.PruneForest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Persistence.PruneForest.ThresholdClass.get -> nint
override Firebase.Database.Core.Persistence.PruneForest.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Persistence.TrackedQuery.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Persistence.TrackedQueryManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Persistence.TrackedQueryManager.ThresholdClass.get -> nint
override Firebase.Database.Core.Persistence.TrackedQueryManager.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Repo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Repo.ThresholdClass.get -> nint
override Firebase.Database.Core.Repo.ThresholdType.get -> System.Type!
override Firebase.Database.Core.RepoInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.RepoManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.RepoManager.ThresholdClass.get -> nint
override Firebase.Database.Core.RepoManager.ThresholdType.get -> System.Type!
override Firebase.Database.Core.ServerValues.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.ServerValues.ThresholdClass.get -> nint
override Firebase.Database.Core.ServerValues.ThresholdType.get -> System.Type!
override Firebase.Database.Core.SnapshotHolder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.SnapshotHolder.ThresholdClass.get -> nint
override Firebase.Database.Core.SnapshotHolder.ThresholdType.get -> System.Type!
override Firebase.Database.Core.SyncPoint.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.SyncPoint.ThresholdClass.get -> nint
override Firebase.Database.Core.SyncPoint.ThresholdType.get -> System.Type!
override Firebase.Database.Core.SyncTree.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.SyncTree.ThresholdClass.get -> nint
override Firebase.Database.Core.SyncTree.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Tag.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.ThreadBackgroundExecutor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.ThreadBackgroundExecutor.ThresholdClass.get -> nint
override Firebase.Database.Core.ThreadBackgroundExecutor.ThresholdType.get -> System.Type!
override Firebase.Database.Core.UserWriteRecord.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Utilities.DefaultClock.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Utilities.DefaultClock.ThresholdClass.get -> nint
override Firebase.Database.Core.Utilities.DefaultClock.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Utilities.DefaultRunLoop.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Utilities.DefaultRunLoop.ThresholdClass.get -> nint
override Firebase.Database.Core.Utilities.DefaultRunLoop.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Utilities.Encoding.CustomClassMapper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Utilities.Encoding.CustomClassMapper.ThresholdClass.get -> nint
override Firebase.Database.Core.Utilities.Encoding.CustomClassMapper.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Utilities.ImmutableTree.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Utilities.NodeSizeEstimator.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Utilities.NodeSizeEstimator.ThresholdClass.get -> nint
override Firebase.Database.Core.Utilities.NodeSizeEstimator.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Utilities.OffsetClock.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Utilities.OffsetClock.ThresholdClass.get -> nint
override Firebase.Database.Core.Utilities.OffsetClock.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Utilities.Pair.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Utilities.ParsedUrl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Utilities.PushIdGenerator.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Utilities.PushIdGenerator.ThresholdClass.get -> nint
override Firebase.Database.Core.Utilities.PushIdGenerator.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Utilities.Tree.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Utilities.Tree.ThresholdClass.get -> nint
override Firebase.Database.Core.Utilities.Tree.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Utilities.TreeNode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Utilities.TreeNode.ThresholdClass.get -> nint
override Firebase.Database.Core.Utilities.TreeNode.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Utilities.Tuple.NameAndPriority.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Utilities.Tuple.NameAndPriority.ThresholdClass.get -> nint
override Firebase.Database.Core.Utilities.Tuple.NameAndPriority.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Utilities.Tuple.NodeAndPath.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Utilities.Tuple.NodeAndPath.ThresholdClass.get -> nint
override Firebase.Database.Core.Utilities.Tuple.NodeAndPath.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Utilities.Tuple.PathAndId.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Utilities.Tuple.PathAndId.ThresholdClass.get -> nint
override Firebase.Database.Core.Utilities.Tuple.PathAndId.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Utilities.Utilities.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Utilities.Utilities.ThresholdClass.get -> nint
override Firebase.Database.Core.Utilities.Utilities.ThresholdType.get -> System.Type!
override Firebase.Database.Core.Utilities.Validation.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.Utilities.Validation.ThresholdClass.get -> nint
override Firebase.Database.Core.Utilities.Validation.ThresholdType.get -> System.Type!
override Firebase.Database.Core.ValidationPath.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.ValidationPath.ThresholdClass.get -> nint
override Firebase.Database.Core.ValidationPath.ThresholdType.get -> System.Type!
override Firebase.Database.Core.ValueEventRegistration.Clone(Firebase.Database.Core.View.QuerySpec? newQuery) -> Firebase.Database.Core.EventRegistration?
override Firebase.Database.Core.ValueEventRegistration.CreateEvent(Firebase.Database.Core.View.Change? change, Firebase.Database.Core.View.QuerySpec? query) -> Firebase.Database.Core.View.DataEvent?
override Firebase.Database.Core.ValueEventRegistration.FireCancelEvent(Firebase.Database.DatabaseError? error) -> void
override Firebase.Database.Core.ValueEventRegistration.FireEvent(Firebase.Database.Core.View.DataEvent? eventData) -> void
override Firebase.Database.Core.ValueEventRegistration.IsSameListener(Firebase.Database.Core.EventRegistration? other) -> bool
override Firebase.Database.Core.ValueEventRegistration.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.ValueEventRegistration.QuerySpec.get -> Firebase.Database.Core.View.QuerySpec?
override Firebase.Database.Core.ValueEventRegistration.RespondsTo(Firebase.Database.Core.View.EventEventType? eventType) -> bool
override Firebase.Database.Core.ValueEventRegistration.ThresholdClass.get -> nint
override Firebase.Database.Core.ValueEventRegistration.ThresholdType.get -> System.Type!
override Firebase.Database.Core.View.CacheNode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.View.CacheNode.ThresholdClass.get -> nint
override Firebase.Database.Core.View.CacheNode.ThresholdType.get -> System.Type!
override Firebase.Database.Core.View.CancelEvent.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.View.CancelEvent.ThresholdClass.get -> nint
override Firebase.Database.Core.View.CancelEvent.ThresholdType.get -> System.Type!
override Firebase.Database.Core.View.Change.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.View.Change.ThresholdClass.get -> nint
override Firebase.Database.Core.View.Change.ThresholdType.get -> System.Type!
override Firebase.Database.Core.View.DataEvent.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.View.DataEvent.ThresholdClass.get -> nint
override Firebase.Database.Core.View.DataEvent.ThresholdType.get -> System.Type!
override Firebase.Database.Core.View.EventEventType.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.View.EventGenerator.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.View.EventGenerator.ThresholdClass.get -> nint
override Firebase.Database.Core.View.EventGenerator.ThresholdType.get -> System.Type!
override Firebase.Database.Core.View.EventRaiser.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.View.EventRaiser.ThresholdClass.get -> nint
override Firebase.Database.Core.View.EventRaiser.ThresholdType.get -> System.Type!
override Firebase.Database.Core.View.Filter.ChildChangeAccumulator.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.View.Filter.ChildChangeAccumulator.ThresholdClass.get -> nint
override Firebase.Database.Core.View.Filter.ChildChangeAccumulator.ThresholdType.get -> System.Type!
override Firebase.Database.Core.View.Filter.IndexedFilter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.View.Filter.IndexedFilter.ThresholdClass.get -> nint
override Firebase.Database.Core.View.Filter.IndexedFilter.ThresholdType.get -> System.Type!
override Firebase.Database.Core.View.Filter.LimitedFilter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.View.Filter.LimitedFilter.ThresholdClass.get -> nint
override Firebase.Database.Core.View.Filter.LimitedFilter.ThresholdType.get -> System.Type!
override Firebase.Database.Core.View.Filter.RangedFilter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.View.Filter.RangedFilter.ThresholdClass.get -> nint
override Firebase.Database.Core.View.Filter.RangedFilter.ThresholdType.get -> System.Type!
override Firebase.Database.Core.View.QueryParams.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.View.QuerySpec.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.View.View.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.View.View.OperationResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.View.View.OperationResult.ThresholdClass.get -> nint
override Firebase.Database.Core.View.View.OperationResult.ThresholdType.get -> System.Type!
override Firebase.Database.Core.View.View.ThresholdClass.get -> nint
override Firebase.Database.Core.View.View.ThresholdType.get -> System.Type!
override Firebase.Database.Core.View.ViewCache.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.View.ViewCache.ThresholdClass.get -> nint
override Firebase.Database.Core.View.ViewCache.ThresholdType.get -> System.Type!
override Firebase.Database.Core.View.ViewProcessor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.View.ViewProcessor.ProcessorResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.View.ViewProcessor.ProcessorResult.ThresholdClass.get -> nint
override Firebase.Database.Core.View.ViewProcessor.ProcessorResult.ThresholdType.get -> System.Type!
override Firebase.Database.Core.View.ViewProcessor.ThresholdClass.get -> nint
override Firebase.Database.Core.View.ViewProcessor.ThresholdType.get -> System.Type!
override Firebase.Database.Core.WriteTree.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.WriteTree.ThresholdClass.get -> nint
override Firebase.Database.Core.WriteTree.ThresholdType.get -> System.Type!
override Firebase.Database.Core.WriteTreeRef.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.WriteTreeRef.ThresholdClass.get -> nint
override Firebase.Database.Core.WriteTreeRef.ThresholdType.get -> System.Type!
override Firebase.Database.Core.ZombieEventManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Core.ZombieEventManager.ThresholdClass.get -> nint
override Firebase.Database.Core.ZombieEventManager.ThresholdType.get -> System.Type!
override Firebase.Database.DataSnapshot.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.DataSnapshot.ThresholdClass.get -> nint
override Firebase.Database.DataSnapshot.ThresholdType.get -> System.Type!
override Firebase.Database.DatabaseError.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.DatabaseError.ThresholdClass.get -> nint
override Firebase.Database.DatabaseError.ThresholdType.get -> System.Type!
override Firebase.Database.DatabaseException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.DatabaseException.ThresholdClass.get -> nint
override Firebase.Database.DatabaseException.ThresholdType.get -> System.Type!
override Firebase.Database.DatabaseKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.DatabaseReference.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.DatabaseReference.ThresholdClass.get -> nint
override Firebase.Database.DatabaseReference.ThresholdType.get -> System.Type!
override Firebase.Database.DatabaseRegistrar.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.DatabaseRegistrar.ThresholdClass.get -> nint
override Firebase.Database.DatabaseRegistrar.ThresholdType.get -> System.Type!
override Firebase.Database.FirebaseDatabase.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.FirebaseDatabase.ThresholdClass.get -> nint
override Firebase.Database.FirebaseDatabase.ThresholdType.get -> System.Type!
override Firebase.Database.FirebaseDatabaseKtxRegistrar.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.GenericTypeIndicator.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.GenericTypeIndicator.ThresholdClass.get -> nint
override Firebase.Database.GenericTypeIndicator.ThresholdType.get -> System.Type!
override Firebase.Database.InternalHelpers.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.InternalHelpers.ThresholdClass.get -> nint
override Firebase.Database.InternalHelpers.ThresholdType.get -> System.Type!
override Firebase.Database.Ktx.ChildEvent.Added.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Ktx.ChildEvent.Changed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Ktx.ChildEvent.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Ktx.ChildEvent.Moved.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Ktx.ChildEvent.Removed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Ktx.ChildEvent.ThresholdClass.get -> nint
override Firebase.Database.Ktx.ChildEvent.ThresholdType.get -> System.Type!
override Firebase.Database.Ktx.DatabaseKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Ktx.FirebaseDatabaseKtxRegistrar.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.LoggerLevel.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Logging.AndroidLogger.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Logging.AndroidLogger.ThresholdClass.get -> nint
override Firebase.Database.Logging.AndroidLogger.ThresholdType.get -> System.Type!
override Firebase.Database.Logging.DefaultLogger.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Logging.DefaultLogger.ThresholdClass.get -> nint
override Firebase.Database.Logging.DefaultLogger.ThresholdType.get -> System.Type!
override Firebase.Database.Logging.LogWrapper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Logging.LogWrapper.ThresholdClass.get -> nint
override Firebase.Database.Logging.LogWrapper.ThresholdType.get -> System.Type!
override Firebase.Database.Logging.LoggerLevel.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.MutableData.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.MutableData.ThresholdClass.get -> nint
override Firebase.Database.MutableData.ThresholdType.get -> System.Type!
override Firebase.Database.OnDisconnect.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.OnDisconnect.ThresholdClass.get -> nint
override Firebase.Database.OnDisconnect.ThresholdType.get -> System.Type!
override Firebase.Database.Query.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Query.ThresholdClass.get -> nint
override Firebase.Database.Query.ThresholdType.get -> System.Type!
override Firebase.Database.ServerValue.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.ServerValue.ThresholdClass.get -> nint
override Firebase.Database.ServerValue.ThresholdType.get -> System.Type!
override Firebase.Database.Snapshot.BooleanNode.CompareLeafValues(Java.Lang.Object? other) -> int
override Firebase.Database.Snapshot.BooleanNode.Equals(Java.Lang.Object? other) -> bool
override Firebase.Database.Snapshot.BooleanNode.GetHashCode() -> int
override Firebase.Database.Snapshot.BooleanNode.GetLeafType() -> Firebase.Database.Snapshot.LeafNode.LeafType?
override Firebase.Database.Snapshot.BooleanNode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.BooleanNode.ThresholdClass.get -> nint
override Firebase.Database.Snapshot.BooleanNode.ThresholdType.get -> System.Type!
override Firebase.Database.Snapshot.ChildKey.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.ChildKey.ThresholdClass.get -> nint
override Firebase.Database.Snapshot.ChildKey.ThresholdType.get -> System.Type!
override Firebase.Database.Snapshot.ChildrenNode.ChildVisitor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.ChildrenNode.ChildVisitor.ThresholdClass.get -> nint
override Firebase.Database.Snapshot.ChildrenNode.ChildVisitor.ThresholdType.get -> System.Type!
override Firebase.Database.Snapshot.ChildrenNode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.ChildrenNode.ThresholdClass.get -> nint
override Firebase.Database.Snapshot.ChildrenNode.ThresholdType.get -> System.Type!
override Firebase.Database.Snapshot.CompoundHash.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.CompoundHash.ThresholdClass.get -> nint
override Firebase.Database.Snapshot.CompoundHash.ThresholdType.get -> System.Type!
override Firebase.Database.Snapshot.DeferredValueNode.CompareLeafValues(Java.Lang.Object? other) -> int
override Firebase.Database.Snapshot.DeferredValueNode.Equals(Java.Lang.Object? other) -> bool
override Firebase.Database.Snapshot.DeferredValueNode.GetHashCode() -> int
override Firebase.Database.Snapshot.DeferredValueNode.GetLeafType() -> Firebase.Database.Snapshot.LeafNode.LeafType?
override Firebase.Database.Snapshot.DeferredValueNode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.DeferredValueNode.ThresholdClass.get -> nint
override Firebase.Database.Snapshot.DeferredValueNode.ThresholdType.get -> System.Type!
override Firebase.Database.Snapshot.DoubleNode.CompareLeafValues(Java.Lang.Object? other) -> int
override Firebase.Database.Snapshot.DoubleNode.Equals(Java.Lang.Object? other) -> bool
override Firebase.Database.Snapshot.DoubleNode.GetHashCode() -> int
override Firebase.Database.Snapshot.DoubleNode.GetLeafType() -> Firebase.Database.Snapshot.LeafNode.LeafType?
override Firebase.Database.Snapshot.DoubleNode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.DoubleNode.ThresholdClass.get -> nint
override Firebase.Database.Snapshot.DoubleNode.ThresholdType.get -> System.Type!
override Firebase.Database.Snapshot.EmptyNode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.EmptyNode.ThresholdClass.get -> nint
override Firebase.Database.Snapshot.EmptyNode.ThresholdType.get -> System.Type!
override Firebase.Database.Snapshot.Index.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.Index.ThresholdClass.get -> nint
override Firebase.Database.Snapshot.Index.ThresholdType.get -> System.Type!
override Firebase.Database.Snapshot.IndexedNode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.IndexedNode.ThresholdClass.get -> nint
override Firebase.Database.Snapshot.IndexedNode.ThresholdType.get -> System.Type!
override Firebase.Database.Snapshot.KeyIndex.IsDefinedOn(Firebase.Database.Snapshot.INode? a) -> bool
override Firebase.Database.Snapshot.KeyIndex.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.KeyIndex.MakePost(Firebase.Database.Snapshot.ChildKey? name, Firebase.Database.Snapshot.INode? value) -> Firebase.Database.Snapshot.NamedNode?
override Firebase.Database.Snapshot.KeyIndex.MaxPost() -> Firebase.Database.Snapshot.NamedNode?
override Firebase.Database.Snapshot.KeyIndex.QueryDefinition.get -> string?
override Firebase.Database.Snapshot.KeyIndex.ThresholdClass.get -> nint
override Firebase.Database.Snapshot.KeyIndex.ThresholdType.get -> System.Type!
override Firebase.Database.Snapshot.LeafNode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.LeafNode.LeafType.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.LeafNode.ThresholdClass.get -> nint
override Firebase.Database.Snapshot.LeafNode.ThresholdType.get -> System.Type!
override Firebase.Database.Snapshot.LongNode.CompareLeafValues(Java.Lang.Object? other) -> int
override Firebase.Database.Snapshot.LongNode.Equals(Java.Lang.Object? other) -> bool
override Firebase.Database.Snapshot.LongNode.GetHashCode() -> int
override Firebase.Database.Snapshot.LongNode.GetLeafType() -> Firebase.Database.Snapshot.LeafNode.LeafType?
override Firebase.Database.Snapshot.LongNode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.LongNode.ThresholdClass.get -> nint
override Firebase.Database.Snapshot.LongNode.ThresholdType.get -> System.Type!
override Firebase.Database.Snapshot.NamedNode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.NodeHashVersion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.NodeUtilities.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.NodeUtilities.ThresholdClass.get -> nint
override Firebase.Database.Snapshot.NodeUtilities.ThresholdType.get -> System.Type!
override Firebase.Database.Snapshot.PathIndex.IsDefinedOn(Firebase.Database.Snapshot.INode? snapshot) -> bool
override Firebase.Database.Snapshot.PathIndex.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.PathIndex.MakePost(Firebase.Database.Snapshot.ChildKey? name, Firebase.Database.Snapshot.INode? value) -> Firebase.Database.Snapshot.NamedNode?
override Firebase.Database.Snapshot.PathIndex.MaxPost() -> Firebase.Database.Snapshot.NamedNode?
override Firebase.Database.Snapshot.PathIndex.QueryDefinition.get -> string?
override Firebase.Database.Snapshot.PriorityIndex.IsDefinedOn(Firebase.Database.Snapshot.INode? a) -> bool
override Firebase.Database.Snapshot.PriorityIndex.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.PriorityIndex.MakePost(Firebase.Database.Snapshot.ChildKey? name, Firebase.Database.Snapshot.INode? value) -> Firebase.Database.Snapshot.NamedNode?
override Firebase.Database.Snapshot.PriorityIndex.MaxPost() -> Firebase.Database.Snapshot.NamedNode?
override Firebase.Database.Snapshot.PriorityIndex.QueryDefinition.get -> string?
override Firebase.Database.Snapshot.PriorityIndex.ThresholdClass.get -> nint
override Firebase.Database.Snapshot.PriorityIndex.ThresholdType.get -> System.Type!
override Firebase.Database.Snapshot.PriorityUtilities.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.PriorityUtilities.ThresholdClass.get -> nint
override Firebase.Database.Snapshot.PriorityUtilities.ThresholdType.get -> System.Type!
override Firebase.Database.Snapshot.RangeMerge.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.RangeMerge.ThresholdClass.get -> nint
override Firebase.Database.Snapshot.RangeMerge.ThresholdType.get -> System.Type!
override Firebase.Database.Snapshot.StringNode.CompareLeafValues(Java.Lang.Object? other) -> int
override Firebase.Database.Snapshot.StringNode.Equals(Java.Lang.Object? other) -> bool
override Firebase.Database.Snapshot.StringNode.GetHashCode() -> int
override Firebase.Database.Snapshot.StringNode.GetLeafType() -> Firebase.Database.Snapshot.LeafNode.LeafType?
override Firebase.Database.Snapshot.StringNode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.StringNode.ThresholdClass.get -> nint
override Firebase.Database.Snapshot.StringNode.ThresholdType.get -> System.Type!
override Firebase.Database.Snapshot.ValueIndex.IsDefinedOn(Firebase.Database.Snapshot.INode? a) -> bool
override Firebase.Database.Snapshot.ValueIndex.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Snapshot.ValueIndex.MakePost(Firebase.Database.Snapshot.ChildKey? name, Firebase.Database.Snapshot.INode? value) -> Firebase.Database.Snapshot.NamedNode?
override Firebase.Database.Snapshot.ValueIndex.MaxPost() -> Firebase.Database.Snapshot.NamedNode?
override Firebase.Database.Snapshot.ValueIndex.QueryDefinition.get -> string?
override Firebase.Database.Snapshot.ValueIndex.ThresholdClass.get -> nint
override Firebase.Database.Snapshot.ValueIndex.ThresholdType.get -> System.Type!
override Firebase.Database.Transaction.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Transaction.Result.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Transaction.Result.ThresholdClass.get -> nint
override Firebase.Database.Transaction.Result.ThresholdType.get -> System.Type!
override Firebase.Database.Transaction.ThresholdClass.get -> nint
override Firebase.Database.Transaction.ThresholdType.get -> System.Type!
override Firebase.Database.Tubesock.WebSocket.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Tubesock.WebSocket.ThresholdClass.get -> nint
override Firebase.Database.Tubesock.WebSocket.ThresholdType.get -> System.Type!
override Firebase.Database.Tubesock.WebSocketException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Tubesock.WebSocketException.ThresholdClass.get -> nint
override Firebase.Database.Tubesock.WebSocketException.ThresholdType.get -> System.Type!
override Firebase.Database.Tubesock.WebSocketMessage.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Tubesock.WebSocketMessage.ThresholdClass.get -> nint
override Firebase.Database.Tubesock.WebSocketMessage.ThresholdType.get -> System.Type!
override Firebase.Database.Util.GAuthToken.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Util.GAuthToken.ThresholdClass.get -> nint
override Firebase.Database.Util.GAuthToken.ThresholdType.get -> System.Type!
override Firebase.Database.Util.JsonMapper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Util.JsonMapper.ThresholdClass.get -> nint
override Firebase.Database.Util.JsonMapper.ThresholdType.get -> System.Type!
static Firebase.Database.Connection.ConnectionUtils.HardAssert(bool condition) -> void
static Firebase.Database.Connection.ConnectionUtils.HardAssert(bool condition, string? message, params Java.Lang.Object![]? args) -> void
static Firebase.Database.Connection.ConnectionUtils.LongFromObject(Java.Lang.Object? o) -> Java.Lang.Long?
static Firebase.Database.Connection.ConnectionUtils.PathToString(System.Collections.Generic.IList<string!>? segments) -> string?
static Firebase.Database.Connection.ConnectionUtils.StringToPath(string? string) -> System.Collections.Generic.IList<string!>?
static Firebase.Database.Connection.HostInfo.GetConnectionUrl(string? host, bool secure, string? namespace, string? optLastSessionId) -> Java.Net.URI?
static Firebase.Database.Core.CompoundWrite.EmptyWrite() -> Firebase.Database.Core.CompoundWrite?
static Firebase.Database.Core.CompoundWrite.FromChildMerge(System.Collections.Generic.IDictionary<Firebase.Database.Snapshot.ChildKey!, Firebase.Database.Snapshot.INode!>? merge) -> Firebase.Database.Core.CompoundWrite?
static Firebase.Database.Core.CompoundWrite.FromPathMerge(System.Collections.Generic.IDictionary<Firebase.Database.Core.Path!, Firebase.Database.Snapshot.INode!>? merge) -> Firebase.Database.Core.CompoundWrite?
static Firebase.Database.Core.CompoundWrite.FromValue(System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? merge) -> Firebase.Database.Core.CompoundWrite?
static Firebase.Database.Core.Constants.DotInfo.get -> Firebase.Database.Snapshot.ChildKey?
static Firebase.Database.Core.Constants.DotInfoAuthenticated.get -> Firebase.Database.Snapshot.ChildKey?
static Firebase.Database.Core.Constants.DotInfoConnected.get -> Firebase.Database.Snapshot.ChildKey?
static Firebase.Database.Core.Constants.DotInfoServertimeOffset.get -> Firebase.Database.Snapshot.ChildKey?
static Firebase.Database.Core.Operation.Operation.OperationType.AckUserWrite.get -> Firebase.Database.Core.Operation.Operation.OperationType?
static Firebase.Database.Core.Operation.Operation.OperationType.ListenComplete.get -> Firebase.Database.Core.Operation.Operation.OperationType?
static Firebase.Database.Core.Operation.Operation.OperationType.Merge.get -> Firebase.Database.Core.Operation.Operation.OperationType?
static Firebase.Database.Core.Operation.Operation.OperationType.Overwrite.get -> Firebase.Database.Core.Operation.Operation.OperationType?
static Firebase.Database.Core.Operation.Operation.OperationType.ValueOf(string? name) -> Firebase.Database.Core.Operation.Operation.OperationType?
static Firebase.Database.Core.Operation.Operation.OperationType.Values() -> Firebase.Database.Core.Operation.Operation.OperationType![]?
static Firebase.Database.Core.Operation.OperationSource.ForServerTaggedQuery(Firebase.Database.Core.View.QueryParams? queryParams) -> Firebase.Database.Core.Operation.OperationSource?
static Firebase.Database.Core.Operation.OperationSource.Server.get -> Firebase.Database.Core.Operation.OperationSource?
static Firebase.Database.Core.Operation.OperationSource.User.get -> Firebase.Database.Core.Operation.OperationSource?
static Firebase.Database.Core.Path.EmptyPath.get -> Firebase.Database.Core.Path?
static Firebase.Database.Core.Path.GetRelative(Firebase.Database.Core.Path? from, Firebase.Database.Core.Path? to) -> Firebase.Database.Core.Path?
static Firebase.Database.Core.Persistence.CachePolicy.None.get -> Firebase.Database.Core.Persistence.ICachePolicy?
static Firebase.Database.Core.Persistence.LRUCachePolicy.InterfaceConsts.None.get -> Firebase.Database.Core.Persistence.ICachePolicy?
static Firebase.Database.Core.RepoManager.Clear() -> void
static Firebase.Database.Core.RepoManager.CreateRepo(Firebase.Database.Core.Context? ctx, Firebase.Database.Core.RepoInfo? info, Firebase.Database.FirebaseDatabase? database) -> Firebase.Database.Core.Repo?
static Firebase.Database.Core.RepoManager.GetRepo(Firebase.Database.Core.Context? ctx, Firebase.Database.Core.RepoInfo? info) -> Firebase.Database.Core.Repo?
static Firebase.Database.Core.RepoManager.Interrupt(Firebase.Database.Core.Context? ctx) -> void
static Firebase.Database.Core.RepoManager.Interrupt(Firebase.Database.Core.Repo? repo) -> void
static Firebase.Database.Core.RepoManager.Resume(Firebase.Database.Core.Context? ctx) -> void
static Firebase.Database.Core.RepoManager.Resume(Firebase.Database.Core.Repo? repo) -> void
static Firebase.Database.Core.ServerValues.GenerateServerValues(Firebase.Database.Core.Utilities.IClock? clock) -> System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>?
static Firebase.Database.Core.ServerValues.ResolveDeferredValueMerge(Firebase.Database.Core.CompoundWrite? merge, Firebase.Database.Core.SyncTree? syncTree, Firebase.Database.Core.Path? path, System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? serverValues) -> Firebase.Database.Core.CompoundWrite?
static Firebase.Database.Core.ServerValues.ResolveDeferredValueSnapshot(Firebase.Database.Snapshot.INode? data, Firebase.Database.Core.SyncTree? syncTree, Firebase.Database.Core.Path? path, System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? serverValues) -> Firebase.Database.Snapshot.INode?
static Firebase.Database.Core.ServerValues.ResolveDeferredValueSnapshot(Firebase.Database.Snapshot.INode? data, Firebase.Database.Snapshot.INode? existing, System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? serverValues) -> Firebase.Database.Snapshot.INode?
static Firebase.Database.Core.ThreadInitializer.DefaultInstance.get -> Firebase.Database.Core.IThreadInitializer?
static Firebase.Database.Core.Utilities.DefaultRunLoop.MessageForException(Java.Lang.Throwable? t) -> string?
static Firebase.Database.Core.Utilities.Encoding.CustomClassMapper.ConvertToCustomClass(Java.Lang.Object? object, Firebase.Database.GenericTypeIndicator? typeIndicator) -> Java.Lang.Object?
static Firebase.Database.Core.Utilities.Encoding.CustomClassMapper.ConvertToCustomClass(Java.Lang.Object? object, Java.Lang.Class? clazz) -> Java.Lang.Object?
static Firebase.Database.Core.Utilities.Encoding.CustomClassMapper.ConvertToPlainJavaTypes(Java.Lang.Object? object) -> Java.Lang.Object?
static Firebase.Database.Core.Utilities.Encoding.CustomClassMapper.ConvertToPlainJavaTypes(System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? update) -> System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>?
static Firebase.Database.Core.Utilities.ImmutableTree.EmptyInstance() -> Firebase.Database.Core.Utilities.ImmutableTree?
static Firebase.Database.Core.Utilities.NodeSizeEstimator.EstimateSerializedNodeSize(Firebase.Database.Snapshot.INode? node) -> long
static Firebase.Database.Core.Utilities.NodeSizeEstimator.NodeCount(Firebase.Database.Snapshot.INode? node) -> int
static Firebase.Database.Core.Utilities.Predicate.True.get -> Firebase.Database.Core.Utilities.IPredicate?
static Firebase.Database.Core.Utilities.PushIdGenerator.GeneratePushChildName(long now) -> string?
static Firebase.Database.Core.Utilities.PushIdGenerator.Predecessor(string? key) -> string?
static Firebase.Database.Core.Utilities.PushIdGenerator.Successor(string? key) -> string?
static Firebase.Database.Core.Utilities.Utilities.CastOrNull(Java.Lang.Object? o, Java.Lang.Class? clazz) -> Java.Lang.Object?
static Firebase.Database.Core.Utilities.Utilities.CompareInts(int i, int j) -> int
static Firebase.Database.Core.Utilities.Utilities.CompareLongs(long i, long j) -> int
static Firebase.Database.Core.Utilities.Utilities.DoubleToHashString(double value) -> string?
static Firebase.Database.Core.Utilities.Utilities.Equals(Java.Lang.Object? left, Java.Lang.Object? right) -> bool
static Firebase.Database.Core.Utilities.Utilities.GetOrNull(Java.Lang.Object? o, string? key, Java.Lang.Class? clazz) -> Java.Lang.Object?
static Firebase.Database.Core.Utilities.Utilities.HardAssert(bool condition) -> void
static Firebase.Database.Core.Utilities.Utilities.HardAssert(bool condition, string? message) -> void
static Firebase.Database.Core.Utilities.Utilities.ParseUrl(string! url) -> Firebase.Database.Core.Utilities.ParsedUrl?
static Firebase.Database.Core.Utilities.Utilities.Sha1HexDigest(string? input) -> string?
static Firebase.Database.Core.Utilities.Utilities.StringHashV2Representation(string? value) -> string?
static Firebase.Database.Core.Utilities.Utilities.TryParseInt(string? num) -> Java.Lang.Integer?
static Firebase.Database.Core.Utilities.Utilities.WrapOnComplete(Firebase.Database.DatabaseReference.ICompletionListener? optListener) -> Firebase.Database.Core.Utilities.Pair?
static Firebase.Database.Core.Utilities.Validation.ParseAndValidateUpdate(Firebase.Database.Core.Path? path, System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? update) -> System.Collections.Generic.IDictionary<Firebase.Database.Core.Path!, Firebase.Database.Snapshot.INode!>?
static Firebase.Database.Core.Utilities.Validation.ValidateNullableKey(string? key) -> void
static Firebase.Database.Core.Utilities.Validation.ValidatePathString(string? pathString) -> void
static Firebase.Database.Core.Utilities.Validation.ValidateRootPathString(string? pathString) -> void
static Firebase.Database.Core.Utilities.Validation.ValidateWritableKey(string? key) -> void
static Firebase.Database.Core.Utilities.Validation.ValidateWritableObject(Java.Lang.Object? object) -> void
static Firebase.Database.Core.Utilities.Validation.ValidateWritablePath(Firebase.Database.Core.Path? path) -> void
static Firebase.Database.Core.ValidationPath.ValidateWithObject(Firebase.Database.Core.Path? path, Java.Lang.Object? value) -> void
static Firebase.Database.Core.View.Change.ChildAddedChange(Firebase.Database.Snapshot.ChildKey? childKey, Firebase.Database.Snapshot.INode? snapshot) -> Firebase.Database.Core.View.Change?
static Firebase.Database.Core.View.Change.ChildAddedChange(Firebase.Database.Snapshot.ChildKey? childKey, Firebase.Database.Snapshot.IndexedNode? snapshot) -> Firebase.Database.Core.View.Change?
static Firebase.Database.Core.View.Change.ChildChangedChange(Firebase.Database.Snapshot.ChildKey? childKey, Firebase.Database.Snapshot.INode? newSnapshot, Firebase.Database.Snapshot.INode? oldSnapshot) -> Firebase.Database.Core.View.Change?
static Firebase.Database.Core.View.Change.ChildChangedChange(Firebase.Database.Snapshot.ChildKey? childKey, Firebase.Database.Snapshot.IndexedNode? newSnapshot, Firebase.Database.Snapshot.IndexedNode? oldSnapshot) -> Firebase.Database.Core.View.Change?
static Firebase.Database.Core.View.Change.ChildMovedChange(Firebase.Database.Snapshot.ChildKey? childKey, Firebase.Database.Snapshot.INode? snapshot) -> Firebase.Database.Core.View.Change?
static Firebase.Database.Core.View.Change.ChildMovedChange(Firebase.Database.Snapshot.ChildKey? childKey, Firebase.Database.Snapshot.IndexedNode? snapshot) -> Firebase.Database.Core.View.Change?
static Firebase.Database.Core.View.Change.ChildRemovedChange(Firebase.Database.Snapshot.ChildKey? childKey, Firebase.Database.Snapshot.INode? snapshot) -> Firebase.Database.Core.View.Change?
static Firebase.Database.Core.View.Change.ChildRemovedChange(Firebase.Database.Snapshot.ChildKey? childKey, Firebase.Database.Snapshot.IndexedNode? snapshot) -> Firebase.Database.Core.View.Change?
static Firebase.Database.Core.View.Change.ValueChange(Firebase.Database.Snapshot.IndexedNode? snapshot) -> Firebase.Database.Core.View.Change?
static Firebase.Database.Core.View.EventEventType.ChildAdded.get -> Firebase.Database.Core.View.EventEventType?
static Firebase.Database.Core.View.EventEventType.ChildChanged.get -> Firebase.Database.Core.View.EventEventType?
static Firebase.Database.Core.View.EventEventType.ChildMoved.get -> Firebase.Database.Core.View.EventEventType?
static Firebase.Database.Core.View.EventEventType.ChildRemoved.get -> Firebase.Database.Core.View.EventEventType?
static Firebase.Database.Core.View.EventEventType.Value.get -> Firebase.Database.Core.View.EventEventType?
static Firebase.Database.Core.View.EventEventType.ValueOf(string? name) -> Firebase.Database.Core.View.EventEventType?
static Firebase.Database.Core.View.EventEventType.Values() -> Firebase.Database.Core.View.EventEventType![]?
static Firebase.Database.Core.View.QueryParams.DefaultParams.get -> Firebase.Database.Core.View.QueryParams?
static Firebase.Database.Core.View.QueryParams.FromQueryObject(System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? map) -> Firebase.Database.Core.View.QueryParams?
static Firebase.Database.Core.View.QuerySpec.DefaultQueryAtPath(Firebase.Database.Core.Path? path) -> Firebase.Database.Core.View.QuerySpec?
static Firebase.Database.Core.View.QuerySpec.FromPathAndQueryObject(Firebase.Database.Core.Path? path, System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? map) -> Firebase.Database.Core.View.QuerySpec?
static Firebase.Database.Core.ZombieEventManager.Instance.get -> Firebase.Database.Core.ZombieEventManager?
static Firebase.Database.DatabaseError.FromCode(int code) -> Firebase.Database.DatabaseError?
static Firebase.Database.DatabaseError.FromException(Java.Lang.Throwable! e) -> Firebase.Database.DatabaseError!
static Firebase.Database.DatabaseError.FromStatus(string? status) -> Firebase.Database.DatabaseError?
static Firebase.Database.DatabaseError.FromStatus(string? status, string? reason) -> Firebase.Database.DatabaseError?
static Firebase.Database.DatabaseError.FromStatus(string? status, string? reason, string? details) -> Firebase.Database.DatabaseError?
static Firebase.Database.DatabaseKt.Database(Firebase.Firebase! obj, Firebase.FirebaseApp! app) -> Firebase.Database.FirebaseDatabase!
static Firebase.Database.DatabaseKt.Database(Firebase.Firebase! obj, Firebase.FirebaseApp! app, string! url) -> Firebase.Database.FirebaseDatabase!
static Firebase.Database.DatabaseKt.Database(Firebase.Firebase! obj, string! url) -> Firebase.Database.FirebaseDatabase!
static Firebase.Database.DatabaseKt.GetChildEvents(Firebase.Database.Query! obj) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Firebase.Database.DatabaseKt.GetDatabase(Firebase.Firebase! obj) -> Firebase.Database.FirebaseDatabase!
static Firebase.Database.DatabaseKt.GetSnapshots(Firebase.Database.Query! obj) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Firebase.Database.DatabaseReference.GoOffline() -> void
static Firebase.Database.DatabaseReference.GoOnline() -> void
static Firebase.Database.FirebaseDatabase.GetInstance(Firebase.FirebaseApp! app) -> Firebase.Database.FirebaseDatabase!
static Firebase.Database.FirebaseDatabase.GetInstance(Firebase.FirebaseApp! app, string! url) -> Firebase.Database.FirebaseDatabase!
static Firebase.Database.FirebaseDatabase.GetInstance(string! url) -> Firebase.Database.FirebaseDatabase!
static Firebase.Database.FirebaseDatabase.Instance.get -> Firebase.Database.FirebaseDatabase!
static Firebase.Database.FirebaseDatabase.SdkVersion.get -> string!
static Firebase.Database.InternalHelpers.CreateDataSnapshot(Firebase.Database.DatabaseReference? ref, Firebase.Database.Snapshot.IndexedNode? node) -> Firebase.Database.DataSnapshot?
static Firebase.Database.InternalHelpers.CreateDatabaseForTests(Firebase.FirebaseApp? app, Firebase.Database.Core.RepoInfo? repoInfo, Firebase.Database.Core.DatabaseConfig? config) -> Firebase.Database.FirebaseDatabase?
static Firebase.Database.InternalHelpers.CreateMutableData(Firebase.Database.Snapshot.INode? node) -> Firebase.Database.MutableData?
static Firebase.Database.InternalHelpers.CreateReference(Firebase.Database.Core.Repo? repo, Firebase.Database.Core.Path? path) -> Firebase.Database.DatabaseReference?
static Firebase.Database.Ktx.DatabaseKt.GetChildEvents(Firebase.Database.Query! obj) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Firebase.Database.Ktx.DatabaseKt.GetSnapshots(Firebase.Database.Query! obj) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Firebase.Database.LoggerLevel.Debug.get -> Firebase.Database.LoggerLevel?
static Firebase.Database.LoggerLevel.Error.get -> Firebase.Database.LoggerLevel?
static Firebase.Database.LoggerLevel.Info.get -> Firebase.Database.LoggerLevel?
static Firebase.Database.LoggerLevel.None.get -> Firebase.Database.LoggerLevel?
static Firebase.Database.LoggerLevel.ValueOf(string? name) -> Firebase.Database.LoggerLevel?
static Firebase.Database.LoggerLevel.Values() -> Firebase.Database.LoggerLevel![]?
static Firebase.Database.LoggerLevel.Warn.get -> Firebase.Database.LoggerLevel?
static Firebase.Database.Logging.LoggerLevel.Debug.get -> Firebase.Database.Logging.LoggerLevel?
static Firebase.Database.Logging.LoggerLevel.Error.get -> Firebase.Database.Logging.LoggerLevel?
static Firebase.Database.Logging.LoggerLevel.Info.get -> Firebase.Database.Logging.LoggerLevel?
static Firebase.Database.Logging.LoggerLevel.None.get -> Firebase.Database.Logging.LoggerLevel?
static Firebase.Database.Logging.LoggerLevel.ValueOf(string? name) -> Firebase.Database.Logging.LoggerLevel?
static Firebase.Database.Logging.LoggerLevel.Values() -> Firebase.Database.Logging.LoggerLevel![]?
static Firebase.Database.Logging.LoggerLevel.Warn.get -> Firebase.Database.Logging.LoggerLevel?
static Firebase.Database.ServerValue.Increment(double delta) -> Java.Lang.Object!
static Firebase.Database.ServerValue.Increment(long delta) -> Java.Lang.Object!
static Firebase.Database.ServerValue.Timestamp.get -> System.Collections.IDictionary!
static Firebase.Database.Snapshot.ChildKey.FromString(string? key) -> Firebase.Database.Snapshot.ChildKey?
static Firebase.Database.Snapshot.ChildKey.InfoKey.get -> Firebase.Database.Snapshot.ChildKey?
static Firebase.Database.Snapshot.ChildKey.MaxName.get -> Firebase.Database.Snapshot.ChildKey?
static Firebase.Database.Snapshot.ChildKey.MinName.get -> Firebase.Database.Snapshot.ChildKey?
static Firebase.Database.Snapshot.ChildKey.PriorityKey.get -> Firebase.Database.Snapshot.ChildKey?
static Firebase.Database.Snapshot.ChildrenNode.InterfaceConsts.MaxNode.get -> Firebase.Database.Snapshot.ChildrenNode?
static Firebase.Database.Snapshot.ChildrenNode.NameOnlyComparator.get -> Java.Util.IComparator?
static Firebase.Database.Snapshot.ChildrenNode.NameOnlyComparator.set -> void
static Firebase.Database.Snapshot.CompoundHash.FromNode(Firebase.Database.Snapshot.INode? node) -> Firebase.Database.Snapshot.CompoundHash?
static Firebase.Database.Snapshot.CompoundHash.FromNode(Firebase.Database.Snapshot.INode? node, Firebase.Database.Snapshot.CompoundHash.ISplitStrategy? strategy) -> Firebase.Database.Snapshot.CompoundHash?
static Firebase.Database.Snapshot.EmptyNode.Empty() -> Firebase.Database.Snapshot.EmptyNode?
static Firebase.Database.Snapshot.Index.FromQueryDefinition(string? str) -> Firebase.Database.Snapshot.Index?
static Firebase.Database.Snapshot.IndexedNode.From(Firebase.Database.Snapshot.INode? node) -> Firebase.Database.Snapshot.IndexedNode?
static Firebase.Database.Snapshot.IndexedNode.From(Firebase.Database.Snapshot.INode? node, Firebase.Database.Snapshot.Index? index) -> Firebase.Database.Snapshot.IndexedNode?
static Firebase.Database.Snapshot.KeyIndex.Instance.get -> Firebase.Database.Snapshot.KeyIndex?
static Firebase.Database.Snapshot.LeafNode.LeafType.Boolean.get -> Firebase.Database.Snapshot.LeafNode.LeafType?
static Firebase.Database.Snapshot.LeafNode.LeafType.DeferredValue.get -> Firebase.Database.Snapshot.LeafNode.LeafType?
static Firebase.Database.Snapshot.LeafNode.LeafType.Number.get -> Firebase.Database.Snapshot.LeafNode.LeafType?
static Firebase.Database.Snapshot.LeafNode.LeafType.String.get -> Firebase.Database.Snapshot.LeafNode.LeafType?
static Firebase.Database.Snapshot.LeafNode.LeafType.ValueOf(string? name) -> Java.Lang.Enum?
static Firebase.Database.Snapshot.LeafNode.LeafType.Values() -> Firebase.Database.Snapshot.LeafNode.LeafType![]?
static Firebase.Database.Snapshot.NamedNode.MaxNode.get -> Firebase.Database.Snapshot.NamedNode?
static Firebase.Database.Snapshot.NamedNode.MinNode.get -> Firebase.Database.Snapshot.NamedNode?
static Firebase.Database.Snapshot.Node.MaxNode.get -> Firebase.Database.Snapshot.ChildrenNode?
static Firebase.Database.Snapshot.NodeHashVersion.V1.get -> Firebase.Database.Snapshot.NodeHashVersion?
static Firebase.Database.Snapshot.NodeHashVersion.V2.get -> Firebase.Database.Snapshot.NodeHashVersion?
static Firebase.Database.Snapshot.NodeHashVersion.ValueOf(string? name) -> Firebase.Database.Snapshot.NodeHashVersion?
static Firebase.Database.Snapshot.NodeHashVersion.Values() -> Firebase.Database.Snapshot.NodeHashVersion![]?
static Firebase.Database.Snapshot.NodeUtilities.NameAndPriorityCompare(Firebase.Database.Snapshot.ChildKey? aKey, Firebase.Database.Snapshot.INode? aPriority, Firebase.Database.Snapshot.ChildKey? bKey, Firebase.Database.Snapshot.INode? bPriority) -> int
static Firebase.Database.Snapshot.NodeUtilities.NodeFromJSON(Java.Lang.Object? value) -> Firebase.Database.Snapshot.INode?
static Firebase.Database.Snapshot.NodeUtilities.NodeFromJSON(Java.Lang.Object? value, Firebase.Database.Snapshot.INode? priority) -> Firebase.Database.Snapshot.INode?
static Firebase.Database.Snapshot.PriorityIndex.Instance.get -> Firebase.Database.Snapshot.PriorityIndex?
static Firebase.Database.Snapshot.PriorityUtilities.IsValidPriority(Firebase.Database.Snapshot.INode? priority) -> bool
static Firebase.Database.Snapshot.PriorityUtilities.NullPriority() -> Firebase.Database.Snapshot.INode?
static Firebase.Database.Snapshot.PriorityUtilities.ParsePriority(Firebase.Database.Core.Path? nodePath, Java.Lang.Object? value) -> Firebase.Database.Snapshot.INode?
static Firebase.Database.Snapshot.PriorityUtilities.ParsePriority(Java.Lang.Object? value) -> Firebase.Database.Snapshot.INode?
static Firebase.Database.Snapshot.ValueIndex.Instance.get -> Firebase.Database.Snapshot.ValueIndex?
static Firebase.Database.Transaction.Abort() -> Firebase.Database.Transaction.Result!
static Firebase.Database.Transaction.Success(Firebase.Database.MutableData! resultData) -> Firebase.Database.Transaction.Result!
static Firebase.Database.Tubesock.WebSocket.SetThreadFactory(Java.Util.Concurrent.IThreadFactory? threadFactory, Firebase.Database.Tubesock.IThreadInitializer? intializer) -> void
static Firebase.Database.Util.GAuthToken.TryParseFromString(string? rawToken) -> Firebase.Database.Util.GAuthToken?
static Firebase.Database.Util.JsonMapper.ParseJson(string? json) -> System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>?
static Firebase.Database.Util.JsonMapper.ParseJsonValue(string? json) -> Java.Lang.Object?
static Firebase.Database.Util.JsonMapper.SerializeJson(System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? object) -> string?
static Firebase.Database.Util.JsonMapper.SerializeJsonValue(Java.Lang.Object? object) -> string?
virtual Firebase.Database.Android.AndroidAppCheckTokenProvider.AddTokenChangeListener(Java.Util.Concurrent.IExecutorService? executorService, Firebase.Database.Core.ITokenProviderTokenChangeListener? tokenListener) -> void
virtual Firebase.Database.Android.AndroidAppCheckTokenProvider.GetToken(bool forceRefresh, Firebase.Database.Core.ITokenProviderGetTokenCompletionListener! listener) -> void
virtual Firebase.Database.Android.AndroidAppCheckTokenProvider.RemoveTokenChangeListener(Firebase.Database.Core.ITokenProviderTokenChangeListener? tokenListener) -> void
virtual Firebase.Database.Android.AndroidAuthTokenProvider.AddTokenChangeListener(Java.Util.Concurrent.IExecutorService? executorService, Firebase.Database.Core.ITokenProviderTokenChangeListener? tokenListener) -> void
virtual Firebase.Database.Android.AndroidAuthTokenProvider.GetToken(bool forceRefresh, Firebase.Database.Core.ITokenProviderGetTokenCompletionListener! listener) -> void
virtual Firebase.Database.Android.AndroidAuthTokenProvider.RemoveTokenChangeListener(Firebase.Database.Core.ITokenProviderTokenChangeListener? tokenListener) -> void
virtual Firebase.Database.Android.AndroidEventTarget.PostEvent(Java.Lang.IRunnable? r) -> void
virtual Firebase.Database.Android.AndroidEventTarget.Restart() -> void
virtual Firebase.Database.Android.AndroidEventTarget.Shutdown() -> void
virtual Firebase.Database.Android.AndroidPlatform.CreatePersistenceManager(Firebase.Database.Core.Context? firebaseContext, string? firebaseId) -> Firebase.Database.Core.Persistence.IPersistenceManager?
virtual Firebase.Database.Android.AndroidPlatform.GetUserAgent(Firebase.Database.Core.Context? context) -> string?
virtual Firebase.Database.Android.AndroidPlatform.NewEventTarget(Firebase.Database.Core.Context? context) -> Firebase.Database.Core.IEventTarget?
virtual Firebase.Database.Android.AndroidPlatform.NewLogger(Firebase.Database.Core.Context? context, Firebase.Database.Logging.LoggerLevel? component, System.Collections.Generic.IList<string!>? enabledComponents) -> Firebase.Database.Logging.ILogger?
virtual Firebase.Database.Android.AndroidPlatform.NewPersistentConnection(Firebase.Database.Core.Context? context, Firebase.Database.Connection.ConnectionContext? connectionContext, Firebase.Database.Connection.HostInfo? info, Firebase.Database.Connection.IPersistentConnectionDelegate? delegate) -> Firebase.Database.Connection.IPersistentConnection?
virtual Firebase.Database.Android.AndroidPlatform.NewRunLoop(Firebase.Database.Core.Context? ctx) -> Firebase.Database.Core.IRunLoop?
virtual Firebase.Database.Android.AndroidPlatform.PlatformVersion.get -> string?
virtual Firebase.Database.Android.AndroidPlatform.SSLCacheDirectory.get -> Java.IO.File?
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.BeginTransaction() -> void
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.Close() -> void
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.DeleteTrackedQuery(long trackedQueryId) -> void
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.EndTransaction() -> void
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.LoadTrackedQueries() -> System.Collections.Generic.IList<Firebase.Database.Core.Persistence.TrackedQuery!>?
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.LoadTrackedQueryKeys(System.Collections.Generic.ICollection<Java.Lang.Long!>? trackedQueryIds) -> System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>?
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.LoadTrackedQueryKeys(long trackedQueryId) -> System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>?
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.LoadUserWrites() -> System.Collections.Generic.IList<Firebase.Database.Core.UserWriteRecord!>?
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.MergeIntoServerCache(Firebase.Database.Core.Path? path, Firebase.Database.Core.CompoundWrite? children) -> void
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.MergeIntoServerCache(Firebase.Database.Core.Path? path, Firebase.Database.Snapshot.INode? node) -> void
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.OverwriteServerCache(Firebase.Database.Core.Path? path, Firebase.Database.Snapshot.INode? node) -> void
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.PruneCache(Firebase.Database.Core.Path? root, Firebase.Database.Core.Persistence.PruneForest? pruneForest) -> void
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.PurgeCache() -> void
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.RemoveAllUserWrites() -> void
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.RemoveUserWrite(long writeId) -> void
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.ResetPreviouslyActiveTrackedQueries(long lastUse) -> void
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.SaveTrackedQuery(Firebase.Database.Core.Persistence.TrackedQuery? trackedQuery) -> void
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.SaveTrackedQueryKeys(long trackedQueryId, System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>? keys) -> void
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.SaveUserMerge(Firebase.Database.Core.Path? path, Firebase.Database.Core.CompoundWrite? children, long writeId) -> void
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.SaveUserOverwrite(Firebase.Database.Core.Path? path, Firebase.Database.Snapshot.INode? node, long writeId) -> void
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.ServerCache(Firebase.Database.Core.Path? path) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.ServerCacheEstimatedSizeInBytes() -> long
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.SetTransactionSuccessful() -> void
virtual Firebase.Database.Android.SqlPersistenceStorageEngine.UpdateTrackedQueryKeys(long trackedQueryId, System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>? added, System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>? removed) -> void
virtual Firebase.Database.Connection.CompoundHash.Hashes.get -> System.Collections.Generic.IList<string!>?
virtual Firebase.Database.Connection.CompoundHash.Posts.get -> System.Collections.Generic.IList<System.Collections.Generic.IList<string!>!>?
virtual Firebase.Database.Connection.ConnectionContext.AppCheckTokenProvider.get -> Firebase.Database.Connection.IConnectionTokenProvider?
virtual Firebase.Database.Connection.ConnectionContext.ApplicationId.get -> string?
virtual Firebase.Database.Connection.ConnectionContext.AuthTokenProvider.get -> Firebase.Database.Connection.IConnectionTokenProvider?
virtual Firebase.Database.Connection.ConnectionContext.ClientSdkVersion.get -> string?
virtual Firebase.Database.Connection.ConnectionContext.ExecutorService.get -> Java.Util.Concurrent.IScheduledExecutorService?
virtual Firebase.Database.Connection.ConnectionContext.IsPersistenceEnabled.get -> bool
virtual Firebase.Database.Connection.ConnectionContext.Logger.get -> Firebase.Database.Logging.ILogger?
virtual Firebase.Database.Connection.ConnectionContext.SslCacheDirectory.get -> string?
virtual Firebase.Database.Connection.ConnectionContext.UserAgent.get -> string?
virtual Firebase.Database.Connection.HostInfo.Host.get -> string?
virtual Firebase.Database.Connection.HostInfo.IsSecure.get -> bool
virtual Firebase.Database.Connection.HostInfo.Namespace.get -> string?
virtual Firebase.Database.Connection.PersistentConnectionImpl.CompareAndPut(System.Collections.Generic.IList<string!>? path, Java.Lang.Object? data, string? hash, Firebase.Database.Connection.IRequestResultCallback? onComplete) -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.Get(System.Collections.Generic.IList<string!>? path, System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? queryParams) -> Android.Gms.Tasks.Task?
virtual Firebase.Database.Connection.PersistentConnectionImpl.Initialize() -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.InjectConnectionFailure() -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.Interrupt(string? reason) -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.IsInterrupted(string? reason) -> bool
virtual Firebase.Database.Connection.PersistentConnectionImpl.Listen(System.Collections.Generic.IList<string!>? path, System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? queryParams, Firebase.Database.Connection.IListenHashProvider? currentHashFn, Java.Lang.Long? tag, Firebase.Database.Connection.IRequestResultCallback? listener) -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.Merge(System.Collections.Generic.IList<string!>? path, System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? data, Firebase.Database.Connection.IRequestResultCallback? onComplete) -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.OnCacheHost(string? host) -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.OnDataMessage(System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? message) -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.OnDisconnectCancel(System.Collections.Generic.IList<string!>? path, Firebase.Database.Connection.IRequestResultCallback? onComplete) -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.OnDisconnectMerge(System.Collections.Generic.IList<string!>? path, System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? updates, Firebase.Database.Connection.IRequestResultCallback? onComplete) -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.OnDisconnectPut(System.Collections.Generic.IList<string!>? path, Java.Lang.Object? data, Firebase.Database.Connection.IRequestResultCallback? onComplete) -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.OnKill(string? reason) -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.OnReady(long timestamp, string? sessionId) -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.OpenNetworkConnection(string? authToken, string? appCheckToken) -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.PurgeOutstandingWrites() -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.Put(System.Collections.Generic.IList<string!>? path, Java.Lang.Object? data, Firebase.Database.Connection.IRequestResultCallback? onComplete) -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.RefreshAppCheckToken() -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.RefreshAppCheckToken(string? token) -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.RefreshAuthToken() -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.RefreshAuthToken(string? token) -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.Resume(string? reason) -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.Shutdown() -> void
virtual Firebase.Database.Connection.PersistentConnectionImpl.Unlisten(System.Collections.Generic.IList<string!>? path, System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? queryParams) -> void
virtual Firebase.Database.Connection.RangeMerge.OptExclusiveStart.get -> System.Collections.Generic.IList<string!>?
virtual Firebase.Database.Connection.RangeMerge.OptInclusiveEnd.get -> System.Collections.Generic.IList<string!>?
virtual Firebase.Database.Connection.RangeMerge.Snap.get -> Java.Lang.Object?
virtual Firebase.Database.Connection.Util.RetryHelper.Builder.Build() -> Firebase.Database.Connection.Util.RetryHelper?
virtual Firebase.Database.Connection.Util.RetryHelper.Builder.WithJitterFactor(double random) -> Firebase.Database.Connection.Util.RetryHelper.Builder?
virtual Firebase.Database.Connection.Util.RetryHelper.Builder.WithMaxDelay(long delay) -> Firebase.Database.Connection.Util.RetryHelper.Builder?
virtual Firebase.Database.Connection.Util.RetryHelper.Builder.WithMinDelayAfterFailure(long delay) -> Firebase.Database.Connection.Util.RetryHelper.Builder?
virtual Firebase.Database.Connection.Util.RetryHelper.Builder.WithRetryExponent(double exponent) -> Firebase.Database.Connection.Util.RetryHelper.Builder?
virtual Firebase.Database.Connection.Util.RetryHelper.Cancel() -> void
virtual Firebase.Database.Connection.Util.RetryHelper.Retry(Java.Lang.IRunnable? runnable) -> void
virtual Firebase.Database.Connection.Util.RetryHelper.SetMaxDelay() -> void
virtual Firebase.Database.Connection.Util.RetryHelper.SignalSuccess() -> void
virtual Firebase.Database.Connection.Util.StringListReader.AddString(string? string) -> void
virtual Firebase.Database.Connection.Util.StringListReader.Freeze() -> void
virtual Firebase.Database.Core.Context.AppCheckTokenProvider.get -> Firebase.Database.Core.ITokenProvider?
virtual Firebase.Database.Core.Context.AssertUnfrozen() -> void
virtual Firebase.Database.Core.Context.AuthTokenProvider.get -> Firebase.Database.Core.ITokenProvider?
virtual Firebase.Database.Core.Context.ConnectionContext.get -> Firebase.Database.Connection.ConnectionContext?
virtual Firebase.Database.Core.Context.EventTarget.get -> Firebase.Database.Core.IEventTarget?
virtual Firebase.Database.Core.Context.GetLogger(string? component) -> Firebase.Database.Logging.LogWrapper?
virtual Firebase.Database.Core.Context.GetLogger(string? component, string? prefix) -> Firebase.Database.Logging.LogWrapper?
virtual Firebase.Database.Core.Context.IsFrozen.get -> bool
virtual Firebase.Database.Core.Context.IsPersistenceEnabled.get -> bool
virtual Firebase.Database.Core.Context.IsStopped.get -> bool
virtual Firebase.Database.Core.Context.LogLevel.get -> Firebase.Database.Logging.LoggerLevel?
virtual Firebase.Database.Core.Context.Logger.get -> Firebase.Database.Logging.ILogger?
virtual Firebase.Database.Core.Context.NewPersistentConnection(Firebase.Database.Connection.HostInfo? info, Firebase.Database.Connection.IPersistentConnectionDelegate? delegate) -> Firebase.Database.Connection.IPersistentConnection?
virtual Firebase.Database.Core.Context.OptDebugLogComponents.get -> System.Collections.Generic.IList<string!>?
virtual Firebase.Database.Core.Context.PersistenceCacheSizeBytes.get -> long
virtual Firebase.Database.Core.Context.PlatformVersion.get -> string?
virtual Firebase.Database.Core.Context.RequireStarted() -> void
virtual Firebase.Database.Core.Context.RunLoop.get -> Firebase.Database.Core.IRunLoop?
virtual Firebase.Database.Core.Context.SSLCacheDirectory.get -> Java.IO.File?
virtual Firebase.Database.Core.Context.SessionPersistenceKey.get -> string?
virtual Firebase.Database.Core.Context.UserAgent.get -> string?
virtual Firebase.Database.Core.DatabaseConfig.SetAppCheckTokenProvider(Firebase.Database.Core.ITokenProvider? provider) -> void
virtual Firebase.Database.Core.DatabaseConfig.SetAuthTokenProvider(Firebase.Database.Core.ITokenProvider? provider) -> void
virtual Firebase.Database.Core.DatabaseConfig.SetDebugLogComponents(System.Collections.Generic.IList<string!>? debugComponents) -> void
virtual Firebase.Database.Core.DatabaseConfig.SetEventTarget(Firebase.Database.Core.IEventTarget? eventTarget) -> void
virtual Firebase.Database.Core.DatabaseConfig.SetFirebaseApp(Firebase.FirebaseApp? app) -> void
virtual Firebase.Database.Core.DatabaseConfig.SetLogLevel(Firebase.Database.LoggerLevel? logLevel) -> void
virtual Firebase.Database.Core.DatabaseConfig.SetLogger(Firebase.Database.Logging.ILogger? logger) -> void
virtual Firebase.Database.Core.DatabaseConfig.SetPersistenceCacheSizeBytes(long cacheSizeInBytes) -> void
virtual Firebase.Database.Core.DatabaseConfig.SetPersistenceEnabled(bool isEnabled) -> void
virtual Firebase.Database.Core.DatabaseConfig.SetRunLoop(Firebase.Database.Core.IRunLoop? runLoop) -> void
virtual Firebase.Database.Core.DatabaseConfig.SetSessionPersistenceKey(string? sessionKey) -> void
virtual Firebase.Database.Core.EventRegistration.IsUserInitiated.get -> bool
virtual Firebase.Database.Core.EventRegistration.IsUserInitiated.set -> void
virtual Firebase.Database.Core.EventRegistration.IsZombied.get -> bool
virtual Firebase.Database.Core.EventRegistration.SetOnZombied(Firebase.Database.Core.IEventRegistrationZombieListener? listener) -> void
virtual Firebase.Database.Core.EventRegistration.Zombify() -> void
virtual Firebase.Database.Core.Operation.AckUserWrite.AffectedTree.get -> Firebase.Database.Core.Utilities.ImmutableTree?
virtual Firebase.Database.Core.Operation.AckUserWrite.IsRevert.get -> bool
virtual Firebase.Database.Core.Operation.Merge.Children.get -> Firebase.Database.Core.CompoundWrite?
virtual Firebase.Database.Core.Operation.Operation.Path.get -> Firebase.Database.Core.Path?
virtual Firebase.Database.Core.Operation.Operation.Source.get -> Firebase.Database.Core.Operation.OperationSource?
virtual Firebase.Database.Core.Operation.Operation.Type.get -> Firebase.Database.Core.Operation.Operation.OperationType?
virtual Firebase.Database.Core.Operation.OperationSource.IsFromServer.get -> bool
virtual Firebase.Database.Core.Operation.OperationSource.IsFromUser.get -> bool
virtual Firebase.Database.Core.Operation.OperationSource.IsTagged.get -> bool
virtual Firebase.Database.Core.Operation.OperationSource.QueryParams.get -> Firebase.Database.Core.View.QueryParams?
virtual Firebase.Database.Core.Operation.Overwrite.Snapshot.get -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.Path.AsList() -> System.Collections.Generic.IList<string!>?
virtual Firebase.Database.Core.Path.Back.get -> Firebase.Database.Snapshot.ChildKey?
virtual Firebase.Database.Core.Path.Child(Firebase.Database.Core.Path? path) -> Firebase.Database.Core.Path?
virtual Firebase.Database.Core.Path.Child(Firebase.Database.Snapshot.ChildKey? child) -> Firebase.Database.Core.Path?
virtual Firebase.Database.Core.Path.CompareTo(Firebase.Database.Core.Path? other) -> int
virtual Firebase.Database.Core.Path.CompareTo(Java.Lang.Object? rhs) -> int
virtual Firebase.Database.Core.Path.Contains(Firebase.Database.Core.Path? other) -> bool
virtual Firebase.Database.Core.Path.Front.get -> Firebase.Database.Snapshot.ChildKey?
virtual Firebase.Database.Core.Path.IsEmpty.get -> bool
virtual Firebase.Database.Core.Path.Iterator() -> Java.Util.IIterator?
virtual Firebase.Database.Core.Path.Parent.get -> Firebase.Database.Core.Path?
virtual Firebase.Database.Core.Path.PopFront() -> Firebase.Database.Core.Path?
virtual Firebase.Database.Core.Path.Size() -> int
virtual Firebase.Database.Core.Path.WireFormat() -> string?
virtual Firebase.Database.Core.Persistence.DefaultPersistenceManager.ApplyUserWriteToServerCache(Firebase.Database.Core.Path? path, Firebase.Database.Core.CompoundWrite? merge) -> void
virtual Firebase.Database.Core.Persistence.DefaultPersistenceManager.ApplyUserWriteToServerCache(Firebase.Database.Core.Path? path, Firebase.Database.Snapshot.INode? node) -> void
virtual Firebase.Database.Core.Persistence.DefaultPersistenceManager.LoadUserWrites() -> System.Collections.Generic.IList<Firebase.Database.Core.UserWriteRecord!>?
virtual Firebase.Database.Core.Persistence.DefaultPersistenceManager.RemoveAllUserWrites() -> void
virtual Firebase.Database.Core.Persistence.DefaultPersistenceManager.RemoveUserWrite(long writeId) -> void
virtual Firebase.Database.Core.Persistence.DefaultPersistenceManager.RunInTransaction(Java.Util.Concurrent.ICallable? callable) -> Java.Lang.Object?
virtual Firebase.Database.Core.Persistence.DefaultPersistenceManager.SaveUserMerge(Firebase.Database.Core.Path? path, Firebase.Database.Core.CompoundWrite? children, long writeId) -> void
virtual Firebase.Database.Core.Persistence.DefaultPersistenceManager.SaveUserOverwrite(Firebase.Database.Core.Path? path, Firebase.Database.Snapshot.INode? node, long writeId) -> void
virtual Firebase.Database.Core.Persistence.DefaultPersistenceManager.ServerCache(Firebase.Database.Core.View.QuerySpec? query) -> Firebase.Database.Core.View.CacheNode?
virtual Firebase.Database.Core.Persistence.DefaultPersistenceManager.SetQueryActive(Firebase.Database.Core.View.QuerySpec? query) -> void
virtual Firebase.Database.Core.Persistence.DefaultPersistenceManager.SetQueryComplete(Firebase.Database.Core.View.QuerySpec? query) -> void
virtual Firebase.Database.Core.Persistence.DefaultPersistenceManager.SetQueryInactive(Firebase.Database.Core.View.QuerySpec? query) -> void
virtual Firebase.Database.Core.Persistence.DefaultPersistenceManager.SetTrackedQueryKeys(Firebase.Database.Core.View.QuerySpec? query, System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>? keys) -> void
virtual Firebase.Database.Core.Persistence.DefaultPersistenceManager.UpdateServerCache(Firebase.Database.Core.Path? path, Firebase.Database.Core.CompoundWrite? children) -> void
virtual Firebase.Database.Core.Persistence.DefaultPersistenceManager.UpdateServerCache(Firebase.Database.Core.View.QuerySpec? query, Firebase.Database.Snapshot.INode? node) -> void
virtual Firebase.Database.Core.Persistence.DefaultPersistenceManager.UpdateTrackedQueryKeys(Firebase.Database.Core.View.QuerySpec? query, System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>? added, System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>? removed) -> void
virtual Firebase.Database.Core.Persistence.LRUCachePolicy.MaxNumberOfQueriesToKeep.get -> long
virtual Firebase.Database.Core.Persistence.LRUCachePolicy.PercentOfQueriesToPruneAtOnce.get -> float
virtual Firebase.Database.Core.Persistence.LRUCachePolicy.ShouldCheckCacheSize(long serverUpdatesSinceLastCheck) -> bool
virtual Firebase.Database.Core.Persistence.LRUCachePolicy.ShouldPrune(long currentSizeBytes, long countOfPrunableQueries) -> bool
virtual Firebase.Database.Core.Persistence.NoopPersistenceManager.ApplyUserWriteToServerCache(Firebase.Database.Core.Path? path, Firebase.Database.Core.CompoundWrite? merge) -> void
virtual Firebase.Database.Core.Persistence.NoopPersistenceManager.ApplyUserWriteToServerCache(Firebase.Database.Core.Path? path, Firebase.Database.Snapshot.INode? node) -> void
virtual Firebase.Database.Core.Persistence.NoopPersistenceManager.LoadUserWrites() -> System.Collections.Generic.IList<Firebase.Database.Core.UserWriteRecord!>?
virtual Firebase.Database.Core.Persistence.NoopPersistenceManager.RemoveAllUserWrites() -> void
virtual Firebase.Database.Core.Persistence.NoopPersistenceManager.RemoveUserWrite(long writeId) -> void
virtual Firebase.Database.Core.Persistence.NoopPersistenceManager.RunInTransaction(Java.Util.Concurrent.ICallable? callable) -> Java.Lang.Object?
virtual Firebase.Database.Core.Persistence.NoopPersistenceManager.SaveUserMerge(Firebase.Database.Core.Path? path, Firebase.Database.Core.CompoundWrite? children, long writeId) -> void
virtual Firebase.Database.Core.Persistence.NoopPersistenceManager.SaveUserOverwrite(Firebase.Database.Core.Path? path, Firebase.Database.Snapshot.INode? node, long writeId) -> void
virtual Firebase.Database.Core.Persistence.NoopPersistenceManager.ServerCache(Firebase.Database.Core.View.QuerySpec? query) -> Firebase.Database.Core.View.CacheNode?
virtual Firebase.Database.Core.Persistence.NoopPersistenceManager.SetQueryActive(Firebase.Database.Core.View.QuerySpec? query) -> void
virtual Firebase.Database.Core.Persistence.NoopPersistenceManager.SetQueryComplete(Firebase.Database.Core.View.QuerySpec? query) -> void
virtual Firebase.Database.Core.Persistence.NoopPersistenceManager.SetQueryInactive(Firebase.Database.Core.View.QuerySpec? query) -> void
virtual Firebase.Database.Core.Persistence.NoopPersistenceManager.SetTrackedQueryKeys(Firebase.Database.Core.View.QuerySpec? query, System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>? keys) -> void
virtual Firebase.Database.Core.Persistence.NoopPersistenceManager.UpdateServerCache(Firebase.Database.Core.Path? path, Firebase.Database.Core.CompoundWrite? children) -> void
virtual Firebase.Database.Core.Persistence.NoopPersistenceManager.UpdateServerCache(Firebase.Database.Core.View.QuerySpec? query, Firebase.Database.Snapshot.INode? node) -> void
virtual Firebase.Database.Core.Persistence.NoopPersistenceManager.UpdateTrackedQueryKeys(Firebase.Database.Core.View.QuerySpec? query, System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>? added, System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>? removed) -> void
virtual Firebase.Database.Core.Persistence.PruneForest.AffectsPath(Firebase.Database.Core.Path? path) -> bool
virtual Firebase.Database.Core.Persistence.PruneForest.Child(Firebase.Database.Core.Path? path) -> Firebase.Database.Core.Persistence.PruneForest?
virtual Firebase.Database.Core.Persistence.PruneForest.Child(Firebase.Database.Snapshot.ChildKey? key) -> Firebase.Database.Core.Persistence.PruneForest?
virtual Firebase.Database.Core.Persistence.PruneForest.FoldKeptNodes(Java.Lang.Object? startValue, Firebase.Database.Core.Utilities.ImmutableTree.ITreeVisitor? treeVisitor) -> Java.Lang.Object?
virtual Firebase.Database.Core.Persistence.PruneForest.Keep(Firebase.Database.Core.Path? path) -> Firebase.Database.Core.Persistence.PruneForest?
virtual Firebase.Database.Core.Persistence.PruneForest.KeepAll(Firebase.Database.Core.Path? path, System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>? children) -> Firebase.Database.Core.Persistence.PruneForest?
virtual Firebase.Database.Core.Persistence.PruneForest.Prune(Firebase.Database.Core.Path? path) -> Firebase.Database.Core.Persistence.PruneForest?
virtual Firebase.Database.Core.Persistence.PruneForest.PruneAll(Firebase.Database.Core.Path? path, System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>? children) -> Firebase.Database.Core.Persistence.PruneForest?
virtual Firebase.Database.Core.Persistence.PruneForest.PrunesAnything() -> bool
virtual Firebase.Database.Core.Persistence.PruneForest.ShouldKeep(Firebase.Database.Core.Path? path) -> bool
virtual Firebase.Database.Core.Persistence.PruneForest.ShouldPruneUnkeptDescendants(Firebase.Database.Core.Path? path) -> bool
virtual Firebase.Database.Core.Persistence.TrackedQueryManager.CountOfPrunableQueries() -> long
virtual Firebase.Database.Core.Persistence.TrackedQueryManager.EnsureCompleteTrackedQuery(Firebase.Database.Core.Path? path) -> void
virtual Firebase.Database.Core.Persistence.TrackedQueryManager.FindTrackedQuery(Firebase.Database.Core.View.QuerySpec? query) -> Firebase.Database.Core.Persistence.TrackedQuery?
virtual Firebase.Database.Core.Persistence.TrackedQueryManager.GetKnownCompleteChildren(Firebase.Database.Core.Path? path) -> System.Collections.Generic.ICollection<Firebase.Database.Snapshot.ChildKey!>?
virtual Firebase.Database.Core.Persistence.TrackedQueryManager.HasActiveDefaultQuery(Firebase.Database.Core.Path? path) -> bool
virtual Firebase.Database.Core.Persistence.TrackedQueryManager.IsQueryComplete(Firebase.Database.Core.View.QuerySpec? query) -> bool
virtual Firebase.Database.Core.Persistence.TrackedQueryManager.PruneOldQueries(Firebase.Database.Core.Persistence.ICachePolicy? cachePolicy) -> Firebase.Database.Core.Persistence.PruneForest?
virtual Firebase.Database.Core.Persistence.TrackedQueryManager.RemoveTrackedQuery(Firebase.Database.Core.View.QuerySpec? query) -> void
virtual Firebase.Database.Core.Persistence.TrackedQueryManager.SetQueriesComplete(Firebase.Database.Core.Path? path) -> void
virtual Firebase.Database.Core.Persistence.TrackedQueryManager.SetQueryActive(Firebase.Database.Core.View.QuerySpec? query) -> void
virtual Firebase.Database.Core.Persistence.TrackedQueryManager.SetQueryCompleteIfExists(Firebase.Database.Core.View.QuerySpec? query) -> void
virtual Firebase.Database.Core.Persistence.TrackedQueryManager.SetQueryInactive(Firebase.Database.Core.View.QuerySpec? query) -> void
virtual Firebase.Database.Core.Repo.AddEventCallback(Firebase.Database.Core.EventRegistration? eventRegistration) -> void
virtual Firebase.Database.Core.Repo.Database.get -> Firebase.Database.FirebaseDatabase?
virtual Firebase.Database.Core.Repo.GetValue(Firebase.Database.Query? query) -> Android.Gms.Tasks.Task?
virtual Firebase.Database.Core.Repo.KeepSynced(Firebase.Database.Core.View.QuerySpec? query, bool keep) -> void
virtual Firebase.Database.Core.Repo.KeepSynced(Firebase.Database.Core.View.QuerySpec? query, bool keep, bool skipDedup) -> void
virtual Firebase.Database.Core.Repo.OnConnect() -> void
virtual Firebase.Database.Core.Repo.OnConnectionStatus(bool connectionOk) -> void
virtual Firebase.Database.Core.Repo.OnDataUpdate(System.Collections.Generic.IList<string!>? pathSegments, Java.Lang.Object? message, bool isMerge, Java.Lang.Long? optTag) -> void
virtual Firebase.Database.Core.Repo.OnDisconnect() -> void
virtual Firebase.Database.Core.Repo.OnDisconnectCancel(Firebase.Database.Core.Path? path, Firebase.Database.DatabaseReference.ICompletionListener? onComplete) -> void
virtual Firebase.Database.Core.Repo.OnDisconnectSetValue(Firebase.Database.Core.Path? path, Firebase.Database.Snapshot.INode? newValue, Firebase.Database.DatabaseReference.ICompletionListener? onComplete) -> void
virtual Firebase.Database.Core.Repo.OnDisconnectUpdate(Firebase.Database.Core.Path? path, System.Collections.Generic.IDictionary<Firebase.Database.Core.Path!, Firebase.Database.Snapshot.INode!>? newChildren, Firebase.Database.DatabaseReference.ICompletionListener? listener, System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? unParsedUpdates) -> void
virtual Firebase.Database.Core.Repo.OnRangeMergeUpdate(System.Collections.Generic.IList<string!>? pathSegments, System.Collections.Generic.IList<Firebase.Database.Connection.RangeMerge!>? merges, Java.Lang.Long? tagNumber) -> void
virtual Firebase.Database.Core.Repo.OnServerInfoUpdate(Firebase.Database.Snapshot.ChildKey? key, Java.Lang.Object? value) -> void
virtual Firebase.Database.Core.Repo.OnServerInfoUpdate(System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? updates) -> void
virtual Firebase.Database.Core.Repo.PostEvent(Java.Lang.IRunnable? r) -> void
virtual Firebase.Database.Core.Repo.PurgeOutstandingWrites() -> void
virtual Firebase.Database.Core.Repo.RemoveEventCallback(Firebase.Database.Core.EventRegistration? eventRegistration) -> void
virtual Firebase.Database.Core.Repo.RepoInfo.get -> Firebase.Database.Core.RepoInfo?
virtual Firebase.Database.Core.Repo.ScheduleDelayed(Java.Lang.IRunnable? r, long millis) -> void
virtual Firebase.Database.Core.Repo.ScheduleNow(Java.Lang.IRunnable? r) -> void
virtual Firebase.Database.Core.Repo.ServerTime.get -> long
virtual Firebase.Database.Core.Repo.SetHijackHash(bool hijackHash) -> void
virtual Firebase.Database.Core.Repo.SetValue(Firebase.Database.Core.Path? path, Firebase.Database.Snapshot.INode? newValueUnresolved, Firebase.Database.DatabaseReference.ICompletionListener? onComplete) -> void
virtual Firebase.Database.Core.Repo.StartTransaction(Firebase.Database.Core.Path? path, Firebase.Database.Transaction.IHandler? handler, bool applyLocally) -> void
virtual Firebase.Database.Core.Repo.UpdateChildren(Firebase.Database.Core.Path? path, Firebase.Database.Core.CompoundWrite? updates, Firebase.Database.DatabaseReference.ICompletionListener? onComplete, System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? unParsedUpdates) -> void
virtual Firebase.Database.Core.SnapshotHolder.GetNode(Firebase.Database.Core.Path? path) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.SnapshotHolder.RootNode.get -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.SnapshotHolder.Update(Firebase.Database.Core.Path? path, Firebase.Database.Snapshot.INode? node) -> void
virtual Firebase.Database.Core.SyncPoint.AddEventRegistration(Firebase.Database.Core.EventRegistration? eventRegistration, Firebase.Database.Core.WriteTreeRef? writesCache, Firebase.Database.Core.View.CacheNode? serverCache) -> System.Collections.Generic.IList<Firebase.Database.Core.View.DataEvent!>?
virtual Firebase.Database.Core.SyncPoint.ApplyOperation(Firebase.Database.Core.Operation.Operation? operation, Firebase.Database.Core.WriteTreeRef? writesCache, Firebase.Database.Snapshot.INode? optCompleteServerCache) -> System.Collections.Generic.IList<Firebase.Database.Core.View.DataEvent!>?
virtual Firebase.Database.Core.SyncPoint.CompleteView.get -> Firebase.Database.Core.View.View?
virtual Firebase.Database.Core.SyncPoint.GetCompleteServerCache(Firebase.Database.Core.Path? path) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.SyncPoint.GetView(Firebase.Database.Core.View.QuerySpec? query, Firebase.Database.Core.WriteTreeRef? writesCache, Firebase.Database.Core.View.CacheNode? serverCache) -> Firebase.Database.Core.View.View?
virtual Firebase.Database.Core.SyncPoint.HasCompleteView.get -> bool
virtual Firebase.Database.Core.SyncPoint.IsEmpty.get -> bool
virtual Firebase.Database.Core.SyncPoint.QueryViews.get -> System.Collections.Generic.IList<Firebase.Database.Core.View.View!>?
virtual Firebase.Database.Core.SyncPoint.RemoveEventRegistration(Firebase.Database.Core.View.QuerySpec? query, Firebase.Database.Core.EventRegistration? eventRegistration, Firebase.Database.DatabaseError? cancelError) -> Firebase.Database.Core.Utilities.Pair?
virtual Firebase.Database.Core.SyncPoint.ViewExistsForQuery(Firebase.Database.Core.View.QuerySpec? query) -> bool
virtual Firebase.Database.Core.SyncPoint.ViewForQuery(Firebase.Database.Core.View.QuerySpec? query) -> Firebase.Database.Core.View.View?
virtual Firebase.Database.Core.SyncTree.AckUserWrite(long writeId, bool revert, bool persist, Firebase.Database.Core.Utilities.IClock? serverClock) -> System.Collections.Generic.IList<Firebase.Database.Core.View.IEvent!>?
virtual Firebase.Database.Core.SyncTree.AddEventRegistration(Firebase.Database.Core.EventRegistration? eventRegistration) -> System.Collections.Generic.IList<Firebase.Database.Core.View.IEvent!>?
virtual Firebase.Database.Core.SyncTree.AddEventRegistration(Firebase.Database.Core.EventRegistration? eventRegistration, bool skipListenerSetup) -> System.Collections.Generic.IList<Firebase.Database.Core.View.IEvent!>?
virtual Firebase.Database.Core.SyncTree.ApplyListenComplete(Firebase.Database.Core.Path? path) -> System.Collections.Generic.IList<Firebase.Database.Core.View.IEvent!>?
virtual Firebase.Database.Core.SyncTree.ApplyServerMerge(Firebase.Database.Core.Path? path, System.Collections.Generic.IDictionary<Firebase.Database.Core.Path!, Firebase.Database.Snapshot.INode!>? changedChildren) -> System.Collections.Generic.IList<Firebase.Database.Core.View.IEvent!>?
virtual Firebase.Database.Core.SyncTree.ApplyServerOverwrite(Firebase.Database.Core.Path? path, Firebase.Database.Snapshot.INode? newData) -> System.Collections.Generic.IList<Firebase.Database.Core.View.IEvent!>?
virtual Firebase.Database.Core.SyncTree.ApplyServerRangeMerges(Firebase.Database.Core.Path? path, System.Collections.Generic.IList<Firebase.Database.Snapshot.RangeMerge!>? rangeMerges) -> System.Collections.Generic.IList<Firebase.Database.Core.View.IEvent!>?
virtual Firebase.Database.Core.SyncTree.ApplyTaggedListenComplete(Firebase.Database.Core.Tag? tag) -> System.Collections.Generic.IList<Firebase.Database.Core.View.IEvent!>?
virtual Firebase.Database.Core.SyncTree.ApplyTaggedQueryMerge(Firebase.Database.Core.Path? path, System.Collections.Generic.IDictionary<Firebase.Database.Core.Path!, Firebase.Database.Snapshot.INode!>? changedChildren, Firebase.Database.Core.Tag? tag) -> System.Collections.Generic.IList<Firebase.Database.Core.View.IEvent!>?
virtual Firebase.Database.Core.SyncTree.ApplyTaggedQueryOverwrite(Firebase.Database.Core.Path? path, Firebase.Database.Snapshot.INode? snap, Firebase.Database.Core.Tag? tag) -> System.Collections.Generic.IList<Firebase.Database.Core.View.IEvent!>?
virtual Firebase.Database.Core.SyncTree.ApplyTaggedRangeMerges(Firebase.Database.Core.Path? path, System.Collections.Generic.IList<Firebase.Database.Snapshot.RangeMerge!>? rangeMerges, Firebase.Database.Core.Tag? tag) -> System.Collections.Generic.IList<Firebase.Database.Core.View.IEvent!>?
virtual Firebase.Database.Core.SyncTree.ApplyUserMerge(Firebase.Database.Core.Path? path, Firebase.Database.Core.CompoundWrite? unresolvedChildren, Firebase.Database.Core.CompoundWrite? children, long writeId, bool persist) -> System.Collections.Generic.IList<Firebase.Database.Core.View.IEvent!>?
virtual Firebase.Database.Core.SyncTree.ApplyUserOverwrite(Firebase.Database.Core.Path? path, Firebase.Database.Snapshot.INode? newDataUnresolved, Firebase.Database.Snapshot.INode? newData, long writeId, bool visible, bool persist) -> System.Collections.Generic.IList<Firebase.Database.Core.View.IEvent!>?
virtual Firebase.Database.Core.SyncTree.CalcCompleteEventCache(Firebase.Database.Core.Path? path, System.Collections.Generic.IList<Java.Lang.Long!>? writeIdsToExclude) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.SyncTree.CalcCompleteEventCacheFromRoot(Firebase.Database.Core.Path? path, System.Collections.Generic.IList<Java.Lang.Long!>? writeIdsToExclude) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.SyncTree.CompletionHandler.Invoke(Firebase.Database.DatabaseError? p0) -> System.Collections.Generic.IList<Firebase.Database.Core.View.IEvent!>?
virtual Firebase.Database.Core.SyncTree.GetServerValue(Firebase.Database.Core.View.QuerySpec? query) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.SyncTree.IsEmpty.get -> bool
virtual Firebase.Database.Core.SyncTree.KeepSynced(Firebase.Database.Core.View.QuerySpec? query, bool keep) -> void
virtual Firebase.Database.Core.SyncTree.KeepSynced(Firebase.Database.Core.View.QuerySpec? query, bool keep, bool skipDedup) -> void
virtual Firebase.Database.Core.SyncTree.PersistenceServerCache(Firebase.Database.Query? query) -> Firebase.Database.DataSnapshot?
virtual Firebase.Database.Core.SyncTree.RemoveAllEventRegistrations(Firebase.Database.Core.View.QuerySpec? query, Firebase.Database.DatabaseError? error) -> System.Collections.Generic.IList<Firebase.Database.Core.View.IEvent!>?
virtual Firebase.Database.Core.SyncTree.RemoveAllWrites() -> System.Collections.Generic.IList<Firebase.Database.Core.View.IEvent!>?
virtual Firebase.Database.Core.SyncTree.RemoveEventRegistration(Firebase.Database.Core.EventRegistration? eventRegistration) -> System.Collections.Generic.IList<Firebase.Database.Core.View.IEvent!>?
virtual Firebase.Database.Core.SyncTree.RemoveEventRegistration(Firebase.Database.Core.EventRegistration? eventRegistration, bool skipDedup) -> System.Collections.Generic.IList<Firebase.Database.Core.View.IEvent!>?
virtual Firebase.Database.Core.SyncTree.SetQueryActive(Firebase.Database.Core.View.QuerySpec? query) -> void
virtual Firebase.Database.Core.SyncTree.SetQueryInactive(Firebase.Database.Core.View.QuerySpec? query) -> void
virtual Firebase.Database.Core.SyncTree.TagForQuery(Firebase.Database.Core.View.QuerySpec? query) -> Firebase.Database.Core.Tag?
virtual Firebase.Database.Core.Utilities.DefaultClock.Millis() -> long
virtual Firebase.Database.Core.Utilities.DefaultRunLoop.ExecutorService.get -> Java.Util.Concurrent.IScheduledExecutorService?
virtual Firebase.Database.Core.Utilities.DefaultRunLoop.Restart() -> void
virtual Firebase.Database.Core.Utilities.DefaultRunLoop.Schedule(Java.Lang.IRunnable? runnable, long milliseconds) -> Java.Util.Concurrent.IScheduledFuture?
virtual Firebase.Database.Core.Utilities.DefaultRunLoop.ScheduleNow(Java.Lang.IRunnable? runnable) -> void
virtual Firebase.Database.Core.Utilities.DefaultRunLoop.Shutdown() -> void
virtual Firebase.Database.Core.Utilities.DefaultRunLoop.ThreadFactory.get -> Java.Util.Concurrent.IThreadFactory?
virtual Firebase.Database.Core.Utilities.DefaultRunLoop.ThreadInitializer.get -> Firebase.Database.Core.IThreadInitializer?
virtual Firebase.Database.Core.Utilities.OffsetClock.Millis() -> long
virtual Firebase.Database.Core.Utilities.OffsetClock.SetOffset(long offset) -> void
virtual Firebase.Database.Core.Utilities.Tree.ForEachAncestor(Firebase.Database.Core.Utilities.Tree.ITreeFilter? filter) -> bool
virtual Firebase.Database.Core.Utilities.Tree.ForEachAncestor(Firebase.Database.Core.Utilities.Tree.ITreeFilter? filter, bool includeSelf) -> bool
virtual Firebase.Database.Core.Utilities.Tree.ForEachChild(Firebase.Database.Core.Utilities.Tree.ITreeVisitor? visitor) -> void
virtual Firebase.Database.Core.Utilities.Tree.ForEachDescendant(Firebase.Database.Core.Utilities.Tree.ITreeVisitor? visitor) -> void
virtual Firebase.Database.Core.Utilities.Tree.ForEachDescendant(Firebase.Database.Core.Utilities.Tree.ITreeVisitor? visitor, bool includeSelf) -> void
virtual Firebase.Database.Core.Utilities.Tree.ForEachDescendant(Firebase.Database.Core.Utilities.Tree.ITreeVisitor? visitor, bool includeSelf, bool childrenFirst) -> void
virtual Firebase.Database.Core.Utilities.Tree.HasChildren.get -> bool
virtual Firebase.Database.Core.Utilities.Tree.IsEmpty.get -> bool
virtual Firebase.Database.Core.Utilities.Tree.LastNodeOnPath(Firebase.Database.Core.Path? path) -> Firebase.Database.Core.Utilities.TreeNode?
virtual Firebase.Database.Core.Utilities.Tree.Name.get -> Firebase.Database.Snapshot.ChildKey?
virtual Firebase.Database.Core.Utilities.Tree.Parent.get -> Firebase.Database.Core.Utilities.Tree?
virtual Firebase.Database.Core.Utilities.Tree.Path.get -> Firebase.Database.Core.Path?
virtual Firebase.Database.Core.Utilities.Tree.SubTree(Firebase.Database.Core.Path? path) -> Firebase.Database.Core.Utilities.Tree?
virtual Firebase.Database.Core.Utilities.Tree.Value.get -> Java.Lang.Object?
virtual Firebase.Database.Core.Utilities.Tree.Value.set -> void
virtual Firebase.Database.Core.Utilities.Tuple.NameAndPriority.CompareTo(Firebase.Database.Core.Utilities.Tuple.NameAndPriority? o) -> int
virtual Firebase.Database.Core.Utilities.Tuple.NameAndPriority.CompareTo(Java.Lang.Object? rhs) -> int
virtual Firebase.Database.Core.Utilities.Tuple.NameAndPriority.Name.get -> Firebase.Database.Snapshot.ChildKey?
virtual Firebase.Database.Core.Utilities.Tuple.NameAndPriority.Priority.get -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.Utilities.Tuple.NodeAndPath.Node.get -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.Utilities.Tuple.NodeAndPath.Node.set -> void
virtual Firebase.Database.Core.Utilities.Tuple.NodeAndPath.Path.get -> Firebase.Database.Core.Path?
virtual Firebase.Database.Core.Utilities.Tuple.NodeAndPath.Path.set -> void
virtual Firebase.Database.Core.Utilities.Tuple.PathAndId.Id.get -> long
virtual Firebase.Database.Core.Utilities.Tuple.PathAndId.Path.get -> Firebase.Database.Core.Path?
virtual Firebase.Database.Core.View.CacheNode.IndexedNode.get -> Firebase.Database.Snapshot.IndexedNode?
virtual Firebase.Database.Core.View.CacheNode.IsCompleteForChild(Firebase.Database.Snapshot.ChildKey? key) -> bool
virtual Firebase.Database.Core.View.CacheNode.IsCompleteForPath(Firebase.Database.Core.Path? path) -> bool
virtual Firebase.Database.Core.View.CacheNode.IsFiltered.get -> bool
virtual Firebase.Database.Core.View.CacheNode.IsFullyInitialized.get -> bool
virtual Firebase.Database.Core.View.CacheNode.Node.get -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.View.CancelEvent.Fire() -> void
virtual Firebase.Database.Core.View.CancelEvent.Path.get -> Firebase.Database.Core.Path?
virtual Firebase.Database.Core.View.Change.ChangeWithPrevName(Firebase.Database.Snapshot.ChildKey? prevName) -> Firebase.Database.Core.View.Change?
virtual Firebase.Database.Core.View.Change.ChildKey.get -> Firebase.Database.Snapshot.ChildKey?
virtual Firebase.Database.Core.View.Change.EventType.get -> Firebase.Database.Core.View.EventEventType?
virtual Firebase.Database.Core.View.Change.IndexedNode.get -> Firebase.Database.Snapshot.IndexedNode?
virtual Firebase.Database.Core.View.Change.OldIndexedNode.get -> Firebase.Database.Snapshot.IndexedNode?
virtual Firebase.Database.Core.View.Change.PrevName.get -> Firebase.Database.Snapshot.ChildKey?
virtual Firebase.Database.Core.View.DataEvent.EventType.get -> Firebase.Database.Core.View.EventEventType?
virtual Firebase.Database.Core.View.DataEvent.Fire() -> void
virtual Firebase.Database.Core.View.DataEvent.Path.get -> Firebase.Database.Core.Path?
virtual Firebase.Database.Core.View.DataEvent.PreviousName.get -> string?
virtual Firebase.Database.Core.View.DataEvent.Snapshot.get -> Firebase.Database.DataSnapshot?
virtual Firebase.Database.Core.View.EventGenerator.GenerateEventsForChanges(System.Collections.Generic.IList<Firebase.Database.Core.View.Change!>? changes, Firebase.Database.Snapshot.IndexedNode? eventCache, System.Collections.Generic.IList<Firebase.Database.Core.EventRegistration!>? eventRegistrations) -> System.Collections.Generic.IList<Firebase.Database.Core.View.DataEvent!>?
virtual Firebase.Database.Core.View.EventRaiser.RaiseEvents(System.Collections.Generic.IList<Firebase.Database.Core.View.IEvent!>? events) -> void
virtual Firebase.Database.Core.View.Filter.ChildChangeAccumulator.Changes.get -> System.Collections.Generic.IList<Firebase.Database.Core.View.Change!>?
virtual Firebase.Database.Core.View.Filter.ChildChangeAccumulator.TrackChildChange(Firebase.Database.Core.View.Change? change) -> void
virtual Firebase.Database.Core.View.Filter.IndexedFilter.FiltersNodes() -> bool
virtual Firebase.Database.Core.View.Filter.IndexedFilter.GetIndexedFilter() -> Firebase.Database.Core.View.Filter.INodeFilter?
virtual Firebase.Database.Core.View.Filter.IndexedFilter.Index.get -> Firebase.Database.Snapshot.Index?
virtual Firebase.Database.Core.View.Filter.IndexedFilter.UpdateChild(Firebase.Database.Snapshot.IndexedNode? indexedNode, Firebase.Database.Snapshot.ChildKey? key, Firebase.Database.Snapshot.INode? newChild, Firebase.Database.Core.Path? affectedPath, Firebase.Database.Core.View.Filter.INodeFilterCompleteChildSource? source, Firebase.Database.Core.View.Filter.ChildChangeAccumulator? optChangeAccumulator) -> Firebase.Database.Snapshot.IndexedNode?
virtual Firebase.Database.Core.View.Filter.IndexedFilter.UpdateFullNode(Firebase.Database.Snapshot.IndexedNode? oldSnap, Firebase.Database.Snapshot.IndexedNode? newSnap, Firebase.Database.Core.View.Filter.ChildChangeAccumulator? optChangeAccumulator) -> Firebase.Database.Snapshot.IndexedNode?
virtual Firebase.Database.Core.View.Filter.IndexedFilter.UpdatePriority(Firebase.Database.Snapshot.IndexedNode? oldSnap, Firebase.Database.Snapshot.INode? newPriority) -> Firebase.Database.Snapshot.IndexedNode?
virtual Firebase.Database.Core.View.Filter.LimitedFilter.FiltersNodes() -> bool
virtual Firebase.Database.Core.View.Filter.LimitedFilter.Index.get -> Firebase.Database.Snapshot.Index?
virtual Firebase.Database.Core.View.Filter.LimitedFilter.IndexedFilter.get -> Firebase.Database.Core.View.Filter.INodeFilter?
virtual Firebase.Database.Core.View.Filter.LimitedFilter.UpdateChild(Firebase.Database.Snapshot.IndexedNode? snap, Firebase.Database.Snapshot.ChildKey? key, Firebase.Database.Snapshot.INode? newChild, Firebase.Database.Core.Path? affectedPath, Firebase.Database.Core.View.Filter.INodeFilterCompleteChildSource? source, Firebase.Database.Core.View.Filter.ChildChangeAccumulator? optChangeAccumulator) -> Firebase.Database.Snapshot.IndexedNode?
virtual Firebase.Database.Core.View.Filter.LimitedFilter.UpdateFullNode(Firebase.Database.Snapshot.IndexedNode? oldSnap, Firebase.Database.Snapshot.IndexedNode? newSnap, Firebase.Database.Core.View.Filter.ChildChangeAccumulator? optChangeAccumulator) -> Firebase.Database.Snapshot.IndexedNode?
virtual Firebase.Database.Core.View.Filter.LimitedFilter.UpdatePriority(Firebase.Database.Snapshot.IndexedNode? oldSnap, Firebase.Database.Snapshot.INode? newPriority) -> Firebase.Database.Snapshot.IndexedNode?
virtual Firebase.Database.Core.View.Filter.RangedFilter.EndPost.get -> Firebase.Database.Snapshot.NamedNode?
virtual Firebase.Database.Core.View.Filter.RangedFilter.FiltersNodes() -> bool
virtual Firebase.Database.Core.View.Filter.RangedFilter.Index.get -> Firebase.Database.Snapshot.Index?
virtual Firebase.Database.Core.View.Filter.RangedFilter.IndexedFilter.get -> Firebase.Database.Core.View.Filter.INodeFilter?
virtual Firebase.Database.Core.View.Filter.RangedFilter.Matches(Firebase.Database.Snapshot.NamedNode? node) -> bool
virtual Firebase.Database.Core.View.Filter.RangedFilter.StartPost.get -> Firebase.Database.Snapshot.NamedNode?
virtual Firebase.Database.Core.View.Filter.RangedFilter.UpdateChild(Firebase.Database.Snapshot.IndexedNode? snap, Firebase.Database.Snapshot.ChildKey? key, Firebase.Database.Snapshot.INode? newChild, Firebase.Database.Core.Path? affectedPath, Firebase.Database.Core.View.Filter.INodeFilterCompleteChildSource? source, Firebase.Database.Core.View.Filter.ChildChangeAccumulator? optChangeAccumulator) -> Firebase.Database.Snapshot.IndexedNode?
virtual Firebase.Database.Core.View.Filter.RangedFilter.UpdateFullNode(Firebase.Database.Snapshot.IndexedNode? oldSnap, Firebase.Database.Snapshot.IndexedNode? newSnap, Firebase.Database.Core.View.Filter.ChildChangeAccumulator? optChangeAccumulator) -> Firebase.Database.Snapshot.IndexedNode?
virtual Firebase.Database.Core.View.Filter.RangedFilter.UpdatePriority(Firebase.Database.Snapshot.IndexedNode? oldSnap, Firebase.Database.Snapshot.INode? newPriority) -> Firebase.Database.Snapshot.IndexedNode?
virtual Firebase.Database.Core.View.View.AddEventRegistration(Firebase.Database.Core.EventRegistration? registration) -> void
virtual Firebase.Database.Core.View.View.ApplyOperation(Firebase.Database.Core.Operation.Operation? operation, Firebase.Database.Core.WriteTreeRef? writesCache, Firebase.Database.Snapshot.INode? optCompleteServerCache) -> Firebase.Database.Core.View.View.OperationResult?
virtual Firebase.Database.Core.View.View.CompleteNode.get -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.View.View.EventCache.get -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.View.View.GetCompleteServerCache(Firebase.Database.Core.Path? path) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.View.View.GetInitialEvents(Firebase.Database.Core.EventRegistration? registration) -> System.Collections.Generic.IList<Firebase.Database.Core.View.DataEvent!>?
virtual Firebase.Database.Core.View.View.IsEmpty.get -> bool
virtual Firebase.Database.Core.View.View.Query.get -> Firebase.Database.Core.View.QuerySpec?
virtual Firebase.Database.Core.View.View.RemoveEventRegistration(Firebase.Database.Core.EventRegistration? registration, Firebase.Database.DatabaseError? cancelError) -> System.Collections.Generic.IList<Firebase.Database.Core.View.IEvent!>?
virtual Firebase.Database.Core.View.View.ServerCache.get -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.View.ViewCache.CompleteEventSnap.get -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.View.ViewCache.CompleteServerSnap.get -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.View.ViewCache.EventCache.get -> Firebase.Database.Core.View.CacheNode?
virtual Firebase.Database.Core.View.ViewCache.ServerCache.get -> Firebase.Database.Core.View.CacheNode?
virtual Firebase.Database.Core.View.ViewCache.UpdateEventSnap(Firebase.Database.Snapshot.IndexedNode? eventSnap, bool complete, bool filtered) -> Firebase.Database.Core.View.ViewCache?
virtual Firebase.Database.Core.View.ViewCache.UpdateServerSnap(Firebase.Database.Snapshot.IndexedNode? serverSnap, bool complete, bool filtered) -> Firebase.Database.Core.View.ViewCache?
virtual Firebase.Database.Core.View.ViewProcessor.ApplyOperation(Firebase.Database.Core.View.ViewCache? oldViewCache, Firebase.Database.Core.Operation.Operation? operation, Firebase.Database.Core.WriteTreeRef? writesCache, Firebase.Database.Snapshot.INode? optCompleteCache) -> Firebase.Database.Core.View.ViewProcessor.ProcessorResult?
virtual Firebase.Database.Core.View.ViewProcessor.RevertUserWrite(Firebase.Database.Core.View.ViewCache? viewCache, Firebase.Database.Core.Path? path, Firebase.Database.Core.WriteTreeRef? writesCache, Firebase.Database.Snapshot.INode? optCompleteServerCache, Firebase.Database.Core.View.Filter.ChildChangeAccumulator? accumulator) -> Firebase.Database.Core.View.ViewCache?
virtual Firebase.Database.Core.WriteTree.AddMerge(Firebase.Database.Core.Path? path, Firebase.Database.Core.CompoundWrite? changedChildren, Java.Lang.Long? writeId) -> void
virtual Firebase.Database.Core.WriteTree.AddOverwrite(Firebase.Database.Core.Path? path, Firebase.Database.Snapshot.INode? snap, Java.Lang.Long? writeId, bool visible) -> void
virtual Firebase.Database.Core.WriteTree.CalcCompleteChild(Firebase.Database.Core.Path? treePath, Firebase.Database.Snapshot.ChildKey? childKey, Firebase.Database.Core.View.CacheNode? existingServerSnap) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.WriteTree.CalcCompleteEventCache(Firebase.Database.Core.Path? treePath, Firebase.Database.Snapshot.INode? completeServerCache) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.WriteTree.CalcCompleteEventCache(Firebase.Database.Core.Path? treePath, Firebase.Database.Snapshot.INode? completeServerCache, System.Collections.Generic.IList<Java.Lang.Long!>? writeIdsToExclude) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.WriteTree.CalcCompleteEventCache(Firebase.Database.Core.Path? treePath, Firebase.Database.Snapshot.INode? completeServerCache, System.Collections.Generic.IList<Java.Lang.Long!>? writeIdsToExclude, bool includeHiddenWrites) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.WriteTree.CalcCompleteEventChildren(Firebase.Database.Core.Path? treePath, Firebase.Database.Snapshot.INode? completeServerChildren) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.WriteTree.CalcEventCacheAfterServerOverwrite(Firebase.Database.Core.Path? treePath, Firebase.Database.Core.Path? childPath, Firebase.Database.Snapshot.INode? existingEventSnap, Firebase.Database.Snapshot.INode? existingServerSnap) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.WriteTree.CalcNextNodeAfterPost(Firebase.Database.Core.Path? treePath, Firebase.Database.Snapshot.INode? completeServerData, Firebase.Database.Snapshot.NamedNode? post, bool reverse, Firebase.Database.Snapshot.Index? index) -> Firebase.Database.Snapshot.NamedNode?
virtual Firebase.Database.Core.WriteTree.ChildWrites(Firebase.Database.Core.Path? path) -> Firebase.Database.Core.WriteTreeRef?
virtual Firebase.Database.Core.WriteTree.GetCompleteWriteData(Firebase.Database.Core.Path? path) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.WriteTree.GetWrite(long writeId) -> Firebase.Database.Core.UserWriteRecord?
virtual Firebase.Database.Core.WriteTree.PurgeAllWrites() -> System.Collections.Generic.IList<Firebase.Database.Core.UserWriteRecord!>?
virtual Firebase.Database.Core.WriteTree.RemoveWrite(long writeId) -> bool
virtual Firebase.Database.Core.WriteTree.ShadowingWrite(Firebase.Database.Core.Path? path) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.WriteTreeRef.CalcCompleteChild(Firebase.Database.Snapshot.ChildKey? childKey, Firebase.Database.Core.View.CacheNode? existingServerCache) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.WriteTreeRef.CalcCompleteEventCache(Firebase.Database.Snapshot.INode? completeServerCache) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.WriteTreeRef.CalcCompleteEventCache(Firebase.Database.Snapshot.INode? completeServerCache, System.Collections.Generic.IList<Java.Lang.Long!>? writeIdsToExclude) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.WriteTreeRef.CalcCompleteEventCache(Firebase.Database.Snapshot.INode? completeServerCache, System.Collections.Generic.IList<Java.Lang.Long!>? writeIdsToExclude, bool includeHiddenWrites) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.WriteTreeRef.CalcCompleteEventChildren(Firebase.Database.Snapshot.INode? completeServerChildren) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.WriteTreeRef.CalcEventCacheAfterServerOverwrite(Firebase.Database.Core.Path? path, Firebase.Database.Snapshot.INode? existingEventSnap, Firebase.Database.Snapshot.INode? existingServerSnap) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.WriteTreeRef.CalcNextNodeAfterPost(Firebase.Database.Snapshot.INode? completeServerData, Firebase.Database.Snapshot.NamedNode? startPost, bool reverse, Firebase.Database.Snapshot.Index? index) -> Firebase.Database.Snapshot.NamedNode?
virtual Firebase.Database.Core.WriteTreeRef.Child(Firebase.Database.Snapshot.ChildKey? childKey) -> Firebase.Database.Core.WriteTreeRef?
virtual Firebase.Database.Core.WriteTreeRef.ShadowingWrite(Firebase.Database.Core.Path? path) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Core.ZombieEventManager.OnZombied(Firebase.Database.Core.EventRegistration? zombiedInstance) -> void
virtual Firebase.Database.Core.ZombieEventManager.RecordEventRegistration(Firebase.Database.Core.EventRegistration? registration) -> void
virtual Firebase.Database.Core.ZombieEventManager.ZombifyForRemove(Firebase.Database.Core.EventRegistration? registration) -> void
virtual Firebase.Database.DataSnapshot.Child(string! path) -> Firebase.Database.DataSnapshot!
virtual Firebase.Database.DataSnapshot.Children.get -> Java.Lang.IIterable!
virtual Firebase.Database.DataSnapshot.ChildrenCount.get -> long
virtual Firebase.Database.DataSnapshot.Exists() -> bool
virtual Firebase.Database.DataSnapshot.GetValue(Firebase.Database.GenericTypeIndicator! t) -> Java.Lang.Object?
virtual Firebase.Database.DataSnapshot.GetValue(Java.Lang.Class! valueType) -> Java.Lang.Object?
virtual Firebase.Database.DataSnapshot.GetValue(bool useExportFormat) -> Java.Lang.Object?
virtual Firebase.Database.DataSnapshot.HasChild(string! path) -> bool
virtual Firebase.Database.DataSnapshot.HasChildren.get -> bool
virtual Firebase.Database.DataSnapshot.Key.get -> string?
virtual Firebase.Database.DataSnapshot.Priority.get -> Java.Lang.Object?
virtual Firebase.Database.DataSnapshot.Ref.get -> Firebase.Database.DatabaseReference!
virtual Firebase.Database.DataSnapshot.Value.get -> Java.Lang.Object?
virtual Firebase.Database.DatabaseError.Code.get -> int
virtual Firebase.Database.DatabaseError.Details.get -> string!
virtual Firebase.Database.DatabaseError.Message.get -> string!
virtual Firebase.Database.DatabaseError.ToException() -> Firebase.Database.DatabaseException!
virtual Firebase.Database.DatabaseReference.Child(string! pathString) -> Firebase.Database.DatabaseReference!
virtual Firebase.Database.DatabaseReference.Database.get -> Firebase.Database.FirebaseDatabase!
virtual Firebase.Database.DatabaseReference.Key.get -> string?
virtual Firebase.Database.DatabaseReference.OnDisconnect() -> Firebase.Database.OnDisconnect!
virtual Firebase.Database.DatabaseReference.Parent.get -> Firebase.Database.DatabaseReference?
virtual Firebase.Database.DatabaseReference.Push() -> Firebase.Database.DatabaseReference!
virtual Firebase.Database.DatabaseReference.RemoveValue() -> Android.Gms.Tasks.Task!
virtual Firebase.Database.DatabaseReference.RemoveValue(Firebase.Database.DatabaseReference.ICompletionListener? listener) -> void
virtual Firebase.Database.DatabaseReference.Root.get -> Firebase.Database.DatabaseReference!
virtual Firebase.Database.DatabaseReference.RunTransaction(Firebase.Database.Transaction.IHandler! handler) -> void
virtual Firebase.Database.DatabaseReference.RunTransaction(Firebase.Database.Transaction.IHandler! handler, bool fireLocalEvents) -> void
virtual Firebase.Database.DatabaseReference.SetPriority(Java.Lang.Object? priority) -> Android.Gms.Tasks.Task!
virtual Firebase.Database.DatabaseReference.SetPriority(Java.Lang.Object? priority, Firebase.Database.DatabaseReference.ICompletionListener? listener) -> void
virtual Firebase.Database.DatabaseReference.SetValue(Java.Lang.Object? value) -> Android.Gms.Tasks.Task!
virtual Firebase.Database.DatabaseReference.SetValue(Java.Lang.Object? value, Firebase.Database.DatabaseReference.ICompletionListener? listener) -> void
virtual Firebase.Database.DatabaseReference.SetValue(Java.Lang.Object? value, Java.Lang.Object? priority) -> Android.Gms.Tasks.Task!
virtual Firebase.Database.DatabaseReference.SetValue(Java.Lang.Object? value, Java.Lang.Object? priority, Firebase.Database.DatabaseReference.ICompletionListener? listener) -> void
virtual Firebase.Database.DatabaseReference.UpdateChildren(System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>! update) -> Android.Gms.Tasks.Task!
virtual Firebase.Database.DatabaseReference.UpdateChildren(System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>! update, Firebase.Database.DatabaseReference.ICompletionListener? listener) -> void
virtual Firebase.Database.DatabaseRegistrar.Components.get -> System.Collections.Generic.IList<Firebase.Components.Component!>?
virtual Firebase.Database.FirebaseDatabase.App.get -> Firebase.FirebaseApp!
virtual Firebase.Database.FirebaseDatabase.GetReference(string! path) -> Firebase.Database.DatabaseReference!
virtual Firebase.Database.FirebaseDatabase.GetReferenceFromUrl(string! url) -> Firebase.Database.DatabaseReference!
virtual Firebase.Database.FirebaseDatabase.GoOffline() -> void
virtual Firebase.Database.FirebaseDatabase.GoOnline() -> void
virtual Firebase.Database.FirebaseDatabase.PurgeOutstandingWrites() -> void
virtual Firebase.Database.FirebaseDatabase.Reference.get -> Firebase.Database.DatabaseReference!
virtual Firebase.Database.FirebaseDatabase.SetLogLevel(Firebase.Database.LoggerLevel! logLevel) -> void
virtual Firebase.Database.FirebaseDatabase.SetPersistenceCacheSizeBytes(long cacheSizeInBytes) -> void
virtual Firebase.Database.FirebaseDatabase.SetPersistenceEnabled(bool isEnabled) -> void
virtual Firebase.Database.FirebaseDatabase.UseEmulator(string! host, int port) -> void
virtual Firebase.Database.Logging.DefaultLogger.BuildLogMessage(Firebase.Database.Logging.LoggerLevel? level, string? tag, string? message, long msTimestamp) -> string?
virtual Firebase.Database.Logging.DefaultLogger.Debug(string? tag, string? toLog) -> void
virtual Firebase.Database.Logging.DefaultLogger.Error(string? tag, string? toLog) -> void
virtual Firebase.Database.Logging.DefaultLogger.Info(string? tag, string? toLog) -> void
virtual Firebase.Database.Logging.DefaultLogger.LogLevel.get -> Firebase.Database.Logging.LoggerLevel?
virtual Firebase.Database.Logging.DefaultLogger.OnLogMessage(Firebase.Database.Logging.LoggerLevel? level, string? tag, string? message, long msTimestamp) -> void
virtual Firebase.Database.Logging.DefaultLogger.ShouldLog(Firebase.Database.Logging.LoggerLevel? level, string? tag) -> bool
virtual Firebase.Database.Logging.DefaultLogger.Warn(string? tag, string? toLog) -> void
virtual Firebase.Database.Logging.LogWrapper.Debug(string? message, Java.Lang.Throwable? e, params Java.Lang.Object![]? args) -> void
virtual Firebase.Database.Logging.LogWrapper.Debug(string? message, params Java.Lang.Object![]? args) -> void
virtual Firebase.Database.Logging.LogWrapper.Error(string? message, Java.Lang.Throwable? e) -> void
virtual Firebase.Database.Logging.LogWrapper.Info(string? message) -> void
virtual Firebase.Database.Logging.LogWrapper.LogsDebug() -> bool
virtual Firebase.Database.Logging.LogWrapper.Warn(string? message) -> void
virtual Firebase.Database.Logging.LogWrapper.Warn(string? message, Java.Lang.Throwable? e) -> void
virtual Firebase.Database.MutableData.Child(string! path) -> Firebase.Database.MutableData!
virtual Firebase.Database.MutableData.Children.get -> Java.Lang.IIterable!
virtual Firebase.Database.MutableData.ChildrenCount.get -> long
virtual Firebase.Database.MutableData.GetValue(Firebase.Database.GenericTypeIndicator! t) -> Java.Lang.Object?
virtual Firebase.Database.MutableData.GetValue(Java.Lang.Class! valueType) -> Java.Lang.Object?
virtual Firebase.Database.MutableData.HasChild(string! path) -> bool
virtual Firebase.Database.MutableData.HasChildren.get -> bool
virtual Firebase.Database.MutableData.Key.get -> string?
virtual Firebase.Database.MutableData.Priority.get -> Java.Lang.Object?
virtual Firebase.Database.MutableData.Priority.set -> void
virtual Firebase.Database.MutableData.Value.get -> Java.Lang.Object?
virtual Firebase.Database.MutableData.Value.set -> void
virtual Firebase.Database.OnDisconnect.Cancel() -> Android.Gms.Tasks.Task!
virtual Firebase.Database.OnDisconnect.Cancel(Firebase.Database.DatabaseReference.ICompletionListener! listener) -> void
virtual Firebase.Database.OnDisconnect.RemoveValue() -> Android.Gms.Tasks.Task!
virtual Firebase.Database.OnDisconnect.RemoveValue(Firebase.Database.DatabaseReference.ICompletionListener? listener) -> void
virtual Firebase.Database.OnDisconnect.SetValue(Java.Lang.Object? value) -> Android.Gms.Tasks.Task!
virtual Firebase.Database.OnDisconnect.SetValue(Java.Lang.Object? value, Firebase.Database.DatabaseReference.ICompletionListener? listener) -> void
virtual Firebase.Database.OnDisconnect.SetValue(Java.Lang.Object? value, System.Collections.IDictionary? priority, Firebase.Database.DatabaseReference.ICompletionListener? listener) -> void
virtual Firebase.Database.OnDisconnect.SetValue(Java.Lang.Object? value, double priority) -> Android.Gms.Tasks.Task!
virtual Firebase.Database.OnDisconnect.SetValue(Java.Lang.Object? value, double priority, Firebase.Database.DatabaseReference.ICompletionListener? listener) -> void
virtual Firebase.Database.OnDisconnect.SetValue(Java.Lang.Object? value, string? priority) -> Android.Gms.Tasks.Task!
virtual Firebase.Database.OnDisconnect.SetValue(Java.Lang.Object? value, string? priority, Firebase.Database.DatabaseReference.ICompletionListener? listener) -> void
virtual Firebase.Database.OnDisconnect.UpdateChildren(System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>! update) -> Android.Gms.Tasks.Task!
virtual Firebase.Database.OnDisconnect.UpdateChildren(System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>! update, Firebase.Database.DatabaseReference.ICompletionListener? listener) -> void
virtual Firebase.Database.Query.AddChildEventListener(Firebase.Database.IChildEventListener! listener) -> Firebase.Database.IChildEventListener!
virtual Firebase.Database.Query.AddListenerForSingleValueEvent(Firebase.Database.IValueEventListener! listener) -> void
virtual Firebase.Database.Query.AddValueEventListener(Firebase.Database.IValueEventListener! listener) -> Firebase.Database.IValueEventListener!
virtual Firebase.Database.Query.EndAt(bool value) -> Firebase.Database.Query!
virtual Firebase.Database.Query.EndAt(bool value, string? key) -> Firebase.Database.Query!
virtual Firebase.Database.Query.EndAt(double value) -> Firebase.Database.Query!
virtual Firebase.Database.Query.EndAt(double value, string? key) -> Firebase.Database.Query!
virtual Firebase.Database.Query.EndAt(string? value) -> Firebase.Database.Query!
virtual Firebase.Database.Query.EndAt(string? value, string? key) -> Firebase.Database.Query!
virtual Firebase.Database.Query.EndBefore(bool value) -> Firebase.Database.Query!
virtual Firebase.Database.Query.EndBefore(bool value, string? key) -> Firebase.Database.Query!
virtual Firebase.Database.Query.EndBefore(double value) -> Firebase.Database.Query!
virtual Firebase.Database.Query.EndBefore(double value, string? key) -> Firebase.Database.Query!
virtual Firebase.Database.Query.EndBefore(string? value) -> Firebase.Database.Query!
virtual Firebase.Database.Query.EndBefore(string? value, string? key) -> Firebase.Database.Query!
virtual Firebase.Database.Query.EqualTo(bool value) -> Firebase.Database.Query!
virtual Firebase.Database.Query.EqualTo(bool value, string? key) -> Firebase.Database.Query!
virtual Firebase.Database.Query.EqualTo(double value) -> Firebase.Database.Query!
virtual Firebase.Database.Query.EqualTo(double value, string? key) -> Firebase.Database.Query!
virtual Firebase.Database.Query.EqualTo(string? value) -> Firebase.Database.Query!
virtual Firebase.Database.Query.EqualTo(string? value, string? key) -> Firebase.Database.Query!
virtual Firebase.Database.Query.Get() -> Android.Gms.Tasks.Task!
virtual Firebase.Database.Query.KeepSynced(bool keepSynced) -> void
virtual Firebase.Database.Query.LimitToFirst(int limit) -> Firebase.Database.Query!
virtual Firebase.Database.Query.LimitToLast(int limit) -> Firebase.Database.Query!
virtual Firebase.Database.Query.OrderByChild(string! path) -> Firebase.Database.Query!
virtual Firebase.Database.Query.OrderByKey() -> Firebase.Database.Query!
virtual Firebase.Database.Query.OrderByPriority() -> Firebase.Database.Query!
virtual Firebase.Database.Query.OrderByValue() -> Firebase.Database.Query!
virtual Firebase.Database.Query.Path.get -> Firebase.Database.Core.Path?
virtual Firebase.Database.Query.Ref.get -> Firebase.Database.DatabaseReference!
virtual Firebase.Database.Query.RemoveEventListener(Firebase.Database.IChildEventListener! listener) -> void
virtual Firebase.Database.Query.RemoveEventListener(Firebase.Database.IValueEventListener! listener) -> void
virtual Firebase.Database.Query.Repo.get -> Firebase.Database.Core.Repo?
virtual Firebase.Database.Query.Spec.get -> Firebase.Database.Core.View.QuerySpec?
virtual Firebase.Database.Query.StartAfter(bool value) -> Firebase.Database.Query!
virtual Firebase.Database.Query.StartAfter(bool value, string? key) -> Firebase.Database.Query!
virtual Firebase.Database.Query.StartAfter(double value) -> Firebase.Database.Query!
virtual Firebase.Database.Query.StartAfter(double value, string? key) -> Firebase.Database.Query!
virtual Firebase.Database.Query.StartAfter(string? value) -> Firebase.Database.Query!
virtual Firebase.Database.Query.StartAfter(string? value, string? key) -> Firebase.Database.Query!
virtual Firebase.Database.Query.StartAt(bool value) -> Firebase.Database.Query!
virtual Firebase.Database.Query.StartAt(bool value, string? key) -> Firebase.Database.Query!
virtual Firebase.Database.Query.StartAt(double value) -> Firebase.Database.Query!
virtual Firebase.Database.Query.StartAt(double value, string? key) -> Firebase.Database.Query!
virtual Firebase.Database.Query.StartAt(string? value) -> Firebase.Database.Query!
virtual Firebase.Database.Query.StartAt(string? value, string? key) -> Firebase.Database.Query!
virtual Firebase.Database.Snapshot.BooleanNode.CompareTo(Java.Lang.Object? rhs) -> int
virtual Firebase.Database.Snapshot.BooleanNode.GetHashRepresentation(Firebase.Database.Snapshot.NodeHashVersion? version) -> string?
virtual Firebase.Database.Snapshot.BooleanNode.UpdatePriority(Firebase.Database.Snapshot.INode? priority) -> Firebase.Database.Snapshot.BooleanNode?
virtual Firebase.Database.Snapshot.BooleanNode.Value.get -> Java.Lang.Object?
virtual Firebase.Database.Snapshot.ChildKey.AsString() -> string?
virtual Firebase.Database.Snapshot.ChildKey.CompareTo(Firebase.Database.Snapshot.ChildKey? other) -> int
virtual Firebase.Database.Snapshot.ChildKey.CompareTo(Java.Lang.Object? rhs) -> int
virtual Firebase.Database.Snapshot.ChildKey.IntValue() -> int
virtual Firebase.Database.Snapshot.ChildKey.IsInt.get -> bool
virtual Firebase.Database.Snapshot.ChildKey.IsPriorityChildName.get -> bool
virtual Firebase.Database.Snapshot.ChildrenNode.ChildCount.get -> int
virtual Firebase.Database.Snapshot.ChildrenNode.ChildVisitor.VisitEntry(Firebase.Database.Snapshot.ChildKey? key, Firebase.Database.Snapshot.INode? value) -> void
virtual Firebase.Database.Snapshot.ChildrenNode.CompareTo(Firebase.Database.Snapshot.INode? o) -> int
virtual Firebase.Database.Snapshot.ChildrenNode.CompareTo(Java.Lang.Object? rhs) -> int
virtual Firebase.Database.Snapshot.ChildrenNode.FirstChildKey.get -> Firebase.Database.Snapshot.ChildKey?
virtual Firebase.Database.Snapshot.ChildrenNode.ForEachChild(Firebase.Database.Snapshot.ChildrenNode.ChildVisitor? visitor) -> void
virtual Firebase.Database.Snapshot.ChildrenNode.ForEachChild(Firebase.Database.Snapshot.ChildrenNode.ChildVisitor? visitor, bool includePriority) -> void
virtual Firebase.Database.Snapshot.ChildrenNode.GetChild(Firebase.Database.Core.Path? path) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Snapshot.ChildrenNode.GetHashRepresentation(Firebase.Database.Snapshot.NodeHashVersion? version) -> string?
virtual Firebase.Database.Snapshot.ChildrenNode.GetImmediateChild(Firebase.Database.Snapshot.ChildKey? name) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Snapshot.ChildrenNode.GetPredecessorChildKey(Firebase.Database.Snapshot.ChildKey? childKey) -> Firebase.Database.Snapshot.ChildKey?
virtual Firebase.Database.Snapshot.ChildrenNode.GetSuccessorChildKey(Firebase.Database.Snapshot.ChildKey? childKey) -> Firebase.Database.Snapshot.ChildKey?
virtual Firebase.Database.Snapshot.ChildrenNode.GetValue(bool useExportFormat) -> Java.Lang.Object?
virtual Firebase.Database.Snapshot.ChildrenNode.HasChild(Firebase.Database.Snapshot.ChildKey? name) -> bool
virtual Firebase.Database.Snapshot.ChildrenNode.Hash.get -> string?
virtual Firebase.Database.Snapshot.ChildrenNode.IsEmpty.get -> bool
virtual Firebase.Database.Snapshot.ChildrenNode.IsLeafNode.get -> bool
virtual Firebase.Database.Snapshot.ChildrenNode.Iterator() -> Java.Util.IIterator?
virtual Firebase.Database.Snapshot.ChildrenNode.LastChildKey.get -> Firebase.Database.Snapshot.ChildKey?
virtual Firebase.Database.Snapshot.ChildrenNode.Priority.get -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Snapshot.ChildrenNode.ReverseIterator() -> Java.Util.IIterator?
virtual Firebase.Database.Snapshot.ChildrenNode.UpdateChild(Firebase.Database.Core.Path? path, Firebase.Database.Snapshot.INode? newChildNode) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Snapshot.ChildrenNode.UpdateImmediateChild(Firebase.Database.Snapshot.ChildKey? key, Firebase.Database.Snapshot.INode? newChildNode) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Snapshot.ChildrenNode.UpdatePriority(Firebase.Database.Snapshot.INode? priority) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Snapshot.ChildrenNode.Value.get -> Java.Lang.Object?
virtual Firebase.Database.Snapshot.CompoundHash.Hashes.get -> System.Collections.Generic.IList<string!>?
virtual Firebase.Database.Snapshot.CompoundHash.Posts.get -> System.Collections.Generic.IList<Firebase.Database.Core.Path!>?
virtual Firebase.Database.Snapshot.DeferredValueNode.GetHashRepresentation(Firebase.Database.Snapshot.NodeHashVersion? version) -> string?
virtual Firebase.Database.Snapshot.DeferredValueNode.UpdatePriority(Firebase.Database.Snapshot.INode? priority) -> Firebase.Database.Snapshot.DeferredValueNode?
virtual Firebase.Database.Snapshot.DeferredValueNode.Value.get -> Java.Lang.Object?
virtual Firebase.Database.Snapshot.DoubleNode.CompareTo(Java.Lang.Object? rhs) -> int
virtual Firebase.Database.Snapshot.DoubleNode.GetHashRepresentation(Firebase.Database.Snapshot.NodeHashVersion? version) -> string?
virtual Firebase.Database.Snapshot.DoubleNode.UpdatePriority(Firebase.Database.Snapshot.INode? priority) -> Firebase.Database.Snapshot.DoubleNode?
virtual Firebase.Database.Snapshot.DoubleNode.Value.get -> Java.Lang.Object?
virtual Firebase.Database.Snapshot.Index.Compare(Firebase.Database.Snapshot.NamedNode? one, Firebase.Database.Snapshot.NamedNode? two, bool reverse) -> int
virtual Firebase.Database.Snapshot.Index.Compare(Java.Lang.Object? lhs, Java.Lang.Object? rhs) -> int
virtual Firebase.Database.Snapshot.Index.IndexedValueChanged(Firebase.Database.Snapshot.INode? oldNode, Firebase.Database.Snapshot.INode? newNode) -> bool
virtual Firebase.Database.Snapshot.Index.MinPost() -> Firebase.Database.Snapshot.NamedNode?
virtual Firebase.Database.Snapshot.IndexedNode.FirstChild.get -> Firebase.Database.Snapshot.NamedNode?
virtual Firebase.Database.Snapshot.IndexedNode.GetPredecessorChildName(Firebase.Database.Snapshot.ChildKey? childKey, Firebase.Database.Snapshot.INode? childNode, Firebase.Database.Snapshot.Index? index) -> Firebase.Database.Snapshot.ChildKey?
virtual Firebase.Database.Snapshot.IndexedNode.HasIndex(Firebase.Database.Snapshot.Index? index) -> bool
virtual Firebase.Database.Snapshot.IndexedNode.Iterator() -> Java.Util.IIterator?
virtual Firebase.Database.Snapshot.IndexedNode.LastChild.get -> Firebase.Database.Snapshot.NamedNode?
virtual Firebase.Database.Snapshot.IndexedNode.Node.get -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Snapshot.IndexedNode.ReverseIterator() -> Java.Util.IIterator?
virtual Firebase.Database.Snapshot.IndexedNode.UpdateChild(Firebase.Database.Snapshot.ChildKey? key, Firebase.Database.Snapshot.INode? child) -> Firebase.Database.Snapshot.IndexedNode?
virtual Firebase.Database.Snapshot.IndexedNode.UpdatePriority(Firebase.Database.Snapshot.INode? priority) -> Firebase.Database.Snapshot.IndexedNode?
virtual Firebase.Database.Snapshot.KeyIndex.Compare(Firebase.Database.Snapshot.NamedNode? o1, Firebase.Database.Snapshot.NamedNode? o2) -> int
virtual Firebase.Database.Snapshot.LeafNode.ChildCount.get -> int
virtual Firebase.Database.Snapshot.LeafNode.CompareTo(Firebase.Database.Snapshot.INode? other) -> int
virtual Firebase.Database.Snapshot.LeafNode.GetChild(Firebase.Database.Core.Path? path) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Snapshot.LeafNode.GetImmediateChild(Firebase.Database.Snapshot.ChildKey? name) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Snapshot.LeafNode.GetPredecessorChildKey(Firebase.Database.Snapshot.ChildKey? childKey) -> Firebase.Database.Snapshot.ChildKey?
virtual Firebase.Database.Snapshot.LeafNode.GetPriorityHash(Firebase.Database.Snapshot.NodeHashVersion? version) -> string?
virtual Firebase.Database.Snapshot.LeafNode.GetSuccessorChildKey(Firebase.Database.Snapshot.ChildKey? childKey) -> Firebase.Database.Snapshot.ChildKey?
virtual Firebase.Database.Snapshot.LeafNode.GetValue(bool useExportFormat) -> Java.Lang.Object?
virtual Firebase.Database.Snapshot.LeafNode.HasChild(Firebase.Database.Snapshot.ChildKey? childKey) -> bool
virtual Firebase.Database.Snapshot.LeafNode.Hash.get -> string?
virtual Firebase.Database.Snapshot.LeafNode.IsEmpty.get -> bool
virtual Firebase.Database.Snapshot.LeafNode.IsLeafNode.get -> bool
virtual Firebase.Database.Snapshot.LeafNode.Iterator() -> Java.Util.IIterator?
virtual Firebase.Database.Snapshot.LeafNode.LeafCompare(Firebase.Database.Snapshot.LeafNode? other) -> int
virtual Firebase.Database.Snapshot.LeafNode.Priority.get -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Snapshot.LeafNode.ReverseIterator() -> Java.Util.IIterator?
virtual Firebase.Database.Snapshot.LeafNode.UpdateChild(Firebase.Database.Core.Path? path, Firebase.Database.Snapshot.INode? node) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Snapshot.LeafNode.UpdateImmediateChild(Firebase.Database.Snapshot.ChildKey? name, Firebase.Database.Snapshot.INode? node) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Snapshot.LongNode.CompareTo(Java.Lang.Object? rhs) -> int
virtual Firebase.Database.Snapshot.LongNode.GetHashRepresentation(Firebase.Database.Snapshot.NodeHashVersion? version) -> string?
virtual Firebase.Database.Snapshot.LongNode.UpdatePriority(Firebase.Database.Snapshot.INode? priority) -> Firebase.Database.Snapshot.LongNode?
virtual Firebase.Database.Snapshot.LongNode.Value.get -> Java.Lang.Object?
virtual Firebase.Database.Snapshot.PriorityIndex.Compare(Firebase.Database.Snapshot.NamedNode? a, Firebase.Database.Snapshot.NamedNode? b) -> int
virtual Firebase.Database.Snapshot.RangeMerge.ApplyTo(Firebase.Database.Snapshot.INode? node) -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Snapshot.StringNode.CompareTo(Java.Lang.Object? rhs) -> int
virtual Firebase.Database.Snapshot.StringNode.GetHashRepresentation(Firebase.Database.Snapshot.NodeHashVersion? version) -> string?
virtual Firebase.Database.Snapshot.StringNode.UpdatePriority(Firebase.Database.Snapshot.INode? priority) -> Firebase.Database.Snapshot.StringNode?
virtual Firebase.Database.Snapshot.StringNode.Value.get -> Java.Lang.Object?
virtual Firebase.Database.Snapshot.ValueIndex.Compare(Firebase.Database.Snapshot.NamedNode? one, Firebase.Database.Snapshot.NamedNode? two) -> int
virtual Firebase.Database.Transaction.Result.IsSuccess.get -> bool
virtual Firebase.Database.Transaction.Result.Node.get -> Firebase.Database.Snapshot.INode?
virtual Firebase.Database.Tubesock.WebSocket.BlockClose() -> void
virtual Firebase.Database.Tubesock.WebSocket.Close() -> void
virtual Firebase.Database.Tubesock.WebSocket.Connect() -> void
virtual Firebase.Database.Tubesock.WebSocket.Send(byte[]? data) -> void
virtual Firebase.Database.Tubesock.WebSocket.Send(string? data) -> void
virtual Firebase.Database.Tubesock.WebSocket.SetEventHandler(Firebase.Database.Tubesock.IWebSocketEventHandler? eventHandler) -> void
virtual Firebase.Database.Tubesock.WebSocketMessage.GetBytes() -> byte[]?
virtual Firebase.Database.Tubesock.WebSocketMessage.IsBinary.get -> bool
virtual Firebase.Database.Tubesock.WebSocketMessage.IsText.get -> bool
virtual Firebase.Database.Tubesock.WebSocketMessage.Text.get -> string?
virtual Firebase.Database.Util.GAuthToken.Auth.get -> System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>?
virtual Firebase.Database.Util.GAuthToken.SerializeToString() -> string?
virtual Firebase.Database.Util.GAuthToken.Token.get -> string?
