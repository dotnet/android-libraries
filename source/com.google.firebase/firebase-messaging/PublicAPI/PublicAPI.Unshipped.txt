#nullable enable
Firebase.Iid.FirebaseInstanceIdReceiver
Firebase.Iid.FirebaseInstanceIdReceiver.FirebaseInstanceIdReceiver() -> void
Firebase.Messaging.BuildConfig
Firebase.Messaging.BuildConfig.BuildConfig() -> void
Firebase.Messaging.CommonNotificationBuilder
Firebase.Messaging.CommonNotificationBuilder.DisplayNotificationInfo
Firebase.Messaging.CommonNotificationBuilder.DisplayNotificationInfo.DisplayNotificationInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Messaging.CommonNotificationBuilder.DisplayNotificationInfo.Id.get -> int
Firebase.Messaging.CommonNotificationBuilder.DisplayNotificationInfo.Id.set -> void
Firebase.Messaging.CommonNotificationBuilder.DisplayNotificationInfo.NotificationBuilder.get -> AndroidX.Core.App.NotificationCompat.Builder?
Firebase.Messaging.CommonNotificationBuilder.DisplayNotificationInfo.NotificationBuilder.set -> void
Firebase.Messaging.CommonNotificationBuilder.DisplayNotificationInfo.Tag.get -> string?
Firebase.Messaging.CommonNotificationBuilder.DisplayNotificationInfo.Tag.set -> void
Firebase.Messaging.Constants
Firebase.Messaging.Constants.AnalyticsKeys
Firebase.Messaging.Constants.FirelogAnalytics
Firebase.Messaging.Constants.MessageNotificationKeys
Firebase.Messaging.Constants.MessagePayloadKeys
Firebase.Messaging.Constants.MessageTypes
Firebase.Messaging.Constants.ScionAnalytics
Firebase.Messaging.Constants.ScionAnalytics.IMessageType
Firebase.Messaging.Constants.ScionAnalytics.MessageType
Firebase.Messaging.Constants.ScionAnalytics.MessageTypeConsts
Firebase.Messaging.EnhancedIntentService
Firebase.Messaging.EnhancedIntentService.EnhancedIntentService() -> void
Firebase.Messaging.EnhancedIntentService.EnhancedIntentService(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Messaging.FcmBroadcastProcessor
Firebase.Messaging.FcmBroadcastProcessor.FcmBroadcastProcessor(Android.Content.Context? context) -> void
Firebase.Messaging.FcmBroadcastProcessor.FcmBroadcastProcessor(Android.Content.Context? context, Java.Util.Concurrent.IExecutorService? executor) -> void
Firebase.Messaging.FcmBroadcastProcessor.FcmBroadcastProcessor(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Messaging.FirebaseMessaging
Firebase.Messaging.FirebaseMessaging.FirebaseMessaging(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Messaging.FirebaseMessagingKtxRegistrar
Firebase.Messaging.FirebaseMessagingKtxRegistrar.Components.get -> System.Collections.Generic.IList<Firebase.Components.Component!>!
Firebase.Messaging.FirebaseMessagingKtxRegistrar.FirebaseMessagingKtxRegistrar() -> void
Firebase.Messaging.FirebaseMessagingRegistrar
Firebase.Messaging.FirebaseMessagingRegistrar.FirebaseMessagingRegistrar() -> void
Firebase.Messaging.FirebaseMessagingRegistrar.FirebaseMessagingRegistrar(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Messaging.FirebaseMessagingService
Firebase.Messaging.FirebaseMessagingService.FirebaseMessagingService() -> void
Firebase.Messaging.FirebaseMessagingService.FirebaseMessagingService(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Messaging.ImageDownload
Firebase.Messaging.ImageDownload.ImageDownload(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Messaging.Ktx.FirebaseMessagingKtxRegistrar
Firebase.Messaging.Ktx.FirebaseMessagingKtxRegistrar.Components.get -> System.Collections.Generic.IList<Firebase.Components.Component!>!
Firebase.Messaging.Ktx.FirebaseMessagingKtxRegistrar.FirebaseMessagingKtxRegistrar() -> void
Firebase.Messaging.Ktx.MessagingKt
Firebase.Messaging.MessagingAnalytics
Firebase.Messaging.MessagingAnalytics.MessagingAnalytics() -> void
Firebase.Messaging.MessagingAnalytics.MessagingAnalytics(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Messaging.MessagingKt
Firebase.Messaging.NotificationParams
Firebase.Messaging.NotificationParams.NotificationParams(Android.OS.Bundle! data) -> void
Firebase.Messaging.NotificationParams.NotificationParams(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Messaging.ProtoEncoderDoNotUse
Firebase.Messaging.ProtoEncoderDoNotUse.ProtoEncoderDoNotUse(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Messaging.RemoteMessage
Firebase.Messaging.RemoteMessage.Builder
Firebase.Messaging.RemoteMessage.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Messaging.RemoteMessage.Builder.Builder(string! to) -> void
Firebase.Messaging.RemoteMessage.CollapseKey.get -> string?
Firebase.Messaging.RemoteMessage.Data.get -> System.Collections.Generic.IDictionary<string!, string!>!
Firebase.Messaging.RemoteMessage.From.get -> string?
Firebase.Messaging.RemoteMessage.GetNotification() -> Firebase.Messaging.RemoteMessage.Notification?
Firebase.Messaging.RemoteMessage.GetRawData() -> byte[]?
Firebase.Messaging.RemoteMessage.IMessagePriority
Firebase.Messaging.RemoteMessage.MessageId.get -> string?
Firebase.Messaging.RemoteMessage.MessageType.get -> string?
Firebase.Messaging.RemoteMessage.Notification
Firebase.Messaging.RemoteMessage.Notification.Notification(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Messaging.RemoteMessage.OriginalPriority.get -> int
Firebase.Messaging.RemoteMessage.Priority.get -> int
Firebase.Messaging.RemoteMessage.RemoteMessage(Android.OS.Bundle? bundle) -> void
Firebase.Messaging.RemoteMessage.SenderId.get -> string?
Firebase.Messaging.RemoteMessage.SentTime.get -> long
Firebase.Messaging.RemoteMessage.To.get -> string?
Firebase.Messaging.RemoteMessage.ToIntent() -> Android.Content.Intent?
Firebase.Messaging.RemoteMessage.Ttl.get -> int
Firebase.Messaging.RemoteMessageCreator
Firebase.Messaging.RemoteMessageCreator.RemoteMessageCreator() -> void
Firebase.Messaging.RemoteMessageCreator.RemoteMessageCreator(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Messaging.Reporting.MessagingClientEvent
Firebase.Messaging.Reporting.MessagingClientEvent.AnalyticsLabel.get -> string?
Firebase.Messaging.Reporting.MessagingClientEvent.Builder
Firebase.Messaging.Reporting.MessagingClientEvent.Builder.Build() -> Firebase.Messaging.Reporting.MessagingClientEvent?
Firebase.Messaging.Reporting.MessagingClientEvent.Builder.SetAnalyticsLabel(string? analytics_label_) -> Firebase.Messaging.Reporting.MessagingClientEvent.Builder?
Firebase.Messaging.Reporting.MessagingClientEvent.Builder.SetBulkId(long bulk_id_) -> Firebase.Messaging.Reporting.MessagingClientEvent.Builder?
Firebase.Messaging.Reporting.MessagingClientEvent.Builder.SetCampaignId(long campaign_id_) -> Firebase.Messaging.Reporting.MessagingClientEvent.Builder?
Firebase.Messaging.Reporting.MessagingClientEvent.Builder.SetCollapseKey(string? collapse_key_) -> Firebase.Messaging.Reporting.MessagingClientEvent.Builder?
Firebase.Messaging.Reporting.MessagingClientEvent.Builder.SetComposerLabel(string? composer_label_) -> Firebase.Messaging.Reporting.MessagingClientEvent.Builder?
Firebase.Messaging.Reporting.MessagingClientEvent.Builder.SetEvent(Firebase.Messaging.Reporting.MessagingClientEvent.Event? event_) -> Firebase.Messaging.Reporting.MessagingClientEvent.Builder?
Firebase.Messaging.Reporting.MessagingClientEvent.Builder.SetInstanceId(string? instance_id_) -> Firebase.Messaging.Reporting.MessagingClientEvent.Builder?
Firebase.Messaging.Reporting.MessagingClientEvent.Builder.SetMessageId(string? message_id_) -> Firebase.Messaging.Reporting.MessagingClientEvent.Builder?
Firebase.Messaging.Reporting.MessagingClientEvent.Builder.SetMessageType(Firebase.Messaging.Reporting.MessagingClientEvent.MessageType? message_type_) -> Firebase.Messaging.Reporting.MessagingClientEvent.Builder?
Firebase.Messaging.Reporting.MessagingClientEvent.Builder.SetPackageName(string? package_name_) -> Firebase.Messaging.Reporting.MessagingClientEvent.Builder?
Firebase.Messaging.Reporting.MessagingClientEvent.Builder.SetPriority(int priority_) -> Firebase.Messaging.Reporting.MessagingClientEvent.Builder?
Firebase.Messaging.Reporting.MessagingClientEvent.Builder.SetProjectNumber(long project_number_) -> Firebase.Messaging.Reporting.MessagingClientEvent.Builder?
Firebase.Messaging.Reporting.MessagingClientEvent.Builder.SetSdkPlatform(Firebase.Messaging.Reporting.MessagingClientEvent.SDKPlatform? sdk_platform_) -> Firebase.Messaging.Reporting.MessagingClientEvent.Builder?
Firebase.Messaging.Reporting.MessagingClientEvent.Builder.SetTopic(string? topic_) -> Firebase.Messaging.Reporting.MessagingClientEvent.Builder?
Firebase.Messaging.Reporting.MessagingClientEvent.Builder.SetTtl(int ttl_) -> Firebase.Messaging.Reporting.MessagingClientEvent.Builder?
Firebase.Messaging.Reporting.MessagingClientEvent.BulkId.get -> long
Firebase.Messaging.Reporting.MessagingClientEvent.CampaignId.get -> long
Firebase.Messaging.Reporting.MessagingClientEvent.CollapseKey.get -> string?
Firebase.Messaging.Reporting.MessagingClientEvent.ComposerLabel.get -> string?
Firebase.Messaging.Reporting.MessagingClientEvent.Event
Firebase.Messaging.Reporting.MessagingClientEvent.Event.Number.get -> int
Firebase.Messaging.Reporting.MessagingClientEvent.GetEvent() -> Firebase.Messaging.Reporting.MessagingClientEvent.Event?
Firebase.Messaging.Reporting.MessagingClientEvent.GetMessageType() -> Firebase.Messaging.Reporting.MessagingClientEvent.MessageType?
Firebase.Messaging.Reporting.MessagingClientEvent.InstanceId.get -> string?
Firebase.Messaging.Reporting.MessagingClientEvent.MessageId.get -> string?
Firebase.Messaging.Reporting.MessagingClientEvent.MessageType
Firebase.Messaging.Reporting.MessagingClientEvent.MessageType.Number.get -> int
Firebase.Messaging.Reporting.MessagingClientEvent.PackageName.get -> string?
Firebase.Messaging.Reporting.MessagingClientEvent.Priority.get -> int
Firebase.Messaging.Reporting.MessagingClientEvent.ProjectNumber.get -> long
Firebase.Messaging.Reporting.MessagingClientEvent.SDKPlatform
Firebase.Messaging.Reporting.MessagingClientEvent.SDKPlatform.Number.get -> int
Firebase.Messaging.Reporting.MessagingClientEvent.SdkPlatform.get -> Firebase.Messaging.Reporting.MessagingClientEvent.SDKPlatform?
Firebase.Messaging.Reporting.MessagingClientEvent.Topic.get -> string?
Firebase.Messaging.Reporting.MessagingClientEvent.Ttl.get -> int
Firebase.Messaging.Reporting.MessagingClientEventExtension
Firebase.Messaging.Reporting.MessagingClientEventExtension.Builder
Firebase.Messaging.Reporting.MessagingClientEventExtension.Builder.Build() -> Firebase.Messaging.Reporting.MessagingClientEventExtension?
Firebase.Messaging.Reporting.MessagingClientEventExtension.Builder.SetMessagingClientEvent(Firebase.Messaging.Reporting.MessagingClientEvent? messaging_client_event_) -> Firebase.Messaging.Reporting.MessagingClientEventExtension.Builder?
Firebase.Messaging.Reporting.MessagingClientEventExtension.MessagingClientEvent.get -> Firebase.Messaging.Reporting.MessagingClientEvent?
Firebase.Messaging.Reporting.MessagingClientEventExtension.MessagingClientEventInternal.get -> Firebase.Messaging.Reporting.MessagingClientEvent?
Firebase.Messaging.Reporting.MessagingClientEventExtension.ToByteArray() -> byte[]?
Firebase.Messaging.Reporting.MessagingClientEventExtension.WriteTo(System.IO.Stream? output) -> void
Firebase.Messaging.SendException
Firebase.Messaging.SendException.ErrorCode.get -> int
Firebase.Messaging.ServiceStarter
Firebase.Messaging.ServiceStarter.ServiceStarter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Messaging.Threads.IExecutorFactory
Firebase.Messaging.Threads.IExecutorFactory.ExecuteOneOff(string? p0, string? p1, Firebase.Messaging.Threads.ThreadPriority? p2, Java.Lang.IRunnable? p3) -> void
Firebase.Messaging.Threads.IExecutorFactory.NewScheduledThreadPool(int p0, Firebase.Messaging.Threads.ThreadPriority? p1) -> Java.Util.Concurrent.IScheduledExecutorService?
Firebase.Messaging.Threads.IExecutorFactory.NewScheduledThreadPool(int p0, Java.Util.Concurrent.IThreadFactory? p1, Firebase.Messaging.Threads.ThreadPriority? p2) -> Java.Util.Concurrent.IScheduledExecutorService?
Firebase.Messaging.Threads.IExecutorFactory.NewSingleThreadExecutor(Firebase.Messaging.Threads.ThreadPriority? p0) -> Java.Util.Concurrent.IExecutorService?
Firebase.Messaging.Threads.IExecutorFactory.NewSingleThreadExecutor(Java.Util.Concurrent.IThreadFactory? p0, Firebase.Messaging.Threads.ThreadPriority? p1) -> Java.Util.Concurrent.IExecutorService?
Firebase.Messaging.Threads.IExecutorFactory.NewThreadPool(Firebase.Messaging.Threads.ThreadPriority? p0) -> Java.Util.Concurrent.IExecutorService?
Firebase.Messaging.Threads.IExecutorFactory.NewThreadPool(Java.Util.Concurrent.IThreadFactory? p0, Firebase.Messaging.Threads.ThreadPriority? p1) -> Java.Util.Concurrent.IExecutorService?
Firebase.Messaging.Threads.IExecutorFactory.NewThreadPool(int p0, Firebase.Messaging.Threads.ThreadPriority? p1) -> Java.Util.Concurrent.IExecutorService?
Firebase.Messaging.Threads.IExecutorFactory.NewThreadPool(int p0, Java.Util.Concurrent.IThreadFactory? p1, Firebase.Messaging.Threads.ThreadPriority? p2) -> Java.Util.Concurrent.IExecutorService?
Firebase.Messaging.Threads.IExecutorFactory.SubmitOneOff(string? p0, string? p1, Firebase.Messaging.Threads.ThreadPriority? p2, Java.Lang.IRunnable? p3) -> Java.Util.Concurrent.IFuture?
Firebase.Messaging.Threads.PoolableExecutors
Firebase.Messaging.Threads.PoolableExecutors.PoolableExecutors(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Messaging.Threads.ThreadPriority
abstract Firebase.Messaging.EnhancedIntentService.HandleIntent(Android.Content.Intent? p0) -> void
abstract Firebase.Messaging.ProtoEncoderDoNotUse.MessagingClientEventExtension.get -> Firebase.Messaging.Reporting.MessagingClientEventExtension?
const Firebase.Messaging.BuildConfig.BuildType = "release" -> string!
const Firebase.Messaging.BuildConfig.Debug = false -> bool
const Firebase.Messaging.BuildConfig.LibraryPackageName = "com.google.firebase.messaging" -> string!
const Firebase.Messaging.BuildConfig.VersionName = "24.1.2" -> string!
const Firebase.Messaging.CommonNotificationBuilder.FcmFallbackNotificationChannel = "fcm_fallback_notification_channel" -> string!
const Firebase.Messaging.CommonNotificationBuilder.FcmFallbackNotificationChannelLabel = "fcm_fallback_notification_channel_label" -> string!
const Firebase.Messaging.CommonNotificationBuilder.MetadataDefaultChannelId = "com.google.firebase.messaging.default_notification_channel_id" -> string!
const Firebase.Messaging.CommonNotificationBuilder.MetadataDefaultColor = "com.google.firebase.messaging.default_notification_color" -> string!
const Firebase.Messaging.CommonNotificationBuilder.MetadataDefaultIcon = "com.google.firebase.messaging.default_notification_icon" -> string!
const Firebase.Messaging.Constants.AnalyticsKeys.AbtExperiment = "google.c.a.abt" -> string!
const Firebase.Messaging.Constants.AnalyticsKeys.ComposerId = "google.c.a.c_id" -> string!
const Firebase.Messaging.Constants.AnalyticsKeys.ComposerLabel = "google.c.a.c_l" -> string!
const Firebase.Messaging.Constants.AnalyticsKeys.Enabled = "google.c.a.e" -> string!
const Firebase.Messaging.Constants.AnalyticsKeys.MessageChannel = "google.c.a.m_c" -> string!
const Firebase.Messaging.Constants.AnalyticsKeys.MessageLabel = "google.c.a.m_l" -> string!
const Firebase.Messaging.Constants.AnalyticsKeys.MessageTimestamp = "google.c.a.ts" -> string!
const Firebase.Messaging.Constants.AnalyticsKeys.MessageUseDeviceTime = "google.c.a.udt" -> string!
const Firebase.Messaging.Constants.AnalyticsKeys.Prefix = "google.c.a." -> string!
const Firebase.Messaging.Constants.AnalyticsKeys.TrackConversions = "google.c.a.tc" -> string!
const Firebase.Messaging.Constants.FcmWakeLock = "wake:com.google.firebase.messaging" -> string!
const Firebase.Messaging.Constants.FirelogAnalytics.FcmLogSource = "FCM_CLIENT_EVENT_LOGGING" -> string!
const Firebase.Messaging.Constants.IpcBundleKeySendError = "error" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.AnalyticsData = "gcm.n.analytics_data" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.Body = "gcm.n.body" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.Channel = "gcm.n.android_channel_id" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.ClickAction = "gcm.n.click_action" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.Color = "gcm.n.color" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.DefaultLightSettings = "gcm.n.default_light_settings" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.DefaultSound = "gcm.n.default_sound" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.DefaultVibrateTimings = "gcm.n.default_vibrate_timings" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.DoNotProxy = "gcm.n.dnp" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.EnableNotification = "gcm.n.e" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.EventTime = "gcm.n.event_time" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.Icon = "gcm.n.icon" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.ImageUrl = "gcm.n.image" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.LightSettings = "gcm.n.light_settings" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.Link = "gcm.n.link" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.LinkAndroid = "gcm.n.link_android" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.LocalOnly = "gcm.n.local_only" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.NoUi = "gcm.n.noui" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.NotificationCount = "gcm.n.notification_count" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.NotificationPrefix = "gcm.n." -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.NotificationPrefixOld = "gcm.notification." -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.NotificationPriority = "gcm.n.notification_priority" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.ReservedPrefix = "gcm." -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.Sound = "gcm.n.sound" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.Sound2 = "gcm.n.sound2" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.Sticky = "gcm.n.sticky" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.Tag = "gcm.n.tag" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.TextArgsSuffix = "_loc_args" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.TextResourceSuffix = "_loc_key" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.Ticker = "gcm.n.ticker" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.Title = "gcm.n.title" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.VibrateTimings = "gcm.n.vibrate_timings" -> string!
const Firebase.Messaging.Constants.MessageNotificationKeys.Visibility = "gcm.n.visibility" -> string!
const Firebase.Messaging.Constants.MessagePayloadKeys.CollapseKey = "collapse_key" -> string!
const Firebase.Messaging.Constants.MessagePayloadKeys.DeliveredPriority = "google.delivered_priority" -> string!
const Firebase.Messaging.Constants.MessagePayloadKeys.From = "from" -> string!
const Firebase.Messaging.Constants.MessagePayloadKeys.MessageType = "message_type" -> string!
const Firebase.Messaging.Constants.MessagePayloadKeys.Msgid = "google.message_id" -> string!
const Firebase.Messaging.Constants.MessagePayloadKeys.MsgidServer = "message_id" -> string!
const Firebase.Messaging.Constants.MessagePayloadKeys.OriginalPriority = "google.original_priority" -> string!
const Firebase.Messaging.Constants.MessagePayloadKeys.PriorityReducedV19 = "google.priority_reduced" -> string!
const Firebase.Messaging.Constants.MessagePayloadKeys.PriorityV19 = "google.priority" -> string!
const Firebase.Messaging.Constants.MessagePayloadKeys.ProductId = "google.product_id" -> string!
const Firebase.Messaging.Constants.MessagePayloadKeys.RawData = "rawData" -> string!
const Firebase.Messaging.Constants.MessagePayloadKeys.ReservedClientLibPrefix = "google.c." -> string!
const Firebase.Messaging.Constants.MessagePayloadKeys.ReservedPrefix = "google." -> string!
const Firebase.Messaging.Constants.MessagePayloadKeys.SenderId = "google.c.sender.id" -> string!
const Firebase.Messaging.Constants.MessagePayloadKeys.SentTime = "google.sent_time" -> string!
const Firebase.Messaging.Constants.MessagePayloadKeys.To = "google.to" -> string!
const Firebase.Messaging.Constants.MessagePayloadKeys.Ttl = "google.ttl" -> string!
const Firebase.Messaging.Constants.MessageTypes.Deleted = "deleted_messages" -> string!
const Firebase.Messaging.Constants.MessageTypes.Message = "gcm" -> string!
const Firebase.Messaging.Constants.MessageTypes.SendError = "send_error" -> string!
const Firebase.Messaging.Constants.MessageTypes.SendEvent = "send_event" -> string!
const Firebase.Messaging.Constants.ScionAnalytics.EventFirebaseCampaign = "_cmp" -> string!
const Firebase.Messaging.Constants.ScionAnalytics.EventNotificationDismiss = "_nd" -> string!
const Firebase.Messaging.Constants.ScionAnalytics.EventNotificationForeground = "_nf" -> string!
const Firebase.Messaging.Constants.ScionAnalytics.EventNotificationOpen = "_no" -> string!
const Firebase.Messaging.Constants.ScionAnalytics.EventNotificationReceive = "_nr" -> string!
const Firebase.Messaging.Constants.ScionAnalytics.MessageType.DataMessage = "data" -> string!
const Firebase.Messaging.Constants.ScionAnalytics.MessageType.DisplayNotification = "display" -> string!
const Firebase.Messaging.Constants.ScionAnalytics.OriginFcm = "fcm" -> string!
const Firebase.Messaging.Constants.ScionAnalytics.ParamCampaign = "campaign" -> string!
const Firebase.Messaging.Constants.ScionAnalytics.ParamLabel = "label" -> string!
const Firebase.Messaging.Constants.ScionAnalytics.ParamMedium = "medium" -> string!
const Firebase.Messaging.Constants.ScionAnalytics.ParamMessageChannel = "message_channel" -> string!
const Firebase.Messaging.Constants.ScionAnalytics.ParamMessageDeviceTime = "_ndt" -> string!
const Firebase.Messaging.Constants.ScionAnalytics.ParamMessageName = "_nmn" -> string!
const Firebase.Messaging.Constants.ScionAnalytics.ParamMessageTime = "_nmt" -> string!
const Firebase.Messaging.Constants.ScionAnalytics.ParamMessageType = "_nmc" -> string!
const Firebase.Messaging.Constants.ScionAnalytics.ParamSource = "source" -> string!
const Firebase.Messaging.Constants.ScionAnalytics.ParamTopic = "_nt" -> string!
const Firebase.Messaging.Constants.ScionAnalytics.UserPropertyFirebaseLastNotification = "_ln" -> string!
const Firebase.Messaging.Constants.Tag = "FirebaseMessaging" -> string!
const Firebase.Messaging.FirebaseMessaging.InstanceIdScope = "FCM" -> string!
const Firebase.Messaging.FirebaseMessagingService.ActionDirectBootRemoteIntent = "com.google.firebase.messaging.RECEIVE_DIRECT_BOOT" -> string!
const Firebase.Messaging.RemoteMessage.PriorityHigh = 1 -> int
const Firebase.Messaging.RemoteMessage.PriorityNormal = 2 -> int
const Firebase.Messaging.RemoteMessage.PriorityUnknown = 0 -> int
const Firebase.Messaging.RemoteMessageCreator.ContentDescription = 0 -> int
const Firebase.Messaging.SendException.ErrorInvalidParameters = 1 -> int
const Firebase.Messaging.SendException.ErrorSize = 2 -> int
const Firebase.Messaging.SendException.ErrorTooManyMessages = 4 -> int
const Firebase.Messaging.SendException.ErrorTtlExceeded = 3 -> int
const Firebase.Messaging.SendException.ErrorUnknown = 0 -> int
const Firebase.Messaging.ServiceStarter.ErrorUnknown = 500 -> int
const Firebase.Messaging.ServiceStarter.Success = -1 -> int
override Firebase.Iid.FirebaseInstanceIdReceiver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.BuildConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.CommonNotificationBuilder.DisplayNotificationInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.CommonNotificationBuilder.DisplayNotificationInfo.ThresholdClass.get -> nint
override Firebase.Messaging.CommonNotificationBuilder.DisplayNotificationInfo.ThresholdType.get -> System.Type!
override Firebase.Messaging.CommonNotificationBuilder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.Constants.AnalyticsKeys.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.Constants.FirelogAnalytics.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.Constants.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.Constants.MessageNotificationKeys.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.Constants.MessagePayloadKeys.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.Constants.MessageTypes.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.Constants.ScionAnalytics.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.EnhancedIntentService.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.EnhancedIntentService.ThresholdClass.get -> nint
override Firebase.Messaging.EnhancedIntentService.ThresholdType.get -> System.Type!
override Firebase.Messaging.FcmBroadcastProcessor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.FcmBroadcastProcessor.ThresholdClass.get -> nint
override Firebase.Messaging.FcmBroadcastProcessor.ThresholdType.get -> System.Type!
override Firebase.Messaging.FirebaseMessaging.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.FirebaseMessaging.ThresholdClass.get -> nint
override Firebase.Messaging.FirebaseMessaging.ThresholdType.get -> System.Type!
override Firebase.Messaging.FirebaseMessagingKtxRegistrar.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.FirebaseMessagingRegistrar.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.FirebaseMessagingRegistrar.ThresholdClass.get -> nint
override Firebase.Messaging.FirebaseMessagingRegistrar.ThresholdType.get -> System.Type!
override Firebase.Messaging.FirebaseMessagingService.HandleIntent(Android.Content.Intent? intent) -> void
override Firebase.Messaging.FirebaseMessagingService.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.FirebaseMessagingService.ThresholdClass.get -> nint
override Firebase.Messaging.FirebaseMessagingService.ThresholdType.get -> System.Type!
override Firebase.Messaging.ImageDownload.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.ImageDownload.ThresholdClass.get -> nint
override Firebase.Messaging.ImageDownload.ThresholdType.get -> System.Type!
override Firebase.Messaging.Ktx.FirebaseMessagingKtxRegistrar.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.Ktx.MessagingKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.MessagingAnalytics.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.MessagingAnalytics.ThresholdClass.get -> nint
override Firebase.Messaging.MessagingAnalytics.ThresholdType.get -> System.Type!
override Firebase.Messaging.MessagingKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.NotificationParams.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.NotificationParams.ThresholdClass.get -> nint
override Firebase.Messaging.NotificationParams.ThresholdType.get -> System.Type!
override Firebase.Messaging.ProtoEncoderDoNotUse.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.ProtoEncoderDoNotUse.ThresholdClass.get -> nint
override Firebase.Messaging.ProtoEncoderDoNotUse.ThresholdType.get -> System.Type!
override Firebase.Messaging.RemoteMessage.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.RemoteMessage.Builder.ThresholdClass.get -> nint
override Firebase.Messaging.RemoteMessage.Builder.ThresholdType.get -> System.Type!
override Firebase.Messaging.RemoteMessage.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.RemoteMessage.Notification.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.RemoteMessage.Notification.ThresholdClass.get -> nint
override Firebase.Messaging.RemoteMessage.Notification.ThresholdType.get -> System.Type!
override Firebase.Messaging.RemoteMessage.WriteToParcel(Android.OS.Parcel! out, Android.OS.ParcelableWriteFlags flags) -> void
override Firebase.Messaging.RemoteMessageCreator.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.RemoteMessageCreator.ThresholdClass.get -> nint
override Firebase.Messaging.RemoteMessageCreator.ThresholdType.get -> System.Type!
override Firebase.Messaging.Reporting.MessagingClientEvent.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.Reporting.MessagingClientEvent.Event.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.Reporting.MessagingClientEvent.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.Reporting.MessagingClientEvent.MessageType.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.Reporting.MessagingClientEvent.SDKPlatform.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.Reporting.MessagingClientEventExtension.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.Reporting.MessagingClientEventExtension.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.SendException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.ServiceStarter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.ServiceStarter.ThresholdClass.get -> nint
override Firebase.Messaging.ServiceStarter.ThresholdType.get -> System.Type!
override Firebase.Messaging.Threads.PoolableExecutors.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Messaging.Threads.PoolableExecutors.ThresholdClass.get -> nint
override Firebase.Messaging.Threads.PoolableExecutors.ThresholdType.get -> System.Type!
override Firebase.Messaging.Threads.ThreadPriority.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override sealed Firebase.Messaging.EnhancedIntentService.OnBind(Android.Content.Intent? intent) -> Android.OS.IBinder?
override sealed Firebase.Messaging.EnhancedIntentService.OnStartCommand(Android.Content.Intent? originalIntent, Android.App.StartCommandFlags flags, int startId) -> Android.App.StartCommandResult
static Firebase.Messaging.CommonNotificationBuilder.CreateNotificationInfo(Android.Content.Context? callingContext, Android.Content.Context? appContext, Firebase.Messaging.NotificationParams? params, string? channelId, Android.OS.Bundle? manifestMetadata) -> Firebase.Messaging.CommonNotificationBuilder.DisplayNotificationInfo?
static Firebase.Messaging.CommonNotificationBuilder.GetOrCreateChannel(Android.Content.Context? context, string? msgChannel, Android.OS.Bundle? manifestMetadata) -> string?
static Firebase.Messaging.Constants.MessagePayloadKeys.ExtractDeveloperDefinedPayload(Android.OS.Bundle? bundle) -> AndroidX.Collection.ArrayMap?
static Firebase.Messaging.Constants.WakeLockAcquireTimeoutMillis.get -> long
static Firebase.Messaging.FcmBroadcastProcessor.Reset() -> void
static Firebase.Messaging.FirebaseMessaging.Instance.get -> Firebase.Messaging.FirebaseMessaging!
static Firebase.Messaging.FirebaseMessaging.TransportFactory.get -> Xamarin.Google.Android.DataTransport.ITransportFactory?
static Firebase.Messaging.ImageDownload.Create(string? imageUrl) -> Firebase.Messaging.ImageDownload?
static Firebase.Messaging.Ktx.MessagingKt.RemoteMessage(string! to, Kotlin.Jvm.Functions.IFunction1! init) -> Firebase.Messaging.RemoteMessage!
static Firebase.Messaging.MessagingAnalytics.LogNotificationDismiss(Android.Content.Intent? intent) -> void
static Firebase.Messaging.MessagingAnalytics.LogNotificationForeground(Android.Content.Intent? intent) -> void
static Firebase.Messaging.MessagingAnalytics.LogNotificationOpen(Android.OS.Bundle? extras) -> void
static Firebase.Messaging.MessagingAnalytics.LogNotificationReceived(Android.Content.Intent? intent) -> void
static Firebase.Messaging.MessagingAnalytics.ShouldUploadFirelogAnalytics(Android.Content.Intent? intent) -> bool
static Firebase.Messaging.MessagingAnalytics.ShouldUploadScionMetrics(Android.Content.Intent? intent) -> bool
static Firebase.Messaging.MessagingAnalytics.ShouldUploadScionMetrics(Android.OS.Bundle? extras) -> bool
static Firebase.Messaging.MessagingKt.GetMessaging(Firebase.Firebase! obj) -> Firebase.Messaging.FirebaseMessaging!
static Firebase.Messaging.MessagingKt.RemoteMessage(string! to, Kotlin.Jvm.Functions.IFunction1! init) -> Firebase.Messaging.RemoteMessage!
static Firebase.Messaging.NotificationParams.InvokeIsNotification(Android.OS.Bundle? data) -> bool
static Firebase.Messaging.ProtoEncoderDoNotUse.Encode(Java.Lang.Object? value) -> byte[]?
static Firebase.Messaging.ProtoEncoderDoNotUse.Encode(Java.Lang.Object? value, System.IO.Stream? output) -> void
static Firebase.Messaging.RemoteMessage.Creator.get -> Android.OS.IParcelableCreator?
static Firebase.Messaging.Reporting.MessagingClientEvent.DefaultInstance.get -> Firebase.Messaging.Reporting.MessagingClientEvent?
static Firebase.Messaging.Reporting.MessagingClientEvent.Event.MessageDelivered.get -> Firebase.Messaging.Reporting.MessagingClientEvent.Event?
static Firebase.Messaging.Reporting.MessagingClientEvent.Event.MessageOpen.get -> Firebase.Messaging.Reporting.MessagingClientEvent.Event?
static Firebase.Messaging.Reporting.MessagingClientEvent.Event.UnknownEvent.get -> Firebase.Messaging.Reporting.MessagingClientEvent.Event?
static Firebase.Messaging.Reporting.MessagingClientEvent.Event.ValueOf(string? name) -> Firebase.Messaging.Reporting.MessagingClientEvent.Event?
static Firebase.Messaging.Reporting.MessagingClientEvent.Event.Values() -> Firebase.Messaging.Reporting.MessagingClientEvent.Event![]?
static Firebase.Messaging.Reporting.MessagingClientEvent.MessageType.DataMessage.get -> Firebase.Messaging.Reporting.MessagingClientEvent.MessageType?
static Firebase.Messaging.Reporting.MessagingClientEvent.MessageType.DisplayNotification.get -> Firebase.Messaging.Reporting.MessagingClientEvent.MessageType?
static Firebase.Messaging.Reporting.MessagingClientEvent.MessageType.Topic.get -> Firebase.Messaging.Reporting.MessagingClientEvent.MessageType?
static Firebase.Messaging.Reporting.MessagingClientEvent.MessageType.Unknown.get -> Firebase.Messaging.Reporting.MessagingClientEvent.MessageType?
static Firebase.Messaging.Reporting.MessagingClientEvent.MessageType.ValueOf(string? name) -> Firebase.Messaging.Reporting.MessagingClientEvent.MessageType?
static Firebase.Messaging.Reporting.MessagingClientEvent.MessageType.Values() -> Firebase.Messaging.Reporting.MessagingClientEvent.MessageType![]?
static Firebase.Messaging.Reporting.MessagingClientEvent.NewBuilder() -> Firebase.Messaging.Reporting.MessagingClientEvent.Builder?
static Firebase.Messaging.Reporting.MessagingClientEvent.SDKPlatform.Android.get -> Firebase.Messaging.Reporting.MessagingClientEvent.SDKPlatform?
static Firebase.Messaging.Reporting.MessagingClientEvent.SDKPlatform.Ios.get -> Firebase.Messaging.Reporting.MessagingClientEvent.SDKPlatform?
static Firebase.Messaging.Reporting.MessagingClientEvent.SDKPlatform.UnknownOs.get -> Firebase.Messaging.Reporting.MessagingClientEvent.SDKPlatform?
static Firebase.Messaging.Reporting.MessagingClientEvent.SDKPlatform.ValueOf(string? name) -> Firebase.Messaging.Reporting.MessagingClientEvent.SDKPlatform?
static Firebase.Messaging.Reporting.MessagingClientEvent.SDKPlatform.Values() -> Firebase.Messaging.Reporting.MessagingClientEvent.SDKPlatform![]?
static Firebase.Messaging.Reporting.MessagingClientEvent.SDKPlatform.Web.get -> Firebase.Messaging.Reporting.MessagingClientEvent.SDKPlatform?
static Firebase.Messaging.Reporting.MessagingClientEventExtension.DefaultInstance.get -> Firebase.Messaging.Reporting.MessagingClientEventExtension?
static Firebase.Messaging.Reporting.MessagingClientEventExtension.NewBuilder() -> Firebase.Messaging.Reporting.MessagingClientEventExtension.Builder?
static Firebase.Messaging.ServiceStarter.SetForTesting(Firebase.Messaging.ServiceStarter? serviceStarter) -> void
static Firebase.Messaging.Threads.PoolableExecutors.Factory() -> Firebase.Messaging.Threads.IExecutorFactory?
static Firebase.Messaging.Threads.ThreadPriority.HighSpeed.get -> Firebase.Messaging.Threads.ThreadPriority?
static Firebase.Messaging.Threads.ThreadPriority.LowPower.get -> Firebase.Messaging.Threads.ThreadPriority?
static Firebase.Messaging.Threads.ThreadPriority.ValueOf(string? name) -> Firebase.Messaging.Threads.ThreadPriority?
static Firebase.Messaging.Threads.ThreadPriority.Values() -> Firebase.Messaging.Threads.ThreadPriority![]?
virtual Firebase.Messaging.EnhancedIntentService.GetStartCommandIntent(Android.Content.Intent? originalIntent) -> Android.Content.Intent?
virtual Firebase.Messaging.EnhancedIntentService.HandleIntentOnMainThread(Android.Content.Intent? intent) -> bool
virtual Firebase.Messaging.FcmBroadcastProcessor.Process(Android.Content.Intent? intent) -> Android.Gms.Tasks.Task?
virtual Firebase.Messaging.FcmBroadcastProcessor.StartMessagingService(Android.Content.Context? context, Android.Content.Intent? intent) -> Android.Gms.Tasks.Task?
virtual Firebase.Messaging.FirebaseMessaging.AutoInitEnabled.get -> bool
virtual Firebase.Messaging.FirebaseMessaging.AutoInitEnabled.set -> void
virtual Firebase.Messaging.FirebaseMessaging.DeleteToken() -> Android.Gms.Tasks.Task!
virtual Firebase.Messaging.FirebaseMessaging.DeliveryMetricsExportToBigQueryEnabled() -> bool
virtual Firebase.Messaging.FirebaseMessaging.GetToken() -> Android.Gms.Tasks.Task!
virtual Firebase.Messaging.FirebaseMessaging.IsNotificationDelegationEnabled.get -> bool
virtual Firebase.Messaging.FirebaseMessaging.Send(Firebase.Messaging.RemoteMessage! message) -> void
virtual Firebase.Messaging.FirebaseMessaging.SetDeliveryMetricsExportToBigQuery(bool enable) -> void
virtual Firebase.Messaging.FirebaseMessaging.SetNotificationDelegationEnabled(bool enable) -> Android.Gms.Tasks.Task!
virtual Firebase.Messaging.FirebaseMessaging.SubscribeToTopic(string! topic) -> Android.Gms.Tasks.Task!
virtual Firebase.Messaging.FirebaseMessaging.UnsubscribeFromTopic(string! topic) -> Android.Gms.Tasks.Task!
virtual Firebase.Messaging.FirebaseMessagingRegistrar.Components.get -> System.Collections.Generic.IList<Firebase.Components.Component!>?
virtual Firebase.Messaging.FirebaseMessagingService.OnDeletedMessages() -> void
virtual Firebase.Messaging.FirebaseMessagingService.OnMessageReceived(Firebase.Messaging.RemoteMessage! message) -> void
virtual Firebase.Messaging.FirebaseMessagingService.OnMessageSent(string! msgId) -> void
virtual Firebase.Messaging.FirebaseMessagingService.OnNewToken(string! token) -> void
virtual Firebase.Messaging.FirebaseMessagingService.OnSendError(string! msgId, Java.Lang.Exception! exception) -> void
virtual Firebase.Messaging.ImageDownload.BlockingDownload() -> Android.Graphics.Bitmap?
virtual Firebase.Messaging.ImageDownload.Close() -> void
virtual Firebase.Messaging.ImageDownload.GetTask() -> Android.Gms.Tasks.Task?
virtual Firebase.Messaging.ImageDownload.Start(Java.Util.Concurrent.IExecutorService? executor) -> void
virtual Firebase.Messaging.NotificationParams.GetBoolean(string? key) -> bool
virtual Firebase.Messaging.NotificationParams.GetInteger(string? key) -> Java.Lang.Integer?
virtual Firebase.Messaging.NotificationParams.GetJSONArray(string? key) -> Org.Json.JSONArray?
virtual Firebase.Messaging.NotificationParams.GetLocalizationArgsForKey(string? key) -> Java.Lang.Object![]?
virtual Firebase.Messaging.NotificationParams.GetLocalizationResourceForKey(string? key) -> string?
virtual Firebase.Messaging.NotificationParams.GetLocalizedString(Android.Content.Res.Resources? resources, string? packageName, string? key) -> string?
virtual Firebase.Messaging.NotificationParams.GetLong(string? key) -> Java.Lang.Long?
virtual Firebase.Messaging.NotificationParams.GetPossiblyLocalizedString(Android.Content.Res.Resources? resources, string? packageName, string? key) -> string?
virtual Firebase.Messaging.NotificationParams.GetString(string? key) -> string?
virtual Firebase.Messaging.NotificationParams.GetVibrateTimings() -> long[]?
virtual Firebase.Messaging.NotificationParams.HasImage.get -> bool
virtual Firebase.Messaging.NotificationParams.IsNotification.get -> bool
virtual Firebase.Messaging.NotificationParams.Link.get -> Android.Net.Uri?
virtual Firebase.Messaging.NotificationParams.NotificationChannelId.get -> string?
virtual Firebase.Messaging.NotificationParams.ParamsForAnalyticsIntent() -> Android.OS.Bundle?
virtual Firebase.Messaging.NotificationParams.ParamsWithReservedKeysRemoved() -> Android.OS.Bundle?
virtual Firebase.Messaging.NotificationParams.SoundResourceName.get -> string?
virtual Firebase.Messaging.RemoteMessage.Builder.AddData(string! key, string? value) -> Firebase.Messaging.RemoteMessage.Builder!
virtual Firebase.Messaging.RemoteMessage.Builder.Build() -> Firebase.Messaging.RemoteMessage!
virtual Firebase.Messaging.RemoteMessage.Builder.ClearData() -> Firebase.Messaging.RemoteMessage.Builder!
virtual Firebase.Messaging.RemoteMessage.Builder.CollapseKey.get -> string?
virtual Firebase.Messaging.RemoteMessage.Builder.Data.get -> System.Collections.Generic.IDictionary<string!, string!>!
virtual Firebase.Messaging.RemoteMessage.Builder.MessageId.get -> string!
virtual Firebase.Messaging.RemoteMessage.Builder.MessageType.get -> string?
virtual Firebase.Messaging.RemoteMessage.Builder.SetCollapseKey(string? collapseKey) -> Firebase.Messaging.RemoteMessage.Builder!
virtual Firebase.Messaging.RemoteMessage.Builder.SetData(System.Collections.Generic.IDictionary<string!, string!>! data) -> Firebase.Messaging.RemoteMessage.Builder!
virtual Firebase.Messaging.RemoteMessage.Builder.SetMessageId(string! messageId) -> Firebase.Messaging.RemoteMessage.Builder!
virtual Firebase.Messaging.RemoteMessage.Builder.SetMessageType(string? messageType) -> Firebase.Messaging.RemoteMessage.Builder!
virtual Firebase.Messaging.RemoteMessage.Builder.SetRawData(byte[]? data) -> Firebase.Messaging.RemoteMessage.Builder!
virtual Firebase.Messaging.RemoteMessage.Builder.SetTtl(int ttl) -> Firebase.Messaging.RemoteMessage.Builder!
virtual Firebase.Messaging.RemoteMessage.Builder.Ttl.get -> int
virtual Firebase.Messaging.RemoteMessage.Notification.Body.get -> string?
virtual Firebase.Messaging.RemoteMessage.Notification.BodyLocalizationKey.get -> string?
virtual Firebase.Messaging.RemoteMessage.Notification.ChannelId.get -> string?
virtual Firebase.Messaging.RemoteMessage.Notification.ClickAction.get -> string?
virtual Firebase.Messaging.RemoteMessage.Notification.Color.get -> string?
virtual Firebase.Messaging.RemoteMessage.Notification.DefaultLightSettings.get -> bool
virtual Firebase.Messaging.RemoteMessage.Notification.DefaultSound.get -> bool
virtual Firebase.Messaging.RemoteMessage.Notification.DefaultVibrateSettings.get -> bool
virtual Firebase.Messaging.RemoteMessage.Notification.EventTime.get -> Java.Lang.Long?
virtual Firebase.Messaging.RemoteMessage.Notification.GetBodyLocalizationArgs() -> string![]?
virtual Firebase.Messaging.RemoteMessage.Notification.GetLightSettings() -> int[]?
virtual Firebase.Messaging.RemoteMessage.Notification.GetTitleLocalizationArgs() -> string![]?
virtual Firebase.Messaging.RemoteMessage.Notification.GetVibrateTimings() -> long[]?
virtual Firebase.Messaging.RemoteMessage.Notification.Icon.get -> string?
virtual Firebase.Messaging.RemoteMessage.Notification.ImageUrl.get -> Android.Net.Uri?
virtual Firebase.Messaging.RemoteMessage.Notification.Link.get -> Android.Net.Uri?
virtual Firebase.Messaging.RemoteMessage.Notification.LocalOnly.get -> bool
virtual Firebase.Messaging.RemoteMessage.Notification.NotificationCount.get -> Java.Lang.Integer?
virtual Firebase.Messaging.RemoteMessage.Notification.NotificationPriority.get -> Java.Lang.Integer?
virtual Firebase.Messaging.RemoteMessage.Notification.Sound.get -> string?
virtual Firebase.Messaging.RemoteMessage.Notification.Sticky.get -> bool
virtual Firebase.Messaging.RemoteMessage.Notification.Tag.get -> string?
virtual Firebase.Messaging.RemoteMessage.Notification.Ticker.get -> string?
virtual Firebase.Messaging.RemoteMessage.Notification.Title.get -> string?
virtual Firebase.Messaging.RemoteMessage.Notification.TitleLocalizationKey.get -> string?
virtual Firebase.Messaging.RemoteMessage.Notification.Visibility.get -> Java.Lang.Integer?
virtual Firebase.Messaging.RemoteMessageCreator.CreateFromParcel(Android.OS.Parcel? parcel) -> Java.Lang.Object?
virtual Firebase.Messaging.RemoteMessageCreator.NewArray(int size) -> Java.Lang.Object![]?
virtual Firebase.Messaging.ServiceStarter.StartMessagingService(Android.Content.Context? context, Android.Content.Intent? intent) -> int
