#nullable enable
Firebase.Database.Collection.ArraySortedMap
Firebase.Database.Collection.ArraySortedMap.ArraySortedMap(Java.Util.IComparator? comparator) -> void
Firebase.Database.Collection.ArraySortedMap.ArraySortedMap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Collection.BuildConfig
Firebase.Database.Collection.BuildConfig.BuildConfig() -> void
Firebase.Database.Collection.ILLRBNode
Firebase.Database.Collection.ILLRBNode.Copy(Java.Lang.Object? p0, Java.Lang.Object? p1, Firebase.Database.Collection.LLRBNodeColor? p2, Firebase.Database.Collection.ILLRBNode? p3, Firebase.Database.Collection.ILLRBNode? p4) -> Firebase.Database.Collection.ILLRBNode?
Firebase.Database.Collection.ILLRBNode.InOrderTraversal(Firebase.Database.Collection.LLRBNodeNodeVisitor? p0) -> void
Firebase.Database.Collection.ILLRBNode.Insert(Java.Lang.Object? p0, Java.Lang.Object? p1, Java.Util.IComparator? p2) -> Firebase.Database.Collection.ILLRBNode?
Firebase.Database.Collection.ILLRBNode.IsEmpty.get -> bool
Firebase.Database.Collection.ILLRBNode.IsRed.get -> bool
Firebase.Database.Collection.ILLRBNode.Key.get -> Java.Lang.Object?
Firebase.Database.Collection.ILLRBNode.Left.get -> Firebase.Database.Collection.ILLRBNode?
Firebase.Database.Collection.ILLRBNode.Max.get -> Firebase.Database.Collection.ILLRBNode?
Firebase.Database.Collection.ILLRBNode.Min.get -> Firebase.Database.Collection.ILLRBNode?
Firebase.Database.Collection.ILLRBNode.Remove(Java.Lang.Object? p0, Java.Util.IComparator? p1) -> Firebase.Database.Collection.ILLRBNode?
Firebase.Database.Collection.ILLRBNode.Right.get -> Firebase.Database.Collection.ILLRBNode?
Firebase.Database.Collection.ILLRBNode.ShortCircuitingInOrderTraversal(Firebase.Database.Collection.ILLRBNodeShortCircuitingNodeVisitor? p0) -> bool
Firebase.Database.Collection.ILLRBNode.ShortCircuitingReverseOrderTraversal(Firebase.Database.Collection.ILLRBNodeShortCircuitingNodeVisitor? p0) -> bool
Firebase.Database.Collection.ILLRBNode.Size() -> int
Firebase.Database.Collection.ILLRBNode.Value.get -> Java.Lang.Object?
Firebase.Database.Collection.ILLRBNodeShortCircuitingNodeVisitor
Firebase.Database.Collection.ILLRBNodeShortCircuitingNodeVisitor.ShouldContinue(Java.Lang.Object? p0, Java.Lang.Object? p1) -> bool
Firebase.Database.Collection.ImmutableSortedMap
Firebase.Database.Collection.ImmutableSortedMap.Builder
Firebase.Database.Collection.ImmutableSortedMap.Builder.Builder() -> void
Firebase.Database.Collection.ImmutableSortedMap.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Collection.ImmutableSortedMap.Builder.IKeyTranslator
Firebase.Database.Collection.ImmutableSortedMap.Builder.IKeyTranslator.Translate(Java.Lang.Object? p0) -> Java.Lang.Object?
Firebase.Database.Collection.ImmutableSortedMap.ImmutableSortedMap() -> void
Firebase.Database.Collection.ImmutableSortedMap.ImmutableSortedMap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Collection.ImmutableSortedMapIterator
Firebase.Database.Collection.ImmutableSortedMapIterator.ImmutableSortedMapIterator(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Collection.ImmutableSortedSet
Firebase.Database.Collection.ImmutableSortedSet.ImmutableSortedSet(System.Collections.IList? elems, Java.Util.IComparator? comparator) -> void
Firebase.Database.Collection.ImmutableSortedSet.ImmutableSortedSet(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Collection.LLRBBlackValueNode
Firebase.Database.Collection.LLRBBlackValueNode.LLRBBlackValueNode(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Collection.LLRBEmptyNode
Firebase.Database.Collection.LLRBEmptyNode.LLRBEmptyNode(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Collection.LLRBNodeColor
Firebase.Database.Collection.LLRBNodeNodeVisitor
Firebase.Database.Collection.LLRBNodeNodeVisitor.LLRBNodeNodeVisitor() -> void
Firebase.Database.Collection.LLRBNodeNodeVisitor.LLRBNodeNodeVisitor(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Collection.LLRBRedValueNode
Firebase.Database.Collection.LLRBRedValueNode.LLRBRedValueNode(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Collection.LLRBValueNode
Firebase.Database.Collection.LLRBValueNode.LLRBValueNode(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Collection.RBTreeSortedMap
Firebase.Database.Collection.RBTreeSortedMap.RBTreeSortedMap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Firebase.Database.Collection.StandardComparator
Firebase.Database.Collection.StandardComparator.StandardComparator(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
abstract Firebase.Database.Collection.ImmutableSortedMap.Comparator.get -> Java.Util.IComparator?
abstract Firebase.Database.Collection.ImmutableSortedMap.ContainsKey(Java.Lang.Object? p0) -> bool
abstract Firebase.Database.Collection.ImmutableSortedMap.Get(Java.Lang.Object? p0) -> Java.Lang.Object?
abstract Firebase.Database.Collection.ImmutableSortedMap.GetPredecessorKey(Java.Lang.Object? p0) -> Java.Lang.Object?
abstract Firebase.Database.Collection.ImmutableSortedMap.GetSuccessorKey(Java.Lang.Object? p0) -> Java.Lang.Object?
abstract Firebase.Database.Collection.ImmutableSortedMap.InOrderTraversal(Firebase.Database.Collection.LLRBNodeNodeVisitor? p0) -> void
abstract Firebase.Database.Collection.ImmutableSortedMap.IndexOf(Java.Lang.Object? p0) -> int
abstract Firebase.Database.Collection.ImmutableSortedMap.Insert(Java.Lang.Object? p0, Java.Lang.Object? p1) -> Firebase.Database.Collection.ImmutableSortedMap?
abstract Firebase.Database.Collection.ImmutableSortedMap.IsEmpty.get -> bool
abstract Firebase.Database.Collection.ImmutableSortedMap.Iterator() -> Java.Util.IIterator?
abstract Firebase.Database.Collection.ImmutableSortedMap.IteratorFrom(Java.Lang.Object? p0) -> Java.Util.IIterator?
abstract Firebase.Database.Collection.ImmutableSortedMap.Remove(Java.Lang.Object? p0) -> Firebase.Database.Collection.ImmutableSortedMap?
abstract Firebase.Database.Collection.ImmutableSortedMap.ReverseIterator() -> Java.Util.IIterator?
abstract Firebase.Database.Collection.ImmutableSortedMap.ReverseIteratorFrom(Java.Lang.Object? p0) -> Java.Util.IIterator?
abstract Firebase.Database.Collection.ImmutableSortedMap.Size() -> int
abstract Firebase.Database.Collection.LLRBNodeNodeVisitor.VisitEntry(Java.Lang.Object? p0, Java.Lang.Object? p1) -> void
abstract Firebase.Database.Collection.LLRBValueNode.Color.get -> Firebase.Database.Collection.LLRBNodeColor?
abstract Firebase.Database.Collection.LLRBValueNode.Copy(Java.Lang.Object? p0, Java.Lang.Object? p1, Firebase.Database.Collection.ILLRBNode? p2, Firebase.Database.Collection.ILLRBNode? p3) -> Firebase.Database.Collection.LLRBValueNode?
const Firebase.Database.Collection.BuildConfig.ApplicationId = "com.google.firebase.database.collection" -> string!
const Firebase.Database.Collection.BuildConfig.BuildType = "release" -> string!
const Firebase.Database.Collection.BuildConfig.Debug = false -> bool
const Firebase.Database.Collection.BuildConfig.Flavor = "" -> string!
const Firebase.Database.Collection.BuildConfig.VersionCode = -1 -> int
const Firebase.Database.Collection.BuildConfig.VersionName = "" -> string!
override Firebase.Database.Collection.ArraySortedMap.Comparator.get -> Java.Util.IComparator?
override Firebase.Database.Collection.ArraySortedMap.ContainsKey(Java.Lang.Object? key) -> bool
override Firebase.Database.Collection.ArraySortedMap.Get(Java.Lang.Object? key) -> Java.Lang.Object?
override Firebase.Database.Collection.ArraySortedMap.GetPredecessorKey(Java.Lang.Object? key) -> Java.Lang.Object?
override Firebase.Database.Collection.ArraySortedMap.GetSuccessorKey(Java.Lang.Object? key) -> Java.Lang.Object?
override Firebase.Database.Collection.ArraySortedMap.InOrderTraversal(Firebase.Database.Collection.LLRBNodeNodeVisitor? visitor) -> void
override Firebase.Database.Collection.ArraySortedMap.IndexOf(Java.Lang.Object? key) -> int
override Firebase.Database.Collection.ArraySortedMap.Insert(Java.Lang.Object? key, Java.Lang.Object? value) -> Firebase.Database.Collection.ImmutableSortedMap?
override Firebase.Database.Collection.ArraySortedMap.IsEmpty.get -> bool
override Firebase.Database.Collection.ArraySortedMap.Iterator() -> Java.Util.IIterator?
override Firebase.Database.Collection.ArraySortedMap.IteratorFrom(Java.Lang.Object? key) -> Java.Util.IIterator?
override Firebase.Database.Collection.ArraySortedMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Collection.ArraySortedMap.Remove(Java.Lang.Object? key) -> Firebase.Database.Collection.ImmutableSortedMap?
override Firebase.Database.Collection.ArraySortedMap.ReverseIterator() -> Java.Util.IIterator?
override Firebase.Database.Collection.ArraySortedMap.ReverseIteratorFrom(Java.Lang.Object? key) -> Java.Util.IIterator?
override Firebase.Database.Collection.ArraySortedMap.Size() -> int
override Firebase.Database.Collection.ArraySortedMap.ThresholdClass.get -> nint
override Firebase.Database.Collection.ArraySortedMap.ThresholdType.get -> System.Type!
override Firebase.Database.Collection.BuildConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Collection.ImmutableSortedMap.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Collection.ImmutableSortedMap.Builder.ThresholdClass.get -> nint
override Firebase.Database.Collection.ImmutableSortedMap.Builder.ThresholdType.get -> System.Type!
override Firebase.Database.Collection.ImmutableSortedMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Collection.ImmutableSortedMap.ThresholdClass.get -> nint
override Firebase.Database.Collection.ImmutableSortedMap.ThresholdType.get -> System.Type!
override Firebase.Database.Collection.ImmutableSortedMapIterator.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Collection.ImmutableSortedMapIterator.ThresholdClass.get -> nint
override Firebase.Database.Collection.ImmutableSortedMapIterator.ThresholdType.get -> System.Type!
override Firebase.Database.Collection.ImmutableSortedSet.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Collection.ImmutableSortedSet.ThresholdClass.get -> nint
override Firebase.Database.Collection.ImmutableSortedSet.ThresholdType.get -> System.Type!
override Firebase.Database.Collection.LLRBBlackValueNode.Color.get -> Firebase.Database.Collection.LLRBNodeColor?
override Firebase.Database.Collection.LLRBBlackValueNode.Copy(Java.Lang.Object? key, Java.Lang.Object? value, Firebase.Database.Collection.ILLRBNode? left, Firebase.Database.Collection.ILLRBNode? right) -> Firebase.Database.Collection.LLRBValueNode?
override Firebase.Database.Collection.LLRBBlackValueNode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Collection.LLRBBlackValueNode.ThresholdClass.get -> nint
override Firebase.Database.Collection.LLRBBlackValueNode.ThresholdType.get -> System.Type!
override Firebase.Database.Collection.LLRBEmptyNode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Collection.LLRBEmptyNode.ThresholdClass.get -> nint
override Firebase.Database.Collection.LLRBEmptyNode.ThresholdType.get -> System.Type!
override Firebase.Database.Collection.LLRBNodeColor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Collection.LLRBNodeNodeVisitor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Collection.LLRBNodeNodeVisitor.ThresholdClass.get -> nint
override Firebase.Database.Collection.LLRBNodeNodeVisitor.ThresholdType.get -> System.Type!
override Firebase.Database.Collection.LLRBRedValueNode.Color.get -> Firebase.Database.Collection.LLRBNodeColor?
override Firebase.Database.Collection.LLRBRedValueNode.Copy(Java.Lang.Object? key, Java.Lang.Object? value, Firebase.Database.Collection.ILLRBNode? left, Firebase.Database.Collection.ILLRBNode? right) -> Firebase.Database.Collection.LLRBValueNode?
override Firebase.Database.Collection.LLRBRedValueNode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Collection.LLRBRedValueNode.ThresholdClass.get -> nint
override Firebase.Database.Collection.LLRBRedValueNode.ThresholdType.get -> System.Type!
override Firebase.Database.Collection.LLRBValueNode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Collection.LLRBValueNode.ThresholdClass.get -> nint
override Firebase.Database.Collection.LLRBValueNode.ThresholdType.get -> System.Type!
override Firebase.Database.Collection.RBTreeSortedMap.Comparator.get -> Java.Util.IComparator?
override Firebase.Database.Collection.RBTreeSortedMap.ContainsKey(Java.Lang.Object? key) -> bool
override Firebase.Database.Collection.RBTreeSortedMap.Get(Java.Lang.Object? key) -> Java.Lang.Object?
override Firebase.Database.Collection.RBTreeSortedMap.GetPredecessorKey(Java.Lang.Object? key) -> Java.Lang.Object?
override Firebase.Database.Collection.RBTreeSortedMap.GetSuccessorKey(Java.Lang.Object? key) -> Java.Lang.Object?
override Firebase.Database.Collection.RBTreeSortedMap.InOrderTraversal(Firebase.Database.Collection.LLRBNodeNodeVisitor? visitor) -> void
override Firebase.Database.Collection.RBTreeSortedMap.IndexOf(Java.Lang.Object? key) -> int
override Firebase.Database.Collection.RBTreeSortedMap.Insert(Java.Lang.Object? key, Java.Lang.Object? value) -> Firebase.Database.Collection.ImmutableSortedMap?
override Firebase.Database.Collection.RBTreeSortedMap.IsEmpty.get -> bool
override Firebase.Database.Collection.RBTreeSortedMap.Iterator() -> Java.Util.IIterator?
override Firebase.Database.Collection.RBTreeSortedMap.IteratorFrom(Java.Lang.Object? key) -> Java.Util.IIterator?
override Firebase.Database.Collection.RBTreeSortedMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Collection.RBTreeSortedMap.Remove(Java.Lang.Object? key) -> Firebase.Database.Collection.ImmutableSortedMap?
override Firebase.Database.Collection.RBTreeSortedMap.ReverseIterator() -> Java.Util.IIterator?
override Firebase.Database.Collection.RBTreeSortedMap.ReverseIteratorFrom(Java.Lang.Object? key) -> Java.Util.IIterator?
override Firebase.Database.Collection.RBTreeSortedMap.Size() -> int
override Firebase.Database.Collection.RBTreeSortedMap.ThresholdClass.get -> nint
override Firebase.Database.Collection.RBTreeSortedMap.ThresholdType.get -> System.Type!
override Firebase.Database.Collection.StandardComparator.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Firebase.Database.Collection.StandardComparator.ThresholdClass.get -> nint
override Firebase.Database.Collection.StandardComparator.ThresholdType.get -> System.Type!
static Firebase.Database.Collection.ArraySortedMap.BuildFrom(System.Collections.IList? keys, System.Collections.IDictionary? values, Firebase.Database.Collection.ImmutableSortedMap.Builder.IKeyTranslator? translator, Java.Util.IComparator? comparator) -> Firebase.Database.Collection.ArraySortedMap?
static Firebase.Database.Collection.ArraySortedMap.FromMap(System.Collections.IDictionary? map, Java.Util.IComparator? comparator) -> Firebase.Database.Collection.ArraySortedMap?
static Firebase.Database.Collection.ImmutableSortedMap.Builder.BuildFrom(System.Collections.IList? keys, System.Collections.IDictionary? values, Firebase.Database.Collection.ImmutableSortedMap.Builder.IKeyTranslator? translator, Java.Util.IComparator? comparator) -> Firebase.Database.Collection.ImmutableSortedMap?
static Firebase.Database.Collection.ImmutableSortedMap.Builder.EmptyMap(Java.Util.IComparator? comparator) -> Firebase.Database.Collection.ImmutableSortedMap?
static Firebase.Database.Collection.ImmutableSortedMap.Builder.FromMap(System.Collections.IDictionary? values, Java.Util.IComparator? comparator) -> Firebase.Database.Collection.ImmutableSortedMap?
static Firebase.Database.Collection.ImmutableSortedMap.Builder.IdentityTranslator() -> Firebase.Database.Collection.ImmutableSortedMap.Builder.IKeyTranslator?
static Firebase.Database.Collection.LLRBEmptyNode.Instance.get -> Firebase.Database.Collection.LLRBEmptyNode?
static Firebase.Database.Collection.LLRBNodeColor.Black.get -> Firebase.Database.Collection.LLRBNodeColor?
static Firebase.Database.Collection.LLRBNodeColor.Red.get -> Firebase.Database.Collection.LLRBNodeColor?
static Firebase.Database.Collection.LLRBNodeColor.ValueOf(string? name) -> Firebase.Database.Collection.LLRBNodeColor?
static Firebase.Database.Collection.LLRBNodeColor.Values() -> Firebase.Database.Collection.LLRBNodeColor![]?
static Firebase.Database.Collection.RBTreeSortedMap.BuildFrom(System.Collections.IList? keys, System.Collections.IDictionary? values, Firebase.Database.Collection.ImmutableSortedMap.Builder.IKeyTranslator? translator, Java.Util.IComparator? comparator) -> Firebase.Database.Collection.RBTreeSortedMap?
static Firebase.Database.Collection.RBTreeSortedMap.FromMap(System.Collections.IDictionary? values, Java.Util.IComparator? comparator) -> Firebase.Database.Collection.RBTreeSortedMap?
static Firebase.Database.Collection.StandardComparator.GetComparator(Java.Lang.Class? clazz) -> Firebase.Database.Collection.StandardComparator?
virtual Firebase.Database.Collection.ArraySortedMap.MaxKey.get -> Java.Lang.Object?
virtual Firebase.Database.Collection.ArraySortedMap.MinKey.get -> Java.Lang.Object?
virtual Firebase.Database.Collection.ImmutableSortedMapIterator.HasNext.get -> bool
virtual Firebase.Database.Collection.ImmutableSortedMapIterator.Next() -> Java.Util.IMapEntry?
virtual Firebase.Database.Collection.ImmutableSortedMapIterator.Remove() -> void
virtual Firebase.Database.Collection.ImmutableSortedSet.Contains(Java.Lang.Object? entry) -> bool
virtual Firebase.Database.Collection.ImmutableSortedSet.GetPredecessorEntry(Java.Lang.Object? entry) -> Java.Lang.Object?
virtual Firebase.Database.Collection.ImmutableSortedSet.IndexOf(Java.Lang.Object? entry) -> int
virtual Firebase.Database.Collection.ImmutableSortedSet.Insert(Java.Lang.Object? entry) -> Firebase.Database.Collection.ImmutableSortedSet?
virtual Firebase.Database.Collection.ImmutableSortedSet.IsEmpty.get -> bool
virtual Firebase.Database.Collection.ImmutableSortedSet.Iterator() -> Java.Util.IIterator?
virtual Firebase.Database.Collection.ImmutableSortedSet.IteratorFrom(Java.Lang.Object? entry) -> Java.Util.IIterator?
virtual Firebase.Database.Collection.ImmutableSortedSet.MaxEntry.get -> Java.Lang.Object?
virtual Firebase.Database.Collection.ImmutableSortedSet.MinEntry.get -> Java.Lang.Object?
virtual Firebase.Database.Collection.ImmutableSortedSet.Remove(Java.Lang.Object? entry) -> Firebase.Database.Collection.ImmutableSortedSet?
virtual Firebase.Database.Collection.ImmutableSortedSet.ReverseIterator() -> Java.Util.IIterator?
virtual Firebase.Database.Collection.ImmutableSortedSet.ReverseIteratorFrom(Java.Lang.Object? entry) -> Java.Util.IIterator?
virtual Firebase.Database.Collection.ImmutableSortedSet.Size() -> int
virtual Firebase.Database.Collection.ImmutableSortedSet.UnionWith(Firebase.Database.Collection.ImmutableSortedSet? other) -> Firebase.Database.Collection.ImmutableSortedSet?
virtual Firebase.Database.Collection.LLRBBlackValueNode.IsRed.get -> bool
virtual Firebase.Database.Collection.LLRBBlackValueNode.Size() -> int
virtual Firebase.Database.Collection.LLRBEmptyNode.Copy(Java.Lang.Object? key, Java.Lang.Object? value, Firebase.Database.Collection.LLRBNodeColor? color, Firebase.Database.Collection.ILLRBNode? left, Firebase.Database.Collection.ILLRBNode? right) -> Firebase.Database.Collection.ILLRBNode?
virtual Firebase.Database.Collection.LLRBEmptyNode.InOrderTraversal(Firebase.Database.Collection.LLRBNodeNodeVisitor? visitor) -> void
virtual Firebase.Database.Collection.LLRBEmptyNode.Insert(Java.Lang.Object? key, Java.Lang.Object? value, Java.Util.IComparator? comparator) -> Firebase.Database.Collection.ILLRBNode?
virtual Firebase.Database.Collection.LLRBEmptyNode.IsEmpty.get -> bool
virtual Firebase.Database.Collection.LLRBEmptyNode.IsRed.get -> bool
virtual Firebase.Database.Collection.LLRBEmptyNode.Key.get -> Java.Lang.Object?
virtual Firebase.Database.Collection.LLRBEmptyNode.Left.get -> Firebase.Database.Collection.ILLRBNode?
virtual Firebase.Database.Collection.LLRBEmptyNode.Max.get -> Firebase.Database.Collection.ILLRBNode?
virtual Firebase.Database.Collection.LLRBEmptyNode.Min.get -> Firebase.Database.Collection.ILLRBNode?
virtual Firebase.Database.Collection.LLRBEmptyNode.Remove(Java.Lang.Object? key, Java.Util.IComparator? comparator) -> Firebase.Database.Collection.ILLRBNode?
virtual Firebase.Database.Collection.LLRBEmptyNode.Right.get -> Firebase.Database.Collection.ILLRBNode?
virtual Firebase.Database.Collection.LLRBEmptyNode.ShortCircuitingInOrderTraversal(Firebase.Database.Collection.ILLRBNodeShortCircuitingNodeVisitor? visitor) -> bool
virtual Firebase.Database.Collection.LLRBEmptyNode.ShortCircuitingReverseOrderTraversal(Firebase.Database.Collection.ILLRBNodeShortCircuitingNodeVisitor? visitor) -> bool
virtual Firebase.Database.Collection.LLRBEmptyNode.Size() -> int
virtual Firebase.Database.Collection.LLRBEmptyNode.Value.get -> Java.Lang.Object?
virtual Firebase.Database.Collection.LLRBNodeNodeVisitor.ShouldContinue(Java.Lang.Object? key, Java.Lang.Object? value) -> bool
virtual Firebase.Database.Collection.LLRBRedValueNode.IsRed.get -> bool
virtual Firebase.Database.Collection.LLRBRedValueNode.Size() -> int
virtual Firebase.Database.Collection.LLRBValueNode.Copy(Java.Lang.Object? key, Java.Lang.Object? value, Firebase.Database.Collection.LLRBNodeColor? color, Firebase.Database.Collection.ILLRBNode? left, Firebase.Database.Collection.ILLRBNode? right) -> Firebase.Database.Collection.LLRBValueNode?
virtual Firebase.Database.Collection.LLRBValueNode.InOrderTraversal(Firebase.Database.Collection.LLRBNodeNodeVisitor? visitor) -> void
virtual Firebase.Database.Collection.LLRBValueNode.Insert(Java.Lang.Object? key, Java.Lang.Object? value, Java.Util.IComparator? comparator) -> Firebase.Database.Collection.ILLRBNode?
virtual Firebase.Database.Collection.LLRBValueNode.IsEmpty.get -> bool
virtual Firebase.Database.Collection.LLRBValueNode.Key.get -> Java.Lang.Object?
virtual Firebase.Database.Collection.LLRBValueNode.Left.get -> Firebase.Database.Collection.ILLRBNode?
virtual Firebase.Database.Collection.LLRBValueNode.Max.get -> Firebase.Database.Collection.ILLRBNode?
virtual Firebase.Database.Collection.LLRBValueNode.Min.get -> Firebase.Database.Collection.ILLRBNode?
virtual Firebase.Database.Collection.LLRBValueNode.Remove(Java.Lang.Object? key, Java.Util.IComparator? comparator) -> Firebase.Database.Collection.ILLRBNode?
virtual Firebase.Database.Collection.LLRBValueNode.Right.get -> Firebase.Database.Collection.ILLRBNode?
virtual Firebase.Database.Collection.LLRBValueNode.ShortCircuitingInOrderTraversal(Firebase.Database.Collection.ILLRBNodeShortCircuitingNodeVisitor? visitor) -> bool
virtual Firebase.Database.Collection.LLRBValueNode.ShortCircuitingReverseOrderTraversal(Firebase.Database.Collection.ILLRBNodeShortCircuitingNodeVisitor? visitor) -> bool
virtual Firebase.Database.Collection.LLRBValueNode.Value.get -> Java.Lang.Object?
virtual Firebase.Database.Collection.RBTreeSortedMap.MaxKey.get -> Java.Lang.Object?
virtual Firebase.Database.Collection.RBTreeSortedMap.MinKey.get -> Java.Lang.Object?
virtual Firebase.Database.Collection.StandardComparator.Compare(Java.Lang.Object? o1, Java.Lang.Object? o2) -> int
