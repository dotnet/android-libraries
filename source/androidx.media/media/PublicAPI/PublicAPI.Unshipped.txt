#nullable enable
Android.Support.V4.Media.AudioAttributesCompatParcelizer
Android.Support.V4.Media.AudioAttributesCompatParcelizer.AudioAttributesCompatParcelizer() -> void
Android.Support.V4.Media.AudioAttributesImplBaseParcelizer
Android.Support.V4.Media.AudioAttributesImplBaseParcelizer.AudioAttributesImplBaseParcelizer() -> void
Android.Support.V4.Media.MediaBrowserCompat
Android.Support.V4.Media.MediaBrowserCompat.CallbackHandler
Android.Support.V4.Media.MediaBrowserCompat.CallbackHandler.CallbackHandler(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.Media.MediaBrowserCompat.Connect() -> void
Android.Support.V4.Media.MediaBrowserCompat.ConnectionCallback
Android.Support.V4.Media.MediaBrowserCompat.ConnectionCallback.ConnectionCallback() -> void
Android.Support.V4.Media.MediaBrowserCompat.ConnectionCallback.ConnectionCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.Media.MediaBrowserCompat.ConnectionCallback.IConnectionCallbackInternal
Android.Support.V4.Media.MediaBrowserCompat.ConnectionCallback.IConnectionCallbackInternal.OnConnected() -> void
Android.Support.V4.Media.MediaBrowserCompat.ConnectionCallback.IConnectionCallbackInternal.OnConnectionFailed() -> void
Android.Support.V4.Media.MediaBrowserCompat.ConnectionCallback.IConnectionCallbackInternal.OnConnectionSuspended() -> void
Android.Support.V4.Media.MediaBrowserCompat.CustomActionCallback
Android.Support.V4.Media.MediaBrowserCompat.CustomActionCallback.CustomActionCallback() -> void
Android.Support.V4.Media.MediaBrowserCompat.CustomActionCallback.CustomActionCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.Media.MediaBrowserCompat.Disconnect() -> void
Android.Support.V4.Media.MediaBrowserCompat.Extras.get -> Android.OS.Bundle?
Android.Support.V4.Media.MediaBrowserCompat.GetItem(string! mediaId, Android.Support.V4.Media.MediaBrowserCompat.ItemCallback! cb) -> void
Android.Support.V4.Media.MediaBrowserCompat.IsConnected.get -> bool
Android.Support.V4.Media.MediaBrowserCompat.ItemCallback
Android.Support.V4.Media.MediaBrowserCompat.ItemCallback.ItemCallback() -> void
Android.Support.V4.Media.MediaBrowserCompat.ItemCallback.ItemCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.Media.MediaBrowserCompat.MediaBrowserCompat(Android.Content.Context? context, Android.Content.ComponentName? serviceComponent, Android.Support.V4.Media.MediaBrowserCompat.ConnectionCallback? callback, Android.OS.Bundle? rootHints) -> void
Android.Support.V4.Media.MediaBrowserCompat.MediaItem
Android.Support.V4.Media.MediaBrowserCompat.MediaItem.MediaItem(Android.Support.V4.Media.MediaDescriptionCompat! description, int flags) -> void
Android.Support.V4.Media.MediaBrowserCompat.MediaItem.MediaItem(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.Media.MediaBrowserCompat.NotifyChildrenChangedOptions.get -> Android.OS.Bundle?
Android.Support.V4.Media.MediaBrowserCompat.Root.get -> string!
Android.Support.V4.Media.MediaBrowserCompat.Search(string! query, Android.OS.Bundle? extras, Android.Support.V4.Media.MediaBrowserCompat.SearchCallback! callback) -> void
Android.Support.V4.Media.MediaBrowserCompat.SearchCallback
Android.Support.V4.Media.MediaBrowserCompat.SearchCallback.SearchCallback() -> void
Android.Support.V4.Media.MediaBrowserCompat.SearchCallback.SearchCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.Media.MediaBrowserCompat.SendCustomAction(string! action, Android.OS.Bundle? extras, Android.Support.V4.Media.MediaBrowserCompat.CustomActionCallback? callback) -> void
Android.Support.V4.Media.MediaBrowserCompat.ServiceBinderWrapper
Android.Support.V4.Media.MediaBrowserCompat.ServiceBinderWrapper.ServiceBinderWrapper(Android.OS.IBinder? target, Android.OS.Bundle? rootHints) -> void
Android.Support.V4.Media.MediaBrowserCompat.ServiceBinderWrapper.ServiceBinderWrapper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.Media.MediaBrowserCompat.ServiceComponent.get -> Android.Content.ComponentName!
Android.Support.V4.Media.MediaBrowserCompat.SessionToken.get -> Android.Support.V4.Media.Session.MediaSessionCompat.Token!
Android.Support.V4.Media.MediaBrowserCompat.Subscribe(string! parentId, Android.OS.Bundle! options, Android.Support.V4.Media.MediaBrowserCompat.SubscriptionCallback! callback) -> void
Android.Support.V4.Media.MediaBrowserCompat.Subscribe(string! parentId, Android.Support.V4.Media.MediaBrowserCompat.SubscriptionCallback! callback) -> void
Android.Support.V4.Media.MediaBrowserCompat.SubscriptionCallback
Android.Support.V4.Media.MediaBrowserCompat.SubscriptionCallback.SubscriptionCallback() -> void
Android.Support.V4.Media.MediaBrowserCompat.SubscriptionCallback.SubscriptionCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.Media.MediaBrowserCompat.Unsubscribe(string! parentId) -> void
Android.Support.V4.Media.MediaBrowserCompat.Unsubscribe(string! parentId, Android.Support.V4.Media.MediaBrowserCompat.SubscriptionCallback! callback) -> void
Android.Support.V4.Media.MediaDescriptionCompat
Android.Support.V4.Media.MediaDescriptionCompat.Builder
Android.Support.V4.Media.MediaDescriptionCompat.Builder.Build() -> Android.Support.V4.Media.MediaDescriptionCompat?
Android.Support.V4.Media.MediaDescriptionCompat.Builder.Builder() -> void
Android.Support.V4.Media.MediaDescriptionCompat.Builder.SetDescription(Java.Lang.ICharSequence? description) -> Android.Support.V4.Media.MediaDescriptionCompat.Builder?
Android.Support.V4.Media.MediaDescriptionCompat.Builder.SetDescription(string? description) -> Android.Support.V4.Media.MediaDescriptionCompat.Builder?
Android.Support.V4.Media.MediaDescriptionCompat.Builder.SetExtras(Android.OS.Bundle? extras) -> Android.Support.V4.Media.MediaDescriptionCompat.Builder?
Android.Support.V4.Media.MediaDescriptionCompat.Builder.SetIconBitmap(Android.Graphics.Bitmap? icon) -> Android.Support.V4.Media.MediaDescriptionCompat.Builder?
Android.Support.V4.Media.MediaDescriptionCompat.Builder.SetIconUri(Android.Net.Uri? iconUri) -> Android.Support.V4.Media.MediaDescriptionCompat.Builder?
Android.Support.V4.Media.MediaDescriptionCompat.Builder.SetMediaId(string? mediaId) -> Android.Support.V4.Media.MediaDescriptionCompat.Builder?
Android.Support.V4.Media.MediaDescriptionCompat.Builder.SetMediaUri(Android.Net.Uri? mediaUri) -> Android.Support.V4.Media.MediaDescriptionCompat.Builder?
Android.Support.V4.Media.MediaDescriptionCompat.Builder.SetSubtitle(Java.Lang.ICharSequence? subtitle) -> Android.Support.V4.Media.MediaDescriptionCompat.Builder?
Android.Support.V4.Media.MediaDescriptionCompat.Builder.SetSubtitle(string? subtitle) -> Android.Support.V4.Media.MediaDescriptionCompat.Builder?
Android.Support.V4.Media.MediaDescriptionCompat.Builder.SetTitle(Java.Lang.ICharSequence? title) -> Android.Support.V4.Media.MediaDescriptionCompat.Builder?
Android.Support.V4.Media.MediaDescriptionCompat.Builder.SetTitle(string? title) -> Android.Support.V4.Media.MediaDescriptionCompat.Builder?
Android.Support.V4.Media.MediaDescriptionCompat.DescribeContents() -> int
Android.Support.V4.Media.MediaDescriptionCompat.Description.get -> string?
Android.Support.V4.Media.MediaDescriptionCompat.DescriptionFormatted.get -> Java.Lang.ICharSequence?
Android.Support.V4.Media.MediaDescriptionCompat.Extras.get -> Android.OS.Bundle?
Android.Support.V4.Media.MediaDescriptionCompat.IconBitmap.get -> Android.Graphics.Bitmap?
Android.Support.V4.Media.MediaDescriptionCompat.IconUri.get -> Android.Net.Uri?
Android.Support.V4.Media.MediaDescriptionCompat.MediaDescription.get -> Java.Lang.Object?
Android.Support.V4.Media.MediaDescriptionCompat.MediaId.get -> string?
Android.Support.V4.Media.MediaDescriptionCompat.MediaUri.get -> Android.Net.Uri?
Android.Support.V4.Media.MediaDescriptionCompat.Subtitle.get -> string?
Android.Support.V4.Media.MediaDescriptionCompat.SubtitleFormatted.get -> Java.Lang.ICharSequence?
Android.Support.V4.Media.MediaDescriptionCompat.Title.get -> string?
Android.Support.V4.Media.MediaDescriptionCompat.TitleFormatted.get -> Java.Lang.ICharSequence?
Android.Support.V4.Media.MediaDescriptionCompat.WriteToParcel(Android.OS.Parcel? dest, Android.OS.ParcelableWriteFlags flags) -> void
Android.Support.V4.Media.MediaMetadataCompat
Android.Support.V4.Media.MediaMetadataCompat.Builder
Android.Support.V4.Media.MediaMetadataCompat.Builder.Build() -> Android.Support.V4.Media.MediaMetadataCompat?
Android.Support.V4.Media.MediaMetadataCompat.Builder.Builder() -> void
Android.Support.V4.Media.MediaMetadataCompat.Builder.Builder(Android.Support.V4.Media.MediaMetadataCompat? source) -> void
Android.Support.V4.Media.MediaMetadataCompat.Builder.Builder(Android.Support.V4.Media.MediaMetadataCompat? source, int maxBitmapSize) -> void
Android.Support.V4.Media.MediaMetadataCompat.Builder.PutBitmap(string? key, Android.Graphics.Bitmap? value) -> Android.Support.V4.Media.MediaMetadataCompat.Builder?
Android.Support.V4.Media.MediaMetadataCompat.Builder.PutLong(string? key, long value) -> Android.Support.V4.Media.MediaMetadataCompat.Builder?
Android.Support.V4.Media.MediaMetadataCompat.Builder.PutRating(string? key, Android.Support.V4.Media.RatingCompat? value) -> Android.Support.V4.Media.MediaMetadataCompat.Builder?
Android.Support.V4.Media.MediaMetadataCompat.Builder.PutString(string? key, string? value) -> Android.Support.V4.Media.MediaMetadataCompat.Builder?
Android.Support.V4.Media.MediaMetadataCompat.Builder.PutText(string? key, Java.Lang.ICharSequence? value) -> Android.Support.V4.Media.MediaMetadataCompat.Builder?
Android.Support.V4.Media.MediaMetadataCompat.Builder.PutText(string? key, string? value) -> Android.Support.V4.Media.MediaMetadataCompat.Builder?
Android.Support.V4.Media.MediaMetadataCompat.Bundle.get -> Android.OS.Bundle?
Android.Support.V4.Media.MediaMetadataCompat.ContainsKey(string? key) -> bool
Android.Support.V4.Media.MediaMetadataCompat.DescribeContents() -> int
Android.Support.V4.Media.MediaMetadataCompat.Description.get -> Android.Support.V4.Media.MediaDescriptionCompat?
Android.Support.V4.Media.MediaMetadataCompat.GetBitmap(string? key) -> Android.Graphics.Bitmap?
Android.Support.V4.Media.MediaMetadataCompat.GetLong(string? key) -> long
Android.Support.V4.Media.MediaMetadataCompat.GetRating(string? key) -> Android.Support.V4.Media.RatingCompat?
Android.Support.V4.Media.MediaMetadataCompat.GetString(string? key) -> string?
Android.Support.V4.Media.MediaMetadataCompat.GetText(string? key) -> string?
Android.Support.V4.Media.MediaMetadataCompat.GetTextFormatted(string? key) -> Java.Lang.ICharSequence?
Android.Support.V4.Media.MediaMetadataCompat.KeySet() -> System.Collections.Generic.ICollection<string!>?
Android.Support.V4.Media.MediaMetadataCompat.MediaMetadata.get -> Java.Lang.Object?
Android.Support.V4.Media.MediaMetadataCompat.Size() -> int
Android.Support.V4.Media.MediaMetadataCompat.WriteToParcel(Android.OS.Parcel? dest, Android.OS.ParcelableWriteFlags flags) -> void
Android.Support.V4.Media.RatingCompat
Android.Support.V4.Media.RatingCompat.DescribeContents() -> int
Android.Support.V4.Media.RatingCompat.HasHeart.get -> bool
Android.Support.V4.Media.RatingCompat.IStarStyle
Android.Support.V4.Media.RatingCompat.IStyle
Android.Support.V4.Media.RatingCompat.IsRated.get -> bool
Android.Support.V4.Media.RatingCompat.IsThumbUp.get -> bool
Android.Support.V4.Media.RatingCompat.PercentRating.get -> float
Android.Support.V4.Media.RatingCompat.Rating.get -> Java.Lang.Object?
Android.Support.V4.Media.RatingCompat.RatingStyle.get -> int
Android.Support.V4.Media.RatingCompat.StarRating.get -> float
Android.Support.V4.Media.RatingCompat.WriteToParcel(Android.OS.Parcel? dest, Android.OS.ParcelableWriteFlags flags) -> void
Android.Support.V4.Media.Session.IMediaControllerCallback
Android.Support.V4.Media.Session.IMediaControllerCallback.OnCaptioningEnabledChanged(bool p0) -> void
Android.Support.V4.Media.Session.IMediaControllerCallback.OnEvent(string? p0, Android.OS.Bundle? p1) -> void
Android.Support.V4.Media.Session.IMediaControllerCallback.OnExtrasChanged(Android.OS.Bundle? p0) -> void
Android.Support.V4.Media.Session.IMediaControllerCallback.OnMetadataChanged(Android.Support.V4.Media.MediaMetadataCompat? p0) -> void
Android.Support.V4.Media.Session.IMediaControllerCallback.OnPlaybackStateChanged(Android.Support.V4.Media.Session.PlaybackStateCompat? p0) -> void
Android.Support.V4.Media.Session.IMediaControllerCallback.OnQueueChanged(System.Collections.Generic.IList<Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem!>? p0) -> void
Android.Support.V4.Media.Session.IMediaControllerCallback.OnQueueTitleChanged(Java.Lang.ICharSequence? p0) -> void
Android.Support.V4.Media.Session.IMediaControllerCallback.OnRepeatModeChanged(int p0) -> void
Android.Support.V4.Media.Session.IMediaControllerCallback.OnSessionDestroyed() -> void
Android.Support.V4.Media.Session.IMediaControllerCallback.OnSessionReady() -> void
Android.Support.V4.Media.Session.IMediaControllerCallback.OnShuffleModeChanged(int p0) -> void
Android.Support.V4.Media.Session.IMediaControllerCallback.OnShuffleModeChangedRemoved(bool p0) -> void
Android.Support.V4.Media.Session.IMediaControllerCallback.OnVolumeInfoChanged(Android.Support.V4.Media.Session.ParcelableVolumeInfo? p0) -> void
Android.Support.V4.Media.Session.IMediaControllerCallbackExtensions
Android.Support.V4.Media.Session.IMediaSession
Android.Support.V4.Media.Session.IMediaSession.AddQueueItem(Android.Support.V4.Media.MediaDescriptionCompat? p0) -> void
Android.Support.V4.Media.Session.IMediaSession.AddQueueItemAt(Android.Support.V4.Media.MediaDescriptionCompat? p0, int p1) -> void
Android.Support.V4.Media.Session.IMediaSession.AdjustVolume(int p0, int p1, string? p2) -> void
Android.Support.V4.Media.Session.IMediaSession.CaptioningEnabled.get -> bool
Android.Support.V4.Media.Session.IMediaSession.CaptioningEnabled.set -> void
Android.Support.V4.Media.Session.IMediaSession.Extras.get -> Android.OS.Bundle?
Android.Support.V4.Media.Session.IMediaSession.FastForward() -> void
Android.Support.V4.Media.Session.IMediaSession.Flags.get -> long
Android.Support.V4.Media.Session.IMediaSession.IsTransportControlEnabled.get -> bool
Android.Support.V4.Media.Session.IMediaSession.LaunchPendingIntent.get -> Android.App.PendingIntent?
Android.Support.V4.Media.Session.IMediaSession.Metadata.get -> Android.Support.V4.Media.MediaMetadataCompat?
Android.Support.V4.Media.Session.IMediaSession.Next() -> void
Android.Support.V4.Media.Session.IMediaSession.PackageName.get -> string?
Android.Support.V4.Media.Session.IMediaSession.Pause() -> void
Android.Support.V4.Media.Session.IMediaSession.Play() -> void
Android.Support.V4.Media.Session.IMediaSession.PlayFromMediaId(string? p0, Android.OS.Bundle? p1) -> void
Android.Support.V4.Media.Session.IMediaSession.PlayFromSearch(string? p0, Android.OS.Bundle? p1) -> void
Android.Support.V4.Media.Session.IMediaSession.PlayFromUri(Android.Net.Uri? p0, Android.OS.Bundle? p1) -> void
Android.Support.V4.Media.Session.IMediaSession.PlaybackState.get -> Android.Support.V4.Media.Session.PlaybackStateCompat?
Android.Support.V4.Media.Session.IMediaSession.Prepare() -> void
Android.Support.V4.Media.Session.IMediaSession.PrepareFromMediaId(string? p0, Android.OS.Bundle? p1) -> void
Android.Support.V4.Media.Session.IMediaSession.PrepareFromSearch(string? p0, Android.OS.Bundle? p1) -> void
Android.Support.V4.Media.Session.IMediaSession.PrepareFromUri(Android.Net.Uri? p0, Android.OS.Bundle? p1) -> void
Android.Support.V4.Media.Session.IMediaSession.Previous() -> void
Android.Support.V4.Media.Session.IMediaSession.Queue.get -> System.Collections.Generic.IList<Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem!>?
Android.Support.V4.Media.Session.IMediaSession.QueueTitleFormatted.get -> Java.Lang.ICharSequence?
Android.Support.V4.Media.Session.IMediaSession.Rate(Android.Support.V4.Media.RatingCompat? p0) -> void
Android.Support.V4.Media.Session.IMediaSession.RateWithExtras(Android.Support.V4.Media.RatingCompat? p0, Android.OS.Bundle? p1) -> void
Android.Support.V4.Media.Session.IMediaSession.RatingType.get -> int
Android.Support.V4.Media.Session.IMediaSession.RegisterCallbackListener(Android.Support.V4.Media.Session.IMediaControllerCallback? p0) -> void
Android.Support.V4.Media.Session.IMediaSession.RemoveQueueItem(Android.Support.V4.Media.MediaDescriptionCompat? p0) -> void
Android.Support.V4.Media.Session.IMediaSession.RemoveQueueItemAt(int p0) -> void
Android.Support.V4.Media.Session.IMediaSession.RepeatMode.get -> int
Android.Support.V4.Media.Session.IMediaSession.RepeatMode.set -> void
Android.Support.V4.Media.Session.IMediaSession.Rewind() -> void
Android.Support.V4.Media.Session.IMediaSession.SeekTo(long p0) -> void
Android.Support.V4.Media.Session.IMediaSession.SendCustomAction(string? p0, Android.OS.Bundle? p1) -> void
Android.Support.V4.Media.Session.IMediaSession.SendMediaButton(Android.Views.KeyEvent? p0) -> bool
Android.Support.V4.Media.Session.IMediaSession.SessionInfo.get -> Android.OS.Bundle?
Android.Support.V4.Media.Session.IMediaSession.SetPlaybackSpeed(float p0) -> void
Android.Support.V4.Media.Session.IMediaSession.SetVolumeTo(int p0, int p1, string? p2) -> void
Android.Support.V4.Media.Session.IMediaSession.ShuffleMode.get -> int
Android.Support.V4.Media.Session.IMediaSession.ShuffleMode.set -> void
Android.Support.V4.Media.Session.IMediaSession.ShuffleModeEnabledRemoved.get -> bool
Android.Support.V4.Media.Session.IMediaSession.ShuffleModeEnabledRemoved.set -> void
Android.Support.V4.Media.Session.IMediaSession.SkipToQueueItem(long p0) -> void
Android.Support.V4.Media.Session.IMediaSession.Stop() -> void
Android.Support.V4.Media.Session.IMediaSession.Tag.get -> string?
Android.Support.V4.Media.Session.IMediaSession.UnregisterCallbackListener(Android.Support.V4.Media.Session.IMediaControllerCallback? p0) -> void
Android.Support.V4.Media.Session.IMediaSession.VolumeAttributes.get -> Android.Support.V4.Media.Session.ParcelableVolumeInfo?
Android.Support.V4.Media.Session.MediaControllerCallback
Android.Support.V4.Media.Session.MediaControllerCallbackConsts
Android.Support.V4.Media.Session.MediaControllerCallbackDefault
Android.Support.V4.Media.Session.MediaControllerCallbackDefault.InterfaceConsts
Android.Support.V4.Media.Session.MediaControllerCallbackDefault.MediaControllerCallbackDefault() -> void
Android.Support.V4.Media.Session.MediaControllerCallbackDefault.MediaControllerCallbackDefault(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.Media.Session.MediaControllerCallbackDefault.OnQueueTitleChanged(string? title) -> void
Android.Support.V4.Media.Session.MediaControllerCallbackStub
Android.Support.V4.Media.Session.MediaControllerCallbackStub.InterfaceConsts
Android.Support.V4.Media.Session.MediaControllerCallbackStub.MediaControllerCallbackStub() -> void
Android.Support.V4.Media.Session.MediaControllerCallbackStub.MediaControllerCallbackStub(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.Media.Session.MediaControllerCallbackStub.OnQueueTitleChanged(string? p0) -> void
Android.Support.V4.Media.Session.MediaControllerCallback_Parcel
Android.Support.V4.Media.Session.MediaControllerCallback_Parcel.MediaControllerCallback_Parcel() -> void
Android.Support.V4.Media.Session.MediaControllerCallback_Parcel.MediaControllerCallback_Parcel(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.Media.Session.MediaControllerCompat
Android.Support.V4.Media.Session.MediaControllerCompat.AddQueueItem(Android.Support.V4.Media.MediaDescriptionCompat? description) -> void
Android.Support.V4.Media.Session.MediaControllerCompat.AddQueueItem(Android.Support.V4.Media.MediaDescriptionCompat? description, int index) -> void
Android.Support.V4.Media.Session.MediaControllerCompat.AdjustVolume(int direction, int flags) -> void
Android.Support.V4.Media.Session.MediaControllerCompat.Callback
Android.Support.V4.Media.Session.MediaControllerCompat.Callback.Callback() -> void
Android.Support.V4.Media.Session.MediaControllerCompat.Callback.Callback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.Media.Session.MediaControllerCompat.Callback.OnQueueTitleChanged(string? title) -> void
Android.Support.V4.Media.Session.MediaControllerCompat.DispatchMediaButtonEvent(Android.Views.KeyEvent? keyEvent) -> bool
Android.Support.V4.Media.Session.MediaControllerCompat.Extras.get -> Android.OS.Bundle?
Android.Support.V4.Media.Session.MediaControllerCompat.Flags.get -> long
Android.Support.V4.Media.Session.MediaControllerCompat.GetPlaybackInfo() -> Android.Support.V4.Media.Session.MediaControllerCompat.PlaybackInfo?
Android.Support.V4.Media.Session.MediaControllerCompat.GetTransportControls() -> Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls?
Android.Support.V4.Media.Session.MediaControllerCompat.IsCaptioningEnabled.get -> bool
Android.Support.V4.Media.Session.MediaControllerCompat.IsSessionReady.get -> bool
Android.Support.V4.Media.Session.MediaControllerCompat.MediaController.get -> Java.Lang.Object?
Android.Support.V4.Media.Session.MediaControllerCompat.MediaControllerCompat(Android.Content.Context? context, Android.Support.V4.Media.Session.MediaSessionCompat! session) -> void
Android.Support.V4.Media.Session.MediaControllerCompat.MediaControllerCompat(Android.Content.Context? context, Android.Support.V4.Media.Session.MediaSessionCompat.Token! sessionToken) -> void
Android.Support.V4.Media.Session.MediaControllerCompat.Metadata.get -> Android.Support.V4.Media.MediaMetadataCompat?
Android.Support.V4.Media.Session.MediaControllerCompat.PackageName.get -> string?
Android.Support.V4.Media.Session.MediaControllerCompat.PlaybackInfo
Android.Support.V4.Media.Session.MediaControllerCompat.PlaybackInfo.AudioAttributes.get -> AndroidX.Media.AudioAttributesCompat!
Android.Support.V4.Media.Session.MediaControllerCompat.PlaybackInfo.AudioStream.get -> int
Android.Support.V4.Media.Session.MediaControllerCompat.PlaybackInfo.CurrentVolume.get -> int
Android.Support.V4.Media.Session.MediaControllerCompat.PlaybackInfo.MaxVolume.get -> int
Android.Support.V4.Media.Session.MediaControllerCompat.PlaybackInfo.PlaybackType.get -> int
Android.Support.V4.Media.Session.MediaControllerCompat.PlaybackInfo.VolumeControl.get -> int
Android.Support.V4.Media.Session.MediaControllerCompat.PlaybackState.get -> Android.Support.V4.Media.Session.PlaybackStateCompat?
Android.Support.V4.Media.Session.MediaControllerCompat.Queue.get -> System.Collections.Generic.IList<Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem!>?
Android.Support.V4.Media.Session.MediaControllerCompat.QueueTitle.get -> string?
Android.Support.V4.Media.Session.MediaControllerCompat.QueueTitleFormatted.get -> Java.Lang.ICharSequence?
Android.Support.V4.Media.Session.MediaControllerCompat.RatingType.get -> int
Android.Support.V4.Media.Session.MediaControllerCompat.RegisterCallback(Android.Support.V4.Media.Session.MediaControllerCompat.Callback! callback) -> void
Android.Support.V4.Media.Session.MediaControllerCompat.RegisterCallback(Android.Support.V4.Media.Session.MediaControllerCompat.Callback! callback, Android.OS.Handler? handler) -> void
Android.Support.V4.Media.Session.MediaControllerCompat.RemoveQueueItem(Android.Support.V4.Media.MediaDescriptionCompat? description) -> void
Android.Support.V4.Media.Session.MediaControllerCompat.RemoveQueueItemAt(int index) -> void
Android.Support.V4.Media.Session.MediaControllerCompat.RepeatMode.get -> int
Android.Support.V4.Media.Session.MediaControllerCompat.SendCommand(string! command, Android.OS.Bundle? params, Android.OS.ResultReceiver? cb) -> void
Android.Support.V4.Media.Session.MediaControllerCompat.Session2Token.get -> AndroidX.VersionedParcelable.IVersionedParcelable?
Android.Support.V4.Media.Session.MediaControllerCompat.SessionActivity.get -> Android.App.PendingIntent?
Android.Support.V4.Media.Session.MediaControllerCompat.SessionInfo.get -> Android.OS.Bundle!
Android.Support.V4.Media.Session.MediaControllerCompat.SessionToken.get -> Android.Support.V4.Media.Session.MediaSessionCompat.Token?
Android.Support.V4.Media.Session.MediaControllerCompat.SetVolumeTo(int value, int flags) -> void
Android.Support.V4.Media.Session.MediaControllerCompat.ShuffleMode.get -> int
Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls
Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.TransportControls(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.Media.Session.MediaControllerCompat.UnregisterCallback(Android.Support.V4.Media.Session.MediaControllerCompat.Callback! callback) -> void
Android.Support.V4.Media.Session.MediaSession
Android.Support.V4.Media.Session.MediaSessionCompat
Android.Support.V4.Media.Session.MediaSessionCompat.ActiveChange -> System.EventHandler!
Android.Support.V4.Media.Session.MediaSessionCompat.Callback
Android.Support.V4.Media.Session.MediaSessionCompat.Callback.Callback() -> void
Android.Support.V4.Media.Session.MediaSessionCompat.Callback.Callback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.Media.Session.MediaSessionCompat.CurrentControllerInfo.get -> AndroidX.Media.MediaSessionManager.RemoteUserInfo!
Android.Support.V4.Media.Session.MediaSessionCompat.IOnActiveChangeListener
Android.Support.V4.Media.Session.MediaSessionCompat.IOnActiveChangeListener.OnActiveChanged() -> void
Android.Support.V4.Media.Session.MediaSessionCompat.IRegistrationCallback
Android.Support.V4.Media.Session.MediaSessionCompat.IRegistrationCallback.OnCallbackRegistered(int p0, int p1) -> void
Android.Support.V4.Media.Session.MediaSessionCompat.IRegistrationCallback.OnCallbackUnregistered(int p0, int p1) -> void
Android.Support.V4.Media.Session.MediaSessionCompat.MediaSessionCompat(Android.Content.Context! context, string! tag) -> void
Android.Support.V4.Media.Session.MediaSessionCompat.MediaSessionCompat(Android.Content.Context! context, string! tag, Android.Content.ComponentName? mbrComponent, Android.App.PendingIntent? mbrIntent) -> void
Android.Support.V4.Media.Session.MediaSessionCompat.MediaSessionCompat(Android.Content.Context! context, string! tag, Android.Content.ComponentName? mbrComponent, Android.App.PendingIntent? mbrIntent, Android.OS.Bundle? sessionInfo) -> void
Android.Support.V4.Media.Session.MediaSessionCompat.MediaSessionCompat(Android.Content.Context! context, string! tag, Android.Content.ComponentName? mbrComponent, Android.App.PendingIntent? mbrIntent, Android.OS.Bundle? sessionInfo, AndroidX.VersionedParcelable.IVersionedParcelable? session2Token) -> void
Android.Support.V4.Media.Session.MediaSessionCompat.MediaSessionCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem
Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem.DescribeContents() -> int
Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem.Description.get -> Android.Support.V4.Media.MediaDescriptionCompat?
Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem.GetQueueItem() -> Java.Lang.Object?
Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem.QueueId.get -> long
Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem.QueueItem(Android.Support.V4.Media.MediaDescriptionCompat? description, long id) -> void
Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem.WriteToParcel(Android.OS.Parcel? dest, Android.OS.ParcelableWriteFlags flags) -> void
Android.Support.V4.Media.Session.MediaSessionCompat.SetQueueTitle(string? title) -> void
Android.Support.V4.Media.Session.MediaSessionCompat.Token
Android.Support.V4.Media.Session.MediaSessionCompat.Token.DescribeContents() -> int
Android.Support.V4.Media.Session.MediaSessionCompat.Token.ExtraBinder.get -> Android.Support.V4.Media.Session.IMediaSession?
Android.Support.V4.Media.Session.MediaSessionCompat.Token.ExtraBinder.set -> void
Android.Support.V4.Media.Session.MediaSessionCompat.Token.GetToken() -> Java.Lang.Object?
Android.Support.V4.Media.Session.MediaSessionCompat.Token.Session2Token.get -> AndroidX.VersionedParcelable.IVersionedParcelable?
Android.Support.V4.Media.Session.MediaSessionCompat.Token.Session2Token.set -> void
Android.Support.V4.Media.Session.MediaSessionCompat.Token.ToBundle() -> Android.OS.Bundle?
Android.Support.V4.Media.Session.MediaSessionCompat.Token.WriteToParcel(Android.OS.Parcel? dest, Android.OS.ParcelableWriteFlags flags) -> void
Android.Support.V4.Media.Session.MediaSessionConsts
Android.Support.V4.Media.Session.MediaSessionDefault
Android.Support.V4.Media.Session.MediaSessionDefault.InterfaceConsts
Android.Support.V4.Media.Session.MediaSessionDefault.MediaSessionDefault() -> void
Android.Support.V4.Media.Session.MediaSessionDefault.MediaSessionDefault(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.Media.Session.MediaSessionDefault.QueueTitle.get -> string?
Android.Support.V4.Media.Session.MediaSessionStub
Android.Support.V4.Media.Session.MediaSessionStub.InterfaceConsts
Android.Support.V4.Media.Session.MediaSessionStub.MediaSessionStub() -> void
Android.Support.V4.Media.Session.MediaSessionStub.MediaSessionStub(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.Media.Session.MediaSessionStub.QueueTitle.get -> string?
Android.Support.V4.Media.Session.MediaSession_Parcel
Android.Support.V4.Media.Session.MediaSession_Parcel.MediaSession_Parcel() -> void
Android.Support.V4.Media.Session.MediaSession_Parcel.MediaSession_Parcel(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.Media.Session.ParcelableVolumeInfo
Android.Support.V4.Media.Session.ParcelableVolumeInfo.AudioStream.get -> int
Android.Support.V4.Media.Session.ParcelableVolumeInfo.AudioStream.set -> void
Android.Support.V4.Media.Session.ParcelableVolumeInfo.ControlType.get -> int
Android.Support.V4.Media.Session.ParcelableVolumeInfo.ControlType.set -> void
Android.Support.V4.Media.Session.ParcelableVolumeInfo.CurrentVolume.get -> int
Android.Support.V4.Media.Session.ParcelableVolumeInfo.CurrentVolume.set -> void
Android.Support.V4.Media.Session.ParcelableVolumeInfo.MaxVolume.get -> int
Android.Support.V4.Media.Session.ParcelableVolumeInfo.MaxVolume.set -> void
Android.Support.V4.Media.Session.ParcelableVolumeInfo.ParcelableVolumeInfo(Android.OS.Parcel? from) -> void
Android.Support.V4.Media.Session.ParcelableVolumeInfo.ParcelableVolumeInfo(int volumeType, int audioStream, int controlType, int maxVolume, int currentVolume) -> void
Android.Support.V4.Media.Session.ParcelableVolumeInfo.ParcelableVolumeInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Android.Support.V4.Media.Session.ParcelableVolumeInfo.VolumeType.get -> int
Android.Support.V4.Media.Session.ParcelableVolumeInfo.VolumeType.set -> void
Android.Support.V4.Media.Session.PlaybackStateCompat
Android.Support.V4.Media.Session.PlaybackStateCompat.Actions.get -> long
Android.Support.V4.Media.Session.PlaybackStateCompat.ActiveQueueItemId.get -> long
Android.Support.V4.Media.Session.PlaybackStateCompat.BufferedPosition.get -> long
Android.Support.V4.Media.Session.PlaybackStateCompat.Builder
Android.Support.V4.Media.Session.PlaybackStateCompat.Builder.AddCustomAction(Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction? customAction) -> Android.Support.V4.Media.Session.PlaybackStateCompat.Builder?
Android.Support.V4.Media.Session.PlaybackStateCompat.Builder.AddCustomAction(string? action, string? name, int icon) -> Android.Support.V4.Media.Session.PlaybackStateCompat.Builder?
Android.Support.V4.Media.Session.PlaybackStateCompat.Builder.Build() -> Android.Support.V4.Media.Session.PlaybackStateCompat?
Android.Support.V4.Media.Session.PlaybackStateCompat.Builder.Builder() -> void
Android.Support.V4.Media.Session.PlaybackStateCompat.Builder.Builder(Android.Support.V4.Media.Session.PlaybackStateCompat? source) -> void
Android.Support.V4.Media.Session.PlaybackStateCompat.Builder.SetActions(long capabilities) -> Android.Support.V4.Media.Session.PlaybackStateCompat.Builder?
Android.Support.V4.Media.Session.PlaybackStateCompat.Builder.SetActiveQueueItemId(long id) -> Android.Support.V4.Media.Session.PlaybackStateCompat.Builder?
Android.Support.V4.Media.Session.PlaybackStateCompat.Builder.SetBufferedPosition(long bufferPosition) -> Android.Support.V4.Media.Session.PlaybackStateCompat.Builder?
Android.Support.V4.Media.Session.PlaybackStateCompat.Builder.SetErrorMessage(Java.Lang.ICharSequence? errorMessage) -> Android.Support.V4.Media.Session.PlaybackStateCompat.Builder?
Android.Support.V4.Media.Session.PlaybackStateCompat.Builder.SetErrorMessage(int errorCode, Java.Lang.ICharSequence? errorMessage) -> Android.Support.V4.Media.Session.PlaybackStateCompat.Builder?
Android.Support.V4.Media.Session.PlaybackStateCompat.Builder.SetErrorMessage(int errorCode, string? errorMessage) -> Android.Support.V4.Media.Session.PlaybackStateCompat.Builder?
Android.Support.V4.Media.Session.PlaybackStateCompat.Builder.SetErrorMessage(string? errorMessage) -> Android.Support.V4.Media.Session.PlaybackStateCompat.Builder?
Android.Support.V4.Media.Session.PlaybackStateCompat.Builder.SetExtras(Android.OS.Bundle? extras) -> Android.Support.V4.Media.Session.PlaybackStateCompat.Builder?
Android.Support.V4.Media.Session.PlaybackStateCompat.Builder.SetState(int state, long position, float playbackSpeed) -> Android.Support.V4.Media.Session.PlaybackStateCompat.Builder?
Android.Support.V4.Media.Session.PlaybackStateCompat.Builder.SetState(int state, long position, float playbackSpeed, long updateTime) -> Android.Support.V4.Media.Session.PlaybackStateCompat.Builder?
Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction
Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction.Action.get -> string?
Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction.Builder
Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction.Builder.Build() -> Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction?
Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction.Builder.Builder(string? action, Java.Lang.ICharSequence? name, int icon) -> void
Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction.Builder.Builder(string? action, string? name, int icon) -> void
Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction.Builder.SetExtras(Android.OS.Bundle? extras) -> Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction.Builder?
Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction.DescribeContents() -> int
Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction.Extras.get -> Android.OS.Bundle?
Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction.GetCustomAction() -> Java.Lang.Object?
Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction.Icon.get -> int
Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction.Name.get -> string?
Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction.NameFormatted.get -> Java.Lang.ICharSequence?
Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction.WriteToParcel(Android.OS.Parcel? dest, Android.OS.ParcelableWriteFlags flags) -> void
Android.Support.V4.Media.Session.PlaybackStateCompat.CustomActions.get -> System.Collections.Generic.IList<Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction!>?
Android.Support.V4.Media.Session.PlaybackStateCompat.DescribeContents() -> int
Android.Support.V4.Media.Session.PlaybackStateCompat.ErrorCode.get -> int
Android.Support.V4.Media.Session.PlaybackStateCompat.ErrorMessage.get -> string?
Android.Support.V4.Media.Session.PlaybackStateCompat.ErrorMessageFormatted.get -> Java.Lang.ICharSequence?
Android.Support.V4.Media.Session.PlaybackStateCompat.Extras.get -> Android.OS.Bundle?
Android.Support.V4.Media.Session.PlaybackStateCompat.GetCurrentPosition(Java.Lang.Long? timeDiff) -> long
Android.Support.V4.Media.Session.PlaybackStateCompat.IActions
Android.Support.V4.Media.Session.PlaybackStateCompat.IMediaKeyAction
Android.Support.V4.Media.Session.PlaybackStateCompat.IRepeatMode
Android.Support.V4.Media.Session.PlaybackStateCompat.IShuffleMode
Android.Support.V4.Media.Session.PlaybackStateCompat.IState
Android.Support.V4.Media.Session.PlaybackStateCompat.LastPositionUpdateTime.get -> long
Android.Support.V4.Media.Session.PlaybackStateCompat.PlaybackSpeed.get -> float
Android.Support.V4.Media.Session.PlaybackStateCompat.PlaybackState.get -> Java.Lang.Object?
Android.Support.V4.Media.Session.PlaybackStateCompat.Position.get -> long
Android.Support.V4.Media.Session.PlaybackStateCompat.State.get -> int
Android.Support.V4.Media.Session.PlaybackStateCompat.WriteToParcel(Android.OS.Parcel? dest, Android.OS.ParcelableWriteFlags flags) -> void
AndroidX.Media.App.NotificationCompat
AndroidX.Media.App.NotificationCompat.DecoratedMediaCustomViewStyle
AndroidX.Media.App.NotificationCompat.DecoratedMediaCustomViewStyle.DecoratedMediaCustomViewStyle() -> void
AndroidX.Media.App.NotificationCompat.DecoratedMediaCustomViewStyle.DecoratedMediaCustomViewStyle(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media.App.NotificationCompat.MediaStyle
AndroidX.Media.App.NotificationCompat.MediaStyle.MediaStyle() -> void
AndroidX.Media.App.NotificationCompat.MediaStyle.MediaStyle(AndroidX.Core.App.NotificationCompat.Builder? builder) -> void
AndroidX.Media.App.NotificationCompat.MediaStyle.MediaStyle(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media.App.NotificationCompat.MediaStyle.SetRemotePlaybackInfo(string! deviceName, int iconResource, Android.App.PendingIntent? chipIntent) -> AndroidX.Media.App.NotificationCompat.MediaStyle!
AndroidX.Media.App.NotificationCompat.NotificationCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media.AudioAttributesCompat
AndroidX.Media.AudioAttributesCompat.AudioAttributesCompat() -> void
AndroidX.Media.AudioAttributesCompat.AudioAttributesCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media.AudioAttributesCompat.Builder
AndroidX.Media.AudioAttributesCompat.Builder.Builder() -> void
AndroidX.Media.AudioAttributesCompat.Builder.Builder(AndroidX.Media.AudioAttributesCompat? aa) -> void
AndroidX.Media.AudioAttributesCompat.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media.AudioAttributesCompat.IAttributeContentType
AndroidX.Media.AudioAttributesCompat.IAttributeUsage
AndroidX.Media.AudioAttributesCompatParcelizer
AndroidX.Media.AudioAttributesCompatParcelizer.AudioAttributesCompatParcelizer() -> void
AndroidX.Media.AudioAttributesCompatParcelizer.AudioAttributesCompatParcelizer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media.AudioAttributesImplBase
AndroidX.Media.AudioAttributesImplBase.AudioAttributesImplBase() -> void
AndroidX.Media.AudioAttributesImplBase.AudioAttributesImplBase(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media.AudioAttributesImplBase.MContentType.get -> int
AndroidX.Media.AudioAttributesImplBase.MContentType.set -> void
AndroidX.Media.AudioAttributesImplBase.MFlags.get -> int
AndroidX.Media.AudioAttributesImplBase.MFlags.set -> void
AndroidX.Media.AudioAttributesImplBase.MLegacyStream.get -> int
AndroidX.Media.AudioAttributesImplBase.MLegacyStream.set -> void
AndroidX.Media.AudioAttributesImplBase.MUsage.get -> int
AndroidX.Media.AudioAttributesImplBase.MUsage.set -> void
AndroidX.Media.AudioAttributesImplBaseParcelizer
AndroidX.Media.AudioAttributesImplBaseParcelizer.AudioAttributesImplBaseParcelizer() -> void
AndroidX.Media.AudioAttributesImplBaseParcelizer.AudioAttributesImplBaseParcelizer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media.AudioFocusRequestCompat
AndroidX.Media.AudioFocusRequestCompat.AudioFocusRequestCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media.AudioFocusRequestCompat.Builder
AndroidX.Media.AudioFocusRequestCompat.Builder.Build() -> AndroidX.Media.AudioFocusRequestCompat?
AndroidX.Media.AudioFocusRequestCompat.Builder.Builder(AndroidX.Media.AudioFocusRequestCompat! requestToCopy) -> void
AndroidX.Media.AudioFocusRequestCompat.Builder.Builder(int focusGain) -> void
AndroidX.Media.AudioFocusRequestCompat.Builder.SetAudioAttributes(AndroidX.Media.AudioAttributesCompat! attributes) -> AndroidX.Media.AudioFocusRequestCompat.Builder!
AndroidX.Media.AudioFocusRequestCompat.Builder.SetFocusGain(int focusGain) -> AndroidX.Media.AudioFocusRequestCompat.Builder!
AndroidX.Media.AudioFocusRequestCompat.Builder.SetOnAudioFocusChangeListener(Android.Media.AudioManager.IOnAudioFocusChangeListener! listener) -> AndroidX.Media.AudioFocusRequestCompat.Builder!
AndroidX.Media.AudioFocusRequestCompat.Builder.SetOnAudioFocusChangeListener(Android.Media.AudioManager.IOnAudioFocusChangeListener! listener, Android.OS.Handler! handler) -> AndroidX.Media.AudioFocusRequestCompat.Builder!
AndroidX.Media.AudioFocusRequestCompat.Builder.SetWillPauseWhenDucked(bool pauseOnDuck) -> AndroidX.Media.AudioFocusRequestCompat.Builder!
AndroidX.Media.AudioManagerCompat
AndroidX.Media.IAudioAttributesImpl
AndroidX.Media.IAudioAttributesImpl.AudioAttributes.get -> Java.Lang.Object?
AndroidX.Media.IAudioAttributesImpl.ContentType.get -> int
AndroidX.Media.IAudioAttributesImpl.Flags.get -> int
AndroidX.Media.IAudioAttributesImpl.LegacyStreamType.get -> int
AndroidX.Media.IAudioAttributesImpl.RawLegacyStreamType.get -> int
AndroidX.Media.IAudioAttributesImpl.Usage.get -> int
AndroidX.Media.IAudioAttributesImpl.VolumeControlStream.get -> int
AndroidX.Media.IAudioAttributesImplBuilder
AndroidX.Media.IAudioAttributesImplBuilder.Build() -> AndroidX.Media.IAudioAttributesImpl!
AndroidX.Media.IAudioAttributesImplBuilder.SetContentType(int p0) -> AndroidX.Media.IAudioAttributesImplBuilder!
AndroidX.Media.IAudioAttributesImplBuilder.SetFlags(int p0) -> AndroidX.Media.IAudioAttributesImplBuilder!
AndroidX.Media.IAudioAttributesImplBuilder.SetLegacyStreamType(int p0) -> AndroidX.Media.IAudioAttributesImplBuilder!
AndroidX.Media.IAudioAttributesImplBuilder.SetUsage(int p0) -> AndroidX.Media.IAudioAttributesImplBuilder!
AndroidX.Media.MediaBrowserCompatUtils
AndroidX.Media.MediaBrowserCompatUtils.MediaBrowserCompatUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media.MediaBrowserProtocol
AndroidX.Media.MediaBrowserProtocol.MediaBrowserProtocol(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media.MediaBrowserServiceCompat
AndroidX.Media.MediaBrowserServiceCompat.BrowserRoot
AndroidX.Media.MediaBrowserServiceCompat.BrowserRoot.BrowserRoot(string! rootId, Android.OS.Bundle? extras) -> void
AndroidX.Media.MediaBrowserServiceCompat.BrowserRoot.Extras.get -> Android.OS.Bundle?
AndroidX.Media.MediaBrowserServiceCompat.BrowserRoot.RootId.get -> string?
AndroidX.Media.MediaBrowserServiceCompat.BrowserRootHints.get -> Android.OS.Bundle?
AndroidX.Media.MediaBrowserServiceCompat.CurrentBrowserInfo.get -> AndroidX.Media.MediaSessionManager.RemoteUserInfo!
AndroidX.Media.MediaBrowserServiceCompat.MediaBrowserServiceCompat() -> void
AndroidX.Media.MediaBrowserServiceCompat.MediaBrowserServiceCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media.MediaBrowserServiceCompat.Result
AndroidX.Media.MediaBrowserServiceCompat.Result.Result(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media.MediaSessionManager
AndroidX.Media.MediaSessionManager.IsTrustedForMediaControl(AndroidX.Media.MediaSessionManager.RemoteUserInfo! userInfo) -> bool
AndroidX.Media.MediaSessionManager.RemoteUserInfo
AndroidX.Media.MediaSessionManager.RemoteUserInfo.PackageName.get -> string!
AndroidX.Media.MediaSessionManager.RemoteUserInfo.Pid.get -> int
AndroidX.Media.MediaSessionManager.RemoteUserInfo.RemoteUserInfo(Android.Media.Session.MediaSessionManager.RemoteUserInfo? remoteUserInfo) -> void
AndroidX.Media.MediaSessionManager.RemoteUserInfo.RemoteUserInfo(string! packageName, int pid, int uid) -> void
AndroidX.Media.MediaSessionManager.RemoteUserInfo.Uid.get -> int
AndroidX.Media.Session.MediaButtonReceiver
AndroidX.Media.Session.MediaButtonReceiver.MediaButtonReceiver() -> void
AndroidX.Media.Session.MediaButtonReceiver.MediaButtonReceiver(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media.Utils.MediaConstants
AndroidX.Media.VolumeProviderCompat
AndroidX.Media.VolumeProviderCompat.Callback
AndroidX.Media.VolumeProviderCompat.Callback.Callback() -> void
AndroidX.Media.VolumeProviderCompat.Callback.Callback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Media.VolumeProviderCompat.CurrentVolume.get -> int
AndroidX.Media.VolumeProviderCompat.CurrentVolume.set -> void
AndroidX.Media.VolumeProviderCompat.IControlType
AndroidX.Media.VolumeProviderCompat.MaxVolume.get -> int
AndroidX.Media.VolumeProviderCompat.VolumeControl.get -> int
AndroidX.Media.VolumeProviderCompat.VolumeControlId.get -> string?
AndroidX.Media.VolumeProviderCompat.VolumeProviderCompat(int volumeControl, int maxVolume, int currentVolume) -> void
AndroidX.Media.VolumeProviderCompat.VolumeProviderCompat(int volumeControl, int maxVolume, int currentVolume, string? volumeControlId) -> void
AndroidX.Media.VolumeProviderCompat.VolumeProviderCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCallbackStub.OnCaptioningEnabledChanged(bool p0) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCallbackStub.OnEvent(string? p0, Android.OS.Bundle? p1) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCallbackStub.OnExtrasChanged(Android.OS.Bundle? p0) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCallbackStub.OnMetadataChanged(Android.Support.V4.Media.MediaMetadataCompat? p0) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCallbackStub.OnPlaybackStateChanged(Android.Support.V4.Media.Session.PlaybackStateCompat? p0) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCallbackStub.OnQueueChanged(System.Collections.Generic.IList<Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem!>? p0) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCallbackStub.OnQueueTitleChanged(Java.Lang.ICharSequence? p0) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCallbackStub.OnRepeatModeChanged(int p0) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCallbackStub.OnSessionDestroyed() -> void
abstract Android.Support.V4.Media.Session.MediaControllerCallbackStub.OnSessionReady() -> void
abstract Android.Support.V4.Media.Session.MediaControllerCallbackStub.OnShuffleModeChanged(int p0) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCallbackStub.OnShuffleModeChangedRemoved(bool p0) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCallbackStub.OnVolumeInfoChanged(Android.Support.V4.Media.Session.ParcelableVolumeInfo? p0) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.FastForward() -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.Pause() -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.Play() -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.PlayFromMediaId(string? mediaId, Android.OS.Bundle? extras) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.PlayFromSearch(string? query, Android.OS.Bundle? extras) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.PlayFromUri(Android.Net.Uri? uri, Android.OS.Bundle? extras) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.Prepare() -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.PrepareFromMediaId(string? mediaId, Android.OS.Bundle? extras) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.PrepareFromSearch(string? query, Android.OS.Bundle? extras) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.PrepareFromUri(Android.Net.Uri? uri, Android.OS.Bundle? extras) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.Rewind() -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.SeekTo(long pos) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.SendCustomAction(Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction? customAction, Android.OS.Bundle? args) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.SendCustomAction(string? action, Android.OS.Bundle? args) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.SetCaptioningEnabled(bool enabled) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.SetRating(Android.Support.V4.Media.RatingCompat? rating) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.SetRating(Android.Support.V4.Media.RatingCompat? rating, Android.OS.Bundle? extras) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.SetRepeatMode(int repeatMode) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.SetShuffleMode(int shuffleMode) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.SkipToNext() -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.SkipToPrevious() -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.SkipToQueueItem(long id) -> void
abstract Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.Stop() -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.AddQueueItem(Android.Support.V4.Media.MediaDescriptionCompat? p0) -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.AddQueueItemAt(Android.Support.V4.Media.MediaDescriptionCompat? p0, int p1) -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.AdjustVolume(int p0, int p1, string? p2) -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.CaptioningEnabled.get -> bool
abstract Android.Support.V4.Media.Session.MediaSessionStub.CaptioningEnabled.set -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.Extras.get -> Android.OS.Bundle?
abstract Android.Support.V4.Media.Session.MediaSessionStub.FastForward() -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.Flags.get -> long
abstract Android.Support.V4.Media.Session.MediaSessionStub.IsTransportControlEnabled.get -> bool
abstract Android.Support.V4.Media.Session.MediaSessionStub.LaunchPendingIntent.get -> Android.App.PendingIntent?
abstract Android.Support.V4.Media.Session.MediaSessionStub.Metadata.get -> Android.Support.V4.Media.MediaMetadataCompat?
abstract Android.Support.V4.Media.Session.MediaSessionStub.Next() -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.PackageName.get -> string?
abstract Android.Support.V4.Media.Session.MediaSessionStub.Pause() -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.Play() -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.PlayFromMediaId(string? p0, Android.OS.Bundle? p1) -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.PlayFromSearch(string? p0, Android.OS.Bundle? p1) -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.PlayFromUri(Android.Net.Uri? p0, Android.OS.Bundle? p1) -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.PlaybackState.get -> Android.Support.V4.Media.Session.PlaybackStateCompat?
abstract Android.Support.V4.Media.Session.MediaSessionStub.Prepare() -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.PrepareFromMediaId(string? p0, Android.OS.Bundle? p1) -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.PrepareFromSearch(string? p0, Android.OS.Bundle? p1) -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.PrepareFromUri(Android.Net.Uri? p0, Android.OS.Bundle? p1) -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.Previous() -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.Queue.get -> System.Collections.Generic.IList<Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem!>?
abstract Android.Support.V4.Media.Session.MediaSessionStub.QueueTitleFormatted.get -> Java.Lang.ICharSequence?
abstract Android.Support.V4.Media.Session.MediaSessionStub.Rate(Android.Support.V4.Media.RatingCompat? p0) -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.RateWithExtras(Android.Support.V4.Media.RatingCompat? p0, Android.OS.Bundle? p1) -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.RatingType.get -> int
abstract Android.Support.V4.Media.Session.MediaSessionStub.RegisterCallbackListener(Android.Support.V4.Media.Session.IMediaControllerCallback? p0) -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.RemoveQueueItem(Android.Support.V4.Media.MediaDescriptionCompat? p0) -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.RemoveQueueItemAt(int p0) -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.RepeatMode.get -> int
abstract Android.Support.V4.Media.Session.MediaSessionStub.RepeatMode.set -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.Rewind() -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.SeekTo(long p0) -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.SendCustomAction(string? p0, Android.OS.Bundle? p1) -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.SendMediaButton(Android.Views.KeyEvent? p0) -> bool
abstract Android.Support.V4.Media.Session.MediaSessionStub.SessionInfo.get -> Android.OS.Bundle?
abstract Android.Support.V4.Media.Session.MediaSessionStub.SetPlaybackSpeed(float p0) -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.SetVolumeTo(int p0, int p1, string? p2) -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.ShuffleMode.get -> int
abstract Android.Support.V4.Media.Session.MediaSessionStub.ShuffleMode.set -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.ShuffleModeEnabledRemoved.get -> bool
abstract Android.Support.V4.Media.Session.MediaSessionStub.ShuffleModeEnabledRemoved.set -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.SkipToQueueItem(long p0) -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.Stop() -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.Tag.get -> string?
abstract Android.Support.V4.Media.Session.MediaSessionStub.UnregisterCallbackListener(Android.Support.V4.Media.Session.IMediaControllerCallback? p0) -> void
abstract Android.Support.V4.Media.Session.MediaSessionStub.VolumeAttributes.get -> Android.Support.V4.Media.Session.ParcelableVolumeInfo?
abstract AndroidX.Media.MediaBrowserServiceCompat.OnGetRoot(string! clientPackageName, int clientUid, Android.OS.Bundle? rootHints) -> AndroidX.Media.MediaBrowserServiceCompat.BrowserRoot?
abstract AndroidX.Media.MediaBrowserServiceCompat.OnLoadChildren(string! parentId, AndroidX.Media.MediaBrowserServiceCompat.Result! result) -> void
abstract AndroidX.Media.VolumeProviderCompat.Callback.OnVolumeChanged(AndroidX.Media.VolumeProviderCompat? volumeProvider) -> void
const Android.Support.V4.Media.MediaBrowserCompat.CustomActionDownload = "android.support.v4.media.action.DOWNLOAD" -> string!
const Android.Support.V4.Media.MediaBrowserCompat.CustomActionRemoveDownloadedFile = "android.support.v4.media.action.REMOVE_DOWNLOADED_FILE" -> string!
const Android.Support.V4.Media.MediaBrowserCompat.ExtraDownloadProgress = "android.media.browse.extra.DOWNLOAD_PROGRESS" -> string!
const Android.Support.V4.Media.MediaBrowserCompat.ExtraMediaId = "android.media.browse.extra.MEDIA_ID" -> string!
const Android.Support.V4.Media.MediaBrowserCompat.ExtraPage = "android.media.browse.extra.PAGE" -> string!
const Android.Support.V4.Media.MediaBrowserCompat.ExtraPageSize = "android.media.browse.extra.PAGE_SIZE" -> string!
const Android.Support.V4.Media.MediaBrowserCompat.MediaItem.FlagBrowsable = 1 -> int
const Android.Support.V4.Media.MediaBrowserCompat.MediaItem.FlagPlayable = 2 -> int
const Android.Support.V4.Media.MediaDescriptionCompat.BtFolderTypeAlbums = 2 -> long
const Android.Support.V4.Media.MediaDescriptionCompat.BtFolderTypeArtists = 3 -> long
const Android.Support.V4.Media.MediaDescriptionCompat.BtFolderTypeGenres = 4 -> long
const Android.Support.V4.Media.MediaDescriptionCompat.BtFolderTypeMixed = 0 -> long
const Android.Support.V4.Media.MediaDescriptionCompat.BtFolderTypePlaylists = 5 -> long
const Android.Support.V4.Media.MediaDescriptionCompat.BtFolderTypeTitles = 1 -> long
const Android.Support.V4.Media.MediaDescriptionCompat.BtFolderTypeYears = 6 -> long
const Android.Support.V4.Media.MediaDescriptionCompat.DescriptionKeyMediaUri = "android.support.v4.media.description.MEDIA_URI" -> string!
const Android.Support.V4.Media.MediaDescriptionCompat.DescriptionKeyNullBundleFlag = "android.support.v4.media.description.NULL_BUNDLE_FLAG" -> string!
const Android.Support.V4.Media.MediaDescriptionCompat.ExtraBtFolderType = "android.media.extra.BT_FOLDER_TYPE" -> string!
const Android.Support.V4.Media.MediaDescriptionCompat.ExtraDownloadStatus = "android.media.extra.DOWNLOAD_STATUS" -> string!
const Android.Support.V4.Media.MediaDescriptionCompat.StatusDownloaded = 2 -> long
const Android.Support.V4.Media.MediaDescriptionCompat.StatusDownloading = 1 -> long
const Android.Support.V4.Media.MediaDescriptionCompat.StatusNotDownloaded = 0 -> long
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyAdvertisement = "android.media.metadata.ADVERTISEMENT" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyAlbum = "android.media.metadata.ALBUM" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyAlbumArt = "android.media.metadata.ALBUM_ART" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyAlbumArtUri = "android.media.metadata.ALBUM_ART_URI" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyAlbumArtist = "android.media.metadata.ALBUM_ARTIST" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyArt = "android.media.metadata.ART" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyArtUri = "android.media.metadata.ART_URI" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyArtist = "android.media.metadata.ARTIST" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyAuthor = "android.media.metadata.AUTHOR" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyBtFolderType = "android.media.metadata.BT_FOLDER_TYPE" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyCompilation = "android.media.metadata.COMPILATION" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyComposer = "android.media.metadata.COMPOSER" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyDate = "android.media.metadata.DATE" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyDiscNumber = "android.media.metadata.DISC_NUMBER" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyDisplayDescription = "android.media.metadata.DISPLAY_DESCRIPTION" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyDisplayIcon = "android.media.metadata.DISPLAY_ICON" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyDisplayIconUri = "android.media.metadata.DISPLAY_ICON_URI" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyDisplaySubtitle = "android.media.metadata.DISPLAY_SUBTITLE" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyDisplayTitle = "android.media.metadata.DISPLAY_TITLE" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyDownloadStatus = "android.media.metadata.DOWNLOAD_STATUS" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyDuration = "android.media.metadata.DURATION" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyGenre = "android.media.metadata.GENRE" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyMediaId = "android.media.metadata.MEDIA_ID" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyMediaUri = "android.media.metadata.MEDIA_URI" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyNumTracks = "android.media.metadata.NUM_TRACKS" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyRating = "android.media.metadata.RATING" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyTitle = "android.media.metadata.TITLE" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyTrackNumber = "android.media.metadata.TRACK_NUMBER" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyUserRating = "android.media.metadata.USER_RATING" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyWriter = "android.media.metadata.WRITER" -> string!
const Android.Support.V4.Media.MediaMetadataCompat.MetadataKeyYear = "android.media.metadata.YEAR" -> string!
const Android.Support.V4.Media.RatingCompat.Rating3Stars = 3 -> int
const Android.Support.V4.Media.RatingCompat.Rating4Stars = 4 -> int
const Android.Support.V4.Media.RatingCompat.Rating5Stars = 5 -> int
const Android.Support.V4.Media.RatingCompat.RatingHeart = 1 -> int
const Android.Support.V4.Media.RatingCompat.RatingNone = 0 -> int
const Android.Support.V4.Media.RatingCompat.RatingPercentage = 6 -> int
const Android.Support.V4.Media.RatingCompat.RatingThumbUpDown = 2 -> int
const Android.Support.V4.Media.Session.MediaControllerCallback.Descriptor = "android.support.v4.media.session.IMediaControllerCallback" -> string!
const Android.Support.V4.Media.Session.MediaControllerCallbackDefault.InterfaceConsts.Descriptor = "android.support.v4.media.session.IMediaControllerCallback" -> string!
const Android.Support.V4.Media.Session.MediaControllerCallbackStub.InterfaceConsts.Descriptor = "android.support.v4.media.session.IMediaControllerCallback" -> string!
const Android.Support.V4.Media.Session.MediaControllerCompat.CommandAddQueueItem = "android.support.v4.media.session.command.ADD_QUEUE_ITEM" -> string!
const Android.Support.V4.Media.Session.MediaControllerCompat.CommandAddQueueItemAt = "android.support.v4.media.session.command.ADD_QUEUE_ITEM_AT" -> string!
const Android.Support.V4.Media.Session.MediaControllerCompat.CommandArgumentIndex = "android.support.v4.media.session.command.ARGUMENT_INDEX" -> string!
const Android.Support.V4.Media.Session.MediaControllerCompat.CommandArgumentMediaDescription = "android.support.v4.media.session.command.ARGUMENT_MEDIA_DESCRIPTION" -> string!
const Android.Support.V4.Media.Session.MediaControllerCompat.CommandGetExtraBinder = "android.support.v4.media.session.command.GET_EXTRA_BINDER" -> string!
const Android.Support.V4.Media.Session.MediaControllerCompat.CommandRemoveQueueItem = "android.support.v4.media.session.command.REMOVE_QUEUE_ITEM" -> string!
const Android.Support.V4.Media.Session.MediaControllerCompat.CommandRemoveQueueItemAt = "android.support.v4.media.session.command.REMOVE_QUEUE_ITEM_AT" -> string!
const Android.Support.V4.Media.Session.MediaControllerCompat.PlaybackInfo.PlaybackTypeLocal = 1 -> int
const Android.Support.V4.Media.Session.MediaControllerCompat.PlaybackInfo.PlaybackTypeRemote = 2 -> int
const Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.ExtraLegacyStreamType = "android.media.session.extra.LEGACY_STREAM_TYPE" -> string!
const Android.Support.V4.Media.Session.MediaSession.Descriptor = "android.support.v4.media.session.IMediaSession" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionArgumentCaptioningEnabled = "android.support.v4.media.session.action.ARGUMENT_CAPTIONING_ENABLED" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionArgumentExtras = "android.support.v4.media.session.action.ARGUMENT_EXTRAS" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionArgumentMediaId = "android.support.v4.media.session.action.ARGUMENT_MEDIA_ID" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionArgumentPlaybackSpeed = "android.support.v4.media.session.action.ARGUMENT_PLAYBACK_SPEED" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionArgumentQuery = "android.support.v4.media.session.action.ARGUMENT_QUERY" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionArgumentRating = "android.support.v4.media.session.action.ARGUMENT_RATING" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionArgumentRepeatMode = "android.support.v4.media.session.action.ARGUMENT_REPEAT_MODE" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionArgumentShuffleMode = "android.support.v4.media.session.action.ARGUMENT_SHUFFLE_MODE" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionArgumentUri = "android.support.v4.media.session.action.ARGUMENT_URI" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionFlagAsInappropriate = "android.support.v4.media.session.action.FLAG_AS_INAPPROPRIATE" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionFollow = "android.support.v4.media.session.action.FOLLOW" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionPlayFromUri = "android.support.v4.media.session.action.PLAY_FROM_URI" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionPrepare = "android.support.v4.media.session.action.PREPARE" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionPrepareFromMediaId = "android.support.v4.media.session.action.PREPARE_FROM_MEDIA_ID" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionPrepareFromSearch = "android.support.v4.media.session.action.PREPARE_FROM_SEARCH" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionPrepareFromUri = "android.support.v4.media.session.action.PREPARE_FROM_URI" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionSetCaptioningEnabled = "android.support.v4.media.session.action.SET_CAPTIONING_ENABLED" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionSetPlaybackSpeed = "android.support.v4.media.session.action.SET_PLAYBACK_SPEED" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionSetRating = "android.support.v4.media.session.action.SET_RATING" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionSetRepeatMode = "android.support.v4.media.session.action.SET_REPEAT_MODE" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionSetShuffleMode = "android.support.v4.media.session.action.SET_SHUFFLE_MODE" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionSkipAd = "android.support.v4.media.session.action.SKIP_AD" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ActionUnfollow = "android.support.v4.media.session.action.UNFOLLOW" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ArgumentMediaAttribute = "android.support.v4.media.session.ARGUMENT_MEDIA_ATTRIBUTE" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.ArgumentMediaAttributeValue = "android.support.v4.media.session.ARGUMENT_MEDIA_ATTRIBUTE_VALUE" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.FlagHandlesMediaButtons = 1 -> int
const Android.Support.V4.Media.Session.MediaSessionCompat.FlagHandlesQueueCommands = 4 -> int
const Android.Support.V4.Media.Session.MediaSessionCompat.FlagHandlesTransportControls = 2 -> int
const Android.Support.V4.Media.Session.MediaSessionCompat.KeyExtraBinder = "android.support.v4.media.session.EXTRA_BINDER" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.KeySession2Token = "android.support.v4.media.session.SESSION_TOKEN2" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.KeyToken = "android.support.v4.media.session.TOKEN" -> string!
const Android.Support.V4.Media.Session.MediaSessionCompat.MediaAttributeAlbum = 1 -> int
const Android.Support.V4.Media.Session.MediaSessionCompat.MediaAttributeArtist = 0 -> int
const Android.Support.V4.Media.Session.MediaSessionCompat.MediaAttributePlaylist = 2 -> int
const Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem.UnknownId = -1 -> int
const Android.Support.V4.Media.Session.MediaSessionDefault.InterfaceConsts.Descriptor = "android.support.v4.media.session.IMediaSession" -> string!
const Android.Support.V4.Media.Session.MediaSessionStub.InterfaceConsts.Descriptor = "android.support.v4.media.session.IMediaSession" -> string!
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionFastForward = 64 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionPause = 2 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionPlay = 4 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionPlayFromMediaId = 1024 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionPlayFromSearch = 2048 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionPlayFromUri = 8192 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionPlayPause = 512 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionPrepare = 16384 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionPrepareFromMediaId = 32768 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionPrepareFromSearch = 65536 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionPrepareFromUri = 131072 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionRewind = 8 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionSeekTo = 256 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionSetCaptioningEnabled = 1048576 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionSetPlaybackSpeed = 4194304 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionSetRating = 128 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionSetRepeatMode = 262144 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionSetShuffleMode = 2097152 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionSetShuffleModeEnabled = 524288 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionSkipToNext = 32 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionSkipToPrevious = 16 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionSkipToQueueItem = 4096 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ActionStop = 1 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.ErrorCodeActionAborted = 10 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.ErrorCodeAppError = 1 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.ErrorCodeAuthenticationExpired = 3 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.ErrorCodeConcurrentStreamLimit = 5 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.ErrorCodeContentAlreadyPlaying = 8 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.ErrorCodeEndOfQueue = 11 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.ErrorCodeNotAvailableInRegion = 7 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.ErrorCodeNotSupported = 2 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.ErrorCodeParentalControlRestricted = 6 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.ErrorCodePremiumAccountRequired = 4 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.ErrorCodeSkipLimitReached = 9 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.ErrorCodeUnknownError = 0 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.PlaybackPositionUnknown = -1 -> long
const Android.Support.V4.Media.Session.PlaybackStateCompat.RepeatModeAll = 2 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.RepeatModeGroup = 3 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.RepeatModeInvalid = -1 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.RepeatModeNone = 0 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.RepeatModeOne = 1 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.ShuffleModeAll = 1 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.ShuffleModeGroup = 2 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.ShuffleModeInvalid = -1 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.ShuffleModeNone = 0 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.StateBuffering = 6 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.StateConnecting = 8 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.StateError = 7 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.StateFastForwarding = 4 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.StateNone = 0 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.StatePaused = 2 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.StatePlaying = 3 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.StateRewinding = 5 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.StateSkippingToNext = 10 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.StateSkippingToPrevious = 9 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.StateSkippingToQueueItem = 11 -> int
const Android.Support.V4.Media.Session.PlaybackStateCompat.StateStopped = 1 -> int
const AndroidX.Media.AudioAttributesCompat.ContentTypeMovie = 3 -> int
const AndroidX.Media.AudioAttributesCompat.ContentTypeMusic = 2 -> int
const AndroidX.Media.AudioAttributesCompat.ContentTypeSonification = 4 -> int
const AndroidX.Media.AudioAttributesCompat.ContentTypeSpeech = 1 -> int
const AndroidX.Media.AudioAttributesCompat.ContentTypeUnknown = 0 -> int
const AndroidX.Media.AudioAttributesCompat.FlagAudibilityEnforced = 1 -> int
const AndroidX.Media.AudioAttributesCompat.FlagHwAvSync = 16 -> int
const AndroidX.Media.AudioAttributesCompat.UsageAlarm = 4 -> int
const AndroidX.Media.AudioAttributesCompat.UsageAssistanceAccessibility = 11 -> int
const AndroidX.Media.AudioAttributesCompat.UsageAssistanceNavigationGuidance = 12 -> int
const AndroidX.Media.AudioAttributesCompat.UsageAssistanceSonification = 13 -> int
const AndroidX.Media.AudioAttributesCompat.UsageAssistant = 16 -> int
const AndroidX.Media.AudioAttributesCompat.UsageGame = 14 -> int
const AndroidX.Media.AudioAttributesCompat.UsageMedia = 1 -> int
const AndroidX.Media.AudioAttributesCompat.UsageNotification = 5 -> int
const AndroidX.Media.AudioAttributesCompat.UsageNotificationCommunicationDelayed = 9 -> int
const AndroidX.Media.AudioAttributesCompat.UsageNotificationCommunicationInstant = 8 -> int
const AndroidX.Media.AudioAttributesCompat.UsageNotificationCommunicationRequest = 7 -> int
const AndroidX.Media.AudioAttributesCompat.UsageNotificationEvent = 10 -> int
const AndroidX.Media.AudioAttributesCompat.UsageNotificationRingtone = 6 -> int
const AndroidX.Media.AudioAttributesCompat.UsageUnknown = 0 -> int
const AndroidX.Media.AudioAttributesCompat.UsageVoiceCommunication = 2 -> int
const AndroidX.Media.AudioAttributesCompat.UsageVoiceCommunicationSignalling = 3 -> int
const AndroidX.Media.AudioManagerCompat.AudiofocusGain = 1 -> int
const AndroidX.Media.AudioManagerCompat.AudiofocusGainTransient = 2 -> int
const AndroidX.Media.AudioManagerCompat.AudiofocusGainTransientExclusive = 4 -> int
const AndroidX.Media.AudioManagerCompat.AudiofocusGainTransientMayDuck = 3 -> int
const AndroidX.Media.MediaBrowserProtocol.ClientMsgAddSubscription = 3 -> int
const AndroidX.Media.MediaBrowserProtocol.ClientMsgConnect = 1 -> int
const AndroidX.Media.MediaBrowserProtocol.ClientMsgDisconnect = 2 -> int
const AndroidX.Media.MediaBrowserProtocol.ClientMsgGetMediaItem = 5 -> int
const AndroidX.Media.MediaBrowserProtocol.ClientMsgRegisterCallbackMessenger = 6 -> int
const AndroidX.Media.MediaBrowserProtocol.ClientMsgRemoveSubscription = 4 -> int
const AndroidX.Media.MediaBrowserProtocol.ClientMsgSearch = 8 -> int
const AndroidX.Media.MediaBrowserProtocol.ClientMsgSendCustomAction = 9 -> int
const AndroidX.Media.MediaBrowserProtocol.ClientMsgUnregisterCallbackMessenger = 7 -> int
const AndroidX.Media.MediaBrowserProtocol.ClientVersion1 = 1 -> int
const AndroidX.Media.MediaBrowserProtocol.ClientVersionCurrent = 1 -> int
const AndroidX.Media.MediaBrowserProtocol.DataCallbackToken = "data_callback_token" -> string!
const AndroidX.Media.MediaBrowserProtocol.DataCallingPid = "data_calling_pid" -> string!
const AndroidX.Media.MediaBrowserProtocol.DataCallingUid = "data_calling_uid" -> string!
const AndroidX.Media.MediaBrowserProtocol.DataCustomAction = "data_custom_action" -> string!
const AndroidX.Media.MediaBrowserProtocol.DataCustomActionExtras = "data_custom_action_extras" -> string!
const AndroidX.Media.MediaBrowserProtocol.DataMediaItemId = "data_media_item_id" -> string!
const AndroidX.Media.MediaBrowserProtocol.DataMediaItemList = "data_media_item_list" -> string!
const AndroidX.Media.MediaBrowserProtocol.DataMediaSessionToken = "data_media_session_token" -> string!
const AndroidX.Media.MediaBrowserProtocol.DataNotifyChildrenChangedOptions = "data_notify_children_changed_options" -> string!
const AndroidX.Media.MediaBrowserProtocol.DataOptions = "data_options" -> string!
const AndroidX.Media.MediaBrowserProtocol.DataPackageName = "data_package_name" -> string!
const AndroidX.Media.MediaBrowserProtocol.DataResultReceiver = "data_result_receiver" -> string!
const AndroidX.Media.MediaBrowserProtocol.DataRootHints = "data_root_hints" -> string!
const AndroidX.Media.MediaBrowserProtocol.DataSearchExtras = "data_search_extras" -> string!
const AndroidX.Media.MediaBrowserProtocol.DataSearchQuery = "data_search_query" -> string!
const AndroidX.Media.MediaBrowserProtocol.ExtraCallingPid = "extra_calling_pid" -> string!
const AndroidX.Media.MediaBrowserProtocol.ExtraClientVersion = "extra_client_version" -> string!
const AndroidX.Media.MediaBrowserProtocol.ExtraMessengerBinder = "extra_messenger" -> string!
const AndroidX.Media.MediaBrowserProtocol.ExtraServiceVersion = "extra_service_version" -> string!
const AndroidX.Media.MediaBrowserProtocol.ExtraSessionBinder = "extra_session_binder" -> string!
const AndroidX.Media.MediaBrowserProtocol.ServiceMsgOnConnect = 1 -> int
const AndroidX.Media.MediaBrowserProtocol.ServiceMsgOnConnectFailed = 2 -> int
const AndroidX.Media.MediaBrowserProtocol.ServiceMsgOnLoadChildren = 3 -> int
const AndroidX.Media.MediaBrowserProtocol.ServiceVersion1 = 1 -> int
const AndroidX.Media.MediaBrowserProtocol.ServiceVersion2 = 2 -> int
const AndroidX.Media.MediaBrowserProtocol.ServiceVersionCurrent = 2 -> int
const AndroidX.Media.MediaBrowserServiceCompat.BrowserRoot.ExtraOffline = "android.service.media.extra.OFFLINE" -> string!
const AndroidX.Media.MediaBrowserServiceCompat.BrowserRoot.ExtraRecent = "android.service.media.extra.RECENT" -> string!
const AndroidX.Media.MediaBrowserServiceCompat.BrowserRoot.ExtraSuggested = "android.service.media.extra.SUGGESTED" -> string!
const AndroidX.Media.MediaBrowserServiceCompat.BrowserRoot.ExtraSuggestionKeywords = "android.service.media.extra.SUGGESTION_KEYWORDS" -> string!
const AndroidX.Media.MediaBrowserServiceCompat.KeyMediaItem = "media_item" -> string!
const AndroidX.Media.MediaBrowserServiceCompat.KeySearchResults = "search_results" -> string!
const AndroidX.Media.MediaBrowserServiceCompat.ResultError = -1 -> int
const AndroidX.Media.MediaBrowserServiceCompat.ResultOk = 0 -> int
const AndroidX.Media.MediaBrowserServiceCompat.ResultProgressUpdate = 1 -> int
const AndroidX.Media.MediaBrowserServiceCompat.ServiceInterface = "android.media.browse.MediaBrowserService" -> string!
const AndroidX.Media.MediaSessionManager.RemoteUserInfo.LegacyController = "android.media.session.MediaController" -> string!
const AndroidX.Media.MediaSessionManager.RemoteUserInfo.UnknownPid = -1 -> int
const AndroidX.Media.MediaSessionManager.RemoteUserInfo.UnknownUid = -1 -> int
const AndroidX.Media.Utils.MediaConstants.BrowserRootHintsKeyCustomBrowserActionLimit = "androidx.media.utils.MediaBrowserCompat.extras.CUSTOM_BROWSER_ACTION_LIMIT" -> string!
const AndroidX.Media.Utils.MediaConstants.BrowserRootHintsKeyMediaArtSizePixels = "android.media.extras.MEDIA_ART_SIZE_HINT_PIXELS" -> string!
const AndroidX.Media.Utils.MediaConstants.BrowserRootHintsKeyRootChildrenLimit = "androidx.media.MediaBrowserCompat.Extras.KEY_ROOT_CHILDREN_LIMIT" -> string!
const AndroidX.Media.Utils.MediaConstants.BrowserRootHintsKeyRootChildrenSupportedFlags = "androidx.media.MediaBrowserCompat.Extras.KEY_ROOT_CHILDREN_SUPPORTED_FLAGS" -> string!
const AndroidX.Media.Utils.MediaConstants.BrowserServiceExtrasKeyApplicationPreferencesUsingCarAppLibraryIntent = "androidx.media.BrowserRoot.Extras.APPLICATION_PREFERENCES_USING_CAR_APP_LIBRARY_INTENT" -> string!
const AndroidX.Media.Utils.MediaConstants.BrowserServiceExtrasKeyCustomBrowserActionRootList = "androidx.media.utils.extras.CUSTOM_BROWSER_ACTION_ROOT_LIST" -> string!
const AndroidX.Media.Utils.MediaConstants.BrowserServiceExtrasKeyFavoritesMediaItem = "androidx.media.BrowserRoot.Extras.FAVORITES_MEDIA_ITEM" -> string!
const AndroidX.Media.Utils.MediaConstants.BrowserServiceExtrasKeySearchSupported = "android.media.browse.SEARCH_SUPPORTED" -> string!
const AndroidX.Media.Utils.MediaConstants.DescriptionExtrasKeyCompletionPercentage = "androidx.media.MediaItem.Extras.COMPLETION_PERCENTAGE" -> string!
const AndroidX.Media.Utils.MediaConstants.DescriptionExtrasKeyCompletionStatus = "android.media.extra.PLAYBACK_STATUS" -> string!
const AndroidX.Media.Utils.MediaConstants.DescriptionExtrasKeyContentStyleBrowsable = "android.media.browse.CONTENT_STYLE_BROWSABLE_HINT" -> string!
const AndroidX.Media.Utils.MediaConstants.DescriptionExtrasKeyContentStyleGroupTitle = "android.media.browse.CONTENT_STYLE_GROUP_TITLE_HINT" -> string!
const AndroidX.Media.Utils.MediaConstants.DescriptionExtrasKeyContentStylePlayable = "android.media.browse.CONTENT_STYLE_PLAYABLE_HINT" -> string!
const AndroidX.Media.Utils.MediaConstants.DescriptionExtrasKeyContentStyleSingleItem = "android.media.browse.CONTENT_STYLE_SINGLE_ITEM_HINT" -> string!
const AndroidX.Media.Utils.MediaConstants.DescriptionExtrasKeyCustomBrowserActionIdList = "androidx.media.utils.extras.CUSTOM_BROWSER_ACTION_ID_LIST" -> string!
const AndroidX.Media.Utils.MediaConstants.DescriptionExtrasValueCompletionStatusFullyPlayed = 2 -> int
const AndroidX.Media.Utils.MediaConstants.DescriptionExtrasValueCompletionStatusNotPlayed = 0 -> int
const AndroidX.Media.Utils.MediaConstants.DescriptionExtrasValueCompletionStatusPartiallyPlayed = 1 -> int
const AndroidX.Media.Utils.MediaConstants.DescriptionExtrasValueContentStyleCategoryGridItem = 4 -> int
const AndroidX.Media.Utils.MediaConstants.DescriptionExtrasValueContentStyleCategoryListItem = 3 -> int
const AndroidX.Media.Utils.MediaConstants.DescriptionExtrasValueContentStyleGridItem = 2 -> int
const AndroidX.Media.Utils.MediaConstants.DescriptionExtrasValueContentStyleListItem = 1 -> int
const AndroidX.Media.Utils.MediaConstants.ExtrasKeyCustomBrowserActionExtras = "androidx.media.utils.extras.KEY_CUSTOM_BROWSER_ACTION_EXTRAS" -> string!
const AndroidX.Media.Utils.MediaConstants.ExtrasKeyCustomBrowserActionIconUri = "androidx.media.utils.extras.KEY_CUSTOM_BROWSER_ACTION_ICON_URI" -> string!
const AndroidX.Media.Utils.MediaConstants.ExtrasKeyCustomBrowserActionId = "androidx.media.utils.extras.KEY_CUSTOM_BROWSER_ACTION_ID" -> string!
const AndroidX.Media.Utils.MediaConstants.ExtrasKeyCustomBrowserActionLabel = "androidx.media.utils.extras.KEY_CUSTOM_BROWSER_ACTION_LABEL" -> string!
const AndroidX.Media.Utils.MediaConstants.ExtrasKeyCustomBrowserActionMediaItemId = "androidx.media.utils.extras.KEY_CUSTOM_BROWSER_ACTION_MEDIA_ITEM_ID" -> string!
const AndroidX.Media.Utils.MediaConstants.ExtrasKeyCustomBrowserActionResultBrowseNode = "androidx.media.utils.extras.KEY_CUSTOM_BROWSER_ACTION_RESULT_BROWSE_NODE" -> string!
const AndroidX.Media.Utils.MediaConstants.ExtrasKeyCustomBrowserActionResultMessage = "androidx.media.utils.extras.KEY_CUSTOM_BROWSER_ACTION_RESULT_MESSAGE" -> string!
const AndroidX.Media.Utils.MediaConstants.ExtrasKeyCustomBrowserActionResultRefreshItem = "androidx.media.utils.extras.KEY_CUSTOM_BROWSER_ACTION_RESULT_REFRESH_ITEM" -> string!
const AndroidX.Media.Utils.MediaConstants.ExtrasKeyCustomBrowserActionResultShowPlayingItem = "androidx.media.utils.extras.KEY_CUSTOM_BROWSER_ACTION_RESULT_SHOW_PLAYING_ITEM" -> string!
const AndroidX.Media.Utils.MediaConstants.MetadataKeyContentId = "androidx.media.MediaMetadatCompat.METADATA_KEY_CONTENT_ID" -> string!
const AndroidX.Media.Utils.MediaConstants.MetadataKeyIsAdvertisement = "android.media.metadata.ADVERTISEMENT" -> string!
const AndroidX.Media.Utils.MediaConstants.MetadataKeyIsExplicit = "android.media.IS_EXPLICIT" -> string!
const AndroidX.Media.Utils.MediaConstants.MetadataKeyNextEpisodeContentId = "androidx.media.MediaMetadatCompat.METADATA_KEY_NEXT_EPISODE_CONTENT_ID" -> string!
const AndroidX.Media.Utils.MediaConstants.MetadataKeySeriesContentId = "androidx.media.MediaMetadatCompat.METADATA_KEY_SERIES_CONTENT_ID" -> string!
const AndroidX.Media.Utils.MediaConstants.MetadataValueAttributePresent = 1 -> long
const AndroidX.Media.Utils.MediaConstants.PlaybackStateExtrasKeyErrorResolutionActionIntent = "android.media.extras.ERROR_RESOLUTION_ACTION_INTENT" -> string!
const AndroidX.Media.Utils.MediaConstants.PlaybackStateExtrasKeyErrorResolutionActionLabel = "android.media.extras.ERROR_RESOLUTION_ACTION_LABEL" -> string!
const AndroidX.Media.Utils.MediaConstants.PlaybackStateExtrasKeyErrorResolutionUsingCarAppLibraryIntent = "androidx.media.PlaybackStateCompat.Extras.ERROR_RESOLUTION_USING_CAR_APP_LIBRARY_INTENT" -> string!
const AndroidX.Media.Utils.MediaConstants.PlaybackStateExtrasKeyMediaId = "androidx.media.PlaybackStateCompat.Extras.KEY_MEDIA_ID" -> string!
const AndroidX.Media.Utils.MediaConstants.SessionExtrasKeyAccountName = "androidx.media.MediaSessionCompat.Extras.KEY_ACCOUNT_NAME" -> string!
const AndroidX.Media.Utils.MediaConstants.SessionExtrasKeyAccountType = "androidx.media.MediaSessionCompat.Extras.KEY_ACCOUNT_TYPE" -> string!
const AndroidX.Media.Utils.MediaConstants.SessionExtrasKeyAuthtoken = "androidx.media.MediaSessionCompat.Extras.KEY_AUTHTOKEN" -> string!
const AndroidX.Media.Utils.MediaConstants.SessionExtrasKeySlotReservationSkipToNext = "android.media.playback.ALWAYS_RESERVE_SPACE_FOR.ACTION_SKIP_TO_NEXT" -> string!
const AndroidX.Media.Utils.MediaConstants.SessionExtrasKeySlotReservationSkipToPrev = "android.media.playback.ALWAYS_RESERVE_SPACE_FOR.ACTION_SKIP_TO_PREVIOUS" -> string!
const AndroidX.Media.Utils.MediaConstants.TransportControlsExtrasKeyLegacyStreamType = "android.media.session.extra.LEGACY_STREAM_TYPE" -> string!
const AndroidX.Media.Utils.MediaConstants.TransportControlsExtrasKeyShuffle = "androidx.media.MediaControllerCompat.TransportControls.extras.KEY_SHUFFLE" -> string!
const AndroidX.Media.VolumeProviderCompat.VolumeControlAbsolute = 2 -> int
const AndroidX.Media.VolumeProviderCompat.VolumeControlFixed = 0 -> int
const AndroidX.Media.VolumeProviderCompat.VolumeControlRelative = 1 -> int
override Android.Support.V4.Media.AudioAttributesCompatParcelizer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.AudioAttributesImplBaseParcelizer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.MediaBrowserCompat.CallbackHandler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.MediaBrowserCompat.CallbackHandler.ThresholdClass.get -> nint
override Android.Support.V4.Media.MediaBrowserCompat.CallbackHandler.ThresholdType.get -> System.Type!
override Android.Support.V4.Media.MediaBrowserCompat.ConnectionCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.MediaBrowserCompat.ConnectionCallback.ThresholdClass.get -> nint
override Android.Support.V4.Media.MediaBrowserCompat.ConnectionCallback.ThresholdType.get -> System.Type!
override Android.Support.V4.Media.MediaBrowserCompat.CustomActionCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.MediaBrowserCompat.CustomActionCallback.ThresholdClass.get -> nint
override Android.Support.V4.Media.MediaBrowserCompat.CustomActionCallback.ThresholdType.get -> System.Type!
override Android.Support.V4.Media.MediaBrowserCompat.ItemCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.MediaBrowserCompat.ItemCallback.ThresholdClass.get -> nint
override Android.Support.V4.Media.MediaBrowserCompat.ItemCallback.ThresholdType.get -> System.Type!
override Android.Support.V4.Media.MediaBrowserCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.MediaBrowserCompat.MediaItem.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.MediaBrowserCompat.MediaItem.ThresholdClass.get -> nint
override Android.Support.V4.Media.MediaBrowserCompat.MediaItem.ThresholdType.get -> System.Type!
override Android.Support.V4.Media.MediaBrowserCompat.SearchCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.MediaBrowserCompat.SearchCallback.ThresholdClass.get -> nint
override Android.Support.V4.Media.MediaBrowserCompat.SearchCallback.ThresholdType.get -> System.Type!
override Android.Support.V4.Media.MediaBrowserCompat.ServiceBinderWrapper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.MediaBrowserCompat.ServiceBinderWrapper.ThresholdClass.get -> nint
override Android.Support.V4.Media.MediaBrowserCompat.ServiceBinderWrapper.ThresholdType.get -> System.Type!
override Android.Support.V4.Media.MediaBrowserCompat.SubscriptionCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.MediaBrowserCompat.SubscriptionCallback.ThresholdClass.get -> nint
override Android.Support.V4.Media.MediaBrowserCompat.SubscriptionCallback.ThresholdType.get -> System.Type!
override Android.Support.V4.Media.MediaDescriptionCompat.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.MediaDescriptionCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.MediaMetadataCompat.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.MediaMetadataCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.RatingCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.Session.MediaControllerCallbackDefault.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.Session.MediaControllerCallbackDefault.ThresholdClass.get -> nint
override Android.Support.V4.Media.Session.MediaControllerCallbackDefault.ThresholdType.get -> System.Type!
override Android.Support.V4.Media.Session.MediaControllerCallbackStub.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.Session.MediaControllerCallbackStub.ThresholdClass.get -> nint
override Android.Support.V4.Media.Session.MediaControllerCallbackStub.ThresholdType.get -> System.Type!
override Android.Support.V4.Media.Session.MediaControllerCallback_Parcel.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.Session.MediaControllerCallback_Parcel.ThresholdClass.get -> nint
override Android.Support.V4.Media.Session.MediaControllerCallback_Parcel.ThresholdType.get -> System.Type!
override Android.Support.V4.Media.Session.MediaControllerCompat.Callback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.Session.MediaControllerCompat.Callback.ThresholdClass.get -> nint
override Android.Support.V4.Media.Session.MediaControllerCompat.Callback.ThresholdType.get -> System.Type!
override Android.Support.V4.Media.Session.MediaControllerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.Session.MediaControllerCompat.PlaybackInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.ThresholdClass.get -> nint
override Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.ThresholdType.get -> System.Type!
override Android.Support.V4.Media.Session.MediaSessionCompat.Callback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.Session.MediaSessionCompat.Callback.ThresholdClass.get -> nint
override Android.Support.V4.Media.Session.MediaSessionCompat.Callback.ThresholdType.get -> System.Type!
override Android.Support.V4.Media.Session.MediaSessionCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.Session.MediaSessionCompat.ThresholdClass.get -> nint
override Android.Support.V4.Media.Session.MediaSessionCompat.ThresholdType.get -> System.Type!
override Android.Support.V4.Media.Session.MediaSessionCompat.Token.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.Session.MediaSessionDefault.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.Session.MediaSessionDefault.ThresholdClass.get -> nint
override Android.Support.V4.Media.Session.MediaSessionDefault.ThresholdType.get -> System.Type!
override Android.Support.V4.Media.Session.MediaSessionStub.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.Session.MediaSessionStub.ThresholdClass.get -> nint
override Android.Support.V4.Media.Session.MediaSessionStub.ThresholdType.get -> System.Type!
override Android.Support.V4.Media.Session.MediaSession_Parcel.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.Session.MediaSession_Parcel.ThresholdClass.get -> nint
override Android.Support.V4.Media.Session.MediaSession_Parcel.ThresholdType.get -> System.Type!
override Android.Support.V4.Media.Session.ParcelableVolumeInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.Session.ParcelableVolumeInfo.ThresholdClass.get -> nint
override Android.Support.V4.Media.Session.ParcelableVolumeInfo.ThresholdType.get -> System.Type!
override Android.Support.V4.Media.Session.PlaybackStateCompat.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Android.Support.V4.Media.Session.PlaybackStateCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.App.NotificationCompat.DecoratedMediaCustomViewStyle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.App.NotificationCompat.DecoratedMediaCustomViewStyle.ThresholdClass.get -> nint
override AndroidX.Media.App.NotificationCompat.DecoratedMediaCustomViewStyle.ThresholdType.get -> System.Type!
override AndroidX.Media.App.NotificationCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.App.NotificationCompat.MediaStyle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.App.NotificationCompat.MediaStyle.ThresholdClass.get -> nint
override AndroidX.Media.App.NotificationCompat.MediaStyle.ThresholdType.get -> System.Type!
override AndroidX.Media.App.NotificationCompat.ThresholdClass.get -> nint
override AndroidX.Media.App.NotificationCompat.ThresholdType.get -> System.Type!
override AndroidX.Media.AudioAttributesCompat.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.AudioAttributesCompat.Builder.ThresholdClass.get -> nint
override AndroidX.Media.AudioAttributesCompat.Builder.ThresholdType.get -> System.Type!
override AndroidX.Media.AudioAttributesCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.AudioAttributesCompat.ThresholdClass.get -> nint
override AndroidX.Media.AudioAttributesCompat.ThresholdType.get -> System.Type!
override AndroidX.Media.AudioAttributesCompatParcelizer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.AudioAttributesCompatParcelizer.ThresholdClass.get -> nint
override AndroidX.Media.AudioAttributesCompatParcelizer.ThresholdType.get -> System.Type!
override AndroidX.Media.AudioAttributesImplBase.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.AudioAttributesImplBase.ThresholdClass.get -> nint
override AndroidX.Media.AudioAttributesImplBase.ThresholdType.get -> System.Type!
override AndroidX.Media.AudioAttributesImplBaseParcelizer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.AudioAttributesImplBaseParcelizer.ThresholdClass.get -> nint
override AndroidX.Media.AudioAttributesImplBaseParcelizer.ThresholdType.get -> System.Type!
override AndroidX.Media.AudioFocusRequestCompat.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.AudioFocusRequestCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.AudioFocusRequestCompat.ThresholdClass.get -> nint
override AndroidX.Media.AudioFocusRequestCompat.ThresholdType.get -> System.Type!
override AndroidX.Media.AudioManagerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.MediaBrowserCompatUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.MediaBrowserCompatUtils.ThresholdClass.get -> nint
override AndroidX.Media.MediaBrowserCompatUtils.ThresholdType.get -> System.Type!
override AndroidX.Media.MediaBrowserProtocol.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.MediaBrowserProtocol.ThresholdClass.get -> nint
override AndroidX.Media.MediaBrowserProtocol.ThresholdType.get -> System.Type!
override AndroidX.Media.MediaBrowserServiceCompat.BrowserRoot.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.MediaBrowserServiceCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.MediaBrowserServiceCompat.OnBind(Android.Content.Intent? intent) -> Android.OS.IBinder?
override AndroidX.Media.MediaBrowserServiceCompat.Result.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.MediaBrowserServiceCompat.Result.ThresholdClass.get -> nint
override AndroidX.Media.MediaBrowserServiceCompat.Result.ThresholdType.get -> System.Type!
override AndroidX.Media.MediaBrowserServiceCompat.ThresholdClass.get -> nint
override AndroidX.Media.MediaBrowserServiceCompat.ThresholdType.get -> System.Type!
override AndroidX.Media.MediaSessionManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.MediaSessionManager.RemoteUserInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.Session.MediaButtonReceiver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.Session.MediaButtonReceiver.OnReceive(Android.Content.Context? context, Android.Content.Intent? intent) -> void
override AndroidX.Media.Session.MediaButtonReceiver.ThresholdClass.get -> nint
override AndroidX.Media.Session.MediaButtonReceiver.ThresholdType.get -> System.Type!
override AndroidX.Media.Utils.MediaConstants.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.VolumeProviderCompat.Callback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.VolumeProviderCompat.Callback.ThresholdClass.get -> nint
override AndroidX.Media.VolumeProviderCompat.Callback.ThresholdType.get -> System.Type!
override AndroidX.Media.VolumeProviderCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Media.VolumeProviderCompat.ThresholdClass.get -> nint
override AndroidX.Media.VolumeProviderCompat.ThresholdType.get -> System.Type!
static Android.Support.V4.Media.AudioAttributesCompatParcelizer.Read(AndroidX.VersionedParcelable.VersionedParcel? parcel) -> AndroidX.Media.AudioAttributesCompat?
static Android.Support.V4.Media.AudioAttributesCompatParcelizer.Write(AndroidX.Media.AudioAttributesCompat? obj, AndroidX.VersionedParcelable.VersionedParcel? parcel) -> void
static Android.Support.V4.Media.AudioAttributesImplBaseParcelizer.Read(AndroidX.VersionedParcelable.VersionedParcel? parcel) -> AndroidX.Media.AudioAttributesImplBase?
static Android.Support.V4.Media.AudioAttributesImplBaseParcelizer.Write(AndroidX.Media.AudioAttributesImplBase? obj, AndroidX.VersionedParcelable.VersionedParcel? parcel) -> void
static Android.Support.V4.Media.MediaBrowserCompat.MediaItem.Creator.get -> Android.OS.IParcelableCreator?
static Android.Support.V4.Media.MediaBrowserCompat.MediaItem.FromMediaItem(Java.Lang.Object? itemObj) -> Android.Support.V4.Media.MediaBrowserCompat.MediaItem?
static Android.Support.V4.Media.MediaBrowserCompat.MediaItem.FromMediaItemList(System.Collections.Generic.IList<object!>? itemList) -> System.Collections.Generic.IList<Android.Support.V4.Media.MediaBrowserCompat.MediaItem!>?
static Android.Support.V4.Media.MediaDescriptionCompat.Creator.get -> Android.OS.IParcelableCreator?
static Android.Support.V4.Media.MediaDescriptionCompat.FromMediaDescription(Java.Lang.Object? descriptionObj) -> Android.Support.V4.Media.MediaDescriptionCompat?
static Android.Support.V4.Media.MediaMetadataCompat.Creator.get -> Android.OS.IParcelableCreator?
static Android.Support.V4.Media.MediaMetadataCompat.FromMediaMetadata(Java.Lang.Object? metadataObj) -> Android.Support.V4.Media.MediaMetadataCompat?
static Android.Support.V4.Media.RatingCompat.Creator.get -> Android.OS.IParcelableCreator?
static Android.Support.V4.Media.RatingCompat.FromRating(Java.Lang.Object? ratingObj) -> Android.Support.V4.Media.RatingCompat?
static Android.Support.V4.Media.RatingCompat.NewHeartRating(bool hasHeart) -> Android.Support.V4.Media.RatingCompat?
static Android.Support.V4.Media.RatingCompat.NewPercentageRating(float percent) -> Android.Support.V4.Media.RatingCompat?
static Android.Support.V4.Media.RatingCompat.NewStarRating(int starRatingStyle, float starRating) -> Android.Support.V4.Media.RatingCompat?
static Android.Support.V4.Media.RatingCompat.NewThumbRating(bool thumbIsUp) -> Android.Support.V4.Media.RatingCompat?
static Android.Support.V4.Media.RatingCompat.NewUnratedRating(int ratingStyle) -> Android.Support.V4.Media.RatingCompat?
static Android.Support.V4.Media.Session.IMediaControllerCallbackExtensions.OnQueueTitleChanged(this Android.Support.V4.Media.Session.IMediaControllerCallback! self, string? p0) -> void
static Android.Support.V4.Media.Session.MediaControllerCallbackStub.AsInterface(Android.OS.IBinder? obj) -> Android.Support.V4.Media.Session.IMediaControllerCallback?
static Android.Support.V4.Media.Session.MediaControllerCompat.GetMediaController(Android.App.Activity! activity) -> Android.Support.V4.Media.Session.MediaControllerCompat?
static Android.Support.V4.Media.Session.MediaControllerCompat.SetMediaController(Android.App.Activity! activity, Android.Support.V4.Media.Session.MediaControllerCompat? mediaController) -> void
static Android.Support.V4.Media.Session.MediaSessionCompat.EnsureClassLoader(Android.OS.Bundle? bundle) -> void
static Android.Support.V4.Media.Session.MediaSessionCompat.FromMediaSession(Android.Content.Context? context, Java.Lang.Object? mediaSession) -> Android.Support.V4.Media.Session.MediaSessionCompat?
static Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem.Creator.get -> Android.OS.IParcelableCreator?
static Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem.FromQueueItem(Java.Lang.Object? queueItem) -> Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem?
static Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem.FromQueueItemList(System.Collections.Generic.IList<object!>? itemList) -> System.Collections.Generic.IList<Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem!>?
static Android.Support.V4.Media.Session.MediaSessionCompat.Token.Creator.get -> Android.OS.IParcelableCreator?
static Android.Support.V4.Media.Session.MediaSessionCompat.Token.FromBundle(Android.OS.Bundle? tokenBundle) -> Android.Support.V4.Media.Session.MediaSessionCompat.Token?
static Android.Support.V4.Media.Session.MediaSessionCompat.Token.FromToken(Java.Lang.Object? token) -> Android.Support.V4.Media.Session.MediaSessionCompat.Token?
static Android.Support.V4.Media.Session.MediaSessionCompat.Token.FromToken(Java.Lang.Object? token, Android.Support.V4.Media.Session.IMediaSession? extraBinder) -> Android.Support.V4.Media.Session.MediaSessionCompat.Token?
static Android.Support.V4.Media.Session.MediaSessionCompat.UnparcelWithClassLoader(Android.OS.Bundle? bundle) -> Android.OS.Bundle?
static Android.Support.V4.Media.Session.MediaSessionStub.AsInterface(Android.OS.IBinder? obj) -> Android.Support.V4.Media.Session.IMediaSession?
static Android.Support.V4.Media.Session.ParcelableVolumeInfo.Creator.get -> Android.OS.IParcelableCreator?
static Android.Support.V4.Media.Session.PlaybackStateCompat.Creator.get -> Android.OS.IParcelableCreator?
static Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction.Creator.get -> Android.OS.IParcelableCreator?
static Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction.FromCustomAction(Java.Lang.Object? customActionObj) -> Android.Support.V4.Media.Session.PlaybackStateCompat.CustomAction?
static Android.Support.V4.Media.Session.PlaybackStateCompat.FromPlaybackState(Java.Lang.Object? stateObj) -> Android.Support.V4.Media.Session.PlaybackStateCompat?
static Android.Support.V4.Media.Session.PlaybackStateCompat.ToKeyCode(long action) -> int
static AndroidX.Media.App.NotificationCompat.MediaStyle.GetMediaSession(Android.App.Notification? notification) -> Android.Support.V4.Media.Session.MediaSessionCompat.Token?
static AndroidX.Media.AudioAttributesCompat.SetForceLegacyBehavior(bool force) -> void
static AndroidX.Media.AudioAttributesCompat.Wrap(Java.Lang.Object! aa) -> AndroidX.Media.AudioAttributesCompat?
static AndroidX.Media.AudioAttributesCompatParcelizer.Read(AndroidX.VersionedParcelable.VersionedParcel? parcel) -> AndroidX.Media.AudioAttributesCompat?
static AndroidX.Media.AudioAttributesCompatParcelizer.Write(AndroidX.Media.AudioAttributesCompat? obj, AndroidX.VersionedParcelable.VersionedParcel? parcel) -> void
static AndroidX.Media.AudioAttributesImplBaseParcelizer.Read(AndroidX.VersionedParcelable.VersionedParcel? parcel) -> AndroidX.Media.AudioAttributesImplBase?
static AndroidX.Media.AudioAttributesImplBaseParcelizer.Write(AndroidX.Media.AudioAttributesImplBase? obj, AndroidX.VersionedParcelable.VersionedParcel? parcel) -> void
static AndroidX.Media.AudioManagerCompat.AbandonAudioFocusRequest(Android.Media.AudioManager! audioManager, AndroidX.Media.AudioFocusRequestCompat! focusRequest) -> int
static AndroidX.Media.AudioManagerCompat.GetStreamMaxVolume(Android.Media.AudioManager! audioManager, int streamType) -> int
static AndroidX.Media.AudioManagerCompat.GetStreamMinVolume(Android.Media.AudioManager! audioManager, int streamType) -> int
static AndroidX.Media.AudioManagerCompat.IsVolumeFixed(Android.Media.AudioManager! audioManager) -> bool
static AndroidX.Media.AudioManagerCompat.RequestAudioFocus(Android.Media.AudioManager! audioManager, AndroidX.Media.AudioFocusRequestCompat! focusRequest) -> int
static AndroidX.Media.MediaBrowserCompatUtils.AreSameOptions(Android.OS.Bundle? options1, Android.OS.Bundle? options2) -> bool
static AndroidX.Media.MediaBrowserCompatUtils.HasDuplicatedItems(Android.OS.Bundle? options1, Android.OS.Bundle? options2) -> bool
static AndroidX.Media.MediaSessionManager.GetSessionManager(Android.Content.Context! context) -> AndroidX.Media.MediaSessionManager!
static AndroidX.Media.Session.MediaButtonReceiver.BuildMediaButtonPendingIntent(Android.Content.Context? context, Android.Content.ComponentName? mbrComponent, long action) -> Android.App.PendingIntent?
static AndroidX.Media.Session.MediaButtonReceiver.BuildMediaButtonPendingIntent(Android.Content.Context? context, long action) -> Android.App.PendingIntent?
static AndroidX.Media.Session.MediaButtonReceiver.GetMediaButtonReceiverComponent(Android.Content.Context? context) -> Android.Content.ComponentName?
static AndroidX.Media.Session.MediaButtonReceiver.HandleIntent(Android.Support.V4.Media.Session.MediaSessionCompat? mediaSessionCompat, Android.Content.Intent? intent) -> Android.Views.KeyEvent?
virtual Android.Support.V4.Media.MediaBrowserCompat.ConnectionCallback.OnConnected() -> void
virtual Android.Support.V4.Media.MediaBrowserCompat.ConnectionCallback.OnConnectionFailed() -> void
virtual Android.Support.V4.Media.MediaBrowserCompat.ConnectionCallback.OnConnectionSuspended() -> void
virtual Android.Support.V4.Media.MediaBrowserCompat.CustomActionCallback.OnError(string? action, Android.OS.Bundle? extras, Android.OS.Bundle? data) -> void
virtual Android.Support.V4.Media.MediaBrowserCompat.CustomActionCallback.OnProgressUpdate(string? action, Android.OS.Bundle? extras, Android.OS.Bundle? data) -> void
virtual Android.Support.V4.Media.MediaBrowserCompat.CustomActionCallback.OnResult(string? action, Android.OS.Bundle? extras, Android.OS.Bundle? resultData) -> void
virtual Android.Support.V4.Media.MediaBrowserCompat.ItemCallback.OnError(string! itemId) -> void
virtual Android.Support.V4.Media.MediaBrowserCompat.ItemCallback.OnItemLoaded(Android.Support.V4.Media.MediaBrowserCompat.MediaItem? item) -> void
virtual Android.Support.V4.Media.MediaBrowserCompat.MediaItem.DescribeContents() -> int
virtual Android.Support.V4.Media.MediaBrowserCompat.MediaItem.Description.get -> Android.Support.V4.Media.MediaDescriptionCompat!
virtual Android.Support.V4.Media.MediaBrowserCompat.MediaItem.Flags.get -> int
virtual Android.Support.V4.Media.MediaBrowserCompat.MediaItem.IsBrowsable.get -> bool
virtual Android.Support.V4.Media.MediaBrowserCompat.MediaItem.IsPlayable.get -> bool
virtual Android.Support.V4.Media.MediaBrowserCompat.MediaItem.MediaId.get -> string?
virtual Android.Support.V4.Media.MediaBrowserCompat.MediaItem.WriteToParcel(Android.OS.Parcel? out, Android.OS.ParcelableWriteFlags flags) -> void
virtual Android.Support.V4.Media.MediaBrowserCompat.SearchCallback.OnError(string! query, Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.MediaBrowserCompat.SearchCallback.OnSearchResult(string! query, Android.OS.Bundle? extras, System.Collections.Generic.IList<Android.Support.V4.Media.MediaBrowserCompat.MediaItem!>! items) -> void
virtual Android.Support.V4.Media.MediaBrowserCompat.SubscriptionCallback.OnChildrenLoaded(string! parentId, System.Collections.Generic.IList<Android.Support.V4.Media.MediaBrowserCompat.MediaItem!>! children) -> void
virtual Android.Support.V4.Media.MediaBrowserCompat.SubscriptionCallback.OnChildrenLoaded(string! parentId, System.Collections.Generic.IList<Android.Support.V4.Media.MediaBrowserCompat.MediaItem!>! children, Android.OS.Bundle! options) -> void
virtual Android.Support.V4.Media.MediaBrowserCompat.SubscriptionCallback.OnError(string! parentId) -> void
virtual Android.Support.V4.Media.MediaBrowserCompat.SubscriptionCallback.OnError(string! parentId, Android.OS.Bundle! options) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCallbackDefault.AsBinder() -> Android.OS.IBinder?
virtual Android.Support.V4.Media.Session.MediaControllerCallbackDefault.OnCaptioningEnabledChanged(bool enabled) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCallbackDefault.OnEvent(string? e, Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCallbackDefault.OnExtrasChanged(Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCallbackDefault.OnMetadataChanged(Android.Support.V4.Media.MediaMetadataCompat? metadata) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCallbackDefault.OnPlaybackStateChanged(Android.Support.V4.Media.Session.PlaybackStateCompat? state) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCallbackDefault.OnQueueChanged(System.Collections.Generic.IList<Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem!>? queue) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCallbackDefault.OnQueueTitleChanged(Java.Lang.ICharSequence? title) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCallbackDefault.OnRepeatModeChanged(int repeatMode) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCallbackDefault.OnSessionDestroyed() -> void
virtual Android.Support.V4.Media.Session.MediaControllerCallbackDefault.OnSessionReady() -> void
virtual Android.Support.V4.Media.Session.MediaControllerCallbackDefault.OnShuffleModeChanged(int shuffleMode) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCallbackDefault.OnShuffleModeChangedRemoved(bool enabled) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCallbackDefault.OnVolumeInfoChanged(Android.Support.V4.Media.Session.ParcelableVolumeInfo? info) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCallbackStub.AsBinder() -> Android.OS.IBinder?
virtual Android.Support.V4.Media.Session.MediaControllerCallbackStub.OnTransact(int code, Android.OS.Parcel? data, Android.OS.Parcel? reply, int flags) -> bool
virtual Android.Support.V4.Media.Session.MediaControllerCompat.Callback.BinderDied() -> void
virtual Android.Support.V4.Media.Session.MediaControllerCompat.Callback.IControllerCallback.get -> Android.Support.V4.Media.Session.IMediaControllerCallback?
virtual Android.Support.V4.Media.Session.MediaControllerCompat.Callback.OnAudioInfoChanged(Android.Support.V4.Media.Session.MediaControllerCompat.PlaybackInfo? info) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCompat.Callback.OnCaptioningEnabledChanged(bool enabled) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCompat.Callback.OnExtrasChanged(Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCompat.Callback.OnMetadataChanged(Android.Support.V4.Media.MediaMetadataCompat? metadata) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCompat.Callback.OnPlaybackStateChanged(Android.Support.V4.Media.Session.PlaybackStateCompat? state) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCompat.Callback.OnQueueChanged(System.Collections.Generic.IList<Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem!>? queue) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCompat.Callback.OnQueueTitleChanged(Java.Lang.ICharSequence? title) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCompat.Callback.OnRepeatModeChanged(int repeatMode) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCompat.Callback.OnSessionDestroyed() -> void
virtual Android.Support.V4.Media.Session.MediaControllerCompat.Callback.OnSessionEvent(string? e, Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCompat.Callback.OnSessionReady() -> void
virtual Android.Support.V4.Media.Session.MediaControllerCompat.Callback.OnShuffleModeChanged(int shuffleMode) -> void
virtual Android.Support.V4.Media.Session.MediaControllerCompat.TransportControls.SetPlaybackSpeed(float speed) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Active.get -> bool
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Active.set -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.AddOnActiveChangeListener(Android.Support.V4.Media.Session.MediaSessionCompat.IOnActiveChangeListener? listener) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnAddQueueItem(Android.Support.V4.Media.MediaDescriptionCompat? description) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnAddQueueItem(Android.Support.V4.Media.MediaDescriptionCompat? description, int index) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnCommand(string? command, Android.OS.Bundle? extras, Android.OS.ResultReceiver? cb) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnCustomAction(string? action, Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnFastForward() -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnMediaButtonEvent(Android.Content.Intent? mediaButtonEvent) -> bool
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnPause() -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnPlay() -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnPlayFromMediaId(string? mediaId, Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnPlayFromSearch(string? query, Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnPlayFromUri(Android.Net.Uri? uri, Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnPrepare() -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnPrepareFromMediaId(string? mediaId, Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnPrepareFromSearch(string? query, Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnPrepareFromUri(Android.Net.Uri? uri, Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnRemoveQueueItem(Android.Support.V4.Media.MediaDescriptionCompat? description) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnRemoveQueueItemAt(int index) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnRewind() -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnSeekTo(long pos) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnSetCaptioningEnabled(bool enabled) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnSetPlaybackSpeed(float speed) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnSetRating(Android.Support.V4.Media.RatingCompat? rating) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnSetRating(Android.Support.V4.Media.RatingCompat? rating, Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnSetRepeatMode(int repeatMode) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnSetShuffleMode(int shuffleMode) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnSkipToNext() -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnSkipToPrevious() -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnSkipToQueueItem(long id) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Callback.OnStop() -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.CallingPackage.get -> string?
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Controller.get -> Android.Support.V4.Media.Session.MediaControllerCompat?
virtual Android.Support.V4.Media.Session.MediaSessionCompat.MediaSession.get -> Java.Lang.Object?
virtual Android.Support.V4.Media.Session.MediaSessionCompat.Release() -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.RemoteControlClient.get -> Java.Lang.Object?
virtual Android.Support.V4.Media.Session.MediaSessionCompat.RemoveOnActiveChangeListener(Android.Support.V4.Media.Session.MediaSessionCompat.IOnActiveChangeListener? listener) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.SendSessionEvent(string? e, Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.SessionToken.get -> Android.Support.V4.Media.Session.MediaSessionCompat.Token?
virtual Android.Support.V4.Media.Session.MediaSessionCompat.SetCallback(Android.Support.V4.Media.Session.MediaSessionCompat.Callback? callback) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.SetCallback(Android.Support.V4.Media.Session.MediaSessionCompat.Callback? callback, Android.OS.Handler? handler) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.SetCaptioningEnabled(bool enabled) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.SetExtras(Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.SetFlags(int flags) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.SetMediaButtonReceiver(Android.App.PendingIntent? mbr) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.SetMetadata(Android.Support.V4.Media.MediaMetadataCompat? metadata) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.SetPlaybackState(Android.Support.V4.Media.Session.PlaybackStateCompat? state) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.SetPlaybackToLocal(int stream) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.SetPlaybackToRemote(AndroidX.Media.VolumeProviderCompat? volumeProvider) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.SetQueue(System.Collections.Generic.IList<Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem!>? queue) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.SetQueueTitle(Java.Lang.ICharSequence? title) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.SetRatingType(int type) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.SetRegistrationCallback(Android.Support.V4.Media.Session.MediaSessionCompat.IRegistrationCallback? callback, Android.OS.Handler! handler) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.SetRepeatMode(int repeatMode) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.SetSessionActivity(Android.App.PendingIntent? pi) -> void
virtual Android.Support.V4.Media.Session.MediaSessionCompat.SetShuffleMode(int shuffleMode) -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.AddQueueItem(Android.Support.V4.Media.MediaDescriptionCompat? description) -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.AddQueueItemAt(Android.Support.V4.Media.MediaDescriptionCompat? description, int index) -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.AdjustVolume(int direction, int flags, string? packageName) -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.AsBinder() -> Android.OS.IBinder?
virtual Android.Support.V4.Media.Session.MediaSessionDefault.CaptioningEnabled.get -> bool
virtual Android.Support.V4.Media.Session.MediaSessionDefault.CaptioningEnabled.set -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.Extras.get -> Android.OS.Bundle?
virtual Android.Support.V4.Media.Session.MediaSessionDefault.FastForward() -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.Flags.get -> long
virtual Android.Support.V4.Media.Session.MediaSessionDefault.IsTransportControlEnabled.get -> bool
virtual Android.Support.V4.Media.Session.MediaSessionDefault.LaunchPendingIntent.get -> Android.App.PendingIntent?
virtual Android.Support.V4.Media.Session.MediaSessionDefault.Metadata.get -> Android.Support.V4.Media.MediaMetadataCompat?
virtual Android.Support.V4.Media.Session.MediaSessionDefault.Next() -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.PackageName.get -> string?
virtual Android.Support.V4.Media.Session.MediaSessionDefault.Pause() -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.Play() -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.PlayFromMediaId(string? uri, Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.PlayFromSearch(string? string, Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.PlayFromUri(Android.Net.Uri? uri, Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.PlaybackState.get -> Android.Support.V4.Media.Session.PlaybackStateCompat?
virtual Android.Support.V4.Media.Session.MediaSessionDefault.Prepare() -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.PrepareFromMediaId(string? uri, Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.PrepareFromSearch(string? string, Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.PrepareFromUri(Android.Net.Uri? uri, Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.Previous() -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.Queue.get -> System.Collections.Generic.IList<Android.Support.V4.Media.Session.MediaSessionCompat.QueueItem!>?
virtual Android.Support.V4.Media.Session.MediaSessionDefault.QueueTitleFormatted.get -> Java.Lang.ICharSequence?
virtual Android.Support.V4.Media.Session.MediaSessionDefault.Rate(Android.Support.V4.Media.RatingCompat? rating) -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.RateWithExtras(Android.Support.V4.Media.RatingCompat? rating, Android.OS.Bundle? extras) -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.RatingType.get -> int
virtual Android.Support.V4.Media.Session.MediaSessionDefault.RegisterCallbackListener(Android.Support.V4.Media.Session.IMediaControllerCallback? cb) -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.RemoveQueueItem(Android.Support.V4.Media.MediaDescriptionCompat? description) -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.RemoveQueueItemAt(int index) -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.RepeatMode.get -> int
virtual Android.Support.V4.Media.Session.MediaSessionDefault.RepeatMode.set -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.Rewind() -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.SeekTo(long pos) -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.SendCustomAction(string? action, Android.OS.Bundle? args) -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.SendMediaButton(Android.Views.KeyEvent? mediaButton) -> bool
virtual Android.Support.V4.Media.Session.MediaSessionDefault.SessionInfo.get -> Android.OS.Bundle?
virtual Android.Support.V4.Media.Session.MediaSessionDefault.SetPlaybackSpeed(float speed) -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.SetVolumeTo(int value, int flags, string? packageName) -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.ShuffleMode.get -> int
virtual Android.Support.V4.Media.Session.MediaSessionDefault.ShuffleMode.set -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.ShuffleModeEnabledRemoved.get -> bool
virtual Android.Support.V4.Media.Session.MediaSessionDefault.ShuffleModeEnabledRemoved.set -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.SkipToQueueItem(long id) -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.Stop() -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.Tag.get -> string?
virtual Android.Support.V4.Media.Session.MediaSessionDefault.UnregisterCallbackListener(Android.Support.V4.Media.Session.IMediaControllerCallback? cb) -> void
virtual Android.Support.V4.Media.Session.MediaSessionDefault.VolumeAttributes.get -> Android.Support.V4.Media.Session.ParcelableVolumeInfo?
virtual Android.Support.V4.Media.Session.MediaSessionStub.AsBinder() -> Android.OS.IBinder?
virtual Android.Support.V4.Media.Session.MediaSessionStub.OnTransact(int code, Android.OS.Parcel? data, Android.OS.Parcel? reply, int flags) -> bool
virtual Android.Support.V4.Media.Session.ParcelableVolumeInfo.DescribeContents() -> int
virtual Android.Support.V4.Media.Session.ParcelableVolumeInfo.WriteToParcel(Android.OS.Parcel? dest, Android.OS.ParcelableWriteFlags flags) -> void
virtual AndroidX.Media.App.NotificationCompat.MediaStyle.SetCancelButtonIntent(Android.App.PendingIntent? pendingIntent) -> AndroidX.Media.App.NotificationCompat.MediaStyle?
virtual AndroidX.Media.App.NotificationCompat.MediaStyle.SetMediaSession(Android.Support.V4.Media.Session.MediaSessionCompat.Token? token) -> AndroidX.Media.App.NotificationCompat.MediaStyle?
virtual AndroidX.Media.App.NotificationCompat.MediaStyle.SetRemotePlaybackInfo(Java.Lang.ICharSequence! deviceName, int iconResource, Android.App.PendingIntent? chipIntent) -> AndroidX.Media.App.NotificationCompat.MediaStyle!
virtual AndroidX.Media.App.NotificationCompat.MediaStyle.SetShowActionsInCompactView(params int[]? actions) -> AndroidX.Media.App.NotificationCompat.MediaStyle?
virtual AndroidX.Media.App.NotificationCompat.MediaStyle.SetShowCancelButton(bool show) -> AndroidX.Media.App.NotificationCompat.MediaStyle?
virtual AndroidX.Media.AudioAttributesCompat.Builder.Build() -> AndroidX.Media.AudioAttributesCompat?
virtual AndroidX.Media.AudioAttributesCompat.Builder.SetContentType(int contentType) -> AndroidX.Media.AudioAttributesCompat.Builder?
virtual AndroidX.Media.AudioAttributesCompat.Builder.SetFlags(int flags) -> AndroidX.Media.AudioAttributesCompat.Builder?
virtual AndroidX.Media.AudioAttributesCompat.Builder.SetLegacyStreamType(int streamType) -> AndroidX.Media.AudioAttributesCompat.Builder?
virtual AndroidX.Media.AudioAttributesCompat.Builder.SetUsage(int usage) -> AndroidX.Media.AudioAttributesCompat.Builder?
virtual AndroidX.Media.AudioAttributesCompat.ContentType.get -> int
virtual AndroidX.Media.AudioAttributesCompat.Flags.get -> int
virtual AndroidX.Media.AudioAttributesCompat.LegacyStreamType.get -> int
virtual AndroidX.Media.AudioAttributesCompat.Unwrap() -> Java.Lang.Object?
virtual AndroidX.Media.AudioAttributesCompat.Usage.get -> int
virtual AndroidX.Media.AudioAttributesCompat.VolumeControlStream.get -> int
virtual AndroidX.Media.AudioAttributesImplBase.AudioAttributes.get -> Java.Lang.Object?
virtual AndroidX.Media.AudioAttributesImplBase.ContentType.get -> int
virtual AndroidX.Media.AudioAttributesImplBase.Flags.get -> int
virtual AndroidX.Media.AudioAttributesImplBase.LegacyStreamType.get -> int
virtual AndroidX.Media.AudioAttributesImplBase.RawLegacyStreamType.get -> int
virtual AndroidX.Media.AudioAttributesImplBase.Usage.get -> int
virtual AndroidX.Media.AudioAttributesImplBase.VolumeControlStream.get -> int
virtual AndroidX.Media.AudioFocusRequestCompat.AudioAttributesCompat.get -> AndroidX.Media.AudioAttributesCompat!
virtual AndroidX.Media.AudioFocusRequestCompat.FocusChangeHandler.get -> Android.OS.Handler!
virtual AndroidX.Media.AudioFocusRequestCompat.FocusGain.get -> int
virtual AndroidX.Media.AudioFocusRequestCompat.OnAudioFocusChangeListener.get -> Android.Media.AudioManager.IOnAudioFocusChangeListener!
virtual AndroidX.Media.AudioFocusRequestCompat.WillPauseWhenDucked() -> bool
virtual AndroidX.Media.MediaBrowserServiceCompat.AttachToBaseContext(Android.Content.Context? base) -> void
virtual AndroidX.Media.MediaBrowserServiceCompat.Dump(Java.IO.FileDescriptor? fd, Java.IO.PrintWriter? writer, string![]? args) -> void
virtual AndroidX.Media.MediaBrowserServiceCompat.NotifyChildrenChanged(AndroidX.Media.MediaSessionManager.RemoteUserInfo! remoteUserInfo, string! parentId, Android.OS.Bundle! options) -> void
virtual AndroidX.Media.MediaBrowserServiceCompat.NotifyChildrenChanged(string! parentId) -> void
virtual AndroidX.Media.MediaBrowserServiceCompat.NotifyChildrenChanged(string! parentId, Android.OS.Bundle! options) -> void
virtual AndroidX.Media.MediaBrowserServiceCompat.OnCustomAction(string! action, Android.OS.Bundle? extras, AndroidX.Media.MediaBrowserServiceCompat.Result! result) -> void
virtual AndroidX.Media.MediaBrowserServiceCompat.OnLoadChildren(string! parentId, AndroidX.Media.MediaBrowserServiceCompat.Result! result, Android.OS.Bundle! options) -> void
virtual AndroidX.Media.MediaBrowserServiceCompat.OnLoadItem(string? itemId, AndroidX.Media.MediaBrowserServiceCompat.Result! result) -> void
virtual AndroidX.Media.MediaBrowserServiceCompat.OnSearch(string! query, Android.OS.Bundle? extras, AndroidX.Media.MediaBrowserServiceCompat.Result! result) -> void
virtual AndroidX.Media.MediaBrowserServiceCompat.OnSubscribe(string? id, Android.OS.Bundle? option) -> void
virtual AndroidX.Media.MediaBrowserServiceCompat.OnUnsubscribe(string? id) -> void
virtual AndroidX.Media.MediaBrowserServiceCompat.Result.Detach() -> void
virtual AndroidX.Media.MediaBrowserServiceCompat.Result.SendError(Android.OS.Bundle? extras) -> void
virtual AndroidX.Media.MediaBrowserServiceCompat.Result.SendProgressUpdate(Android.OS.Bundle? extras) -> void
virtual AndroidX.Media.MediaBrowserServiceCompat.Result.SendResult(Java.Lang.Object? result) -> void
virtual AndroidX.Media.MediaBrowserServiceCompat.SessionToken.get -> Android.Support.V4.Media.Session.MediaSessionCompat.Token?
virtual AndroidX.Media.MediaBrowserServiceCompat.SessionToken.set -> void
virtual AndroidX.Media.Session.MediaButtonReceiver.OnForegroundServiceStartNotAllowedException(Android.Content.Intent! intent, Android.App.ForegroundServiceStartNotAllowedException! e) -> void
virtual AndroidX.Media.VolumeProviderCompat.OnAdjustVolume(int direction) -> void
virtual AndroidX.Media.VolumeProviderCompat.OnSetVolumeTo(int volume) -> void
virtual AndroidX.Media.VolumeProviderCompat.SetCallback(AndroidX.Media.VolumeProviderCompat.Callback? callback) -> void
virtual AndroidX.Media.VolumeProviderCompat.VolumeProvider.get -> Java.Lang.Object?
