#nullable enable
ReactiveX.Annotations.BackpressureKind
ReactiveX.Annotations.BackpressureSupportAttribute
ReactiveX.Annotations.BackpressureSupportAttribute.BackpressureSupportAttribute() -> void
ReactiveX.Annotations.BetaAttribute
ReactiveX.Annotations.BetaAttribute.BetaAttribute() -> void
ReactiveX.Annotations.CheckReturnValueAttribute
ReactiveX.Annotations.CheckReturnValueAttribute.CheckReturnValueAttribute() -> void
ReactiveX.Annotations.ExperimentalAttribute
ReactiveX.Annotations.ExperimentalAttribute.ExperimentalAttribute() -> void
ReactiveX.Annotations.IBackpressureSupport
ReactiveX.Annotations.IBackpressureSupport.Value() -> ReactiveX.Annotations.BackpressureKind?
ReactiveX.Annotations.IBeta
ReactiveX.Annotations.ICheckReturnValue
ReactiveX.Annotations.IExperimental
ReactiveX.Annotations.INonNull
ReactiveX.Annotations.INullable
ReactiveX.Annotations.ISchedulerSupport
ReactiveX.Annotations.ISchedulerSupport.Value() -> string?
ReactiveX.Annotations.NonNullAttribute
ReactiveX.Annotations.NonNullAttribute.NonNullAttribute() -> void
ReactiveX.Annotations.NullableAttribute
ReactiveX.Annotations.NullableAttribute.NullableAttribute() -> void
ReactiveX.Annotations.SchedulerSupport
ReactiveX.Annotations.SchedulerSupportAttribute
ReactiveX.Annotations.SchedulerSupportAttribute.SchedulerSupportAttribute() -> void
ReactiveX.Annotations.SchedulerSupportAttribute.Value.get -> string?
ReactiveX.Annotations.SchedulerSupportAttribute.Value.set -> void
ReactiveX.Annotations.SchedulerSupportConsts
ReactiveX.BackpressureOverflowStrategy
ReactiveX.BackpressureStrategy
ReactiveX.Completable
ReactiveX.Completable.AmbWith(ReactiveX.ICompletableSource? other) -> ReactiveX.Completable?
ReactiveX.Completable.AndThen(ReactiveStreams.IPublisher? next) -> ReactiveX.Flowable?
ReactiveX.Completable.AndThen(ReactiveX.ICompletableSource? next) -> ReactiveX.Completable?
ReactiveX.Completable.AndThen(ReactiveX.IMaybeSource? next) -> ReactiveX.Maybe?
ReactiveX.Completable.AndThen(ReactiveX.IObservableSource? next) -> ReactiveX.Observable?
ReactiveX.Completable.AndThen(ReactiveX.ISingleSource? next) -> ReactiveX.Single?
ReactiveX.Completable.As(ReactiveX.ICompletableConverter? converter) -> Java.Lang.Object?
ReactiveX.Completable.BlockingAwait() -> void
ReactiveX.Completable.BlockingAwait(long timeout, Java.Util.Concurrent.TimeUnit? unit) -> bool
ReactiveX.Completable.BlockingGet() -> Java.Lang.Throwable?
ReactiveX.Completable.BlockingGet(long timeout, Java.Util.Concurrent.TimeUnit? unit) -> Java.Lang.Throwable?
ReactiveX.Completable.Cache() -> ReactiveX.Completable?
ReactiveX.Completable.Completable() -> void
ReactiveX.Completable.Completable(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Completable.Compose(ReactiveX.ICompletableTransformer? transformer) -> ReactiveX.Completable?
ReactiveX.Completable.ConcatWith(ReactiveX.ICompletableSource? other) -> ReactiveX.Completable?
ReactiveX.Completable.Delay(long delay, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Completable?
ReactiveX.Completable.Delay(long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Completable?
ReactiveX.Completable.Delay(long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool delayError) -> ReactiveX.Completable?
ReactiveX.Completable.DelaySubscription(long delay, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Completable?
ReactiveX.Completable.DelaySubscription(long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Completable?
ReactiveX.Completable.DoAfterTerminate(ReactiveX.Functions.IAction? onAfterTerminate) -> ReactiveX.Completable?
ReactiveX.Completable.DoFinally(ReactiveX.Functions.IAction? onFinally) -> ReactiveX.Completable?
ReactiveX.Completable.DoOnComplete(ReactiveX.Functions.IAction? onComplete) -> ReactiveX.Completable?
ReactiveX.Completable.DoOnDispose(ReactiveX.Functions.IAction? onDispose) -> ReactiveX.Completable?
ReactiveX.Completable.DoOnError(ReactiveX.Functions.IConsumer? onError) -> ReactiveX.Completable?
ReactiveX.Completable.DoOnEvent(ReactiveX.Functions.IConsumer? onEvent) -> ReactiveX.Completable?
ReactiveX.Completable.DoOnSubscribe(ReactiveX.Functions.IConsumer? onSubscribe) -> ReactiveX.Completable?
ReactiveX.Completable.DoOnTerminate(ReactiveX.Functions.IAction? onTerminate) -> ReactiveX.Completable?
ReactiveX.Completable.Hide() -> ReactiveX.Completable?
ReactiveX.Completable.Lift(ReactiveX.ICompletableOperator? onLift) -> ReactiveX.Completable?
ReactiveX.Completable.Materialize() -> ReactiveX.Single?
ReactiveX.Completable.MergeWith(ReactiveX.ICompletableSource? other) -> ReactiveX.Completable?
ReactiveX.Completable.ObserveOn(ReactiveX.Scheduler? scheduler) -> ReactiveX.Completable?
ReactiveX.Completable.OnErrorComplete() -> ReactiveX.Completable?
ReactiveX.Completable.OnErrorComplete(ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Completable?
ReactiveX.Completable.OnErrorResumeNext(ReactiveX.Functions.IFunction? errorMapper) -> ReactiveX.Completable?
ReactiveX.Completable.OnTerminateDetach() -> ReactiveX.Completable?
ReactiveX.Completable.Repeat() -> ReactiveX.Completable?
ReactiveX.Completable.Repeat(long times) -> ReactiveX.Completable?
ReactiveX.Completable.RepeatUntil(ReactiveX.Functions.IBooleanSupplier? stop) -> ReactiveX.Completable?
ReactiveX.Completable.RepeatWhen(ReactiveX.Functions.IFunction? handler) -> ReactiveX.Completable?
ReactiveX.Completable.Retry() -> ReactiveX.Completable?
ReactiveX.Completable.Retry(ReactiveX.Functions.IBiPredicate? predicate) -> ReactiveX.Completable?
ReactiveX.Completable.Retry(ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Completable?
ReactiveX.Completable.Retry(long times) -> ReactiveX.Completable?
ReactiveX.Completable.Retry(long times, ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Completable?
ReactiveX.Completable.RetryWhen(ReactiveX.Functions.IFunction? handler) -> ReactiveX.Completable?
ReactiveX.Completable.StartWith(ReactiveStreams.IPublisher? other) -> ReactiveX.Flowable?
ReactiveX.Completable.StartWith(ReactiveX.ICompletableSource? other) -> ReactiveX.Completable?
ReactiveX.Completable.StartWith(ReactiveX.Observable? other) -> ReactiveX.Observable?
ReactiveX.Completable.Subscribe() -> ReactiveX.Disposables.IDisposable?
ReactiveX.Completable.Subscribe(ReactiveX.Functions.IAction? onComplete) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Completable.Subscribe(ReactiveX.Functions.IAction? onComplete, ReactiveX.Functions.IConsumer? onError) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Completable.Subscribe(ReactiveX.ICompletableObserver? observer) -> void
ReactiveX.Completable.SubscribeOn(ReactiveX.Scheduler? scheduler) -> ReactiveX.Completable?
ReactiveX.Completable.SubscribeWith(Java.Lang.Object? observer) -> Java.Lang.Object?
ReactiveX.Completable.TakeUntil(ReactiveX.ICompletableSource? other) -> ReactiveX.Completable?
ReactiveX.Completable.Test() -> ReactiveX.Observers.TestObserver?
ReactiveX.Completable.Test(bool cancelled) -> ReactiveX.Observers.TestObserver?
ReactiveX.Completable.Timeout(long timeout, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Completable?
ReactiveX.Completable.Timeout(long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.ICompletableSource? other) -> ReactiveX.Completable?
ReactiveX.Completable.Timeout(long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Completable?
ReactiveX.Completable.Timeout(long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, ReactiveX.ICompletableSource? other) -> ReactiveX.Completable?
ReactiveX.Completable.To(ReactiveX.Functions.IFunction? converter) -> Java.Lang.Object?
ReactiveX.Completable.ToFlowable() -> ReactiveX.Flowable?
ReactiveX.Completable.ToMaybe() -> ReactiveX.Maybe?
ReactiveX.Completable.ToObservable() -> ReactiveX.Observable?
ReactiveX.Completable.ToSingle(Java.Util.Concurrent.ICallable? completionValueSupplier) -> ReactiveX.Single?
ReactiveX.Completable.ToSingleDefault(Java.Lang.Object? completionValue) -> ReactiveX.Single?
ReactiveX.Completable.UnsubscribeOn(ReactiveX.Scheduler? scheduler) -> ReactiveX.Completable?
ReactiveX.Disposables.CompositeDisposable
ReactiveX.Disposables.CompositeDisposable.Add(ReactiveX.Disposables.IDisposable? disposable) -> bool
ReactiveX.Disposables.CompositeDisposable.AddAll(params ReactiveX.Disposables.IDisposable![]? disposables) -> bool
ReactiveX.Disposables.CompositeDisposable.Clear() -> void
ReactiveX.Disposables.CompositeDisposable.CompositeDisposable() -> void
ReactiveX.Disposables.CompositeDisposable.CompositeDisposable(Java.Lang.IIterable? disposables) -> void
ReactiveX.Disposables.CompositeDisposable.CompositeDisposable(params ReactiveX.Disposables.IDisposable![]? disposables) -> void
ReactiveX.Disposables.CompositeDisposable.Delete(ReactiveX.Disposables.IDisposable? disposable) -> bool
ReactiveX.Disposables.CompositeDisposable.Dispose() -> void
ReactiveX.Disposables.CompositeDisposable.IsDisposed.get -> bool
ReactiveX.Disposables.CompositeDisposable.Remove(ReactiveX.Disposables.IDisposable? disposable) -> bool
ReactiveX.Disposables.CompositeDisposable.Size() -> int
ReactiveX.Disposables.Disposables
ReactiveX.Disposables.IDisposable
ReactiveX.Disposables.IDisposable.Dispose() -> void
ReactiveX.Disposables.IDisposable.IsDisposed.get -> bool
ReactiveX.Disposables.SerialDisposable
ReactiveX.Disposables.SerialDisposable.Dispose() -> void
ReactiveX.Disposables.SerialDisposable.Get() -> ReactiveX.Disposables.IDisposable?
ReactiveX.Disposables.SerialDisposable.IsDisposed.get -> bool
ReactiveX.Disposables.SerialDisposable.Replace(ReactiveX.Disposables.IDisposable? next) -> bool
ReactiveX.Disposables.SerialDisposable.SerialDisposable() -> void
ReactiveX.Disposables.SerialDisposable.SerialDisposable(ReactiveX.Disposables.IDisposable? initialDisposable) -> void
ReactiveX.Disposables.SerialDisposable.Set(ReactiveX.Disposables.IDisposable? next) -> bool
ReactiveX.Exceptions.CompositeException
ReactiveX.Exceptions.CompositeException.CompositeException(Java.Lang.IIterable? errors) -> void
ReactiveX.Exceptions.CompositeException.CompositeException(params Java.Lang.Throwable![]? exceptions) -> void
ReactiveX.Exceptions.CompositeException.Exceptions.get -> System.Collections.Generic.IList<Java.Lang.Throwable!>?
ReactiveX.Exceptions.CompositeException.Size() -> int
ReactiveX.Exceptions.Exceptions
ReactiveX.Exceptions.MissingBackpressureException
ReactiveX.Exceptions.MissingBackpressureException.MissingBackpressureException() -> void
ReactiveX.Exceptions.MissingBackpressureException.MissingBackpressureException(string? message) -> void
ReactiveX.Exceptions.OnErrorNotImplementedException
ReactiveX.Exceptions.OnErrorNotImplementedException.OnErrorNotImplementedException(Java.Lang.Throwable? e) -> void
ReactiveX.Exceptions.OnErrorNotImplementedException.OnErrorNotImplementedException(string? message, Java.Lang.Throwable? e) -> void
ReactiveX.Exceptions.ProtocolViolationException
ReactiveX.Exceptions.ProtocolViolationException.ProtocolViolationException(string? message) -> void
ReactiveX.Exceptions.UndeliverableException
ReactiveX.Exceptions.UndeliverableException.UndeliverableException(Java.Lang.Throwable? cause) -> void
ReactiveX.Flowable
ReactiveX.Flowable.All(ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Single?
ReactiveX.Flowable.AmbWith(ReactiveStreams.IPublisher? other) -> ReactiveX.Flowable?
ReactiveX.Flowable.Any(ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Single?
ReactiveX.Flowable.As(ReactiveX.IFlowableConverter? converter) -> Java.Lang.Object?
ReactiveX.Flowable.BlockingFirst() -> Java.Lang.Object?
ReactiveX.Flowable.BlockingFirst(Java.Lang.Object? defaultItem) -> Java.Lang.Object?
ReactiveX.Flowable.BlockingForEach(ReactiveX.Functions.IConsumer? onNext) -> void
ReactiveX.Flowable.BlockingIterable() -> Java.Lang.IIterable?
ReactiveX.Flowable.BlockingIterable(int bufferSize) -> Java.Lang.IIterable?
ReactiveX.Flowable.BlockingLast() -> Java.Lang.Object?
ReactiveX.Flowable.BlockingLast(Java.Lang.Object? defaultItem) -> Java.Lang.Object?
ReactiveX.Flowable.BlockingLatest() -> Java.Lang.IIterable?
ReactiveX.Flowable.BlockingMostRecent(Java.Lang.Object? initialItem) -> Java.Lang.IIterable?
ReactiveX.Flowable.BlockingNext() -> Java.Lang.IIterable?
ReactiveX.Flowable.BlockingSingle() -> Java.Lang.Object?
ReactiveX.Flowable.BlockingSingle(Java.Lang.Object? defaultItem) -> Java.Lang.Object?
ReactiveX.Flowable.BlockingSubscribe() -> void
ReactiveX.Flowable.BlockingSubscribe(ReactiveStreams.ISubscriber? subscriber) -> void
ReactiveX.Flowable.BlockingSubscribe(ReactiveX.Functions.IConsumer? onNext) -> void
ReactiveX.Flowable.BlockingSubscribe(ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IConsumer? onError) -> void
ReactiveX.Flowable.BlockingSubscribe(ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete) -> void
ReactiveX.Flowable.BlockingSubscribe(ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete, int bufferSize) -> void
ReactiveX.Flowable.BlockingSubscribe(ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IConsumer? onError, int bufferSize) -> void
ReactiveX.Flowable.BlockingSubscribe(ReactiveX.Functions.IConsumer? onNext, int bufferSize) -> void
ReactiveX.Flowable.Buffer(Java.Util.Concurrent.ICallable? boundaryIndicatorSupplier) -> ReactiveX.Flowable?
ReactiveX.Flowable.Buffer(Java.Util.Concurrent.ICallable? boundaryIndicatorSupplier, Java.Util.Concurrent.ICallable? bufferSupplier) -> ReactiveX.Flowable?
ReactiveX.Flowable.Buffer(ReactiveStreams.IPublisher? boundaryIndicator) -> ReactiveX.Flowable?
ReactiveX.Flowable.Buffer(ReactiveStreams.IPublisher? boundaryIndicator, Java.Util.Concurrent.ICallable? bufferSupplier) -> ReactiveX.Flowable?
ReactiveX.Flowable.Buffer(ReactiveStreams.IPublisher? boundaryIndicator, int initialCapacity) -> ReactiveX.Flowable?
ReactiveX.Flowable.Buffer(ReactiveX.Flowable? openingIndicator, ReactiveX.Functions.IFunction? closingIndicator) -> ReactiveX.Flowable?
ReactiveX.Flowable.Buffer(ReactiveX.Flowable? openingIndicator, ReactiveX.Functions.IFunction? closingIndicator, Java.Util.Concurrent.ICallable? bufferSupplier) -> ReactiveX.Flowable?
ReactiveX.Flowable.Buffer(int count) -> ReactiveX.Flowable?
ReactiveX.Flowable.Buffer(int count, Java.Util.Concurrent.ICallable? bufferSupplier) -> ReactiveX.Flowable?
ReactiveX.Flowable.Buffer(int count, int skip) -> ReactiveX.Flowable?
ReactiveX.Flowable.Buffer(int count, int skip, Java.Util.Concurrent.ICallable? bufferSupplier) -> ReactiveX.Flowable?
ReactiveX.Flowable.Buffer(long timespan, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowable.Buffer(long timespan, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.Buffer(long timespan, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, int count) -> ReactiveX.Flowable?
ReactiveX.Flowable.Buffer(long timespan, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, int count, Java.Util.Concurrent.ICallable? bufferSupplier, bool restartTimerOnMaxSize) -> ReactiveX.Flowable?
ReactiveX.Flowable.Buffer(long timespan, Java.Util.Concurrent.TimeUnit? unit, int count) -> ReactiveX.Flowable?
ReactiveX.Flowable.Buffer(long timespan, long timeskip, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowable.Buffer(long timespan, long timeskip, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.Buffer(long timespan, long timeskip, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, Java.Util.Concurrent.ICallable? bufferSupplier) -> ReactiveX.Flowable?
ReactiveX.Flowable.Cache() -> ReactiveX.Flowable?
ReactiveX.Flowable.CacheWithInitialCapacity(int initialCapacity) -> ReactiveX.Flowable?
ReactiveX.Flowable.Cast(Java.Lang.Class? clazz) -> ReactiveX.Flowable?
ReactiveX.Flowable.Collect(Java.Util.Concurrent.ICallable? initialItemSupplier, ReactiveX.Functions.IBiConsumer? collector) -> ReactiveX.Single?
ReactiveX.Flowable.CollectInto(Java.Lang.Object? initialItem, ReactiveX.Functions.IBiConsumer? collector) -> ReactiveX.Single?
ReactiveX.Flowable.Compose(ReactiveX.IFlowableTransformer? composer) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatMap(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatMap(ReactiveX.Functions.IFunction? mapper, int prefetch) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatMapCompletable(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Completable?
ReactiveX.Flowable.ConcatMapCompletable(ReactiveX.Functions.IFunction? mapper, int prefetch) -> ReactiveX.Completable?
ReactiveX.Flowable.ConcatMapCompletableDelayError(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Completable?
ReactiveX.Flowable.ConcatMapCompletableDelayError(ReactiveX.Functions.IFunction? mapper, bool tillTheEnd) -> ReactiveX.Completable?
ReactiveX.Flowable.ConcatMapCompletableDelayError(ReactiveX.Functions.IFunction? mapper, bool tillTheEnd, int prefetch) -> ReactiveX.Completable?
ReactiveX.Flowable.ConcatMapDelayError(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatMapDelayError(ReactiveX.Functions.IFunction? mapper, int prefetch, bool tillTheEnd) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatMapEager(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatMapEager(ReactiveX.Functions.IFunction? mapper, int maxConcurrency, int prefetch) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatMapEagerDelayError(ReactiveX.Functions.IFunction? mapper, bool tillTheEnd) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatMapEagerDelayError(ReactiveX.Functions.IFunction? mapper, int maxConcurrency, int prefetch, bool tillTheEnd) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatMapIterable(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatMapIterable(ReactiveX.Functions.IFunction? mapper, int prefetch) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatMapMaybe(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatMapMaybe(ReactiveX.Functions.IFunction? mapper, int prefetch) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatMapMaybeDelayError(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatMapMaybeDelayError(ReactiveX.Functions.IFunction? mapper, bool tillTheEnd) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatMapMaybeDelayError(ReactiveX.Functions.IFunction? mapper, bool tillTheEnd, int prefetch) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatMapSingle(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatMapSingle(ReactiveX.Functions.IFunction? mapper, int prefetch) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatMapSingleDelayError(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatMapSingleDelayError(ReactiveX.Functions.IFunction? mapper, bool tillTheEnd) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatMapSingleDelayError(ReactiveX.Functions.IFunction? mapper, bool tillTheEnd, int prefetch) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatWith(ReactiveStreams.IPublisher? other) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatWith(ReactiveX.ICompletableSource? other) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatWith(ReactiveX.IMaybeSource? other) -> ReactiveX.Flowable?
ReactiveX.Flowable.ConcatWith(ReactiveX.ISingleSource? other) -> ReactiveX.Flowable?
ReactiveX.Flowable.Contains(Java.Lang.Object? item) -> ReactiveX.Single?
ReactiveX.Flowable.Count() -> ReactiveX.Single?
ReactiveX.Flowable.Debounce(ReactiveX.Functions.IFunction? debounceIndicator) -> ReactiveX.Flowable?
ReactiveX.Flowable.Debounce(long timeout, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowable.Debounce(long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.DefaultIfEmpty(Java.Lang.Object? defaultItem) -> ReactiveX.Flowable?
ReactiveX.Flowable.Delay(ReactiveStreams.IPublisher? subscriptionIndicator, ReactiveX.Functions.IFunction? itemDelayIndicator) -> ReactiveX.Flowable?
ReactiveX.Flowable.Delay(ReactiveX.Functions.IFunction? itemDelayIndicator) -> ReactiveX.Flowable?
ReactiveX.Flowable.Delay(long delay, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowable.Delay(long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.Delay(long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool delayError) -> ReactiveX.Flowable?
ReactiveX.Flowable.Delay(long delay, Java.Util.Concurrent.TimeUnit? unit, bool delayError) -> ReactiveX.Flowable?
ReactiveX.Flowable.DelaySubscription(ReactiveStreams.IPublisher? subscriptionIndicator) -> ReactiveX.Flowable?
ReactiveX.Flowable.DelaySubscription(long delay, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowable.DelaySubscription(long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.Dematerialize() -> ReactiveX.Flowable?
ReactiveX.Flowable.Dematerialize(ReactiveX.Functions.IFunction? selector) -> ReactiveX.Flowable?
ReactiveX.Flowable.Distinct() -> ReactiveX.Flowable?
ReactiveX.Flowable.Distinct(ReactiveX.Functions.IFunction? keySelector) -> ReactiveX.Flowable?
ReactiveX.Flowable.Distinct(ReactiveX.Functions.IFunction? keySelector, Java.Util.Concurrent.ICallable? collectionSupplier) -> ReactiveX.Flowable?
ReactiveX.Flowable.DistinctUntilChanged() -> ReactiveX.Flowable?
ReactiveX.Flowable.DistinctUntilChanged(ReactiveX.Functions.IBiPredicate? comparer) -> ReactiveX.Flowable?
ReactiveX.Flowable.DistinctUntilChanged(ReactiveX.Functions.IFunction? keySelector) -> ReactiveX.Flowable?
ReactiveX.Flowable.DoAfterNext(ReactiveX.Functions.IConsumer? onAfterNext) -> ReactiveX.Flowable?
ReactiveX.Flowable.DoAfterTerminate(ReactiveX.Functions.IAction? onAfterTerminate) -> ReactiveX.Flowable?
ReactiveX.Flowable.DoFinally(ReactiveX.Functions.IAction? onFinally) -> ReactiveX.Flowable?
ReactiveX.Flowable.DoOnCancel(ReactiveX.Functions.IAction? onCancel) -> ReactiveX.Flowable?
ReactiveX.Flowable.DoOnComplete(ReactiveX.Functions.IAction? onComplete) -> ReactiveX.Flowable?
ReactiveX.Flowable.DoOnEach(ReactiveStreams.ISubscriber? subscriber) -> ReactiveX.Flowable?
ReactiveX.Flowable.DoOnEach(ReactiveX.Functions.IConsumer? onNotification) -> ReactiveX.Flowable?
ReactiveX.Flowable.DoOnError(ReactiveX.Functions.IConsumer? onError) -> ReactiveX.Flowable?
ReactiveX.Flowable.DoOnLifecycle(ReactiveX.Functions.IConsumer? onSubscribe, ReactiveX.Functions.ILongConsumer? onRequest, ReactiveX.Functions.IAction? onCancel) -> ReactiveX.Flowable?
ReactiveX.Flowable.DoOnNext(ReactiveX.Functions.IConsumer? onNext) -> ReactiveX.Flowable?
ReactiveX.Flowable.DoOnRequest(ReactiveX.Functions.ILongConsumer? onRequest) -> ReactiveX.Flowable?
ReactiveX.Flowable.DoOnSubscribe(ReactiveX.Functions.IConsumer? onSubscribe) -> ReactiveX.Flowable?
ReactiveX.Flowable.DoOnTerminate(ReactiveX.Functions.IAction? onTerminate) -> ReactiveX.Flowable?
ReactiveX.Flowable.ElementAt(long index) -> ReactiveX.Maybe?
ReactiveX.Flowable.ElementAt(long index, Java.Lang.Object? defaultItem) -> ReactiveX.Single?
ReactiveX.Flowable.ElementAtOrError(long index) -> ReactiveX.Single?
ReactiveX.Flowable.Filter(ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Flowable?
ReactiveX.Flowable.First(Java.Lang.Object? defaultItem) -> ReactiveX.Single?
ReactiveX.Flowable.FirstElement() -> ReactiveX.Maybe?
ReactiveX.Flowable.FirstOrError() -> ReactiveX.Single?
ReactiveX.Flowable.FlatMap(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Flowable.FlatMap(ReactiveX.Functions.IFunction? mapper, ReactiveX.Functions.IBiFunction? combiner) -> ReactiveX.Flowable?
ReactiveX.Flowable.FlatMap(ReactiveX.Functions.IFunction? mapper, ReactiveX.Functions.IBiFunction? combiner, bool delayErrors) -> ReactiveX.Flowable?
ReactiveX.Flowable.FlatMap(ReactiveX.Functions.IFunction? mapper, ReactiveX.Functions.IBiFunction? combiner, bool delayErrors, int maxConcurrency) -> ReactiveX.Flowable?
ReactiveX.Flowable.FlatMap(ReactiveX.Functions.IFunction? mapper, ReactiveX.Functions.IBiFunction? combiner, bool delayErrors, int maxConcurrency, int bufferSize) -> ReactiveX.Flowable?
ReactiveX.Flowable.FlatMap(ReactiveX.Functions.IFunction? mapper, ReactiveX.Functions.IBiFunction? combiner, int maxConcurrency) -> ReactiveX.Flowable?
ReactiveX.Flowable.FlatMap(ReactiveX.Functions.IFunction? mapper, bool delayErrors) -> ReactiveX.Flowable?
ReactiveX.Flowable.FlatMap(ReactiveX.Functions.IFunction? mapper, bool delayErrors, int maxConcurrency) -> ReactiveX.Flowable?
ReactiveX.Flowable.FlatMap(ReactiveX.Functions.IFunction? mapper, bool delayErrors, int maxConcurrency, int bufferSize) -> ReactiveX.Flowable?
ReactiveX.Flowable.FlatMap(ReactiveX.Functions.IFunction? mapper, int maxConcurrency) -> ReactiveX.Flowable?
ReactiveX.Flowable.FlatMap(ReactiveX.Functions.IFunction? onNextMapper, ReactiveX.Functions.IFunction? onErrorMapper, Java.Util.Concurrent.ICallable? onCompleteSupplier) -> ReactiveX.Flowable?
ReactiveX.Flowable.FlatMap(ReactiveX.Functions.IFunction? onNextMapper, ReactiveX.Functions.IFunction? onErrorMapper, Java.Util.Concurrent.ICallable? onCompleteSupplier, int maxConcurrency) -> ReactiveX.Flowable?
ReactiveX.Flowable.FlatMapCompletable(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Completable?
ReactiveX.Flowable.FlatMapCompletable(ReactiveX.Functions.IFunction? mapper, bool delayErrors, int maxConcurrency) -> ReactiveX.Completable?
ReactiveX.Flowable.FlatMapIterable(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Flowable.FlatMapIterable(ReactiveX.Functions.IFunction? mapper, ReactiveX.Functions.IBiFunction? resultSelector) -> ReactiveX.Flowable?
ReactiveX.Flowable.FlatMapIterable(ReactiveX.Functions.IFunction? mapper, ReactiveX.Functions.IBiFunction? resultSelector, int prefetch) -> ReactiveX.Flowable?
ReactiveX.Flowable.FlatMapIterable(ReactiveX.Functions.IFunction? mapper, int bufferSize) -> ReactiveX.Flowable?
ReactiveX.Flowable.FlatMapMaybe(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Flowable.FlatMapMaybe(ReactiveX.Functions.IFunction? mapper, bool delayErrors, int maxConcurrency) -> ReactiveX.Flowable?
ReactiveX.Flowable.FlatMapSingle(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Flowable.FlatMapSingle(ReactiveX.Functions.IFunction? mapper, bool delayErrors, int maxConcurrency) -> ReactiveX.Flowable?
ReactiveX.Flowable.Flowable() -> void
ReactiveX.Flowable.Flowable(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Flowable.ForEach(ReactiveX.Functions.IConsumer? onNext) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Flowable.ForEachWhile(ReactiveX.Functions.IPredicate? onNext) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Flowable.ForEachWhile(ReactiveX.Functions.IPredicate? onNext, ReactiveX.Functions.IConsumer? onError) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Flowable.ForEachWhile(ReactiveX.Functions.IPredicate? onNext, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Flowable.GroupBy(ReactiveX.Functions.IFunction? keySelector) -> ReactiveX.Flowable?
ReactiveX.Flowable.GroupBy(ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector) -> ReactiveX.Flowable?
ReactiveX.Flowable.GroupBy(ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector, bool delayError) -> ReactiveX.Flowable?
ReactiveX.Flowable.GroupBy(ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector, bool delayError, int bufferSize) -> ReactiveX.Flowable?
ReactiveX.Flowable.GroupBy(ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector, bool delayError, int bufferSize, ReactiveX.Functions.IFunction? evictingMapFactory) -> ReactiveX.Flowable?
ReactiveX.Flowable.GroupBy(ReactiveX.Functions.IFunction? keySelector, bool delayError) -> ReactiveX.Flowable?
ReactiveX.Flowable.GroupJoin(ReactiveStreams.IPublisher? other, ReactiveX.Functions.IFunction? leftEnd, ReactiveX.Functions.IFunction? rightEnd, ReactiveX.Functions.IBiFunction? resultSelector) -> ReactiveX.Flowable?
ReactiveX.Flowable.Hide() -> ReactiveX.Flowable?
ReactiveX.Flowable.IgnoreElements() -> ReactiveX.Completable?
ReactiveX.Flowable.IsEmpty() -> ReactiveX.Single?
ReactiveX.Flowable.Join(ReactiveStreams.IPublisher? other, ReactiveX.Functions.IFunction? leftEnd, ReactiveX.Functions.IFunction? rightEnd, ReactiveX.Functions.IBiFunction? resultSelector) -> ReactiveX.Flowable?
ReactiveX.Flowable.Last(Java.Lang.Object? defaultItem) -> ReactiveX.Single?
ReactiveX.Flowable.LastElement() -> ReactiveX.Maybe?
ReactiveX.Flowable.LastOrError() -> ReactiveX.Single?
ReactiveX.Flowable.Lift(ReactiveX.IFlowableOperator? lifter) -> ReactiveX.Flowable?
ReactiveX.Flowable.Limit(long count) -> ReactiveX.Flowable?
ReactiveX.Flowable.Map(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Flowable.Materialize() -> ReactiveX.Flowable?
ReactiveX.Flowable.MergeWith(ReactiveStreams.IPublisher? other) -> ReactiveX.Flowable?
ReactiveX.Flowable.MergeWith(ReactiveX.ICompletableSource? other) -> ReactiveX.Flowable?
ReactiveX.Flowable.MergeWith(ReactiveX.IMaybeSource? other) -> ReactiveX.Flowable?
ReactiveX.Flowable.MergeWith(ReactiveX.ISingleSource? other) -> ReactiveX.Flowable?
ReactiveX.Flowable.ObserveOn(ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.ObserveOn(ReactiveX.Scheduler? scheduler, bool delayError) -> ReactiveX.Flowable?
ReactiveX.Flowable.ObserveOn(ReactiveX.Scheduler? scheduler, bool delayError, int bufferSize) -> ReactiveX.Flowable?
ReactiveX.Flowable.OfType(Java.Lang.Class? clazz) -> ReactiveX.Flowable?
ReactiveX.Flowable.OnBackpressureBuffer() -> ReactiveX.Flowable?
ReactiveX.Flowable.OnBackpressureBuffer(bool delayError) -> ReactiveX.Flowable?
ReactiveX.Flowable.OnBackpressureBuffer(int capacity) -> ReactiveX.Flowable?
ReactiveX.Flowable.OnBackpressureBuffer(int capacity, ReactiveX.Functions.IAction? onOverflow) -> ReactiveX.Flowable?
ReactiveX.Flowable.OnBackpressureBuffer(int capacity, bool delayError) -> ReactiveX.Flowable?
ReactiveX.Flowable.OnBackpressureBuffer(int capacity, bool delayError, bool unbounded) -> ReactiveX.Flowable?
ReactiveX.Flowable.OnBackpressureBuffer(int capacity, bool delayError, bool unbounded, ReactiveX.Functions.IAction? onOverflow) -> ReactiveX.Flowable?
ReactiveX.Flowable.OnBackpressureBuffer(long capacity, ReactiveX.Functions.IAction? onOverflow, ReactiveX.BackpressureOverflowStrategy? overflowStrategy) -> ReactiveX.Flowable?
ReactiveX.Flowable.OnBackpressureDrop() -> ReactiveX.Flowable?
ReactiveX.Flowable.OnBackpressureDrop(ReactiveX.Functions.IConsumer? onDrop) -> ReactiveX.Flowable?
ReactiveX.Flowable.OnBackpressureLatest() -> ReactiveX.Flowable?
ReactiveX.Flowable.OnErrorResumeNext(ReactiveStreams.IPublisher? next) -> ReactiveX.Flowable?
ReactiveX.Flowable.OnErrorResumeNext(ReactiveX.Functions.IFunction? resumeFunction) -> ReactiveX.Flowable?
ReactiveX.Flowable.OnErrorReturn(ReactiveX.Functions.IFunction? valueSupplier) -> ReactiveX.Flowable?
ReactiveX.Flowable.OnErrorReturnItem(Java.Lang.Object? item) -> ReactiveX.Flowable?
ReactiveX.Flowable.OnExceptionResumeNext(ReactiveStreams.IPublisher? next) -> ReactiveX.Flowable?
ReactiveX.Flowable.OnTerminateDetach() -> ReactiveX.Flowable?
ReactiveX.Flowable.Parallel() -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Flowable.Parallel(int parallelism) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Flowable.Parallel(int parallelism, int prefetch) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Flowable.Publish() -> ReactiveX.Flowables.ConnectableFlowable?
ReactiveX.Flowable.Publish(ReactiveX.Functions.IFunction? selector) -> ReactiveX.Flowable?
ReactiveX.Flowable.Publish(ReactiveX.Functions.IFunction? selector, int prefetch) -> ReactiveX.Flowable?
ReactiveX.Flowable.Publish(int bufferSize) -> ReactiveX.Flowables.ConnectableFlowable?
ReactiveX.Flowable.RebatchRequests(int n) -> ReactiveX.Flowable?
ReactiveX.Flowable.Reduce(Java.Lang.Object? seed, ReactiveX.Functions.IBiFunction? reducer) -> ReactiveX.Single?
ReactiveX.Flowable.Reduce(ReactiveX.Functions.IBiFunction? reducer) -> ReactiveX.Maybe?
ReactiveX.Flowable.ReduceWith(Java.Util.Concurrent.ICallable? seedSupplier, ReactiveX.Functions.IBiFunction? reducer) -> ReactiveX.Single?
ReactiveX.Flowable.Repeat() -> ReactiveX.Flowable?
ReactiveX.Flowable.Repeat(long times) -> ReactiveX.Flowable?
ReactiveX.Flowable.RepeatUntil(ReactiveX.Functions.IBooleanSupplier? stop) -> ReactiveX.Flowable?
ReactiveX.Flowable.RepeatWhen(ReactiveX.Functions.IFunction? handler) -> ReactiveX.Flowable?
ReactiveX.Flowable.Replay() -> ReactiveX.Flowables.ConnectableFlowable?
ReactiveX.Flowable.Replay(ReactiveX.Functions.IFunction? selector) -> ReactiveX.Flowable?
ReactiveX.Flowable.Replay(ReactiveX.Functions.IFunction? selector, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.Replay(ReactiveX.Functions.IFunction? selector, int bufferSize) -> ReactiveX.Flowable?
ReactiveX.Flowable.Replay(ReactiveX.Functions.IFunction? selector, int bufferSize, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.Replay(ReactiveX.Functions.IFunction? selector, int bufferSize, long time, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowable.Replay(ReactiveX.Functions.IFunction? selector, int bufferSize, long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.Replay(ReactiveX.Functions.IFunction? selector, long time, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowable.Replay(ReactiveX.Functions.IFunction? selector, long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.Replay(ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowables.ConnectableFlowable?
ReactiveX.Flowable.Replay(int bufferSize) -> ReactiveX.Flowables.ConnectableFlowable?
ReactiveX.Flowable.Replay(int bufferSize, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowables.ConnectableFlowable?
ReactiveX.Flowable.Replay(int bufferSize, long time, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowables.ConnectableFlowable?
ReactiveX.Flowable.Replay(int bufferSize, long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowables.ConnectableFlowable?
ReactiveX.Flowable.Replay(long time, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowables.ConnectableFlowable?
ReactiveX.Flowable.Replay(long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowables.ConnectableFlowable?
ReactiveX.Flowable.Retry() -> ReactiveX.Flowable?
ReactiveX.Flowable.Retry(ReactiveX.Functions.IBiPredicate? predicate) -> ReactiveX.Flowable?
ReactiveX.Flowable.Retry(ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Flowable?
ReactiveX.Flowable.Retry(long count) -> ReactiveX.Flowable?
ReactiveX.Flowable.Retry(long times, ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Flowable?
ReactiveX.Flowable.RetryUntil(ReactiveX.Functions.IBooleanSupplier? stop) -> ReactiveX.Flowable?
ReactiveX.Flowable.RetryWhen(ReactiveX.Functions.IFunction? handler) -> ReactiveX.Flowable?
ReactiveX.Flowable.SafeSubscribe(ReactiveStreams.ISubscriber? s) -> void
ReactiveX.Flowable.Sample(ReactiveStreams.IPublisher? sampler) -> ReactiveX.Flowable?
ReactiveX.Flowable.Sample(ReactiveStreams.IPublisher? sampler, bool emitLast) -> ReactiveX.Flowable?
ReactiveX.Flowable.Sample(long period, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowable.Sample(long period, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.Sample(long period, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool emitLast) -> ReactiveX.Flowable?
ReactiveX.Flowable.Sample(long period, Java.Util.Concurrent.TimeUnit? unit, bool emitLast) -> ReactiveX.Flowable?
ReactiveX.Flowable.Scan(Java.Lang.Object? initialValue, ReactiveX.Functions.IBiFunction? accumulator) -> ReactiveX.Flowable?
ReactiveX.Flowable.Scan(ReactiveX.Functions.IBiFunction? accumulator) -> ReactiveX.Flowable?
ReactiveX.Flowable.ScanWith(Java.Util.Concurrent.ICallable? seedSupplier, ReactiveX.Functions.IBiFunction? accumulator) -> ReactiveX.Flowable?
ReactiveX.Flowable.Serialize() -> ReactiveX.Flowable?
ReactiveX.Flowable.Share() -> ReactiveX.Flowable?
ReactiveX.Flowable.Single(Java.Lang.Object? defaultItem) -> ReactiveX.Single?
ReactiveX.Flowable.SingleElement() -> ReactiveX.Maybe?
ReactiveX.Flowable.SingleOrError() -> ReactiveX.Single?
ReactiveX.Flowable.Skip(long count) -> ReactiveX.Flowable?
ReactiveX.Flowable.Skip(long time, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowable.Skip(long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.SkipLast(int count) -> ReactiveX.Flowable?
ReactiveX.Flowable.SkipLast(long time, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowable.SkipLast(long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.SkipLast(long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool delayError) -> ReactiveX.Flowable?
ReactiveX.Flowable.SkipLast(long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool delayError, int bufferSize) -> ReactiveX.Flowable?
ReactiveX.Flowable.SkipLast(long time, Java.Util.Concurrent.TimeUnit? unit, bool delayError) -> ReactiveX.Flowable?
ReactiveX.Flowable.SkipUntil(ReactiveStreams.IPublisher? other) -> ReactiveX.Flowable?
ReactiveX.Flowable.SkipWhile(ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Flowable?
ReactiveX.Flowable.Sorted() -> ReactiveX.Flowable?
ReactiveX.Flowable.Sorted(Java.Util.IComparator? sortFunction) -> ReactiveX.Flowable?
ReactiveX.Flowable.StartWith(Java.Lang.IIterable? items) -> ReactiveX.Flowable?
ReactiveX.Flowable.StartWith(Java.Lang.Object? value) -> ReactiveX.Flowable?
ReactiveX.Flowable.StartWith(ReactiveStreams.IPublisher? other) -> ReactiveX.Flowable?
ReactiveX.Flowable.StartWithArray(params Java.Lang.Object![]? items) -> ReactiveX.Flowable?
ReactiveX.Flowable.Subscribe() -> ReactiveX.Disposables.IDisposable?
ReactiveX.Flowable.Subscribe(ReactiveStreams.ISubscriber? s) -> void
ReactiveX.Flowable.Subscribe(ReactiveX.Functions.IConsumer? onNext) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Flowable.Subscribe(ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IConsumer? onError) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Flowable.Subscribe(ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Flowable.Subscribe(ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete, ReactiveX.Functions.IConsumer? onSubscribe) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Flowable.Subscribe(ReactiveX.IFlowableSubscriber? s) -> void
ReactiveX.Flowable.SubscribeOn(ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.SubscribeOn(ReactiveX.Scheduler? scheduler, bool requestOn) -> ReactiveX.Flowable?
ReactiveX.Flowable.SubscribeWith(Java.Lang.Object? subscriber) -> Java.Lang.Object?
ReactiveX.Flowable.SwitchIfEmpty(ReactiveStreams.IPublisher? other) -> ReactiveX.Flowable?
ReactiveX.Flowable.SwitchMap(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Flowable.SwitchMap(ReactiveX.Functions.IFunction? mapper, int bufferSize) -> ReactiveX.Flowable?
ReactiveX.Flowable.SwitchMapCompletable(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Completable?
ReactiveX.Flowable.SwitchMapCompletableDelayError(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Completable?
ReactiveX.Flowable.SwitchMapDelayError(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Flowable.SwitchMapDelayError(ReactiveX.Functions.IFunction? mapper, int bufferSize) -> ReactiveX.Flowable?
ReactiveX.Flowable.SwitchMapMaybe(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Flowable.SwitchMapMaybeDelayError(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Flowable.SwitchMapSingle(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Flowable.SwitchMapSingleDelayError(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Flowable.Take(long count) -> ReactiveX.Flowable?
ReactiveX.Flowable.Take(long time, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowable.Take(long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.TakeLast(int count) -> ReactiveX.Flowable?
ReactiveX.Flowable.TakeLast(long count, long time, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowable.TakeLast(long count, long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.TakeLast(long count, long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool delayError, int bufferSize) -> ReactiveX.Flowable?
ReactiveX.Flowable.TakeLast(long time, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowable.TakeLast(long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.TakeLast(long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool delayError) -> ReactiveX.Flowable?
ReactiveX.Flowable.TakeLast(long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool delayError, int bufferSize) -> ReactiveX.Flowable?
ReactiveX.Flowable.TakeLast(long time, Java.Util.Concurrent.TimeUnit? unit, bool delayError) -> ReactiveX.Flowable?
ReactiveX.Flowable.TakeUntil(ReactiveStreams.IPublisher? other) -> ReactiveX.Flowable?
ReactiveX.Flowable.TakeUntil(ReactiveX.Functions.IPredicate? stopPredicate) -> ReactiveX.Flowable?
ReactiveX.Flowable.TakeWhile(ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Flowable?
ReactiveX.Flowable.Test() -> ReactiveX.Subscribers.TestSubscriber?
ReactiveX.Flowable.Test(long initialRequest) -> ReactiveX.Subscribers.TestSubscriber?
ReactiveX.Flowable.Test(long initialRequest, bool cancel) -> ReactiveX.Subscribers.TestSubscriber?
ReactiveX.Flowable.ThrottleFirst(long skipDuration, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.ThrottleFirst(long windowDuration, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowable.ThrottleLast(long intervalDuration, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowable.ThrottleLast(long intervalDuration, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.ThrottleLatest(long timeout, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowable.ThrottleLatest(long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.ThrottleLatest(long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool emitLast) -> ReactiveX.Flowable?
ReactiveX.Flowable.ThrottleLatest(long timeout, Java.Util.Concurrent.TimeUnit? unit, bool emitLast) -> ReactiveX.Flowable?
ReactiveX.Flowable.ThrottleWithTimeout(long timeout, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowable.ThrottleWithTimeout(long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.TimeInterval() -> ReactiveX.Flowable?
ReactiveX.Flowable.TimeInterval(Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowable.TimeInterval(Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.TimeInterval(ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.Timeout(ReactiveStreams.IPublisher? firstTimeoutIndicator, ReactiveX.Functions.IFunction? itemTimeoutIndicator) -> ReactiveX.Flowable?
ReactiveX.Flowable.Timeout(ReactiveStreams.IPublisher? firstTimeoutIndicator, ReactiveX.Functions.IFunction? itemTimeoutIndicator, ReactiveStreams.IPublisher? other) -> ReactiveX.Flowable?
ReactiveX.Flowable.Timeout(ReactiveX.Functions.IFunction? itemTimeoutIndicator) -> ReactiveX.Flowable?
ReactiveX.Flowable.Timeout(ReactiveX.Functions.IFunction? itemTimeoutIndicator, ReactiveX.Flowable? other) -> ReactiveX.Flowable?
ReactiveX.Flowable.Timeout(long timeout, Java.Util.Concurrent.TimeUnit? timeUnit) -> ReactiveX.Flowable?
ReactiveX.Flowable.Timeout(long timeout, Java.Util.Concurrent.TimeUnit? timeUnit, ReactiveStreams.IPublisher? other) -> ReactiveX.Flowable?
ReactiveX.Flowable.Timeout(long timeout, Java.Util.Concurrent.TimeUnit? timeUnit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.Timeout(long timeout, Java.Util.Concurrent.TimeUnit? timeUnit, ReactiveX.Scheduler? scheduler, ReactiveStreams.IPublisher? other) -> ReactiveX.Flowable?
ReactiveX.Flowable.Timestamp() -> ReactiveX.Flowable?
ReactiveX.Flowable.Timestamp(Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowable.Timestamp(Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.Timestamp(ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.To(ReactiveX.Functions.IFunction? converter) -> Java.Lang.Object?
ReactiveX.Flowable.ToFuture() -> Java.Util.Concurrent.IFuture?
ReactiveX.Flowable.ToList() -> ReactiveX.Single?
ReactiveX.Flowable.ToList(Java.Util.Concurrent.ICallable? collectionSupplier) -> ReactiveX.Single?
ReactiveX.Flowable.ToList(int capacityHint) -> ReactiveX.Single?
ReactiveX.Flowable.ToMap(ReactiveX.Functions.IFunction? keySelector) -> ReactiveX.Single?
ReactiveX.Flowable.ToMap(ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector) -> ReactiveX.Single?
ReactiveX.Flowable.ToMap(ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector, Java.Util.Concurrent.ICallable? mapSupplier) -> ReactiveX.Single?
ReactiveX.Flowable.ToMultimap(ReactiveX.Functions.IFunction? keySelector) -> ReactiveX.Single?
ReactiveX.Flowable.ToMultimap(ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector) -> ReactiveX.Single?
ReactiveX.Flowable.ToMultimap(ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector, Java.Util.Concurrent.ICallable? mapSupplier) -> ReactiveX.Single?
ReactiveX.Flowable.ToMultimap(ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector, Java.Util.Concurrent.ICallable? mapSupplier, ReactiveX.Functions.IFunction? collectionFactory) -> ReactiveX.Single?
ReactiveX.Flowable.ToObservable() -> ReactiveX.Observable?
ReactiveX.Flowable.ToSortedList() -> ReactiveX.Single?
ReactiveX.Flowable.ToSortedList(Java.Util.IComparator? comparator) -> ReactiveX.Single?
ReactiveX.Flowable.ToSortedList(Java.Util.IComparator? comparator, int capacityHint) -> ReactiveX.Single?
ReactiveX.Flowable.ToSortedList(int capacityHint) -> ReactiveX.Single?
ReactiveX.Flowable.UnsubscribeOn(ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.Window(Java.Util.Concurrent.ICallable? boundaryIndicatorSupplier) -> ReactiveX.Flowable?
ReactiveX.Flowable.Window(Java.Util.Concurrent.ICallable? boundaryIndicatorSupplier, int bufferSize) -> ReactiveX.Flowable?
ReactiveX.Flowable.Window(ReactiveStreams.IPublisher? boundaryIndicator) -> ReactiveX.Flowable?
ReactiveX.Flowable.Window(ReactiveStreams.IPublisher? boundaryIndicator, int bufferSize) -> ReactiveX.Flowable?
ReactiveX.Flowable.Window(ReactiveStreams.IPublisher? openingIndicator, ReactiveX.Functions.IFunction? closingIndicator) -> ReactiveX.Flowable?
ReactiveX.Flowable.Window(ReactiveStreams.IPublisher? openingIndicator, ReactiveX.Functions.IFunction? closingIndicator, int bufferSize) -> ReactiveX.Flowable?
ReactiveX.Flowable.Window(long count) -> ReactiveX.Flowable?
ReactiveX.Flowable.Window(long count, long skip) -> ReactiveX.Flowable?
ReactiveX.Flowable.Window(long count, long skip, int bufferSize) -> ReactiveX.Flowable?
ReactiveX.Flowable.Window(long timespan, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowable.Window(long timespan, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.Window(long timespan, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, long count) -> ReactiveX.Flowable?
ReactiveX.Flowable.Window(long timespan, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, long count, bool restart) -> ReactiveX.Flowable?
ReactiveX.Flowable.Window(long timespan, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, long count, bool restart, int bufferSize) -> ReactiveX.Flowable?
ReactiveX.Flowable.Window(long timespan, Java.Util.Concurrent.TimeUnit? unit, long count) -> ReactiveX.Flowable?
ReactiveX.Flowable.Window(long timespan, Java.Util.Concurrent.TimeUnit? unit, long count, bool restart) -> ReactiveX.Flowable?
ReactiveX.Flowable.Window(long timespan, long timeskip, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowable.Window(long timespan, long timeskip, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowable.Window(long timespan, long timeskip, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, int bufferSize) -> ReactiveX.Flowable?
ReactiveX.Flowable.WithLatestFrom(Java.Lang.IIterable? others, ReactiveX.Functions.IFunction? combiner) -> ReactiveX.Flowable?
ReactiveX.Flowable.WithLatestFrom(ReactiveStreams.IPublisher![]? others, ReactiveX.Functions.IFunction? combiner) -> ReactiveX.Flowable?
ReactiveX.Flowable.WithLatestFrom(ReactiveStreams.IPublisher? other, ReactiveX.Functions.IBiFunction? combiner) -> ReactiveX.Flowable?
ReactiveX.Flowable.WithLatestFrom(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3, ReactiveStreams.IPublisher? source4, ReactiveX.Functions.IFunction5? combiner) -> ReactiveX.Flowable?
ReactiveX.Flowable.WithLatestFrom(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3, ReactiveX.Functions.IFunction4? combiner) -> ReactiveX.Flowable?
ReactiveX.Flowable.WithLatestFrom(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveX.Functions.IFunction3? combiner) -> ReactiveX.Flowable?
ReactiveX.Flowable.ZipWith(Java.Lang.IIterable? other, ReactiveX.Functions.IBiFunction? zipper) -> ReactiveX.Flowable?
ReactiveX.Flowable.ZipWith(ReactiveStreams.IPublisher? other, ReactiveX.Functions.IBiFunction? zipper) -> ReactiveX.Flowable?
ReactiveX.Flowable.ZipWith(ReactiveStreams.IPublisher? other, ReactiveX.Functions.IBiFunction? zipper, bool delayError) -> ReactiveX.Flowable?
ReactiveX.Flowable.ZipWith(ReactiveStreams.IPublisher? other, ReactiveX.Functions.IBiFunction? zipper, bool delayError, int bufferSize) -> ReactiveX.Flowable?
ReactiveX.Flowables.ConnectableFlowable
ReactiveX.Flowables.ConnectableFlowable.Connect() -> ReactiveX.Disposables.IDisposable?
ReactiveX.Flowables.ConnectableFlowable.ConnectableFlowable() -> void
ReactiveX.Flowables.ConnectableFlowable.ConnectableFlowable(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Flowables.ConnectableFlowable.RefCount(int subscriberCount) -> ReactiveX.Flowable?
ReactiveX.Flowables.ConnectableFlowable.RefCount(int subscriberCount, long timeout, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowables.ConnectableFlowable.RefCount(int subscriberCount, long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowables.ConnectableFlowable.RefCount(long timeout, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
ReactiveX.Flowables.ConnectableFlowable.RefCount(long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
ReactiveX.Flowables.GroupedFlowable
ReactiveX.Flowables.GroupedFlowable.GroupedFlowable(Java.Lang.Object? key) -> void
ReactiveX.Flowables.GroupedFlowable.GroupedFlowable(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Functions.IAction
ReactiveX.Functions.IAction.Run() -> void
ReactiveX.Functions.IBiConsumer
ReactiveX.Functions.IBiConsumer.Accept(Java.Lang.Object? t1, Java.Lang.Object? t2) -> void
ReactiveX.Functions.IBiFunction
ReactiveX.Functions.IBiFunction.Apply(Java.Lang.Object? t1, Java.Lang.Object? t2) -> Java.Lang.Object?
ReactiveX.Functions.IBiPredicate
ReactiveX.Functions.IBiPredicate.Test(Java.Lang.Object? t1, Java.Lang.Object? t2) -> bool
ReactiveX.Functions.IBooleanSupplier
ReactiveX.Functions.IBooleanSupplier.AsBoolean.get -> bool
ReactiveX.Functions.ICancellable
ReactiveX.Functions.ICancellable.Cancel() -> void
ReactiveX.Functions.IConsumer
ReactiveX.Functions.IConsumer.Accept(Java.Lang.Object? t) -> void
ReactiveX.Functions.IFunction
ReactiveX.Functions.IFunction.Apply(Java.Lang.Object? t) -> Java.Lang.Object?
ReactiveX.Functions.IFunction3
ReactiveX.Functions.IFunction3.Apply(Java.Lang.Object? t1, Java.Lang.Object? t2, Java.Lang.Object? t3) -> Java.Lang.Object?
ReactiveX.Functions.IFunction4
ReactiveX.Functions.IFunction4.Apply(Java.Lang.Object? t1, Java.Lang.Object? t2, Java.Lang.Object? t3, Java.Lang.Object? t4) -> Java.Lang.Object?
ReactiveX.Functions.IFunction5
ReactiveX.Functions.IFunction5.Apply(Java.Lang.Object? t1, Java.Lang.Object? t2, Java.Lang.Object? t3, Java.Lang.Object? t4, Java.Lang.Object? t5) -> Java.Lang.Object?
ReactiveX.Functions.IFunction6
ReactiveX.Functions.IFunction6.Apply(Java.Lang.Object? t1, Java.Lang.Object? t2, Java.Lang.Object? t3, Java.Lang.Object? t4, Java.Lang.Object? t5, Java.Lang.Object? t6) -> Java.Lang.Object?
ReactiveX.Functions.IFunction7
ReactiveX.Functions.IFunction7.Apply(Java.Lang.Object? t1, Java.Lang.Object? t2, Java.Lang.Object? t3, Java.Lang.Object? t4, Java.Lang.Object? t5, Java.Lang.Object? t6, Java.Lang.Object? t7) -> Java.Lang.Object?
ReactiveX.Functions.IFunction8
ReactiveX.Functions.IFunction8.Apply(Java.Lang.Object? t1, Java.Lang.Object? t2, Java.Lang.Object? t3, Java.Lang.Object? t4, Java.Lang.Object? t5, Java.Lang.Object? t6, Java.Lang.Object? t7, Java.Lang.Object? t8) -> Java.Lang.Object?
ReactiveX.Functions.IFunction9
ReactiveX.Functions.IFunction9.Apply(Java.Lang.Object? t1, Java.Lang.Object? t2, Java.Lang.Object? t3, Java.Lang.Object? t4, Java.Lang.Object? t5, Java.Lang.Object? t6, Java.Lang.Object? t7, Java.Lang.Object? t8, Java.Lang.Object? t9) -> Java.Lang.Object?
ReactiveX.Functions.IIntFunction
ReactiveX.Functions.IIntFunction.Apply(int i) -> Java.Lang.Object?
ReactiveX.Functions.ILongConsumer
ReactiveX.Functions.ILongConsumer.Accept(long t) -> void
ReactiveX.Functions.IPredicate
ReactiveX.Functions.IPredicate.Test(Java.Lang.Object? t) -> bool
ReactiveX.ICompletableConverter
ReactiveX.ICompletableConverter.Apply(ReactiveX.Completable? upstream) -> Java.Lang.Object?
ReactiveX.ICompletableEmitter
ReactiveX.ICompletableEmitter.IsDisposed.get -> bool
ReactiveX.ICompletableEmitter.OnComplete() -> void
ReactiveX.ICompletableEmitter.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.ICompletableEmitter.SetCancellable(ReactiveX.Functions.ICancellable? c) -> void
ReactiveX.ICompletableEmitter.SetDisposable(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.ICompletableEmitter.TryOnError(Java.Lang.Throwable? t) -> bool
ReactiveX.ICompletableObserver
ReactiveX.ICompletableObserver.OnComplete() -> void
ReactiveX.ICompletableObserver.OnError(Java.Lang.Throwable? e) -> void
ReactiveX.ICompletableObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.ICompletableOnSubscribe
ReactiveX.ICompletableOnSubscribe.Subscribe(ReactiveX.ICompletableEmitter? emitter) -> void
ReactiveX.ICompletableOperator
ReactiveX.ICompletableOperator.Apply(ReactiveX.ICompletableObserver? observer) -> ReactiveX.ICompletableObserver?
ReactiveX.ICompletableSource
ReactiveX.ICompletableSource.Subscribe(ReactiveX.ICompletableObserver? co) -> void
ReactiveX.ICompletableTransformer
ReactiveX.ICompletableTransformer.Apply(ReactiveX.Completable? upstream) -> ReactiveX.ICompletableSource?
ReactiveX.IEmitter
ReactiveX.IEmitter.OnComplete() -> void
ReactiveX.IEmitter.OnError(Java.Lang.Throwable? error) -> void
ReactiveX.IEmitter.OnNext(Java.Lang.Object? value) -> void
ReactiveX.IFlowableConverter
ReactiveX.IFlowableConverter.Apply(ReactiveX.Flowable? upstream) -> Java.Lang.Object?
ReactiveX.IFlowableEmitter
ReactiveX.IFlowableEmitter.IsCancelled.get -> bool
ReactiveX.IFlowableEmitter.Requested() -> long
ReactiveX.IFlowableEmitter.Serialize() -> ReactiveX.IFlowableEmitter?
ReactiveX.IFlowableEmitter.SetCancellable(ReactiveX.Functions.ICancellable? c) -> void
ReactiveX.IFlowableEmitter.SetDisposable(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.IFlowableEmitter.TryOnError(Java.Lang.Throwable? t) -> bool
ReactiveX.IFlowableOnSubscribe
ReactiveX.IFlowableOnSubscribe.Subscribe(ReactiveX.IFlowableEmitter? emitter) -> void
ReactiveX.IFlowableOperator
ReactiveX.IFlowableOperator.Apply(ReactiveStreams.ISubscriber? p0) -> ReactiveStreams.ISubscriber?
ReactiveX.IFlowableSubscriber
ReactiveX.IFlowableSubscriber.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
ReactiveX.IFlowableTransformer
ReactiveX.IFlowableTransformer.Apply(ReactiveX.Flowable? upstream) -> ReactiveStreams.IPublisher?
ReactiveX.IMaybeConverter
ReactiveX.IMaybeConverter.Apply(ReactiveX.Maybe? upstream) -> Java.Lang.Object?
ReactiveX.IMaybeEmitter
ReactiveX.IMaybeEmitter.IsDisposed.get -> bool
ReactiveX.IMaybeEmitter.OnComplete() -> void
ReactiveX.IMaybeEmitter.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.IMaybeEmitter.OnSuccess(Java.Lang.Object? t) -> void
ReactiveX.IMaybeEmitter.SetCancellable(ReactiveX.Functions.ICancellable? c) -> void
ReactiveX.IMaybeEmitter.SetDisposable(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.IMaybeEmitter.TryOnError(Java.Lang.Throwable? t) -> bool
ReactiveX.IMaybeObserver
ReactiveX.IMaybeObserver.OnComplete() -> void
ReactiveX.IMaybeObserver.OnError(Java.Lang.Throwable? e) -> void
ReactiveX.IMaybeObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.IMaybeObserver.OnSuccess(Java.Lang.Object? t) -> void
ReactiveX.IMaybeOnSubscribe
ReactiveX.IMaybeOnSubscribe.Subscribe(ReactiveX.IMaybeEmitter? emitter) -> void
ReactiveX.IMaybeOperator
ReactiveX.IMaybeOperator.Apply(ReactiveX.IMaybeObserver? observer) -> ReactiveX.IMaybeObserver?
ReactiveX.IMaybeSource
ReactiveX.IMaybeSource.Subscribe(ReactiveX.IMaybeObserver? observer) -> void
ReactiveX.IMaybeTransformer
ReactiveX.IMaybeTransformer.Apply(ReactiveX.Maybe? upstream) -> ReactiveX.IMaybeSource?
ReactiveX.IObservableConverter
ReactiveX.IObservableConverter.Apply(ReactiveX.Observable? upstream) -> Java.Lang.Object?
ReactiveX.IObservableEmitter
ReactiveX.IObservableEmitter.IsDisposed.get -> bool
ReactiveX.IObservableEmitter.Serialize() -> ReactiveX.IObservableEmitter?
ReactiveX.IObservableEmitter.SetCancellable(ReactiveX.Functions.ICancellable? c) -> void
ReactiveX.IObservableEmitter.SetDisposable(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.IObservableEmitter.TryOnError(Java.Lang.Throwable? t) -> bool
ReactiveX.IObservableOnSubscribe
ReactiveX.IObservableOnSubscribe.Subscribe(ReactiveX.IObservableEmitter? emitter) -> void
ReactiveX.IObservableOperator
ReactiveX.IObservableOperator.Apply(ReactiveX.IObserver? observer) -> ReactiveX.IObserver?
ReactiveX.IObservableSource
ReactiveX.IObservableSource.Subscribe(ReactiveX.IObserver? observer) -> void
ReactiveX.IObservableTransformer
ReactiveX.IObservableTransformer.Apply(ReactiveX.Observable? upstream) -> ReactiveX.IObservableSource?
ReactiveX.IObserver
ReactiveX.IObserver.OnComplete() -> void
ReactiveX.IObserver.OnError(Java.Lang.Throwable? e) -> void
ReactiveX.IObserver.OnNext(Java.Lang.Object? t) -> void
ReactiveX.IObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.ISingleConverter
ReactiveX.ISingleConverter.Apply(ReactiveX.Single? upstream) -> Java.Lang.Object?
ReactiveX.ISingleEmitter
ReactiveX.ISingleEmitter.IsDisposed.get -> bool
ReactiveX.ISingleEmitter.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.ISingleEmitter.OnSuccess(Java.Lang.Object? t) -> void
ReactiveX.ISingleEmitter.SetCancellable(ReactiveX.Functions.ICancellable? c) -> void
ReactiveX.ISingleEmitter.SetDisposable(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.ISingleEmitter.TryOnError(Java.Lang.Throwable? t) -> bool
ReactiveX.ISingleObserver
ReactiveX.ISingleObserver.OnError(Java.Lang.Throwable? e) -> void
ReactiveX.ISingleObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.ISingleObserver.OnSuccess(Java.Lang.Object? t) -> void
ReactiveX.ISingleOnSubscribe
ReactiveX.ISingleOnSubscribe.Subscribe(ReactiveX.ISingleEmitter? emitter) -> void
ReactiveX.ISingleOperator
ReactiveX.ISingleOperator.Apply(ReactiveX.ISingleObserver? observer) -> ReactiveX.ISingleObserver?
ReactiveX.ISingleSource
ReactiveX.ISingleSource.Subscribe(ReactiveX.ISingleObserver? observer) -> void
ReactiveX.ISingleTransformer
ReactiveX.ISingleTransformer.Apply(ReactiveX.Single? upstream) -> ReactiveX.ISingleSource?
ReactiveX.Internal.Disposables.ArrayCompositeDisposable
ReactiveX.Internal.Disposables.ArrayCompositeDisposable.ArrayCompositeDisposable(int capacity) -> void
ReactiveX.Internal.Disposables.ArrayCompositeDisposable.Dispose() -> void
ReactiveX.Internal.Disposables.ArrayCompositeDisposable.IsDisposed.get -> bool
ReactiveX.Internal.Disposables.ArrayCompositeDisposable.ReplaceResource(int index, ReactiveX.Disposables.IDisposable? resource) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Internal.Disposables.ArrayCompositeDisposable.SetResource(int index, ReactiveX.Disposables.IDisposable? resource) -> bool
ReactiveX.Internal.Disposables.CancellableDisposable
ReactiveX.Internal.Disposables.CancellableDisposable.CancellableDisposable(ReactiveX.Functions.ICancellable? cancellable) -> void
ReactiveX.Internal.Disposables.CancellableDisposable.Dispose() -> void
ReactiveX.Internal.Disposables.CancellableDisposable.IsDisposed.get -> bool
ReactiveX.Internal.Disposables.DisposableHelper
ReactiveX.Internal.Disposables.DisposableHelper.Dispose() -> void
ReactiveX.Internal.Disposables.DisposableHelper.IsDisposed.get -> bool
ReactiveX.Internal.Disposables.EmptyDisposable
ReactiveX.Internal.Disposables.EmptyDisposable.Clear() -> void
ReactiveX.Internal.Disposables.EmptyDisposable.Dispose() -> void
ReactiveX.Internal.Disposables.EmptyDisposable.IsDisposed.get -> bool
ReactiveX.Internal.Disposables.EmptyDisposable.IsEmpty.get -> bool
ReactiveX.Internal.Disposables.EmptyDisposable.Offer(Java.Lang.Object? v1, Java.Lang.Object? v2) -> bool
ReactiveX.Internal.Disposables.EmptyDisposable.Offer(Java.Lang.Object? value) -> bool
ReactiveX.Internal.Disposables.EmptyDisposable.Poll() -> Java.Lang.Object?
ReactiveX.Internal.Disposables.EmptyDisposable.RequestFusion(int mode) -> int
ReactiveX.Internal.Disposables.IDisposableContainer
ReactiveX.Internal.Disposables.IDisposableContainer.Add(ReactiveX.Disposables.IDisposable? d) -> bool
ReactiveX.Internal.Disposables.IDisposableContainer.Delete(ReactiveX.Disposables.IDisposable? d) -> bool
ReactiveX.Internal.Disposables.IDisposableContainer.Remove(ReactiveX.Disposables.IDisposable? d) -> bool
ReactiveX.Internal.Disposables.IResettableConnectable
ReactiveX.Internal.Disposables.IResettableConnectable.ResetIf(ReactiveX.Disposables.IDisposable? connection) -> void
ReactiveX.Internal.Disposables.ListCompositeDisposable
ReactiveX.Internal.Disposables.ListCompositeDisposable.Add(ReactiveX.Disposables.IDisposable? d) -> bool
ReactiveX.Internal.Disposables.ListCompositeDisposable.AddAll(params ReactiveX.Disposables.IDisposable![]? ds) -> bool
ReactiveX.Internal.Disposables.ListCompositeDisposable.Clear() -> void
ReactiveX.Internal.Disposables.ListCompositeDisposable.Delete(ReactiveX.Disposables.IDisposable? d) -> bool
ReactiveX.Internal.Disposables.ListCompositeDisposable.Dispose() -> void
ReactiveX.Internal.Disposables.ListCompositeDisposable.IsDisposed.get -> bool
ReactiveX.Internal.Disposables.ListCompositeDisposable.ListCompositeDisposable() -> void
ReactiveX.Internal.Disposables.ListCompositeDisposable.ListCompositeDisposable(Java.Lang.IIterable? resources) -> void
ReactiveX.Internal.Disposables.ListCompositeDisposable.ListCompositeDisposable(params ReactiveX.Disposables.IDisposable![]? resources) -> void
ReactiveX.Internal.Disposables.ListCompositeDisposable.Remove(ReactiveX.Disposables.IDisposable? d) -> bool
ReactiveX.Internal.Disposables.SequentialDisposable
ReactiveX.Internal.Disposables.SequentialDisposable.Dispose() -> void
ReactiveX.Internal.Disposables.SequentialDisposable.IsDisposed.get -> bool
ReactiveX.Internal.Disposables.SequentialDisposable.Replace(ReactiveX.Disposables.IDisposable? next) -> bool
ReactiveX.Internal.Disposables.SequentialDisposable.SequentialDisposable() -> void
ReactiveX.Internal.Disposables.SequentialDisposable.SequentialDisposable(ReactiveX.Disposables.IDisposable? initial) -> void
ReactiveX.Internal.Disposables.SequentialDisposable.Update(ReactiveX.Disposables.IDisposable? next) -> bool
ReactiveX.Internal.Functions.Functions
ReactiveX.Internal.Functions.Functions.BoundedConsumer
ReactiveX.Internal.Functions.Functions.BoundedConsumer.BoundedConsumer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Functions.ObjectHelper
ReactiveX.Internal.Fuseable.IConditionalSubscriber
ReactiveX.Internal.Fuseable.IConditionalSubscriber.TryOnNext(Java.Lang.Object? t) -> bool
ReactiveX.Internal.Fuseable.IFuseToFlowable
ReactiveX.Internal.Fuseable.IFuseToFlowable.FuseToFlowable() -> ReactiveX.Flowable?
ReactiveX.Internal.Fuseable.IFuseToMaybe
ReactiveX.Internal.Fuseable.IFuseToMaybe.FuseToMaybe() -> ReactiveX.Maybe?
ReactiveX.Internal.Fuseable.IFuseToObservable
ReactiveX.Internal.Fuseable.IFuseToObservable.FuseToObservable() -> ReactiveX.Observable?
ReactiveX.Internal.Fuseable.IHasUpstreamCompletableSource
ReactiveX.Internal.Fuseable.IHasUpstreamCompletableSource.Source() -> ReactiveX.ICompletableSource?
ReactiveX.Internal.Fuseable.IHasUpstreamMaybeSource
ReactiveX.Internal.Fuseable.IHasUpstreamMaybeSource.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Fuseable.IHasUpstreamObservableSource
ReactiveX.Internal.Fuseable.IHasUpstreamObservableSource.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Fuseable.IHasUpstreamPublisher
ReactiveX.Internal.Fuseable.IHasUpstreamPublisher.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Fuseable.IHasUpstreamSingleSource
ReactiveX.Internal.Fuseable.IHasUpstreamSingleSource.Source() -> ReactiveX.ISingleSource?
ReactiveX.Internal.Fuseable.IQueueDisposable
ReactiveX.Internal.Fuseable.IQueueFuseable
ReactiveX.Internal.Fuseable.IQueueFuseable.RequestFusion(int mode) -> int
ReactiveX.Internal.Fuseable.IQueueSubscription
ReactiveX.Internal.Fuseable.IScalarCallable
ReactiveX.Internal.Fuseable.IScalarCallable.Call() -> Java.Lang.Object?
ReactiveX.Internal.Fuseable.ISimplePlainQueue
ReactiveX.Internal.Fuseable.ISimplePlainQueue.Poll() -> Java.Lang.Object?
ReactiveX.Internal.Fuseable.ISimpleQueue
ReactiveX.Internal.Fuseable.ISimpleQueue.Clear() -> void
ReactiveX.Internal.Fuseable.ISimpleQueue.IsEmpty.get -> bool
ReactiveX.Internal.Fuseable.ISimpleQueue.Offer(Java.Lang.Object? v1, Java.Lang.Object? v2) -> bool
ReactiveX.Internal.Fuseable.ISimpleQueue.Offer(Java.Lang.Object? value) -> bool
ReactiveX.Internal.Fuseable.ISimpleQueue.Poll() -> Java.Lang.Object?
ReactiveX.Internal.Fuseable.QueueFuseable
ReactiveX.Internal.Fuseable.QueueFuseableConsts
ReactiveX.Internal.Observers.BasicFuseableObserver
ReactiveX.Internal.Observers.BasicFuseableObserver.BasicFuseableObserver(ReactiveX.IObserver? downstream) -> void
ReactiveX.Internal.Observers.BasicFuseableObserver.BasicFuseableObserver(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Observers.BasicFuseableObserver.Done.get -> bool
ReactiveX.Internal.Observers.BasicFuseableObserver.Done.set -> void
ReactiveX.Internal.Observers.BasicFuseableObserver.Downstream.get -> ReactiveX.IObserver?
ReactiveX.Internal.Observers.BasicFuseableObserver.Downstream.set -> void
ReactiveX.Internal.Observers.BasicFuseableObserver.Fail(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Observers.BasicFuseableObserver.Offer(Java.Lang.Object? e) -> bool
ReactiveX.Internal.Observers.BasicFuseableObserver.Offer(Java.Lang.Object? v1, Java.Lang.Object? v2) -> bool
ReactiveX.Internal.Observers.BasicFuseableObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Observers.BasicFuseableObserver.Qd.get -> ReactiveX.Internal.Fuseable.IQueueDisposable?
ReactiveX.Internal.Observers.BasicFuseableObserver.Qd.set -> void
ReactiveX.Internal.Observers.BasicFuseableObserver.SourceMode.get -> int
ReactiveX.Internal.Observers.BasicFuseableObserver.SourceMode.set -> void
ReactiveX.Internal.Observers.BasicFuseableObserver.TransitiveBoundaryFusion(int mode) -> int
ReactiveX.Internal.Observers.BasicFuseableObserver.Upstream.get -> ReactiveX.Disposables.IDisposable?
ReactiveX.Internal.Observers.BasicFuseableObserver.Upstream.set -> void
ReactiveX.Internal.Observers.BasicIntQueueDisposable
ReactiveX.Internal.Observers.BasicIntQueueDisposable.BasicIntQueueDisposable() -> void
ReactiveX.Internal.Observers.BasicIntQueueDisposable.BasicIntQueueDisposable(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Observers.BasicIntQueueDisposable.Offer(Java.Lang.Object? e) -> bool
ReactiveX.Internal.Observers.BasicIntQueueDisposable.Offer(Java.Lang.Object? v1, Java.Lang.Object? v2) -> bool
ReactiveX.Internal.Observers.BasicQueueDisposable
ReactiveX.Internal.Observers.BasicQueueDisposable.BasicQueueDisposable() -> void
ReactiveX.Internal.Observers.BasicQueueDisposable.BasicQueueDisposable(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Observers.BasicQueueDisposable.Offer(Java.Lang.Object? e) -> bool
ReactiveX.Internal.Observers.BasicQueueDisposable.Offer(Java.Lang.Object? v1, Java.Lang.Object? v2) -> bool
ReactiveX.Internal.Observers.BiConsumerSingleObserver
ReactiveX.Internal.Observers.BiConsumerSingleObserver.BiConsumerSingleObserver(ReactiveX.Functions.IBiConsumer? onCallback) -> void
ReactiveX.Internal.Observers.BiConsumerSingleObserver.Dispose() -> void
ReactiveX.Internal.Observers.BiConsumerSingleObserver.IsDisposed.get -> bool
ReactiveX.Internal.Observers.BiConsumerSingleObserver.OnError(Java.Lang.Throwable? e) -> void
ReactiveX.Internal.Observers.BiConsumerSingleObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Observers.BiConsumerSingleObserver.OnSuccess(Java.Lang.Object? value) -> void
ReactiveX.Internal.Observers.BlockingBaseObserver
ReactiveX.Internal.Observers.BlockingBaseObserver.BlockingBaseObserver() -> void
ReactiveX.Internal.Observers.BlockingBaseObserver.BlockingBaseObserver(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Observers.BlockingBaseObserver.BlockingGet() -> Java.Lang.Object?
ReactiveX.Internal.Observers.BlockingBaseObserver.Dispose() -> void
ReactiveX.Internal.Observers.BlockingBaseObserver.IsDisposed.get -> bool
ReactiveX.Internal.Observers.BlockingBaseObserver.OnComplete() -> void
ReactiveX.Internal.Observers.BlockingBaseObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Observers.BlockingFirstObserver
ReactiveX.Internal.Observers.BlockingFirstObserver.BlockingFirstObserver() -> void
ReactiveX.Internal.Observers.BlockingLastObserver
ReactiveX.Internal.Observers.BlockingLastObserver.BlockingLastObserver() -> void
ReactiveX.Internal.Observers.BlockingMultiObserver
ReactiveX.Internal.Observers.BlockingMultiObserver.BlockingAwait(long timeout, Java.Util.Concurrent.TimeUnit? unit) -> bool
ReactiveX.Internal.Observers.BlockingMultiObserver.BlockingGet() -> Java.Lang.Object?
ReactiveX.Internal.Observers.BlockingMultiObserver.BlockingGet(Java.Lang.Object? defaultValue) -> Java.Lang.Object?
ReactiveX.Internal.Observers.BlockingMultiObserver.BlockingGetError() -> Java.Lang.Throwable?
ReactiveX.Internal.Observers.BlockingMultiObserver.BlockingGetError(long timeout, Java.Util.Concurrent.TimeUnit? unit) -> Java.Lang.Throwable?
ReactiveX.Internal.Observers.BlockingMultiObserver.BlockingMultiObserver() -> void
ReactiveX.Internal.Observers.BlockingMultiObserver.OnComplete() -> void
ReactiveX.Internal.Observers.BlockingMultiObserver.OnError(Java.Lang.Throwable? e) -> void
ReactiveX.Internal.Observers.BlockingMultiObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Observers.BlockingMultiObserver.OnSuccess(Java.Lang.Object? value) -> void
ReactiveX.Internal.Observers.BlockingObserver
ReactiveX.Internal.Observers.BlockingObserver.BlockingObserver(Java.Util.IQueue? queue) -> void
ReactiveX.Internal.Observers.BlockingObserver.Dispose() -> void
ReactiveX.Internal.Observers.BlockingObserver.IsDisposed.get -> bool
ReactiveX.Internal.Observers.BlockingObserver.OnComplete() -> void
ReactiveX.Internal.Observers.BlockingObserver.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Observers.BlockingObserver.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Internal.Observers.BlockingObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Observers.CallbackCompletableObserver
ReactiveX.Internal.Observers.CallbackCompletableObserver.Accept(Java.Lang.Throwable? e) -> void
ReactiveX.Internal.Observers.CallbackCompletableObserver.CallbackCompletableObserver(ReactiveX.Functions.IAction? onComplete) -> void
ReactiveX.Internal.Observers.CallbackCompletableObserver.CallbackCompletableObserver(ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete) -> void
ReactiveX.Internal.Observers.CallbackCompletableObserver.Dispose() -> void
ReactiveX.Internal.Observers.CallbackCompletableObserver.HasCustomOnError.get -> bool
ReactiveX.Internal.Observers.CallbackCompletableObserver.IsDisposed.get -> bool
ReactiveX.Internal.Observers.CallbackCompletableObserver.OnComplete() -> void
ReactiveX.Internal.Observers.CallbackCompletableObserver.OnError(Java.Lang.Throwable? e) -> void
ReactiveX.Internal.Observers.CallbackCompletableObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Observers.ConsumerSingleObserver
ReactiveX.Internal.Observers.ConsumerSingleObserver.ConsumerSingleObserver(ReactiveX.Functions.IConsumer? onSuccess, ReactiveX.Functions.IConsumer? onError) -> void
ReactiveX.Internal.Observers.ConsumerSingleObserver.Dispose() -> void
ReactiveX.Internal.Observers.ConsumerSingleObserver.HasCustomOnError.get -> bool
ReactiveX.Internal.Observers.ConsumerSingleObserver.IsDisposed.get -> bool
ReactiveX.Internal.Observers.ConsumerSingleObserver.OnError(Java.Lang.Throwable? e) -> void
ReactiveX.Internal.Observers.ConsumerSingleObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Observers.ConsumerSingleObserver.OnSuccess(Java.Lang.Object? value) -> void
ReactiveX.Internal.Observers.DeferredScalarDisposable
ReactiveX.Internal.Observers.DeferredScalarDisposable.Complete() -> void
ReactiveX.Internal.Observers.DeferredScalarDisposable.Complete(Java.Lang.Object? value) -> void
ReactiveX.Internal.Observers.DeferredScalarDisposable.DeferredScalarDisposable(ReactiveX.IObserver? downstream) -> void
ReactiveX.Internal.Observers.DeferredScalarDisposable.DeferredScalarDisposable(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Observers.DeferredScalarDisposable.Downstream.get -> ReactiveX.IObserver?
ReactiveX.Internal.Observers.DeferredScalarDisposable.Downstream.set -> void
ReactiveX.Internal.Observers.DeferredScalarDisposable.Error(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Observers.DeferredScalarDisposable.TryDispose() -> bool
ReactiveX.Internal.Observers.DeferredScalarDisposable.Value.get -> Java.Lang.Object?
ReactiveX.Internal.Observers.DeferredScalarDisposable.Value.set -> void
ReactiveX.Internal.Observers.DeferredScalarObserver
ReactiveX.Internal.Observers.DeferredScalarObserver.DeferredScalarObserver(ReactiveX.IObserver? downstream) -> void
ReactiveX.Internal.Observers.DeferredScalarObserver.DeferredScalarObserver(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Observers.DeferredScalarObserver.Upstream.get -> ReactiveX.Disposables.IDisposable?
ReactiveX.Internal.Observers.DeferredScalarObserver.Upstream.set -> void
ReactiveX.Internal.Observers.DisposableLambdaObserver
ReactiveX.Internal.Observers.DisposableLambdaObserver.DisposableLambdaObserver(ReactiveX.IObserver? actual, ReactiveX.Functions.IConsumer? onSubscribe, ReactiveX.Functions.IAction? onDispose) -> void
ReactiveX.Internal.Observers.DisposableLambdaObserver.Dispose() -> void
ReactiveX.Internal.Observers.DisposableLambdaObserver.IsDisposed.get -> bool
ReactiveX.Internal.Observers.DisposableLambdaObserver.OnComplete() -> void
ReactiveX.Internal.Observers.DisposableLambdaObserver.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Observers.DisposableLambdaObserver.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Internal.Observers.DisposableLambdaObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Observers.EmptyCompletableObserver
ReactiveX.Internal.Observers.EmptyCompletableObserver.Dispose() -> void
ReactiveX.Internal.Observers.EmptyCompletableObserver.EmptyCompletableObserver() -> void
ReactiveX.Internal.Observers.EmptyCompletableObserver.HasCustomOnError.get -> bool
ReactiveX.Internal.Observers.EmptyCompletableObserver.IsDisposed.get -> bool
ReactiveX.Internal.Observers.EmptyCompletableObserver.OnComplete() -> void
ReactiveX.Internal.Observers.EmptyCompletableObserver.OnError(Java.Lang.Throwable? e) -> void
ReactiveX.Internal.Observers.EmptyCompletableObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Observers.ForEachWhileObserver
ReactiveX.Internal.Observers.ForEachWhileObserver.Dispose() -> void
ReactiveX.Internal.Observers.ForEachWhileObserver.ForEachWhileObserver(ReactiveX.Functions.IPredicate? onNext, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete) -> void
ReactiveX.Internal.Observers.ForEachWhileObserver.IsDisposed.get -> bool
ReactiveX.Internal.Observers.ForEachWhileObserver.OnComplete() -> void
ReactiveX.Internal.Observers.ForEachWhileObserver.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Observers.ForEachWhileObserver.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Internal.Observers.ForEachWhileObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Observers.FutureObserver
ReactiveX.Internal.Observers.FutureObserver.Cancel(bool mayInterruptIfRunning) -> bool
ReactiveX.Internal.Observers.FutureObserver.Dispose() -> void
ReactiveX.Internal.Observers.FutureObserver.FutureObserver() -> void
ReactiveX.Internal.Observers.FutureObserver.Get() -> Java.Lang.Object?
ReactiveX.Internal.Observers.FutureObserver.Get(long timeout, Java.Util.Concurrent.TimeUnit? unit) -> Java.Lang.Object?
ReactiveX.Internal.Observers.FutureObserver.IsCancelled.get -> bool
ReactiveX.Internal.Observers.FutureObserver.IsDisposed.get -> bool
ReactiveX.Internal.Observers.FutureObserver.IsDone.get -> bool
ReactiveX.Internal.Observers.FutureObserver.OnComplete() -> void
ReactiveX.Internal.Observers.FutureObserver.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Observers.FutureObserver.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Internal.Observers.FutureObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Observers.FutureSingleObserver
ReactiveX.Internal.Observers.FutureSingleObserver.Cancel(bool mayInterruptIfRunning) -> bool
ReactiveX.Internal.Observers.FutureSingleObserver.Dispose() -> void
ReactiveX.Internal.Observers.FutureSingleObserver.FutureSingleObserver() -> void
ReactiveX.Internal.Observers.FutureSingleObserver.Get() -> Java.Lang.Object?
ReactiveX.Internal.Observers.FutureSingleObserver.Get(long timeout, Java.Util.Concurrent.TimeUnit? unit) -> Java.Lang.Object?
ReactiveX.Internal.Observers.FutureSingleObserver.IsCancelled.get -> bool
ReactiveX.Internal.Observers.FutureSingleObserver.IsDisposed.get -> bool
ReactiveX.Internal.Observers.FutureSingleObserver.IsDone.get -> bool
ReactiveX.Internal.Observers.FutureSingleObserver.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Observers.FutureSingleObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Observers.FutureSingleObserver.OnSuccess(Java.Lang.Object? t) -> void
ReactiveX.Internal.Observers.IInnerQueuedObserverSupport
ReactiveX.Internal.Observers.IInnerQueuedObserverSupport.Drain() -> void
ReactiveX.Internal.Observers.IInnerQueuedObserverSupport.InnerComplete(ReactiveX.Internal.Observers.InnerQueuedObserver? inner) -> void
ReactiveX.Internal.Observers.IInnerQueuedObserverSupport.InnerError(ReactiveX.Internal.Observers.InnerQueuedObserver? inner, Java.Lang.Throwable? e) -> void
ReactiveX.Internal.Observers.IInnerQueuedObserverSupport.InnerNext(ReactiveX.Internal.Observers.InnerQueuedObserver? inner, Java.Lang.Object? value) -> void
ReactiveX.Internal.Observers.InnerQueuedObserver
ReactiveX.Internal.Observers.InnerQueuedObserver.Dispose() -> void
ReactiveX.Internal.Observers.InnerQueuedObserver.FusionMode() -> int
ReactiveX.Internal.Observers.InnerQueuedObserver.InnerQueuedObserver(ReactiveX.Internal.Observers.IInnerQueuedObserverSupport? parent, int prefetch) -> void
ReactiveX.Internal.Observers.InnerQueuedObserver.IsDisposed.get -> bool
ReactiveX.Internal.Observers.InnerQueuedObserver.IsDone.get -> bool
ReactiveX.Internal.Observers.InnerQueuedObserver.OnComplete() -> void
ReactiveX.Internal.Observers.InnerQueuedObserver.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Observers.InnerQueuedObserver.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Internal.Observers.InnerQueuedObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Observers.InnerQueuedObserver.Queue() -> ReactiveX.Internal.Fuseable.ISimpleQueue?
ReactiveX.Internal.Observers.InnerQueuedObserver.SetDone() -> void
ReactiveX.Internal.Observers.LambdaObserver
ReactiveX.Internal.Observers.LambdaObserver.Dispose() -> void
ReactiveX.Internal.Observers.LambdaObserver.HasCustomOnError.get -> bool
ReactiveX.Internal.Observers.LambdaObserver.IsDisposed.get -> bool
ReactiveX.Internal.Observers.LambdaObserver.LambdaObserver(ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete, ReactiveX.Functions.IConsumer? onSubscribe) -> void
ReactiveX.Internal.Observers.LambdaObserver.OnComplete() -> void
ReactiveX.Internal.Observers.LambdaObserver.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Observers.LambdaObserver.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Internal.Observers.LambdaObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Observers.QueueDrainObserver
ReactiveX.Internal.Observers.QueueDrainObserver.Cancelled() -> bool
ReactiveX.Internal.Observers.QueueDrainObserver.Done() -> bool
ReactiveX.Internal.Observers.QueueDrainObserver.Downstream.get -> ReactiveX.IObserver?
ReactiveX.Internal.Observers.QueueDrainObserver.Downstream.set -> void
ReactiveX.Internal.Observers.QueueDrainObserver.Enter() -> bool
ReactiveX.Internal.Observers.QueueDrainObserver.Error() -> Java.Lang.Throwable?
ReactiveX.Internal.Observers.QueueDrainObserver.FastEnter() -> bool
ReactiveX.Internal.Observers.QueueDrainObserver.FastPathEmit(Java.Lang.Object? value, bool delayError, ReactiveX.Disposables.IDisposable? dispose) -> void
ReactiveX.Internal.Observers.QueueDrainObserver.FastPathOrderedEmit(Java.Lang.Object? value, bool delayError, ReactiveX.Disposables.IDisposable? disposable) -> void
ReactiveX.Internal.Observers.QueueDrainObserver.Leave(int m) -> int
ReactiveX.Internal.Observers.QueueDrainObserver.Queue.get -> ReactiveX.Internal.Fuseable.ISimplePlainQueue?
ReactiveX.Internal.Observers.QueueDrainObserver.Queue.set -> void
ReactiveX.Internal.Observers.QueueDrainObserver.QueueDrainObserver(ReactiveX.IObserver? actual, ReactiveX.Internal.Fuseable.ISimplePlainQueue? queue) -> void
ReactiveX.Internal.Observers.QueueDrainObserver.QueueDrainObserver(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Observers.ResumeSingleObserver
ReactiveX.Internal.Observers.ResumeSingleObserver.OnError(Java.Lang.Throwable? e) -> void
ReactiveX.Internal.Observers.ResumeSingleObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Observers.ResumeSingleObserver.OnSuccess(Java.Lang.Object? value) -> void
ReactiveX.Internal.Observers.ResumeSingleObserver.ResumeSingleObserver(Java.Util.Concurrent.Atomic.AtomicReference? parent, ReactiveX.ISingleObserver? downstream) -> void
ReactiveX.Internal.Observers.SubscriberCompletableObserver
ReactiveX.Internal.Observers.SubscriberCompletableObserver.Cancel() -> void
ReactiveX.Internal.Observers.SubscriberCompletableObserver.OnComplete() -> void
ReactiveX.Internal.Observers.SubscriberCompletableObserver.OnError(Java.Lang.Throwable? e) -> void
ReactiveX.Internal.Observers.SubscriberCompletableObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Observers.SubscriberCompletableObserver.Request(long n) -> void
ReactiveX.Internal.Observers.SubscriberCompletableObserver.SubscriberCompletableObserver(ReactiveStreams.ISubscriber? subscriber) -> void
ReactiveX.Internal.Operators.Completable.CompletableAmb
ReactiveX.Internal.Operators.Completable.CompletableAmb.CompletableAmb(ReactiveX.ICompletableSource![]? sources, Java.Lang.IIterable? sourcesIterable) -> void
ReactiveX.Internal.Operators.Completable.CompletableAndThenCompletable
ReactiveX.Internal.Operators.Completable.CompletableAndThenCompletable.CompletableAndThenCompletable(ReactiveX.ICompletableSource? source, ReactiveX.ICompletableSource? next) -> void
ReactiveX.Internal.Operators.Completable.CompletableCache
ReactiveX.Internal.Operators.Completable.CompletableCache.CompletableCache(ReactiveX.ICompletableSource? source) -> void
ReactiveX.Internal.Operators.Completable.CompletableCache.OnComplete() -> void
ReactiveX.Internal.Operators.Completable.CompletableCache.OnError(Java.Lang.Throwable? e) -> void
ReactiveX.Internal.Operators.Completable.CompletableCache.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Operators.Completable.CompletableConcat
ReactiveX.Internal.Operators.Completable.CompletableConcat.CompletableConcat(ReactiveStreams.IPublisher? sources, int prefetch) -> void
ReactiveX.Internal.Operators.Completable.CompletableConcatArray
ReactiveX.Internal.Operators.Completable.CompletableConcatArray.CompletableConcatArray(ReactiveX.ICompletableSource![]? sources) -> void
ReactiveX.Internal.Operators.Completable.CompletableConcatIterable
ReactiveX.Internal.Operators.Completable.CompletableConcatIterable.CompletableConcatIterable(Java.Lang.IIterable? sources) -> void
ReactiveX.Internal.Operators.Completable.CompletableCreate
ReactiveX.Internal.Operators.Completable.CompletableCreate.CompletableCreate(ReactiveX.ICompletableOnSubscribe? source) -> void
ReactiveX.Internal.Operators.Completable.CompletableDefer
ReactiveX.Internal.Operators.Completable.CompletableDefer.CompletableDefer(Java.Util.Concurrent.ICallable? completableSupplier) -> void
ReactiveX.Internal.Operators.Completable.CompletableDelay
ReactiveX.Internal.Operators.Completable.CompletableDelay.CompletableDelay(ReactiveX.ICompletableSource? source, long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool delayError) -> void
ReactiveX.Internal.Operators.Completable.CompletableDetach
ReactiveX.Internal.Operators.Completable.CompletableDetach.CompletableDetach(ReactiveX.ICompletableSource? source) -> void
ReactiveX.Internal.Operators.Completable.CompletableDisposeOn
ReactiveX.Internal.Operators.Completable.CompletableDisposeOn.CompletableDisposeOn(ReactiveX.ICompletableSource? source, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Completable.CompletableDoFinally
ReactiveX.Internal.Operators.Completable.CompletableDoFinally.CompletableDoFinally(ReactiveX.ICompletableSource? source, ReactiveX.Functions.IAction? onFinally) -> void
ReactiveX.Internal.Operators.Completable.CompletableDoOnEvent
ReactiveX.Internal.Operators.Completable.CompletableDoOnEvent.CompletableDoOnEvent(ReactiveX.ICompletableSource? source, ReactiveX.Functions.IConsumer? onEvent) -> void
ReactiveX.Internal.Operators.Completable.CompletableEmpty
ReactiveX.Internal.Operators.Completable.CompletableError
ReactiveX.Internal.Operators.Completable.CompletableError.CompletableError(Java.Lang.Throwable? error) -> void
ReactiveX.Internal.Operators.Completable.CompletableErrorSupplier
ReactiveX.Internal.Operators.Completable.CompletableErrorSupplier.CompletableErrorSupplier(Java.Util.Concurrent.ICallable? errorSupplier) -> void
ReactiveX.Internal.Operators.Completable.CompletableFromAction
ReactiveX.Internal.Operators.Completable.CompletableFromAction.CompletableFromAction(ReactiveX.Functions.IAction? run) -> void
ReactiveX.Internal.Operators.Completable.CompletableFromCallable
ReactiveX.Internal.Operators.Completable.CompletableFromCallable.CompletableFromCallable(Java.Util.Concurrent.ICallable? callable) -> void
ReactiveX.Internal.Operators.Completable.CompletableFromObservable
ReactiveX.Internal.Operators.Completable.CompletableFromObservable.CompletableFromObservable(ReactiveX.IObservableSource? observable) -> void
ReactiveX.Internal.Operators.Completable.CompletableFromPublisher
ReactiveX.Internal.Operators.Completable.CompletableFromPublisher.CompletableFromPublisher(ReactiveStreams.IPublisher? flowable) -> void
ReactiveX.Internal.Operators.Completable.CompletableFromRunnable
ReactiveX.Internal.Operators.Completable.CompletableFromRunnable.CompletableFromRunnable(Java.Lang.IRunnable? runnable) -> void
ReactiveX.Internal.Operators.Completable.CompletableFromSingle
ReactiveX.Internal.Operators.Completable.CompletableFromSingle.CompletableFromSingle(ReactiveX.ISingleSource? single) -> void
ReactiveX.Internal.Operators.Completable.CompletableFromUnsafeSource
ReactiveX.Internal.Operators.Completable.CompletableFromUnsafeSource.CompletableFromUnsafeSource(ReactiveX.ICompletableSource? source) -> void
ReactiveX.Internal.Operators.Completable.CompletableHide
ReactiveX.Internal.Operators.Completable.CompletableHide.CompletableHide(ReactiveX.ICompletableSource? source) -> void
ReactiveX.Internal.Operators.Completable.CompletableLift
ReactiveX.Internal.Operators.Completable.CompletableLift.CompletableLift(ReactiveX.ICompletableSource? source, ReactiveX.ICompletableOperator? onLift) -> void
ReactiveX.Internal.Operators.Completable.CompletableMaterialize
ReactiveX.Internal.Operators.Completable.CompletableMaterialize.CompletableMaterialize(ReactiveX.Completable? source) -> void
ReactiveX.Internal.Operators.Completable.CompletableMerge
ReactiveX.Internal.Operators.Completable.CompletableMerge.CompletableMerge(ReactiveStreams.IPublisher? source, int maxConcurrency, bool delayErrors) -> void
ReactiveX.Internal.Operators.Completable.CompletableMergeArray
ReactiveX.Internal.Operators.Completable.CompletableMergeArray.CompletableMergeArray(ReactiveX.ICompletableSource![]? sources) -> void
ReactiveX.Internal.Operators.Completable.CompletableMergeDelayErrorArray
ReactiveX.Internal.Operators.Completable.CompletableMergeDelayErrorArray.CompletableMergeDelayErrorArray(ReactiveX.ICompletableSource![]? sources) -> void
ReactiveX.Internal.Operators.Completable.CompletableMergeDelayErrorIterable
ReactiveX.Internal.Operators.Completable.CompletableMergeDelayErrorIterable.CompletableMergeDelayErrorIterable(Java.Lang.IIterable? sources) -> void
ReactiveX.Internal.Operators.Completable.CompletableMergeIterable
ReactiveX.Internal.Operators.Completable.CompletableMergeIterable.CompletableMergeIterable(Java.Lang.IIterable? sources) -> void
ReactiveX.Internal.Operators.Completable.CompletableNever
ReactiveX.Internal.Operators.Completable.CompletableObserveOn
ReactiveX.Internal.Operators.Completable.CompletableObserveOn.CompletableObserveOn(ReactiveX.ICompletableSource? source, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Completable.CompletableOnErrorComplete
ReactiveX.Internal.Operators.Completable.CompletableOnErrorComplete.CompletableOnErrorComplete(ReactiveX.ICompletableSource? source, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Completable.CompletablePeek
ReactiveX.Internal.Operators.Completable.CompletablePeek.CompletablePeek(ReactiveX.ICompletableSource? source, ReactiveX.Functions.IConsumer? onSubscribe, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete, ReactiveX.Functions.IAction? onTerminate, ReactiveX.Functions.IAction? onAfterTerminate, ReactiveX.Functions.IAction? onDispose) -> void
ReactiveX.Internal.Operators.Completable.CompletableResumeNext
ReactiveX.Internal.Operators.Completable.CompletableResumeNext.CompletableResumeNext(ReactiveX.ICompletableSource? source, ReactiveX.Functions.IFunction? errorMapper) -> void
ReactiveX.Internal.Operators.Completable.CompletableSubscribeOn
ReactiveX.Internal.Operators.Completable.CompletableSubscribeOn.CompletableSubscribeOn(ReactiveX.ICompletableSource? source, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Completable.CompletableTakeUntilCompletable
ReactiveX.Internal.Operators.Completable.CompletableTakeUntilCompletable.CompletableTakeUntilCompletable(ReactiveX.Completable? source, ReactiveX.ICompletableSource? other) -> void
ReactiveX.Internal.Operators.Completable.CompletableTimeout
ReactiveX.Internal.Operators.Completable.CompletableTimeout.CompletableTimeout(ReactiveX.ICompletableSource? source, long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, ReactiveX.ICompletableSource? other) -> void
ReactiveX.Internal.Operators.Completable.CompletableTimer
ReactiveX.Internal.Operators.Completable.CompletableTimer.CompletableTimer(long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Completable.CompletableToFlowable
ReactiveX.Internal.Operators.Completable.CompletableToFlowable.CompletableToFlowable(ReactiveX.ICompletableSource? source) -> void
ReactiveX.Internal.Operators.Completable.CompletableToObservable
ReactiveX.Internal.Operators.Completable.CompletableToObservable.CompletableToObservable(ReactiveX.ICompletableSource? source) -> void
ReactiveX.Internal.Operators.Completable.CompletableToSingle
ReactiveX.Internal.Operators.Completable.CompletableToSingle.CompletableToSingle(ReactiveX.ICompletableSource? source, Java.Util.Concurrent.ICallable? completionValueSupplier, Java.Lang.Object? completionValue) -> void
ReactiveX.Internal.Operators.Completable.CompletableUsing
ReactiveX.Internal.Operators.Completable.CompletableUsing.CompletableUsing(Java.Util.Concurrent.ICallable? resourceSupplier, ReactiveX.Functions.IFunction? completableFunction, ReactiveX.Functions.IConsumer? disposer, bool eager) -> void
ReactiveX.Internal.Operators.Flowable.BlockingFlowableIterable
ReactiveX.Internal.Operators.Flowable.BlockingFlowableIterable.BlockingFlowableIterable(ReactiveX.Flowable? source, int bufferSize) -> void
ReactiveX.Internal.Operators.Flowable.BlockingFlowableIterable.Iterator() -> Java.Util.IIterator?
ReactiveX.Internal.Operators.Flowable.BlockingFlowableLatest
ReactiveX.Internal.Operators.Flowable.BlockingFlowableLatest.BlockingFlowableLatest(ReactiveStreams.IPublisher? source) -> void
ReactiveX.Internal.Operators.Flowable.BlockingFlowableLatest.Iterator() -> Java.Util.IIterator?
ReactiveX.Internal.Operators.Flowable.BlockingFlowableMostRecent
ReactiveX.Internal.Operators.Flowable.BlockingFlowableMostRecent.BlockingFlowableMostRecent(ReactiveX.Flowable? source, Java.Lang.Object? initialValue) -> void
ReactiveX.Internal.Operators.Flowable.BlockingFlowableMostRecent.Iterator() -> Java.Util.IIterator?
ReactiveX.Internal.Operators.Flowable.BlockingFlowableNext
ReactiveX.Internal.Operators.Flowable.BlockingFlowableNext.BlockingFlowableNext(ReactiveStreams.IPublisher? source) -> void
ReactiveX.Internal.Operators.Flowable.BlockingFlowableNext.Iterator() -> Java.Util.IIterator?
ReactiveX.Internal.Operators.Flowable.FlowableAll
ReactiveX.Internal.Operators.Flowable.FlowableAll.FlowableAll(ReactiveX.Flowable? source, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Flowable.FlowableAll.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableAllSingle
ReactiveX.Internal.Operators.Flowable.FlowableAllSingle.FlowableAllSingle(ReactiveX.Flowable? source, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Flowable.FlowableAllSingle.FuseToFlowable() -> ReactiveX.Flowable?
ReactiveX.Internal.Operators.Flowable.FlowableAmb
ReactiveX.Internal.Operators.Flowable.FlowableAmb.FlowableAmb(ReactiveStreams.IPublisher![]? sources, Java.Lang.IIterable? sourcesIterable) -> void
ReactiveX.Internal.Operators.Flowable.FlowableAny
ReactiveX.Internal.Operators.Flowable.FlowableAny.FlowableAny(ReactiveX.Flowable? source, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Flowable.FlowableAny.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableAnySingle
ReactiveX.Internal.Operators.Flowable.FlowableAnySingle.FlowableAnySingle(ReactiveX.Flowable? source, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Flowable.FlowableAnySingle.FuseToFlowable() -> ReactiveX.Flowable?
ReactiveX.Internal.Operators.Flowable.FlowableAutoConnect
ReactiveX.Internal.Operators.Flowable.FlowableAutoConnect.FlowableAutoConnect(ReactiveX.Flowables.ConnectableFlowable? source, int numberOfSubscribers, ReactiveX.Functions.IConsumer? connection) -> void
ReactiveX.Internal.Operators.Flowable.FlowableBlockingSubscribe
ReactiveX.Internal.Operators.Flowable.FlowableBuffer
ReactiveX.Internal.Operators.Flowable.FlowableBuffer.FlowableBuffer(ReactiveX.Flowable? source, int size, int skip, Java.Util.Concurrent.ICallable? bufferSupplier) -> void
ReactiveX.Internal.Operators.Flowable.FlowableBuffer.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableBufferBoundary
ReactiveX.Internal.Operators.Flowable.FlowableBufferBoundary.FlowableBufferBoundary(ReactiveX.Flowable? source, ReactiveStreams.IPublisher? bufferOpen, ReactiveX.Functions.IFunction? bufferClose, Java.Util.Concurrent.ICallable? bufferSupplier) -> void
ReactiveX.Internal.Operators.Flowable.FlowableBufferBoundary.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableBufferBoundarySupplier
ReactiveX.Internal.Operators.Flowable.FlowableBufferBoundarySupplier.FlowableBufferBoundarySupplier(ReactiveX.Flowable? source, Java.Util.Concurrent.ICallable? boundarySupplier, Java.Util.Concurrent.ICallable? bufferSupplier) -> void
ReactiveX.Internal.Operators.Flowable.FlowableBufferBoundarySupplier.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableBufferExactBoundary
ReactiveX.Internal.Operators.Flowable.FlowableBufferExactBoundary.FlowableBufferExactBoundary(ReactiveX.Flowable? source, ReactiveStreams.IPublisher? boundary, Java.Util.Concurrent.ICallable? bufferSupplier) -> void
ReactiveX.Internal.Operators.Flowable.FlowableBufferExactBoundary.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableBufferTimed
ReactiveX.Internal.Operators.Flowable.FlowableBufferTimed.FlowableBufferTimed(ReactiveX.Flowable? source, long timespan, long timeskip, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, Java.Util.Concurrent.ICallable? bufferSupplier, int maxSize, bool restartTimerOnMaxSize) -> void
ReactiveX.Internal.Operators.Flowable.FlowableBufferTimed.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableCache
ReactiveX.Internal.Operators.Flowable.FlowableCache.FlowableCache(ReactiveX.Flowable? source, int capacityHint) -> void
ReactiveX.Internal.Operators.Flowable.FlowableCache.OnComplete() -> void
ReactiveX.Internal.Operators.Flowable.FlowableCache.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Operators.Flowable.FlowableCache.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Internal.Operators.Flowable.FlowableCache.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
ReactiveX.Internal.Operators.Flowable.FlowableCache.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableCollect
ReactiveX.Internal.Operators.Flowable.FlowableCollect.FlowableCollect(ReactiveX.Flowable? source, Java.Util.Concurrent.ICallable? initialSupplier, ReactiveX.Functions.IBiConsumer? collector) -> void
ReactiveX.Internal.Operators.Flowable.FlowableCollect.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableCollectSingle
ReactiveX.Internal.Operators.Flowable.FlowableCollectSingle.FlowableCollectSingle(ReactiveX.Flowable? source, Java.Util.Concurrent.ICallable? initialSupplier, ReactiveX.Functions.IBiConsumer? collector) -> void
ReactiveX.Internal.Operators.Flowable.FlowableCollectSingle.FuseToFlowable() -> ReactiveX.Flowable?
ReactiveX.Internal.Operators.Flowable.FlowableCombineLatest
ReactiveX.Internal.Operators.Flowable.FlowableCombineLatest.FlowableCombineLatest(Java.Lang.IIterable? iterable, ReactiveX.Functions.IFunction? combiner, int bufferSize, bool delayErrors) -> void
ReactiveX.Internal.Operators.Flowable.FlowableCombineLatest.FlowableCombineLatest(ReactiveStreams.IPublisher![]? array, ReactiveX.Functions.IFunction? combiner, int bufferSize, bool delayErrors) -> void
ReactiveX.Internal.Operators.Flowable.FlowableConcatArray
ReactiveX.Internal.Operators.Flowable.FlowableConcatArray.FlowableConcatArray(ReactiveStreams.IPublisher![]? sources, bool delayError) -> void
ReactiveX.Internal.Operators.Flowable.FlowableConcatMap
ReactiveX.Internal.Operators.Flowable.FlowableConcatMap.FlowableConcatMap(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? mapper, int prefetch, ReactiveX.Internal.Util.ErrorMode? errorMode) -> void
ReactiveX.Internal.Operators.Flowable.FlowableConcatMap.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableConcatMapEager
ReactiveX.Internal.Operators.Flowable.FlowableConcatMapEager.FlowableConcatMapEager(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? mapper, int maxConcurrency, int prefetch, ReactiveX.Internal.Util.ErrorMode? errorMode) -> void
ReactiveX.Internal.Operators.Flowable.FlowableConcatMapEager.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableConcatMapEagerPublisher
ReactiveX.Internal.Operators.Flowable.FlowableConcatMapEagerPublisher.FlowableConcatMapEagerPublisher(ReactiveStreams.IPublisher? source, ReactiveX.Functions.IFunction? mapper, int maxConcurrency, int prefetch, ReactiveX.Internal.Util.ErrorMode? errorMode) -> void
ReactiveX.Internal.Operators.Flowable.FlowableConcatMapPublisher
ReactiveX.Internal.Operators.Flowable.FlowableConcatMapPublisher.FlowableConcatMapPublisher(ReactiveStreams.IPublisher? source, ReactiveX.Functions.IFunction? mapper, int prefetch, ReactiveX.Internal.Util.ErrorMode? errorMode) -> void
ReactiveX.Internal.Operators.Flowable.FlowableConcatWithCompletable
ReactiveX.Internal.Operators.Flowable.FlowableConcatWithCompletable.FlowableConcatWithCompletable(ReactiveX.Flowable? source, ReactiveX.ICompletableSource? other) -> void
ReactiveX.Internal.Operators.Flowable.FlowableConcatWithCompletable.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableConcatWithMaybe
ReactiveX.Internal.Operators.Flowable.FlowableConcatWithMaybe.FlowableConcatWithMaybe(ReactiveX.Flowable? source, ReactiveX.IMaybeSource? other) -> void
ReactiveX.Internal.Operators.Flowable.FlowableConcatWithMaybe.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableConcatWithSingle
ReactiveX.Internal.Operators.Flowable.FlowableConcatWithSingle.FlowableConcatWithSingle(ReactiveX.Flowable? source, ReactiveX.ISingleSource? other) -> void
ReactiveX.Internal.Operators.Flowable.FlowableConcatWithSingle.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableCount
ReactiveX.Internal.Operators.Flowable.FlowableCount.FlowableCount(ReactiveX.Flowable? source) -> void
ReactiveX.Internal.Operators.Flowable.FlowableCount.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableCountSingle
ReactiveX.Internal.Operators.Flowable.FlowableCountSingle.FlowableCountSingle(ReactiveX.Flowable? source) -> void
ReactiveX.Internal.Operators.Flowable.FlowableCountSingle.FuseToFlowable() -> ReactiveX.Flowable?
ReactiveX.Internal.Operators.Flowable.FlowableCreate
ReactiveX.Internal.Operators.Flowable.FlowableCreate.FlowableCreate(ReactiveX.IFlowableOnSubscribe? source, ReactiveX.BackpressureStrategy? backpressure) -> void
ReactiveX.Internal.Operators.Flowable.FlowableDebounce
ReactiveX.Internal.Operators.Flowable.FlowableDebounce.FlowableDebounce(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? debounceSelector) -> void
ReactiveX.Internal.Operators.Flowable.FlowableDebounce.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableDebounceTimed
ReactiveX.Internal.Operators.Flowable.FlowableDebounceTimed.FlowableDebounceTimed(ReactiveX.Flowable? source, long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Flowable.FlowableDebounceTimed.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableDefer
ReactiveX.Internal.Operators.Flowable.FlowableDefer.FlowableDefer(Java.Util.Concurrent.ICallable? supplier) -> void
ReactiveX.Internal.Operators.Flowable.FlowableDelay
ReactiveX.Internal.Operators.Flowable.FlowableDelay.FlowableDelay(ReactiveX.Flowable? source, long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool delayError) -> void
ReactiveX.Internal.Operators.Flowable.FlowableDelay.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableDelaySubscriptionOther
ReactiveX.Internal.Operators.Flowable.FlowableDelaySubscriptionOther.FlowableDelaySubscriptionOther(ReactiveStreams.IPublisher? main, ReactiveStreams.IPublisher? other) -> void
ReactiveX.Internal.Operators.Flowable.FlowableDematerialize
ReactiveX.Internal.Operators.Flowable.FlowableDematerialize.FlowableDematerialize(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? selector) -> void
ReactiveX.Internal.Operators.Flowable.FlowableDematerialize.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableDetach
ReactiveX.Internal.Operators.Flowable.FlowableDetach.FlowableDetach(ReactiveX.Flowable? source) -> void
ReactiveX.Internal.Operators.Flowable.FlowableDetach.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableDistinct
ReactiveX.Internal.Operators.Flowable.FlowableDistinct.FlowableDistinct(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? keySelector, Java.Util.Concurrent.ICallable? collectionSupplier) -> void
ReactiveX.Internal.Operators.Flowable.FlowableDistinct.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableDistinctUntilChanged
ReactiveX.Internal.Operators.Flowable.FlowableDistinctUntilChanged.FlowableDistinctUntilChanged(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IBiPredicate? comparer) -> void
ReactiveX.Internal.Operators.Flowable.FlowableDistinctUntilChanged.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableDoAfterNext
ReactiveX.Internal.Operators.Flowable.FlowableDoAfterNext.FlowableDoAfterNext(ReactiveX.Flowable? source, ReactiveX.Functions.IConsumer? onAfterNext) -> void
ReactiveX.Internal.Operators.Flowable.FlowableDoAfterNext.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableDoFinally
ReactiveX.Internal.Operators.Flowable.FlowableDoFinally.FlowableDoFinally(ReactiveX.Flowable? source, ReactiveX.Functions.IAction? onFinally) -> void
ReactiveX.Internal.Operators.Flowable.FlowableDoFinally.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableDoOnEach
ReactiveX.Internal.Operators.Flowable.FlowableDoOnEach.FlowableDoOnEach(ReactiveX.Flowable? source, ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete, ReactiveX.Functions.IAction? onAfterTerminate) -> void
ReactiveX.Internal.Operators.Flowable.FlowableDoOnEach.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableDoOnLifecycle
ReactiveX.Internal.Operators.Flowable.FlowableDoOnLifecycle.FlowableDoOnLifecycle(ReactiveX.Flowable? source, ReactiveX.Functions.IConsumer? onSubscribe, ReactiveX.Functions.ILongConsumer? onRequest, ReactiveX.Functions.IAction? onCancel) -> void
ReactiveX.Internal.Operators.Flowable.FlowableDoOnLifecycle.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableElementAt
ReactiveX.Internal.Operators.Flowable.FlowableElementAt.FlowableElementAt(ReactiveX.Flowable? source, long index, Java.Lang.Object? defaultValue, bool errorOnFewer) -> void
ReactiveX.Internal.Operators.Flowable.FlowableElementAt.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableElementAtMaybe
ReactiveX.Internal.Operators.Flowable.FlowableElementAtMaybe.FlowableElementAtMaybe(ReactiveX.Flowable? source, long index) -> void
ReactiveX.Internal.Operators.Flowable.FlowableElementAtMaybe.FuseToFlowable() -> ReactiveX.Flowable?
ReactiveX.Internal.Operators.Flowable.FlowableElementAtSingle
ReactiveX.Internal.Operators.Flowable.FlowableElementAtSingle.FlowableElementAtSingle(ReactiveX.Flowable? source, long index, Java.Lang.Object? defaultValue) -> void
ReactiveX.Internal.Operators.Flowable.FlowableElementAtSingle.FuseToFlowable() -> ReactiveX.Flowable?
ReactiveX.Internal.Operators.Flowable.FlowableEmpty
ReactiveX.Internal.Operators.Flowable.FlowableEmpty.Call() -> Java.Lang.Object?
ReactiveX.Internal.Operators.Flowable.FlowableError
ReactiveX.Internal.Operators.Flowable.FlowableError.FlowableError(Java.Util.Concurrent.ICallable? errorSupplier) -> void
ReactiveX.Internal.Operators.Flowable.FlowableFilter
ReactiveX.Internal.Operators.Flowable.FlowableFilter.FlowableFilter(ReactiveX.Flowable? source, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Flowable.FlowableFilter.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableFlatMap
ReactiveX.Internal.Operators.Flowable.FlowableFlatMap.FlowableFlatMap(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? mapper, bool delayErrors, int maxConcurrency, int bufferSize) -> void
ReactiveX.Internal.Operators.Flowable.FlowableFlatMap.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableFlatMapCompletable
ReactiveX.Internal.Operators.Flowable.FlowableFlatMapCompletable.FlowableFlatMapCompletable(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? mapper, bool delayErrors, int maxConcurrency) -> void
ReactiveX.Internal.Operators.Flowable.FlowableFlatMapCompletable.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableFlatMapCompletableCompletable
ReactiveX.Internal.Operators.Flowable.FlowableFlatMapCompletableCompletable.FlowableFlatMapCompletableCompletable(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? mapper, bool delayErrors, int maxConcurrency) -> void
ReactiveX.Internal.Operators.Flowable.FlowableFlatMapCompletableCompletable.FuseToFlowable() -> ReactiveX.Flowable?
ReactiveX.Internal.Operators.Flowable.FlowableFlatMapMaybe
ReactiveX.Internal.Operators.Flowable.FlowableFlatMapMaybe.FlowableFlatMapMaybe(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? mapper, bool delayError, int maxConcurrency) -> void
ReactiveX.Internal.Operators.Flowable.FlowableFlatMapMaybe.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableFlatMapPublisher
ReactiveX.Internal.Operators.Flowable.FlowableFlatMapPublisher.FlowableFlatMapPublisher(ReactiveStreams.IPublisher? source, ReactiveX.Functions.IFunction? mapper, bool delayErrors, int maxConcurrency, int bufferSize) -> void
ReactiveX.Internal.Operators.Flowable.FlowableFlatMapSingle
ReactiveX.Internal.Operators.Flowable.FlowableFlatMapSingle.FlowableFlatMapSingle(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? mapper, bool delayError, int maxConcurrency) -> void
ReactiveX.Internal.Operators.Flowable.FlowableFlatMapSingle.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableFlattenIterable
ReactiveX.Internal.Operators.Flowable.FlowableFlattenIterable.FlowableFlattenIterable(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? mapper, int prefetch) -> void
ReactiveX.Internal.Operators.Flowable.FlowableFlattenIterable.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableFromArray
ReactiveX.Internal.Operators.Flowable.FlowableFromArray.FlowableFromArray(Java.Lang.Object![]? array) -> void
ReactiveX.Internal.Operators.Flowable.FlowableFromCallable
ReactiveX.Internal.Operators.Flowable.FlowableFromCallable.Call() -> Java.Lang.Object?
ReactiveX.Internal.Operators.Flowable.FlowableFromCallable.FlowableFromCallable(Java.Util.Concurrent.ICallable? callable) -> void
ReactiveX.Internal.Operators.Flowable.FlowableFromFuture
ReactiveX.Internal.Operators.Flowable.FlowableFromFuture.FlowableFromFuture(Java.Util.Concurrent.IFuture? future, long timeout, Java.Util.Concurrent.TimeUnit? unit) -> void
ReactiveX.Internal.Operators.Flowable.FlowableFromIterable
ReactiveX.Internal.Operators.Flowable.FlowableFromIterable.FlowableFromIterable(Java.Lang.IIterable? source) -> void
ReactiveX.Internal.Operators.Flowable.FlowableFromObservable
ReactiveX.Internal.Operators.Flowable.FlowableFromObservable.FlowableFromObservable(ReactiveX.Observable? upstream) -> void
ReactiveX.Internal.Operators.Flowable.FlowableFromPublisher
ReactiveX.Internal.Operators.Flowable.FlowableFromPublisher.FlowableFromPublisher(ReactiveStreams.IPublisher? publisher) -> void
ReactiveX.Internal.Operators.Flowable.FlowableGenerate
ReactiveX.Internal.Operators.Flowable.FlowableGenerate.FlowableGenerate(Java.Util.Concurrent.ICallable? stateSupplier, ReactiveX.Functions.IBiFunction? generator, ReactiveX.Functions.IConsumer? disposeState) -> void
ReactiveX.Internal.Operators.Flowable.FlowableGroupBy
ReactiveX.Internal.Operators.Flowable.FlowableGroupBy.FlowableGroupBy(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector, int bufferSize, bool delayError, ReactiveX.Functions.IFunction? mapFactory) -> void
ReactiveX.Internal.Operators.Flowable.FlowableGroupBy.GroupBySubscriber
ReactiveX.Internal.Operators.Flowable.FlowableGroupBy.GroupBySubscriber.Cancel(Java.Lang.Object? key) -> void
ReactiveX.Internal.Operators.Flowable.FlowableGroupBy.GroupBySubscriber.GroupBySubscriber(ReactiveStreams.ISubscriber? actual, ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector, int bufferSize, bool delayError, System.Collections.IDictionary? groups, Java.Util.IQueue? evictedGroups) -> void
ReactiveX.Internal.Operators.Flowable.FlowableGroupBy.GroupBySubscriber.OnComplete() -> void
ReactiveX.Internal.Operators.Flowable.FlowableGroupBy.GroupBySubscriber.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Operators.Flowable.FlowableGroupBy.GroupBySubscriber.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Internal.Operators.Flowable.FlowableGroupBy.GroupBySubscriber.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
ReactiveX.Internal.Operators.Flowable.FlowableGroupBy.Poll() -> Java.Lang.Object?
ReactiveX.Internal.Operators.Flowable.FlowableGroupBy.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableGroupJoin
ReactiveX.Internal.Operators.Flowable.FlowableGroupJoin.FlowableGroupJoin(ReactiveX.Flowable? source, ReactiveStreams.IPublisher? other, ReactiveX.Functions.IFunction? leftEnd, ReactiveX.Functions.IFunction? rightEnd, ReactiveX.Functions.IBiFunction? resultSelector) -> void
ReactiveX.Internal.Operators.Flowable.FlowableGroupJoin.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableHide
ReactiveX.Internal.Operators.Flowable.FlowableHide.FlowableHide(ReactiveX.Flowable? source) -> void
ReactiveX.Internal.Operators.Flowable.FlowableHide.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableIgnoreElements
ReactiveX.Internal.Operators.Flowable.FlowableIgnoreElements.FlowableIgnoreElements(ReactiveX.Flowable? source) -> void
ReactiveX.Internal.Operators.Flowable.FlowableIgnoreElements.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableIgnoreElementsCompletable
ReactiveX.Internal.Operators.Flowable.FlowableIgnoreElementsCompletable.FlowableIgnoreElementsCompletable(ReactiveX.Flowable? source) -> void
ReactiveX.Internal.Operators.Flowable.FlowableIgnoreElementsCompletable.FuseToFlowable() -> ReactiveX.Flowable?
ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper
ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.RequestMax
ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.RequestMax.Accept(ReactiveStreams.ISubscription? t) -> void
ReactiveX.Internal.Operators.Flowable.FlowableInterval
ReactiveX.Internal.Operators.Flowable.FlowableInterval.FlowableInterval(long initialDelay, long period, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Flowable.FlowableIntervalRange
ReactiveX.Internal.Operators.Flowable.FlowableIntervalRange.FlowableIntervalRange(long start, long end, long initialDelay, long period, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Flowable.FlowableJoin
ReactiveX.Internal.Operators.Flowable.FlowableJoin.FlowableJoin(ReactiveX.Flowable? source, ReactiveStreams.IPublisher? other, ReactiveX.Functions.IFunction? leftEnd, ReactiveX.Functions.IFunction? rightEnd, ReactiveX.Functions.IBiFunction? resultSelector) -> void
ReactiveX.Internal.Operators.Flowable.FlowableJoin.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableJust
ReactiveX.Internal.Operators.Flowable.FlowableJust.Call() -> Java.Lang.Object?
ReactiveX.Internal.Operators.Flowable.FlowableJust.FlowableJust(Java.Lang.Object? value) -> void
ReactiveX.Internal.Operators.Flowable.FlowableLastMaybe
ReactiveX.Internal.Operators.Flowable.FlowableLastMaybe.FlowableLastMaybe(ReactiveStreams.IPublisher? source) -> void
ReactiveX.Internal.Operators.Flowable.FlowableLastSingle
ReactiveX.Internal.Operators.Flowable.FlowableLastSingle.FlowableLastSingle(ReactiveStreams.IPublisher? source, Java.Lang.Object? defaultItem) -> void
ReactiveX.Internal.Operators.Flowable.FlowableLift
ReactiveX.Internal.Operators.Flowable.FlowableLift.FlowableLift(ReactiveX.Flowable? source, ReactiveX.IFlowableOperator? operator) -> void
ReactiveX.Internal.Operators.Flowable.FlowableLift.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableLimit
ReactiveX.Internal.Operators.Flowable.FlowableLimit.FlowableLimit(ReactiveX.Flowable? source, long n) -> void
ReactiveX.Internal.Operators.Flowable.FlowableLimit.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableMap
ReactiveX.Internal.Operators.Flowable.FlowableMap.FlowableMap(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? mapper) -> void
ReactiveX.Internal.Operators.Flowable.FlowableMap.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableMapNotification
ReactiveX.Internal.Operators.Flowable.FlowableMapNotification.FlowableMapNotification(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? onNextMapper, ReactiveX.Functions.IFunction? onErrorMapper, Java.Util.Concurrent.ICallable? onCompleteSupplier) -> void
ReactiveX.Internal.Operators.Flowable.FlowableMapNotification.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableMapPublisher
ReactiveX.Internal.Operators.Flowable.FlowableMapPublisher.FlowableMapPublisher(ReactiveStreams.IPublisher? source, ReactiveX.Functions.IFunction? mapper) -> void
ReactiveX.Internal.Operators.Flowable.FlowableMaterialize
ReactiveX.Internal.Operators.Flowable.FlowableMaterialize.FlowableMaterialize(ReactiveX.Flowable? source) -> void
ReactiveX.Internal.Operators.Flowable.FlowableMaterialize.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableMergeWithCompletable
ReactiveX.Internal.Operators.Flowable.FlowableMergeWithCompletable.FlowableMergeWithCompletable(ReactiveX.Flowable? source, ReactiveX.ICompletableSource? other) -> void
ReactiveX.Internal.Operators.Flowable.FlowableMergeWithCompletable.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableMergeWithMaybe
ReactiveX.Internal.Operators.Flowable.FlowableMergeWithMaybe.FlowableMergeWithMaybe(ReactiveX.Flowable? source, ReactiveX.IMaybeSource? other) -> void
ReactiveX.Internal.Operators.Flowable.FlowableMergeWithMaybe.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableMergeWithSingle
ReactiveX.Internal.Operators.Flowable.FlowableMergeWithSingle.FlowableMergeWithSingle(ReactiveX.Flowable? source, ReactiveX.ISingleSource? other) -> void
ReactiveX.Internal.Operators.Flowable.FlowableMergeWithSingle.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableNever
ReactiveX.Internal.Operators.Flowable.FlowableObserveOn
ReactiveX.Internal.Operators.Flowable.FlowableObserveOn.FlowableObserveOn(ReactiveX.Flowable? source, ReactiveX.Scheduler? scheduler, bool delayError, int prefetch) -> void
ReactiveX.Internal.Operators.Flowable.FlowableObserveOn.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureBuffer
ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureBuffer.FlowableOnBackpressureBuffer(ReactiveX.Flowable? source, int bufferSize, bool unbounded, bool delayError, ReactiveX.Functions.IAction? onOverflow) -> void
ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureBuffer.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureBufferStrategy
ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureBufferStrategy.FlowableOnBackpressureBufferStrategy(ReactiveX.Flowable? source, long bufferSize, ReactiveX.Functions.IAction? onOverflow, ReactiveX.BackpressureOverflowStrategy? strategy) -> void
ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureBufferStrategy.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureDrop
ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureDrop.Accept(Java.Lang.Object? t) -> void
ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureDrop.FlowableOnBackpressureDrop(ReactiveX.Flowable? source) -> void
ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureDrop.FlowableOnBackpressureDrop(ReactiveX.Flowable? source, ReactiveX.Functions.IConsumer? onDrop) -> void
ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureDrop.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureError
ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureError.FlowableOnBackpressureError(ReactiveX.Flowable? source) -> void
ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureError.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureLatest
ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureLatest.FlowableOnBackpressureLatest(ReactiveX.Flowable? source) -> void
ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureLatest.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableOnErrorNext
ReactiveX.Internal.Operators.Flowable.FlowableOnErrorNext.FlowableOnErrorNext(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? nextSupplier, bool allowFatal) -> void
ReactiveX.Internal.Operators.Flowable.FlowableOnErrorNext.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableOnErrorReturn
ReactiveX.Internal.Operators.Flowable.FlowableOnErrorReturn.FlowableOnErrorReturn(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? valueSupplier) -> void
ReactiveX.Internal.Operators.Flowable.FlowableOnErrorReturn.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowablePublish
ReactiveX.Internal.Operators.Flowable.FlowablePublish.PublishBufferSize() -> int
ReactiveX.Internal.Operators.Flowable.FlowablePublish.PublishSource() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowablePublish.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowablePublishAlt
ReactiveX.Internal.Operators.Flowable.FlowablePublishAlt.FlowablePublishAlt(ReactiveStreams.IPublisher? source, int bufferSize) -> void
ReactiveX.Internal.Operators.Flowable.FlowablePublishAlt.PublishBufferSize() -> int
ReactiveX.Internal.Operators.Flowable.FlowablePublishAlt.ResetIf(ReactiveX.Disposables.IDisposable? connection) -> void
ReactiveX.Internal.Operators.Flowable.FlowablePublishAlt.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowablePublishMulticast
ReactiveX.Internal.Operators.Flowable.FlowablePublishMulticast.FlowablePublishMulticast(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? selector, int prefetch, bool delayError) -> void
ReactiveX.Internal.Operators.Flowable.FlowablePublishMulticast.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableRange
ReactiveX.Internal.Operators.Flowable.FlowableRange.FlowableRange(int start, int count) -> void
ReactiveX.Internal.Operators.Flowable.FlowableRangeLong
ReactiveX.Internal.Operators.Flowable.FlowableRangeLong.FlowableRangeLong(long start, long count) -> void
ReactiveX.Internal.Operators.Flowable.FlowableReduce
ReactiveX.Internal.Operators.Flowable.FlowableReduce.FlowableReduce(ReactiveX.Flowable? source, ReactiveX.Functions.IBiFunction? reducer) -> void
ReactiveX.Internal.Operators.Flowable.FlowableReduce.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableReduceMaybe
ReactiveX.Internal.Operators.Flowable.FlowableReduceMaybe.FlowableReduceMaybe(ReactiveX.Flowable? source, ReactiveX.Functions.IBiFunction? reducer) -> void
ReactiveX.Internal.Operators.Flowable.FlowableReduceMaybe.FuseToFlowable() -> ReactiveX.Flowable?
ReactiveX.Internal.Operators.Flowable.FlowableReduceMaybe.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableReduceSeedSingle
ReactiveX.Internal.Operators.Flowable.FlowableReduceSeedSingle.FlowableReduceSeedSingle(ReactiveStreams.IPublisher? source, Java.Lang.Object? seed, ReactiveX.Functions.IBiFunction? reducer) -> void
ReactiveX.Internal.Operators.Flowable.FlowableReduceWithSingle
ReactiveX.Internal.Operators.Flowable.FlowableReduceWithSingle.FlowableReduceWithSingle(ReactiveStreams.IPublisher? source, Java.Util.Concurrent.ICallable? seedSupplier, ReactiveX.Functions.IBiFunction? reducer) -> void
ReactiveX.Internal.Operators.Flowable.FlowableRefCount
ReactiveX.Internal.Operators.Flowable.FlowableRefCount.FlowableRefCount(ReactiveX.Flowables.ConnectableFlowable? source) -> void
ReactiveX.Internal.Operators.Flowable.FlowableRefCount.FlowableRefCount(ReactiveX.Flowables.ConnectableFlowable? source, int n, long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Flowable.FlowableRepeat
ReactiveX.Internal.Operators.Flowable.FlowableRepeat.FlowableRepeat(ReactiveX.Flowable? source, long count) -> void
ReactiveX.Internal.Operators.Flowable.FlowableRepeat.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableRepeatUntil
ReactiveX.Internal.Operators.Flowable.FlowableRepeatUntil.FlowableRepeatUntil(ReactiveX.Flowable? source, ReactiveX.Functions.IBooleanSupplier? until) -> void
ReactiveX.Internal.Operators.Flowable.FlowableRepeatUntil.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableRepeatWhen
ReactiveX.Internal.Operators.Flowable.FlowableRepeatWhen.FlowableRepeatWhen(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? handler) -> void
ReactiveX.Internal.Operators.Flowable.FlowableRepeatWhen.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableReplay
ReactiveX.Internal.Operators.Flowable.FlowableReplay.ResetIf(ReactiveX.Disposables.IDisposable? connectionObject) -> void
ReactiveX.Internal.Operators.Flowable.FlowableReplay.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableRetryBiPredicate
ReactiveX.Internal.Operators.Flowable.FlowableRetryBiPredicate.FlowableRetryBiPredicate(ReactiveX.Flowable? source, ReactiveX.Functions.IBiPredicate? predicate) -> void
ReactiveX.Internal.Operators.Flowable.FlowableRetryBiPredicate.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableRetryPredicate
ReactiveX.Internal.Operators.Flowable.FlowableRetryPredicate.FlowableRetryPredicate(ReactiveX.Flowable? source, long count, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Flowable.FlowableRetryPredicate.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableRetryWhen
ReactiveX.Internal.Operators.Flowable.FlowableRetryWhen.FlowableRetryWhen(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? handler) -> void
ReactiveX.Internal.Operators.Flowable.FlowableRetryWhen.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableSamplePublisher
ReactiveX.Internal.Operators.Flowable.FlowableSamplePublisher.FlowableSamplePublisher(ReactiveStreams.IPublisher? source, ReactiveStreams.IPublisher? other, bool emitLast) -> void
ReactiveX.Internal.Operators.Flowable.FlowableSampleTimed
ReactiveX.Internal.Operators.Flowable.FlowableSampleTimed.FlowableSampleTimed(ReactiveX.Flowable? source, long period, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool emitLast) -> void
ReactiveX.Internal.Operators.Flowable.FlowableSampleTimed.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableScalarXMap
ReactiveX.Internal.Operators.Flowable.FlowableScan
ReactiveX.Internal.Operators.Flowable.FlowableScan.FlowableScan(ReactiveX.Flowable? source, ReactiveX.Functions.IBiFunction? accumulator) -> void
ReactiveX.Internal.Operators.Flowable.FlowableScan.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableScanSeed
ReactiveX.Internal.Operators.Flowable.FlowableScanSeed.FlowableScanSeed(ReactiveX.Flowable? source, Java.Util.Concurrent.ICallable? seedSupplier, ReactiveX.Functions.IBiFunction? accumulator) -> void
ReactiveX.Internal.Operators.Flowable.FlowableScanSeed.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableSequenceEqual
ReactiveX.Internal.Operators.Flowable.FlowableSequenceEqual.FlowableSequenceEqual(ReactiveStreams.IPublisher? first, ReactiveStreams.IPublisher? second, ReactiveX.Functions.IBiPredicate? comparer, int prefetch) -> void
ReactiveX.Internal.Operators.Flowable.FlowableSequenceEqualSingle
ReactiveX.Internal.Operators.Flowable.FlowableSequenceEqualSingle.FlowableSequenceEqualSingle(ReactiveStreams.IPublisher? first, ReactiveStreams.IPublisher? second, ReactiveX.Functions.IBiPredicate? comparer, int prefetch) -> void
ReactiveX.Internal.Operators.Flowable.FlowableSequenceEqualSingle.FuseToFlowable() -> ReactiveX.Flowable?
ReactiveX.Internal.Operators.Flowable.FlowableSerialized
ReactiveX.Internal.Operators.Flowable.FlowableSerialized.FlowableSerialized(ReactiveX.Flowable? source) -> void
ReactiveX.Internal.Operators.Flowable.FlowableSerialized.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableSingle
ReactiveX.Internal.Operators.Flowable.FlowableSingle.FlowableSingle(ReactiveX.Flowable? source, Java.Lang.Object? defaultValue, bool failOnEmpty) -> void
ReactiveX.Internal.Operators.Flowable.FlowableSingle.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableSingleMaybe
ReactiveX.Internal.Operators.Flowable.FlowableSingleMaybe.FlowableSingleMaybe(ReactiveX.Flowable? source) -> void
ReactiveX.Internal.Operators.Flowable.FlowableSingleMaybe.FuseToFlowable() -> ReactiveX.Flowable?
ReactiveX.Internal.Operators.Flowable.FlowableSingleSingle
ReactiveX.Internal.Operators.Flowable.FlowableSingleSingle.FlowableSingleSingle(ReactiveX.Flowable? source, Java.Lang.Object? defaultValue) -> void
ReactiveX.Internal.Operators.Flowable.FlowableSingleSingle.FuseToFlowable() -> ReactiveX.Flowable?
ReactiveX.Internal.Operators.Flowable.FlowableSkip
ReactiveX.Internal.Operators.Flowable.FlowableSkip.FlowableSkip(ReactiveX.Flowable? source, long n) -> void
ReactiveX.Internal.Operators.Flowable.FlowableSkip.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableSkipLast
ReactiveX.Internal.Operators.Flowable.FlowableSkipLast.FlowableSkipLast(ReactiveX.Flowable? source, int skip) -> void
ReactiveX.Internal.Operators.Flowable.FlowableSkipLast.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableSkipLastTimed
ReactiveX.Internal.Operators.Flowable.FlowableSkipLastTimed.FlowableSkipLastTimed(ReactiveX.Flowable? source, long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, int bufferSize, bool delayError) -> void
ReactiveX.Internal.Operators.Flowable.FlowableSkipLastTimed.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableSkipUntil
ReactiveX.Internal.Operators.Flowable.FlowableSkipUntil.FlowableSkipUntil(ReactiveX.Flowable? source, ReactiveStreams.IPublisher? other) -> void
ReactiveX.Internal.Operators.Flowable.FlowableSkipUntil.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableSkipWhile
ReactiveX.Internal.Operators.Flowable.FlowableSkipWhile.FlowableSkipWhile(ReactiveX.Flowable? source, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Flowable.FlowableSkipWhile.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableSubscribeOn
ReactiveX.Internal.Operators.Flowable.FlowableSubscribeOn.FlowableSubscribeOn(ReactiveX.Flowable? source, ReactiveX.Scheduler? scheduler, bool nonScheduledRequests) -> void
ReactiveX.Internal.Operators.Flowable.FlowableSubscribeOn.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableSwitchIfEmpty
ReactiveX.Internal.Operators.Flowable.FlowableSwitchIfEmpty.FlowableSwitchIfEmpty(ReactiveX.Flowable? source, ReactiveStreams.IPublisher? other) -> void
ReactiveX.Internal.Operators.Flowable.FlowableSwitchIfEmpty.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableSwitchMap
ReactiveX.Internal.Operators.Flowable.FlowableSwitchMap.FlowableSwitchMap(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? mapper, int bufferSize, bool delayErrors) -> void
ReactiveX.Internal.Operators.Flowable.FlowableSwitchMap.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableTake
ReactiveX.Internal.Operators.Flowable.FlowableTake.FlowableTake(ReactiveX.Flowable? source, long limit) -> void
ReactiveX.Internal.Operators.Flowable.FlowableTake.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableTakeLast
ReactiveX.Internal.Operators.Flowable.FlowableTakeLast.FlowableTakeLast(ReactiveX.Flowable? source, int count) -> void
ReactiveX.Internal.Operators.Flowable.FlowableTakeLast.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableTakeLastOne
ReactiveX.Internal.Operators.Flowable.FlowableTakeLastOne.FlowableTakeLastOne(ReactiveX.Flowable? source) -> void
ReactiveX.Internal.Operators.Flowable.FlowableTakeLastOne.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableTakeLastTimed
ReactiveX.Internal.Operators.Flowable.FlowableTakeLastTimed.FlowableTakeLastTimed(ReactiveX.Flowable? source, long count, long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, int bufferSize, bool delayError) -> void
ReactiveX.Internal.Operators.Flowable.FlowableTakeLastTimed.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableTakePublisher
ReactiveX.Internal.Operators.Flowable.FlowableTakePublisher.FlowableTakePublisher(ReactiveStreams.IPublisher? source, long limit) -> void
ReactiveX.Internal.Operators.Flowable.FlowableTakeUntil
ReactiveX.Internal.Operators.Flowable.FlowableTakeUntil.FlowableTakeUntil(ReactiveX.Flowable? source, ReactiveStreams.IPublisher? other) -> void
ReactiveX.Internal.Operators.Flowable.FlowableTakeUntil.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableTakeUntilPredicate
ReactiveX.Internal.Operators.Flowable.FlowableTakeUntilPredicate.FlowableTakeUntilPredicate(ReactiveX.Flowable? source, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Flowable.FlowableTakeUntilPredicate.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableTakeWhile
ReactiveX.Internal.Operators.Flowable.FlowableTakeWhile.FlowableTakeWhile(ReactiveX.Flowable? source, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Flowable.FlowableTakeWhile.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableThrottleFirstTimed
ReactiveX.Internal.Operators.Flowable.FlowableThrottleFirstTimed.FlowableThrottleFirstTimed(ReactiveX.Flowable? source, long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Flowable.FlowableThrottleFirstTimed.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableThrottleLatest
ReactiveX.Internal.Operators.Flowable.FlowableThrottleLatest.FlowableThrottleLatest(ReactiveX.Flowable? source, long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool emitLast) -> void
ReactiveX.Internal.Operators.Flowable.FlowableThrottleLatest.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableTimeInterval
ReactiveX.Internal.Operators.Flowable.FlowableTimeInterval.FlowableTimeInterval(ReactiveX.Flowable? source, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Flowable.FlowableTimeInterval.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableTimeout
ReactiveX.Internal.Operators.Flowable.FlowableTimeout.FlowableTimeout(ReactiveX.Flowable? source, ReactiveStreams.IPublisher? firstTimeoutIndicator, ReactiveX.Functions.IFunction? itemTimeoutIndicator, ReactiveStreams.IPublisher? other) -> void
ReactiveX.Internal.Operators.Flowable.FlowableTimeout.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableTimeoutTimed
ReactiveX.Internal.Operators.Flowable.FlowableTimeoutTimed.FlowableTimeoutTimed(ReactiveX.Flowable? source, long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, ReactiveStreams.IPublisher? other) -> void
ReactiveX.Internal.Operators.Flowable.FlowableTimeoutTimed.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableTimer
ReactiveX.Internal.Operators.Flowable.FlowableTimer.FlowableTimer(long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Flowable.FlowableToList
ReactiveX.Internal.Operators.Flowable.FlowableToList.FlowableToList(ReactiveX.Flowable? source, Java.Util.Concurrent.ICallable? collectionSupplier) -> void
ReactiveX.Internal.Operators.Flowable.FlowableToList.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableToListSingle
ReactiveX.Internal.Operators.Flowable.FlowableToListSingle.FlowableToListSingle(ReactiveX.Flowable? source) -> void
ReactiveX.Internal.Operators.Flowable.FlowableToListSingle.FlowableToListSingle(ReactiveX.Flowable? source, Java.Util.Concurrent.ICallable? collectionSupplier) -> void
ReactiveX.Internal.Operators.Flowable.FlowableToListSingle.FuseToFlowable() -> ReactiveX.Flowable?
ReactiveX.Internal.Operators.Flowable.FlowableUnsubscribeOn
ReactiveX.Internal.Operators.Flowable.FlowableUnsubscribeOn.FlowableUnsubscribeOn(ReactiveX.Flowable? source, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Flowable.FlowableUnsubscribeOn.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableUsing
ReactiveX.Internal.Operators.Flowable.FlowableUsing.FlowableUsing(Java.Util.Concurrent.ICallable? resourceSupplier, ReactiveX.Functions.IFunction? sourceSupplier, ReactiveX.Functions.IConsumer? disposer, bool eager) -> void
ReactiveX.Internal.Operators.Flowable.FlowableWindow
ReactiveX.Internal.Operators.Flowable.FlowableWindow.FlowableWindow(ReactiveX.Flowable? source, long size, long skip, int bufferSize) -> void
ReactiveX.Internal.Operators.Flowable.FlowableWindow.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableWindowBoundary
ReactiveX.Internal.Operators.Flowable.FlowableWindowBoundary.FlowableWindowBoundary(ReactiveX.Flowable? source, ReactiveStreams.IPublisher? other, int capacityHint) -> void
ReactiveX.Internal.Operators.Flowable.FlowableWindowBoundary.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableWindowBoundarySelector
ReactiveX.Internal.Operators.Flowable.FlowableWindowBoundarySelector.FlowableWindowBoundarySelector(ReactiveX.Flowable? source, ReactiveStreams.IPublisher? open, ReactiveX.Functions.IFunction? close, int bufferSize) -> void
ReactiveX.Internal.Operators.Flowable.FlowableWindowBoundarySelector.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableWindowBoundarySupplier
ReactiveX.Internal.Operators.Flowable.FlowableWindowBoundarySupplier.FlowableWindowBoundarySupplier(ReactiveX.Flowable? source, Java.Util.Concurrent.ICallable? other, int capacityHint) -> void
ReactiveX.Internal.Operators.Flowable.FlowableWindowBoundarySupplier.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableWindowTimed
ReactiveX.Internal.Operators.Flowable.FlowableWindowTimed.FlowableWindowTimed(ReactiveX.Flowable? source, long timespan, long timeskip, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, long maxSize, int bufferSize, bool restartTimerOnMaxSize) -> void
ReactiveX.Internal.Operators.Flowable.FlowableWindowTimed.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableWithLatestFrom
ReactiveX.Internal.Operators.Flowable.FlowableWithLatestFrom.FlowableWithLatestFrom(ReactiveX.Flowable? source, ReactiveX.Functions.IBiFunction? combiner, ReactiveStreams.IPublisher? other) -> void
ReactiveX.Internal.Operators.Flowable.FlowableWithLatestFrom.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableWithLatestFromMany
ReactiveX.Internal.Operators.Flowable.FlowableWithLatestFromMany.FlowableWithLatestFromMany(ReactiveX.Flowable? source, Java.Lang.IIterable? otherIterable, ReactiveX.Functions.IFunction? combiner) -> void
ReactiveX.Internal.Operators.Flowable.FlowableWithLatestFromMany.FlowableWithLatestFromMany(ReactiveX.Flowable? source, ReactiveStreams.IPublisher![]? otherArray, ReactiveX.Functions.IFunction? combiner) -> void
ReactiveX.Internal.Operators.Flowable.FlowableWithLatestFromMany.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.FlowableZip
ReactiveX.Internal.Operators.Flowable.FlowableZip.FlowableZip(ReactiveStreams.IPublisher![]? sources, Java.Lang.IIterable? sourcesIterable, ReactiveX.Functions.IFunction? zipper, int bufferSize, bool delayError) -> void
ReactiveX.Internal.Operators.Flowable.FlowableZipIterable
ReactiveX.Internal.Operators.Flowable.FlowableZipIterable.FlowableZipIterable(ReactiveX.Flowable? source, Java.Lang.IIterable? other, ReactiveX.Functions.IBiFunction? zipper) -> void
ReactiveX.Internal.Operators.Flowable.FlowableZipIterable.Source() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Flowable.IFlowablePublishClassic
ReactiveX.Internal.Operators.Flowable.IFlowablePublishClassic.PublishBufferSize() -> int
ReactiveX.Internal.Operators.Flowable.IFlowablePublishClassic.PublishSource() -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Maybe.MaybeAmb
ReactiveX.Internal.Operators.Maybe.MaybeAmb.MaybeAmb(ReactiveX.IMaybeSource![]? sources, Java.Lang.IIterable? sourcesIterable) -> void
ReactiveX.Internal.Operators.Maybe.MaybeCache
ReactiveX.Internal.Operators.Maybe.MaybeCache.MaybeCache(ReactiveX.IMaybeSource? source) -> void
ReactiveX.Internal.Operators.Maybe.MaybeCache.OnComplete() -> void
ReactiveX.Internal.Operators.Maybe.MaybeCache.OnError(Java.Lang.Throwable? e) -> void
ReactiveX.Internal.Operators.Maybe.MaybeCache.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Operators.Maybe.MaybeCache.OnSuccess(Java.Lang.Object? value) -> void
ReactiveX.Internal.Operators.Maybe.MaybeCallbackObserver
ReactiveX.Internal.Operators.Maybe.MaybeCallbackObserver.Dispose() -> void
ReactiveX.Internal.Operators.Maybe.MaybeCallbackObserver.HasCustomOnError.get -> bool
ReactiveX.Internal.Operators.Maybe.MaybeCallbackObserver.IsDisposed.get -> bool
ReactiveX.Internal.Operators.Maybe.MaybeCallbackObserver.MaybeCallbackObserver(ReactiveX.Functions.IConsumer? onSuccess, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete) -> void
ReactiveX.Internal.Operators.Maybe.MaybeCallbackObserver.OnComplete() -> void
ReactiveX.Internal.Operators.Maybe.MaybeCallbackObserver.OnError(Java.Lang.Throwable? e) -> void
ReactiveX.Internal.Operators.Maybe.MaybeCallbackObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Operators.Maybe.MaybeCallbackObserver.OnSuccess(Java.Lang.Object? value) -> void
ReactiveX.Internal.Operators.Maybe.MaybeConcatArray
ReactiveX.Internal.Operators.Maybe.MaybeConcatArray.MaybeConcatArray(ReactiveX.IMaybeSource![]? sources) -> void
ReactiveX.Internal.Operators.Maybe.MaybeConcatArrayDelayError
ReactiveX.Internal.Operators.Maybe.MaybeConcatArrayDelayError.MaybeConcatArrayDelayError(ReactiveX.IMaybeSource![]? sources) -> void
ReactiveX.Internal.Operators.Maybe.MaybeConcatIterable
ReactiveX.Internal.Operators.Maybe.MaybeConcatIterable.MaybeConcatIterable(Java.Lang.IIterable? sources) -> void
ReactiveX.Internal.Operators.Maybe.MaybeContains
ReactiveX.Internal.Operators.Maybe.MaybeContains.MaybeContains(ReactiveX.IMaybeSource? source, Java.Lang.Object? value) -> void
ReactiveX.Internal.Operators.Maybe.MaybeContains.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeCount
ReactiveX.Internal.Operators.Maybe.MaybeCount.MaybeCount(ReactiveX.IMaybeSource? source) -> void
ReactiveX.Internal.Operators.Maybe.MaybeCount.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeCreate
ReactiveX.Internal.Operators.Maybe.MaybeCreate.MaybeCreate(ReactiveX.IMaybeOnSubscribe? source) -> void
ReactiveX.Internal.Operators.Maybe.MaybeDefer
ReactiveX.Internal.Operators.Maybe.MaybeDefer.MaybeDefer(Java.Util.Concurrent.ICallable? maybeSupplier) -> void
ReactiveX.Internal.Operators.Maybe.MaybeDelay
ReactiveX.Internal.Operators.Maybe.MaybeDelay.MaybeDelay(ReactiveX.IMaybeSource? source, long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Maybe.MaybeDelay.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeDelayOtherPublisher
ReactiveX.Internal.Operators.Maybe.MaybeDelayOtherPublisher.MaybeDelayOtherPublisher(ReactiveX.IMaybeSource? source, ReactiveStreams.IPublisher? other) -> void
ReactiveX.Internal.Operators.Maybe.MaybeDelayOtherPublisher.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeDelaySubscriptionOtherPublisher
ReactiveX.Internal.Operators.Maybe.MaybeDelaySubscriptionOtherPublisher.MaybeDelaySubscriptionOtherPublisher(ReactiveX.IMaybeSource? source, ReactiveStreams.IPublisher? other) -> void
ReactiveX.Internal.Operators.Maybe.MaybeDelaySubscriptionOtherPublisher.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeDelayWithCompletable
ReactiveX.Internal.Operators.Maybe.MaybeDelayWithCompletable.MaybeDelayWithCompletable(ReactiveX.IMaybeSource? source, ReactiveX.ICompletableSource? other) -> void
ReactiveX.Internal.Operators.Maybe.MaybeDetach
ReactiveX.Internal.Operators.Maybe.MaybeDetach.MaybeDetach(ReactiveX.IMaybeSource? source) -> void
ReactiveX.Internal.Operators.Maybe.MaybeDetach.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeDoAfterSuccess
ReactiveX.Internal.Operators.Maybe.MaybeDoAfterSuccess.MaybeDoAfterSuccess(ReactiveX.IMaybeSource? source, ReactiveX.Functions.IConsumer? onAfterSuccess) -> void
ReactiveX.Internal.Operators.Maybe.MaybeDoAfterSuccess.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeDoFinally
ReactiveX.Internal.Operators.Maybe.MaybeDoFinally.MaybeDoFinally(ReactiveX.IMaybeSource? source, ReactiveX.Functions.IAction? onFinally) -> void
ReactiveX.Internal.Operators.Maybe.MaybeDoFinally.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeDoOnEvent
ReactiveX.Internal.Operators.Maybe.MaybeDoOnEvent.MaybeDoOnEvent(ReactiveX.IMaybeSource? source, ReactiveX.Functions.IBiConsumer? onEvent) -> void
ReactiveX.Internal.Operators.Maybe.MaybeDoOnEvent.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeDoOnTerminate
ReactiveX.Internal.Operators.Maybe.MaybeDoOnTerminate.MaybeDoOnTerminate(ReactiveX.IMaybeSource? source, ReactiveX.Functions.IAction? onTerminate) -> void
ReactiveX.Internal.Operators.Maybe.MaybeEmpty
ReactiveX.Internal.Operators.Maybe.MaybeEmpty.Call() -> Java.Lang.Object?
ReactiveX.Internal.Operators.Maybe.MaybeEmpty.MaybeEmpty() -> void
ReactiveX.Internal.Operators.Maybe.MaybeEqualSingle
ReactiveX.Internal.Operators.Maybe.MaybeEqualSingle.MaybeEqualSingle(ReactiveX.IMaybeSource? source1, ReactiveX.IMaybeSource? source2, ReactiveX.Functions.IBiPredicate? isEqual) -> void
ReactiveX.Internal.Operators.Maybe.MaybeError
ReactiveX.Internal.Operators.Maybe.MaybeError.MaybeError(Java.Lang.Throwable? error) -> void
ReactiveX.Internal.Operators.Maybe.MaybeErrorCallable
ReactiveX.Internal.Operators.Maybe.MaybeErrorCallable.MaybeErrorCallable(Java.Util.Concurrent.ICallable? errorSupplier) -> void
ReactiveX.Internal.Operators.Maybe.MaybeFilter
ReactiveX.Internal.Operators.Maybe.MaybeFilter.MaybeFilter(ReactiveX.IMaybeSource? source, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Maybe.MaybeFilter.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeFilterSingle
ReactiveX.Internal.Operators.Maybe.MaybeFilterSingle.MaybeFilterSingle(ReactiveX.ISingleSource? source, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Maybe.MaybeFlatMapBiSelector
ReactiveX.Internal.Operators.Maybe.MaybeFlatMapBiSelector.MaybeFlatMapBiSelector(ReactiveX.IMaybeSource? source, ReactiveX.Functions.IFunction? mapper, ReactiveX.Functions.IBiFunction? resultSelector) -> void
ReactiveX.Internal.Operators.Maybe.MaybeFlatMapBiSelector.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeFlatMapCompletable
ReactiveX.Internal.Operators.Maybe.MaybeFlatMapCompletable.MaybeFlatMapCompletable(ReactiveX.IMaybeSource? source, ReactiveX.Functions.IFunction? mapper) -> void
ReactiveX.Internal.Operators.Maybe.MaybeFlatMapIterableFlowable
ReactiveX.Internal.Operators.Maybe.MaybeFlatMapIterableFlowable.MaybeFlatMapIterableFlowable(ReactiveX.IMaybeSource? source, ReactiveX.Functions.IFunction? mapper) -> void
ReactiveX.Internal.Operators.Maybe.MaybeFlatMapIterableObservable
ReactiveX.Internal.Operators.Maybe.MaybeFlatMapIterableObservable.MaybeFlatMapIterableObservable(ReactiveX.IMaybeSource? source, ReactiveX.Functions.IFunction? mapper) -> void
ReactiveX.Internal.Operators.Maybe.MaybeFlatMapNotification
ReactiveX.Internal.Operators.Maybe.MaybeFlatMapNotification.MaybeFlatMapNotification(ReactiveX.IMaybeSource? source, ReactiveX.Functions.IFunction? onSuccessMapper, ReactiveX.Functions.IFunction? onErrorMapper, Java.Util.Concurrent.ICallable? onCompleteSupplier) -> void
ReactiveX.Internal.Operators.Maybe.MaybeFlatMapNotification.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeFlatMapSingle
ReactiveX.Internal.Operators.Maybe.MaybeFlatMapSingle.MaybeFlatMapSingle(ReactiveX.IMaybeSource? source, ReactiveX.Functions.IFunction? mapper) -> void
ReactiveX.Internal.Operators.Maybe.MaybeFlatMapSingleElement
ReactiveX.Internal.Operators.Maybe.MaybeFlatMapSingleElement.MaybeFlatMapSingleElement(ReactiveX.IMaybeSource? source, ReactiveX.Functions.IFunction? mapper) -> void
ReactiveX.Internal.Operators.Maybe.MaybeFlatten
ReactiveX.Internal.Operators.Maybe.MaybeFlatten.MaybeFlatten(ReactiveX.IMaybeSource? source, ReactiveX.Functions.IFunction? mapper) -> void
ReactiveX.Internal.Operators.Maybe.MaybeFlatten.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeFromAction
ReactiveX.Internal.Operators.Maybe.MaybeFromAction.Call() -> Java.Lang.Object?
ReactiveX.Internal.Operators.Maybe.MaybeFromAction.MaybeFromAction(ReactiveX.Functions.IAction? action) -> void
ReactiveX.Internal.Operators.Maybe.MaybeFromCallable
ReactiveX.Internal.Operators.Maybe.MaybeFromCallable.Call() -> Java.Lang.Object?
ReactiveX.Internal.Operators.Maybe.MaybeFromCallable.MaybeFromCallable(Java.Util.Concurrent.ICallable? callable) -> void
ReactiveX.Internal.Operators.Maybe.MaybeFromCompletable
ReactiveX.Internal.Operators.Maybe.MaybeFromCompletable.MaybeFromCompletable(ReactiveX.ICompletableSource? source) -> void
ReactiveX.Internal.Operators.Maybe.MaybeFromCompletable.Source() -> ReactiveX.ICompletableSource?
ReactiveX.Internal.Operators.Maybe.MaybeFromFuture
ReactiveX.Internal.Operators.Maybe.MaybeFromFuture.MaybeFromFuture(Java.Util.Concurrent.IFuture? future, long timeout, Java.Util.Concurrent.TimeUnit? unit) -> void
ReactiveX.Internal.Operators.Maybe.MaybeFromRunnable
ReactiveX.Internal.Operators.Maybe.MaybeFromRunnable.Call() -> Java.Lang.Object?
ReactiveX.Internal.Operators.Maybe.MaybeFromRunnable.MaybeFromRunnable(Java.Lang.IRunnable? runnable) -> void
ReactiveX.Internal.Operators.Maybe.MaybeFromSingle
ReactiveX.Internal.Operators.Maybe.MaybeFromSingle.MaybeFromSingle(ReactiveX.ISingleSource? source) -> void
ReactiveX.Internal.Operators.Maybe.MaybeFromSingle.Source() -> ReactiveX.ISingleSource?
ReactiveX.Internal.Operators.Maybe.MaybeHide
ReactiveX.Internal.Operators.Maybe.MaybeHide.MaybeHide(ReactiveX.IMaybeSource? source) -> void
ReactiveX.Internal.Operators.Maybe.MaybeHide.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeIgnoreElement
ReactiveX.Internal.Operators.Maybe.MaybeIgnoreElement.MaybeIgnoreElement(ReactiveX.IMaybeSource? source) -> void
ReactiveX.Internal.Operators.Maybe.MaybeIgnoreElement.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeIgnoreElementCompletable
ReactiveX.Internal.Operators.Maybe.MaybeIgnoreElementCompletable.FuseToMaybe() -> ReactiveX.Maybe?
ReactiveX.Internal.Operators.Maybe.MaybeIgnoreElementCompletable.MaybeIgnoreElementCompletable(ReactiveX.IMaybeSource? source) -> void
ReactiveX.Internal.Operators.Maybe.MaybeIsEmpty
ReactiveX.Internal.Operators.Maybe.MaybeIsEmpty.MaybeIsEmpty(ReactiveX.IMaybeSource? source) -> void
ReactiveX.Internal.Operators.Maybe.MaybeIsEmpty.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeIsEmptySingle
ReactiveX.Internal.Operators.Maybe.MaybeIsEmptySingle.FuseToMaybe() -> ReactiveX.Maybe?
ReactiveX.Internal.Operators.Maybe.MaybeIsEmptySingle.MaybeIsEmptySingle(ReactiveX.IMaybeSource? source) -> void
ReactiveX.Internal.Operators.Maybe.MaybeIsEmptySingle.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeJust
ReactiveX.Internal.Operators.Maybe.MaybeJust.Call() -> Java.Lang.Object?
ReactiveX.Internal.Operators.Maybe.MaybeJust.MaybeJust(Java.Lang.Object? value) -> void
ReactiveX.Internal.Operators.Maybe.MaybeLift
ReactiveX.Internal.Operators.Maybe.MaybeLift.MaybeLift(ReactiveX.IMaybeSource? source, ReactiveX.IMaybeOperator? operator) -> void
ReactiveX.Internal.Operators.Maybe.MaybeLift.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeMap
ReactiveX.Internal.Operators.Maybe.MaybeMap.MaybeMap(ReactiveX.IMaybeSource? source, ReactiveX.Functions.IFunction? mapper) -> void
ReactiveX.Internal.Operators.Maybe.MaybeMap.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeMaterialize
ReactiveX.Internal.Operators.Maybe.MaybeMaterialize.MaybeMaterialize(ReactiveX.Maybe? source) -> void
ReactiveX.Internal.Operators.Maybe.MaybeMergeArray
ReactiveX.Internal.Operators.Maybe.MaybeMergeArray.MaybeMergeArray(ReactiveX.IMaybeSource![]? sources) -> void
ReactiveX.Internal.Operators.Maybe.MaybeNever
ReactiveX.Internal.Operators.Maybe.MaybeNever.MaybeNever() -> void
ReactiveX.Internal.Operators.Maybe.MaybeObserveOn
ReactiveX.Internal.Operators.Maybe.MaybeObserveOn.MaybeObserveOn(ReactiveX.IMaybeSource? source, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Maybe.MaybeObserveOn.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeOnErrorComplete
ReactiveX.Internal.Operators.Maybe.MaybeOnErrorComplete.MaybeOnErrorComplete(ReactiveX.IMaybeSource? source, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Maybe.MaybeOnErrorComplete.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeOnErrorNext
ReactiveX.Internal.Operators.Maybe.MaybeOnErrorNext.MaybeOnErrorNext(ReactiveX.IMaybeSource? source, ReactiveX.Functions.IFunction? resumeFunction, bool allowFatal) -> void
ReactiveX.Internal.Operators.Maybe.MaybeOnErrorNext.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeOnErrorReturn
ReactiveX.Internal.Operators.Maybe.MaybeOnErrorReturn.MaybeOnErrorReturn(ReactiveX.IMaybeSource? source, ReactiveX.Functions.IFunction? valueSupplier) -> void
ReactiveX.Internal.Operators.Maybe.MaybeOnErrorReturn.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybePeek
ReactiveX.Internal.Operators.Maybe.MaybePeek.MaybePeek(ReactiveX.IMaybeSource? source, ReactiveX.Functions.IConsumer? onSubscribeCall, ReactiveX.Functions.IConsumer? onSuccessCall, ReactiveX.Functions.IConsumer? onErrorCall, ReactiveX.Functions.IAction? onCompleteCall, ReactiveX.Functions.IAction? onAfterTerminate, ReactiveX.Functions.IAction? onDispose) -> void
ReactiveX.Internal.Operators.Maybe.MaybePeek.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeSubscribeOn
ReactiveX.Internal.Operators.Maybe.MaybeSubscribeOn.MaybeSubscribeOn(ReactiveX.IMaybeSource? source, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Maybe.MaybeSubscribeOn.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeSwitchIfEmpty
ReactiveX.Internal.Operators.Maybe.MaybeSwitchIfEmpty.MaybeSwitchIfEmpty(ReactiveX.IMaybeSource? source, ReactiveX.IMaybeSource? other) -> void
ReactiveX.Internal.Operators.Maybe.MaybeSwitchIfEmpty.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeSwitchIfEmptySingle
ReactiveX.Internal.Operators.Maybe.MaybeSwitchIfEmptySingle.MaybeSwitchIfEmptySingle(ReactiveX.IMaybeSource? source, ReactiveX.ISingleSource? other) -> void
ReactiveX.Internal.Operators.Maybe.MaybeSwitchIfEmptySingle.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeTakeUntilMaybe
ReactiveX.Internal.Operators.Maybe.MaybeTakeUntilMaybe.MaybeTakeUntilMaybe(ReactiveX.IMaybeSource? source, ReactiveX.IMaybeSource? other) -> void
ReactiveX.Internal.Operators.Maybe.MaybeTakeUntilMaybe.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeTakeUntilPublisher
ReactiveX.Internal.Operators.Maybe.MaybeTakeUntilPublisher.MaybeTakeUntilPublisher(ReactiveX.IMaybeSource? source, ReactiveStreams.IPublisher? other) -> void
ReactiveX.Internal.Operators.Maybe.MaybeTakeUntilPublisher.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeTimeoutMaybe
ReactiveX.Internal.Operators.Maybe.MaybeTimeoutMaybe.MaybeTimeoutMaybe(ReactiveX.IMaybeSource? source, ReactiveX.IMaybeSource? other, ReactiveX.IMaybeSource? fallback) -> void
ReactiveX.Internal.Operators.Maybe.MaybeTimeoutMaybe.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeTimeoutPublisher
ReactiveX.Internal.Operators.Maybe.MaybeTimeoutPublisher.MaybeTimeoutPublisher(ReactiveX.IMaybeSource? source, ReactiveStreams.IPublisher? other, ReactiveX.IMaybeSource? fallback) -> void
ReactiveX.Internal.Operators.Maybe.MaybeTimeoutPublisher.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeTimer
ReactiveX.Internal.Operators.Maybe.MaybeTimer.MaybeTimer(long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Maybe.MaybeToFlowable
ReactiveX.Internal.Operators.Maybe.MaybeToFlowable.MaybeToFlowable(ReactiveX.IMaybeSource? source) -> void
ReactiveX.Internal.Operators.Maybe.MaybeToFlowable.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeToObservable
ReactiveX.Internal.Operators.Maybe.MaybeToObservable.MaybeToObservable(ReactiveX.IMaybeSource? source) -> void
ReactiveX.Internal.Operators.Maybe.MaybeToObservable.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeToPublisher
ReactiveX.Internal.Operators.Maybe.MaybeToPublisher.Apply(ReactiveX.IMaybeSource? t) -> ReactiveStreams.IPublisher?
ReactiveX.Internal.Operators.Maybe.MaybeToSingle
ReactiveX.Internal.Operators.Maybe.MaybeToSingle.MaybeToSingle(ReactiveX.IMaybeSource? source, Java.Lang.Object? defaultValue) -> void
ReactiveX.Internal.Operators.Maybe.MaybeToSingle.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeUnsafeCreate
ReactiveX.Internal.Operators.Maybe.MaybeUnsafeCreate.MaybeUnsafeCreate(ReactiveX.IMaybeSource? source) -> void
ReactiveX.Internal.Operators.Maybe.MaybeUnsafeCreate.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeUnsubscribeOn
ReactiveX.Internal.Operators.Maybe.MaybeUnsubscribeOn.MaybeUnsubscribeOn(ReactiveX.IMaybeSource? source, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Maybe.MaybeUnsubscribeOn.Source() -> ReactiveX.IMaybeSource?
ReactiveX.Internal.Operators.Maybe.MaybeUsing
ReactiveX.Internal.Operators.Maybe.MaybeUsing.MaybeUsing(Java.Util.Concurrent.ICallable? resourceSupplier, ReactiveX.Functions.IFunction? sourceSupplier, ReactiveX.Functions.IConsumer? resourceDisposer, bool eager) -> void
ReactiveX.Internal.Operators.Maybe.MaybeZipArray
ReactiveX.Internal.Operators.Maybe.MaybeZipArray.MaybeZipArray(ReactiveX.IMaybeSource![]? sources, ReactiveX.Functions.IFunction? zipper) -> void
ReactiveX.Internal.Operators.Maybe.MaybeZipIterable
ReactiveX.Internal.Operators.Maybe.MaybeZipIterable.MaybeZipIterable(Java.Lang.IIterable? sources, ReactiveX.Functions.IFunction? zipper) -> void
ReactiveX.Internal.Operators.Mixed.CompletableAndThenObservable
ReactiveX.Internal.Operators.Mixed.CompletableAndThenObservable.CompletableAndThenObservable(ReactiveX.ICompletableSource? source, ReactiveX.IObservableSource? other) -> void
ReactiveX.Internal.Operators.Mixed.CompletableAndThenPublisher
ReactiveX.Internal.Operators.Mixed.CompletableAndThenPublisher.CompletableAndThenPublisher(ReactiveX.ICompletableSource? source, ReactiveStreams.IPublisher? other) -> void
ReactiveX.Internal.Operators.Mixed.FlowableConcatMapCompletable
ReactiveX.Internal.Operators.Mixed.FlowableConcatMapCompletable.FlowableConcatMapCompletable(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? mapper, ReactiveX.Internal.Util.ErrorMode? errorMode, int prefetch) -> void
ReactiveX.Internal.Operators.Mixed.FlowableConcatMapMaybe
ReactiveX.Internal.Operators.Mixed.FlowableConcatMapMaybe.FlowableConcatMapMaybe(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? mapper, ReactiveX.Internal.Util.ErrorMode? errorMode, int prefetch) -> void
ReactiveX.Internal.Operators.Mixed.FlowableConcatMapSingle
ReactiveX.Internal.Operators.Mixed.FlowableConcatMapSingle.FlowableConcatMapSingle(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? mapper, ReactiveX.Internal.Util.ErrorMode? errorMode, int prefetch) -> void
ReactiveX.Internal.Operators.Mixed.FlowableSwitchMapCompletable
ReactiveX.Internal.Operators.Mixed.FlowableSwitchMapCompletable.FlowableSwitchMapCompletable(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? mapper, bool delayErrors) -> void
ReactiveX.Internal.Operators.Mixed.FlowableSwitchMapMaybe
ReactiveX.Internal.Operators.Mixed.FlowableSwitchMapMaybe.FlowableSwitchMapMaybe(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? mapper, bool delayErrors) -> void
ReactiveX.Internal.Operators.Mixed.FlowableSwitchMapSingle
ReactiveX.Internal.Operators.Mixed.FlowableSwitchMapSingle.FlowableSwitchMapSingle(ReactiveX.Flowable? source, ReactiveX.Functions.IFunction? mapper, bool delayErrors) -> void
ReactiveX.Internal.Operators.Mixed.MaterializeSingleObserver
ReactiveX.Internal.Operators.Mixed.MaterializeSingleObserver.Dispose() -> void
ReactiveX.Internal.Operators.Mixed.MaterializeSingleObserver.IsDisposed.get -> bool
ReactiveX.Internal.Operators.Mixed.MaterializeSingleObserver.MaterializeSingleObserver(ReactiveX.ISingleObserver? downstream) -> void
ReactiveX.Internal.Operators.Mixed.MaterializeSingleObserver.OnComplete() -> void
ReactiveX.Internal.Operators.Mixed.MaterializeSingleObserver.OnError(Java.Lang.Throwable? e) -> void
ReactiveX.Internal.Operators.Mixed.MaterializeSingleObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Operators.Mixed.MaterializeSingleObserver.OnSuccess(Java.Lang.Object? t) -> void
ReactiveX.Internal.Operators.Mixed.MaybeFlatMapObservable
ReactiveX.Internal.Operators.Mixed.MaybeFlatMapObservable.MaybeFlatMapObservable(ReactiveX.IMaybeSource? source, ReactiveX.Functions.IFunction? mapper) -> void
ReactiveX.Internal.Operators.Mixed.MaybeFlatMapPublisher
ReactiveX.Internal.Operators.Mixed.MaybeFlatMapPublisher.MaybeFlatMapPublisher(ReactiveX.IMaybeSource? source, ReactiveX.Functions.IFunction? mapper) -> void
ReactiveX.Internal.Operators.Mixed.ObservableConcatMapCompletable
ReactiveX.Internal.Operators.Mixed.ObservableConcatMapCompletable.ObservableConcatMapCompletable(ReactiveX.Observable? source, ReactiveX.Functions.IFunction? mapper, ReactiveX.Internal.Util.ErrorMode? errorMode, int prefetch) -> void
ReactiveX.Internal.Operators.Mixed.ObservableConcatMapMaybe
ReactiveX.Internal.Operators.Mixed.ObservableConcatMapMaybe.ObservableConcatMapMaybe(ReactiveX.Observable? source, ReactiveX.Functions.IFunction? mapper, ReactiveX.Internal.Util.ErrorMode? errorMode, int prefetch) -> void
ReactiveX.Internal.Operators.Mixed.ObservableConcatMapSingle
ReactiveX.Internal.Operators.Mixed.ObservableConcatMapSingle.ObservableConcatMapSingle(ReactiveX.Observable? source, ReactiveX.Functions.IFunction? mapper, ReactiveX.Internal.Util.ErrorMode? errorMode, int prefetch) -> void
ReactiveX.Internal.Operators.Mixed.ObservableSwitchMapCompletable
ReactiveX.Internal.Operators.Mixed.ObservableSwitchMapCompletable.ObservableSwitchMapCompletable(ReactiveX.Observable? source, ReactiveX.Functions.IFunction? mapper, bool delayErrors) -> void
ReactiveX.Internal.Operators.Mixed.ObservableSwitchMapMaybe
ReactiveX.Internal.Operators.Mixed.ObservableSwitchMapMaybe.ObservableSwitchMapMaybe(ReactiveX.Observable? source, ReactiveX.Functions.IFunction? mapper, bool delayErrors) -> void
ReactiveX.Internal.Operators.Mixed.ObservableSwitchMapSingle
ReactiveX.Internal.Operators.Mixed.ObservableSwitchMapSingle.ObservableSwitchMapSingle(ReactiveX.Observable? source, ReactiveX.Functions.IFunction? mapper, bool delayErrors) -> void
ReactiveX.Internal.Operators.Mixed.SingleFlatMapObservable
ReactiveX.Internal.Operators.Mixed.SingleFlatMapObservable.SingleFlatMapObservable(ReactiveX.ISingleSource? source, ReactiveX.Functions.IFunction? mapper) -> void
ReactiveX.Internal.Operators.Observable.BlockingObservableIterable
ReactiveX.Internal.Operators.Observable.BlockingObservableIterable.BlockingObservableIterable(ReactiveX.IObservableSource? source, int bufferSize) -> void
ReactiveX.Internal.Operators.Observable.BlockingObservableIterable.Iterator() -> Java.Util.IIterator?
ReactiveX.Internal.Operators.Observable.BlockingObservableLatest
ReactiveX.Internal.Operators.Observable.BlockingObservableLatest.BlockingObservableLatest(ReactiveX.IObservableSource? source) -> void
ReactiveX.Internal.Operators.Observable.BlockingObservableLatest.Iterator() -> Java.Util.IIterator?
ReactiveX.Internal.Operators.Observable.BlockingObservableMostRecent
ReactiveX.Internal.Operators.Observable.BlockingObservableMostRecent.BlockingObservableMostRecent(ReactiveX.IObservableSource? source, Java.Lang.Object? initialValue) -> void
ReactiveX.Internal.Operators.Observable.BlockingObservableMostRecent.Iterator() -> Java.Util.IIterator?
ReactiveX.Internal.Operators.Observable.BlockingObservableNext
ReactiveX.Internal.Operators.Observable.BlockingObservableNext.BlockingObservableNext(ReactiveX.IObservableSource? source) -> void
ReactiveX.Internal.Operators.Observable.BlockingObservableNext.Iterator() -> Java.Util.IIterator?
ReactiveX.Internal.Operators.Observable.IObservablePublishClassic
ReactiveX.Internal.Operators.Observable.IObservablePublishClassic.PublishSource() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableAll
ReactiveX.Internal.Operators.Observable.ObservableAll.ObservableAll(ReactiveX.IObservableSource? source, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Observable.ObservableAll.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableAllSingle
ReactiveX.Internal.Operators.Observable.ObservableAllSingle.FuseToObservable() -> ReactiveX.Observable?
ReactiveX.Internal.Operators.Observable.ObservableAllSingle.ObservableAllSingle(ReactiveX.IObservableSource? source, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Observable.ObservableAmb
ReactiveX.Internal.Operators.Observable.ObservableAmb.ObservableAmb(ReactiveX.IObservableSource![]? sources, Java.Lang.IIterable? sourcesIterable) -> void
ReactiveX.Internal.Operators.Observable.ObservableAny
ReactiveX.Internal.Operators.Observable.ObservableAny.ObservableAny(ReactiveX.IObservableSource? source, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Observable.ObservableAny.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableAnySingle
ReactiveX.Internal.Operators.Observable.ObservableAnySingle.FuseToObservable() -> ReactiveX.Observable?
ReactiveX.Internal.Operators.Observable.ObservableAnySingle.ObservableAnySingle(ReactiveX.IObservableSource? source, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Observable.ObservableAutoConnect
ReactiveX.Internal.Operators.Observable.ObservableAutoConnect.ObservableAutoConnect(ReactiveX.Observables.ConnectableObservable? source, int numberOfObservers, ReactiveX.Functions.IConsumer? connection) -> void
ReactiveX.Internal.Operators.Observable.ObservableBlockingSubscribe
ReactiveX.Internal.Operators.Observable.ObservableBuffer
ReactiveX.Internal.Operators.Observable.ObservableBuffer.ObservableBuffer(ReactiveX.IObservableSource? source, int count, int skip, Java.Util.Concurrent.ICallable? bufferSupplier) -> void
ReactiveX.Internal.Operators.Observable.ObservableBuffer.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableBufferBoundary
ReactiveX.Internal.Operators.Observable.ObservableBufferBoundary.ObservableBufferBoundary(ReactiveX.IObservableSource? source, ReactiveX.IObservableSource? bufferOpen, ReactiveX.Functions.IFunction? bufferClose, Java.Util.Concurrent.ICallable? bufferSupplier) -> void
ReactiveX.Internal.Operators.Observable.ObservableBufferBoundary.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableBufferBoundarySupplier
ReactiveX.Internal.Operators.Observable.ObservableBufferBoundarySupplier.ObservableBufferBoundarySupplier(ReactiveX.IObservableSource? source, Java.Util.Concurrent.ICallable? boundarySupplier, Java.Util.Concurrent.ICallable? bufferSupplier) -> void
ReactiveX.Internal.Operators.Observable.ObservableBufferBoundarySupplier.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableBufferExactBoundary
ReactiveX.Internal.Operators.Observable.ObservableBufferExactBoundary.ObservableBufferExactBoundary(ReactiveX.IObservableSource? source, ReactiveX.IObservableSource? boundary, Java.Util.Concurrent.ICallable? bufferSupplier) -> void
ReactiveX.Internal.Operators.Observable.ObservableBufferExactBoundary.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableBufferTimed
ReactiveX.Internal.Operators.Observable.ObservableBufferTimed.ObservableBufferTimed(ReactiveX.IObservableSource? source, long timespan, long timeskip, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, Java.Util.Concurrent.ICallable? bufferSupplier, int maxSize, bool restartTimerOnMaxSize) -> void
ReactiveX.Internal.Operators.Observable.ObservableBufferTimed.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableCache
ReactiveX.Internal.Operators.Observable.ObservableCache.ObservableCache(ReactiveX.Observable? source, int capacityHint) -> void
ReactiveX.Internal.Operators.Observable.ObservableCache.OnComplete() -> void
ReactiveX.Internal.Operators.Observable.ObservableCache.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Operators.Observable.ObservableCache.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Internal.Operators.Observable.ObservableCache.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Operators.Observable.ObservableCache.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableCollect
ReactiveX.Internal.Operators.Observable.ObservableCollect.ObservableCollect(ReactiveX.IObservableSource? source, Java.Util.Concurrent.ICallable? initialSupplier, ReactiveX.Functions.IBiConsumer? collector) -> void
ReactiveX.Internal.Operators.Observable.ObservableCollect.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableCollectSingle
ReactiveX.Internal.Operators.Observable.ObservableCollectSingle.FuseToObservable() -> ReactiveX.Observable?
ReactiveX.Internal.Operators.Observable.ObservableCollectSingle.ObservableCollectSingle(ReactiveX.IObservableSource? source, Java.Util.Concurrent.ICallable? initialSupplier, ReactiveX.Functions.IBiConsumer? collector) -> void
ReactiveX.Internal.Operators.Observable.ObservableCombineLatest
ReactiveX.Internal.Operators.Observable.ObservableCombineLatest.ObservableCombineLatest(ReactiveX.IObservableSource![]? sources, Java.Lang.IIterable? sourcesIterable, ReactiveX.Functions.IFunction? combiner, int bufferSize, bool delayError) -> void
ReactiveX.Internal.Operators.Observable.ObservableConcatMap
ReactiveX.Internal.Operators.Observable.ObservableConcatMap.ObservableConcatMap(ReactiveX.IObservableSource? source, ReactiveX.Functions.IFunction? mapper, int bufferSize, ReactiveX.Internal.Util.ErrorMode? delayErrors) -> void
ReactiveX.Internal.Operators.Observable.ObservableConcatMap.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableConcatMapEager
ReactiveX.Internal.Operators.Observable.ObservableConcatMapEager.ObservableConcatMapEager(ReactiveX.IObservableSource? source, ReactiveX.Functions.IFunction? mapper, ReactiveX.Internal.Util.ErrorMode? errorMode, int maxConcurrency, int prefetch) -> void
ReactiveX.Internal.Operators.Observable.ObservableConcatMapEager.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableConcatWithCompletable
ReactiveX.Internal.Operators.Observable.ObservableConcatWithCompletable.ObservableConcatWithCompletable(ReactiveX.Observable? source, ReactiveX.ICompletableSource? other) -> void
ReactiveX.Internal.Operators.Observable.ObservableConcatWithCompletable.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableConcatWithMaybe
ReactiveX.Internal.Operators.Observable.ObservableConcatWithMaybe.ObservableConcatWithMaybe(ReactiveX.Observable? source, ReactiveX.IMaybeSource? other) -> void
ReactiveX.Internal.Operators.Observable.ObservableConcatWithMaybe.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableConcatWithSingle
ReactiveX.Internal.Operators.Observable.ObservableConcatWithSingle.ObservableConcatWithSingle(ReactiveX.Observable? source, ReactiveX.ISingleSource? other) -> void
ReactiveX.Internal.Operators.Observable.ObservableConcatWithSingle.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableCount
ReactiveX.Internal.Operators.Observable.ObservableCount.ObservableCount(ReactiveX.IObservableSource? source) -> void
ReactiveX.Internal.Operators.Observable.ObservableCount.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableCountSingle
ReactiveX.Internal.Operators.Observable.ObservableCountSingle.FuseToObservable() -> ReactiveX.Observable?
ReactiveX.Internal.Operators.Observable.ObservableCountSingle.ObservableCountSingle(ReactiveX.IObservableSource? source) -> void
ReactiveX.Internal.Operators.Observable.ObservableCreate
ReactiveX.Internal.Operators.Observable.ObservableCreate.ObservableCreate(ReactiveX.IObservableOnSubscribe? source) -> void
ReactiveX.Internal.Operators.Observable.ObservableDebounce
ReactiveX.Internal.Operators.Observable.ObservableDebounce.ObservableDebounce(ReactiveX.IObservableSource? source, ReactiveX.Functions.IFunction? debounceSelector) -> void
ReactiveX.Internal.Operators.Observable.ObservableDebounce.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableDebounceTimed
ReactiveX.Internal.Operators.Observable.ObservableDebounceTimed.ObservableDebounceTimed(ReactiveX.IObservableSource? source, long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Observable.ObservableDebounceTimed.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableDefer
ReactiveX.Internal.Operators.Observable.ObservableDefer.ObservableDefer(Java.Util.Concurrent.ICallable? supplier) -> void
ReactiveX.Internal.Operators.Observable.ObservableDelay
ReactiveX.Internal.Operators.Observable.ObservableDelay.ObservableDelay(ReactiveX.IObservableSource? source, long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool delayError) -> void
ReactiveX.Internal.Operators.Observable.ObservableDelay.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableDelaySubscriptionOther
ReactiveX.Internal.Operators.Observable.ObservableDelaySubscriptionOther.ObservableDelaySubscriptionOther(ReactiveX.IObservableSource? main, ReactiveX.IObservableSource? other) -> void
ReactiveX.Internal.Operators.Observable.ObservableDematerialize
ReactiveX.Internal.Operators.Observable.ObservableDematerialize.ObservableDematerialize(ReactiveX.IObservableSource? source, ReactiveX.Functions.IFunction? selector) -> void
ReactiveX.Internal.Operators.Observable.ObservableDematerialize.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableDetach
ReactiveX.Internal.Operators.Observable.ObservableDetach.ObservableDetach(ReactiveX.IObservableSource? source) -> void
ReactiveX.Internal.Operators.Observable.ObservableDetach.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableDistinct
ReactiveX.Internal.Operators.Observable.ObservableDistinct.ObservableDistinct(ReactiveX.IObservableSource? source, ReactiveX.Functions.IFunction? keySelector, Java.Util.Concurrent.ICallable? collectionSupplier) -> void
ReactiveX.Internal.Operators.Observable.ObservableDistinct.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableDistinctUntilChanged
ReactiveX.Internal.Operators.Observable.ObservableDistinctUntilChanged.ObservableDistinctUntilChanged(ReactiveX.IObservableSource? source, ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IBiPredicate? comparer) -> void
ReactiveX.Internal.Operators.Observable.ObservableDistinctUntilChanged.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableDoAfterNext
ReactiveX.Internal.Operators.Observable.ObservableDoAfterNext.ObservableDoAfterNext(ReactiveX.IObservableSource? source, ReactiveX.Functions.IConsumer? onAfterNext) -> void
ReactiveX.Internal.Operators.Observable.ObservableDoAfterNext.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableDoFinally
ReactiveX.Internal.Operators.Observable.ObservableDoFinally.ObservableDoFinally(ReactiveX.IObservableSource? source, ReactiveX.Functions.IAction? onFinally) -> void
ReactiveX.Internal.Operators.Observable.ObservableDoFinally.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableDoOnEach
ReactiveX.Internal.Operators.Observable.ObservableDoOnEach.ObservableDoOnEach(ReactiveX.IObservableSource? source, ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete, ReactiveX.Functions.IAction? onAfterTerminate) -> void
ReactiveX.Internal.Operators.Observable.ObservableDoOnEach.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableDoOnLifecycle
ReactiveX.Internal.Operators.Observable.ObservableDoOnLifecycle.ObservableDoOnLifecycle(ReactiveX.Observable? upstream, ReactiveX.Functions.IConsumer? onSubscribe, ReactiveX.Functions.IAction? onDispose) -> void
ReactiveX.Internal.Operators.Observable.ObservableDoOnLifecycle.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableElementAt
ReactiveX.Internal.Operators.Observable.ObservableElementAt.ObservableElementAt(ReactiveX.IObservableSource? source, long index, Java.Lang.Object? defaultValue, bool errorOnFewer) -> void
ReactiveX.Internal.Operators.Observable.ObservableElementAt.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableElementAtMaybe
ReactiveX.Internal.Operators.Observable.ObservableElementAtMaybe.FuseToObservable() -> ReactiveX.Observable?
ReactiveX.Internal.Operators.Observable.ObservableElementAtMaybe.ObservableElementAtMaybe(ReactiveX.IObservableSource? source, long index) -> void
ReactiveX.Internal.Operators.Observable.ObservableElementAtSingle
ReactiveX.Internal.Operators.Observable.ObservableElementAtSingle.FuseToObservable() -> ReactiveX.Observable?
ReactiveX.Internal.Operators.Observable.ObservableElementAtSingle.ObservableElementAtSingle(ReactiveX.IObservableSource? source, long index, Java.Lang.Object? defaultValue) -> void
ReactiveX.Internal.Operators.Observable.ObservableEmpty
ReactiveX.Internal.Operators.Observable.ObservableEmpty.Call() -> Java.Lang.Object?
ReactiveX.Internal.Operators.Observable.ObservableError
ReactiveX.Internal.Operators.Observable.ObservableError.ObservableError(Java.Util.Concurrent.ICallable? errorSupplier) -> void
ReactiveX.Internal.Operators.Observable.ObservableFilter
ReactiveX.Internal.Operators.Observable.ObservableFilter.ObservableFilter(ReactiveX.IObservableSource? source, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Observable.ObservableFilter.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableFlatMap
ReactiveX.Internal.Operators.Observable.ObservableFlatMap.ObservableFlatMap(ReactiveX.IObservableSource? source, ReactiveX.Functions.IFunction? mapper, bool delayErrors, int maxConcurrency, int bufferSize) -> void
ReactiveX.Internal.Operators.Observable.ObservableFlatMap.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableFlatMapCompletable
ReactiveX.Internal.Operators.Observable.ObservableFlatMapCompletable.ObservableFlatMapCompletable(ReactiveX.IObservableSource? source, ReactiveX.Functions.IFunction? mapper, bool delayErrors) -> void
ReactiveX.Internal.Operators.Observable.ObservableFlatMapCompletable.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableFlatMapCompletableCompletable
ReactiveX.Internal.Operators.Observable.ObservableFlatMapCompletableCompletable.FuseToObservable() -> ReactiveX.Observable?
ReactiveX.Internal.Operators.Observable.ObservableFlatMapCompletableCompletable.ObservableFlatMapCompletableCompletable(ReactiveX.IObservableSource? source, ReactiveX.Functions.IFunction? mapper, bool delayErrors) -> void
ReactiveX.Internal.Operators.Observable.ObservableFlatMapMaybe
ReactiveX.Internal.Operators.Observable.ObservableFlatMapMaybe.ObservableFlatMapMaybe(ReactiveX.IObservableSource? source, ReactiveX.Functions.IFunction? mapper, bool delayError) -> void
ReactiveX.Internal.Operators.Observable.ObservableFlatMapMaybe.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableFlatMapSingle
ReactiveX.Internal.Operators.Observable.ObservableFlatMapSingle.ObservableFlatMapSingle(ReactiveX.IObservableSource? source, ReactiveX.Functions.IFunction? mapper, bool delayError) -> void
ReactiveX.Internal.Operators.Observable.ObservableFlatMapSingle.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableFlattenIterable
ReactiveX.Internal.Operators.Observable.ObservableFlattenIterable.ObservableFlattenIterable(ReactiveX.IObservableSource? source, ReactiveX.Functions.IFunction? mapper) -> void
ReactiveX.Internal.Operators.Observable.ObservableFlattenIterable.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableFromArray
ReactiveX.Internal.Operators.Observable.ObservableFromArray.ObservableFromArray(Java.Lang.Object![]? array) -> void
ReactiveX.Internal.Operators.Observable.ObservableFromCallable
ReactiveX.Internal.Operators.Observable.ObservableFromCallable.Call() -> Java.Lang.Object?
ReactiveX.Internal.Operators.Observable.ObservableFromCallable.ObservableFromCallable(Java.Util.Concurrent.ICallable? callable) -> void
ReactiveX.Internal.Operators.Observable.ObservableFromFuture
ReactiveX.Internal.Operators.Observable.ObservableFromFuture.ObservableFromFuture(Java.Util.Concurrent.IFuture? future, long timeout, Java.Util.Concurrent.TimeUnit? unit) -> void
ReactiveX.Internal.Operators.Observable.ObservableFromIterable
ReactiveX.Internal.Operators.Observable.ObservableFromIterable.ObservableFromIterable(Java.Lang.IIterable? source) -> void
ReactiveX.Internal.Operators.Observable.ObservableFromPublisher
ReactiveX.Internal.Operators.Observable.ObservableFromPublisher.ObservableFromPublisher(ReactiveStreams.IPublisher? publisher) -> void
ReactiveX.Internal.Operators.Observable.ObservableFromUnsafeSource
ReactiveX.Internal.Operators.Observable.ObservableFromUnsafeSource.ObservableFromUnsafeSource(ReactiveX.IObservableSource? source) -> void
ReactiveX.Internal.Operators.Observable.ObservableGenerate
ReactiveX.Internal.Operators.Observable.ObservableGenerate.ObservableGenerate(Java.Util.Concurrent.ICallable? stateSupplier, ReactiveX.Functions.IBiFunction? generator, ReactiveX.Functions.IConsumer? disposeState) -> void
ReactiveX.Internal.Operators.Observable.ObservableGroupBy
ReactiveX.Internal.Operators.Observable.ObservableGroupBy.GroupByObserver
ReactiveX.Internal.Operators.Observable.ObservableGroupBy.GroupByObserver.Cancel(Java.Lang.Object? key) -> void
ReactiveX.Internal.Operators.Observable.ObservableGroupBy.GroupByObserver.Dispose() -> void
ReactiveX.Internal.Operators.Observable.ObservableGroupBy.GroupByObserver.GroupByObserver(ReactiveX.IObserver? actual, ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector, int bufferSize, bool delayError) -> void
ReactiveX.Internal.Operators.Observable.ObservableGroupBy.GroupByObserver.IsDisposed.get -> bool
ReactiveX.Internal.Operators.Observable.ObservableGroupBy.GroupByObserver.OnComplete() -> void
ReactiveX.Internal.Operators.Observable.ObservableGroupBy.GroupByObserver.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Operators.Observable.ObservableGroupBy.GroupByObserver.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Internal.Operators.Observable.ObservableGroupBy.GroupByObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Operators.Observable.ObservableGroupBy.ObservableGroupBy(ReactiveX.IObservableSource? source, ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector, int bufferSize, bool delayError) -> void
ReactiveX.Internal.Operators.Observable.ObservableGroupBy.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableGroupJoin
ReactiveX.Internal.Operators.Observable.ObservableGroupJoin.ObservableGroupJoin(ReactiveX.IObservableSource? source, ReactiveX.IObservableSource? other, ReactiveX.Functions.IFunction? leftEnd, ReactiveX.Functions.IFunction? rightEnd, ReactiveX.Functions.IBiFunction? resultSelector) -> void
ReactiveX.Internal.Operators.Observable.ObservableHide
ReactiveX.Internal.Operators.Observable.ObservableHide.ObservableHide(ReactiveX.IObservableSource? source) -> void
ReactiveX.Internal.Operators.Observable.ObservableHide.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableIgnoreElements
ReactiveX.Internal.Operators.Observable.ObservableIgnoreElements.ObservableIgnoreElements(ReactiveX.IObservableSource? source) -> void
ReactiveX.Internal.Operators.Observable.ObservableIgnoreElements.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableIgnoreElementsCompletable
ReactiveX.Internal.Operators.Observable.ObservableIgnoreElementsCompletable.FuseToObservable() -> ReactiveX.Observable?
ReactiveX.Internal.Operators.Observable.ObservableIgnoreElementsCompletable.ObservableIgnoreElementsCompletable(ReactiveX.IObservableSource? source) -> void
ReactiveX.Internal.Operators.Observable.ObservableInternalHelper
ReactiveX.Internal.Operators.Observable.ObservableInterval
ReactiveX.Internal.Operators.Observable.ObservableInterval.ObservableInterval(long initialDelay, long period, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Observable.ObservableIntervalRange
ReactiveX.Internal.Operators.Observable.ObservableIntervalRange.ObservableIntervalRange(long start, long end, long initialDelay, long period, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Observable.ObservableJoin
ReactiveX.Internal.Operators.Observable.ObservableJoin.ObservableJoin(ReactiveX.IObservableSource? source, ReactiveX.IObservableSource? other, ReactiveX.Functions.IFunction? leftEnd, ReactiveX.Functions.IFunction? rightEnd, ReactiveX.Functions.IBiFunction? resultSelector) -> void
ReactiveX.Internal.Operators.Observable.ObservableJust
ReactiveX.Internal.Operators.Observable.ObservableJust.Call() -> Java.Lang.Object?
ReactiveX.Internal.Operators.Observable.ObservableJust.ObservableJust(Java.Lang.Object? value) -> void
ReactiveX.Internal.Operators.Observable.ObservableLastMaybe
ReactiveX.Internal.Operators.Observable.ObservableLastMaybe.ObservableLastMaybe(ReactiveX.IObservableSource? source) -> void
ReactiveX.Internal.Operators.Observable.ObservableLastSingle
ReactiveX.Internal.Operators.Observable.ObservableLastSingle.ObservableLastSingle(ReactiveX.IObservableSource? source, Java.Lang.Object? defaultItem) -> void
ReactiveX.Internal.Operators.Observable.ObservableLift
ReactiveX.Internal.Operators.Observable.ObservableLift.ObservableLift(ReactiveX.IObservableSource? source, ReactiveX.IObservableOperator? operator) -> void
ReactiveX.Internal.Operators.Observable.ObservableLift.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableMap
ReactiveX.Internal.Operators.Observable.ObservableMap.ObservableMap(ReactiveX.IObservableSource? source, ReactiveX.Functions.IFunction? function) -> void
ReactiveX.Internal.Operators.Observable.ObservableMap.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableMapNotification
ReactiveX.Internal.Operators.Observable.ObservableMapNotification.ObservableMapNotification(ReactiveX.IObservableSource? source, ReactiveX.Functions.IFunction? onNextMapper, ReactiveX.Functions.IFunction? onErrorMapper, Java.Util.Concurrent.ICallable? onCompleteSupplier) -> void
ReactiveX.Internal.Operators.Observable.ObservableMapNotification.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableMaterialize
ReactiveX.Internal.Operators.Observable.ObservableMaterialize.ObservableMaterialize(ReactiveX.IObservableSource? source) -> void
ReactiveX.Internal.Operators.Observable.ObservableMaterialize.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableMergeWithCompletable
ReactiveX.Internal.Operators.Observable.ObservableMergeWithCompletable.ObservableMergeWithCompletable(ReactiveX.Observable? source, ReactiveX.ICompletableSource? other) -> void
ReactiveX.Internal.Operators.Observable.ObservableMergeWithCompletable.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableMergeWithMaybe
ReactiveX.Internal.Operators.Observable.ObservableMergeWithMaybe.ObservableMergeWithMaybe(ReactiveX.Observable? source, ReactiveX.IMaybeSource? other) -> void
ReactiveX.Internal.Operators.Observable.ObservableMergeWithMaybe.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableMergeWithSingle
ReactiveX.Internal.Operators.Observable.ObservableMergeWithSingle.ObservableMergeWithSingle(ReactiveX.Observable? source, ReactiveX.ISingleSource? other) -> void
ReactiveX.Internal.Operators.Observable.ObservableMergeWithSingle.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableNever
ReactiveX.Internal.Operators.Observable.ObservableObserveOn
ReactiveX.Internal.Operators.Observable.ObservableObserveOn.ObservableObserveOn(ReactiveX.IObservableSource? source, ReactiveX.Scheduler? scheduler, bool delayError, int bufferSize) -> void
ReactiveX.Internal.Operators.Observable.ObservableObserveOn.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableOnErrorNext
ReactiveX.Internal.Operators.Observable.ObservableOnErrorNext.ObservableOnErrorNext(ReactiveX.IObservableSource? source, ReactiveX.Functions.IFunction? nextSupplier, bool allowFatal) -> void
ReactiveX.Internal.Operators.Observable.ObservableOnErrorNext.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableOnErrorReturn
ReactiveX.Internal.Operators.Observable.ObservableOnErrorReturn.ObservableOnErrorReturn(ReactiveX.IObservableSource? source, ReactiveX.Functions.IFunction? valueSupplier) -> void
ReactiveX.Internal.Operators.Observable.ObservableOnErrorReturn.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservablePublish
ReactiveX.Internal.Operators.Observable.ObservablePublish.PublishSource() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservablePublish.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservablePublishAlt
ReactiveX.Internal.Operators.Observable.ObservablePublishAlt.ObservablePublishAlt(ReactiveX.IObservableSource? source) -> void
ReactiveX.Internal.Operators.Observable.ObservablePublishAlt.ResetIf(ReactiveX.Disposables.IDisposable? connection) -> void
ReactiveX.Internal.Operators.Observable.ObservablePublishAlt.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservablePublishSelector
ReactiveX.Internal.Operators.Observable.ObservablePublishSelector.ObservablePublishSelector(ReactiveX.IObservableSource? source, ReactiveX.Functions.IFunction? selector) -> void
ReactiveX.Internal.Operators.Observable.ObservablePublishSelector.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableRange
ReactiveX.Internal.Operators.Observable.ObservableRange.ObservableRange(int start, int count) -> void
ReactiveX.Internal.Operators.Observable.ObservableRangeLong
ReactiveX.Internal.Operators.Observable.ObservableRangeLong.ObservableRangeLong(long start, long count) -> void
ReactiveX.Internal.Operators.Observable.ObservableReduceMaybe
ReactiveX.Internal.Operators.Observable.ObservableReduceMaybe.ObservableReduceMaybe(ReactiveX.IObservableSource? source, ReactiveX.Functions.IBiFunction? reducer) -> void
ReactiveX.Internal.Operators.Observable.ObservableReduceSeedSingle
ReactiveX.Internal.Operators.Observable.ObservableReduceSeedSingle.ObservableReduceSeedSingle(ReactiveX.IObservableSource? source, Java.Lang.Object? seed, ReactiveX.Functions.IBiFunction? reducer) -> void
ReactiveX.Internal.Operators.Observable.ObservableReduceWithSingle
ReactiveX.Internal.Operators.Observable.ObservableReduceWithSingle.ObservableReduceWithSingle(ReactiveX.IObservableSource? source, Java.Util.Concurrent.ICallable? seedSupplier, ReactiveX.Functions.IBiFunction? reducer) -> void
ReactiveX.Internal.Operators.Observable.ObservableRefCount
ReactiveX.Internal.Operators.Observable.ObservableRefCount.ObservableRefCount(ReactiveX.Observables.ConnectableObservable? source) -> void
ReactiveX.Internal.Operators.Observable.ObservableRefCount.ObservableRefCount(ReactiveX.Observables.ConnectableObservable? source, int n, long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Observable.ObservableRepeat
ReactiveX.Internal.Operators.Observable.ObservableRepeat.ObservableRepeat(ReactiveX.Observable? source, long count) -> void
ReactiveX.Internal.Operators.Observable.ObservableRepeat.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableRepeatUntil
ReactiveX.Internal.Operators.Observable.ObservableRepeatUntil.ObservableRepeatUntil(ReactiveX.Observable? source, ReactiveX.Functions.IBooleanSupplier? until) -> void
ReactiveX.Internal.Operators.Observable.ObservableRepeatUntil.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableRepeatWhen
ReactiveX.Internal.Operators.Observable.ObservableRepeatWhen.ObservableRepeatWhen(ReactiveX.IObservableSource? source, ReactiveX.Functions.IFunction? handler) -> void
ReactiveX.Internal.Operators.Observable.ObservableRepeatWhen.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableReplay
ReactiveX.Internal.Operators.Observable.ObservableReplay.ResetIf(ReactiveX.Disposables.IDisposable? connectionObject) -> void
ReactiveX.Internal.Operators.Observable.ObservableReplay.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableRetryBiPredicate
ReactiveX.Internal.Operators.Observable.ObservableRetryBiPredicate.ObservableRetryBiPredicate(ReactiveX.Observable? source, ReactiveX.Functions.IBiPredicate? predicate) -> void
ReactiveX.Internal.Operators.Observable.ObservableRetryBiPredicate.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableRetryPredicate
ReactiveX.Internal.Operators.Observable.ObservableRetryPredicate.ObservableRetryPredicate(ReactiveX.Observable? source, long count, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Observable.ObservableRetryPredicate.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableRetryWhen
ReactiveX.Internal.Operators.Observable.ObservableRetryWhen.ObservableRetryWhen(ReactiveX.IObservableSource? source, ReactiveX.Functions.IFunction? handler) -> void
ReactiveX.Internal.Operators.Observable.ObservableRetryWhen.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableSampleTimed
ReactiveX.Internal.Operators.Observable.ObservableSampleTimed.ObservableSampleTimed(ReactiveX.IObservableSource? source, long period, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool emitLast) -> void
ReactiveX.Internal.Operators.Observable.ObservableSampleTimed.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableSampleWithObservable
ReactiveX.Internal.Operators.Observable.ObservableSampleWithObservable.ObservableSampleWithObservable(ReactiveX.IObservableSource? source, ReactiveX.IObservableSource? other, bool emitLast) -> void
ReactiveX.Internal.Operators.Observable.ObservableSampleWithObservable.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableScalarXMap
ReactiveX.Internal.Operators.Observable.ObservableScalarXMap.ScalarDisposable
ReactiveX.Internal.Operators.Observable.ObservableScalarXMap.ScalarDisposable.Clear() -> void
ReactiveX.Internal.Operators.Observable.ObservableScalarXMap.ScalarDisposable.Dispose() -> void
ReactiveX.Internal.Operators.Observable.ObservableScalarXMap.ScalarDisposable.IsDisposed.get -> bool
ReactiveX.Internal.Operators.Observable.ObservableScalarXMap.ScalarDisposable.IsEmpty.get -> bool
ReactiveX.Internal.Operators.Observable.ObservableScalarXMap.ScalarDisposable.Offer(Java.Lang.Object? v1, Java.Lang.Object? v2) -> bool
ReactiveX.Internal.Operators.Observable.ObservableScalarXMap.ScalarDisposable.Offer(Java.Lang.Object? value) -> bool
ReactiveX.Internal.Operators.Observable.ObservableScalarXMap.ScalarDisposable.Poll() -> Java.Lang.Object?
ReactiveX.Internal.Operators.Observable.ObservableScalarXMap.ScalarDisposable.RequestFusion(int mode) -> int
ReactiveX.Internal.Operators.Observable.ObservableScalarXMap.ScalarDisposable.Run() -> void
ReactiveX.Internal.Operators.Observable.ObservableScalarXMap.ScalarDisposable.ScalarDisposable(ReactiveX.IObserver? observer, Java.Lang.Object? value) -> void
ReactiveX.Internal.Operators.Observable.ObservableScan
ReactiveX.Internal.Operators.Observable.ObservableScan.ObservableScan(ReactiveX.IObservableSource? source, ReactiveX.Functions.IBiFunction? accumulator) -> void
ReactiveX.Internal.Operators.Observable.ObservableScan.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableScanSeed
ReactiveX.Internal.Operators.Observable.ObservableScanSeed.ObservableScanSeed(ReactiveX.IObservableSource? source, Java.Util.Concurrent.ICallable? seedSupplier, ReactiveX.Functions.IBiFunction? accumulator) -> void
ReactiveX.Internal.Operators.Observable.ObservableScanSeed.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableSequenceEqual
ReactiveX.Internal.Operators.Observable.ObservableSequenceEqual.ObservableSequenceEqual(ReactiveX.IObservableSource? first, ReactiveX.IObservableSource? second, ReactiveX.Functions.IBiPredicate? comparer, int bufferSize) -> void
ReactiveX.Internal.Operators.Observable.ObservableSequenceEqualSingle
ReactiveX.Internal.Operators.Observable.ObservableSequenceEqualSingle.FuseToObservable() -> ReactiveX.Observable?
ReactiveX.Internal.Operators.Observable.ObservableSequenceEqualSingle.ObservableSequenceEqualSingle(ReactiveX.IObservableSource? first, ReactiveX.IObservableSource? second, ReactiveX.Functions.IBiPredicate? comparer, int bufferSize) -> void
ReactiveX.Internal.Operators.Observable.ObservableSerialized
ReactiveX.Internal.Operators.Observable.ObservableSerialized.ObservableSerialized(ReactiveX.Observable? upstream) -> void
ReactiveX.Internal.Operators.Observable.ObservableSerialized.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableSingleMaybe
ReactiveX.Internal.Operators.Observable.ObservableSingleMaybe.ObservableSingleMaybe(ReactiveX.IObservableSource? source) -> void
ReactiveX.Internal.Operators.Observable.ObservableSingleSingle
ReactiveX.Internal.Operators.Observable.ObservableSingleSingle.ObservableSingleSingle(ReactiveX.IObservableSource? source, Java.Lang.Object? defaultValue) -> void
ReactiveX.Internal.Operators.Observable.ObservableSkip
ReactiveX.Internal.Operators.Observable.ObservableSkip.ObservableSkip(ReactiveX.IObservableSource? source, long n) -> void
ReactiveX.Internal.Operators.Observable.ObservableSkip.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableSkipLast
ReactiveX.Internal.Operators.Observable.ObservableSkipLast.ObservableSkipLast(ReactiveX.IObservableSource? source, int skip) -> void
ReactiveX.Internal.Operators.Observable.ObservableSkipLast.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableSkipLastTimed
ReactiveX.Internal.Operators.Observable.ObservableSkipLastTimed.ObservableSkipLastTimed(ReactiveX.IObservableSource? source, long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, int bufferSize, bool delayError) -> void
ReactiveX.Internal.Operators.Observable.ObservableSkipLastTimed.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableSkipUntil
ReactiveX.Internal.Operators.Observable.ObservableSkipUntil.ObservableSkipUntil(ReactiveX.IObservableSource? source, ReactiveX.IObservableSource? other) -> void
ReactiveX.Internal.Operators.Observable.ObservableSkipUntil.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableSkipWhile
ReactiveX.Internal.Operators.Observable.ObservableSkipWhile.ObservableSkipWhile(ReactiveX.IObservableSource? source, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Observable.ObservableSkipWhile.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableSubscribeOn
ReactiveX.Internal.Operators.Observable.ObservableSubscribeOn.ObservableSubscribeOn(ReactiveX.IObservableSource? source, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Observable.ObservableSubscribeOn.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableSwitchIfEmpty
ReactiveX.Internal.Operators.Observable.ObservableSwitchIfEmpty.ObservableSwitchIfEmpty(ReactiveX.IObservableSource? source, ReactiveX.IObservableSource? other) -> void
ReactiveX.Internal.Operators.Observable.ObservableSwitchIfEmpty.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableSwitchMap
ReactiveX.Internal.Operators.Observable.ObservableSwitchMap.ObservableSwitchMap(ReactiveX.IObservableSource? source, ReactiveX.Functions.IFunction? mapper, int bufferSize, bool delayErrors) -> void
ReactiveX.Internal.Operators.Observable.ObservableSwitchMap.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableTake
ReactiveX.Internal.Operators.Observable.ObservableTake.ObservableTake(ReactiveX.IObservableSource? source, long limit) -> void
ReactiveX.Internal.Operators.Observable.ObservableTake.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableTakeLast
ReactiveX.Internal.Operators.Observable.ObservableTakeLast.ObservableTakeLast(ReactiveX.IObservableSource? source, int count) -> void
ReactiveX.Internal.Operators.Observable.ObservableTakeLast.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableTakeLastOne
ReactiveX.Internal.Operators.Observable.ObservableTakeLastOne.ObservableTakeLastOne(ReactiveX.IObservableSource? source) -> void
ReactiveX.Internal.Operators.Observable.ObservableTakeLastOne.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableTakeLastTimed
ReactiveX.Internal.Operators.Observable.ObservableTakeLastTimed.ObservableTakeLastTimed(ReactiveX.IObservableSource? source, long count, long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, int bufferSize, bool delayError) -> void
ReactiveX.Internal.Operators.Observable.ObservableTakeLastTimed.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableTakeUntil
ReactiveX.Internal.Operators.Observable.ObservableTakeUntil.ObservableTakeUntil(ReactiveX.IObservableSource? source, ReactiveX.IObservableSource? other) -> void
ReactiveX.Internal.Operators.Observable.ObservableTakeUntil.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableTakeUntilPredicate
ReactiveX.Internal.Operators.Observable.ObservableTakeUntilPredicate.ObservableTakeUntilPredicate(ReactiveX.IObservableSource? source, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Observable.ObservableTakeUntilPredicate.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableTakeWhile
ReactiveX.Internal.Operators.Observable.ObservableTakeWhile.ObservableTakeWhile(ReactiveX.IObservableSource? source, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Observable.ObservableTakeWhile.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableThrottleFirstTimed
ReactiveX.Internal.Operators.Observable.ObservableThrottleFirstTimed.ObservableThrottleFirstTimed(ReactiveX.IObservableSource? source, long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Observable.ObservableThrottleFirstTimed.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableThrottleLatest
ReactiveX.Internal.Operators.Observable.ObservableThrottleLatest.ObservableThrottleLatest(ReactiveX.Observable? source, long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool emitLast) -> void
ReactiveX.Internal.Operators.Observable.ObservableThrottleLatest.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableTimeInterval
ReactiveX.Internal.Operators.Observable.ObservableTimeInterval.ObservableTimeInterval(ReactiveX.IObservableSource? source, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Observable.ObservableTimeInterval.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableTimeout
ReactiveX.Internal.Operators.Observable.ObservableTimeout.ObservableTimeout(ReactiveX.Observable? source, ReactiveX.IObservableSource? firstTimeoutIndicator, ReactiveX.Functions.IFunction? itemTimeoutIndicator, ReactiveX.IObservableSource? other) -> void
ReactiveX.Internal.Operators.Observable.ObservableTimeout.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableTimeoutTimed
ReactiveX.Internal.Operators.Observable.ObservableTimeoutTimed.ObservableTimeoutTimed(ReactiveX.Observable? source, long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, ReactiveX.IObservableSource? other) -> void
ReactiveX.Internal.Operators.Observable.ObservableTimeoutTimed.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableTimer
ReactiveX.Internal.Operators.Observable.ObservableTimer.ObservableTimer(long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Observable.ObservableToList
ReactiveX.Internal.Operators.Observable.ObservableToList.ObservableToList(ReactiveX.IObservableSource? source, Java.Util.Concurrent.ICallable? collectionSupplier) -> void
ReactiveX.Internal.Operators.Observable.ObservableToList.ObservableToList(ReactiveX.IObservableSource? source, int defaultCapacityHint) -> void
ReactiveX.Internal.Operators.Observable.ObservableToList.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableToListSingle
ReactiveX.Internal.Operators.Observable.ObservableToListSingle.FuseToObservable() -> ReactiveX.Observable?
ReactiveX.Internal.Operators.Observable.ObservableToListSingle.ObservableToListSingle(ReactiveX.IObservableSource? source, Java.Util.Concurrent.ICallable? collectionSupplier) -> void
ReactiveX.Internal.Operators.Observable.ObservableToListSingle.ObservableToListSingle(ReactiveX.IObservableSource? source, int defaultCapacityHint) -> void
ReactiveX.Internal.Operators.Observable.ObservableUnsubscribeOn
ReactiveX.Internal.Operators.Observable.ObservableUnsubscribeOn.ObservableUnsubscribeOn(ReactiveX.IObservableSource? source, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Observable.ObservableUnsubscribeOn.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableUsing
ReactiveX.Internal.Operators.Observable.ObservableUsing.ObservableUsing(Java.Util.Concurrent.ICallable? resourceSupplier, ReactiveX.Functions.IFunction? sourceSupplier, ReactiveX.Functions.IConsumer? disposer, bool eager) -> void
ReactiveX.Internal.Operators.Observable.ObservableWindow
ReactiveX.Internal.Operators.Observable.ObservableWindow.ObservableWindow(ReactiveX.IObservableSource? source, long count, long skip, int capacityHint) -> void
ReactiveX.Internal.Operators.Observable.ObservableWindow.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableWindowBoundary
ReactiveX.Internal.Operators.Observable.ObservableWindowBoundary.ObservableWindowBoundary(ReactiveX.IObservableSource? source, ReactiveX.IObservableSource? other, int capacityHint) -> void
ReactiveX.Internal.Operators.Observable.ObservableWindowBoundary.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableWindowBoundarySelector
ReactiveX.Internal.Operators.Observable.ObservableWindowBoundarySelector.ObservableWindowBoundarySelector(ReactiveX.IObservableSource? source, ReactiveX.IObservableSource? open, ReactiveX.Functions.IFunction? close, int bufferSize) -> void
ReactiveX.Internal.Operators.Observable.ObservableWindowBoundarySelector.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableWindowBoundarySupplier
ReactiveX.Internal.Operators.Observable.ObservableWindowBoundarySupplier.ObservableWindowBoundarySupplier(ReactiveX.IObservableSource? source, Java.Util.Concurrent.ICallable? other, int capacityHint) -> void
ReactiveX.Internal.Operators.Observable.ObservableWindowBoundarySupplier.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableWindowTimed
ReactiveX.Internal.Operators.Observable.ObservableWindowTimed.ObservableWindowTimed(ReactiveX.IObservableSource? source, long timespan, long timeskip, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, long maxSize, int bufferSize, bool restartTimerOnMaxSize) -> void
ReactiveX.Internal.Operators.Observable.ObservableWindowTimed.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableWithLatestFrom
ReactiveX.Internal.Operators.Observable.ObservableWithLatestFrom.ObservableWithLatestFrom(ReactiveX.IObservableSource? source, ReactiveX.Functions.IBiFunction? combiner, ReactiveX.IObservableSource? other) -> void
ReactiveX.Internal.Operators.Observable.ObservableWithLatestFrom.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableWithLatestFromMany
ReactiveX.Internal.Operators.Observable.ObservableWithLatestFromMany.ObservableWithLatestFromMany(ReactiveX.IObservableSource? source, Java.Lang.IIterable? otherIterable, ReactiveX.Functions.IFunction? combiner) -> void
ReactiveX.Internal.Operators.Observable.ObservableWithLatestFromMany.ObservableWithLatestFromMany(ReactiveX.IObservableSource? source, ReactiveX.IObservableSource![]? otherArray, ReactiveX.Functions.IFunction? combiner) -> void
ReactiveX.Internal.Operators.Observable.ObservableWithLatestFromMany.Source() -> ReactiveX.IObservableSource?
ReactiveX.Internal.Operators.Observable.ObservableZip
ReactiveX.Internal.Operators.Observable.ObservableZip.ObservableZip(ReactiveX.IObservableSource![]? sources, Java.Lang.IIterable? sourcesIterable, ReactiveX.Functions.IFunction? zipper, int bufferSize, bool delayError) -> void
ReactiveX.Internal.Operators.Observable.ObservableZipIterable
ReactiveX.Internal.Operators.Observable.ObservableZipIterable.ObservableZipIterable(ReactiveX.Observable? source, Java.Lang.IIterable? other, ReactiveX.Functions.IBiFunction? zipper) -> void
ReactiveX.Internal.Operators.Observable.ObserverResourceWrapper
ReactiveX.Internal.Operators.Observable.ObserverResourceWrapper.Dispose() -> void
ReactiveX.Internal.Operators.Observable.ObserverResourceWrapper.IsDisposed.get -> bool
ReactiveX.Internal.Operators.Observable.ObserverResourceWrapper.ObserverResourceWrapper(ReactiveX.IObserver? downstream) -> void
ReactiveX.Internal.Operators.Observable.ObserverResourceWrapper.OnComplete() -> void
ReactiveX.Internal.Operators.Observable.ObserverResourceWrapper.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Operators.Observable.ObserverResourceWrapper.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Internal.Operators.Observable.ObserverResourceWrapper.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Operators.Observable.ObserverResourceWrapper.SetResource(ReactiveX.Disposables.IDisposable? resource) -> void
ReactiveX.Internal.Operators.Parallel.ParallelCollect
ReactiveX.Internal.Operators.Parallel.ParallelCollect.ParallelCollect(ReactiveX.Parallel.ParallelFlowable? source, Java.Util.Concurrent.ICallable? initialCollection, ReactiveX.Functions.IBiConsumer? collector) -> void
ReactiveX.Internal.Operators.Parallel.ParallelConcatMap
ReactiveX.Internal.Operators.Parallel.ParallelConcatMap.ParallelConcatMap(ReactiveX.Parallel.ParallelFlowable? source, ReactiveX.Functions.IFunction? mapper, int prefetch, ReactiveX.Internal.Util.ErrorMode? errorMode) -> void
ReactiveX.Internal.Operators.Parallel.ParallelDoOnNextTry
ReactiveX.Internal.Operators.Parallel.ParallelDoOnNextTry.ParallelDoOnNextTry(ReactiveX.Parallel.ParallelFlowable? source, ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IBiFunction? errorHandler) -> void
ReactiveX.Internal.Operators.Parallel.ParallelFilter
ReactiveX.Internal.Operators.Parallel.ParallelFilter.ParallelFilter(ReactiveX.Parallel.ParallelFlowable? source, ReactiveX.Functions.IPredicate? predicate) -> void
ReactiveX.Internal.Operators.Parallel.ParallelFilterTry
ReactiveX.Internal.Operators.Parallel.ParallelFilterTry.ParallelFilterTry(ReactiveX.Parallel.ParallelFlowable? source, ReactiveX.Functions.IPredicate? predicate, ReactiveX.Functions.IBiFunction? errorHandler) -> void
ReactiveX.Internal.Operators.Parallel.ParallelFlatMap
ReactiveX.Internal.Operators.Parallel.ParallelFlatMap.ParallelFlatMap(ReactiveX.Parallel.ParallelFlowable? source, ReactiveX.Functions.IFunction? mapper, bool delayError, int maxConcurrency, int prefetch) -> void
ReactiveX.Internal.Operators.Parallel.ParallelFromArray
ReactiveX.Internal.Operators.Parallel.ParallelFromArray.ParallelFromArray(ReactiveStreams.IPublisher![]? sources) -> void
ReactiveX.Internal.Operators.Parallel.ParallelFromPublisher
ReactiveX.Internal.Operators.Parallel.ParallelFromPublisher.ParallelFromPublisher(ReactiveStreams.IPublisher? source, int parallelism, int prefetch) -> void
ReactiveX.Internal.Operators.Parallel.ParallelJoin
ReactiveX.Internal.Operators.Parallel.ParallelJoin.ParallelJoin(ReactiveX.Parallel.ParallelFlowable? source, int prefetch, bool delayErrors) -> void
ReactiveX.Internal.Operators.Parallel.ParallelMap
ReactiveX.Internal.Operators.Parallel.ParallelMap.ParallelMap(ReactiveX.Parallel.ParallelFlowable? source, ReactiveX.Functions.IFunction? mapper) -> void
ReactiveX.Internal.Operators.Parallel.ParallelMapTry
ReactiveX.Internal.Operators.Parallel.ParallelMapTry.ParallelMapTry(ReactiveX.Parallel.ParallelFlowable? source, ReactiveX.Functions.IFunction? mapper, ReactiveX.Functions.IBiFunction? errorHandler) -> void
ReactiveX.Internal.Operators.Parallel.ParallelPeek
ReactiveX.Internal.Operators.Parallel.ParallelPeek.ParallelPeek(ReactiveX.Parallel.ParallelFlowable? source, ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IConsumer? onAfterNext, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete, ReactiveX.Functions.IAction? onAfterTerminated, ReactiveX.Functions.IConsumer? onSubscribe, ReactiveX.Functions.ILongConsumer? onRequest, ReactiveX.Functions.IAction? onCancel) -> void
ReactiveX.Internal.Operators.Parallel.ParallelReduce
ReactiveX.Internal.Operators.Parallel.ParallelReduce.ParallelReduce(ReactiveX.Parallel.ParallelFlowable? source, Java.Util.Concurrent.ICallable? initialSupplier, ReactiveX.Functions.IBiFunction? reducer) -> void
ReactiveX.Internal.Operators.Parallel.ParallelReduceFull
ReactiveX.Internal.Operators.Parallel.ParallelReduceFull.ParallelReduceFull(ReactiveX.Parallel.ParallelFlowable? source, ReactiveX.Functions.IBiFunction? reducer) -> void
ReactiveX.Internal.Operators.Parallel.ParallelRunOn
ReactiveX.Internal.Operators.Parallel.ParallelRunOn.ParallelRunOn(ReactiveX.Parallel.ParallelFlowable? parent, ReactiveX.Scheduler? scheduler, int prefetch) -> void
ReactiveX.Internal.Operators.Parallel.ParallelSortedJoin
ReactiveX.Internal.Operators.Parallel.ParallelSortedJoin.ParallelSortedJoin(ReactiveX.Parallel.ParallelFlowable? source, Java.Util.IComparator? comparator) -> void
ReactiveX.Internal.Operators.Single.SingleAmb
ReactiveX.Internal.Operators.Single.SingleAmb.SingleAmb(ReactiveX.ISingleSource![]? sources, Java.Lang.IIterable? sourcesIterable) -> void
ReactiveX.Internal.Operators.Single.SingleCache
ReactiveX.Internal.Operators.Single.SingleCache.OnError(Java.Lang.Throwable? e) -> void
ReactiveX.Internal.Operators.Single.SingleCache.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Operators.Single.SingleCache.OnSuccess(Java.Lang.Object? value) -> void
ReactiveX.Internal.Operators.Single.SingleCache.SingleCache(ReactiveX.ISingleSource? source) -> void
ReactiveX.Internal.Operators.Single.SingleContains
ReactiveX.Internal.Operators.Single.SingleContains.SingleContains(ReactiveX.ISingleSource? source, Java.Lang.Object? value, ReactiveX.Functions.IBiPredicate? comparer) -> void
ReactiveX.Internal.Operators.Single.SingleCreate
ReactiveX.Internal.Operators.Single.SingleCreate.SingleCreate(ReactiveX.ISingleOnSubscribe? source) -> void
ReactiveX.Internal.Operators.Single.SingleDefer
ReactiveX.Internal.Operators.Single.SingleDefer.SingleDefer(Java.Util.Concurrent.ICallable? singleSupplier) -> void
ReactiveX.Internal.Operators.Single.SingleDelay
ReactiveX.Internal.Operators.Single.SingleDelay.SingleDelay(ReactiveX.ISingleSource? source, long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool delayError) -> void
ReactiveX.Internal.Operators.Single.SingleDelayWithCompletable
ReactiveX.Internal.Operators.Single.SingleDelayWithCompletable.SingleDelayWithCompletable(ReactiveX.ISingleSource? source, ReactiveX.ICompletableSource? other) -> void
ReactiveX.Internal.Operators.Single.SingleDelayWithObservable
ReactiveX.Internal.Operators.Single.SingleDelayWithObservable.SingleDelayWithObservable(ReactiveX.ISingleSource? source, ReactiveX.IObservableSource? other) -> void
ReactiveX.Internal.Operators.Single.SingleDelayWithPublisher
ReactiveX.Internal.Operators.Single.SingleDelayWithPublisher.SingleDelayWithPublisher(ReactiveX.ISingleSource? source, ReactiveStreams.IPublisher? other) -> void
ReactiveX.Internal.Operators.Single.SingleDelayWithSingle
ReactiveX.Internal.Operators.Single.SingleDelayWithSingle.SingleDelayWithSingle(ReactiveX.ISingleSource? source, ReactiveX.ISingleSource? other) -> void
ReactiveX.Internal.Operators.Single.SingleDematerialize
ReactiveX.Internal.Operators.Single.SingleDematerialize.SingleDematerialize(ReactiveX.Single? source, ReactiveX.Functions.IFunction? selector) -> void
ReactiveX.Internal.Operators.Single.SingleDetach
ReactiveX.Internal.Operators.Single.SingleDetach.SingleDetach(ReactiveX.ISingleSource? source) -> void
ReactiveX.Internal.Operators.Single.SingleDoAfterSuccess
ReactiveX.Internal.Operators.Single.SingleDoAfterSuccess.SingleDoAfterSuccess(ReactiveX.ISingleSource? source, ReactiveX.Functions.IConsumer? onAfterSuccess) -> void
ReactiveX.Internal.Operators.Single.SingleDoAfterTerminate
ReactiveX.Internal.Operators.Single.SingleDoAfterTerminate.SingleDoAfterTerminate(ReactiveX.ISingleSource? source, ReactiveX.Functions.IAction? onAfterTerminate) -> void
ReactiveX.Internal.Operators.Single.SingleDoFinally
ReactiveX.Internal.Operators.Single.SingleDoFinally.SingleDoFinally(ReactiveX.ISingleSource? source, ReactiveX.Functions.IAction? onFinally) -> void
ReactiveX.Internal.Operators.Single.SingleDoOnDispose
ReactiveX.Internal.Operators.Single.SingleDoOnDispose.SingleDoOnDispose(ReactiveX.ISingleSource? source, ReactiveX.Functions.IAction? onDispose) -> void
ReactiveX.Internal.Operators.Single.SingleDoOnError
ReactiveX.Internal.Operators.Single.SingleDoOnError.SingleDoOnError(ReactiveX.ISingleSource? source, ReactiveX.Functions.IConsumer? onError) -> void
ReactiveX.Internal.Operators.Single.SingleDoOnEvent
ReactiveX.Internal.Operators.Single.SingleDoOnEvent.SingleDoOnEvent(ReactiveX.ISingleSource? source, ReactiveX.Functions.IBiConsumer? onEvent) -> void
ReactiveX.Internal.Operators.Single.SingleDoOnSubscribe
ReactiveX.Internal.Operators.Single.SingleDoOnSubscribe.SingleDoOnSubscribe(ReactiveX.ISingleSource? source, ReactiveX.Functions.IConsumer? onSubscribe) -> void
ReactiveX.Internal.Operators.Single.SingleDoOnSuccess
ReactiveX.Internal.Operators.Single.SingleDoOnSuccess.SingleDoOnSuccess(ReactiveX.ISingleSource? source, ReactiveX.Functions.IConsumer? onSuccess) -> void
ReactiveX.Internal.Operators.Single.SingleDoOnTerminate
ReactiveX.Internal.Operators.Single.SingleDoOnTerminate.SingleDoOnTerminate(ReactiveX.ISingleSource? source, ReactiveX.Functions.IAction? onTerminate) -> void
ReactiveX.Internal.Operators.Single.SingleEquals
ReactiveX.Internal.Operators.Single.SingleEquals.SingleEquals(ReactiveX.ISingleSource? first, ReactiveX.ISingleSource? second) -> void
ReactiveX.Internal.Operators.Single.SingleError
ReactiveX.Internal.Operators.Single.SingleError.SingleError(Java.Util.Concurrent.ICallable? errorSupplier) -> void
ReactiveX.Internal.Operators.Single.SingleFlatMap
ReactiveX.Internal.Operators.Single.SingleFlatMap.SingleFlatMap(ReactiveX.ISingleSource? source, ReactiveX.Functions.IFunction? mapper) -> void
ReactiveX.Internal.Operators.Single.SingleFlatMapCompletable
ReactiveX.Internal.Operators.Single.SingleFlatMapCompletable.SingleFlatMapCompletable(ReactiveX.ISingleSource? source, ReactiveX.Functions.IFunction? mapper) -> void
ReactiveX.Internal.Operators.Single.SingleFlatMapIterableFlowable
ReactiveX.Internal.Operators.Single.SingleFlatMapIterableFlowable.SingleFlatMapIterableFlowable(ReactiveX.ISingleSource? source, ReactiveX.Functions.IFunction? mapper) -> void
ReactiveX.Internal.Operators.Single.SingleFlatMapIterableObservable
ReactiveX.Internal.Operators.Single.SingleFlatMapIterableObservable.SingleFlatMapIterableObservable(ReactiveX.ISingleSource? source, ReactiveX.Functions.IFunction? mapper) -> void
ReactiveX.Internal.Operators.Single.SingleFlatMapMaybe
ReactiveX.Internal.Operators.Single.SingleFlatMapMaybe.SingleFlatMapMaybe(ReactiveX.ISingleSource? source, ReactiveX.Functions.IFunction? mapper) -> void
ReactiveX.Internal.Operators.Single.SingleFlatMapPublisher
ReactiveX.Internal.Operators.Single.SingleFlatMapPublisher.SingleFlatMapPublisher(ReactiveX.ISingleSource? source, ReactiveX.Functions.IFunction? mapper) -> void
ReactiveX.Internal.Operators.Single.SingleFromCallable
ReactiveX.Internal.Operators.Single.SingleFromCallable.SingleFromCallable(Java.Util.Concurrent.ICallable? callable) -> void
ReactiveX.Internal.Operators.Single.SingleFromPublisher
ReactiveX.Internal.Operators.Single.SingleFromPublisher.SingleFromPublisher(ReactiveStreams.IPublisher? publisher) -> void
ReactiveX.Internal.Operators.Single.SingleFromUnsafeSource
ReactiveX.Internal.Operators.Single.SingleFromUnsafeSource.SingleFromUnsafeSource(ReactiveX.ISingleSource? source) -> void
ReactiveX.Internal.Operators.Single.SingleHide
ReactiveX.Internal.Operators.Single.SingleHide.SingleHide(ReactiveX.ISingleSource? source) -> void
ReactiveX.Internal.Operators.Single.SingleInternalHelper
ReactiveX.Internal.Operators.Single.SingleJust
ReactiveX.Internal.Operators.Single.SingleJust.SingleJust(Java.Lang.Object? value) -> void
ReactiveX.Internal.Operators.Single.SingleLift
ReactiveX.Internal.Operators.Single.SingleLift.SingleLift(ReactiveX.ISingleSource? source, ReactiveX.ISingleOperator? onLift) -> void
ReactiveX.Internal.Operators.Single.SingleMap
ReactiveX.Internal.Operators.Single.SingleMap.SingleMap(ReactiveX.ISingleSource? source, ReactiveX.Functions.IFunction? mapper) -> void
ReactiveX.Internal.Operators.Single.SingleMaterialize
ReactiveX.Internal.Operators.Single.SingleMaterialize.SingleMaterialize(ReactiveX.Single? source) -> void
ReactiveX.Internal.Operators.Single.SingleNever
ReactiveX.Internal.Operators.Single.SingleObserveOn
ReactiveX.Internal.Operators.Single.SingleObserveOn.SingleObserveOn(ReactiveX.ISingleSource? source, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Single.SingleOnErrorReturn
ReactiveX.Internal.Operators.Single.SingleOnErrorReturn.SingleOnErrorReturn(ReactiveX.ISingleSource? source, ReactiveX.Functions.IFunction? valueSupplier, Java.Lang.Object? value) -> void
ReactiveX.Internal.Operators.Single.SingleResumeNext
ReactiveX.Internal.Operators.Single.SingleResumeNext.SingleResumeNext(ReactiveX.ISingleSource? source, ReactiveX.Functions.IFunction? nextFunction) -> void
ReactiveX.Internal.Operators.Single.SingleSubscribeOn
ReactiveX.Internal.Operators.Single.SingleSubscribeOn.SingleSubscribeOn(ReactiveX.ISingleSource? source, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Single.SingleTakeUntil
ReactiveX.Internal.Operators.Single.SingleTakeUntil.SingleTakeUntil(ReactiveX.ISingleSource? source, ReactiveStreams.IPublisher? other) -> void
ReactiveX.Internal.Operators.Single.SingleTimeout
ReactiveX.Internal.Operators.Single.SingleTimeout.SingleTimeout(ReactiveX.ISingleSource? source, long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, ReactiveX.ISingleSource? other) -> void
ReactiveX.Internal.Operators.Single.SingleTimer
ReactiveX.Internal.Operators.Single.SingleTimer.SingleTimer(long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Single.SingleToFlowable
ReactiveX.Internal.Operators.Single.SingleToFlowable.SingleToFlowable(ReactiveX.ISingleSource? source) -> void
ReactiveX.Internal.Operators.Single.SingleToObservable
ReactiveX.Internal.Operators.Single.SingleToObservable.SingleToObservable(ReactiveX.ISingleSource? source) -> void
ReactiveX.Internal.Operators.Single.SingleUnsubscribeOn
ReactiveX.Internal.Operators.Single.SingleUnsubscribeOn.SingleUnsubscribeOn(ReactiveX.ISingleSource? source, ReactiveX.Scheduler? scheduler) -> void
ReactiveX.Internal.Operators.Single.SingleUsing
ReactiveX.Internal.Operators.Single.SingleUsing.SingleUsing(Java.Util.Concurrent.ICallable? resourceSupplier, ReactiveX.Functions.IFunction? singleFunction, ReactiveX.Functions.IConsumer? disposer, bool eager) -> void
ReactiveX.Internal.Operators.Single.SingleZipArray
ReactiveX.Internal.Operators.Single.SingleZipArray.SingleZipArray(ReactiveX.ISingleSource![]? sources, ReactiveX.Functions.IFunction? zipper) -> void
ReactiveX.Internal.Operators.Single.SingleZipIterable
ReactiveX.Internal.Operators.Single.SingleZipIterable.SingleZipIterable(Java.Lang.IIterable? sources, ReactiveX.Functions.IFunction? zipper) -> void
ReactiveX.Internal.Queue.MpscLinkedQueue
ReactiveX.Internal.Queue.MpscLinkedQueue.Clear() -> void
ReactiveX.Internal.Queue.MpscLinkedQueue.IsEmpty.get -> bool
ReactiveX.Internal.Queue.MpscLinkedQueue.MpscLinkedQueue() -> void
ReactiveX.Internal.Queue.MpscLinkedQueue.Offer(Java.Lang.Object? e) -> bool
ReactiveX.Internal.Queue.MpscLinkedQueue.Offer(Java.Lang.Object? v1, Java.Lang.Object? v2) -> bool
ReactiveX.Internal.Queue.MpscLinkedQueue.Poll() -> Java.Lang.Object?
ReactiveX.Internal.Queue.SpscArrayQueue
ReactiveX.Internal.Queue.SpscArrayQueue.Clear() -> void
ReactiveX.Internal.Queue.SpscArrayQueue.IsEmpty.get -> bool
ReactiveX.Internal.Queue.SpscArrayQueue.Offer(Java.Lang.Object? e) -> bool
ReactiveX.Internal.Queue.SpscArrayQueue.Offer(Java.Lang.Object? v1, Java.Lang.Object? v2) -> bool
ReactiveX.Internal.Queue.SpscArrayQueue.Poll() -> Java.Lang.Object?
ReactiveX.Internal.Queue.SpscArrayQueue.SpscArrayQueue(int capacity) -> void
ReactiveX.Internal.Queue.SpscLinkedArrayQueue
ReactiveX.Internal.Queue.SpscLinkedArrayQueue.Clear() -> void
ReactiveX.Internal.Queue.SpscLinkedArrayQueue.IsEmpty.get -> bool
ReactiveX.Internal.Queue.SpscLinkedArrayQueue.Offer(Java.Lang.Object? e) -> bool
ReactiveX.Internal.Queue.SpscLinkedArrayQueue.Offer(Java.Lang.Object? first, Java.Lang.Object? second) -> bool
ReactiveX.Internal.Queue.SpscLinkedArrayQueue.Peek() -> Java.Lang.Object?
ReactiveX.Internal.Queue.SpscLinkedArrayQueue.Poll() -> Java.Lang.Object?
ReactiveX.Internal.Queue.SpscLinkedArrayQueue.Size() -> int
ReactiveX.Internal.Queue.SpscLinkedArrayQueue.SpscLinkedArrayQueue(int bufferSize) -> void
ReactiveX.Internal.Schedulers.ComputationScheduler
ReactiveX.Internal.Schedulers.ComputationScheduler.ComputationScheduler() -> void
ReactiveX.Internal.Schedulers.ComputationScheduler.ComputationScheduler(Java.Util.Concurrent.IThreadFactory? threadFactory) -> void
ReactiveX.Internal.Schedulers.ComputationScheduler.CreateWorkers(int number, ReactiveX.Internal.Schedulers.ISchedulerMultiWorkerSupportWorkerCallback? callback) -> void
ReactiveX.Internal.Schedulers.ExecutorScheduler
ReactiveX.Internal.Schedulers.ExecutorScheduler.ExecutorScheduler(Java.Util.Concurrent.IExecutor? executor, bool interruptibleWorker) -> void
ReactiveX.Internal.Schedulers.ExecutorScheduler.ExecutorWorker
ReactiveX.Internal.Schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable
ReactiveX.Internal.Schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable.Dispose() -> void
ReactiveX.Internal.Schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable.IsDisposed.get -> bool
ReactiveX.Internal.Schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable.Run() -> void
ReactiveX.Internal.Schedulers.ExecutorScheduler.ExecutorWorker.ExecutorWorker(Java.Util.Concurrent.IExecutor? executor, bool interruptibleWorker) -> void
ReactiveX.Internal.Schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable
ReactiveX.Internal.Schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.Dispose() -> void
ReactiveX.Internal.Schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.IsDisposed.get -> bool
ReactiveX.Internal.Schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.Run() -> void
ReactiveX.Internal.Schedulers.ExecutorScheduler.ExecutorWorker.Run() -> void
ReactiveX.Internal.Schedulers.ExecutorScheduler.ExecutorWorker.SequentialDispose
ReactiveX.Internal.Schedulers.ExecutorScheduler.ExecutorWorker.SequentialDispose.Run() -> void
ReactiveX.Internal.Schedulers.INonBlockingThread
ReactiveX.Internal.Schedulers.ISchedulerMultiWorkerSupport
ReactiveX.Internal.Schedulers.ISchedulerMultiWorkerSupport.CreateWorkers(int number, ReactiveX.Internal.Schedulers.ISchedulerMultiWorkerSupportWorkerCallback? callback) -> void
ReactiveX.Internal.Schedulers.ISchedulerMultiWorkerSupportWorkerCallback
ReactiveX.Internal.Schedulers.ISchedulerMultiWorkerSupportWorkerCallback.OnWorker(int index, ReactiveX.Scheduler.Worker? worker) -> void
ReactiveX.Internal.Schedulers.ImmediateThinScheduler
ReactiveX.Internal.Schedulers.IoScheduler
ReactiveX.Internal.Schedulers.IoScheduler.IoScheduler() -> void
ReactiveX.Internal.Schedulers.IoScheduler.IoScheduler(Java.Util.Concurrent.IThreadFactory? threadFactory) -> void
ReactiveX.Internal.Schedulers.IoScheduler.Size() -> int
ReactiveX.Internal.Schedulers.NewThreadScheduler
ReactiveX.Internal.Schedulers.NewThreadScheduler.NewThreadScheduler() -> void
ReactiveX.Internal.Schedulers.NewThreadScheduler.NewThreadScheduler(Java.Util.Concurrent.IThreadFactory? threadFactory) -> void
ReactiveX.Internal.Schedulers.NewThreadWorker
ReactiveX.Internal.Schedulers.NewThreadWorker.NewThreadWorker(Java.Util.Concurrent.IThreadFactory? threadFactory) -> void
ReactiveX.Internal.Schedulers.NewThreadWorker.NewThreadWorker(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Schedulers.RxThreadFactory
ReactiveX.Internal.Schedulers.RxThreadFactory.NewThread(Java.Lang.IRunnable? r) -> Java.Lang.Thread?
ReactiveX.Internal.Schedulers.RxThreadFactory.RxThreadFactory(string? prefix) -> void
ReactiveX.Internal.Schedulers.RxThreadFactory.RxThreadFactory(string? prefix, int priority) -> void
ReactiveX.Internal.Schedulers.RxThreadFactory.RxThreadFactory(string? prefix, int priority, bool nonBlocking) -> void
ReactiveX.Internal.Schedulers.ScheduledDirectPeriodicTask
ReactiveX.Internal.Schedulers.ScheduledDirectPeriodicTask.Dispose() -> void
ReactiveX.Internal.Schedulers.ScheduledDirectPeriodicTask.IsDisposed.get -> bool
ReactiveX.Internal.Schedulers.ScheduledDirectPeriodicTask.Run() -> void
ReactiveX.Internal.Schedulers.ScheduledDirectPeriodicTask.ScheduledDirectPeriodicTask(Java.Lang.IRunnable? runnable) -> void
ReactiveX.Internal.Schedulers.ScheduledDirectPeriodicTask.SetFuture(Java.Util.Concurrent.IFuture? future) -> void
ReactiveX.Internal.Schedulers.ScheduledDirectPeriodicTask.WrappedRunnable.get -> Java.Lang.IRunnable?
ReactiveX.Internal.Schedulers.ScheduledDirectTask
ReactiveX.Internal.Schedulers.ScheduledDirectTask.Call() -> Java.Lang.Object?
ReactiveX.Internal.Schedulers.ScheduledDirectTask.Dispose() -> void
ReactiveX.Internal.Schedulers.ScheduledDirectTask.IsDisposed.get -> bool
ReactiveX.Internal.Schedulers.ScheduledDirectTask.ScheduledDirectTask(Java.Lang.IRunnable? runnable) -> void
ReactiveX.Internal.Schedulers.ScheduledDirectTask.SetFuture(Java.Util.Concurrent.IFuture? future) -> void
ReactiveX.Internal.Schedulers.ScheduledDirectTask.WrappedRunnable.get -> Java.Lang.IRunnable?
ReactiveX.Internal.Schedulers.ScheduledRunnable
ReactiveX.Internal.Schedulers.ScheduledRunnable.Call() -> Java.Lang.Object?
ReactiveX.Internal.Schedulers.ScheduledRunnable.Dispose() -> void
ReactiveX.Internal.Schedulers.ScheduledRunnable.IsDisposed.get -> bool
ReactiveX.Internal.Schedulers.ScheduledRunnable.Run() -> void
ReactiveX.Internal.Schedulers.ScheduledRunnable.ScheduledRunnable(Java.Lang.IRunnable? actual, ReactiveX.Internal.Disposables.IDisposableContainer? parent) -> void
ReactiveX.Internal.Schedulers.ScheduledRunnable.SetFuture(Java.Util.Concurrent.IFuture? f) -> void
ReactiveX.Internal.Schedulers.SchedulerPoolFactory
ReactiveX.Internal.Schedulers.SchedulerWhen
ReactiveX.Internal.Schedulers.SchedulerWhen.SchedulerWhen(ReactiveX.Functions.IFunction? combine, ReactiveX.Scheduler? actualScheduler) -> void
ReactiveX.Internal.Schedulers.SchedulerWhen.SchedulerWhen(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Schedulers.SingleScheduler
ReactiveX.Internal.Schedulers.SingleScheduler.SingleScheduler() -> void
ReactiveX.Internal.Schedulers.SingleScheduler.SingleScheduler(Java.Util.Concurrent.IThreadFactory? threadFactory) -> void
ReactiveX.Internal.Schedulers.TrampolineScheduler
ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber
ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.BasicFuseableConditionalSubscriber(ReactiveX.Internal.Fuseable.IConditionalSubscriber? downstream) -> void
ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.BasicFuseableConditionalSubscriber(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.Done.get -> bool
ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.Done.set -> void
ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.Downstream.get -> ReactiveX.Internal.Fuseable.IConditionalSubscriber?
ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.Downstream.set -> void
ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.Fail(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.Offer(Java.Lang.Object? e) -> bool
ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.Offer(Java.Lang.Object? v1, Java.Lang.Object? v2) -> bool
ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.Qs.get -> ReactiveX.Internal.Fuseable.IQueueSubscription?
ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.Qs.set -> void
ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.SourceMode.get -> int
ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.SourceMode.set -> void
ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.TransitiveBoundaryFusion(int mode) -> int
ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.Upstream.get -> ReactiveStreams.ISubscription?
ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.Upstream.set -> void
ReactiveX.Internal.Subscribers.BasicFuseableSubscriber
ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.BasicFuseableSubscriber(ReactiveStreams.ISubscriber? downstream) -> void
ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.BasicFuseableSubscriber(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.Done.get -> bool
ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.Done.set -> void
ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.Downstream.get -> ReactiveStreams.ISubscriber?
ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.Downstream.set -> void
ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.Fail(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.Offer(Java.Lang.Object? e) -> bool
ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.Offer(Java.Lang.Object? v1, Java.Lang.Object? v2) -> bool
ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.Qs.get -> ReactiveX.Internal.Fuseable.IQueueSubscription?
ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.Qs.set -> void
ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.SourceMode.get -> int
ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.SourceMode.set -> void
ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.TransitiveBoundaryFusion(int mode) -> int
ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.Upstream.get -> ReactiveStreams.ISubscription?
ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.Upstream.set -> void
ReactiveX.Internal.Subscribers.BlockingBaseSubscriber
ReactiveX.Internal.Subscribers.BlockingBaseSubscriber.BlockingBaseSubscriber() -> void
ReactiveX.Internal.Subscribers.BlockingBaseSubscriber.BlockingBaseSubscriber(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Subscribers.BlockingBaseSubscriber.BlockingGet() -> Java.Lang.Object?
ReactiveX.Internal.Subscribers.BlockingBaseSubscriber.OnComplete() -> void
ReactiveX.Internal.Subscribers.BlockingBaseSubscriber.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
ReactiveX.Internal.Subscribers.BlockingFirstSubscriber
ReactiveX.Internal.Subscribers.BlockingFirstSubscriber.BlockingFirstSubscriber() -> void
ReactiveX.Internal.Subscribers.BlockingLastSubscriber
ReactiveX.Internal.Subscribers.BlockingLastSubscriber.BlockingLastSubscriber() -> void
ReactiveX.Internal.Subscribers.BlockingSubscriber
ReactiveX.Internal.Subscribers.BlockingSubscriber.BlockingSubscriber(Java.Util.IQueue? queue) -> void
ReactiveX.Internal.Subscribers.BlockingSubscriber.Cancel() -> void
ReactiveX.Internal.Subscribers.BlockingSubscriber.IsCancelled.get -> bool
ReactiveX.Internal.Subscribers.BlockingSubscriber.OnComplete() -> void
ReactiveX.Internal.Subscribers.BlockingSubscriber.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Subscribers.BlockingSubscriber.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Internal.Subscribers.BlockingSubscriber.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
ReactiveX.Internal.Subscribers.BlockingSubscriber.Request(long n) -> void
ReactiveX.Internal.Subscribers.BoundedSubscriber
ReactiveX.Internal.Subscribers.BoundedSubscriber.BoundedSubscriber(ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete, ReactiveX.Functions.IConsumer? onSubscribe, int bufferSize) -> void
ReactiveX.Internal.Subscribers.BoundedSubscriber.Cancel() -> void
ReactiveX.Internal.Subscribers.BoundedSubscriber.Dispose() -> void
ReactiveX.Internal.Subscribers.BoundedSubscriber.HasCustomOnError.get -> bool
ReactiveX.Internal.Subscribers.BoundedSubscriber.IsDisposed.get -> bool
ReactiveX.Internal.Subscribers.BoundedSubscriber.OnComplete() -> void
ReactiveX.Internal.Subscribers.BoundedSubscriber.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Subscribers.BoundedSubscriber.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Internal.Subscribers.BoundedSubscriber.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
ReactiveX.Internal.Subscribers.BoundedSubscriber.Request(long n) -> void
ReactiveX.Internal.Subscribers.DeferredScalarSubscriber
ReactiveX.Internal.Subscribers.DeferredScalarSubscriber.DeferredScalarSubscriber(ReactiveStreams.ISubscriber? downstream) -> void
ReactiveX.Internal.Subscribers.DeferredScalarSubscriber.DeferredScalarSubscriber(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Subscribers.DeferredScalarSubscriber.HasValue.get -> bool
ReactiveX.Internal.Subscribers.DeferredScalarSubscriber.HasValue.set -> void
ReactiveX.Internal.Subscribers.DeferredScalarSubscriber.Upstream.get -> ReactiveStreams.ISubscription?
ReactiveX.Internal.Subscribers.DeferredScalarSubscriber.Upstream.set -> void
ReactiveX.Internal.Subscribers.ForEachWhileSubscriber
ReactiveX.Internal.Subscribers.ForEachWhileSubscriber.Dispose() -> void
ReactiveX.Internal.Subscribers.ForEachWhileSubscriber.ForEachWhileSubscriber(ReactiveX.Functions.IPredicate? onNext, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete) -> void
ReactiveX.Internal.Subscribers.ForEachWhileSubscriber.IsDisposed.get -> bool
ReactiveX.Internal.Subscribers.ForEachWhileSubscriber.OnComplete() -> void
ReactiveX.Internal.Subscribers.ForEachWhileSubscriber.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Subscribers.ForEachWhileSubscriber.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Internal.Subscribers.ForEachWhileSubscriber.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
ReactiveX.Internal.Subscribers.FutureSubscriber
ReactiveX.Internal.Subscribers.FutureSubscriber.Cancel() -> void
ReactiveX.Internal.Subscribers.FutureSubscriber.Cancel(bool mayInterruptIfRunning) -> bool
ReactiveX.Internal.Subscribers.FutureSubscriber.FutureSubscriber() -> void
ReactiveX.Internal.Subscribers.FutureSubscriber.Get() -> Java.Lang.Object?
ReactiveX.Internal.Subscribers.FutureSubscriber.Get(long timeout, Java.Util.Concurrent.TimeUnit? unit) -> Java.Lang.Object?
ReactiveX.Internal.Subscribers.FutureSubscriber.IsCancelled.get -> bool
ReactiveX.Internal.Subscribers.FutureSubscriber.IsDone.get -> bool
ReactiveX.Internal.Subscribers.FutureSubscriber.OnComplete() -> void
ReactiveX.Internal.Subscribers.FutureSubscriber.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Subscribers.FutureSubscriber.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Internal.Subscribers.FutureSubscriber.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
ReactiveX.Internal.Subscribers.FutureSubscriber.Request(long n) -> void
ReactiveX.Internal.Subscribers.IInnerQueuedSubscriberSupport
ReactiveX.Internal.Subscribers.IInnerQueuedSubscriberSupport.Drain() -> void
ReactiveX.Internal.Subscribers.IInnerQueuedSubscriberSupport.InnerComplete(ReactiveX.Internal.Subscribers.InnerQueuedSubscriber? inner) -> void
ReactiveX.Internal.Subscribers.IInnerQueuedSubscriberSupport.InnerError(ReactiveX.Internal.Subscribers.InnerQueuedSubscriber? inner, Java.Lang.Throwable? e) -> void
ReactiveX.Internal.Subscribers.IInnerQueuedSubscriberSupport.InnerNext(ReactiveX.Internal.Subscribers.InnerQueuedSubscriber? inner, Java.Lang.Object? value) -> void
ReactiveX.Internal.Subscribers.InnerQueuedSubscriber
ReactiveX.Internal.Subscribers.InnerQueuedSubscriber.Cancel() -> void
ReactiveX.Internal.Subscribers.InnerQueuedSubscriber.InnerQueuedSubscriber(ReactiveX.Internal.Subscribers.IInnerQueuedSubscriberSupport? parent, int prefetch) -> void
ReactiveX.Internal.Subscribers.InnerQueuedSubscriber.IsDone.get -> bool
ReactiveX.Internal.Subscribers.InnerQueuedSubscriber.OnComplete() -> void
ReactiveX.Internal.Subscribers.InnerQueuedSubscriber.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Subscribers.InnerQueuedSubscriber.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Internal.Subscribers.InnerQueuedSubscriber.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
ReactiveX.Internal.Subscribers.InnerQueuedSubscriber.Queue() -> ReactiveX.Internal.Fuseable.ISimpleQueue?
ReactiveX.Internal.Subscribers.InnerQueuedSubscriber.Request(long n) -> void
ReactiveX.Internal.Subscribers.InnerQueuedSubscriber.RequestOne() -> void
ReactiveX.Internal.Subscribers.InnerQueuedSubscriber.SetDone() -> void
ReactiveX.Internal.Subscribers.LambdaSubscriber
ReactiveX.Internal.Subscribers.LambdaSubscriber.Cancel() -> void
ReactiveX.Internal.Subscribers.LambdaSubscriber.Dispose() -> void
ReactiveX.Internal.Subscribers.LambdaSubscriber.HasCustomOnError.get -> bool
ReactiveX.Internal.Subscribers.LambdaSubscriber.IsDisposed.get -> bool
ReactiveX.Internal.Subscribers.LambdaSubscriber.LambdaSubscriber(ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete, ReactiveX.Functions.IConsumer? onSubscribe) -> void
ReactiveX.Internal.Subscribers.LambdaSubscriber.OnComplete() -> void
ReactiveX.Internal.Subscribers.LambdaSubscriber.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Subscribers.LambdaSubscriber.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Internal.Subscribers.LambdaSubscriber.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
ReactiveX.Internal.Subscribers.LambdaSubscriber.Request(long n) -> void
ReactiveX.Internal.Subscribers.QueueDrainSubscriber
ReactiveX.Internal.Subscribers.QueueDrainSubscriber.Cancelled() -> bool
ReactiveX.Internal.Subscribers.QueueDrainSubscriber.Done() -> bool
ReactiveX.Internal.Subscribers.QueueDrainSubscriber.Downstream.get -> ReactiveStreams.ISubscriber?
ReactiveX.Internal.Subscribers.QueueDrainSubscriber.Downstream.set -> void
ReactiveX.Internal.Subscribers.QueueDrainSubscriber.Enter() -> bool
ReactiveX.Internal.Subscribers.QueueDrainSubscriber.Error() -> Java.Lang.Throwable?
ReactiveX.Internal.Subscribers.QueueDrainSubscriber.FastEnter() -> bool
ReactiveX.Internal.Subscribers.QueueDrainSubscriber.FastPathEmitMax(Java.Lang.Object? value, bool delayError, ReactiveX.Disposables.IDisposable? dispose) -> void
ReactiveX.Internal.Subscribers.QueueDrainSubscriber.FastPathOrderedEmitMax(Java.Lang.Object? value, bool delayError, ReactiveX.Disposables.IDisposable? dispose) -> void
ReactiveX.Internal.Subscribers.QueueDrainSubscriber.Leave(int m) -> int
ReactiveX.Internal.Subscribers.QueueDrainSubscriber.Produced(long n) -> long
ReactiveX.Internal.Subscribers.QueueDrainSubscriber.Queue.get -> ReactiveX.Internal.Fuseable.ISimplePlainQueue?
ReactiveX.Internal.Subscribers.QueueDrainSubscriber.Queue.set -> void
ReactiveX.Internal.Subscribers.QueueDrainSubscriber.QueueDrainSubscriber(ReactiveStreams.ISubscriber? actual, ReactiveX.Internal.Fuseable.ISimplePlainQueue? queue) -> void
ReactiveX.Internal.Subscribers.QueueDrainSubscriber.QueueDrainSubscriber(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Subscribers.QueueDrainSubscriber.Requested() -> long
ReactiveX.Internal.Subscribers.QueueDrainSubscriber.Requested(long n) -> void
ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber
ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber.Complete(Java.Lang.Object? n) -> void
ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber.Downstream.get -> ReactiveStreams.ISubscriber?
ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber.Downstream.set -> void
ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber.Produced.get -> long
ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber.Produced.set -> void
ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber.Request(long n) -> void
ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber.SinglePostCompleteSubscriber(ReactiveStreams.ISubscriber? downstream) -> void
ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber.SinglePostCompleteSubscriber(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber.Upstream.get -> ReactiveStreams.ISubscription?
ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber.Upstream.set -> void
ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber.Value.get -> Java.Lang.Object?
ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber.Value.set -> void
ReactiveX.Internal.Subscribers.StrictSubscriber
ReactiveX.Internal.Subscribers.StrictSubscriber.StrictSubscriber(ReactiveStreams.ISubscriber? downstream) -> void
ReactiveX.Internal.Subscribers.StrictSubscriber.StrictSubscriber(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Subscribers.SubscriberResourceWrapper
ReactiveX.Internal.Subscribers.SubscriberResourceWrapper.Cancel() -> void
ReactiveX.Internal.Subscribers.SubscriberResourceWrapper.Dispose() -> void
ReactiveX.Internal.Subscribers.SubscriberResourceWrapper.IsDisposed.get -> bool
ReactiveX.Internal.Subscribers.SubscriberResourceWrapper.OnComplete() -> void
ReactiveX.Internal.Subscribers.SubscriberResourceWrapper.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Subscribers.SubscriberResourceWrapper.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Internal.Subscribers.SubscriberResourceWrapper.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
ReactiveX.Internal.Subscribers.SubscriberResourceWrapper.Request(long n) -> void
ReactiveX.Internal.Subscribers.SubscriberResourceWrapper.SetResource(ReactiveX.Disposables.IDisposable? resource) -> void
ReactiveX.Internal.Subscribers.SubscriberResourceWrapper.SubscriberResourceWrapper(ReactiveStreams.ISubscriber? downstream) -> void
ReactiveX.Internal.Subscriptions.ArrayCompositeSubscription
ReactiveX.Internal.Subscriptions.ArrayCompositeSubscription.ArrayCompositeSubscription(int capacity) -> void
ReactiveX.Internal.Subscriptions.ArrayCompositeSubscription.Dispose() -> void
ReactiveX.Internal.Subscriptions.ArrayCompositeSubscription.IsDisposed.get -> bool
ReactiveX.Internal.Subscriptions.ArrayCompositeSubscription.ReplaceResource(int index, ReactiveStreams.ISubscription? resource) -> ReactiveStreams.ISubscription?
ReactiveX.Internal.Subscriptions.ArrayCompositeSubscription.SetResource(int index, ReactiveStreams.ISubscription? resource) -> bool
ReactiveX.Internal.Subscriptions.AsyncSubscription
ReactiveX.Internal.Subscriptions.AsyncSubscription.AsyncSubscription() -> void
ReactiveX.Internal.Subscriptions.AsyncSubscription.AsyncSubscription(ReactiveX.Disposables.IDisposable? resource) -> void
ReactiveX.Internal.Subscriptions.AsyncSubscription.Cancel() -> void
ReactiveX.Internal.Subscriptions.AsyncSubscription.Dispose() -> void
ReactiveX.Internal.Subscriptions.AsyncSubscription.IsDisposed.get -> bool
ReactiveX.Internal.Subscriptions.AsyncSubscription.ReplaceResource(ReactiveX.Disposables.IDisposable? r) -> bool
ReactiveX.Internal.Subscriptions.AsyncSubscription.Request(long n) -> void
ReactiveX.Internal.Subscriptions.AsyncSubscription.SetResource(ReactiveX.Disposables.IDisposable? r) -> bool
ReactiveX.Internal.Subscriptions.AsyncSubscription.SetSubscription(ReactiveStreams.ISubscription? s) -> void
ReactiveX.Internal.Subscriptions.BasicIntQueueSubscription
ReactiveX.Internal.Subscriptions.BasicIntQueueSubscription.BasicIntQueueSubscription() -> void
ReactiveX.Internal.Subscriptions.BasicIntQueueSubscription.BasicIntQueueSubscription(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Subscriptions.BasicIntQueueSubscription.Offer(Java.Lang.Object? e) -> bool
ReactiveX.Internal.Subscriptions.BasicIntQueueSubscription.Offer(Java.Lang.Object? v1, Java.Lang.Object? v2) -> bool
ReactiveX.Internal.Subscriptions.BasicQueueSubscription
ReactiveX.Internal.Subscriptions.BasicQueueSubscription.BasicQueueSubscription() -> void
ReactiveX.Internal.Subscriptions.BasicQueueSubscription.BasicQueueSubscription(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Subscriptions.BasicQueueSubscription.Offer(Java.Lang.Object? e) -> bool
ReactiveX.Internal.Subscriptions.BasicQueueSubscription.Offer(Java.Lang.Object? v1, Java.Lang.Object? v2) -> bool
ReactiveX.Internal.Subscriptions.BooleanSubscription
ReactiveX.Internal.Subscriptions.BooleanSubscription.BooleanSubscription() -> void
ReactiveX.Internal.Subscriptions.BooleanSubscription.Cancel() -> void
ReactiveX.Internal.Subscriptions.BooleanSubscription.IsCancelled.get -> bool
ReactiveX.Internal.Subscriptions.BooleanSubscription.Request(long n) -> void
ReactiveX.Internal.Subscriptions.DeferredScalarSubscription
ReactiveX.Internal.Subscriptions.DeferredScalarSubscription.Complete(Java.Lang.Object? v) -> void
ReactiveX.Internal.Subscriptions.DeferredScalarSubscription.DeferredScalarSubscription(ReactiveStreams.ISubscriber? downstream) -> void
ReactiveX.Internal.Subscriptions.DeferredScalarSubscription.DeferredScalarSubscription(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Subscriptions.DeferredScalarSubscription.Downstream.get -> ReactiveStreams.ISubscriber?
ReactiveX.Internal.Subscriptions.DeferredScalarSubscription.Downstream.set -> void
ReactiveX.Internal.Subscriptions.DeferredScalarSubscription.IsCancelled.get -> bool
ReactiveX.Internal.Subscriptions.DeferredScalarSubscription.TryCancel() -> bool
ReactiveX.Internal.Subscriptions.DeferredScalarSubscription.Value.get -> Java.Lang.Object?
ReactiveX.Internal.Subscriptions.DeferredScalarSubscription.Value.set -> void
ReactiveX.Internal.Subscriptions.EmptySubscription
ReactiveX.Internal.Subscriptions.EmptySubscription.Cancel() -> void
ReactiveX.Internal.Subscriptions.EmptySubscription.Clear() -> void
ReactiveX.Internal.Subscriptions.EmptySubscription.IsEmpty.get -> bool
ReactiveX.Internal.Subscriptions.EmptySubscription.Offer(Java.Lang.Object? v1, Java.Lang.Object? v2) -> bool
ReactiveX.Internal.Subscriptions.EmptySubscription.Offer(Java.Lang.Object? value) -> bool
ReactiveX.Internal.Subscriptions.EmptySubscription.Poll() -> Java.Lang.Object?
ReactiveX.Internal.Subscriptions.EmptySubscription.Request(long n) -> void
ReactiveX.Internal.Subscriptions.EmptySubscription.RequestFusion(int mode) -> int
ReactiveX.Internal.Subscriptions.ScalarSubscription
ReactiveX.Internal.Subscriptions.ScalarSubscription.Cancel() -> void
ReactiveX.Internal.Subscriptions.ScalarSubscription.Clear() -> void
ReactiveX.Internal.Subscriptions.ScalarSubscription.IsCancelled.get -> bool
ReactiveX.Internal.Subscriptions.ScalarSubscription.IsEmpty.get -> bool
ReactiveX.Internal.Subscriptions.ScalarSubscription.Offer(Java.Lang.Object? e) -> bool
ReactiveX.Internal.Subscriptions.ScalarSubscription.Offer(Java.Lang.Object? v1, Java.Lang.Object? v2) -> bool
ReactiveX.Internal.Subscriptions.ScalarSubscription.Poll() -> Java.Lang.Object?
ReactiveX.Internal.Subscriptions.ScalarSubscription.Request(long n) -> void
ReactiveX.Internal.Subscriptions.ScalarSubscription.RequestFusion(int mode) -> int
ReactiveX.Internal.Subscriptions.ScalarSubscription.ScalarSubscription(ReactiveStreams.ISubscriber? subscriber, Java.Lang.Object? value) -> void
ReactiveX.Internal.Subscriptions.SubscriptionArbiter
ReactiveX.Internal.Subscriptions.SubscriptionArbiter.IsCancelled.get -> bool
ReactiveX.Internal.Subscriptions.SubscriptionArbiter.IsUnbounded.get -> bool
ReactiveX.Internal.Subscriptions.SubscriptionArbiter.Produced(long n) -> void
ReactiveX.Internal.Subscriptions.SubscriptionArbiter.Request(long n) -> void
ReactiveX.Internal.Subscriptions.SubscriptionArbiter.SetSubscription(ReactiveStreams.ISubscription? s) -> void
ReactiveX.Internal.Subscriptions.SubscriptionArbiter.SubscriptionArbiter(bool cancelOnReplace) -> void
ReactiveX.Internal.Subscriptions.SubscriptionArbiter.SubscriptionArbiter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Subscriptions.SubscriptionArbiter.Unbounded.get -> bool
ReactiveX.Internal.Subscriptions.SubscriptionArbiter.Unbounded.set -> void
ReactiveX.Internal.Subscriptions.SubscriptionHelper
ReactiveX.Internal.Subscriptions.SubscriptionHelper.Cancel() -> void
ReactiveX.Internal.Subscriptions.SubscriptionHelper.Request(long n) -> void
ReactiveX.Internal.Util.AppendOnlyLinkedArrayList
ReactiveX.Internal.Util.AppendOnlyLinkedArrayList.AppendOnlyLinkedArrayList(int capacity) -> void
ReactiveX.Internal.Util.AppendOnlyLinkedArrayList.AppendOnlyLinkedArrayList(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Util.AppendOnlyLinkedArrayList.INonThrowingPredicate
ReactiveX.Internal.Util.AppendOnlyLinkedArrayList.INonThrowingPredicate.Test(Java.Lang.Object? t) -> bool
ReactiveX.Internal.Util.AtomicThrowable
ReactiveX.Internal.Util.AtomicThrowable.AddThrowable(Java.Lang.Throwable? t) -> bool
ReactiveX.Internal.Util.AtomicThrowable.AtomicThrowable() -> void
ReactiveX.Internal.Util.AtomicThrowable.IsTerminated.get -> bool
ReactiveX.Internal.Util.AtomicThrowable.Terminate() -> Java.Lang.Throwable?
ReactiveX.Internal.Util.BackpressureHelper
ReactiveX.Internal.Util.BlockingHelper
ReactiveX.Internal.Util.BlockingIgnoringReceiver
ReactiveX.Internal.Util.BlockingIgnoringReceiver.Accept(Java.Lang.Throwable? e) -> void
ReactiveX.Internal.Util.BlockingIgnoringReceiver.BlockingIgnoringReceiver() -> void
ReactiveX.Internal.Util.BlockingIgnoringReceiver.Error.get -> Java.Lang.Throwable?
ReactiveX.Internal.Util.BlockingIgnoringReceiver.Error.set -> void
ReactiveX.Internal.Util.BlockingIgnoringReceiver.Run() -> void
ReactiveX.Internal.Util.ConnectConsumer
ReactiveX.Internal.Util.ConnectConsumer.Accept(ReactiveX.Disposables.IDisposable? t) -> void
ReactiveX.Internal.Util.ConnectConsumer.ConnectConsumer() -> void
ReactiveX.Internal.Util.ConnectConsumer.Disposable.get -> ReactiveX.Disposables.IDisposable?
ReactiveX.Internal.Util.ConnectConsumer.Disposable.set -> void
ReactiveX.Internal.Util.EmptyComponent
ReactiveX.Internal.Util.EmptyComponent.Cancel() -> void
ReactiveX.Internal.Util.EmptyComponent.Dispose() -> void
ReactiveX.Internal.Util.EmptyComponent.IsDisposed.get -> bool
ReactiveX.Internal.Util.EmptyComponent.OnComplete() -> void
ReactiveX.Internal.Util.EmptyComponent.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Internal.Util.EmptyComponent.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Internal.Util.EmptyComponent.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
ReactiveX.Internal.Util.EmptyComponent.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Internal.Util.EmptyComponent.OnSuccess(Java.Lang.Object? value) -> void
ReactiveX.Internal.Util.EmptyComponent.Request(long n) -> void
ReactiveX.Internal.Util.EndConsumerHelper
ReactiveX.Internal.Util.ErrorMode
ReactiveX.Internal.Util.ExceptionHelper
ReactiveX.Internal.Util.HalfSerializer
ReactiveX.Internal.Util.IObservableQueueDrain
ReactiveX.Internal.Util.IObservableQueueDrain.Accept(ReactiveX.IObserver? a, Java.Lang.Object? v) -> void
ReactiveX.Internal.Util.IObservableQueueDrain.Cancelled() -> bool
ReactiveX.Internal.Util.IObservableQueueDrain.Done() -> bool
ReactiveX.Internal.Util.IObservableQueueDrain.Enter() -> bool
ReactiveX.Internal.Util.IObservableQueueDrain.Error() -> Java.Lang.Throwable?
ReactiveX.Internal.Util.IObservableQueueDrain.Leave(int m) -> int
ReactiveX.Internal.Util.IQueueDrain
ReactiveX.Internal.Util.IQueueDrain.Accept(ReactiveStreams.ISubscriber? p0, Java.Lang.Object? p1) -> bool
ReactiveX.Internal.Util.IQueueDrain.Cancelled() -> bool
ReactiveX.Internal.Util.IQueueDrain.Done() -> bool
ReactiveX.Internal.Util.IQueueDrain.Enter() -> bool
ReactiveX.Internal.Util.IQueueDrain.Error() -> Java.Lang.Throwable?
ReactiveX.Internal.Util.IQueueDrain.Leave(int m) -> int
ReactiveX.Internal.Util.IQueueDrain.Produced(long n) -> long
ReactiveX.Internal.Util.IQueueDrain.Requested() -> long
ReactiveX.Internal.Util.ISuppressAnimalSniffer
ReactiveX.Internal.Util.LinkedArrayList
ReactiveX.Internal.Util.LinkedArrayList.LinkedArrayList(int capacityHint) -> void
ReactiveX.Internal.Util.LinkedArrayList.LinkedArrayList(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Internal.Util.NotificationLite
ReactiveX.Internal.Util.OpenHashSet
ReactiveX.Internal.Util.OpenHashSet.Add(Java.Lang.Object? value) -> bool
ReactiveX.Internal.Util.OpenHashSet.Keys() -> Java.Lang.Object![]?
ReactiveX.Internal.Util.OpenHashSet.OpenHashSet() -> void
ReactiveX.Internal.Util.OpenHashSet.OpenHashSet(int capacity) -> void
ReactiveX.Internal.Util.OpenHashSet.OpenHashSet(int capacity, float loadFactor) -> void
ReactiveX.Internal.Util.OpenHashSet.Remove(Java.Lang.Object? value) -> bool
ReactiveX.Internal.Util.OpenHashSet.Size() -> int
ReactiveX.Internal.Util.Pow2
ReactiveX.Internal.Util.QueueDrainHelper
ReactiveX.Internal.Util.SuppressAnimalSnifferAttribute
ReactiveX.Internal.Util.SuppressAnimalSnifferAttribute.SuppressAnimalSnifferAttribute() -> void
ReactiveX.Internal.Util.VolatileSizeArrayList
ReactiveX.Internal.Util.VolatileSizeArrayList.Add(Java.Lang.Object? e) -> bool
ReactiveX.Internal.Util.VolatileSizeArrayList.Add(int index, Java.Lang.Object? element) -> void
ReactiveX.Internal.Util.VolatileSizeArrayList.AddAll(System.Collections.ICollection? c) -> bool
ReactiveX.Internal.Util.VolatileSizeArrayList.AddAll(int index, System.Collections.ICollection? c) -> bool
ReactiveX.Internal.Util.VolatileSizeArrayList.Clear() -> void
ReactiveX.Internal.Util.VolatileSizeArrayList.Contains(Java.Lang.Object? o) -> bool
ReactiveX.Internal.Util.VolatileSizeArrayList.ContainsAll(System.Collections.ICollection? c) -> bool
ReactiveX.Internal.Util.VolatileSizeArrayList.Get(int index) -> Java.Lang.Object?
ReactiveX.Internal.Util.VolatileSizeArrayList.IndexOf(Java.Lang.Object? o) -> int
ReactiveX.Internal.Util.VolatileSizeArrayList.IsEmpty.get -> bool
ReactiveX.Internal.Util.VolatileSizeArrayList.Iterator() -> Java.Util.IIterator?
ReactiveX.Internal.Util.VolatileSizeArrayList.LastIndexOf(Java.Lang.Object? o) -> int
ReactiveX.Internal.Util.VolatileSizeArrayList.ListIterator() -> Java.Util.IListIterator?
ReactiveX.Internal.Util.VolatileSizeArrayList.ListIterator(int index) -> Java.Util.IListIterator?
ReactiveX.Internal.Util.VolatileSizeArrayList.Remove(Java.Lang.Object? o) -> bool
ReactiveX.Internal.Util.VolatileSizeArrayList.Remove(int index) -> Java.Lang.Object?
ReactiveX.Internal.Util.VolatileSizeArrayList.RemoveAll(System.Collections.ICollection? c) -> bool
ReactiveX.Internal.Util.VolatileSizeArrayList.RetainAll(System.Collections.ICollection? c) -> bool
ReactiveX.Internal.Util.VolatileSizeArrayList.Set(int index, Java.Lang.Object? element) -> Java.Lang.Object?
ReactiveX.Internal.Util.VolatileSizeArrayList.Size() -> int
ReactiveX.Internal.Util.VolatileSizeArrayList.SubList(int fromIndex, int toIndex) -> System.Collections.IList?
ReactiveX.Internal.Util.VolatileSizeArrayList.ToArray() -> Java.Lang.Object![]?
ReactiveX.Internal.Util.VolatileSizeArrayList.ToArray(Java.Lang.Object![]? a) -> Java.Lang.Object![]?
ReactiveX.Internal.Util.VolatileSizeArrayList.VolatileSizeArrayList() -> void
ReactiveX.Internal.Util.VolatileSizeArrayList.VolatileSizeArrayList(int initialCapacity) -> void
ReactiveX.Maybe
ReactiveX.Maybe.AmbWith(ReactiveX.IMaybeSource? other) -> ReactiveX.Maybe?
ReactiveX.Maybe.As(ReactiveX.IMaybeConverter? converter) -> Java.Lang.Object?
ReactiveX.Maybe.BlockingGet() -> Java.Lang.Object?
ReactiveX.Maybe.BlockingGet(Java.Lang.Object? defaultValue) -> Java.Lang.Object?
ReactiveX.Maybe.Cache() -> ReactiveX.Maybe?
ReactiveX.Maybe.Cast(Java.Lang.Class? clazz) -> ReactiveX.Maybe?
ReactiveX.Maybe.Compose(ReactiveX.IMaybeTransformer? transformer) -> ReactiveX.Maybe?
ReactiveX.Maybe.ConcatMap(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Maybe?
ReactiveX.Maybe.ConcatWith(ReactiveX.IMaybeSource? other) -> ReactiveX.Flowable?
ReactiveX.Maybe.Contains(Java.Lang.Object? item) -> ReactiveX.Single?
ReactiveX.Maybe.Count() -> ReactiveX.Single?
ReactiveX.Maybe.DefaultIfEmpty(Java.Lang.Object? defaultItem) -> ReactiveX.Maybe?
ReactiveX.Maybe.Delay(ReactiveStreams.IPublisher? delayIndicator) -> ReactiveX.Maybe?
ReactiveX.Maybe.Delay(long delay, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Maybe?
ReactiveX.Maybe.Delay(long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Maybe?
ReactiveX.Maybe.DelaySubscription(ReactiveStreams.IPublisher? subscriptionIndicator) -> ReactiveX.Maybe?
ReactiveX.Maybe.DelaySubscription(long delay, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Maybe?
ReactiveX.Maybe.DelaySubscription(long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Maybe?
ReactiveX.Maybe.DoAfterSuccess(ReactiveX.Functions.IConsumer? onAfterSuccess) -> ReactiveX.Maybe?
ReactiveX.Maybe.DoAfterTerminate(ReactiveX.Functions.IAction? onAfterTerminate) -> ReactiveX.Maybe?
ReactiveX.Maybe.DoFinally(ReactiveX.Functions.IAction? onFinally) -> ReactiveX.Maybe?
ReactiveX.Maybe.DoOnComplete(ReactiveX.Functions.IAction? onComplete) -> ReactiveX.Maybe?
ReactiveX.Maybe.DoOnDispose(ReactiveX.Functions.IAction? onDispose) -> ReactiveX.Maybe?
ReactiveX.Maybe.DoOnError(ReactiveX.Functions.IConsumer? onError) -> ReactiveX.Maybe?
ReactiveX.Maybe.DoOnEvent(ReactiveX.Functions.IBiConsumer? onEvent) -> ReactiveX.Maybe?
ReactiveX.Maybe.DoOnSubscribe(ReactiveX.Functions.IConsumer? onSubscribe) -> ReactiveX.Maybe?
ReactiveX.Maybe.DoOnSuccess(ReactiveX.Functions.IConsumer? onSuccess) -> ReactiveX.Maybe?
ReactiveX.Maybe.DoOnTerminate(ReactiveX.Functions.IAction? onTerminate) -> ReactiveX.Maybe?
ReactiveX.Maybe.Filter(ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Maybe?
ReactiveX.Maybe.FlatMap(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Maybe?
ReactiveX.Maybe.FlatMap(ReactiveX.Functions.IFunction? mapper, ReactiveX.Functions.IBiFunction? resultSelector) -> ReactiveX.Maybe?
ReactiveX.Maybe.FlatMap(ReactiveX.Functions.IFunction? onSuccessMapper, ReactiveX.Functions.IFunction? onErrorMapper, Java.Util.Concurrent.ICallable? onCompleteSupplier) -> ReactiveX.Maybe?
ReactiveX.Maybe.FlatMapCompletable(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Completable?
ReactiveX.Maybe.FlatMapObservable(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Maybe.FlatMapPublisher(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Maybe.FlatMapSingle(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Single?
ReactiveX.Maybe.FlatMapSingleElement(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Maybe?
ReactiveX.Maybe.FlattenAsFlowable(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Maybe.FlattenAsObservable(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Maybe.Hide() -> ReactiveX.Maybe?
ReactiveX.Maybe.IgnoreElement() -> ReactiveX.Completable?
ReactiveX.Maybe.IsEmpty() -> ReactiveX.Single?
ReactiveX.Maybe.Lift(ReactiveX.IMaybeOperator? lift) -> ReactiveX.Maybe?
ReactiveX.Maybe.Map(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Maybe?
ReactiveX.Maybe.Materialize() -> ReactiveX.Single?
ReactiveX.Maybe.Maybe() -> void
ReactiveX.Maybe.Maybe(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Maybe.MergeWith(ReactiveX.IMaybeSource? other) -> ReactiveX.Flowable?
ReactiveX.Maybe.ObserveOn(ReactiveX.Scheduler? scheduler) -> ReactiveX.Maybe?
ReactiveX.Maybe.OfType(Java.Lang.Class? clazz) -> ReactiveX.Maybe?
ReactiveX.Maybe.OnErrorComplete() -> ReactiveX.Maybe?
ReactiveX.Maybe.OnErrorComplete(ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Maybe?
ReactiveX.Maybe.OnErrorResumeNext(ReactiveX.Functions.IFunction? resumeFunction) -> ReactiveX.Maybe?
ReactiveX.Maybe.OnErrorResumeNext(ReactiveX.IMaybeSource? next) -> ReactiveX.Maybe?
ReactiveX.Maybe.OnErrorReturn(ReactiveX.Functions.IFunction? valueSupplier) -> ReactiveX.Maybe?
ReactiveX.Maybe.OnErrorReturnItem(Java.Lang.Object? item) -> ReactiveX.Maybe?
ReactiveX.Maybe.OnExceptionResumeNext(ReactiveX.IMaybeSource? next) -> ReactiveX.Maybe?
ReactiveX.Maybe.OnTerminateDetach() -> ReactiveX.Maybe?
ReactiveX.Maybe.Repeat() -> ReactiveX.Flowable?
ReactiveX.Maybe.Repeat(long times) -> ReactiveX.Flowable?
ReactiveX.Maybe.RepeatUntil(ReactiveX.Functions.IBooleanSupplier? stop) -> ReactiveX.Flowable?
ReactiveX.Maybe.RepeatWhen(ReactiveX.Functions.IFunction? handler) -> ReactiveX.Flowable?
ReactiveX.Maybe.Retry() -> ReactiveX.Maybe?
ReactiveX.Maybe.Retry(ReactiveX.Functions.IBiPredicate? predicate) -> ReactiveX.Maybe?
ReactiveX.Maybe.Retry(ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Maybe?
ReactiveX.Maybe.Retry(long count) -> ReactiveX.Maybe?
ReactiveX.Maybe.Retry(long times, ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Maybe?
ReactiveX.Maybe.RetryUntil(ReactiveX.Functions.IBooleanSupplier? stop) -> ReactiveX.Maybe?
ReactiveX.Maybe.RetryWhen(ReactiveX.Functions.IFunction? handler) -> ReactiveX.Maybe?
ReactiveX.Maybe.Subscribe() -> ReactiveX.Disposables.IDisposable?
ReactiveX.Maybe.Subscribe(ReactiveX.Functions.IConsumer? onSuccess) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Maybe.Subscribe(ReactiveX.Functions.IConsumer? onSuccess, ReactiveX.Functions.IConsumer? onError) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Maybe.Subscribe(ReactiveX.Functions.IConsumer? onSuccess, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Maybe.Subscribe(ReactiveX.IMaybeObserver? observer) -> void
ReactiveX.Maybe.SubscribeOn(ReactiveX.Scheduler? scheduler) -> ReactiveX.Maybe?
ReactiveX.Maybe.SubscribeWith(Java.Lang.Object? observer) -> Java.Lang.Object?
ReactiveX.Maybe.SwitchIfEmpty(ReactiveX.IMaybeSource? other) -> ReactiveX.Maybe?
ReactiveX.Maybe.SwitchIfEmpty(ReactiveX.ISingleSource? other) -> ReactiveX.Single?
ReactiveX.Maybe.TakeUntil(ReactiveStreams.IPublisher? other) -> ReactiveX.Maybe?
ReactiveX.Maybe.TakeUntil(ReactiveX.IMaybeSource? other) -> ReactiveX.Maybe?
ReactiveX.Maybe.Test() -> ReactiveX.Observers.TestObserver?
ReactiveX.Maybe.Test(bool cancelled) -> ReactiveX.Observers.TestObserver?
ReactiveX.Maybe.Timeout(ReactiveStreams.IPublisher? timeoutIndicator) -> ReactiveX.Maybe?
ReactiveX.Maybe.Timeout(ReactiveStreams.IPublisher? timeoutIndicator, ReactiveX.IMaybeSource? fallback) -> ReactiveX.Maybe?
ReactiveX.Maybe.Timeout(ReactiveX.IMaybeSource? timeoutIndicator) -> ReactiveX.Maybe?
ReactiveX.Maybe.Timeout(ReactiveX.IMaybeSource? timeoutIndicator, ReactiveX.IMaybeSource? fallback) -> ReactiveX.Maybe?
ReactiveX.Maybe.Timeout(long timeout, Java.Util.Concurrent.TimeUnit? timeUnit) -> ReactiveX.Maybe?
ReactiveX.Maybe.Timeout(long timeout, Java.Util.Concurrent.TimeUnit? timeUnit, ReactiveX.IMaybeSource? fallback) -> ReactiveX.Maybe?
ReactiveX.Maybe.Timeout(long timeout, Java.Util.Concurrent.TimeUnit? timeUnit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Maybe?
ReactiveX.Maybe.Timeout(long timeout, Java.Util.Concurrent.TimeUnit? timeUnit, ReactiveX.Scheduler? scheduler, ReactiveX.IMaybeSource? fallback) -> ReactiveX.Maybe?
ReactiveX.Maybe.To(ReactiveX.Functions.IFunction? convert) -> Java.Lang.Object?
ReactiveX.Maybe.ToFlowable() -> ReactiveX.Flowable?
ReactiveX.Maybe.ToObservable() -> ReactiveX.Observable?
ReactiveX.Maybe.ToSingle() -> ReactiveX.Single?
ReactiveX.Maybe.ToSingle(Java.Lang.Object? defaultValue) -> ReactiveX.Single?
ReactiveX.Maybe.UnsubscribeOn(ReactiveX.Scheduler? scheduler) -> ReactiveX.Maybe?
ReactiveX.Maybe.ZipWith(ReactiveX.IMaybeSource? other, ReactiveX.Functions.IBiFunction? zipper) -> ReactiveX.Maybe?
ReactiveX.Notification
ReactiveX.Notification.Error.get -> Java.Lang.Throwable?
ReactiveX.Notification.IsOnComplete.get -> bool
ReactiveX.Notification.IsOnError.get -> bool
ReactiveX.Notification.IsOnNext.get -> bool
ReactiveX.Notification.Value.get -> Java.Lang.Object?
ReactiveX.Observable
ReactiveX.Observable.All(ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Single?
ReactiveX.Observable.AmbWith(ReactiveX.IObservableSource? other) -> ReactiveX.Observable?
ReactiveX.Observable.Any(ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Single?
ReactiveX.Observable.As(ReactiveX.IObservableConverter? converter) -> Java.Lang.Object?
ReactiveX.Observable.BlockingFirst() -> Java.Lang.Object?
ReactiveX.Observable.BlockingFirst(Java.Lang.Object? defaultItem) -> Java.Lang.Object?
ReactiveX.Observable.BlockingForEach(ReactiveX.Functions.IConsumer? onNext) -> void
ReactiveX.Observable.BlockingIterable() -> Java.Lang.IIterable?
ReactiveX.Observable.BlockingIterable(int bufferSize) -> Java.Lang.IIterable?
ReactiveX.Observable.BlockingLast() -> Java.Lang.Object?
ReactiveX.Observable.BlockingLast(Java.Lang.Object? defaultItem) -> Java.Lang.Object?
ReactiveX.Observable.BlockingLatest() -> Java.Lang.IIterable?
ReactiveX.Observable.BlockingMostRecent(Java.Lang.Object? initialValue) -> Java.Lang.IIterable?
ReactiveX.Observable.BlockingNext() -> Java.Lang.IIterable?
ReactiveX.Observable.BlockingSingle() -> Java.Lang.Object?
ReactiveX.Observable.BlockingSingle(Java.Lang.Object? defaultItem) -> Java.Lang.Object?
ReactiveX.Observable.BlockingSubscribe() -> void
ReactiveX.Observable.BlockingSubscribe(ReactiveX.Functions.IConsumer? onNext) -> void
ReactiveX.Observable.BlockingSubscribe(ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IConsumer? onError) -> void
ReactiveX.Observable.BlockingSubscribe(ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete) -> void
ReactiveX.Observable.BlockingSubscribe(ReactiveX.IObserver? observer) -> void
ReactiveX.Observable.Buffer(Java.Util.Concurrent.ICallable? boundarySupplier) -> ReactiveX.Observable?
ReactiveX.Observable.Buffer(Java.Util.Concurrent.ICallable? boundarySupplier, Java.Util.Concurrent.ICallable? bufferSupplier) -> ReactiveX.Observable?
ReactiveX.Observable.Buffer(ReactiveX.IObservableSource? boundary) -> ReactiveX.Observable?
ReactiveX.Observable.Buffer(ReactiveX.IObservableSource? boundary, Java.Util.Concurrent.ICallable? bufferSupplier) -> ReactiveX.Observable?
ReactiveX.Observable.Buffer(ReactiveX.IObservableSource? boundary, int initialCapacity) -> ReactiveX.Observable?
ReactiveX.Observable.Buffer(ReactiveX.IObservableSource? openingIndicator, ReactiveX.Functions.IFunction? closingIndicator) -> ReactiveX.Observable?
ReactiveX.Observable.Buffer(ReactiveX.IObservableSource? openingIndicator, ReactiveX.Functions.IFunction? closingIndicator, Java.Util.Concurrent.ICallable? bufferSupplier) -> ReactiveX.Observable?
ReactiveX.Observable.Buffer(int count) -> ReactiveX.Observable?
ReactiveX.Observable.Buffer(int count, Java.Util.Concurrent.ICallable? bufferSupplier) -> ReactiveX.Observable?
ReactiveX.Observable.Buffer(int count, int skip) -> ReactiveX.Observable?
ReactiveX.Observable.Buffer(int count, int skip, Java.Util.Concurrent.ICallable? bufferSupplier) -> ReactiveX.Observable?
ReactiveX.Observable.Buffer(long timespan, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observable.Buffer(long timespan, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.Buffer(long timespan, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, int count) -> ReactiveX.Observable?
ReactiveX.Observable.Buffer(long timespan, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, int count, Java.Util.Concurrent.ICallable? bufferSupplier, bool restartTimerOnMaxSize) -> ReactiveX.Observable?
ReactiveX.Observable.Buffer(long timespan, Java.Util.Concurrent.TimeUnit? unit, int count) -> ReactiveX.Observable?
ReactiveX.Observable.Buffer(long timespan, long timeskip, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observable.Buffer(long timespan, long timeskip, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.Buffer(long timespan, long timeskip, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, Java.Util.Concurrent.ICallable? bufferSupplier) -> ReactiveX.Observable?
ReactiveX.Observable.Cache() -> ReactiveX.Observable?
ReactiveX.Observable.CacheWithInitialCapacity(int initialCapacity) -> ReactiveX.Observable?
ReactiveX.Observable.Cast(Java.Lang.Class? clazz) -> ReactiveX.Observable?
ReactiveX.Observable.Collect(Java.Util.Concurrent.ICallable? initialValueSupplier, ReactiveX.Functions.IBiConsumer? collector) -> ReactiveX.Single?
ReactiveX.Observable.CollectInto(Java.Lang.Object? initialValue, ReactiveX.Functions.IBiConsumer? collector) -> ReactiveX.Single?
ReactiveX.Observable.Compose(ReactiveX.IObservableTransformer? composer) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatMap(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatMap(ReactiveX.Functions.IFunction? mapper, int prefetch) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatMapCompletable(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Completable?
ReactiveX.Observable.ConcatMapCompletable(ReactiveX.Functions.IFunction? mapper, int capacityHint) -> ReactiveX.Completable?
ReactiveX.Observable.ConcatMapCompletableDelayError(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Completable?
ReactiveX.Observable.ConcatMapCompletableDelayError(ReactiveX.Functions.IFunction? mapper, bool tillTheEnd) -> ReactiveX.Completable?
ReactiveX.Observable.ConcatMapCompletableDelayError(ReactiveX.Functions.IFunction? mapper, bool tillTheEnd, int prefetch) -> ReactiveX.Completable?
ReactiveX.Observable.ConcatMapDelayError(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatMapDelayError(ReactiveX.Functions.IFunction? mapper, int prefetch, bool tillTheEnd) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatMapEager(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatMapEager(ReactiveX.Functions.IFunction? mapper, int maxConcurrency, int prefetch) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatMapEagerDelayError(ReactiveX.Functions.IFunction? mapper, bool tillTheEnd) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatMapEagerDelayError(ReactiveX.Functions.IFunction? mapper, int maxConcurrency, int prefetch, bool tillTheEnd) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatMapIterable(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatMapIterable(ReactiveX.Functions.IFunction? mapper, int prefetch) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatMapMaybe(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatMapMaybe(ReactiveX.Functions.IFunction? mapper, int prefetch) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatMapMaybeDelayError(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatMapMaybeDelayError(ReactiveX.Functions.IFunction? mapper, bool tillTheEnd) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatMapMaybeDelayError(ReactiveX.Functions.IFunction? mapper, bool tillTheEnd, int prefetch) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatMapSingle(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatMapSingle(ReactiveX.Functions.IFunction? mapper, int prefetch) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatMapSingleDelayError(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatMapSingleDelayError(ReactiveX.Functions.IFunction? mapper, bool tillTheEnd) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatMapSingleDelayError(ReactiveX.Functions.IFunction? mapper, bool tillTheEnd, int prefetch) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatWith(ReactiveX.ICompletableSource? other) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatWith(ReactiveX.IMaybeSource? other) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatWith(ReactiveX.IObservableSource? other) -> ReactiveX.Observable?
ReactiveX.Observable.ConcatWith(ReactiveX.ISingleSource? other) -> ReactiveX.Observable?
ReactiveX.Observable.Contains(Java.Lang.Object? element) -> ReactiveX.Single?
ReactiveX.Observable.Count() -> ReactiveX.Single?
ReactiveX.Observable.Debounce(ReactiveX.Functions.IFunction? debounceSelector) -> ReactiveX.Observable?
ReactiveX.Observable.Debounce(long timeout, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observable.Debounce(long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.DefaultIfEmpty(Java.Lang.Object? defaultItem) -> ReactiveX.Observable?
ReactiveX.Observable.Delay(ReactiveX.Functions.IFunction? itemDelay) -> ReactiveX.Observable?
ReactiveX.Observable.Delay(ReactiveX.IObservableSource? subscriptionDelay, ReactiveX.Functions.IFunction? itemDelay) -> ReactiveX.Observable?
ReactiveX.Observable.Delay(long delay, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observable.Delay(long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.Delay(long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool delayError) -> ReactiveX.Observable?
ReactiveX.Observable.Delay(long delay, Java.Util.Concurrent.TimeUnit? unit, bool delayError) -> ReactiveX.Observable?
ReactiveX.Observable.DelaySubscription(ReactiveX.IObservableSource? other) -> ReactiveX.Observable?
ReactiveX.Observable.DelaySubscription(long delay, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observable.DelaySubscription(long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.Dematerialize() -> ReactiveX.Observable?
ReactiveX.Observable.Dematerialize(ReactiveX.Functions.IFunction? selector) -> ReactiveX.Observable?
ReactiveX.Observable.Distinct() -> ReactiveX.Observable?
ReactiveX.Observable.Distinct(ReactiveX.Functions.IFunction? keySelector) -> ReactiveX.Observable?
ReactiveX.Observable.Distinct(ReactiveX.Functions.IFunction? keySelector, Java.Util.Concurrent.ICallable? collectionSupplier) -> ReactiveX.Observable?
ReactiveX.Observable.DistinctUntilChanged() -> ReactiveX.Observable?
ReactiveX.Observable.DistinctUntilChanged(ReactiveX.Functions.IBiPredicate? comparer) -> ReactiveX.Observable?
ReactiveX.Observable.DistinctUntilChanged(ReactiveX.Functions.IFunction? keySelector) -> ReactiveX.Observable?
ReactiveX.Observable.DoAfterNext(ReactiveX.Functions.IConsumer? onAfterNext) -> ReactiveX.Observable?
ReactiveX.Observable.DoAfterTerminate(ReactiveX.Functions.IAction? onFinally) -> ReactiveX.Observable?
ReactiveX.Observable.DoFinally(ReactiveX.Functions.IAction? onFinally) -> ReactiveX.Observable?
ReactiveX.Observable.DoOnComplete(ReactiveX.Functions.IAction? onComplete) -> ReactiveX.Observable?
ReactiveX.Observable.DoOnDispose(ReactiveX.Functions.IAction? onDispose) -> ReactiveX.Observable?
ReactiveX.Observable.DoOnEach(ReactiveX.Functions.IConsumer? onNotification) -> ReactiveX.Observable?
ReactiveX.Observable.DoOnEach(ReactiveX.IObserver? observer) -> ReactiveX.Observable?
ReactiveX.Observable.DoOnError(ReactiveX.Functions.IConsumer? onError) -> ReactiveX.Observable?
ReactiveX.Observable.DoOnLifecycle(ReactiveX.Functions.IConsumer? onSubscribe, ReactiveX.Functions.IAction? onDispose) -> ReactiveX.Observable?
ReactiveX.Observable.DoOnNext(ReactiveX.Functions.IConsumer? onNext) -> ReactiveX.Observable?
ReactiveX.Observable.DoOnSubscribe(ReactiveX.Functions.IConsumer? onSubscribe) -> ReactiveX.Observable?
ReactiveX.Observable.DoOnTerminate(ReactiveX.Functions.IAction? onTerminate) -> ReactiveX.Observable?
ReactiveX.Observable.ElementAt(long index) -> ReactiveX.Maybe?
ReactiveX.Observable.ElementAt(long index, Java.Lang.Object? defaultItem) -> ReactiveX.Single?
ReactiveX.Observable.ElementAtOrError(long index) -> ReactiveX.Single?
ReactiveX.Observable.Filter(ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Observable?
ReactiveX.Observable.First(Java.Lang.Object? defaultItem) -> ReactiveX.Single?
ReactiveX.Observable.FirstElement() -> ReactiveX.Maybe?
ReactiveX.Observable.FirstOrError() -> ReactiveX.Single?
ReactiveX.Observable.FlatMap(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Observable.FlatMap(ReactiveX.Functions.IFunction? mapper, ReactiveX.Functions.IBiFunction? combiner, bool delayErrors) -> ReactiveX.Observable?
ReactiveX.Observable.FlatMap(ReactiveX.Functions.IFunction? mapper, ReactiveX.Functions.IBiFunction? combiner, bool delayErrors, int maxConcurrency) -> ReactiveX.Observable?
ReactiveX.Observable.FlatMap(ReactiveX.Functions.IFunction? mapper, ReactiveX.Functions.IBiFunction? combiner, bool delayErrors, int maxConcurrency, int bufferSize) -> ReactiveX.Observable?
ReactiveX.Observable.FlatMap(ReactiveX.Functions.IFunction? mapper, ReactiveX.Functions.IBiFunction? combiner, int maxConcurrency) -> ReactiveX.Observable?
ReactiveX.Observable.FlatMap(ReactiveX.Functions.IFunction? mapper, ReactiveX.Functions.IBiFunction? resultSelector) -> ReactiveX.Observable?
ReactiveX.Observable.FlatMap(ReactiveX.Functions.IFunction? mapper, bool delayErrors) -> ReactiveX.Observable?
ReactiveX.Observable.FlatMap(ReactiveX.Functions.IFunction? mapper, bool delayErrors, int maxConcurrency) -> ReactiveX.Observable?
ReactiveX.Observable.FlatMap(ReactiveX.Functions.IFunction? mapper, bool delayErrors, int maxConcurrency, int bufferSize) -> ReactiveX.Observable?
ReactiveX.Observable.FlatMap(ReactiveX.Functions.IFunction? mapper, int maxConcurrency) -> ReactiveX.Observable?
ReactiveX.Observable.FlatMap(ReactiveX.Functions.IFunction? onNextMapper, ReactiveX.Functions.IFunction? onErrorMapper, Java.Util.Concurrent.ICallable? onCompleteSupplier) -> ReactiveX.Observable?
ReactiveX.Observable.FlatMap(ReactiveX.Functions.IFunction? onNextMapper, ReactiveX.Functions.IFunction? onErrorMapper, Java.Util.Concurrent.ICallable? onCompleteSupplier, int maxConcurrency) -> ReactiveX.Observable?
ReactiveX.Observable.FlatMapCompletable(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Completable?
ReactiveX.Observable.FlatMapCompletable(ReactiveX.Functions.IFunction? mapper, bool delayErrors) -> ReactiveX.Completable?
ReactiveX.Observable.FlatMapIterable(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Observable.FlatMapIterable(ReactiveX.Functions.IFunction? mapper, ReactiveX.Functions.IBiFunction? resultSelector) -> ReactiveX.Observable?
ReactiveX.Observable.FlatMapMaybe(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Observable.FlatMapMaybe(ReactiveX.Functions.IFunction? mapper, bool delayErrors) -> ReactiveX.Observable?
ReactiveX.Observable.FlatMapSingle(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Observable.FlatMapSingle(ReactiveX.Functions.IFunction? mapper, bool delayErrors) -> ReactiveX.Observable?
ReactiveX.Observable.ForEach(ReactiveX.Functions.IConsumer? onNext) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Observable.ForEachWhile(ReactiveX.Functions.IPredicate? onNext) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Observable.ForEachWhile(ReactiveX.Functions.IPredicate? onNext, ReactiveX.Functions.IConsumer? onError) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Observable.ForEachWhile(ReactiveX.Functions.IPredicate? onNext, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Observable.GroupBy(ReactiveX.Functions.IFunction? keySelector) -> ReactiveX.Observable?
ReactiveX.Observable.GroupBy(ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector) -> ReactiveX.Observable?
ReactiveX.Observable.GroupBy(ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector, bool delayError) -> ReactiveX.Observable?
ReactiveX.Observable.GroupBy(ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector, bool delayError, int bufferSize) -> ReactiveX.Observable?
ReactiveX.Observable.GroupBy(ReactiveX.Functions.IFunction? keySelector, bool delayError) -> ReactiveX.Observable?
ReactiveX.Observable.GroupJoin(ReactiveX.IObservableSource? other, ReactiveX.Functions.IFunction? leftEnd, ReactiveX.Functions.IFunction? rightEnd, ReactiveX.Functions.IBiFunction? resultSelector) -> ReactiveX.Observable?
ReactiveX.Observable.Hide() -> ReactiveX.Observable?
ReactiveX.Observable.IgnoreElements() -> ReactiveX.Completable?
ReactiveX.Observable.IsEmpty() -> ReactiveX.Single?
ReactiveX.Observable.Join(ReactiveX.IObservableSource? other, ReactiveX.Functions.IFunction? leftEnd, ReactiveX.Functions.IFunction? rightEnd, ReactiveX.Functions.IBiFunction? resultSelector) -> ReactiveX.Observable?
ReactiveX.Observable.Last(Java.Lang.Object? defaultItem) -> ReactiveX.Single?
ReactiveX.Observable.LastElement() -> ReactiveX.Maybe?
ReactiveX.Observable.LastOrError() -> ReactiveX.Single?
ReactiveX.Observable.Lift(ReactiveX.IObservableOperator? lifter) -> ReactiveX.Observable?
ReactiveX.Observable.Map(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Observable.Materialize() -> ReactiveX.Observable?
ReactiveX.Observable.MergeWith(ReactiveX.ICompletableSource? other) -> ReactiveX.Observable?
ReactiveX.Observable.MergeWith(ReactiveX.IMaybeSource? other) -> ReactiveX.Observable?
ReactiveX.Observable.MergeWith(ReactiveX.IObservableSource? other) -> ReactiveX.Observable?
ReactiveX.Observable.MergeWith(ReactiveX.ISingleSource? other) -> ReactiveX.Observable?
ReactiveX.Observable.Observable() -> void
ReactiveX.Observable.Observable(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Observable.ObserveOn(ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.ObserveOn(ReactiveX.Scheduler? scheduler, bool delayError) -> ReactiveX.Observable?
ReactiveX.Observable.ObserveOn(ReactiveX.Scheduler? scheduler, bool delayError, int bufferSize) -> ReactiveX.Observable?
ReactiveX.Observable.OfType(Java.Lang.Class? clazz) -> ReactiveX.Observable?
ReactiveX.Observable.OnErrorResumeNext(ReactiveX.Functions.IFunction? resumeFunction) -> ReactiveX.Observable?
ReactiveX.Observable.OnErrorResumeNext(ReactiveX.IObservableSource? next) -> ReactiveX.Observable?
ReactiveX.Observable.OnErrorReturn(ReactiveX.Functions.IFunction? valueSupplier) -> ReactiveX.Observable?
ReactiveX.Observable.OnErrorReturnItem(Java.Lang.Object? item) -> ReactiveX.Observable?
ReactiveX.Observable.OnExceptionResumeNext(ReactiveX.IObservableSource? next) -> ReactiveX.Observable?
ReactiveX.Observable.OnTerminateDetach() -> ReactiveX.Observable?
ReactiveX.Observable.Publish() -> ReactiveX.Observables.ConnectableObservable?
ReactiveX.Observable.Publish(ReactiveX.Functions.IFunction? selector) -> ReactiveX.Observable?
ReactiveX.Observable.Reduce(Java.Lang.Object? seed, ReactiveX.Functions.IBiFunction? reducer) -> ReactiveX.Single?
ReactiveX.Observable.Reduce(ReactiveX.Functions.IBiFunction? reducer) -> ReactiveX.Maybe?
ReactiveX.Observable.ReduceWith(Java.Util.Concurrent.ICallable? seedSupplier, ReactiveX.Functions.IBiFunction? reducer) -> ReactiveX.Single?
ReactiveX.Observable.Repeat() -> ReactiveX.Observable?
ReactiveX.Observable.Repeat(long times) -> ReactiveX.Observable?
ReactiveX.Observable.RepeatUntil(ReactiveX.Functions.IBooleanSupplier? stop) -> ReactiveX.Observable?
ReactiveX.Observable.RepeatWhen(ReactiveX.Functions.IFunction? handler) -> ReactiveX.Observable?
ReactiveX.Observable.Replay() -> ReactiveX.Observables.ConnectableObservable?
ReactiveX.Observable.Replay(ReactiveX.Functions.IFunction? selector) -> ReactiveX.Observable?
ReactiveX.Observable.Replay(ReactiveX.Functions.IFunction? selector, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.Replay(ReactiveX.Functions.IFunction? selector, int bufferSize) -> ReactiveX.Observable?
ReactiveX.Observable.Replay(ReactiveX.Functions.IFunction? selector, int bufferSize, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.Replay(ReactiveX.Functions.IFunction? selector, int bufferSize, long time, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observable.Replay(ReactiveX.Functions.IFunction? selector, int bufferSize, long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.Replay(ReactiveX.Functions.IFunction? selector, long time, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observable.Replay(ReactiveX.Functions.IFunction? selector, long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.Replay(ReactiveX.Scheduler? scheduler) -> ReactiveX.Observables.ConnectableObservable?
ReactiveX.Observable.Replay(int bufferSize) -> ReactiveX.Observables.ConnectableObservable?
ReactiveX.Observable.Replay(int bufferSize, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observables.ConnectableObservable?
ReactiveX.Observable.Replay(int bufferSize, long time, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observables.ConnectableObservable?
ReactiveX.Observable.Replay(int bufferSize, long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observables.ConnectableObservable?
ReactiveX.Observable.Replay(long time, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observables.ConnectableObservable?
ReactiveX.Observable.Replay(long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observables.ConnectableObservable?
ReactiveX.Observable.Retry() -> ReactiveX.Observable?
ReactiveX.Observable.Retry(ReactiveX.Functions.IBiPredicate? predicate) -> ReactiveX.Observable?
ReactiveX.Observable.Retry(ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Observable?
ReactiveX.Observable.Retry(long times) -> ReactiveX.Observable?
ReactiveX.Observable.Retry(long times, ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Observable?
ReactiveX.Observable.RetryUntil(ReactiveX.Functions.IBooleanSupplier? stop) -> ReactiveX.Observable?
ReactiveX.Observable.RetryWhen(ReactiveX.Functions.IFunction? handler) -> ReactiveX.Observable?
ReactiveX.Observable.SafeSubscribe(ReactiveX.IObserver? observer) -> void
ReactiveX.Observable.Sample(ReactiveX.IObservableSource? sampler) -> ReactiveX.Observable?
ReactiveX.Observable.Sample(ReactiveX.IObservableSource? sampler, bool emitLast) -> ReactiveX.Observable?
ReactiveX.Observable.Sample(long period, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observable.Sample(long period, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.Sample(long period, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool emitLast) -> ReactiveX.Observable?
ReactiveX.Observable.Sample(long period, Java.Util.Concurrent.TimeUnit? unit, bool emitLast) -> ReactiveX.Observable?
ReactiveX.Observable.Scan(Java.Lang.Object? initialValue, ReactiveX.Functions.IBiFunction? accumulator) -> ReactiveX.Observable?
ReactiveX.Observable.Scan(ReactiveX.Functions.IBiFunction? accumulator) -> ReactiveX.Observable?
ReactiveX.Observable.ScanWith(Java.Util.Concurrent.ICallable? seedSupplier, ReactiveX.Functions.IBiFunction? accumulator) -> ReactiveX.Observable?
ReactiveX.Observable.Serialize() -> ReactiveX.Observable?
ReactiveX.Observable.Share() -> ReactiveX.Observable?
ReactiveX.Observable.Single(Java.Lang.Object? defaultItem) -> ReactiveX.Single?
ReactiveX.Observable.SingleElement() -> ReactiveX.Maybe?
ReactiveX.Observable.SingleOrError() -> ReactiveX.Single?
ReactiveX.Observable.Skip(long count) -> ReactiveX.Observable?
ReactiveX.Observable.Skip(long time, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observable.Skip(long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.SkipLast(int count) -> ReactiveX.Observable?
ReactiveX.Observable.SkipLast(long time, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observable.SkipLast(long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.SkipLast(long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool delayError) -> ReactiveX.Observable?
ReactiveX.Observable.SkipLast(long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool delayError, int bufferSize) -> ReactiveX.Observable?
ReactiveX.Observable.SkipLast(long time, Java.Util.Concurrent.TimeUnit? unit, bool delayError) -> ReactiveX.Observable?
ReactiveX.Observable.SkipUntil(ReactiveX.IObservableSource? other) -> ReactiveX.Observable?
ReactiveX.Observable.SkipWhile(ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Observable?
ReactiveX.Observable.Sorted() -> ReactiveX.Observable?
ReactiveX.Observable.Sorted(Java.Util.IComparator? sortFunction) -> ReactiveX.Observable?
ReactiveX.Observable.StartWith(Java.Lang.IIterable? items) -> ReactiveX.Observable?
ReactiveX.Observable.StartWith(Java.Lang.Object? item) -> ReactiveX.Observable?
ReactiveX.Observable.StartWith(ReactiveX.IObservableSource? other) -> ReactiveX.Observable?
ReactiveX.Observable.StartWithArray(params Java.Lang.Object![]? items) -> ReactiveX.Observable?
ReactiveX.Observable.Subscribe() -> ReactiveX.Disposables.IDisposable?
ReactiveX.Observable.Subscribe(ReactiveX.Functions.IConsumer? onNext) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Observable.Subscribe(ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IConsumer? onError) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Observable.Subscribe(ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Observable.Subscribe(ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete, ReactiveX.Functions.IConsumer? onSubscribe) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Observable.Subscribe(ReactiveX.IObserver? observer) -> void
ReactiveX.Observable.SubscribeOn(ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.SubscribeWith(Java.Lang.Object? observer) -> Java.Lang.Object?
ReactiveX.Observable.SwitchIfEmpty(ReactiveX.IObservableSource? other) -> ReactiveX.Observable?
ReactiveX.Observable.SwitchMap(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Observable.SwitchMap(ReactiveX.Functions.IFunction? mapper, int bufferSize) -> ReactiveX.Observable?
ReactiveX.Observable.SwitchMapCompletable(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Completable?
ReactiveX.Observable.SwitchMapCompletableDelayError(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Completable?
ReactiveX.Observable.SwitchMapDelayError(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Observable.SwitchMapDelayError(ReactiveX.Functions.IFunction? mapper, int bufferSize) -> ReactiveX.Observable?
ReactiveX.Observable.SwitchMapMaybe(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Observable.SwitchMapMaybeDelayError(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Observable.SwitchMapSingle(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Observable.SwitchMapSingleDelayError(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Observable.Take(long count) -> ReactiveX.Observable?
ReactiveX.Observable.Take(long time, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observable.Take(long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.TakeLast(int count) -> ReactiveX.Observable?
ReactiveX.Observable.TakeLast(long count, long time, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observable.TakeLast(long count, long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.TakeLast(long count, long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool delayError, int bufferSize) -> ReactiveX.Observable?
ReactiveX.Observable.TakeLast(long time, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observable.TakeLast(long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.TakeLast(long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool delayError) -> ReactiveX.Observable?
ReactiveX.Observable.TakeLast(long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool delayError, int bufferSize) -> ReactiveX.Observable?
ReactiveX.Observable.TakeLast(long time, Java.Util.Concurrent.TimeUnit? unit, bool delayError) -> ReactiveX.Observable?
ReactiveX.Observable.TakeUntil(ReactiveX.Functions.IPredicate? stopPredicate) -> ReactiveX.Observable?
ReactiveX.Observable.TakeUntil(ReactiveX.IObservableSource? other) -> ReactiveX.Observable?
ReactiveX.Observable.TakeWhile(ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Observable?
ReactiveX.Observable.Test() -> ReactiveX.Observers.TestObserver?
ReactiveX.Observable.Test(bool dispose) -> ReactiveX.Observers.TestObserver?
ReactiveX.Observable.ThrottleFirst(long skipDuration, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.ThrottleFirst(long windowDuration, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observable.ThrottleLast(long intervalDuration, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observable.ThrottleLast(long intervalDuration, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.ThrottleLatest(long timeout, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observable.ThrottleLatest(long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.ThrottleLatest(long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool emitLast) -> ReactiveX.Observable?
ReactiveX.Observable.ThrottleLatest(long timeout, Java.Util.Concurrent.TimeUnit? unit, bool emitLast) -> ReactiveX.Observable?
ReactiveX.Observable.ThrottleWithTimeout(long timeout, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observable.ThrottleWithTimeout(long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.TimeInterval() -> ReactiveX.Observable?
ReactiveX.Observable.TimeInterval(Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observable.TimeInterval(Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.TimeInterval(ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.Timeout(ReactiveX.Functions.IFunction? itemTimeoutIndicator) -> ReactiveX.Observable?
ReactiveX.Observable.Timeout(ReactiveX.Functions.IFunction? itemTimeoutIndicator, ReactiveX.IObservableSource? other) -> ReactiveX.Observable?
ReactiveX.Observable.Timeout(ReactiveX.IObservableSource? firstTimeoutIndicator, ReactiveX.Functions.IFunction? itemTimeoutIndicator) -> ReactiveX.Observable?
ReactiveX.Observable.Timeout(ReactiveX.IObservableSource? firstTimeoutIndicator, ReactiveX.Functions.IFunction? itemTimeoutIndicator, ReactiveX.IObservableSource? other) -> ReactiveX.Observable?
ReactiveX.Observable.Timeout(long timeout, Java.Util.Concurrent.TimeUnit? timeUnit) -> ReactiveX.Observable?
ReactiveX.Observable.Timeout(long timeout, Java.Util.Concurrent.TimeUnit? timeUnit, ReactiveX.IObservableSource? other) -> ReactiveX.Observable?
ReactiveX.Observable.Timeout(long timeout, Java.Util.Concurrent.TimeUnit? timeUnit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.Timeout(long timeout, Java.Util.Concurrent.TimeUnit? timeUnit, ReactiveX.Scheduler? scheduler, ReactiveX.IObservableSource? other) -> ReactiveX.Observable?
ReactiveX.Observable.Timestamp() -> ReactiveX.Observable?
ReactiveX.Observable.Timestamp(Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observable.Timestamp(Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.Timestamp(ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.To(ReactiveX.Functions.IFunction? converter) -> Java.Lang.Object?
ReactiveX.Observable.ToFlowable(ReactiveX.BackpressureStrategy? strategy) -> ReactiveX.Flowable?
ReactiveX.Observable.ToFuture() -> Java.Util.Concurrent.IFuture?
ReactiveX.Observable.ToList() -> ReactiveX.Single?
ReactiveX.Observable.ToList(Java.Util.Concurrent.ICallable? collectionSupplier) -> ReactiveX.Single?
ReactiveX.Observable.ToList(int capacityHint) -> ReactiveX.Single?
ReactiveX.Observable.ToMap(ReactiveX.Functions.IFunction? keySelector) -> ReactiveX.Single?
ReactiveX.Observable.ToMap(ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector) -> ReactiveX.Single?
ReactiveX.Observable.ToMap(ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector, Java.Util.Concurrent.ICallable? mapSupplier) -> ReactiveX.Single?
ReactiveX.Observable.ToMultimap(ReactiveX.Functions.IFunction? keySelector) -> ReactiveX.Single?
ReactiveX.Observable.ToMultimap(ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector) -> ReactiveX.Single?
ReactiveX.Observable.ToMultimap(ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector, Java.Util.Concurrent.ICallable? mapSupplier) -> ReactiveX.Single?
ReactiveX.Observable.ToMultimap(ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector, Java.Util.Concurrent.ICallable? mapSupplier, ReactiveX.Functions.IFunction? collectionFactory) -> ReactiveX.Single?
ReactiveX.Observable.ToSortedList() -> ReactiveX.Single?
ReactiveX.Observable.ToSortedList(Java.Util.IComparator? comparator) -> ReactiveX.Single?
ReactiveX.Observable.ToSortedList(Java.Util.IComparator? comparator, int capacityHint) -> ReactiveX.Single?
ReactiveX.Observable.ToSortedList(int capacityHint) -> ReactiveX.Single?
ReactiveX.Observable.UnsubscribeOn(ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.Window(Java.Util.Concurrent.ICallable? boundary) -> ReactiveX.Observable?
ReactiveX.Observable.Window(Java.Util.Concurrent.ICallable? boundary, int bufferSize) -> ReactiveX.Observable?
ReactiveX.Observable.Window(ReactiveX.IObservableSource? boundary) -> ReactiveX.Observable?
ReactiveX.Observable.Window(ReactiveX.IObservableSource? boundary, int bufferSize) -> ReactiveX.Observable?
ReactiveX.Observable.Window(ReactiveX.IObservableSource? openingIndicator, ReactiveX.Functions.IFunction? closingIndicator) -> ReactiveX.Observable?
ReactiveX.Observable.Window(ReactiveX.IObservableSource? openingIndicator, ReactiveX.Functions.IFunction? closingIndicator, int bufferSize) -> ReactiveX.Observable?
ReactiveX.Observable.Window(long count) -> ReactiveX.Observable?
ReactiveX.Observable.Window(long count, long skip) -> ReactiveX.Observable?
ReactiveX.Observable.Window(long count, long skip, int bufferSize) -> ReactiveX.Observable?
ReactiveX.Observable.Window(long timespan, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observable.Window(long timespan, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.Window(long timespan, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, long count) -> ReactiveX.Observable?
ReactiveX.Observable.Window(long timespan, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, long count, bool restart) -> ReactiveX.Observable?
ReactiveX.Observable.Window(long timespan, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, long count, bool restart, int bufferSize) -> ReactiveX.Observable?
ReactiveX.Observable.Window(long timespan, Java.Util.Concurrent.TimeUnit? unit, long count) -> ReactiveX.Observable?
ReactiveX.Observable.Window(long timespan, Java.Util.Concurrent.TimeUnit? unit, long count, bool restart) -> ReactiveX.Observable?
ReactiveX.Observable.Window(long timespan, long timeskip, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observable.Window(long timespan, long timeskip, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observable.Window(long timespan, long timeskip, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, int bufferSize) -> ReactiveX.Observable?
ReactiveX.Observable.WithLatestFrom(Java.Lang.IIterable? others, ReactiveX.Functions.IFunction? combiner) -> ReactiveX.Observable?
ReactiveX.Observable.WithLatestFrom(ReactiveX.IObservableSource![]? others, ReactiveX.Functions.IFunction? combiner) -> ReactiveX.Observable?
ReactiveX.Observable.WithLatestFrom(ReactiveX.IObservableSource? o1, ReactiveX.IObservableSource? o2, ReactiveX.Functions.IFunction3? combiner) -> ReactiveX.Observable?
ReactiveX.Observable.WithLatestFrom(ReactiveX.IObservableSource? o1, ReactiveX.IObservableSource? o2, ReactiveX.IObservableSource? o3, ReactiveX.Functions.IFunction4? combiner) -> ReactiveX.Observable?
ReactiveX.Observable.WithLatestFrom(ReactiveX.IObservableSource? o1, ReactiveX.IObservableSource? o2, ReactiveX.IObservableSource? o3, ReactiveX.IObservableSource? o4, ReactiveX.Functions.IFunction5? combiner) -> ReactiveX.Observable?
ReactiveX.Observable.WithLatestFrom(ReactiveX.IObservableSource? other, ReactiveX.Functions.IBiFunction? combiner) -> ReactiveX.Observable?
ReactiveX.Observable.ZipWith(Java.Lang.IIterable? other, ReactiveX.Functions.IBiFunction? zipper) -> ReactiveX.Observable?
ReactiveX.Observable.ZipWith(ReactiveX.IObservableSource? other, ReactiveX.Functions.IBiFunction? zipper) -> ReactiveX.Observable?
ReactiveX.Observable.ZipWith(ReactiveX.IObservableSource? other, ReactiveX.Functions.IBiFunction? zipper, bool delayError) -> ReactiveX.Observable?
ReactiveX.Observable.ZipWith(ReactiveX.IObservableSource? other, ReactiveX.Functions.IBiFunction? zipper, bool delayError, int bufferSize) -> ReactiveX.Observable?
ReactiveX.Observables.ConnectableObservable
ReactiveX.Observables.ConnectableObservable.Connect() -> ReactiveX.Disposables.IDisposable?
ReactiveX.Observables.ConnectableObservable.ConnectableObservable() -> void
ReactiveX.Observables.ConnectableObservable.ConnectableObservable(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Observables.ConnectableObservable.RefCount(int subscriberCount) -> ReactiveX.Observable?
ReactiveX.Observables.ConnectableObservable.RefCount(int subscriberCount, long timeout, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observables.ConnectableObservable.RefCount(int subscriberCount, long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observables.ConnectableObservable.RefCount(long timeout, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
ReactiveX.Observables.ConnectableObservable.RefCount(long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
ReactiveX.Observables.GroupedObservable
ReactiveX.Observables.GroupedObservable.GroupedObservable(Java.Lang.Object? key) -> void
ReactiveX.Observables.GroupedObservable.GroupedObservable(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Observers.BaseTestConsumer
ReactiveX.Observers.BaseTestConsumer.AssertComplete() -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertEmpty() -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertError(Java.Lang.Class? errorClass) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertError(Java.Lang.Throwable? error) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertError(ReactiveX.Functions.IPredicate? errorPredicate) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertErrorMessage(string? message) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertFailure(Java.Lang.Class? error, params Java.Lang.Object![]? values) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertFailure(ReactiveX.Functions.IPredicate? errorPredicate, params Java.Lang.Object![]? values) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertFailureAndMessage(Java.Lang.Class? error, string? message, params Java.Lang.Object![]? values) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertNever(Java.Lang.Object? value) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertNever(ReactiveX.Functions.IPredicate? valuePredicate) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertNoErrors() -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertNoTimeout() -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertNoValues() -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertNotComplete() -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertNotTerminated() -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertResult(params Java.Lang.Object![]? values) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertTerminated() -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertTimeout() -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertValue(Java.Lang.Object? value) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertValue(ReactiveX.Functions.IPredicate? valuePredicate) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertValueAt(int index, Java.Lang.Object? value) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertValueAt(int index, ReactiveX.Functions.IPredicate? valuePredicate) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertValueCount(int count) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertValueSequence(Java.Lang.IIterable? sequence) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertValueSequenceOnly(Java.Lang.IIterable? sequence) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertValueSet(System.Collections.ICollection? expected) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertValueSetOnly(System.Collections.ICollection? expected) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertValues(params Java.Lang.Object![]? values) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AssertValuesOnly(params Java.Lang.Object![]? values) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.Await() -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.Await(long time, Java.Util.Concurrent.TimeUnit? unit) -> bool
ReactiveX.Observers.BaseTestConsumer.AwaitCount(int atLeast) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AwaitCount(int atLeast, Java.Lang.IRunnable? waitStrategy) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AwaitCount(int atLeast, Java.Lang.IRunnable? waitStrategy, long timeoutMillis) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AwaitDone(long time, Java.Util.Concurrent.TimeUnit? unit) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.AwaitTerminalEvent() -> bool
ReactiveX.Observers.BaseTestConsumer.AwaitTerminalEvent(long duration, Java.Util.Concurrent.TimeUnit? unit) -> bool
ReactiveX.Observers.BaseTestConsumer.BaseTestConsumer() -> void
ReactiveX.Observers.BaseTestConsumer.BaseTestConsumer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Observers.BaseTestConsumer.CheckSubscriptionOnce.get -> bool
ReactiveX.Observers.BaseTestConsumer.CheckSubscriptionOnce.set -> void
ReactiveX.Observers.BaseTestConsumer.ClearTimeout() -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.Completions() -> long
ReactiveX.Observers.BaseTestConsumer.Done.get -> Java.Util.Concurrent.CountDownLatch?
ReactiveX.Observers.BaseTestConsumer.Done.set -> void
ReactiveX.Observers.BaseTestConsumer.ErrorCount() -> int
ReactiveX.Observers.BaseTestConsumer.Errors() -> System.Collections.Generic.IList<Java.Lang.Throwable!>?
ReactiveX.Observers.BaseTestConsumer.EstablishedFusionMode.get -> int
ReactiveX.Observers.BaseTestConsumer.EstablishedFusionMode.set -> void
ReactiveX.Observers.BaseTestConsumer.Events.get -> System.Collections.Generic.IList<System.Collections.Generic.IList<Java.Lang.Object!>!>?
ReactiveX.Observers.BaseTestConsumer.Fail(string? message) -> Java.Lang.AssertionError?
ReactiveX.Observers.BaseTestConsumer.InitialFusionMode.get -> int
ReactiveX.Observers.BaseTestConsumer.InitialFusionMode.set -> void
ReactiveX.Observers.BaseTestConsumer.IsTerminated.get -> bool
ReactiveX.Observers.BaseTestConsumer.IsTimeout.get -> bool
ReactiveX.Observers.BaseTestConsumer.LastThread() -> Java.Lang.Thread?
ReactiveX.Observers.BaseTestConsumer.Tag.get -> Java.Lang.ICharSequence?
ReactiveX.Observers.BaseTestConsumer.Tag.set -> void
ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy
ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy.TestWaitStrategy(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Observers.BaseTestConsumer.Timeout.get -> bool
ReactiveX.Observers.BaseTestConsumer.Timeout.set -> void
ReactiveX.Observers.BaseTestConsumer.ValueCount() -> int
ReactiveX.Observers.BaseTestConsumer.Values() -> System.Collections.IList?
ReactiveX.Observers.BaseTestConsumer.WithTag(Java.Lang.ICharSequence? tag) -> Java.Lang.Object?
ReactiveX.Observers.BaseTestConsumer.WithTag(string? tag) -> Java.Lang.Object?
ReactiveX.Observers.DefaultObserver
ReactiveX.Observers.DefaultObserver.Cancel() -> void
ReactiveX.Observers.DefaultObserver.DefaultObserver() -> void
ReactiveX.Observers.DefaultObserver.DefaultObserver(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Observers.DefaultObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Observers.DisposableCompletableObserver
ReactiveX.Observers.DisposableCompletableObserver.DisposableCompletableObserver() -> void
ReactiveX.Observers.DisposableCompletableObserver.DisposableCompletableObserver(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Observers.DisposableCompletableObserver.Dispose() -> void
ReactiveX.Observers.DisposableCompletableObserver.IsDisposed.get -> bool
ReactiveX.Observers.DisposableCompletableObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Observers.DisposableMaybeObserver
ReactiveX.Observers.DisposableMaybeObserver.DisposableMaybeObserver() -> void
ReactiveX.Observers.DisposableMaybeObserver.DisposableMaybeObserver(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Observers.DisposableMaybeObserver.Dispose() -> void
ReactiveX.Observers.DisposableMaybeObserver.IsDisposed.get -> bool
ReactiveX.Observers.DisposableMaybeObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Observers.DisposableObserver
ReactiveX.Observers.DisposableObserver.DisposableObserver() -> void
ReactiveX.Observers.DisposableObserver.DisposableObserver(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Observers.DisposableObserver.Dispose() -> void
ReactiveX.Observers.DisposableObserver.IsDisposed.get -> bool
ReactiveX.Observers.DisposableObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Observers.DisposableSingleObserver
ReactiveX.Observers.DisposableSingleObserver.DisposableSingleObserver() -> void
ReactiveX.Observers.DisposableSingleObserver.DisposableSingleObserver(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Observers.DisposableSingleObserver.Dispose() -> void
ReactiveX.Observers.DisposableSingleObserver.IsDisposed.get -> bool
ReactiveX.Observers.DisposableSingleObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Observers.ILambdaConsumerIntrospection
ReactiveX.Observers.ILambdaConsumerIntrospection.HasCustomOnError.get -> bool
ReactiveX.Observers.ResourceCompletableObserver
ReactiveX.Observers.ResourceCompletableObserver.Add(ReactiveX.Disposables.IDisposable? resource) -> void
ReactiveX.Observers.ResourceCompletableObserver.Dispose() -> void
ReactiveX.Observers.ResourceCompletableObserver.IsDisposed.get -> bool
ReactiveX.Observers.ResourceCompletableObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Observers.ResourceCompletableObserver.ResourceCompletableObserver() -> void
ReactiveX.Observers.ResourceCompletableObserver.ResourceCompletableObserver(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Observers.ResourceMaybeObserver
ReactiveX.Observers.ResourceMaybeObserver.Add(ReactiveX.Disposables.IDisposable? resource) -> void
ReactiveX.Observers.ResourceMaybeObserver.Dispose() -> void
ReactiveX.Observers.ResourceMaybeObserver.IsDisposed.get -> bool
ReactiveX.Observers.ResourceMaybeObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Observers.ResourceMaybeObserver.ResourceMaybeObserver() -> void
ReactiveX.Observers.ResourceMaybeObserver.ResourceMaybeObserver(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Observers.ResourceObserver
ReactiveX.Observers.ResourceObserver.Add(ReactiveX.Disposables.IDisposable? resource) -> void
ReactiveX.Observers.ResourceObserver.Dispose() -> void
ReactiveX.Observers.ResourceObserver.IsDisposed.get -> bool
ReactiveX.Observers.ResourceObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Observers.ResourceObserver.ResourceObserver() -> void
ReactiveX.Observers.ResourceObserver.ResourceObserver(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Observers.ResourceSingleObserver
ReactiveX.Observers.ResourceSingleObserver.Add(ReactiveX.Disposables.IDisposable? resource) -> void
ReactiveX.Observers.ResourceSingleObserver.Dispose() -> void
ReactiveX.Observers.ResourceSingleObserver.IsDisposed.get -> bool
ReactiveX.Observers.ResourceSingleObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Observers.ResourceSingleObserver.ResourceSingleObserver() -> void
ReactiveX.Observers.ResourceSingleObserver.ResourceSingleObserver(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Observers.SafeObserver
ReactiveX.Observers.SafeObserver.Dispose() -> void
ReactiveX.Observers.SafeObserver.IsDisposed.get -> bool
ReactiveX.Observers.SafeObserver.OnComplete() -> void
ReactiveX.Observers.SafeObserver.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Observers.SafeObserver.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Observers.SafeObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Observers.SafeObserver.SafeObserver(ReactiveX.IObserver? downstream) -> void
ReactiveX.Observers.SerializedObserver
ReactiveX.Observers.SerializedObserver.Dispose() -> void
ReactiveX.Observers.SerializedObserver.IsDisposed.get -> bool
ReactiveX.Observers.SerializedObserver.OnComplete() -> void
ReactiveX.Observers.SerializedObserver.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Observers.SerializedObserver.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Observers.SerializedObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Observers.SerializedObserver.SerializedObserver(ReactiveX.IObserver? actual, bool delayError) -> void
ReactiveX.Observers.SerializedObserver.SerializedObserver(ReactiveX.IObserver? downstream) -> void
ReactiveX.Observers.TestObserver
ReactiveX.Observers.TestObserver.AssertOf(ReactiveX.Functions.IConsumer? check) -> ReactiveX.Observers.TestObserver?
ReactiveX.Observers.TestObserver.Cancel() -> void
ReactiveX.Observers.TestObserver.HasSubscription.get -> bool
ReactiveX.Observers.TestObserver.IsCancelled.get -> bool
ReactiveX.Observers.TestObserver.TestObserver() -> void
ReactiveX.Observers.TestObserver.TestObserver(ReactiveX.IObserver? downstream) -> void
ReactiveX.Observers.TestObserver.TestObserver(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Parallel.IParallelFlowableConverter
ReactiveX.Parallel.IParallelFlowableConverter.Apply(ReactiveX.Parallel.ParallelFlowable? upstream) -> Java.Lang.Object?
ReactiveX.Parallel.IParallelTransformer
ReactiveX.Parallel.IParallelTransformer.Apply(ReactiveX.Parallel.ParallelFlowable? upstream) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFailureHandling
ReactiveX.Parallel.ParallelFailureHandling.Apply(Java.Lang.Long? t1, Java.Lang.Throwable? t2) -> ReactiveX.Parallel.ParallelFailureHandling?
ReactiveX.Parallel.ParallelFlowable
ReactiveX.Parallel.ParallelFlowable.As(ReactiveX.Parallel.IParallelFlowableConverter? converter) -> Java.Lang.Object?
ReactiveX.Parallel.ParallelFlowable.Collect(Java.Util.Concurrent.ICallable? collectionSupplier, ReactiveX.Functions.IBiConsumer? collector) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.Compose(ReactiveX.Parallel.IParallelTransformer? composer) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.ConcatMap(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.ConcatMap(ReactiveX.Functions.IFunction? mapper, int prefetch) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.ConcatMapDelayError(ReactiveX.Functions.IFunction? mapper, bool tillTheEnd) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.ConcatMapDelayError(ReactiveX.Functions.IFunction? mapper, int prefetch, bool tillTheEnd) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.DoAfterNext(ReactiveX.Functions.IConsumer? onAfterNext) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.DoAfterTerminated(ReactiveX.Functions.IAction? onAfterTerminate) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.DoOnCancel(ReactiveX.Functions.IAction? onCancel) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.DoOnComplete(ReactiveX.Functions.IAction? onComplete) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.DoOnError(ReactiveX.Functions.IConsumer? onError) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.DoOnNext(ReactiveX.Functions.IConsumer? onNext) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.DoOnNext(ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IBiFunction? errorHandler) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.DoOnNext(ReactiveX.Functions.IConsumer? onNext, ReactiveX.Parallel.ParallelFailureHandling? errorHandler) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.DoOnRequest(ReactiveX.Functions.ILongConsumer? onRequest) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.DoOnSubscribe(ReactiveX.Functions.IConsumer? onSubscribe) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.Filter(ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.Filter(ReactiveX.Functions.IPredicate? predicate, ReactiveX.Functions.IBiFunction? errorHandler) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.Filter(ReactiveX.Functions.IPredicate? predicate, ReactiveX.Parallel.ParallelFailureHandling? errorHandler) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.FlatMap(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.FlatMap(ReactiveX.Functions.IFunction? mapper, bool delayError) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.FlatMap(ReactiveX.Functions.IFunction? mapper, bool delayError, int maxConcurrency) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.FlatMap(ReactiveX.Functions.IFunction? mapper, bool delayError, int maxConcurrency, int prefetch) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.Map(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.Map(ReactiveX.Functions.IFunction? mapper, ReactiveX.Functions.IBiFunction? errorHandler) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.Map(ReactiveX.Functions.IFunction? mapper, ReactiveX.Parallel.ParallelFailureHandling? errorHandler) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.ParallelFlowable() -> void
ReactiveX.Parallel.ParallelFlowable.ParallelFlowable(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Parallel.ParallelFlowable.Reduce(Java.Util.Concurrent.ICallable? initialSupplier, ReactiveX.Functions.IBiFunction? reducer) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.Reduce(ReactiveX.Functions.IBiFunction? reducer) -> ReactiveX.Flowable?
ReactiveX.Parallel.ParallelFlowable.RunOn(ReactiveX.Scheduler? scheduler) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.RunOn(ReactiveX.Scheduler? scheduler, int prefetch) -> ReactiveX.Parallel.ParallelFlowable?
ReactiveX.Parallel.ParallelFlowable.Sequential() -> ReactiveX.Flowable?
ReactiveX.Parallel.ParallelFlowable.Sequential(int prefetch) -> ReactiveX.Flowable?
ReactiveX.Parallel.ParallelFlowable.SequentialDelayError() -> ReactiveX.Flowable?
ReactiveX.Parallel.ParallelFlowable.SequentialDelayError(int prefetch) -> ReactiveX.Flowable?
ReactiveX.Parallel.ParallelFlowable.Sorted(Java.Util.IComparator? comparator) -> ReactiveX.Flowable?
ReactiveX.Parallel.ParallelFlowable.Sorted(Java.Util.IComparator? comparator, int capacityHint) -> ReactiveX.Flowable?
ReactiveX.Parallel.ParallelFlowable.To(ReactiveX.Functions.IFunction? converter) -> Java.Lang.Object?
ReactiveX.Parallel.ParallelFlowable.ToSortedList(Java.Util.IComparator? comparator) -> ReactiveX.Flowable?
ReactiveX.Parallel.ParallelFlowable.ToSortedList(Java.Util.IComparator? comparator, int capacityHint) -> ReactiveX.Flowable?
ReactiveX.Parallel.ParallelFlowable.Validate(ReactiveStreams.ISubscriber![]? subscribers) -> bool
ReactiveX.Plugins.RxJavaPlugins
ReactiveX.Processors.AsyncProcessor
ReactiveX.Processors.AsyncProcessor.GetValues() -> Java.Lang.Object![]?
ReactiveX.Processors.AsyncProcessor.GetValues(Java.Lang.Object![]? array) -> Java.Lang.Object![]?
ReactiveX.Processors.AsyncProcessor.HasValue.get -> bool
ReactiveX.Processors.AsyncProcessor.Value.get -> Java.Lang.Object?
ReactiveX.Processors.BehaviorProcessor
ReactiveX.Processors.BehaviorProcessor.GetValues() -> Java.Lang.Object![]?
ReactiveX.Processors.BehaviorProcessor.GetValues(Java.Lang.Object![]? array) -> Java.Lang.Object![]?
ReactiveX.Processors.BehaviorProcessor.HasValue.get -> bool
ReactiveX.Processors.BehaviorProcessor.Offer(Java.Lang.Object? t) -> bool
ReactiveX.Processors.BehaviorProcessor.Value.get -> Java.Lang.Object?
ReactiveX.Processors.FlowableProcessor
ReactiveX.Processors.FlowableProcessor.FlowableProcessor() -> void
ReactiveX.Processors.FlowableProcessor.FlowableProcessor(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Processors.FlowableProcessor.ToSerialized() -> ReactiveX.Processors.FlowableProcessor?
ReactiveX.Processors.MulticastProcessor
ReactiveX.Processors.MulticastProcessor.Offer(Java.Lang.Object? t) -> bool
ReactiveX.Processors.MulticastProcessor.Start() -> void
ReactiveX.Processors.MulticastProcessor.StartUnbounded() -> void
ReactiveX.Processors.PublishProcessor
ReactiveX.Processors.PublishProcessor.Offer(Java.Lang.Object? t) -> bool
ReactiveX.Processors.ReplayProcessor
ReactiveX.Processors.ReplayProcessor.CleanupBuffer() -> void
ReactiveX.Processors.ReplayProcessor.GetValues() -> Java.Lang.Object![]?
ReactiveX.Processors.ReplayProcessor.GetValues(Java.Lang.Object![]? array) -> Java.Lang.Object![]?
ReactiveX.Processors.ReplayProcessor.HasValue.get -> bool
ReactiveX.Processors.ReplayProcessor.Value.get -> Java.Lang.Object?
ReactiveX.Processors.UnicastProcessor
ReactiveX.Scheduler
ReactiveX.Scheduler.Scheduler() -> void
ReactiveX.Scheduler.Scheduler(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Scheduler.Worker
ReactiveX.Scheduler.Worker.PeriodicTask
ReactiveX.Scheduler.Worker.PeriodicTask.Run() -> void
ReactiveX.Scheduler.Worker.PeriodicTask.WrappedRunnable.get -> Java.Lang.IRunnable?
ReactiveX.Scheduler.Worker.Worker() -> void
ReactiveX.Scheduler.Worker.Worker(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Schedulers.ISchedulerRunnableIntrospection
ReactiveX.Schedulers.ISchedulerRunnableIntrospection.WrappedRunnable.get -> Java.Lang.IRunnable?
ReactiveX.Schedulers.Schedulers
ReactiveX.Schedulers.TestScheduler
ReactiveX.Schedulers.TestScheduler.AdvanceTimeBy(long delayTime, Java.Util.Concurrent.TimeUnit? unit) -> void
ReactiveX.Schedulers.TestScheduler.AdvanceTimeTo(long delayTime, Java.Util.Concurrent.TimeUnit? unit) -> void
ReactiveX.Schedulers.TestScheduler.TestScheduler() -> void
ReactiveX.Schedulers.TestScheduler.TestScheduler(long delayTime, Java.Util.Concurrent.TimeUnit? unit) -> void
ReactiveX.Schedulers.TestScheduler.TriggerActions() -> void
ReactiveX.Schedulers.Timed
ReactiveX.Schedulers.Timed.Time() -> long
ReactiveX.Schedulers.Timed.Time(Java.Util.Concurrent.TimeUnit? unit) -> long
ReactiveX.Schedulers.Timed.Timed(Java.Lang.Object? value, long time, Java.Util.Concurrent.TimeUnit? unit) -> void
ReactiveX.Schedulers.Timed.Unit() -> Java.Util.Concurrent.TimeUnit?
ReactiveX.Schedulers.Timed.Value() -> Java.Lang.Object?
ReactiveX.Single
ReactiveX.Single.AmbWith(ReactiveX.ISingleSource? other) -> ReactiveX.Single?
ReactiveX.Single.As(ReactiveX.ISingleConverter? converter) -> Java.Lang.Object?
ReactiveX.Single.BlockingGet() -> Java.Lang.Object?
ReactiveX.Single.Cache() -> ReactiveX.Single?
ReactiveX.Single.Cast(Java.Lang.Class? clazz) -> ReactiveX.Single?
ReactiveX.Single.Compose(ReactiveX.ISingleTransformer? transformer) -> ReactiveX.Single?
ReactiveX.Single.ConcatWith(ReactiveX.ISingleSource? other) -> ReactiveX.Flowable?
ReactiveX.Single.Contains(Java.Lang.Object? value) -> ReactiveX.Single?
ReactiveX.Single.Contains(Java.Lang.Object? value, ReactiveX.Functions.IBiPredicate? comparer) -> ReactiveX.Single?
ReactiveX.Single.Delay(long time, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Single?
ReactiveX.Single.Delay(long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Single?
ReactiveX.Single.Delay(long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, bool delayError) -> ReactiveX.Single?
ReactiveX.Single.Delay(long time, Java.Util.Concurrent.TimeUnit? unit, bool delayError) -> ReactiveX.Single?
ReactiveX.Single.DelaySubscription(ReactiveStreams.IPublisher? other) -> ReactiveX.Single?
ReactiveX.Single.DelaySubscription(ReactiveX.ICompletableSource? other) -> ReactiveX.Single?
ReactiveX.Single.DelaySubscription(ReactiveX.IObservableSource? other) -> ReactiveX.Single?
ReactiveX.Single.DelaySubscription(ReactiveX.ISingleSource? other) -> ReactiveX.Single?
ReactiveX.Single.DelaySubscription(long time, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Single?
ReactiveX.Single.DelaySubscription(long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Single?
ReactiveX.Single.Dematerialize(ReactiveX.Functions.IFunction? selector) -> ReactiveX.Maybe?
ReactiveX.Single.DoAfterSuccess(ReactiveX.Functions.IConsumer? onAfterSuccess) -> ReactiveX.Single?
ReactiveX.Single.DoAfterTerminate(ReactiveX.Functions.IAction? onAfterTerminate) -> ReactiveX.Single?
ReactiveX.Single.DoFinally(ReactiveX.Functions.IAction? onFinally) -> ReactiveX.Single?
ReactiveX.Single.DoOnDispose(ReactiveX.Functions.IAction? onDispose) -> ReactiveX.Single?
ReactiveX.Single.DoOnError(ReactiveX.Functions.IConsumer? onError) -> ReactiveX.Single?
ReactiveX.Single.DoOnEvent(ReactiveX.Functions.IBiConsumer? onEvent) -> ReactiveX.Single?
ReactiveX.Single.DoOnSubscribe(ReactiveX.Functions.IConsumer? onSubscribe) -> ReactiveX.Single?
ReactiveX.Single.DoOnSuccess(ReactiveX.Functions.IConsumer? onSuccess) -> ReactiveX.Single?
ReactiveX.Single.DoOnTerminate(ReactiveX.Functions.IAction? onTerminate) -> ReactiveX.Single?
ReactiveX.Single.Filter(ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Maybe?
ReactiveX.Single.FlatMap(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Single?
ReactiveX.Single.FlatMapCompletable(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Completable?
ReactiveX.Single.FlatMapMaybe(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Maybe?
ReactiveX.Single.FlatMapObservable(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Single.FlatMapPublisher(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Single.FlattenAsFlowable(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
ReactiveX.Single.FlattenAsObservable(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
ReactiveX.Single.Hide() -> ReactiveX.Single?
ReactiveX.Single.IgnoreElement() -> ReactiveX.Completable?
ReactiveX.Single.Lift(ReactiveX.ISingleOperator? lift) -> ReactiveX.Single?
ReactiveX.Single.Map(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Single?
ReactiveX.Single.Materialize() -> ReactiveX.Single?
ReactiveX.Single.MergeWith(ReactiveX.ISingleSource? other) -> ReactiveX.Flowable?
ReactiveX.Single.ObserveOn(ReactiveX.Scheduler? scheduler) -> ReactiveX.Single?
ReactiveX.Single.OnErrorResumeNext(ReactiveX.Functions.IFunction? resumeFunctionInCaseOfError) -> ReactiveX.Single?
ReactiveX.Single.OnErrorResumeNext(ReactiveX.Single? resumeSingleInCaseOfError) -> ReactiveX.Single?
ReactiveX.Single.OnErrorReturn(ReactiveX.Functions.IFunction? resumeFunction) -> ReactiveX.Single?
ReactiveX.Single.OnErrorReturnItem(Java.Lang.Object? value) -> ReactiveX.Single?
ReactiveX.Single.OnTerminateDetach() -> ReactiveX.Single?
ReactiveX.Single.Repeat() -> ReactiveX.Flowable?
ReactiveX.Single.Repeat(long times) -> ReactiveX.Flowable?
ReactiveX.Single.RepeatUntil(ReactiveX.Functions.IBooleanSupplier? stop) -> ReactiveX.Flowable?
ReactiveX.Single.RepeatWhen(ReactiveX.Functions.IFunction? handler) -> ReactiveX.Flowable?
ReactiveX.Single.Retry() -> ReactiveX.Single?
ReactiveX.Single.Retry(ReactiveX.Functions.IBiPredicate? predicate) -> ReactiveX.Single?
ReactiveX.Single.Retry(ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Single?
ReactiveX.Single.Retry(long times) -> ReactiveX.Single?
ReactiveX.Single.Retry(long times, ReactiveX.Functions.IPredicate? predicate) -> ReactiveX.Single?
ReactiveX.Single.RetryWhen(ReactiveX.Functions.IFunction? handler) -> ReactiveX.Single?
ReactiveX.Single.Single() -> void
ReactiveX.Single.Single(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Single.Subscribe() -> ReactiveX.Disposables.IDisposable?
ReactiveX.Single.Subscribe(ReactiveX.Functions.IBiConsumer? onCallback) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Single.Subscribe(ReactiveX.Functions.IConsumer? onSuccess) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Single.Subscribe(ReactiveX.Functions.IConsumer? onSuccess, ReactiveX.Functions.IConsumer? onError) -> ReactiveX.Disposables.IDisposable?
ReactiveX.Single.Subscribe(ReactiveX.ISingleObserver? observer) -> void
ReactiveX.Single.SubscribeOn(ReactiveX.Scheduler? scheduler) -> ReactiveX.Single?
ReactiveX.Single.SubscribeWith(Java.Lang.Object? observer) -> Java.Lang.Object?
ReactiveX.Single.TakeUntil(ReactiveStreams.IPublisher? other) -> ReactiveX.Single?
ReactiveX.Single.TakeUntil(ReactiveX.ICompletableSource? other) -> ReactiveX.Single?
ReactiveX.Single.TakeUntil(ReactiveX.ISingleSource? other) -> ReactiveX.Single?
ReactiveX.Single.Test() -> ReactiveX.Observers.TestObserver?
ReactiveX.Single.Test(bool cancelled) -> ReactiveX.Observers.TestObserver?
ReactiveX.Single.Timeout(long timeout, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Single?
ReactiveX.Single.Timeout(long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.ISingleSource? other) -> ReactiveX.Single?
ReactiveX.Single.Timeout(long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Single?
ReactiveX.Single.Timeout(long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, ReactiveX.ISingleSource? other) -> ReactiveX.Single?
ReactiveX.Single.To(ReactiveX.Functions.IFunction? convert) -> Java.Lang.Object?
ReactiveX.Single.ToCompletable() -> ReactiveX.Completable?
ReactiveX.Single.ToFlowable() -> ReactiveX.Flowable?
ReactiveX.Single.ToFuture() -> Java.Util.Concurrent.IFuture?
ReactiveX.Single.ToMaybe() -> ReactiveX.Maybe?
ReactiveX.Single.ToObservable() -> ReactiveX.Observable?
ReactiveX.Single.UnsubscribeOn(ReactiveX.Scheduler? scheduler) -> ReactiveX.Single?
ReactiveX.Single.ZipWith(ReactiveX.ISingleSource? other, ReactiveX.Functions.IBiFunction? zipper) -> ReactiveX.Single?
ReactiveX.Subjects.AsyncSubject
ReactiveX.Subjects.AsyncSubject.GetValues() -> Java.Lang.Object![]?
ReactiveX.Subjects.AsyncSubject.GetValues(Java.Lang.Object![]? array) -> Java.Lang.Object![]?
ReactiveX.Subjects.AsyncSubject.HasValue.get -> bool
ReactiveX.Subjects.AsyncSubject.Value.get -> Java.Lang.Object?
ReactiveX.Subjects.BehaviorSubject
ReactiveX.Subjects.BehaviorSubject.GetValues() -> Java.Lang.Object![]?
ReactiveX.Subjects.BehaviorSubject.GetValues(Java.Lang.Object![]? array) -> Java.Lang.Object![]?
ReactiveX.Subjects.BehaviorSubject.HasValue.get -> bool
ReactiveX.Subjects.BehaviorSubject.Value.get -> Java.Lang.Object?
ReactiveX.Subjects.CompletableSubject
ReactiveX.Subjects.CompletableSubject.HasComplete.get -> bool
ReactiveX.Subjects.CompletableSubject.HasObservers.get -> bool
ReactiveX.Subjects.CompletableSubject.HasThrowable.get -> bool
ReactiveX.Subjects.CompletableSubject.OnComplete() -> void
ReactiveX.Subjects.CompletableSubject.OnError(Java.Lang.Throwable? e) -> void
ReactiveX.Subjects.CompletableSubject.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Subjects.CompletableSubject.Throwable.get -> Java.Lang.Throwable?
ReactiveX.Subjects.MaybeSubject
ReactiveX.Subjects.MaybeSubject.HasComplete.get -> bool
ReactiveX.Subjects.MaybeSubject.HasObservers.get -> bool
ReactiveX.Subjects.MaybeSubject.HasThrowable.get -> bool
ReactiveX.Subjects.MaybeSubject.HasValue.get -> bool
ReactiveX.Subjects.MaybeSubject.OnComplete() -> void
ReactiveX.Subjects.MaybeSubject.OnError(Java.Lang.Throwable? e) -> void
ReactiveX.Subjects.MaybeSubject.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Subjects.MaybeSubject.OnSuccess(Java.Lang.Object? value) -> void
ReactiveX.Subjects.MaybeSubject.Throwable.get -> Java.Lang.Throwable?
ReactiveX.Subjects.MaybeSubject.Value.get -> Java.Lang.Object?
ReactiveX.Subjects.PublishSubject
ReactiveX.Subjects.ReplaySubject
ReactiveX.Subjects.ReplaySubject.CleanupBuffer() -> void
ReactiveX.Subjects.ReplaySubject.GetValues() -> Java.Lang.Object![]?
ReactiveX.Subjects.ReplaySubject.GetValues(Java.Lang.Object![]? array) -> Java.Lang.Object![]?
ReactiveX.Subjects.ReplaySubject.HasValue.get -> bool
ReactiveX.Subjects.ReplaySubject.Value.get -> Java.Lang.Object?
ReactiveX.Subjects.SingleSubject
ReactiveX.Subjects.SingleSubject.HasObservers.get -> bool
ReactiveX.Subjects.SingleSubject.HasThrowable.get -> bool
ReactiveX.Subjects.SingleSubject.HasValue.get -> bool
ReactiveX.Subjects.SingleSubject.OnError(Java.Lang.Throwable? e) -> void
ReactiveX.Subjects.SingleSubject.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
ReactiveX.Subjects.SingleSubject.OnSuccess(Java.Lang.Object? value) -> void
ReactiveX.Subjects.SingleSubject.Throwable.get -> Java.Lang.Throwable?
ReactiveX.Subjects.SingleSubject.Value.get -> Java.Lang.Object?
ReactiveX.Subjects.Subject
ReactiveX.Subjects.Subject.Subject() -> void
ReactiveX.Subjects.Subject.Subject(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Subjects.Subject.ToSerialized() -> ReactiveX.Subjects.Subject?
ReactiveX.Subjects.UnicastSubject
ReactiveX.Subscribers.DefaultSubscriber
ReactiveX.Subscribers.DefaultSubscriber.Cancel() -> void
ReactiveX.Subscribers.DefaultSubscriber.DefaultSubscriber() -> void
ReactiveX.Subscribers.DefaultSubscriber.DefaultSubscriber(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Subscribers.DefaultSubscriber.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
ReactiveX.Subscribers.DefaultSubscriber.Request(long n) -> void
ReactiveX.Subscribers.DisposableSubscriber
ReactiveX.Subscribers.DisposableSubscriber.Cancel() -> void
ReactiveX.Subscribers.DisposableSubscriber.DisposableSubscriber() -> void
ReactiveX.Subscribers.DisposableSubscriber.DisposableSubscriber(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Subscribers.DisposableSubscriber.Dispose() -> void
ReactiveX.Subscribers.DisposableSubscriber.IsDisposed.get -> bool
ReactiveX.Subscribers.DisposableSubscriber.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
ReactiveX.Subscribers.DisposableSubscriber.Request(long n) -> void
ReactiveX.Subscribers.ResourceSubscriber
ReactiveX.Subscribers.ResourceSubscriber.Add(ReactiveX.Disposables.IDisposable? resource) -> void
ReactiveX.Subscribers.ResourceSubscriber.Dispose() -> void
ReactiveX.Subscribers.ResourceSubscriber.IsDisposed.get -> bool
ReactiveX.Subscribers.ResourceSubscriber.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
ReactiveX.Subscribers.ResourceSubscriber.Request(long n) -> void
ReactiveX.Subscribers.ResourceSubscriber.ResourceSubscriber() -> void
ReactiveX.Subscribers.ResourceSubscriber.ResourceSubscriber(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
ReactiveX.Subscribers.SafeSubscriber
ReactiveX.Subscribers.SafeSubscriber.Cancel() -> void
ReactiveX.Subscribers.SafeSubscriber.OnComplete() -> void
ReactiveX.Subscribers.SafeSubscriber.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Subscribers.SafeSubscriber.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Subscribers.SafeSubscriber.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
ReactiveX.Subscribers.SafeSubscriber.Request(long n) -> void
ReactiveX.Subscribers.SafeSubscriber.SafeSubscriber(ReactiveStreams.ISubscriber? downstream) -> void
ReactiveX.Subscribers.SerializedSubscriber
ReactiveX.Subscribers.SerializedSubscriber.Cancel() -> void
ReactiveX.Subscribers.SerializedSubscriber.OnComplete() -> void
ReactiveX.Subscribers.SerializedSubscriber.OnError(Java.Lang.Throwable? t) -> void
ReactiveX.Subscribers.SerializedSubscriber.OnNext(Java.Lang.Object? t) -> void
ReactiveX.Subscribers.SerializedSubscriber.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
ReactiveX.Subscribers.SerializedSubscriber.Request(long n) -> void
ReactiveX.Subscribers.SerializedSubscriber.SerializedSubscriber(ReactiveStreams.ISubscriber? actual, bool delayError) -> void
ReactiveX.Subscribers.SerializedSubscriber.SerializedSubscriber(ReactiveStreams.ISubscriber? downstream) -> void
ReactiveX.Subscribers.TestSubscriber
ReactiveX.Subscribers.TestSubscriber.AssertOf(ReactiveX.Functions.IConsumer? check) -> ReactiveX.Subscribers.TestSubscriber?
ReactiveX.Subscribers.TestSubscriber.Cancel() -> void
ReactiveX.Subscribers.TestSubscriber.HasSubscription.get -> bool
ReactiveX.Subscribers.TestSubscriber.IsCancelled.get -> bool
ReactiveX.Subscribers.TestSubscriber.Request(long n) -> void
ReactiveX.Subscribers.TestSubscriber.RequestMore(long n) -> ReactiveX.Subscribers.TestSubscriber?
ReactiveX.Subscribers.TestSubscriber.TestSubscriber() -> void
ReactiveX.Subscribers.TestSubscriber.TestSubscriber(ReactiveStreams.ISubscriber? actual, long initialRequest) -> void
ReactiveX.Subscribers.TestSubscriber.TestSubscriber(ReactiveStreams.ISubscriber? downstream) -> void
ReactiveX.Subscribers.TestSubscriber.TestSubscriber(long initialRequest) -> void
ReactiveX.Subscribers.TestSubscriber.TestSubscriber(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
abstract ReactiveX.Completable.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
abstract ReactiveX.Flowable.SubscribeActual(ReactiveStreams.ISubscriber? p0) -> void
abstract ReactiveX.Flowables.ConnectableFlowable.Connect(ReactiveX.Functions.IConsumer? connection) -> void
abstract ReactiveX.Internal.Observers.BasicFuseableObserver.OnNext(Java.Lang.Object? t) -> void
abstract ReactiveX.Internal.Observers.BasicFuseableObserver.Poll() -> Java.Lang.Object?
abstract ReactiveX.Internal.Observers.BasicFuseableObserver.RequestFusion(int mode) -> int
abstract ReactiveX.Internal.Observers.BasicIntQueueDisposable.Clear() -> void
abstract ReactiveX.Internal.Observers.BasicIntQueueDisposable.Dispose() -> void
abstract ReactiveX.Internal.Observers.BasicIntQueueDisposable.IsDisposed.get -> bool
abstract ReactiveX.Internal.Observers.BasicIntQueueDisposable.IsEmpty.get -> bool
abstract ReactiveX.Internal.Observers.BasicIntQueueDisposable.Poll() -> Java.Lang.Object?
abstract ReactiveX.Internal.Observers.BasicIntQueueDisposable.RequestFusion(int mode) -> int
abstract ReactiveX.Internal.Observers.BasicQueueDisposable.Clear() -> void
abstract ReactiveX.Internal.Observers.BasicQueueDisposable.Dispose() -> void
abstract ReactiveX.Internal.Observers.BasicQueueDisposable.IsDisposed.get -> bool
abstract ReactiveX.Internal.Observers.BasicQueueDisposable.IsEmpty.get -> bool
abstract ReactiveX.Internal.Observers.BasicQueueDisposable.Poll() -> Java.Lang.Object?
abstract ReactiveX.Internal.Observers.BasicQueueDisposable.RequestFusion(int mode) -> int
abstract ReactiveX.Internal.Observers.BlockingBaseObserver.OnError(Java.Lang.Throwable? e) -> void
abstract ReactiveX.Internal.Observers.BlockingBaseObserver.OnNext(Java.Lang.Object? t) -> void
abstract ReactiveX.Internal.Observers.DeferredScalarObserver.OnNext(Java.Lang.Object? t) -> void
abstract ReactiveX.Internal.Observers.QueueDrainObserver.OnComplete() -> void
abstract ReactiveX.Internal.Observers.QueueDrainObserver.OnError(Java.Lang.Throwable? e) -> void
abstract ReactiveX.Internal.Observers.QueueDrainObserver.OnNext(Java.Lang.Object? t) -> void
abstract ReactiveX.Internal.Observers.QueueDrainObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
abstract ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.OnNext(Java.Lang.Object? p0) -> void
abstract ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.Poll() -> Java.Lang.Object?
abstract ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.RequestFusion(int mode) -> int
abstract ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.TryOnNext(Java.Lang.Object? p0) -> bool
abstract ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.OnNext(Java.Lang.Object? p0) -> void
abstract ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.Poll() -> Java.Lang.Object?
abstract ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.RequestFusion(int mode) -> int
abstract ReactiveX.Internal.Subscribers.BlockingBaseSubscriber.OnError(Java.Lang.Throwable? p0) -> void
abstract ReactiveX.Internal.Subscribers.BlockingBaseSubscriber.OnNext(Java.Lang.Object? p0) -> void
abstract ReactiveX.Internal.Subscribers.DeferredScalarSubscriber.OnNext(Java.Lang.Object? p0) -> void
abstract ReactiveX.Internal.Subscribers.QueueDrainSubscriber.OnComplete() -> void
abstract ReactiveX.Internal.Subscribers.QueueDrainSubscriber.OnError(Java.Lang.Throwable? p0) -> void
abstract ReactiveX.Internal.Subscribers.QueueDrainSubscriber.OnNext(Java.Lang.Object? p0) -> void
abstract ReactiveX.Internal.Subscribers.QueueDrainSubscriber.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
abstract ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber.OnComplete() -> void
abstract ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber.OnError(Java.Lang.Throwable? p0) -> void
abstract ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber.OnNext(Java.Lang.Object? p0) -> void
abstract ReactiveX.Internal.Subscriptions.BasicIntQueueSubscription.Cancel() -> void
abstract ReactiveX.Internal.Subscriptions.BasicIntQueueSubscription.Clear() -> void
abstract ReactiveX.Internal.Subscriptions.BasicIntQueueSubscription.IsEmpty.get -> bool
abstract ReactiveX.Internal.Subscriptions.BasicIntQueueSubscription.Poll() -> Java.Lang.Object?
abstract ReactiveX.Internal.Subscriptions.BasicIntQueueSubscription.Request(long p0) -> void
abstract ReactiveX.Internal.Subscriptions.BasicIntQueueSubscription.RequestFusion(int mode) -> int
abstract ReactiveX.Internal.Subscriptions.BasicQueueSubscription.Cancel() -> void
abstract ReactiveX.Internal.Subscriptions.BasicQueueSubscription.Clear() -> void
abstract ReactiveX.Internal.Subscriptions.BasicQueueSubscription.IsEmpty.get -> bool
abstract ReactiveX.Internal.Subscriptions.BasicQueueSubscription.Request(long p0) -> void
abstract ReactiveX.Internal.Subscriptions.BasicQueueSubscription.RequestFusion(int mode) -> int
abstract ReactiveX.Maybe.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
abstract ReactiveX.Observable.SubscribeActual(ReactiveX.IObserver? observer) -> void
abstract ReactiveX.Observables.ConnectableObservable.Connect(ReactiveX.Functions.IConsumer? connection) -> void
abstract ReactiveX.Observers.BaseTestConsumer.AssertNotSubscribed() -> Java.Lang.Object?
abstract ReactiveX.Observers.BaseTestConsumer.AssertSubscribed() -> Java.Lang.Object?
abstract ReactiveX.Observers.BaseTestConsumer.Dispose() -> void
abstract ReactiveX.Observers.BaseTestConsumer.IsDisposed.get -> bool
abstract ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy.Run() -> void
abstract ReactiveX.Observers.DefaultObserver.OnComplete() -> void
abstract ReactiveX.Observers.DefaultObserver.OnError(Java.Lang.Throwable? e) -> void
abstract ReactiveX.Observers.DefaultObserver.OnNext(Java.Lang.Object? t) -> void
abstract ReactiveX.Observers.DisposableCompletableObserver.OnComplete() -> void
abstract ReactiveX.Observers.DisposableCompletableObserver.OnError(Java.Lang.Throwable? e) -> void
abstract ReactiveX.Observers.DisposableMaybeObserver.OnComplete() -> void
abstract ReactiveX.Observers.DisposableMaybeObserver.OnError(Java.Lang.Throwable? e) -> void
abstract ReactiveX.Observers.DisposableMaybeObserver.OnSuccess(Java.Lang.Object? t) -> void
abstract ReactiveX.Observers.DisposableObserver.OnComplete() -> void
abstract ReactiveX.Observers.DisposableObserver.OnError(Java.Lang.Throwable? e) -> void
abstract ReactiveX.Observers.DisposableObserver.OnNext(Java.Lang.Object? t) -> void
abstract ReactiveX.Observers.DisposableSingleObserver.OnError(Java.Lang.Throwable? e) -> void
abstract ReactiveX.Observers.DisposableSingleObserver.OnSuccess(Java.Lang.Object? t) -> void
abstract ReactiveX.Observers.ResourceCompletableObserver.OnComplete() -> void
abstract ReactiveX.Observers.ResourceCompletableObserver.OnError(Java.Lang.Throwable? e) -> void
abstract ReactiveX.Observers.ResourceMaybeObserver.OnComplete() -> void
abstract ReactiveX.Observers.ResourceMaybeObserver.OnError(Java.Lang.Throwable? e) -> void
abstract ReactiveX.Observers.ResourceMaybeObserver.OnSuccess(Java.Lang.Object? t) -> void
abstract ReactiveX.Observers.ResourceObserver.OnComplete() -> void
abstract ReactiveX.Observers.ResourceObserver.OnError(Java.Lang.Throwable? e) -> void
abstract ReactiveX.Observers.ResourceObserver.OnNext(Java.Lang.Object? t) -> void
abstract ReactiveX.Observers.ResourceSingleObserver.OnError(Java.Lang.Throwable? e) -> void
abstract ReactiveX.Observers.ResourceSingleObserver.OnSuccess(Java.Lang.Object? t) -> void
abstract ReactiveX.Parallel.ParallelFlowable.Parallelism() -> int
abstract ReactiveX.Parallel.ParallelFlowable.Subscribe(ReactiveStreams.ISubscriber![]? subscribers) -> void
abstract ReactiveX.Processors.FlowableProcessor.HasComplete.get -> bool
abstract ReactiveX.Processors.FlowableProcessor.HasSubscribers.get -> bool
abstract ReactiveX.Processors.FlowableProcessor.HasThrowable.get -> bool
abstract ReactiveX.Processors.FlowableProcessor.OnComplete() -> void
abstract ReactiveX.Processors.FlowableProcessor.OnError(Java.Lang.Throwable? p0) -> void
abstract ReactiveX.Processors.FlowableProcessor.OnNext(Java.Lang.Object? p0) -> void
abstract ReactiveX.Processors.FlowableProcessor.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
abstract ReactiveX.Processors.FlowableProcessor.Throwable.get -> Java.Lang.Throwable?
abstract ReactiveX.Scheduler.CreateWorker() -> ReactiveX.Scheduler.Worker?
abstract ReactiveX.Scheduler.Worker.Dispose() -> void
abstract ReactiveX.Scheduler.Worker.IsDisposed.get -> bool
abstract ReactiveX.Scheduler.Worker.Schedule(Java.Lang.IRunnable? run, long delay, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Disposables.IDisposable?
abstract ReactiveX.Single.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
abstract ReactiveX.Subjects.Subject.HasComplete.get -> bool
abstract ReactiveX.Subjects.Subject.HasObservers.get -> bool
abstract ReactiveX.Subjects.Subject.HasThrowable.get -> bool
abstract ReactiveX.Subjects.Subject.OnComplete() -> void
abstract ReactiveX.Subjects.Subject.OnError(Java.Lang.Throwable? e) -> void
abstract ReactiveX.Subjects.Subject.OnNext(Java.Lang.Object? t) -> void
abstract ReactiveX.Subjects.Subject.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
abstract ReactiveX.Subjects.Subject.Throwable.get -> Java.Lang.Throwable?
abstract ReactiveX.Subscribers.DefaultSubscriber.OnComplete() -> void
abstract ReactiveX.Subscribers.DefaultSubscriber.OnError(Java.Lang.Throwable? p0) -> void
abstract ReactiveX.Subscribers.DefaultSubscriber.OnNext(Java.Lang.Object? p0) -> void
abstract ReactiveX.Subscribers.DisposableSubscriber.OnComplete() -> void
abstract ReactiveX.Subscribers.DisposableSubscriber.OnError(Java.Lang.Throwable? p0) -> void
abstract ReactiveX.Subscribers.DisposableSubscriber.OnNext(Java.Lang.Object? p0) -> void
abstract ReactiveX.Subscribers.ResourceSubscriber.OnComplete() -> void
abstract ReactiveX.Subscribers.ResourceSubscriber.OnError(Java.Lang.Throwable? p0) -> void
abstract ReactiveX.Subscribers.ResourceSubscriber.OnNext(Java.Lang.Object? p0) -> void
const ReactiveX.Annotations.SchedulerSupport.Computation = "io.reactivex:computation" -> string!
const ReactiveX.Annotations.SchedulerSupport.Custom = "custom" -> string!
const ReactiveX.Annotations.SchedulerSupport.Io = "io.reactivex:io" -> string!
const ReactiveX.Annotations.SchedulerSupport.NewThread = "io.reactivex:new-thread" -> string!
const ReactiveX.Annotations.SchedulerSupport.None = "none" -> string!
const ReactiveX.Annotations.SchedulerSupport.Single = "io.reactivex:single" -> string!
const ReactiveX.Annotations.SchedulerSupport.Trampoline = "io.reactivex:trampoline" -> string!
const ReactiveX.Internal.Fuseable.QueueFuseable.Any = 3 -> int
const ReactiveX.Internal.Fuseable.QueueFuseable.Async = 2 -> int
const ReactiveX.Internal.Fuseable.QueueFuseable.Boundary = 4 -> int
const ReactiveX.Internal.Fuseable.QueueFuseable.None = 0 -> int
const ReactiveX.Internal.Fuseable.QueueFuseable.Sync = 1 -> int
const ReactiveX.Internal.Schedulers.IoScheduler.KeepAliveTimeDefault = 60 -> long
override ReactiveX.Annotations.BackpressureKind.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.BackpressureOverflowStrategy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.BackpressureStrategy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Completable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Completable.ThresholdClass.get -> nint
override ReactiveX.Completable.ThresholdType.get -> System.Type!
override ReactiveX.Disposables.CompositeDisposable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Disposables.Disposables.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Disposables.SerialDisposable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Exceptions.CompositeException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Exceptions.Exceptions.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Exceptions.MissingBackpressureException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Exceptions.OnErrorNotImplementedException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Exceptions.ProtocolViolationException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Exceptions.UndeliverableException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Flowable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Flowable.ThresholdClass.get -> nint
override ReactiveX.Flowable.ThresholdType.get -> System.Type!
override ReactiveX.Flowables.ConnectableFlowable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Flowables.ConnectableFlowable.ThresholdClass.get -> nint
override ReactiveX.Flowables.ConnectableFlowable.ThresholdType.get -> System.Type!
override ReactiveX.Flowables.GroupedFlowable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Flowables.GroupedFlowable.ThresholdClass.get -> nint
override ReactiveX.Flowables.GroupedFlowable.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Disposables.ArrayCompositeDisposable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Disposables.CancellableDisposable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Disposables.DisposableHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Disposables.EmptyDisposable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Disposables.ListCompositeDisposable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Disposables.SequentialDisposable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Functions.Functions.BoundedConsumer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Functions.Functions.BoundedConsumer.ThresholdClass.get -> nint
override ReactiveX.Internal.Functions.Functions.BoundedConsumer.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Functions.Functions.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Functions.ObjectHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.BasicFuseableObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.BasicFuseableObserver.ThresholdClass.get -> nint
override ReactiveX.Internal.Observers.BasicFuseableObserver.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Observers.BasicIntQueueDisposable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.BasicIntQueueDisposable.ThresholdClass.get -> nint
override ReactiveX.Internal.Observers.BasicIntQueueDisposable.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Observers.BasicQueueDisposable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.BasicQueueDisposable.ThresholdClass.get -> nint
override ReactiveX.Internal.Observers.BasicQueueDisposable.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Observers.BiConsumerSingleObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.BlockingBaseObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.BlockingBaseObserver.ThresholdClass.get -> nint
override ReactiveX.Internal.Observers.BlockingBaseObserver.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Observers.BlockingFirstObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.BlockingFirstObserver.OnError(Java.Lang.Throwable? t) -> void
override ReactiveX.Internal.Observers.BlockingFirstObserver.OnNext(Java.Lang.Object? t) -> void
override ReactiveX.Internal.Observers.BlockingLastObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.BlockingLastObserver.OnError(Java.Lang.Throwable? t) -> void
override ReactiveX.Internal.Observers.BlockingLastObserver.OnNext(Java.Lang.Object? t) -> void
override ReactiveX.Internal.Observers.BlockingMultiObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.BlockingObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.CallbackCompletableObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.ConsumerSingleObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.DeferredScalarDisposable.Dispose() -> void
override ReactiveX.Internal.Observers.DeferredScalarDisposable.IsDisposed.get -> bool
override ReactiveX.Internal.Observers.DeferredScalarDisposable.IsEmpty.get -> bool
override ReactiveX.Internal.Observers.DeferredScalarDisposable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.DeferredScalarDisposable.ThresholdClass.get -> nint
override ReactiveX.Internal.Observers.DeferredScalarDisposable.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Observers.DeferredScalarObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.DeferredScalarObserver.ThresholdClass.get -> nint
override ReactiveX.Internal.Observers.DeferredScalarObserver.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Observers.DisposableLambdaObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.EmptyCompletableObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.ForEachWhileObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.FutureObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.FutureSingleObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.InnerQueuedObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.LambdaObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.QueueDrainObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.QueueDrainObserver.ThresholdClass.get -> nint
override ReactiveX.Internal.Observers.QueueDrainObserver.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Observers.ResumeSingleObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Observers.SubscriberCompletableObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableAmb.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableAmb.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableAndThenCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableAndThenCompletable.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableCache.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableCache.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableConcat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableConcat.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableConcatArray.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableConcatArray.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableConcatIterable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableConcatIterable.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableCreate.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableCreate.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableDefer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableDefer.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableDelay.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableDelay.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableDetach.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableDetach.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableDisposeOn.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableDisposeOn.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableDoFinally.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableDoFinally.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableDoOnEvent.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableDoOnEvent.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableEmpty.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableEmpty.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableError.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableError.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableErrorSupplier.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableErrorSupplier.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableFromAction.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableFromAction.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableFromCallable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableFromCallable.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableFromObservable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableFromObservable.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableFromPublisher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableFromPublisher.SubscribeActual(ReactiveX.ICompletableObserver? downstream) -> void
override ReactiveX.Internal.Operators.Completable.CompletableFromRunnable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableFromRunnable.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableFromSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableFromSingle.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableFromUnsafeSource.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableFromUnsafeSource.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableHide.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableHide.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableLift.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableLift.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableMaterialize.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableMaterialize.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableMerge.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableMerge.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableMergeArray.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableMergeArray.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableMergeDelayErrorArray.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableMergeDelayErrorArray.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableMergeDelayErrorIterable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableMergeDelayErrorIterable.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableMergeIterable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableMergeIterable.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableNever.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableNever.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableObserveOn.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableObserveOn.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableOnErrorComplete.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableOnErrorComplete.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletablePeek.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletablePeek.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableResumeNext.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableResumeNext.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableSubscribeOn.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableSubscribeOn.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableTakeUntilCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableTakeUntilCompletable.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableTimeout.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableTimeout.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableTimer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableTimer.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableToFlowable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableToFlowable.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Completable.CompletableToObservable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableToObservable.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableToSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableToSingle.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Completable.CompletableUsing.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Completable.CompletableUsing.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Flowable.BlockingFlowableIterable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.BlockingFlowableLatest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.BlockingFlowableMostRecent.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.BlockingFlowableNext.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableAll.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableAll.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableAllSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableAllSingle.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableAmb.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableAmb.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableAny.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableAny.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableAnySingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableAnySingle.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableAutoConnect.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableAutoConnect.SubscribeActual(ReactiveStreams.ISubscriber? child) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableBlockingSubscribe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableBuffer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableBuffer.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableBufferBoundary.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableBufferBoundary.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableBufferBoundarySupplier.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableBufferBoundarySupplier.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableBufferExactBoundary.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableBufferExactBoundary.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableBufferTimed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableBufferTimed.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableCache.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableCache.SubscribeActual(ReactiveStreams.ISubscriber? t) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableCollect.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableCollect.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableCollectSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableCollectSingle.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableCombineLatest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableCombineLatest.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableConcatArray.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableConcatArray.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableConcatMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableConcatMap.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableConcatMapEager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableConcatMapEager.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableConcatMapEagerPublisher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableConcatMapEagerPublisher.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableConcatMapPublisher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableConcatMapPublisher.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableConcatWithCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableConcatWithCompletable.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableConcatWithMaybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableConcatWithMaybe.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableConcatWithSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableConcatWithSingle.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableCount.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableCount.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableCountSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableCountSingle.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableCreate.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableCreate.SubscribeActual(ReactiveStreams.ISubscriber? t) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableDebounce.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableDebounce.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableDebounceTimed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableDebounceTimed.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableDefer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableDefer.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableDelay.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableDelay.SubscribeActual(ReactiveStreams.ISubscriber? t) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableDelaySubscriptionOther.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableDelaySubscriptionOther.SubscribeActual(ReactiveStreams.ISubscriber? child) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableDematerialize.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableDematerialize.SubscribeActual(ReactiveStreams.ISubscriber? subscriber) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableDetach.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableDetach.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableDistinct.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableDistinct.SubscribeActual(ReactiveStreams.ISubscriber? subscriber) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableDistinctUntilChanged.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableDistinctUntilChanged.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableDoAfterNext.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableDoAfterNext.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableDoFinally.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableDoFinally.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableDoOnEach.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableDoOnEach.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableDoOnLifecycle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableDoOnLifecycle.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableElementAt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableElementAt.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableElementAtMaybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableElementAtMaybe.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableElementAtSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableElementAtSingle.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableEmpty.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableEmpty.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableError.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableError.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableFilter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableFilter.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableFlatMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableFlatMap.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableFlatMapCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableFlatMapCompletable.SubscribeActual(ReactiveStreams.ISubscriber? subscriber) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableFlatMapCompletableCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableFlatMapCompletableCompletable.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableFlatMapMaybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableFlatMapMaybe.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableFlatMapPublisher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableFlatMapPublisher.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableFlatMapSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableFlatMapSingle.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableFlattenIterable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableFlattenIterable.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableFromArray.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableFromArray.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableFromCallable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableFromCallable.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableFromFuture.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableFromFuture.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableFromIterable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableFromIterable.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableFromObservable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableFromObservable.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableFromPublisher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableFromPublisher.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableGenerate.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableGenerate.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableGroupBy.GroupBySubscriber.Cancel() -> void
override ReactiveX.Internal.Operators.Flowable.FlowableGroupBy.GroupBySubscriber.Clear() -> void
override ReactiveX.Internal.Operators.Flowable.FlowableGroupBy.GroupBySubscriber.IsEmpty.get -> bool
override ReactiveX.Internal.Operators.Flowable.FlowableGroupBy.GroupBySubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableGroupBy.GroupBySubscriber.Poll() -> Java.Lang.Object?
override ReactiveX.Internal.Operators.Flowable.FlowableGroupBy.GroupBySubscriber.Request(long n) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableGroupBy.GroupBySubscriber.RequestFusion(int mode) -> int
override ReactiveX.Internal.Operators.Flowable.FlowableGroupBy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableGroupBy.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableGroupJoin.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableGroupJoin.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableHide.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableHide.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableIgnoreElements.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableIgnoreElements.SubscribeActual(ReactiveStreams.ISubscriber? t) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableIgnoreElementsCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableIgnoreElementsCompletable.SubscribeActual(ReactiveX.ICompletableObserver? t) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.RequestMax.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableInterval.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableInterval.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableIntervalRange.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableIntervalRange.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableJoin.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableJoin.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableJust.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableJust.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableLastMaybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableLastMaybe.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableLastSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableLastSingle.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableLift.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableLift.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableLimit.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableLimit.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableMap.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableMapNotification.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableMapNotification.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableMapPublisher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableMapPublisher.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableMaterialize.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableMaterialize.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableMergeWithCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableMergeWithCompletable.SubscribeActual(ReactiveStreams.ISubscriber? subscriber) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableMergeWithMaybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableMergeWithMaybe.SubscribeActual(ReactiveStreams.ISubscriber? subscriber) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableMergeWithSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableMergeWithSingle.SubscribeActual(ReactiveStreams.ISubscriber? subscriber) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableNever.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableNever.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableObserveOn.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableObserveOn.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureBuffer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureBuffer.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureBufferStrategy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureBufferStrategy.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureDrop.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureDrop.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureError.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureError.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureLatest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableOnBackpressureLatest.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableOnErrorNext.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableOnErrorNext.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableOnErrorReturn.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableOnErrorReturn.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowablePublish.Connect(ReactiveX.Functions.IConsumer? connection) -> void
override ReactiveX.Internal.Operators.Flowable.FlowablePublish.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowablePublish.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowablePublishAlt.Connect(ReactiveX.Functions.IConsumer? connection) -> void
override ReactiveX.Internal.Operators.Flowable.FlowablePublishAlt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowablePublishAlt.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowablePublishMulticast.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowablePublishMulticast.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableRange.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableRange.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableRangeLong.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableRangeLong.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableReduce.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableReduce.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableReduceMaybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableReduceMaybe.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableReduceSeedSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableReduceSeedSingle.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableReduceWithSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableReduceWithSingle.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableRefCount.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableRefCount.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableRepeat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableRepeat.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableRepeatUntil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableRepeatUntil.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableRepeatWhen.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableRepeatWhen.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableReplay.Connect(ReactiveX.Functions.IConsumer? connection) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableReplay.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableReplay.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableRetryBiPredicate.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableRetryBiPredicate.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableRetryPredicate.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableRetryPredicate.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableRetryWhen.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableRetryWhen.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableSamplePublisher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableSamplePublisher.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableSampleTimed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableSampleTimed.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableScalarXMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableScan.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableScan.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableScanSeed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableScanSeed.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableSequenceEqual.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableSequenceEqual.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableSequenceEqualSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableSequenceEqualSingle.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableSerialized.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableSerialized.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableSingle.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableSingleMaybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableSingleMaybe.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableSingleSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableSingleSingle.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableSkip.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableSkip.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableSkipLast.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableSkipLast.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableSkipLastTimed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableSkipLastTimed.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableSkipUntil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableSkipUntil.SubscribeActual(ReactiveStreams.ISubscriber? child) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableSkipWhile.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableSkipWhile.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableSubscribeOn.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableSubscribeOn.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableSwitchIfEmpty.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableSwitchIfEmpty.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableSwitchMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableSwitchMap.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableTake.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableTake.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableTakeLast.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableTakeLast.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableTakeLastOne.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableTakeLastOne.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableTakeLastTimed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableTakeLastTimed.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableTakePublisher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableTakePublisher.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableTakeUntil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableTakeUntil.SubscribeActual(ReactiveStreams.ISubscriber? child) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableTakeUntilPredicate.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableTakeUntilPredicate.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableTakeWhile.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableTakeWhile.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableThrottleFirstTimed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableThrottleFirstTimed.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableThrottleLatest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableThrottleLatest.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableTimeInterval.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableTimeInterval.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableTimeout.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableTimeout.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableTimeoutTimed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableTimeoutTimed.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableTimer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableTimer.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableToList.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableToList.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableToListSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableToListSingle.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableUnsubscribeOn.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableUnsubscribeOn.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableUsing.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableUsing.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableWindow.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableWindow.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableWindowBoundary.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableWindowBoundary.SubscribeActual(ReactiveStreams.ISubscriber? subscriber) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableWindowBoundarySelector.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableWindowBoundarySelector.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableWindowBoundarySupplier.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableWindowBoundarySupplier.SubscribeActual(ReactiveStreams.ISubscriber? subscriber) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableWindowTimed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableWindowTimed.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableWithLatestFrom.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableWithLatestFrom.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableWithLatestFromMany.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableWithLatestFromMany.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableZip.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableZip.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Flowable.FlowableZipIterable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Flowable.FlowableZipIterable.SubscribeActual(ReactiveStreams.ISubscriber? t) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeAmb.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeAmb.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeCache.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeCache.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeCallbackObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeConcatArray.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeConcatArray.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeConcatArrayDelayError.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeConcatArrayDelayError.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeConcatIterable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeConcatIterable.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeContains.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeContains.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeCount.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeCount.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeCreate.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeCreate.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeDefer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeDefer.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeDelay.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeDelay.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeDelayOtherPublisher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeDelayOtherPublisher.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeDelaySubscriptionOtherPublisher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeDelaySubscriptionOtherPublisher.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeDelayWithCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeDelayWithCompletable.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeDetach.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeDetach.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeDoAfterSuccess.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeDoAfterSuccess.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeDoFinally.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeDoFinally.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeDoOnEvent.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeDoOnEvent.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeDoOnTerminate.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeDoOnTerminate.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeEmpty.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeEmpty.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeEqualSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeEqualSingle.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeError.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeError.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeErrorCallable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeErrorCallable.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeFilter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeFilter.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeFilterSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeFilterSingle.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeFlatMapBiSelector.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeFlatMapBiSelector.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeFlatMapCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeFlatMapCompletable.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeFlatMapIterableFlowable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeFlatMapIterableFlowable.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeFlatMapIterableObservable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeFlatMapIterableObservable.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeFlatMapNotification.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeFlatMapNotification.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeFlatMapSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeFlatMapSingle.SubscribeActual(ReactiveX.ISingleObserver? downstream) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeFlatMapSingleElement.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeFlatMapSingleElement.SubscribeActual(ReactiveX.IMaybeObserver? downstream) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeFlatten.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeFlatten.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeFromAction.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeFromAction.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeFromCallable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeFromCallable.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeFromCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeFromCompletable.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeFromFuture.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeFromFuture.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeFromRunnable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeFromRunnable.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeFromSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeFromSingle.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeHide.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeHide.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeIgnoreElement.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeIgnoreElement.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeIgnoreElementCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeIgnoreElementCompletable.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeIsEmpty.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeIsEmpty.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeIsEmptySingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeIsEmptySingle.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeJust.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeJust.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeLift.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeLift.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeMap.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeMaterialize.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeMaterialize.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeMergeArray.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeMergeArray.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeNever.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeNever.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeObserveOn.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeObserveOn.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeOnErrorComplete.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeOnErrorComplete.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeOnErrorNext.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeOnErrorNext.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeOnErrorReturn.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeOnErrorReturn.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybePeek.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybePeek.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeSubscribeOn.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeSubscribeOn.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeSwitchIfEmpty.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeSwitchIfEmpty.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeSwitchIfEmptySingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeSwitchIfEmptySingle.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeTakeUntilMaybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeTakeUntilMaybe.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeTakeUntilPublisher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeTakeUntilPublisher.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeTimeoutMaybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeTimeoutMaybe.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeTimeoutPublisher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeTimeoutPublisher.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeTimer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeTimer.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeToFlowable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeToFlowable.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeToObservable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeToObservable.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeToPublisher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeToSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeToSingle.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeUnsafeCreate.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeUnsafeCreate.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeUnsubscribeOn.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeUnsubscribeOn.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeUsing.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeUsing.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeZipArray.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeZipArray.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Maybe.MaybeZipIterable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Maybe.MaybeZipIterable.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Mixed.CompletableAndThenObservable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Mixed.CompletableAndThenObservable.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Mixed.CompletableAndThenPublisher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Mixed.CompletableAndThenPublisher.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Mixed.FlowableConcatMapCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Mixed.FlowableConcatMapCompletable.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Mixed.FlowableConcatMapMaybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Mixed.FlowableConcatMapMaybe.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Mixed.FlowableConcatMapSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Mixed.FlowableConcatMapSingle.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Mixed.FlowableSwitchMapCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Mixed.FlowableSwitchMapCompletable.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Mixed.FlowableSwitchMapMaybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Mixed.FlowableSwitchMapMaybe.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Mixed.FlowableSwitchMapSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Mixed.FlowableSwitchMapSingle.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Mixed.MaterializeSingleObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Mixed.MaybeFlatMapObservable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Mixed.MaybeFlatMapObservable.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Mixed.MaybeFlatMapPublisher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Mixed.MaybeFlatMapPublisher.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Mixed.ObservableConcatMapCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Mixed.ObservableConcatMapCompletable.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Mixed.ObservableConcatMapMaybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Mixed.ObservableConcatMapMaybe.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Mixed.ObservableConcatMapSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Mixed.ObservableConcatMapSingle.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Mixed.ObservableSwitchMapCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Mixed.ObservableSwitchMapCompletable.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Mixed.ObservableSwitchMapMaybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Mixed.ObservableSwitchMapMaybe.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Mixed.ObservableSwitchMapSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Mixed.ObservableSwitchMapSingle.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Mixed.SingleFlatMapObservable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Mixed.SingleFlatMapObservable.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.BlockingObservableIterable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.BlockingObservableLatest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.BlockingObservableMostRecent.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.BlockingObservableNext.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableAll.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableAll.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableAllSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableAllSingle.SubscribeActual(ReactiveX.ISingleObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableAmb.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableAmb.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableAny.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableAny.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableAnySingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableAnySingle.SubscribeActual(ReactiveX.ISingleObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableAutoConnect.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableAutoConnect.SubscribeActual(ReactiveX.IObserver? child) -> void
override ReactiveX.Internal.Operators.Observable.ObservableBlockingSubscribe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableBuffer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableBuffer.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableBufferBoundary.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableBufferBoundary.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableBufferBoundarySupplier.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableBufferBoundarySupplier.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableBufferExactBoundary.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableBufferExactBoundary.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableBufferTimed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableBufferTimed.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableCache.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableCache.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableCollect.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableCollect.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableCollectSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableCollectSingle.SubscribeActual(ReactiveX.ISingleObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableCombineLatest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableCombineLatest.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableConcatMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableConcatMap.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableConcatMapEager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableConcatMapEager.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableConcatWithCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableConcatWithCompletable.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableConcatWithMaybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableConcatWithMaybe.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableConcatWithSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableConcatWithSingle.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableCount.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableCount.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableCountSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableCountSingle.SubscribeActual(ReactiveX.ISingleObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableCreate.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableCreate.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableDebounce.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableDebounce.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableDebounceTimed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableDebounceTimed.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableDefer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableDefer.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableDelay.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableDelay.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableDelaySubscriptionOther.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableDelaySubscriptionOther.SubscribeActual(ReactiveX.IObserver? child) -> void
override ReactiveX.Internal.Operators.Observable.ObservableDematerialize.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableDematerialize.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableDetach.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableDetach.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableDistinct.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableDistinct.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableDistinctUntilChanged.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableDistinctUntilChanged.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableDoAfterNext.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableDoAfterNext.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableDoFinally.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableDoFinally.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableDoOnEach.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableDoOnEach.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableDoOnLifecycle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableDoOnLifecycle.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableElementAt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableElementAt.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableElementAtMaybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableElementAtMaybe.SubscribeActual(ReactiveX.IMaybeObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableElementAtSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableElementAtSingle.SubscribeActual(ReactiveX.ISingleObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableEmpty.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableEmpty.SubscribeActual(ReactiveX.IObserver? o) -> void
override ReactiveX.Internal.Operators.Observable.ObservableError.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableError.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableFilter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableFilter.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableFlatMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableFlatMap.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableFlatMapCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableFlatMapCompletable.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableFlatMapCompletableCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableFlatMapCompletableCompletable.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableFlatMapMaybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableFlatMapMaybe.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableFlatMapSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableFlatMapSingle.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableFlattenIterable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableFlattenIterable.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableFromArray.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableFromArray.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableFromCallable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableFromCallable.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableFromFuture.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableFromFuture.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableFromIterable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableFromIterable.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableFromPublisher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableFromPublisher.SubscribeActual(ReactiveX.IObserver? o) -> void
override ReactiveX.Internal.Operators.Observable.ObservableFromUnsafeSource.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableFromUnsafeSource.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableGenerate.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableGenerate.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableGroupBy.GroupByObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableGroupBy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableGroupBy.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableGroupJoin.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableGroupJoin.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableHide.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableHide.SubscribeActual(ReactiveX.IObserver? o) -> void
override ReactiveX.Internal.Operators.Observable.ObservableIgnoreElements.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableIgnoreElements.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableIgnoreElementsCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableIgnoreElementsCompletable.SubscribeActual(ReactiveX.ICompletableObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableInternalHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableInterval.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableInterval.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableIntervalRange.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableIntervalRange.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableJoin.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableJoin.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableJust.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableJust.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableLastMaybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableLastMaybe.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableLastSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableLastSingle.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableLift.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableLift.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableMap.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableMapNotification.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableMapNotification.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableMaterialize.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableMaterialize.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableMergeWithCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableMergeWithCompletable.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableMergeWithMaybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableMergeWithMaybe.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableMergeWithSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableMergeWithSingle.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableNever.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableNever.SubscribeActual(ReactiveX.IObserver? o) -> void
override ReactiveX.Internal.Operators.Observable.ObservableObserveOn.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableObserveOn.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableOnErrorNext.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableOnErrorNext.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableOnErrorReturn.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableOnErrorReturn.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservablePublish.Connect(ReactiveX.Functions.IConsumer? connection) -> void
override ReactiveX.Internal.Operators.Observable.ObservablePublish.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservablePublish.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservablePublishAlt.Connect(ReactiveX.Functions.IConsumer? connection) -> void
override ReactiveX.Internal.Operators.Observable.ObservablePublishAlt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservablePublishAlt.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservablePublishSelector.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservablePublishSelector.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableRange.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableRange.SubscribeActual(ReactiveX.IObserver? o) -> void
override ReactiveX.Internal.Operators.Observable.ObservableRangeLong.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableRangeLong.SubscribeActual(ReactiveX.IObserver? o) -> void
override ReactiveX.Internal.Operators.Observable.ObservableReduceMaybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableReduceMaybe.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableReduceSeedSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableReduceSeedSingle.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableReduceWithSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableReduceWithSingle.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableRefCount.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableRefCount.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableRepeat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableRepeat.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableRepeatUntil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableRepeatUntil.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableRepeatWhen.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableRepeatWhen.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableReplay.Connect(ReactiveX.Functions.IConsumer? connection) -> void
override ReactiveX.Internal.Operators.Observable.ObservableReplay.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableReplay.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableRetryBiPredicate.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableRetryBiPredicate.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableRetryPredicate.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableRetryPredicate.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableRetryWhen.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableRetryWhen.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableSampleTimed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableSampleTimed.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableSampleWithObservable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableSampleWithObservable.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableScalarXMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableScalarXMap.ScalarDisposable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableScan.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableScan.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableScanSeed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableScanSeed.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableSequenceEqual.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableSequenceEqual.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableSequenceEqualSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableSequenceEqualSingle.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableSerialized.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableSerialized.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableSingleMaybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableSingleMaybe.SubscribeActual(ReactiveX.IMaybeObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableSingleSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableSingleSingle.SubscribeActual(ReactiveX.ISingleObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableSkip.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableSkip.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableSkipLast.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableSkipLast.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableSkipLastTimed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableSkipLastTimed.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableSkipUntil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableSkipUntil.SubscribeActual(ReactiveX.IObserver? child) -> void
override ReactiveX.Internal.Operators.Observable.ObservableSkipWhile.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableSkipWhile.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableSubscribeOn.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableSubscribeOn.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableSwitchIfEmpty.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableSwitchIfEmpty.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableSwitchMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableSwitchMap.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableTake.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableTake.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableTakeLast.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableTakeLast.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableTakeLastOne.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableTakeLastOne.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableTakeLastTimed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableTakeLastTimed.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableTakeUntil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableTakeUntil.SubscribeActual(ReactiveX.IObserver? child) -> void
override ReactiveX.Internal.Operators.Observable.ObservableTakeUntilPredicate.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableTakeUntilPredicate.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableTakeWhile.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableTakeWhile.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableThrottleFirstTimed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableThrottleFirstTimed.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableThrottleLatest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableThrottleLatest.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableTimeInterval.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableTimeInterval.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableTimeout.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableTimeout.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableTimeoutTimed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableTimeoutTimed.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableTimer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableTimer.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableToList.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableToList.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableToListSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableToListSingle.SubscribeActual(ReactiveX.ISingleObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableUnsubscribeOn.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableUnsubscribeOn.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableUsing.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableUsing.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableWindow.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableWindow.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableWindowBoundary.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableWindowBoundary.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableWindowBoundarySelector.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableWindowBoundarySelector.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableWindowBoundarySupplier.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableWindowBoundarySupplier.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableWindowTimed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableWindowTimed.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableWithLatestFrom.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableWithLatestFrom.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObservableWithLatestFromMany.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableWithLatestFromMany.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableZip.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableZip.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Observable.ObservableZipIterable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Observable.ObservableZipIterable.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Internal.Operators.Observable.ObserverResourceWrapper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Parallel.ParallelCollect.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Parallel.ParallelCollect.Parallelism() -> int
override ReactiveX.Internal.Operators.Parallel.ParallelCollect.Subscribe(ReactiveStreams.ISubscriber![]? subscribers) -> void
override ReactiveX.Internal.Operators.Parallel.ParallelConcatMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Parallel.ParallelConcatMap.Parallelism() -> int
override ReactiveX.Internal.Operators.Parallel.ParallelConcatMap.Subscribe(ReactiveStreams.ISubscriber![]? subscribers) -> void
override ReactiveX.Internal.Operators.Parallel.ParallelDoOnNextTry.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Parallel.ParallelDoOnNextTry.Parallelism() -> int
override ReactiveX.Internal.Operators.Parallel.ParallelDoOnNextTry.Subscribe(ReactiveStreams.ISubscriber![]? subscribers) -> void
override ReactiveX.Internal.Operators.Parallel.ParallelFilter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Parallel.ParallelFilter.Parallelism() -> int
override ReactiveX.Internal.Operators.Parallel.ParallelFilter.Subscribe(ReactiveStreams.ISubscriber![]? subscribers) -> void
override ReactiveX.Internal.Operators.Parallel.ParallelFilterTry.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Parallel.ParallelFilterTry.Parallelism() -> int
override ReactiveX.Internal.Operators.Parallel.ParallelFilterTry.Subscribe(ReactiveStreams.ISubscriber![]? subscribers) -> void
override ReactiveX.Internal.Operators.Parallel.ParallelFlatMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Parallel.ParallelFlatMap.Parallelism() -> int
override ReactiveX.Internal.Operators.Parallel.ParallelFlatMap.Subscribe(ReactiveStreams.ISubscriber![]? subscribers) -> void
override ReactiveX.Internal.Operators.Parallel.ParallelFromArray.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Parallel.ParallelFromArray.Parallelism() -> int
override ReactiveX.Internal.Operators.Parallel.ParallelFromArray.Subscribe(ReactiveStreams.ISubscriber![]? subscribers) -> void
override ReactiveX.Internal.Operators.Parallel.ParallelFromPublisher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Parallel.ParallelFromPublisher.Parallelism() -> int
override ReactiveX.Internal.Operators.Parallel.ParallelFromPublisher.Subscribe(ReactiveStreams.ISubscriber![]? subscribers) -> void
override ReactiveX.Internal.Operators.Parallel.ParallelJoin.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Parallel.ParallelJoin.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Parallel.ParallelMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Parallel.ParallelMap.Parallelism() -> int
override ReactiveX.Internal.Operators.Parallel.ParallelMap.Subscribe(ReactiveStreams.ISubscriber![]? subscribers) -> void
override ReactiveX.Internal.Operators.Parallel.ParallelMapTry.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Parallel.ParallelMapTry.Parallelism() -> int
override ReactiveX.Internal.Operators.Parallel.ParallelMapTry.Subscribe(ReactiveStreams.ISubscriber![]? subscribers) -> void
override ReactiveX.Internal.Operators.Parallel.ParallelPeek.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Parallel.ParallelPeek.Parallelism() -> int
override ReactiveX.Internal.Operators.Parallel.ParallelPeek.Subscribe(ReactiveStreams.ISubscriber![]? subscribers) -> void
override ReactiveX.Internal.Operators.Parallel.ParallelReduce.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Parallel.ParallelReduce.Parallelism() -> int
override ReactiveX.Internal.Operators.Parallel.ParallelReduce.Subscribe(ReactiveStreams.ISubscriber![]? subscribers) -> void
override ReactiveX.Internal.Operators.Parallel.ParallelReduceFull.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Parallel.ParallelReduceFull.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Parallel.ParallelRunOn.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Parallel.ParallelRunOn.Parallelism() -> int
override ReactiveX.Internal.Operators.Parallel.ParallelRunOn.Subscribe(ReactiveStreams.ISubscriber![]? subscribers) -> void
override ReactiveX.Internal.Operators.Parallel.ParallelSortedJoin.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Parallel.ParallelSortedJoin.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Single.SingleAmb.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleAmb.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleCache.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleCache.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleContains.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleContains.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleCreate.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleCreate.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleDefer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleDefer.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleDelay.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleDelay.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleDelayWithCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleDelayWithCompletable.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleDelayWithObservable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleDelayWithObservable.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleDelayWithPublisher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleDelayWithPublisher.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleDelayWithSingle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleDelayWithSingle.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleDematerialize.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleDematerialize.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleDetach.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleDetach.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleDoAfterSuccess.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleDoAfterSuccess.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleDoAfterTerminate.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleDoAfterTerminate.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleDoFinally.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleDoFinally.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleDoOnDispose.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleDoOnDispose.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleDoOnError.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleDoOnError.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleDoOnEvent.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleDoOnEvent.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleDoOnSubscribe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleDoOnSubscribe.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleDoOnSuccess.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleDoOnSuccess.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleDoOnTerminate.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleDoOnTerminate.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleEquals.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleEquals.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleError.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleError.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleFlatMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleFlatMap.SubscribeActual(ReactiveX.ISingleObserver? downstream) -> void
override ReactiveX.Internal.Operators.Single.SingleFlatMapCompletable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleFlatMapCompletable.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleFlatMapIterableFlowable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleFlatMapIterableFlowable.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Single.SingleFlatMapIterableObservable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleFlatMapIterableObservable.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleFlatMapMaybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleFlatMapMaybe.SubscribeActual(ReactiveX.IMaybeObserver? downstream) -> void
override ReactiveX.Internal.Operators.Single.SingleFlatMapPublisher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleFlatMapPublisher.SubscribeActual(ReactiveStreams.ISubscriber? downstream) -> void
override ReactiveX.Internal.Operators.Single.SingleFromCallable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleFromCallable.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleFromPublisher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleFromPublisher.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleFromUnsafeSource.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleFromUnsafeSource.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleHide.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleHide.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleInternalHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleJust.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleJust.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleLift.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleLift.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleMap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleMap.SubscribeActual(ReactiveX.ISingleObserver? t) -> void
override ReactiveX.Internal.Operators.Single.SingleMaterialize.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleMaterialize.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleNever.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleNever.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleObserveOn.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleObserveOn.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleOnErrorReturn.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleOnErrorReturn.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleResumeNext.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleResumeNext.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleSubscribeOn.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleSubscribeOn.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleTakeUntil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleTakeUntil.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleTimeout.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleTimeout.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleTimer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleTimer.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleToFlowable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleToFlowable.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Internal.Operators.Single.SingleToObservable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleToObservable.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleUnsubscribeOn.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleUnsubscribeOn.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleUsing.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleUsing.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleZipArray.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleZipArray.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Operators.Single.SingleZipIterable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Operators.Single.SingleZipIterable.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Internal.Queue.MpscLinkedQueue.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Queue.SpscArrayQueue.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Queue.SpscLinkedArrayQueue.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Schedulers.ComputationScheduler.CreateWorker() -> ReactiveX.Scheduler.Worker?
override ReactiveX.Internal.Schedulers.ComputationScheduler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Schedulers.ExecutorScheduler.CreateWorker() -> ReactiveX.Scheduler.Worker?
override ReactiveX.Internal.Schedulers.ExecutorScheduler.ExecutorWorker.BooleanRunnable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Schedulers.ExecutorScheduler.ExecutorWorker.Dispose() -> void
override ReactiveX.Internal.Schedulers.ExecutorScheduler.ExecutorWorker.InterruptibleRunnable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Schedulers.ExecutorScheduler.ExecutorWorker.IsDisposed.get -> bool
override ReactiveX.Internal.Schedulers.ExecutorScheduler.ExecutorWorker.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Schedulers.ExecutorScheduler.ExecutorWorker.Schedule(Java.Lang.IRunnable? run, long delay, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Disposables.IDisposable?
override ReactiveX.Internal.Schedulers.ExecutorScheduler.ExecutorWorker.SequentialDispose.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Schedulers.ExecutorScheduler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Schedulers.ImmediateThinScheduler.CreateWorker() -> ReactiveX.Scheduler.Worker?
override ReactiveX.Internal.Schedulers.ImmediateThinScheduler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Schedulers.IoScheduler.CreateWorker() -> ReactiveX.Scheduler.Worker?
override ReactiveX.Internal.Schedulers.IoScheduler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Schedulers.NewThreadScheduler.CreateWorker() -> ReactiveX.Scheduler.Worker?
override ReactiveX.Internal.Schedulers.NewThreadScheduler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Schedulers.NewThreadWorker.Dispose() -> void
override ReactiveX.Internal.Schedulers.NewThreadWorker.IsDisposed.get -> bool
override ReactiveX.Internal.Schedulers.NewThreadWorker.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Schedulers.NewThreadWorker.Schedule(Java.Lang.IRunnable? action, long delayTime, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Disposables.IDisposable?
override ReactiveX.Internal.Schedulers.NewThreadWorker.ThresholdClass.get -> nint
override ReactiveX.Internal.Schedulers.NewThreadWorker.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Schedulers.RxThreadFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Schedulers.ScheduledDirectPeriodicTask.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Schedulers.ScheduledDirectTask.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Schedulers.ScheduledRunnable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Schedulers.SchedulerPoolFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Schedulers.SchedulerWhen.CreateWorker() -> ReactiveX.Scheduler.Worker?
override ReactiveX.Internal.Schedulers.SchedulerWhen.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Schedulers.SchedulerWhen.ThresholdClass.get -> nint
override ReactiveX.Internal.Schedulers.SchedulerWhen.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Schedulers.SingleScheduler.CreateWorker() -> ReactiveX.Scheduler.Worker?
override ReactiveX.Internal.Schedulers.SingleScheduler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Schedulers.TrampolineScheduler.CreateWorker() -> ReactiveX.Scheduler.Worker?
override ReactiveX.Internal.Schedulers.TrampolineScheduler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.ThresholdClass.get -> nint
override ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.ThresholdClass.get -> nint
override ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Subscribers.BlockingBaseSubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscribers.BlockingBaseSubscriber.ThresholdClass.get -> nint
override ReactiveX.Internal.Subscribers.BlockingBaseSubscriber.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Subscribers.BlockingFirstSubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscribers.BlockingFirstSubscriber.OnError(Java.Lang.Throwable? t) -> void
override ReactiveX.Internal.Subscribers.BlockingFirstSubscriber.OnNext(Java.Lang.Object? t) -> void
override ReactiveX.Internal.Subscribers.BlockingLastSubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscribers.BlockingLastSubscriber.OnError(Java.Lang.Throwable? t) -> void
override ReactiveX.Internal.Subscribers.BlockingLastSubscriber.OnNext(Java.Lang.Object? t) -> void
override ReactiveX.Internal.Subscribers.BlockingSubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscribers.BoundedSubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscribers.DeferredScalarSubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscribers.DeferredScalarSubscriber.ThresholdClass.get -> nint
override ReactiveX.Internal.Subscribers.DeferredScalarSubscriber.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Subscribers.ForEachWhileSubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscribers.FutureSubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscribers.InnerQueuedSubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscribers.LambdaSubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscribers.QueueDrainSubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscribers.QueueDrainSubscriber.ThresholdClass.get -> nint
override ReactiveX.Internal.Subscribers.QueueDrainSubscriber.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber.ThresholdClass.get -> nint
override ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Subscribers.StrictSubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscribers.StrictSubscriber.ThresholdClass.get -> nint
override ReactiveX.Internal.Subscribers.StrictSubscriber.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Subscribers.SubscriberResourceWrapper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscriptions.ArrayCompositeSubscription.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscriptions.AsyncSubscription.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscriptions.BasicIntQueueSubscription.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscriptions.BasicIntQueueSubscription.ThresholdClass.get -> nint
override ReactiveX.Internal.Subscriptions.BasicIntQueueSubscription.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Subscriptions.BasicQueueSubscription.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscriptions.BasicQueueSubscription.ThresholdClass.get -> nint
override ReactiveX.Internal.Subscriptions.BasicQueueSubscription.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Subscriptions.BooleanSubscription.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscriptions.DeferredScalarSubscription.Cancel() -> void
override ReactiveX.Internal.Subscriptions.DeferredScalarSubscription.IsEmpty.get -> bool
override ReactiveX.Internal.Subscriptions.DeferredScalarSubscription.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscriptions.DeferredScalarSubscription.ThresholdClass.get -> nint
override ReactiveX.Internal.Subscriptions.DeferredScalarSubscription.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Subscriptions.EmptySubscription.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscriptions.ScalarSubscription.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscriptions.SubscriptionArbiter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Subscriptions.SubscriptionArbiter.ThresholdClass.get -> nint
override ReactiveX.Internal.Subscriptions.SubscriptionArbiter.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Subscriptions.SubscriptionHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Util.AppendOnlyLinkedArrayList.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Util.AppendOnlyLinkedArrayList.ThresholdClass.get -> nint
override ReactiveX.Internal.Util.AppendOnlyLinkedArrayList.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Util.AtomicThrowable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Util.BackpressureHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Util.BlockingHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Util.BlockingIgnoringReceiver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Util.ConnectConsumer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Util.EmptyComponent.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Util.EndConsumerHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Util.ErrorMode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Util.ExceptionHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Util.HalfSerializer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Util.LinkedArrayList.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Util.LinkedArrayList.ThresholdClass.get -> nint
override ReactiveX.Internal.Util.LinkedArrayList.ThresholdType.get -> System.Type!
override ReactiveX.Internal.Util.NotificationLite.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Util.OpenHashSet.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Util.Pow2.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Util.QueueDrainHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Internal.Util.VolatileSizeArrayList.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Maybe.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Maybe.ThresholdClass.get -> nint
override ReactiveX.Maybe.ThresholdType.get -> System.Type!
override ReactiveX.Notification.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Observable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Observable.ThresholdClass.get -> nint
override ReactiveX.Observable.ThresholdType.get -> System.Type!
override ReactiveX.Observables.ConnectableObservable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Observables.ConnectableObservable.ThresholdClass.get -> nint
override ReactiveX.Observables.ConnectableObservable.ThresholdType.get -> System.Type!
override ReactiveX.Observables.GroupedObservable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Observables.GroupedObservable.ThresholdClass.get -> nint
override ReactiveX.Observables.GroupedObservable.ThresholdType.get -> System.Type!
override ReactiveX.Observers.BaseTestConsumer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy.ThresholdClass.get -> nint
override ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy.ThresholdType.get -> System.Type!
override ReactiveX.Observers.BaseTestConsumer.ThresholdClass.get -> nint
override ReactiveX.Observers.BaseTestConsumer.ThresholdType.get -> System.Type!
override ReactiveX.Observers.DefaultObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Observers.DefaultObserver.ThresholdClass.get -> nint
override ReactiveX.Observers.DefaultObserver.ThresholdType.get -> System.Type!
override ReactiveX.Observers.DisposableCompletableObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Observers.DisposableCompletableObserver.ThresholdClass.get -> nint
override ReactiveX.Observers.DisposableCompletableObserver.ThresholdType.get -> System.Type!
override ReactiveX.Observers.DisposableMaybeObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Observers.DisposableMaybeObserver.ThresholdClass.get -> nint
override ReactiveX.Observers.DisposableMaybeObserver.ThresholdType.get -> System.Type!
override ReactiveX.Observers.DisposableObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Observers.DisposableObserver.ThresholdClass.get -> nint
override ReactiveX.Observers.DisposableObserver.ThresholdType.get -> System.Type!
override ReactiveX.Observers.DisposableSingleObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Observers.DisposableSingleObserver.ThresholdClass.get -> nint
override ReactiveX.Observers.DisposableSingleObserver.ThresholdType.get -> System.Type!
override ReactiveX.Observers.ResourceCompletableObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Observers.ResourceCompletableObserver.ThresholdClass.get -> nint
override ReactiveX.Observers.ResourceCompletableObserver.ThresholdType.get -> System.Type!
override ReactiveX.Observers.ResourceMaybeObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Observers.ResourceMaybeObserver.ThresholdClass.get -> nint
override ReactiveX.Observers.ResourceMaybeObserver.ThresholdType.get -> System.Type!
override ReactiveX.Observers.ResourceObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Observers.ResourceObserver.ThresholdClass.get -> nint
override ReactiveX.Observers.ResourceObserver.ThresholdType.get -> System.Type!
override ReactiveX.Observers.ResourceSingleObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Observers.ResourceSingleObserver.ThresholdClass.get -> nint
override ReactiveX.Observers.ResourceSingleObserver.ThresholdType.get -> System.Type!
override ReactiveX.Observers.SafeObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Observers.SerializedObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Observers.TestObserver.IsDisposed.get -> bool
override ReactiveX.Observers.TestObserver.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Observers.TestObserver.ThresholdClass.get -> nint
override ReactiveX.Observers.TestObserver.ThresholdType.get -> System.Type!
override ReactiveX.Parallel.ParallelFailureHandling.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Parallel.ParallelFlowable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Parallel.ParallelFlowable.ThresholdClass.get -> nint
override ReactiveX.Parallel.ParallelFlowable.ThresholdType.get -> System.Type!
override ReactiveX.Plugins.RxJavaPlugins.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Processors.AsyncProcessor.HasComplete.get -> bool
override ReactiveX.Processors.AsyncProcessor.HasSubscribers.get -> bool
override ReactiveX.Processors.AsyncProcessor.HasThrowable.get -> bool
override ReactiveX.Processors.AsyncProcessor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Processors.AsyncProcessor.OnComplete() -> void
override ReactiveX.Processors.AsyncProcessor.OnError(Java.Lang.Throwable? t) -> void
override ReactiveX.Processors.AsyncProcessor.OnNext(Java.Lang.Object? t) -> void
override ReactiveX.Processors.AsyncProcessor.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
override ReactiveX.Processors.AsyncProcessor.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Processors.AsyncProcessor.Throwable.get -> Java.Lang.Throwable?
override ReactiveX.Processors.BehaviorProcessor.HasComplete.get -> bool
override ReactiveX.Processors.BehaviorProcessor.HasSubscribers.get -> bool
override ReactiveX.Processors.BehaviorProcessor.HasThrowable.get -> bool
override ReactiveX.Processors.BehaviorProcessor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Processors.BehaviorProcessor.OnComplete() -> void
override ReactiveX.Processors.BehaviorProcessor.OnError(Java.Lang.Throwable? t) -> void
override ReactiveX.Processors.BehaviorProcessor.OnNext(Java.Lang.Object? t) -> void
override ReactiveX.Processors.BehaviorProcessor.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
override ReactiveX.Processors.BehaviorProcessor.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Processors.BehaviorProcessor.Throwable.get -> Java.Lang.Throwable?
override ReactiveX.Processors.FlowableProcessor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Processors.FlowableProcessor.ThresholdClass.get -> nint
override ReactiveX.Processors.FlowableProcessor.ThresholdType.get -> System.Type!
override ReactiveX.Processors.MulticastProcessor.HasComplete.get -> bool
override ReactiveX.Processors.MulticastProcessor.HasSubscribers.get -> bool
override ReactiveX.Processors.MulticastProcessor.HasThrowable.get -> bool
override ReactiveX.Processors.MulticastProcessor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Processors.MulticastProcessor.OnComplete() -> void
override ReactiveX.Processors.MulticastProcessor.OnError(Java.Lang.Throwable? t) -> void
override ReactiveX.Processors.MulticastProcessor.OnNext(Java.Lang.Object? t) -> void
override ReactiveX.Processors.MulticastProcessor.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
override ReactiveX.Processors.MulticastProcessor.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Processors.MulticastProcessor.Throwable.get -> Java.Lang.Throwable?
override ReactiveX.Processors.PublishProcessor.HasComplete.get -> bool
override ReactiveX.Processors.PublishProcessor.HasSubscribers.get -> bool
override ReactiveX.Processors.PublishProcessor.HasThrowable.get -> bool
override ReactiveX.Processors.PublishProcessor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Processors.PublishProcessor.OnComplete() -> void
override ReactiveX.Processors.PublishProcessor.OnError(Java.Lang.Throwable? t) -> void
override ReactiveX.Processors.PublishProcessor.OnNext(Java.Lang.Object? t) -> void
override ReactiveX.Processors.PublishProcessor.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
override ReactiveX.Processors.PublishProcessor.SubscribeActual(ReactiveStreams.ISubscriber? t) -> void
override ReactiveX.Processors.PublishProcessor.Throwable.get -> Java.Lang.Throwable?
override ReactiveX.Processors.ReplayProcessor.HasComplete.get -> bool
override ReactiveX.Processors.ReplayProcessor.HasSubscribers.get -> bool
override ReactiveX.Processors.ReplayProcessor.HasThrowable.get -> bool
override ReactiveX.Processors.ReplayProcessor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Processors.ReplayProcessor.OnComplete() -> void
override ReactiveX.Processors.ReplayProcessor.OnError(Java.Lang.Throwable? t) -> void
override ReactiveX.Processors.ReplayProcessor.OnNext(Java.Lang.Object? t) -> void
override ReactiveX.Processors.ReplayProcessor.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
override ReactiveX.Processors.ReplayProcessor.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Processors.ReplayProcessor.Throwable.get -> Java.Lang.Throwable?
override ReactiveX.Processors.UnicastProcessor.HasComplete.get -> bool
override ReactiveX.Processors.UnicastProcessor.HasSubscribers.get -> bool
override ReactiveX.Processors.UnicastProcessor.HasThrowable.get -> bool
override ReactiveX.Processors.UnicastProcessor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Processors.UnicastProcessor.OnComplete() -> void
override ReactiveX.Processors.UnicastProcessor.OnError(Java.Lang.Throwable? t) -> void
override ReactiveX.Processors.UnicastProcessor.OnNext(Java.Lang.Object? t) -> void
override ReactiveX.Processors.UnicastProcessor.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
override ReactiveX.Processors.UnicastProcessor.SubscribeActual(ReactiveStreams.ISubscriber? s) -> void
override ReactiveX.Processors.UnicastProcessor.Throwable.get -> Java.Lang.Throwable?
override ReactiveX.Scheduler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Scheduler.ThresholdClass.get -> nint
override ReactiveX.Scheduler.ThresholdType.get -> System.Type!
override ReactiveX.Scheduler.Worker.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Scheduler.Worker.PeriodicTask.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Scheduler.Worker.ThresholdClass.get -> nint
override ReactiveX.Scheduler.Worker.ThresholdType.get -> System.Type!
override ReactiveX.Schedulers.Schedulers.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Schedulers.TestScheduler.CreateWorker() -> ReactiveX.Scheduler.Worker?
override ReactiveX.Schedulers.TestScheduler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Schedulers.Timed.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Single.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Single.ThresholdClass.get -> nint
override ReactiveX.Single.ThresholdType.get -> System.Type!
override ReactiveX.Subjects.AsyncSubject.HasComplete.get -> bool
override ReactiveX.Subjects.AsyncSubject.HasObservers.get -> bool
override ReactiveX.Subjects.AsyncSubject.HasThrowable.get -> bool
override ReactiveX.Subjects.AsyncSubject.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Subjects.AsyncSubject.OnComplete() -> void
override ReactiveX.Subjects.AsyncSubject.OnError(Java.Lang.Throwable? t) -> void
override ReactiveX.Subjects.AsyncSubject.OnNext(Java.Lang.Object? t) -> void
override ReactiveX.Subjects.AsyncSubject.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
override ReactiveX.Subjects.AsyncSubject.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Subjects.AsyncSubject.Throwable.get -> Java.Lang.Throwable?
override ReactiveX.Subjects.BehaviorSubject.HasComplete.get -> bool
override ReactiveX.Subjects.BehaviorSubject.HasObservers.get -> bool
override ReactiveX.Subjects.BehaviorSubject.HasThrowable.get -> bool
override ReactiveX.Subjects.BehaviorSubject.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Subjects.BehaviorSubject.OnComplete() -> void
override ReactiveX.Subjects.BehaviorSubject.OnError(Java.Lang.Throwable? t) -> void
override ReactiveX.Subjects.BehaviorSubject.OnNext(Java.Lang.Object? t) -> void
override ReactiveX.Subjects.BehaviorSubject.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
override ReactiveX.Subjects.BehaviorSubject.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Subjects.BehaviorSubject.Throwable.get -> Java.Lang.Throwable?
override ReactiveX.Subjects.CompletableSubject.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Subjects.CompletableSubject.SubscribeActual(ReactiveX.ICompletableObserver? observer) -> void
override ReactiveX.Subjects.MaybeSubject.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Subjects.MaybeSubject.SubscribeActual(ReactiveX.IMaybeObserver? observer) -> void
override ReactiveX.Subjects.PublishSubject.HasComplete.get -> bool
override ReactiveX.Subjects.PublishSubject.HasObservers.get -> bool
override ReactiveX.Subjects.PublishSubject.HasThrowable.get -> bool
override ReactiveX.Subjects.PublishSubject.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Subjects.PublishSubject.OnComplete() -> void
override ReactiveX.Subjects.PublishSubject.OnError(Java.Lang.Throwable? t) -> void
override ReactiveX.Subjects.PublishSubject.OnNext(Java.Lang.Object? t) -> void
override ReactiveX.Subjects.PublishSubject.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
override ReactiveX.Subjects.PublishSubject.SubscribeActual(ReactiveX.IObserver? t) -> void
override ReactiveX.Subjects.PublishSubject.Throwable.get -> Java.Lang.Throwable?
override ReactiveX.Subjects.ReplaySubject.HasComplete.get -> bool
override ReactiveX.Subjects.ReplaySubject.HasObservers.get -> bool
override ReactiveX.Subjects.ReplaySubject.HasThrowable.get -> bool
override ReactiveX.Subjects.ReplaySubject.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Subjects.ReplaySubject.OnComplete() -> void
override ReactiveX.Subjects.ReplaySubject.OnError(Java.Lang.Throwable? t) -> void
override ReactiveX.Subjects.ReplaySubject.OnNext(Java.Lang.Object? t) -> void
override ReactiveX.Subjects.ReplaySubject.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
override ReactiveX.Subjects.ReplaySubject.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Subjects.ReplaySubject.Throwable.get -> Java.Lang.Throwable?
override ReactiveX.Subjects.SingleSubject.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Subjects.SingleSubject.SubscribeActual(ReactiveX.ISingleObserver? observer) -> void
override ReactiveX.Subjects.Subject.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Subjects.Subject.ThresholdClass.get -> nint
override ReactiveX.Subjects.Subject.ThresholdType.get -> System.Type!
override ReactiveX.Subjects.UnicastSubject.HasComplete.get -> bool
override ReactiveX.Subjects.UnicastSubject.HasObservers.get -> bool
override ReactiveX.Subjects.UnicastSubject.HasThrowable.get -> bool
override ReactiveX.Subjects.UnicastSubject.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Subjects.UnicastSubject.OnComplete() -> void
override ReactiveX.Subjects.UnicastSubject.OnError(Java.Lang.Throwable? t) -> void
override ReactiveX.Subjects.UnicastSubject.OnNext(Java.Lang.Object? t) -> void
override ReactiveX.Subjects.UnicastSubject.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
override ReactiveX.Subjects.UnicastSubject.SubscribeActual(ReactiveX.IObserver? observer) -> void
override ReactiveX.Subjects.UnicastSubject.Throwable.get -> Java.Lang.Throwable?
override ReactiveX.Subscribers.DefaultSubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Subscribers.DefaultSubscriber.ThresholdClass.get -> nint
override ReactiveX.Subscribers.DefaultSubscriber.ThresholdType.get -> System.Type!
override ReactiveX.Subscribers.DisposableSubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Subscribers.DisposableSubscriber.ThresholdClass.get -> nint
override ReactiveX.Subscribers.DisposableSubscriber.ThresholdType.get -> System.Type!
override ReactiveX.Subscribers.ResourceSubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Subscribers.ResourceSubscriber.ThresholdClass.get -> nint
override ReactiveX.Subscribers.ResourceSubscriber.ThresholdType.get -> System.Type!
override ReactiveX.Subscribers.SafeSubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Subscribers.SerializedSubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Subscribers.TestSubscriber.IsDisposed.get -> bool
override ReactiveX.Subscribers.TestSubscriber.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override ReactiveX.Subscribers.TestSubscriber.ThresholdClass.get -> nint
override ReactiveX.Subscribers.TestSubscriber.ThresholdType.get -> System.Type!
override sealed ReactiveX.Internal.Observers.DeferredScalarDisposable.Clear() -> void
override sealed ReactiveX.Internal.Observers.DeferredScalarDisposable.Poll() -> Java.Lang.Object?
override sealed ReactiveX.Internal.Observers.DeferredScalarDisposable.RequestFusion(int mode) -> int
override sealed ReactiveX.Internal.Subscriptions.DeferredScalarSubscription.Clear() -> void
override sealed ReactiveX.Internal.Subscriptions.DeferredScalarSubscription.Poll() -> Java.Lang.Object?
override sealed ReactiveX.Internal.Subscriptions.DeferredScalarSubscription.Request(long n) -> void
override sealed ReactiveX.Internal.Subscriptions.DeferredScalarSubscription.RequestFusion(int mode) -> int
override sealed ReactiveX.Observers.TestObserver.AssertNotSubscribed() -> Java.Lang.Object?
override sealed ReactiveX.Observers.TestObserver.AssertSubscribed() -> Java.Lang.Object?
override sealed ReactiveX.Observers.TestObserver.Dispose() -> void
override sealed ReactiveX.Subscribers.TestSubscriber.AssertNotSubscribed() -> Java.Lang.Object?
override sealed ReactiveX.Subscribers.TestSubscriber.AssertSubscribed() -> Java.Lang.Object?
override sealed ReactiveX.Subscribers.TestSubscriber.Dispose() -> void
static ReactiveX.Annotations.BackpressureKind.Error.get -> ReactiveX.Annotations.BackpressureKind?
static ReactiveX.Annotations.BackpressureKind.Full.get -> ReactiveX.Annotations.BackpressureKind?
static ReactiveX.Annotations.BackpressureKind.None.get -> ReactiveX.Annotations.BackpressureKind?
static ReactiveX.Annotations.BackpressureKind.PassThrough.get -> ReactiveX.Annotations.BackpressureKind?
static ReactiveX.Annotations.BackpressureKind.Special.get -> ReactiveX.Annotations.BackpressureKind?
static ReactiveX.Annotations.BackpressureKind.UnboundedIn.get -> ReactiveX.Annotations.BackpressureKind?
static ReactiveX.Annotations.BackpressureKind.ValueOf(string? name) -> ReactiveX.Annotations.BackpressureKind?
static ReactiveX.Annotations.BackpressureKind.Values() -> ReactiveX.Annotations.BackpressureKind![]?
static ReactiveX.BackpressureOverflowStrategy.DropLatest.get -> ReactiveX.BackpressureOverflowStrategy?
static ReactiveX.BackpressureOverflowStrategy.DropOldest.get -> ReactiveX.BackpressureOverflowStrategy?
static ReactiveX.BackpressureOverflowStrategy.Error.get -> ReactiveX.BackpressureOverflowStrategy?
static ReactiveX.BackpressureOverflowStrategy.ValueOf(string? name) -> ReactiveX.BackpressureOverflowStrategy?
static ReactiveX.BackpressureOverflowStrategy.Values() -> ReactiveX.BackpressureOverflowStrategy![]?
static ReactiveX.BackpressureStrategy.Buffer.get -> ReactiveX.BackpressureStrategy?
static ReactiveX.BackpressureStrategy.Drop.get -> ReactiveX.BackpressureStrategy?
static ReactiveX.BackpressureStrategy.Error.get -> ReactiveX.BackpressureStrategy?
static ReactiveX.BackpressureStrategy.Latest.get -> ReactiveX.BackpressureStrategy?
static ReactiveX.BackpressureStrategy.Missing.get -> ReactiveX.BackpressureStrategy?
static ReactiveX.BackpressureStrategy.ValueOf(string? name) -> ReactiveX.BackpressureStrategy?
static ReactiveX.BackpressureStrategy.Values() -> ReactiveX.BackpressureStrategy![]?
static ReactiveX.Completable.Amb(Java.Lang.IIterable? sources) -> ReactiveX.Completable?
static ReactiveX.Completable.AmbArray(params ReactiveX.ICompletableSource![]? sources) -> ReactiveX.Completable?
static ReactiveX.Completable.Complete() -> ReactiveX.Completable?
static ReactiveX.Completable.Concat(Java.Lang.IIterable? sources) -> ReactiveX.Completable?
static ReactiveX.Completable.Concat(ReactiveStreams.IPublisher? sources) -> ReactiveX.Completable?
static ReactiveX.Completable.Concat(ReactiveStreams.IPublisher? sources, int prefetch) -> ReactiveX.Completable?
static ReactiveX.Completable.ConcatArray(params ReactiveX.ICompletableSource![]? sources) -> ReactiveX.Completable?
static ReactiveX.Completable.Create(ReactiveX.ICompletableOnSubscribe? source) -> ReactiveX.Completable?
static ReactiveX.Completable.Defer(Java.Util.Concurrent.ICallable? completableSupplier) -> ReactiveX.Completable?
static ReactiveX.Completable.Error(Java.Lang.Throwable? error) -> ReactiveX.Completable?
static ReactiveX.Completable.Error(Java.Util.Concurrent.ICallable? errorSupplier) -> ReactiveX.Completable?
static ReactiveX.Completable.FromAction(ReactiveX.Functions.IAction? run) -> ReactiveX.Completable?
static ReactiveX.Completable.FromCallable(Java.Util.Concurrent.ICallable? callable) -> ReactiveX.Completable?
static ReactiveX.Completable.FromFuture(Java.Util.Concurrent.IFuture? future) -> ReactiveX.Completable?
static ReactiveX.Completable.FromMaybe(ReactiveX.IMaybeSource? maybe) -> ReactiveX.Completable?
static ReactiveX.Completable.FromObservable(ReactiveX.IObservableSource? observable) -> ReactiveX.Completable?
static ReactiveX.Completable.FromPublisher(ReactiveStreams.IPublisher? publisher) -> ReactiveX.Completable?
static ReactiveX.Completable.FromRunnable(Java.Lang.IRunnable? run) -> ReactiveX.Completable?
static ReactiveX.Completable.FromSingle(ReactiveX.ISingleSource? single) -> ReactiveX.Completable?
static ReactiveX.Completable.Merge(Java.Lang.IIterable? sources) -> ReactiveX.Completable?
static ReactiveX.Completable.Merge(ReactiveStreams.IPublisher? sources) -> ReactiveX.Completable?
static ReactiveX.Completable.Merge(ReactiveStreams.IPublisher? sources, int maxConcurrency) -> ReactiveX.Completable?
static ReactiveX.Completable.MergeArray(params ReactiveX.ICompletableSource![]? sources) -> ReactiveX.Completable?
static ReactiveX.Completable.MergeArrayDelayError(params ReactiveX.ICompletableSource![]? sources) -> ReactiveX.Completable?
static ReactiveX.Completable.MergeDelayError(Java.Lang.IIterable? sources) -> ReactiveX.Completable?
static ReactiveX.Completable.MergeDelayError(ReactiveStreams.IPublisher? sources) -> ReactiveX.Completable?
static ReactiveX.Completable.MergeDelayError(ReactiveStreams.IPublisher? sources, int maxConcurrency) -> ReactiveX.Completable?
static ReactiveX.Completable.Never() -> ReactiveX.Completable?
static ReactiveX.Completable.Timer(long delay, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Completable?
static ReactiveX.Completable.Timer(long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Completable?
static ReactiveX.Completable.UnsafeCreate(ReactiveX.ICompletableSource? source) -> ReactiveX.Completable?
static ReactiveX.Completable.Using(Java.Util.Concurrent.ICallable? resourceSupplier, ReactiveX.Functions.IFunction? completableFunction, ReactiveX.Functions.IConsumer? disposer) -> ReactiveX.Completable?
static ReactiveX.Completable.Using(Java.Util.Concurrent.ICallable? resourceSupplier, ReactiveX.Functions.IFunction? completableFunction, ReactiveX.Functions.IConsumer? disposer, bool eager) -> ReactiveX.Completable?
static ReactiveX.Completable.Wrap(ReactiveX.ICompletableSource? source) -> ReactiveX.Completable?
static ReactiveX.Disposables.Disposables.Disposed() -> ReactiveX.Disposables.IDisposable?
static ReactiveX.Disposables.Disposables.Empty() -> ReactiveX.Disposables.IDisposable?
static ReactiveX.Disposables.Disposables.FromAction(ReactiveX.Functions.IAction? run) -> ReactiveX.Disposables.IDisposable?
static ReactiveX.Disposables.Disposables.FromFuture(Java.Util.Concurrent.IFuture? future) -> ReactiveX.Disposables.IDisposable?
static ReactiveX.Disposables.Disposables.FromFuture(Java.Util.Concurrent.IFuture? future, bool allowInterrupt) -> ReactiveX.Disposables.IDisposable?
static ReactiveX.Disposables.Disposables.FromRunnable(Java.Lang.IRunnable? run) -> ReactiveX.Disposables.IDisposable?
static ReactiveX.Disposables.Disposables.FromSubscription(ReactiveStreams.ISubscription? subscription) -> ReactiveX.Disposables.IDisposable?
static ReactiveX.Exceptions.Exceptions.Propagate(Java.Lang.Throwable? t) -> Java.Lang.RuntimeException?
static ReactiveX.Exceptions.Exceptions.ThrowIfFatal(Java.Lang.Throwable? t) -> void
static ReactiveX.Flowable.Amb(Java.Lang.IIterable? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.AmbArray(params ReactiveStreams.IPublisher![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.BufferSize() -> int
static ReactiveX.Flowable.CombineLatest(Java.Lang.IIterable? sources, ReactiveX.Functions.IFunction? combiner) -> ReactiveX.Flowable?
static ReactiveX.Flowable.CombineLatest(Java.Lang.IIterable? sources, ReactiveX.Functions.IFunction? combiner, int bufferSize) -> ReactiveX.Flowable?
static ReactiveX.Flowable.CombineLatest(ReactiveStreams.IPublisher![]? sources, ReactiveX.Functions.IFunction? combiner) -> ReactiveX.Flowable?
static ReactiveX.Flowable.CombineLatest(ReactiveStreams.IPublisher![]? sources, ReactiveX.Functions.IFunction? combiner, int bufferSize) -> ReactiveX.Flowable?
static ReactiveX.Flowable.CombineLatest(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3, ReactiveStreams.IPublisher? source4, ReactiveStreams.IPublisher? source5, ReactiveStreams.IPublisher? source6, ReactiveStreams.IPublisher? source7, ReactiveStreams.IPublisher? source8, ReactiveStreams.IPublisher? source9, ReactiveX.Functions.IFunction9? combiner) -> ReactiveX.Flowable?
static ReactiveX.Flowable.CombineLatest(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3, ReactiveStreams.IPublisher? source4, ReactiveStreams.IPublisher? source5, ReactiveStreams.IPublisher? source6, ReactiveStreams.IPublisher? source7, ReactiveStreams.IPublisher? source8, ReactiveX.Functions.IFunction8? combiner) -> ReactiveX.Flowable?
static ReactiveX.Flowable.CombineLatest(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3, ReactiveStreams.IPublisher? source4, ReactiveStreams.IPublisher? source5, ReactiveStreams.IPublisher? source6, ReactiveStreams.IPublisher? source7, ReactiveX.Functions.IFunction7? combiner) -> ReactiveX.Flowable?
static ReactiveX.Flowable.CombineLatest(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3, ReactiveStreams.IPublisher? source4, ReactiveStreams.IPublisher? source5, ReactiveStreams.IPublisher? source6, ReactiveX.Functions.IFunction6? combiner) -> ReactiveX.Flowable?
static ReactiveX.Flowable.CombineLatest(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3, ReactiveStreams.IPublisher? source4, ReactiveStreams.IPublisher? source5, ReactiveX.Functions.IFunction5? combiner) -> ReactiveX.Flowable?
static ReactiveX.Flowable.CombineLatest(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3, ReactiveStreams.IPublisher? source4, ReactiveX.Functions.IFunction4? combiner) -> ReactiveX.Flowable?
static ReactiveX.Flowable.CombineLatest(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3, ReactiveX.Functions.IFunction3? combiner) -> ReactiveX.Flowable?
static ReactiveX.Flowable.CombineLatest(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveX.Functions.IBiFunction? combiner) -> ReactiveX.Flowable?
static ReactiveX.Flowable.CombineLatest(ReactiveX.Functions.IFunction? combiner, params ReactiveStreams.IPublisher![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.CombineLatestDelayError(Java.Lang.IIterable? sources, ReactiveX.Functions.IFunction? combiner) -> ReactiveX.Flowable?
static ReactiveX.Flowable.CombineLatestDelayError(Java.Lang.IIterable? sources, ReactiveX.Functions.IFunction? combiner, int bufferSize) -> ReactiveX.Flowable?
static ReactiveX.Flowable.CombineLatestDelayError(ReactiveStreams.IPublisher![]? sources, ReactiveX.Functions.IFunction? combiner) -> ReactiveX.Flowable?
static ReactiveX.Flowable.CombineLatestDelayError(ReactiveStreams.IPublisher![]? sources, ReactiveX.Functions.IFunction? combiner, int bufferSize) -> ReactiveX.Flowable?
static ReactiveX.Flowable.CombineLatestDelayError(ReactiveX.Functions.IFunction? combiner, int bufferSize, params ReactiveStreams.IPublisher![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.CombineLatestDelayError(ReactiveX.Functions.IFunction? combiner, params ReactiveStreams.IPublisher![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Concat(Java.Lang.IIterable? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Concat(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Concat(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Concat(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3, ReactiveStreams.IPublisher? source4) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Concat(ReactiveStreams.IPublisher? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Concat(ReactiveStreams.IPublisher? sources, int prefetch) -> ReactiveX.Flowable?
static ReactiveX.Flowable.ConcatArray(params ReactiveStreams.IPublisher![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.ConcatArrayDelayError(params ReactiveStreams.IPublisher![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.ConcatArrayEager(int maxConcurrency, int prefetch, params ReactiveStreams.IPublisher![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.ConcatArrayEager(params ReactiveStreams.IPublisher![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.ConcatArrayEagerDelayError(int maxConcurrency, int prefetch, params ReactiveStreams.IPublisher![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.ConcatArrayEagerDelayError(params ReactiveStreams.IPublisher![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.ConcatDelayError(Java.Lang.IIterable? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.ConcatDelayError(ReactiveStreams.IPublisher? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.ConcatDelayError(ReactiveStreams.IPublisher? sources, int prefetch, bool tillTheEnd) -> ReactiveX.Flowable?
static ReactiveX.Flowable.ConcatEager(Java.Lang.IIterable? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.ConcatEager(Java.Lang.IIterable? sources, int maxConcurrency, int prefetch) -> ReactiveX.Flowable?
static ReactiveX.Flowable.ConcatEager(ReactiveStreams.IPublisher? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.ConcatEager(ReactiveStreams.IPublisher? sources, int maxConcurrency, int prefetch) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Create(ReactiveX.IFlowableOnSubscribe? source, ReactiveX.BackpressureStrategy? mode) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Defer(Java.Util.Concurrent.ICallable? supplier) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Empty() -> ReactiveX.Flowable?
static ReactiveX.Flowable.Error(Java.Lang.Throwable? throwable) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Error(Java.Util.Concurrent.ICallable? supplier) -> ReactiveX.Flowable?
static ReactiveX.Flowable.FromArray(params Java.Lang.Object![]? items) -> ReactiveX.Flowable?
static ReactiveX.Flowable.FromCallable(Java.Util.Concurrent.ICallable? supplier) -> ReactiveX.Flowable?
static ReactiveX.Flowable.FromFuture(Java.Util.Concurrent.IFuture? future) -> ReactiveX.Flowable?
static ReactiveX.Flowable.FromFuture(Java.Util.Concurrent.IFuture? future, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
static ReactiveX.Flowable.FromFuture(Java.Util.Concurrent.IFuture? future, long timeout, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
static ReactiveX.Flowable.FromFuture(Java.Util.Concurrent.IFuture? future, long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
static ReactiveX.Flowable.FromIterable(Java.Lang.IIterable? source) -> ReactiveX.Flowable?
static ReactiveX.Flowable.FromPublisher(ReactiveStreams.IPublisher? source) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Generate(Java.Util.Concurrent.ICallable? initialState, ReactiveX.Functions.IBiConsumer? generator) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Generate(Java.Util.Concurrent.ICallable? initialState, ReactiveX.Functions.IBiConsumer? generator, ReactiveX.Functions.IConsumer? disposeState) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Generate(Java.Util.Concurrent.ICallable? initialState, ReactiveX.Functions.IBiFunction? generator) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Generate(Java.Util.Concurrent.ICallable? initialState, ReactiveX.Functions.IBiFunction? generator, ReactiveX.Functions.IConsumer? disposeState) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Generate(ReactiveX.Functions.IConsumer? generator) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Interval(long initialDelay, long period, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Interval(long initialDelay, long period, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Interval(long period, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Interval(long period, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
static ReactiveX.Flowable.IntervalRange(long start, long count, long initialDelay, long period, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
static ReactiveX.Flowable.IntervalRange(long start, long count, long initialDelay, long period, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Just(Java.Lang.Object? item) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Just(Java.Lang.Object? item1, Java.Lang.Object? item2) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Just(Java.Lang.Object? item1, Java.Lang.Object? item2, Java.Lang.Object? item3) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Just(Java.Lang.Object? item1, Java.Lang.Object? item2, Java.Lang.Object? item3, Java.Lang.Object? item4) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Just(Java.Lang.Object? item1, Java.Lang.Object? item2, Java.Lang.Object? item3, Java.Lang.Object? item4, Java.Lang.Object? item5) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Just(Java.Lang.Object? item1, Java.Lang.Object? item2, Java.Lang.Object? item3, Java.Lang.Object? item4, Java.Lang.Object? item5, Java.Lang.Object? item6) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Just(Java.Lang.Object? item1, Java.Lang.Object? item2, Java.Lang.Object? item3, Java.Lang.Object? item4, Java.Lang.Object? item5, Java.Lang.Object? item6, Java.Lang.Object? item7) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Just(Java.Lang.Object? item1, Java.Lang.Object? item2, Java.Lang.Object? item3, Java.Lang.Object? item4, Java.Lang.Object? item5, Java.Lang.Object? item6, Java.Lang.Object? item7, Java.Lang.Object? item8) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Just(Java.Lang.Object? item1, Java.Lang.Object? item2, Java.Lang.Object? item3, Java.Lang.Object? item4, Java.Lang.Object? item5, Java.Lang.Object? item6, Java.Lang.Object? item7, Java.Lang.Object? item8, Java.Lang.Object? item9) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Just(Java.Lang.Object? item1, Java.Lang.Object? item2, Java.Lang.Object? item3, Java.Lang.Object? item4, Java.Lang.Object? item5, Java.Lang.Object? item6, Java.Lang.Object? item7, Java.Lang.Object? item8, Java.Lang.Object? item9, Java.Lang.Object? item10) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Merge(Java.Lang.IIterable? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Merge(Java.Lang.IIterable? sources, int maxConcurrency) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Merge(Java.Lang.IIterable? sources, int maxConcurrency, int bufferSize) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Merge(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Merge(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Merge(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3, ReactiveStreams.IPublisher? source4) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Merge(ReactiveStreams.IPublisher? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Merge(ReactiveStreams.IPublisher? sources, int maxConcurrency) -> ReactiveX.Flowable?
static ReactiveX.Flowable.MergeArray(int maxConcurrency, int bufferSize, params ReactiveStreams.IPublisher![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.MergeArray(params ReactiveStreams.IPublisher![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.MergeArrayDelayError(int maxConcurrency, int bufferSize, params ReactiveStreams.IPublisher![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.MergeArrayDelayError(params ReactiveStreams.IPublisher![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.MergeDelayError(Java.Lang.IIterable? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.MergeDelayError(Java.Lang.IIterable? sources, int maxConcurrency) -> ReactiveX.Flowable?
static ReactiveX.Flowable.MergeDelayError(Java.Lang.IIterable? sources, int maxConcurrency, int bufferSize) -> ReactiveX.Flowable?
static ReactiveX.Flowable.MergeDelayError(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2) -> ReactiveX.Flowable?
static ReactiveX.Flowable.MergeDelayError(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3) -> ReactiveX.Flowable?
static ReactiveX.Flowable.MergeDelayError(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3, ReactiveStreams.IPublisher? source4) -> ReactiveX.Flowable?
static ReactiveX.Flowable.MergeDelayError(ReactiveStreams.IPublisher? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.MergeDelayError(ReactiveStreams.IPublisher? sources, int maxConcurrency) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Never() -> ReactiveX.Flowable?
static ReactiveX.Flowable.Range(int start, int count) -> ReactiveX.Flowable?
static ReactiveX.Flowable.RangeLong(long start, long count) -> ReactiveX.Flowable?
static ReactiveX.Flowable.SequenceEqual(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2) -> ReactiveX.Single?
static ReactiveX.Flowable.SequenceEqual(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveX.Functions.IBiPredicate? isEqual) -> ReactiveX.Single?
static ReactiveX.Flowable.SequenceEqual(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveX.Functions.IBiPredicate? isEqual, int bufferSize) -> ReactiveX.Single?
static ReactiveX.Flowable.SequenceEqual(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, int bufferSize) -> ReactiveX.Single?
static ReactiveX.Flowable.SwitchOnNext(ReactiveStreams.IPublisher? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.SwitchOnNext(ReactiveStreams.IPublisher? sources, int bufferSize) -> ReactiveX.Flowable?
static ReactiveX.Flowable.SwitchOnNextDelayError(ReactiveStreams.IPublisher? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.SwitchOnNextDelayError(ReactiveStreams.IPublisher? sources, int prefetch) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Timer(long delay, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Timer(long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowable?
static ReactiveX.Flowable.UnsafeCreate(ReactiveStreams.IPublisher? onSubscribe) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Using(Java.Util.Concurrent.ICallable? resourceSupplier, ReactiveX.Functions.IFunction? sourceSupplier, ReactiveX.Functions.IConsumer? resourceDisposer) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Using(Java.Util.Concurrent.ICallable? resourceSupplier, ReactiveX.Functions.IFunction? sourceSupplier, ReactiveX.Functions.IConsumer? resourceDisposer, bool eager) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Zip(Java.Lang.IIterable? sources, ReactiveX.Functions.IFunction? zipper) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Zip(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3, ReactiveStreams.IPublisher? source4, ReactiveStreams.IPublisher? source5, ReactiveStreams.IPublisher? source6, ReactiveStreams.IPublisher? source7, ReactiveStreams.IPublisher? source8, ReactiveStreams.IPublisher? source9, ReactiveX.Functions.IFunction9? zipper) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Zip(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3, ReactiveStreams.IPublisher? source4, ReactiveStreams.IPublisher? source5, ReactiveStreams.IPublisher? source6, ReactiveStreams.IPublisher? source7, ReactiveStreams.IPublisher? source8, ReactiveX.Functions.IFunction8? zipper) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Zip(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3, ReactiveStreams.IPublisher? source4, ReactiveStreams.IPublisher? source5, ReactiveStreams.IPublisher? source6, ReactiveStreams.IPublisher? source7, ReactiveX.Functions.IFunction7? zipper) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Zip(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3, ReactiveStreams.IPublisher? source4, ReactiveStreams.IPublisher? source5, ReactiveStreams.IPublisher? source6, ReactiveX.Functions.IFunction6? zipper) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Zip(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3, ReactiveStreams.IPublisher? source4, ReactiveStreams.IPublisher? source5, ReactiveX.Functions.IFunction5? zipper) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Zip(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3, ReactiveStreams.IPublisher? source4, ReactiveX.Functions.IFunction4? zipper) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Zip(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveStreams.IPublisher? source3, ReactiveX.Functions.IFunction3? zipper) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Zip(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveX.Functions.IBiFunction? zipper) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Zip(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveX.Functions.IBiFunction? zipper, bool delayError) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Zip(ReactiveStreams.IPublisher? source1, ReactiveStreams.IPublisher? source2, ReactiveX.Functions.IBiFunction? zipper, bool delayError, int bufferSize) -> ReactiveX.Flowable?
static ReactiveX.Flowable.Zip(ReactiveStreams.IPublisher? sources, ReactiveX.Functions.IFunction? zipper) -> ReactiveX.Flowable?
static ReactiveX.Flowable.ZipArray(ReactiveX.Functions.IFunction? zipper, bool delayError, int bufferSize, params ReactiveStreams.IPublisher![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Flowable.ZipIterable(Java.Lang.IIterable? sources, ReactiveX.Functions.IFunction? zipper, bool delayError, int bufferSize) -> ReactiveX.Flowable?
static ReactiveX.Internal.Disposables.DisposableHelper.Dispose(Java.Util.Concurrent.Atomic.AtomicReference? field) -> bool
static ReactiveX.Internal.Disposables.DisposableHelper.Disposed.get -> ReactiveX.Internal.Disposables.DisposableHelper?
static ReactiveX.Internal.Disposables.DisposableHelper.InvokeIsDisposed(ReactiveX.Disposables.IDisposable? d) -> bool
static ReactiveX.Internal.Disposables.DisposableHelper.Replace(Java.Util.Concurrent.Atomic.AtomicReference? field, ReactiveX.Disposables.IDisposable? d) -> bool
static ReactiveX.Internal.Disposables.DisposableHelper.ReportDisposableSet() -> void
static ReactiveX.Internal.Disposables.DisposableHelper.Set(Java.Util.Concurrent.Atomic.AtomicReference? field, ReactiveX.Disposables.IDisposable? d) -> bool
static ReactiveX.Internal.Disposables.DisposableHelper.SetOnce(Java.Util.Concurrent.Atomic.AtomicReference? field, ReactiveX.Disposables.IDisposable? d) -> bool
static ReactiveX.Internal.Disposables.DisposableHelper.TrySet(Java.Util.Concurrent.Atomic.AtomicReference? field, ReactiveX.Disposables.IDisposable? d) -> bool
static ReactiveX.Internal.Disposables.DisposableHelper.Validate(ReactiveX.Disposables.IDisposable? current, ReactiveX.Disposables.IDisposable? next) -> bool
static ReactiveX.Internal.Disposables.DisposableHelper.ValueOf(string? name) -> ReactiveX.Internal.Disposables.DisposableHelper?
static ReactiveX.Internal.Disposables.DisposableHelper.Values() -> ReactiveX.Internal.Disposables.DisposableHelper![]?
static ReactiveX.Internal.Disposables.EmptyDisposable.Complete(ReactiveX.ICompletableObserver? observer) -> void
static ReactiveX.Internal.Disposables.EmptyDisposable.Complete(ReactiveX.IMaybeObserver? observer) -> void
static ReactiveX.Internal.Disposables.EmptyDisposable.Complete(ReactiveX.IObserver? observer) -> void
static ReactiveX.Internal.Disposables.EmptyDisposable.Error(Java.Lang.Throwable? e, ReactiveX.ICompletableObserver? observer) -> void
static ReactiveX.Internal.Disposables.EmptyDisposable.Error(Java.Lang.Throwable? e, ReactiveX.IMaybeObserver? observer) -> void
static ReactiveX.Internal.Disposables.EmptyDisposable.Error(Java.Lang.Throwable? e, ReactiveX.IObserver? observer) -> void
static ReactiveX.Internal.Disposables.EmptyDisposable.Error(Java.Lang.Throwable? e, ReactiveX.ISingleObserver? observer) -> void
static ReactiveX.Internal.Disposables.EmptyDisposable.Instance.get -> ReactiveX.Internal.Disposables.EmptyDisposable?
static ReactiveX.Internal.Disposables.EmptyDisposable.Never.get -> ReactiveX.Internal.Disposables.EmptyDisposable?
static ReactiveX.Internal.Disposables.EmptyDisposable.ValueOf(string? name) -> ReactiveX.Internal.Disposables.EmptyDisposable?
static ReactiveX.Internal.Disposables.EmptyDisposable.Values() -> ReactiveX.Internal.Disposables.EmptyDisposable![]?
static ReactiveX.Internal.Functions.Functions.ActionConsumer(ReactiveX.Functions.IAction? action) -> ReactiveX.Functions.IConsumer?
static ReactiveX.Internal.Functions.Functions.AlwaysFalse() -> ReactiveX.Functions.IPredicate?
static ReactiveX.Internal.Functions.Functions.AlwaysTrue() -> ReactiveX.Functions.IPredicate?
static ReactiveX.Internal.Functions.Functions.CastFunction(Java.Lang.Class? target) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Functions.Functions.CreateArrayList(int capacity) -> Java.Util.Concurrent.ICallable?
static ReactiveX.Internal.Functions.Functions.CreateHashSet() -> Java.Util.Concurrent.ICallable?
static ReactiveX.Internal.Functions.Functions.EmptyAction.get -> ReactiveX.Functions.IAction?
static ReactiveX.Internal.Functions.Functions.EmptyConsumer() -> ReactiveX.Functions.IConsumer?
static ReactiveX.Internal.Functions.Functions.EmptyLongConsumer.get -> ReactiveX.Functions.ILongConsumer?
static ReactiveX.Internal.Functions.Functions.EmptyRunnable.get -> Java.Lang.IRunnable?
static ReactiveX.Internal.Functions.Functions.EqualsWith(Java.Lang.Object? value) -> ReactiveX.Functions.IPredicate?
static ReactiveX.Internal.Functions.Functions.ErrorConsumer.get -> ReactiveX.Functions.IConsumer?
static ReactiveX.Internal.Functions.Functions.FutureAction(Java.Util.Concurrent.IFuture? future) -> ReactiveX.Functions.IAction?
static ReactiveX.Internal.Functions.Functions.Identity() -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Functions.Functions.InvokeBoundedConsumer(int bufferSize) -> ReactiveX.Functions.IConsumer?
static ReactiveX.Internal.Functions.Functions.IsInstanceOf(Java.Lang.Class? clazz) -> ReactiveX.Functions.IPredicate?
static ReactiveX.Internal.Functions.Functions.JustCallable(Java.Lang.Object? value) -> Java.Util.Concurrent.ICallable?
static ReactiveX.Internal.Functions.Functions.JustFunction(Java.Lang.Object? value) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Functions.Functions.ListSorter(Java.Util.IComparator? comparator) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Functions.Functions.NaturalComparator() -> Java.Util.IComparator?
static ReactiveX.Internal.Functions.Functions.NaturalOrder() -> Java.Util.IComparator?
static ReactiveX.Internal.Functions.Functions.NotificationOnComplete(ReactiveX.Functions.IConsumer? onNotification) -> ReactiveX.Functions.IAction?
static ReactiveX.Internal.Functions.Functions.NotificationOnError(ReactiveX.Functions.IConsumer? onNotification) -> ReactiveX.Functions.IConsumer?
static ReactiveX.Internal.Functions.Functions.NotificationOnNext(ReactiveX.Functions.IConsumer? onNotification) -> ReactiveX.Functions.IConsumer?
static ReactiveX.Internal.Functions.Functions.NullSupplier() -> Java.Util.Concurrent.ICallable?
static ReactiveX.Internal.Functions.Functions.OnErrorMissing.get -> ReactiveX.Functions.IConsumer?
static ReactiveX.Internal.Functions.Functions.PredicateReverseFor(ReactiveX.Functions.IBooleanSupplier? supplier) -> ReactiveX.Functions.IPredicate?
static ReactiveX.Internal.Functions.Functions.RequestMax.get -> ReactiveX.Functions.IConsumer?
static ReactiveX.Internal.Functions.Functions.TimestampWith(Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Functions.Functions.ToFunction(ReactiveX.Functions.IBiFunction? f) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Functions.Functions.ToFunction(ReactiveX.Functions.IFunction3? f) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Functions.Functions.ToFunction(ReactiveX.Functions.IFunction4? f) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Functions.Functions.ToFunction(ReactiveX.Functions.IFunction5? f) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Functions.Functions.ToFunction(ReactiveX.Functions.IFunction6? f) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Functions.Functions.ToFunction(ReactiveX.Functions.IFunction7? f) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Functions.Functions.ToFunction(ReactiveX.Functions.IFunction8? f) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Functions.Functions.ToFunction(ReactiveX.Functions.IFunction9? f) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Functions.Functions.ToMapKeySelector(ReactiveX.Functions.IFunction? keySelector) -> ReactiveX.Functions.IBiConsumer?
static ReactiveX.Internal.Functions.Functions.ToMapKeyValueSelector(ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector) -> ReactiveX.Functions.IBiConsumer?
static ReactiveX.Internal.Functions.Functions.ToMultimapKeyValueSelector(ReactiveX.Functions.IFunction? keySelector, ReactiveX.Functions.IFunction? valueSelector, ReactiveX.Functions.IFunction? collectionFactory) -> ReactiveX.Functions.IBiConsumer?
static ReactiveX.Internal.Functions.ObjectHelper.Compare(int v1, int v2) -> int
static ReactiveX.Internal.Functions.ObjectHelper.Compare(long v1, long v2) -> int
static ReactiveX.Internal.Functions.ObjectHelper.Equals(Java.Lang.Object? o1, Java.Lang.Object? o2) -> bool
static ReactiveX.Internal.Functions.ObjectHelper.EqualsPredicate() -> ReactiveX.Functions.IBiPredicate?
static ReactiveX.Internal.Functions.ObjectHelper.HashCode(Java.Lang.Object? o) -> int
static ReactiveX.Internal.Functions.ObjectHelper.RequireNonNull(Java.Lang.Object? object, string? message) -> Java.Lang.Object?
static ReactiveX.Internal.Functions.ObjectHelper.RequireNonNull(long value, string? message) -> long
static ReactiveX.Internal.Functions.ObjectHelper.VerifyPositive(int value, string? paramName) -> int
static ReactiveX.Internal.Functions.ObjectHelper.VerifyPositive(long value, string? paramName) -> long
static ReactiveX.Internal.Observers.BlockingObserver.Terminated.get -> Java.Lang.Object?
static ReactiveX.Internal.Operators.Completable.CompletableEmpty.Instance.get -> ReactiveX.Completable?
static ReactiveX.Internal.Operators.Completable.CompletableNever.Instance.get -> ReactiveX.Completable?
static ReactiveX.Internal.Operators.Flowable.FlowableBlockingSubscribe.Subscribe(ReactiveStreams.IPublisher? o) -> void
static ReactiveX.Internal.Operators.Flowable.FlowableBlockingSubscribe.Subscribe(ReactiveStreams.IPublisher? o, ReactiveStreams.ISubscriber? subscriber) -> void
static ReactiveX.Internal.Operators.Flowable.FlowableBlockingSubscribe.Subscribe(ReactiveStreams.IPublisher? o, ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete) -> void
static ReactiveX.Internal.Operators.Flowable.FlowableBlockingSubscribe.Subscribe(ReactiveStreams.IPublisher? o, ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete, int bufferSize) -> void
static ReactiveX.Internal.Operators.Flowable.FlowableConcatMap.Subscribe(ReactiveStreams.ISubscriber? s, ReactiveX.Functions.IFunction? mapper, int prefetch, ReactiveX.Internal.Util.ErrorMode? errorMode) -> ReactiveStreams.ISubscriber?
static ReactiveX.Internal.Operators.Flowable.FlowableEmpty.Instance.get -> ReactiveX.Flowable?
static ReactiveX.Internal.Operators.Flowable.FlowableFlatMap.Subscribe(ReactiveStreams.ISubscriber? s, ReactiveX.Functions.IFunction? mapper, bool delayErrors, int maxConcurrency, int bufferSize) -> ReactiveX.IFlowableSubscriber?
static ReactiveX.Internal.Operators.Flowable.FlowableFromIterable.Subscribe(ReactiveStreams.ISubscriber? s, Java.Util.IIterator? it) -> void
static ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.FlatMapIntoIterable(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.FlatMapWithCombiner(ReactiveX.Functions.IFunction? mapper, ReactiveX.Functions.IBiFunction? combiner) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.ItemDelay(ReactiveX.Functions.IFunction? itemDelay) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.ReplayCallable(ReactiveX.Flowable? parent) -> Java.Util.Concurrent.ICallable?
static ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.ReplayCallable(ReactiveX.Flowable? parent, int bufferSize) -> Java.Util.Concurrent.ICallable?
static ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.ReplayCallable(ReactiveX.Flowable? parent, int bufferSize, long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> Java.Util.Concurrent.ICallable?
static ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.ReplayCallable(ReactiveX.Flowable? parent, long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> Java.Util.Concurrent.ICallable?
static ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.ReplayFunction(ReactiveX.Functions.IFunction? selector, ReactiveX.Scheduler? scheduler) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.RequestMax.Instance.get -> ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.RequestMax?
static ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.RequestMax.ValueOf(string? name) -> ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.RequestMax?
static ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.RequestMax.Values() -> ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.RequestMax![]?
static ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.SimpleBiGenerator(ReactiveX.Functions.IBiConsumer? consumer) -> ReactiveX.Functions.IBiFunction?
static ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.SimpleGenerator(ReactiveX.Functions.IConsumer? consumer) -> ReactiveX.Functions.IBiFunction?
static ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.SubscriberOnComplete(ReactiveStreams.ISubscriber? subscriber) -> ReactiveX.Functions.IAction?
static ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.SubscriberOnError(ReactiveStreams.ISubscriber? subscriber) -> ReactiveX.Functions.IConsumer?
static ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.SubscriberOnNext(ReactiveStreams.ISubscriber? subscriber) -> ReactiveX.Functions.IConsumer?
static ReactiveX.Internal.Operators.Flowable.FlowableInternalHelper.ZipIterable(ReactiveX.Functions.IFunction? zipper) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Operators.Flowable.FlowableNever.Instance.get -> ReactiveX.Flowable?
static ReactiveX.Internal.Operators.Flowable.FlowablePublish.Create(ReactiveX.Flowable? source, int bufferSize) -> ReactiveX.Flowables.ConnectableFlowable?
static ReactiveX.Internal.Operators.Flowable.FlowableReplay.Create(ReactiveX.Flowable? source, int bufferSize) -> ReactiveX.Flowables.ConnectableFlowable?
static ReactiveX.Internal.Operators.Flowable.FlowableReplay.Create(ReactiveX.Flowable? source, long maxAge, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowables.ConnectableFlowable?
static ReactiveX.Internal.Operators.Flowable.FlowableReplay.Create(ReactiveX.Flowable? source, long maxAge, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, int bufferSize) -> ReactiveX.Flowables.ConnectableFlowable?
static ReactiveX.Internal.Operators.Flowable.FlowableReplay.CreateFrom(ReactiveX.Flowable? source) -> ReactiveX.Flowables.ConnectableFlowable?
static ReactiveX.Internal.Operators.Flowable.FlowableReplay.MulticastSelector(Java.Util.Concurrent.ICallable? connectableFactory, ReactiveX.Functions.IFunction? selector) -> ReactiveX.Flowable?
static ReactiveX.Internal.Operators.Flowable.FlowableReplay.ObserveOn(ReactiveX.Flowables.ConnectableFlowable? cf, ReactiveX.Scheduler? scheduler) -> ReactiveX.Flowables.ConnectableFlowable?
static ReactiveX.Internal.Operators.Flowable.FlowableScalarXMap.ScalarXMap(Java.Lang.Object? value, ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Flowable?
static ReactiveX.Internal.Operators.Flowable.FlowableScalarXMap.TryScalarXMapSubscribe(ReactiveStreams.IPublisher? source, ReactiveStreams.ISubscriber? subscriber, ReactiveX.Functions.IFunction? mapper) -> bool
static ReactiveX.Internal.Operators.Maybe.MaybeEmpty.Instance.get -> ReactiveX.Internal.Operators.Maybe.MaybeEmpty?
static ReactiveX.Internal.Operators.Maybe.MaybeNever.Instance.get -> ReactiveX.Internal.Operators.Maybe.MaybeNever?
static ReactiveX.Internal.Operators.Maybe.MaybeToObservable.Create(ReactiveX.IObserver? downstream) -> ReactiveX.IMaybeObserver?
static ReactiveX.Internal.Operators.Maybe.MaybeToPublisher.Instance() -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Operators.Maybe.MaybeToPublisher.ValueOf(string? name) -> ReactiveX.Internal.Operators.Maybe.MaybeToPublisher?
static ReactiveX.Internal.Operators.Maybe.MaybeToPublisher.Values() -> ReactiveX.Internal.Operators.Maybe.MaybeToPublisher![]?
static ReactiveX.Internal.Operators.Observable.ObservableBlockingSubscribe.Subscribe(ReactiveX.IObservableSource? o) -> void
static ReactiveX.Internal.Operators.Observable.ObservableBlockingSubscribe.Subscribe(ReactiveX.IObservableSource? o, ReactiveX.Functions.IConsumer? onNext, ReactiveX.Functions.IConsumer? onError, ReactiveX.Functions.IAction? onComplete) -> void
static ReactiveX.Internal.Operators.Observable.ObservableBlockingSubscribe.Subscribe(ReactiveX.IObservableSource? o, ReactiveX.IObserver? observer) -> void
static ReactiveX.Internal.Operators.Observable.ObservableEmpty.Instance.get -> ReactiveX.Observable?
static ReactiveX.Internal.Operators.Observable.ObservableInternalHelper.FlatMapIntoIterable(ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Operators.Observable.ObservableInternalHelper.FlatMapWithCombiner(ReactiveX.Functions.IFunction? mapper, ReactiveX.Functions.IBiFunction? combiner) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Operators.Observable.ObservableInternalHelper.ItemDelay(ReactiveX.Functions.IFunction? itemDelay) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Operators.Observable.ObservableInternalHelper.ObserverOnComplete(ReactiveX.IObserver? observer) -> ReactiveX.Functions.IAction?
static ReactiveX.Internal.Operators.Observable.ObservableInternalHelper.ObserverOnError(ReactiveX.IObserver? observer) -> ReactiveX.Functions.IConsumer?
static ReactiveX.Internal.Operators.Observable.ObservableInternalHelper.ObserverOnNext(ReactiveX.IObserver? observer) -> ReactiveX.Functions.IConsumer?
static ReactiveX.Internal.Operators.Observable.ObservableInternalHelper.ReplayCallable(ReactiveX.Observable? parent) -> Java.Util.Concurrent.ICallable?
static ReactiveX.Internal.Operators.Observable.ObservableInternalHelper.ReplayCallable(ReactiveX.Observable? parent, int bufferSize) -> Java.Util.Concurrent.ICallable?
static ReactiveX.Internal.Operators.Observable.ObservableInternalHelper.ReplayCallable(ReactiveX.Observable? parent, int bufferSize, long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> Java.Util.Concurrent.ICallable?
static ReactiveX.Internal.Operators.Observable.ObservableInternalHelper.ReplayCallable(ReactiveX.Observable? parent, long time, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> Java.Util.Concurrent.ICallable?
static ReactiveX.Internal.Operators.Observable.ObservableInternalHelper.ReplayFunction(ReactiveX.Functions.IFunction? selector, ReactiveX.Scheduler? scheduler) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Operators.Observable.ObservableInternalHelper.SimpleBiGenerator(ReactiveX.Functions.IBiConsumer? consumer) -> ReactiveX.Functions.IBiFunction?
static ReactiveX.Internal.Operators.Observable.ObservableInternalHelper.SimpleGenerator(ReactiveX.Functions.IConsumer? consumer) -> ReactiveX.Functions.IBiFunction?
static ReactiveX.Internal.Operators.Observable.ObservableInternalHelper.ZipIterable(ReactiveX.Functions.IFunction? zipper) -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Operators.Observable.ObservableNever.Instance.get -> ReactiveX.Observable?
static ReactiveX.Internal.Operators.Observable.ObservablePublish.Create(ReactiveX.IObservableSource? source) -> ReactiveX.Observables.ConnectableObservable?
static ReactiveX.Internal.Operators.Observable.ObservableReplay.Create(ReactiveX.IObservableSource? source, int bufferSize) -> ReactiveX.Observables.ConnectableObservable?
static ReactiveX.Internal.Operators.Observable.ObservableReplay.Create(ReactiveX.IObservableSource? source, long maxAge, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observables.ConnectableObservable?
static ReactiveX.Internal.Operators.Observable.ObservableReplay.Create(ReactiveX.IObservableSource? source, long maxAge, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, int bufferSize) -> ReactiveX.Observables.ConnectableObservable?
static ReactiveX.Internal.Operators.Observable.ObservableReplay.CreateFrom(ReactiveX.IObservableSource? source) -> ReactiveX.Observables.ConnectableObservable?
static ReactiveX.Internal.Operators.Observable.ObservableReplay.MulticastSelector(Java.Util.Concurrent.ICallable? connectableFactory, ReactiveX.Functions.IFunction? selector) -> ReactiveX.Observable?
static ReactiveX.Internal.Operators.Observable.ObservableReplay.ObserveOn(ReactiveX.Observables.ConnectableObservable? co, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observables.ConnectableObservable?
static ReactiveX.Internal.Operators.Observable.ObservableScalarXMap.ScalarXMap(Java.Lang.Object? value, ReactiveX.Functions.IFunction? mapper) -> ReactiveX.Observable?
static ReactiveX.Internal.Operators.Observable.ObservableScalarXMap.TryScalarXMapSubscribe(ReactiveX.IObservableSource? source, ReactiveX.IObserver? observer, ReactiveX.Functions.IFunction? mapper) -> bool
static ReactiveX.Internal.Operators.Single.SingleInternalHelper.EmptyThrower() -> Java.Util.Concurrent.ICallable?
static ReactiveX.Internal.Operators.Single.SingleInternalHelper.IterableToFlowable(Java.Lang.IIterable? sources) -> Java.Lang.IIterable?
static ReactiveX.Internal.Operators.Single.SingleInternalHelper.ToFlowable() -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Operators.Single.SingleInternalHelper.ToObservable() -> ReactiveX.Functions.IFunction?
static ReactiveX.Internal.Operators.Single.SingleNever.Instance.get -> ReactiveX.Single?
static ReactiveX.Internal.Operators.Single.SingleToObservable.Create(ReactiveX.IObserver? downstream) -> ReactiveX.ISingleObserver?
static ReactiveX.Internal.Schedulers.ImmediateThinScheduler.Instance.get -> ReactiveX.Scheduler?
static ReactiveX.Internal.Schedulers.SchedulerPoolFactory.Create(Java.Util.Concurrent.IThreadFactory? factory) -> Java.Util.Concurrent.IScheduledExecutorService?
static ReactiveX.Internal.Schedulers.SchedulerPoolFactory.PurgeEnabled.get -> bool
static ReactiveX.Internal.Schedulers.SchedulerPoolFactory.PurgePeriodSeconds.get -> int
static ReactiveX.Internal.Schedulers.SchedulerPoolFactory.Shutdown() -> void
static ReactiveX.Internal.Schedulers.SchedulerPoolFactory.Start() -> void
static ReactiveX.Internal.Schedulers.TrampolineScheduler.Instance() -> ReactiveX.Internal.Schedulers.TrampolineScheduler?
static ReactiveX.Internal.Subscribers.BlockingSubscriber.Terminated.get -> Java.Lang.Object?
static ReactiveX.Internal.Subscriptions.EmptySubscription.Complete(ReactiveStreams.ISubscriber? s) -> void
static ReactiveX.Internal.Subscriptions.EmptySubscription.Error(Java.Lang.Throwable? e, ReactiveStreams.ISubscriber? s) -> void
static ReactiveX.Internal.Subscriptions.EmptySubscription.Instance.get -> ReactiveX.Internal.Subscriptions.EmptySubscription?
static ReactiveX.Internal.Subscriptions.EmptySubscription.ValueOf(string? name) -> ReactiveX.Internal.Subscriptions.EmptySubscription?
static ReactiveX.Internal.Subscriptions.EmptySubscription.Values() -> ReactiveX.Internal.Subscriptions.EmptySubscription![]?
static ReactiveX.Internal.Subscriptions.SubscriptionHelper.Cancel(Java.Util.Concurrent.Atomic.AtomicReference? field) -> bool
static ReactiveX.Internal.Subscriptions.SubscriptionHelper.Cancelled.get -> ReactiveX.Internal.Subscriptions.SubscriptionHelper?
static ReactiveX.Internal.Subscriptions.SubscriptionHelper.DeferredRequest(Java.Util.Concurrent.Atomic.AtomicReference? field, Java.Util.Concurrent.Atomic.AtomicLong? requested, long n) -> void
static ReactiveX.Internal.Subscriptions.SubscriptionHelper.DeferredSetOnce(Java.Util.Concurrent.Atomic.AtomicReference? field, Java.Util.Concurrent.Atomic.AtomicLong? requested, ReactiveStreams.ISubscription? s) -> bool
static ReactiveX.Internal.Subscriptions.SubscriptionHelper.Replace(Java.Util.Concurrent.Atomic.AtomicReference? field, ReactiveStreams.ISubscription? s) -> bool
static ReactiveX.Internal.Subscriptions.SubscriptionHelper.ReportMoreProduced(long n) -> void
static ReactiveX.Internal.Subscriptions.SubscriptionHelper.ReportSubscriptionSet() -> void
static ReactiveX.Internal.Subscriptions.SubscriptionHelper.Set(Java.Util.Concurrent.Atomic.AtomicReference? field, ReactiveStreams.ISubscription? s) -> bool
static ReactiveX.Internal.Subscriptions.SubscriptionHelper.SetOnce(Java.Util.Concurrent.Atomic.AtomicReference? field, ReactiveStreams.ISubscription? s) -> bool
static ReactiveX.Internal.Subscriptions.SubscriptionHelper.SetOnce(Java.Util.Concurrent.Atomic.AtomicReference? field, ReactiveStreams.ISubscription? s, long request) -> bool
static ReactiveX.Internal.Subscriptions.SubscriptionHelper.Validate(ReactiveStreams.ISubscription? current, ReactiveStreams.ISubscription? next) -> bool
static ReactiveX.Internal.Subscriptions.SubscriptionHelper.Validate(long n) -> bool
static ReactiveX.Internal.Subscriptions.SubscriptionHelper.ValueOf(string? name) -> ReactiveX.Internal.Subscriptions.SubscriptionHelper?
static ReactiveX.Internal.Subscriptions.SubscriptionHelper.Values() -> ReactiveX.Internal.Subscriptions.SubscriptionHelper![]?
static ReactiveX.Internal.Util.BackpressureHelper.Add(Java.Util.Concurrent.Atomic.AtomicLong? requested, long n) -> long
static ReactiveX.Internal.Util.BackpressureHelper.AddCancel(Java.Util.Concurrent.Atomic.AtomicLong? requested, long n) -> long
static ReactiveX.Internal.Util.BackpressureHelper.AddCap(long a, long b) -> long
static ReactiveX.Internal.Util.BackpressureHelper.MultiplyCap(long a, long b) -> long
static ReactiveX.Internal.Util.BackpressureHelper.Produced(Java.Util.Concurrent.Atomic.AtomicLong? requested, long n) -> long
static ReactiveX.Internal.Util.BackpressureHelper.ProducedCancel(Java.Util.Concurrent.Atomic.AtomicLong? requested, long n) -> long
static ReactiveX.Internal.Util.BlockingHelper.AwaitForComplete(Java.Util.Concurrent.CountDownLatch? latch, ReactiveX.Disposables.IDisposable? subscription) -> void
static ReactiveX.Internal.Util.BlockingHelper.VerifyNonBlocking() -> void
static ReactiveX.Internal.Util.EmptyComponent.AsObserver() -> ReactiveX.IObserver?
static ReactiveX.Internal.Util.EmptyComponent.AsSubscriber() -> ReactiveStreams.ISubscriber?
static ReactiveX.Internal.Util.EmptyComponent.Instance.get -> ReactiveX.Internal.Util.EmptyComponent?
static ReactiveX.Internal.Util.EmptyComponent.ValueOf(string? name) -> ReactiveX.Internal.Util.EmptyComponent?
static ReactiveX.Internal.Util.EmptyComponent.Values() -> ReactiveX.Internal.Util.EmptyComponent![]?
static ReactiveX.Internal.Util.EndConsumerHelper.ComposeMessage(string? consumer) -> string?
static ReactiveX.Internal.Util.EndConsumerHelper.ReportDoubleSubscription(Java.Lang.Class? consumer) -> void
static ReactiveX.Internal.Util.EndConsumerHelper.SetOnce(Java.Util.Concurrent.Atomic.AtomicReference? upstream, ReactiveStreams.ISubscription? next, Java.Lang.Class? subscriber) -> bool
static ReactiveX.Internal.Util.EndConsumerHelper.SetOnce(Java.Util.Concurrent.Atomic.AtomicReference? upstream, ReactiveX.Disposables.IDisposable? next, Java.Lang.Class? observer) -> bool
static ReactiveX.Internal.Util.EndConsumerHelper.Validate(ReactiveStreams.ISubscription? upstream, ReactiveStreams.ISubscription? next, Java.Lang.Class? subscriber) -> bool
static ReactiveX.Internal.Util.EndConsumerHelper.Validate(ReactiveX.Disposables.IDisposable? upstream, ReactiveX.Disposables.IDisposable? next, Java.Lang.Class? observer) -> bool
static ReactiveX.Internal.Util.ErrorMode.Boundary.get -> ReactiveX.Internal.Util.ErrorMode?
static ReactiveX.Internal.Util.ErrorMode.End.get -> ReactiveX.Internal.Util.ErrorMode?
static ReactiveX.Internal.Util.ErrorMode.Immediate.get -> ReactiveX.Internal.Util.ErrorMode?
static ReactiveX.Internal.Util.ErrorMode.ValueOf(string? name) -> ReactiveX.Internal.Util.ErrorMode?
static ReactiveX.Internal.Util.ErrorMode.Values() -> ReactiveX.Internal.Util.ErrorMode![]?
static ReactiveX.Internal.Util.ExceptionHelper.AddThrowable(Java.Util.Concurrent.Atomic.AtomicReference? field, Java.Lang.Throwable? exception) -> bool
static ReactiveX.Internal.Util.ExceptionHelper.Flatten(Java.Lang.Throwable? t) -> System.Collections.Generic.IList<Java.Lang.Throwable!>?
static ReactiveX.Internal.Util.ExceptionHelper.Terminate(Java.Util.Concurrent.Atomic.AtomicReference? field) -> Java.Lang.Throwable?
static ReactiveX.Internal.Util.ExceptionHelper.Terminated.get -> Java.Lang.Throwable?
static ReactiveX.Internal.Util.ExceptionHelper.ThrowIfThrowable(Java.Lang.Throwable? e) -> Java.Lang.Exception?
static ReactiveX.Internal.Util.ExceptionHelper.TimeoutMessage(long timeout, Java.Util.Concurrent.TimeUnit? unit) -> string?
static ReactiveX.Internal.Util.ExceptionHelper.WrapOrThrow(Java.Lang.Throwable? error) -> Java.Lang.RuntimeException?
static ReactiveX.Internal.Util.HalfSerializer.OnComplete(ReactiveStreams.ISubscriber? subscriber, Java.Util.Concurrent.Atomic.AtomicInteger? wip, ReactiveX.Internal.Util.AtomicThrowable? error) -> void
static ReactiveX.Internal.Util.HalfSerializer.OnComplete(ReactiveX.IObserver? observer, Java.Util.Concurrent.Atomic.AtomicInteger? wip, ReactiveX.Internal.Util.AtomicThrowable? error) -> void
static ReactiveX.Internal.Util.HalfSerializer.OnError(ReactiveStreams.ISubscriber? subscriber, Java.Lang.Throwable? ex, Java.Util.Concurrent.Atomic.AtomicInteger? wip, ReactiveX.Internal.Util.AtomicThrowable? error) -> void
static ReactiveX.Internal.Util.HalfSerializer.OnError(ReactiveX.IObserver? observer, Java.Lang.Throwable? ex, Java.Util.Concurrent.Atomic.AtomicInteger? wip, ReactiveX.Internal.Util.AtomicThrowable? error) -> void
static ReactiveX.Internal.Util.HalfSerializer.OnNext(ReactiveStreams.ISubscriber? subscriber, Java.Lang.Object? value, Java.Util.Concurrent.Atomic.AtomicInteger? wip, ReactiveX.Internal.Util.AtomicThrowable? error) -> void
static ReactiveX.Internal.Util.HalfSerializer.OnNext(ReactiveX.IObserver? observer, Java.Lang.Object? value, Java.Util.Concurrent.Atomic.AtomicInteger? wip, ReactiveX.Internal.Util.AtomicThrowable? error) -> void
static ReactiveX.Internal.Util.NotificationLite.Accept(Java.Lang.Object? o, ReactiveStreams.ISubscriber? s) -> bool
static ReactiveX.Internal.Util.NotificationLite.Accept(Java.Lang.Object? o, ReactiveX.IObserver? observer) -> bool
static ReactiveX.Internal.Util.NotificationLite.AcceptFull(Java.Lang.Object? o, ReactiveStreams.ISubscriber? s) -> bool
static ReactiveX.Internal.Util.NotificationLite.AcceptFull(Java.Lang.Object? o, ReactiveX.IObserver? observer) -> bool
static ReactiveX.Internal.Util.NotificationLite.Complete() -> Java.Lang.Object?
static ReactiveX.Internal.Util.NotificationLite.Disposable(ReactiveX.Disposables.IDisposable? d) -> Java.Lang.Object?
static ReactiveX.Internal.Util.NotificationLite.Error(Java.Lang.Throwable? e) -> Java.Lang.Object?
static ReactiveX.Internal.Util.NotificationLite.GetDisposable(Java.Lang.Object? o) -> ReactiveX.Disposables.IDisposable?
static ReactiveX.Internal.Util.NotificationLite.GetError(Java.Lang.Object? o) -> Java.Lang.Throwable?
static ReactiveX.Internal.Util.NotificationLite.GetSubscription(Java.Lang.Object? o) -> ReactiveStreams.ISubscription?
static ReactiveX.Internal.Util.NotificationLite.GetValue(Java.Lang.Object? o) -> Java.Lang.Object?
static ReactiveX.Internal.Util.NotificationLite.IsComplete(Java.Lang.Object? o) -> bool
static ReactiveX.Internal.Util.NotificationLite.IsDisposable(Java.Lang.Object? o) -> bool
static ReactiveX.Internal.Util.NotificationLite.IsError(Java.Lang.Object? o) -> bool
static ReactiveX.Internal.Util.NotificationLite.IsSubscription(Java.Lang.Object? o) -> bool
static ReactiveX.Internal.Util.NotificationLite.Next(Java.Lang.Object? value) -> Java.Lang.Object?
static ReactiveX.Internal.Util.NotificationLite.Subscription(ReactiveStreams.ISubscription? s) -> Java.Lang.Object?
static ReactiveX.Internal.Util.NotificationLite.ValueOf(string? name) -> ReactiveX.Internal.Util.NotificationLite?
static ReactiveX.Internal.Util.NotificationLite.Values() -> ReactiveX.Internal.Util.NotificationLite![]?
static ReactiveX.Internal.Util.Pow2.IsPowerOfTwo(int value) -> bool
static ReactiveX.Internal.Util.Pow2.RoundToPowerOfTwo(int value) -> int
static ReactiveX.Internal.Util.QueueDrainHelper.CheckTerminated(bool d, bool empty, ReactiveStreams.ISubscriber? s, bool delayError, ReactiveX.Internal.Fuseable.ISimpleQueue? q, ReactiveX.Internal.Util.IQueueDrain? qd) -> bool
static ReactiveX.Internal.Util.QueueDrainHelper.CheckTerminated(bool d, bool empty, ReactiveX.IObserver? observer, bool delayError, ReactiveX.Internal.Fuseable.ISimpleQueue? q, ReactiveX.Disposables.IDisposable? disposable, ReactiveX.Internal.Util.IObservableQueueDrain? qd) -> bool
static ReactiveX.Internal.Util.QueueDrainHelper.CreateQueue(int capacityHint) -> ReactiveX.Internal.Fuseable.ISimpleQueue?
static ReactiveX.Internal.Util.QueueDrainHelper.DrainLoop(ReactiveX.Internal.Fuseable.ISimplePlainQueue? q, ReactiveX.IObserver? a, bool delayError, ReactiveX.Disposables.IDisposable? dispose, ReactiveX.Internal.Util.IObservableQueueDrain? qd) -> void
static ReactiveX.Internal.Util.QueueDrainHelper.DrainMaxLoop(ReactiveX.Internal.Fuseable.ISimplePlainQueue? q, ReactiveStreams.ISubscriber? a, bool delayError, ReactiveX.Disposables.IDisposable? dispose, ReactiveX.Internal.Util.IQueueDrain? qd) -> void
static ReactiveX.Internal.Util.QueueDrainHelper.PostComplete(ReactiveStreams.ISubscriber? actual, Java.Util.IQueue? queue, Java.Util.Concurrent.Atomic.AtomicLong? state, ReactiveX.Functions.IBooleanSupplier? isCancelled) -> void
static ReactiveX.Internal.Util.QueueDrainHelper.PostCompleteRequest(long n, ReactiveStreams.ISubscriber? actual, Java.Util.IQueue? queue, Java.Util.Concurrent.Atomic.AtomicLong? state, ReactiveX.Functions.IBooleanSupplier? isCancelled) -> bool
static ReactiveX.Internal.Util.QueueDrainHelper.Request(ReactiveStreams.ISubscription? s, int prefetch) -> void
static ReactiveX.Maybe.Amb(Java.Lang.IIterable? sources) -> ReactiveX.Maybe?
static ReactiveX.Maybe.AmbArray(params ReactiveX.IMaybeSource![]? sources) -> ReactiveX.Maybe?
static ReactiveX.Maybe.Concat(Java.Lang.IIterable? sources) -> ReactiveX.Flowable?
static ReactiveX.Maybe.Concat(ReactiveStreams.IPublisher? sources) -> ReactiveX.Flowable?
static ReactiveX.Maybe.Concat(ReactiveStreams.IPublisher? sources, int prefetch) -> ReactiveX.Flowable?
static ReactiveX.Maybe.Concat(ReactiveX.IMaybeSource? source1, ReactiveX.IMaybeSource? source2) -> ReactiveX.Flowable?
static ReactiveX.Maybe.Concat(ReactiveX.IMaybeSource? source1, ReactiveX.IMaybeSource? source2, ReactiveX.IMaybeSource? source3) -> ReactiveX.Flowable?
static ReactiveX.Maybe.Concat(ReactiveX.IMaybeSource? source1, ReactiveX.IMaybeSource? source2, ReactiveX.IMaybeSource? source3, ReactiveX.IMaybeSource? source4) -> ReactiveX.Flowable?
static ReactiveX.Maybe.ConcatArray(params ReactiveX.IMaybeSource![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Maybe.ConcatArrayDelayError(params ReactiveX.IMaybeSource![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Maybe.ConcatArrayEager(params ReactiveX.IMaybeSource![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Maybe.ConcatDelayError(Java.Lang.IIterable? sources) -> ReactiveX.Flowable?
static ReactiveX.Maybe.ConcatDelayError(ReactiveStreams.IPublisher? sources) -> ReactiveX.Flowable?
static ReactiveX.Maybe.ConcatEager(Java.Lang.IIterable? sources) -> ReactiveX.Flowable?
static ReactiveX.Maybe.ConcatEager(ReactiveStreams.IPublisher? sources) -> ReactiveX.Flowable?
static ReactiveX.Maybe.Create(ReactiveX.IMaybeOnSubscribe? onSubscribe) -> ReactiveX.Maybe?
static ReactiveX.Maybe.Defer(Java.Util.Concurrent.ICallable? maybeSupplier) -> ReactiveX.Maybe?
static ReactiveX.Maybe.Empty() -> ReactiveX.Maybe?
static ReactiveX.Maybe.Error(Java.Lang.Throwable? exception) -> ReactiveX.Maybe?
static ReactiveX.Maybe.Error(Java.Util.Concurrent.ICallable? supplier) -> ReactiveX.Maybe?
static ReactiveX.Maybe.FromAction(ReactiveX.Functions.IAction? run) -> ReactiveX.Maybe?
static ReactiveX.Maybe.FromCallable(Java.Util.Concurrent.ICallable? callable) -> ReactiveX.Maybe?
static ReactiveX.Maybe.FromCompletable(ReactiveX.ICompletableSource? completableSource) -> ReactiveX.Maybe?
static ReactiveX.Maybe.FromFuture(Java.Util.Concurrent.IFuture? future) -> ReactiveX.Maybe?
static ReactiveX.Maybe.FromFuture(Java.Util.Concurrent.IFuture? future, long timeout, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Maybe?
static ReactiveX.Maybe.FromRunnable(Java.Lang.IRunnable? run) -> ReactiveX.Maybe?
static ReactiveX.Maybe.FromSingle(ReactiveX.ISingleSource? singleSource) -> ReactiveX.Maybe?
static ReactiveX.Maybe.Just(Java.Lang.Object? item) -> ReactiveX.Maybe?
static ReactiveX.Maybe.Merge(Java.Lang.IIterable? sources) -> ReactiveX.Flowable?
static ReactiveX.Maybe.Merge(ReactiveStreams.IPublisher? sources) -> ReactiveX.Flowable?
static ReactiveX.Maybe.Merge(ReactiveStreams.IPublisher? sources, int maxConcurrency) -> ReactiveX.Flowable?
static ReactiveX.Maybe.Merge(ReactiveX.IMaybeSource? source) -> ReactiveX.Maybe?
static ReactiveX.Maybe.Merge(ReactiveX.IMaybeSource? source1, ReactiveX.IMaybeSource? source2) -> ReactiveX.Flowable?
static ReactiveX.Maybe.Merge(ReactiveX.IMaybeSource? source1, ReactiveX.IMaybeSource? source2, ReactiveX.IMaybeSource? source3) -> ReactiveX.Flowable?
static ReactiveX.Maybe.Merge(ReactiveX.IMaybeSource? source1, ReactiveX.IMaybeSource? source2, ReactiveX.IMaybeSource? source3, ReactiveX.IMaybeSource? source4) -> ReactiveX.Flowable?
static ReactiveX.Maybe.MergeArray(params ReactiveX.IMaybeSource![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Maybe.MergeArrayDelayError(params ReactiveX.IMaybeSource![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Maybe.MergeDelayError(Java.Lang.IIterable? sources) -> ReactiveX.Flowable?
static ReactiveX.Maybe.MergeDelayError(ReactiveStreams.IPublisher? sources) -> ReactiveX.Flowable?
static ReactiveX.Maybe.MergeDelayError(ReactiveStreams.IPublisher? sources, int maxConcurrency) -> ReactiveX.Flowable?
static ReactiveX.Maybe.MergeDelayError(ReactiveX.IMaybeSource? source1, ReactiveX.IMaybeSource? source2) -> ReactiveX.Flowable?
static ReactiveX.Maybe.MergeDelayError(ReactiveX.IMaybeSource? source1, ReactiveX.IMaybeSource? source2, ReactiveX.IMaybeSource? source3) -> ReactiveX.Flowable?
static ReactiveX.Maybe.MergeDelayError(ReactiveX.IMaybeSource? source1, ReactiveX.IMaybeSource? source2, ReactiveX.IMaybeSource? source3, ReactiveX.IMaybeSource? source4) -> ReactiveX.Flowable?
static ReactiveX.Maybe.Never() -> ReactiveX.Maybe?
static ReactiveX.Maybe.SequenceEqual(ReactiveX.IMaybeSource? source1, ReactiveX.IMaybeSource? source2) -> ReactiveX.Single?
static ReactiveX.Maybe.SequenceEqual(ReactiveX.IMaybeSource? source1, ReactiveX.IMaybeSource? source2, ReactiveX.Functions.IBiPredicate? isEqual) -> ReactiveX.Single?
static ReactiveX.Maybe.Timer(long delay, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Maybe?
static ReactiveX.Maybe.Timer(long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Maybe?
static ReactiveX.Maybe.UnsafeCreate(ReactiveX.IMaybeSource? onSubscribe) -> ReactiveX.Maybe?
static ReactiveX.Maybe.Using(Java.Util.Concurrent.ICallable? resourceSupplier, ReactiveX.Functions.IFunction? sourceSupplier, ReactiveX.Functions.IConsumer? resourceDisposer) -> ReactiveX.Maybe?
static ReactiveX.Maybe.Using(Java.Util.Concurrent.ICallable? resourceSupplier, ReactiveX.Functions.IFunction? sourceSupplier, ReactiveX.Functions.IConsumer? resourceDisposer, bool eager) -> ReactiveX.Maybe?
static ReactiveX.Maybe.Wrap(ReactiveX.IMaybeSource? source) -> ReactiveX.Maybe?
static ReactiveX.Maybe.Zip(Java.Lang.IIterable? sources, ReactiveX.Functions.IFunction? zipper) -> ReactiveX.Maybe?
static ReactiveX.Maybe.Zip(ReactiveX.IMaybeSource? source1, ReactiveX.IMaybeSource? source2, ReactiveX.Functions.IBiFunction? zipper) -> ReactiveX.Maybe?
static ReactiveX.Maybe.Zip(ReactiveX.IMaybeSource? source1, ReactiveX.IMaybeSource? source2, ReactiveX.IMaybeSource? source3, ReactiveX.Functions.IFunction3? zipper) -> ReactiveX.Maybe?
static ReactiveX.Maybe.Zip(ReactiveX.IMaybeSource? source1, ReactiveX.IMaybeSource? source2, ReactiveX.IMaybeSource? source3, ReactiveX.IMaybeSource? source4, ReactiveX.Functions.IFunction4? zipper) -> ReactiveX.Maybe?
static ReactiveX.Maybe.Zip(ReactiveX.IMaybeSource? source1, ReactiveX.IMaybeSource? source2, ReactiveX.IMaybeSource? source3, ReactiveX.IMaybeSource? source4, ReactiveX.IMaybeSource? source5, ReactiveX.Functions.IFunction5? zipper) -> ReactiveX.Maybe?
static ReactiveX.Maybe.Zip(ReactiveX.IMaybeSource? source1, ReactiveX.IMaybeSource? source2, ReactiveX.IMaybeSource? source3, ReactiveX.IMaybeSource? source4, ReactiveX.IMaybeSource? source5, ReactiveX.IMaybeSource? source6, ReactiveX.Functions.IFunction6? zipper) -> ReactiveX.Maybe?
static ReactiveX.Maybe.Zip(ReactiveX.IMaybeSource? source1, ReactiveX.IMaybeSource? source2, ReactiveX.IMaybeSource? source3, ReactiveX.IMaybeSource? source4, ReactiveX.IMaybeSource? source5, ReactiveX.IMaybeSource? source6, ReactiveX.IMaybeSource? source7, ReactiveX.Functions.IFunction7? zipper) -> ReactiveX.Maybe?
static ReactiveX.Maybe.Zip(ReactiveX.IMaybeSource? source1, ReactiveX.IMaybeSource? source2, ReactiveX.IMaybeSource? source3, ReactiveX.IMaybeSource? source4, ReactiveX.IMaybeSource? source5, ReactiveX.IMaybeSource? source6, ReactiveX.IMaybeSource? source7, ReactiveX.IMaybeSource? source8, ReactiveX.Functions.IFunction8? zipper) -> ReactiveX.Maybe?
static ReactiveX.Maybe.Zip(ReactiveX.IMaybeSource? source1, ReactiveX.IMaybeSource? source2, ReactiveX.IMaybeSource? source3, ReactiveX.IMaybeSource? source4, ReactiveX.IMaybeSource? source5, ReactiveX.IMaybeSource? source6, ReactiveX.IMaybeSource? source7, ReactiveX.IMaybeSource? source8, ReactiveX.IMaybeSource? source9, ReactiveX.Functions.IFunction9? zipper) -> ReactiveX.Maybe?
static ReactiveX.Maybe.ZipArray(ReactiveX.Functions.IFunction? zipper, params ReactiveX.IMaybeSource![]? sources) -> ReactiveX.Maybe?
static ReactiveX.Notification.CreateOnComplete() -> ReactiveX.Notification?
static ReactiveX.Notification.CreateOnError(Java.Lang.Throwable? error) -> ReactiveX.Notification?
static ReactiveX.Notification.CreateOnNext(Java.Lang.Object? value) -> ReactiveX.Notification?
static ReactiveX.Observable.Amb(Java.Lang.IIterable? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.AmbArray(params ReactiveX.IObservableSource![]? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.BufferSize() -> int
static ReactiveX.Observable.CombineLatest(Java.Lang.IIterable? sources, ReactiveX.Functions.IFunction? combiner) -> ReactiveX.Observable?
static ReactiveX.Observable.CombineLatest(Java.Lang.IIterable? sources, ReactiveX.Functions.IFunction? combiner, int bufferSize) -> ReactiveX.Observable?
static ReactiveX.Observable.CombineLatest(ReactiveX.Functions.IFunction? combiner, int bufferSize, params ReactiveX.IObservableSource![]? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.CombineLatest(ReactiveX.IObservableSource![]? sources, ReactiveX.Functions.IFunction? combiner) -> ReactiveX.Observable?
static ReactiveX.Observable.CombineLatest(ReactiveX.IObservableSource![]? sources, ReactiveX.Functions.IFunction? combiner, int bufferSize) -> ReactiveX.Observable?
static ReactiveX.Observable.CombineLatest(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.Functions.IBiFunction? combiner) -> ReactiveX.Observable?
static ReactiveX.Observable.CombineLatest(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.IObservableSource? source3, ReactiveX.Functions.IFunction3? combiner) -> ReactiveX.Observable?
static ReactiveX.Observable.CombineLatest(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.IObservableSource? source3, ReactiveX.IObservableSource? source4, ReactiveX.Functions.IFunction4? combiner) -> ReactiveX.Observable?
static ReactiveX.Observable.CombineLatest(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.IObservableSource? source3, ReactiveX.IObservableSource? source4, ReactiveX.IObservableSource? source5, ReactiveX.Functions.IFunction5? combiner) -> ReactiveX.Observable?
static ReactiveX.Observable.CombineLatest(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.IObservableSource? source3, ReactiveX.IObservableSource? source4, ReactiveX.IObservableSource? source5, ReactiveX.IObservableSource? source6, ReactiveX.Functions.IFunction6? combiner) -> ReactiveX.Observable?
static ReactiveX.Observable.CombineLatest(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.IObservableSource? source3, ReactiveX.IObservableSource? source4, ReactiveX.IObservableSource? source5, ReactiveX.IObservableSource? source6, ReactiveX.IObservableSource? source7, ReactiveX.Functions.IFunction7? combiner) -> ReactiveX.Observable?
static ReactiveX.Observable.CombineLatest(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.IObservableSource? source3, ReactiveX.IObservableSource? source4, ReactiveX.IObservableSource? source5, ReactiveX.IObservableSource? source6, ReactiveX.IObservableSource? source7, ReactiveX.IObservableSource? source8, ReactiveX.Functions.IFunction8? combiner) -> ReactiveX.Observable?
static ReactiveX.Observable.CombineLatest(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.IObservableSource? source3, ReactiveX.IObservableSource? source4, ReactiveX.IObservableSource? source5, ReactiveX.IObservableSource? source6, ReactiveX.IObservableSource? source7, ReactiveX.IObservableSource? source8, ReactiveX.IObservableSource? source9, ReactiveX.Functions.IFunction9? combiner) -> ReactiveX.Observable?
static ReactiveX.Observable.CombineLatestDelayError(Java.Lang.IIterable? sources, ReactiveX.Functions.IFunction? combiner) -> ReactiveX.Observable?
static ReactiveX.Observable.CombineLatestDelayError(Java.Lang.IIterable? sources, ReactiveX.Functions.IFunction? combiner, int bufferSize) -> ReactiveX.Observable?
static ReactiveX.Observable.CombineLatestDelayError(ReactiveX.Functions.IFunction? combiner, int bufferSize, params ReactiveX.IObservableSource![]? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.CombineLatestDelayError(ReactiveX.IObservableSource![]? sources, ReactiveX.Functions.IFunction? combiner) -> ReactiveX.Observable?
static ReactiveX.Observable.CombineLatestDelayError(ReactiveX.IObservableSource![]? sources, ReactiveX.Functions.IFunction? combiner, int bufferSize) -> ReactiveX.Observable?
static ReactiveX.Observable.Concat(Java.Lang.IIterable? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.Concat(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2) -> ReactiveX.Observable?
static ReactiveX.Observable.Concat(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.IObservableSource? source3) -> ReactiveX.Observable?
static ReactiveX.Observable.Concat(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.IObservableSource? source3, ReactiveX.IObservableSource? source4) -> ReactiveX.Observable?
static ReactiveX.Observable.Concat(ReactiveX.IObservableSource? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.Concat(ReactiveX.IObservableSource? sources, int prefetch) -> ReactiveX.Observable?
static ReactiveX.Observable.ConcatArray(params ReactiveX.IObservableSource![]? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.ConcatArrayDelayError(params ReactiveX.IObservableSource![]? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.ConcatArrayEager(int maxConcurrency, int prefetch, params ReactiveX.IObservableSource![]? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.ConcatArrayEager(params ReactiveX.IObservableSource![]? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.ConcatArrayEagerDelayError(int maxConcurrency, int prefetch, params ReactiveX.IObservableSource![]? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.ConcatArrayEagerDelayError(params ReactiveX.IObservableSource![]? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.ConcatDelayError(Java.Lang.IIterable? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.ConcatDelayError(ReactiveX.IObservableSource? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.ConcatDelayError(ReactiveX.IObservableSource? sources, int prefetch, bool tillTheEnd) -> ReactiveX.Observable?
static ReactiveX.Observable.ConcatEager(Java.Lang.IIterable? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.ConcatEager(Java.Lang.IIterable? sources, int maxConcurrency, int prefetch) -> ReactiveX.Observable?
static ReactiveX.Observable.ConcatEager(ReactiveX.IObservableSource? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.ConcatEager(ReactiveX.IObservableSource? sources, int maxConcurrency, int prefetch) -> ReactiveX.Observable?
static ReactiveX.Observable.Create(ReactiveX.IObservableOnSubscribe? source) -> ReactiveX.Observable?
static ReactiveX.Observable.Defer(Java.Util.Concurrent.ICallable? supplier) -> ReactiveX.Observable?
static ReactiveX.Observable.Empty() -> ReactiveX.Observable?
static ReactiveX.Observable.Error(Java.Lang.Throwable? exception) -> ReactiveX.Observable?
static ReactiveX.Observable.Error(Java.Util.Concurrent.ICallable? errorSupplier) -> ReactiveX.Observable?
static ReactiveX.Observable.FromArray(params Java.Lang.Object![]? items) -> ReactiveX.Observable?
static ReactiveX.Observable.FromCallable(Java.Util.Concurrent.ICallable? supplier) -> ReactiveX.Observable?
static ReactiveX.Observable.FromFuture(Java.Util.Concurrent.IFuture? future) -> ReactiveX.Observable?
static ReactiveX.Observable.FromFuture(Java.Util.Concurrent.IFuture? future, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
static ReactiveX.Observable.FromFuture(Java.Util.Concurrent.IFuture? future, long timeout, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
static ReactiveX.Observable.FromFuture(Java.Util.Concurrent.IFuture? future, long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
static ReactiveX.Observable.FromIterable(Java.Lang.IIterable? source) -> ReactiveX.Observable?
static ReactiveX.Observable.FromPublisher(ReactiveStreams.IPublisher? publisher) -> ReactiveX.Observable?
static ReactiveX.Observable.Generate(Java.Util.Concurrent.ICallable? initialState, ReactiveX.Functions.IBiConsumer? generator) -> ReactiveX.Observable?
static ReactiveX.Observable.Generate(Java.Util.Concurrent.ICallable? initialState, ReactiveX.Functions.IBiConsumer? generator, ReactiveX.Functions.IConsumer? disposeState) -> ReactiveX.Observable?
static ReactiveX.Observable.Generate(Java.Util.Concurrent.ICallable? initialState, ReactiveX.Functions.IBiFunction? generator) -> ReactiveX.Observable?
static ReactiveX.Observable.Generate(Java.Util.Concurrent.ICallable? initialState, ReactiveX.Functions.IBiFunction? generator, ReactiveX.Functions.IConsumer? disposeState) -> ReactiveX.Observable?
static ReactiveX.Observable.Generate(ReactiveX.Functions.IConsumer? generator) -> ReactiveX.Observable?
static ReactiveX.Observable.Interval(long initialDelay, long period, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
static ReactiveX.Observable.Interval(long initialDelay, long period, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
static ReactiveX.Observable.Interval(long period, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
static ReactiveX.Observable.Interval(long period, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
static ReactiveX.Observable.IntervalRange(long start, long count, long initialDelay, long period, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
static ReactiveX.Observable.IntervalRange(long start, long count, long initialDelay, long period, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
static ReactiveX.Observable.Just(Java.Lang.Object? item) -> ReactiveX.Observable?
static ReactiveX.Observable.Just(Java.Lang.Object? item1, Java.Lang.Object? item2) -> ReactiveX.Observable?
static ReactiveX.Observable.Just(Java.Lang.Object? item1, Java.Lang.Object? item2, Java.Lang.Object? item3) -> ReactiveX.Observable?
static ReactiveX.Observable.Just(Java.Lang.Object? item1, Java.Lang.Object? item2, Java.Lang.Object? item3, Java.Lang.Object? item4) -> ReactiveX.Observable?
static ReactiveX.Observable.Just(Java.Lang.Object? item1, Java.Lang.Object? item2, Java.Lang.Object? item3, Java.Lang.Object? item4, Java.Lang.Object? item5) -> ReactiveX.Observable?
static ReactiveX.Observable.Just(Java.Lang.Object? item1, Java.Lang.Object? item2, Java.Lang.Object? item3, Java.Lang.Object? item4, Java.Lang.Object? item5, Java.Lang.Object? item6) -> ReactiveX.Observable?
static ReactiveX.Observable.Just(Java.Lang.Object? item1, Java.Lang.Object? item2, Java.Lang.Object? item3, Java.Lang.Object? item4, Java.Lang.Object? item5, Java.Lang.Object? item6, Java.Lang.Object? item7) -> ReactiveX.Observable?
static ReactiveX.Observable.Just(Java.Lang.Object? item1, Java.Lang.Object? item2, Java.Lang.Object? item3, Java.Lang.Object? item4, Java.Lang.Object? item5, Java.Lang.Object? item6, Java.Lang.Object? item7, Java.Lang.Object? item8) -> ReactiveX.Observable?
static ReactiveX.Observable.Just(Java.Lang.Object? item1, Java.Lang.Object? item2, Java.Lang.Object? item3, Java.Lang.Object? item4, Java.Lang.Object? item5, Java.Lang.Object? item6, Java.Lang.Object? item7, Java.Lang.Object? item8, Java.Lang.Object? item9) -> ReactiveX.Observable?
static ReactiveX.Observable.Just(Java.Lang.Object? item1, Java.Lang.Object? item2, Java.Lang.Object? item3, Java.Lang.Object? item4, Java.Lang.Object? item5, Java.Lang.Object? item6, Java.Lang.Object? item7, Java.Lang.Object? item8, Java.Lang.Object? item9, Java.Lang.Object? item10) -> ReactiveX.Observable?
static ReactiveX.Observable.Merge(Java.Lang.IIterable? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.Merge(Java.Lang.IIterable? sources, int maxConcurrency) -> ReactiveX.Observable?
static ReactiveX.Observable.Merge(Java.Lang.IIterable? sources, int maxConcurrency, int bufferSize) -> ReactiveX.Observable?
static ReactiveX.Observable.Merge(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2) -> ReactiveX.Observable?
static ReactiveX.Observable.Merge(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.IObservableSource? source3) -> ReactiveX.Observable?
static ReactiveX.Observable.Merge(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.IObservableSource? source3, ReactiveX.IObservableSource? source4) -> ReactiveX.Observable?
static ReactiveX.Observable.Merge(ReactiveX.IObservableSource? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.Merge(ReactiveX.IObservableSource? sources, int maxConcurrency) -> ReactiveX.Observable?
static ReactiveX.Observable.MergeArray(int maxConcurrency, int bufferSize, params ReactiveX.IObservableSource![]? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.MergeArray(params ReactiveX.IObservableSource![]? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.MergeArrayDelayError(int maxConcurrency, int bufferSize, params ReactiveX.IObservableSource![]? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.MergeArrayDelayError(params ReactiveX.IObservableSource![]? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.MergeDelayError(Java.Lang.IIterable? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.MergeDelayError(Java.Lang.IIterable? sources, int maxConcurrency) -> ReactiveX.Observable?
static ReactiveX.Observable.MergeDelayError(Java.Lang.IIterable? sources, int maxConcurrency, int bufferSize) -> ReactiveX.Observable?
static ReactiveX.Observable.MergeDelayError(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2) -> ReactiveX.Observable?
static ReactiveX.Observable.MergeDelayError(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.IObservableSource? source3) -> ReactiveX.Observable?
static ReactiveX.Observable.MergeDelayError(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.IObservableSource? source3, ReactiveX.IObservableSource? source4) -> ReactiveX.Observable?
static ReactiveX.Observable.MergeDelayError(ReactiveX.IObservableSource? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.MergeDelayError(ReactiveX.IObservableSource? sources, int maxConcurrency) -> ReactiveX.Observable?
static ReactiveX.Observable.Never() -> ReactiveX.Observable?
static ReactiveX.Observable.Range(int start, int count) -> ReactiveX.Observable?
static ReactiveX.Observable.RangeLong(long start, long count) -> ReactiveX.Observable?
static ReactiveX.Observable.SequenceEqual(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2) -> ReactiveX.Single?
static ReactiveX.Observable.SequenceEqual(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.Functions.IBiPredicate? isEqual) -> ReactiveX.Single?
static ReactiveX.Observable.SequenceEqual(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.Functions.IBiPredicate? isEqual, int bufferSize) -> ReactiveX.Single?
static ReactiveX.Observable.SequenceEqual(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, int bufferSize) -> ReactiveX.Single?
static ReactiveX.Observable.SwitchOnNext(ReactiveX.IObservableSource? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.SwitchOnNext(ReactiveX.IObservableSource? sources, int bufferSize) -> ReactiveX.Observable?
static ReactiveX.Observable.SwitchOnNextDelayError(ReactiveX.IObservableSource? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.SwitchOnNextDelayError(ReactiveX.IObservableSource? sources, int prefetch) -> ReactiveX.Observable?
static ReactiveX.Observable.Timer(long delay, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Observable?
static ReactiveX.Observable.Timer(long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Observable?
static ReactiveX.Observable.UnsafeCreate(ReactiveX.IObservableSource? onSubscribe) -> ReactiveX.Observable?
static ReactiveX.Observable.Using(Java.Util.Concurrent.ICallable? resourceSupplier, ReactiveX.Functions.IFunction? sourceSupplier, ReactiveX.Functions.IConsumer? disposer) -> ReactiveX.Observable?
static ReactiveX.Observable.Using(Java.Util.Concurrent.ICallable? resourceSupplier, ReactiveX.Functions.IFunction? sourceSupplier, ReactiveX.Functions.IConsumer? disposer, bool eager) -> ReactiveX.Observable?
static ReactiveX.Observable.Wrap(ReactiveX.IObservableSource? source) -> ReactiveX.Observable?
static ReactiveX.Observable.Zip(Java.Lang.IIterable? sources, ReactiveX.Functions.IFunction? zipper) -> ReactiveX.Observable?
static ReactiveX.Observable.Zip(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.Functions.IBiFunction? zipper) -> ReactiveX.Observable?
static ReactiveX.Observable.Zip(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.Functions.IBiFunction? zipper, bool delayError) -> ReactiveX.Observable?
static ReactiveX.Observable.Zip(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.Functions.IBiFunction? zipper, bool delayError, int bufferSize) -> ReactiveX.Observable?
static ReactiveX.Observable.Zip(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.IObservableSource? source3, ReactiveX.Functions.IFunction3? zipper) -> ReactiveX.Observable?
static ReactiveX.Observable.Zip(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.IObservableSource? source3, ReactiveX.IObservableSource? source4, ReactiveX.Functions.IFunction4? zipper) -> ReactiveX.Observable?
static ReactiveX.Observable.Zip(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.IObservableSource? source3, ReactiveX.IObservableSource? source4, ReactiveX.IObservableSource? source5, ReactiveX.Functions.IFunction5? zipper) -> ReactiveX.Observable?
static ReactiveX.Observable.Zip(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.IObservableSource? source3, ReactiveX.IObservableSource? source4, ReactiveX.IObservableSource? source5, ReactiveX.IObservableSource? source6, ReactiveX.Functions.IFunction6? zipper) -> ReactiveX.Observable?
static ReactiveX.Observable.Zip(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.IObservableSource? source3, ReactiveX.IObservableSource? source4, ReactiveX.IObservableSource? source5, ReactiveX.IObservableSource? source6, ReactiveX.IObservableSource? source7, ReactiveX.Functions.IFunction7? zipper) -> ReactiveX.Observable?
static ReactiveX.Observable.Zip(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.IObservableSource? source3, ReactiveX.IObservableSource? source4, ReactiveX.IObservableSource? source5, ReactiveX.IObservableSource? source6, ReactiveX.IObservableSource? source7, ReactiveX.IObservableSource? source8, ReactiveX.Functions.IFunction8? zipper) -> ReactiveX.Observable?
static ReactiveX.Observable.Zip(ReactiveX.IObservableSource? source1, ReactiveX.IObservableSource? source2, ReactiveX.IObservableSource? source3, ReactiveX.IObservableSource? source4, ReactiveX.IObservableSource? source5, ReactiveX.IObservableSource? source6, ReactiveX.IObservableSource? source7, ReactiveX.IObservableSource? source8, ReactiveX.IObservableSource? source9, ReactiveX.Functions.IFunction9? zipper) -> ReactiveX.Observable?
static ReactiveX.Observable.Zip(ReactiveX.IObservableSource? sources, ReactiveX.Functions.IFunction? zipper) -> ReactiveX.Observable?
static ReactiveX.Observable.ZipArray(ReactiveX.Functions.IFunction? zipper, bool delayError, int bufferSize, params ReactiveX.IObservableSource![]? sources) -> ReactiveX.Observable?
static ReactiveX.Observable.ZipIterable(Java.Lang.IIterable? sources, ReactiveX.Functions.IFunction? zipper, bool delayError, int bufferSize) -> ReactiveX.Observable?
static ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy.Sleep1000ms.get -> ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy?
static ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy.Sleep100ms.get -> ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy?
static ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy.Sleep10ms.get -> ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy?
static ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy.Sleep1ms.get -> ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy?
static ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy.Spin.get -> ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy?
static ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy.ValueOf(string? name) -> ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy?
static ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy.Values() -> ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy![]?
static ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy.Yield.get -> ReactiveX.Observers.BaseTestConsumer.TestWaitStrategy?
static ReactiveX.Observers.BaseTestConsumer.ValueAndClass(Java.Lang.Object? o) -> string?
static ReactiveX.Observers.TestObserver.Create() -> ReactiveX.Observers.TestObserver?
static ReactiveX.Observers.TestObserver.Create(ReactiveX.IObserver? delegate) -> ReactiveX.Observers.TestObserver?
static ReactiveX.Parallel.ParallelFailureHandling.Error.get -> ReactiveX.Parallel.ParallelFailureHandling?
static ReactiveX.Parallel.ParallelFailureHandling.Retry.get -> ReactiveX.Parallel.ParallelFailureHandling?
static ReactiveX.Parallel.ParallelFailureHandling.Skip.get -> ReactiveX.Parallel.ParallelFailureHandling?
static ReactiveX.Parallel.ParallelFailureHandling.Stop.get -> ReactiveX.Parallel.ParallelFailureHandling?
static ReactiveX.Parallel.ParallelFailureHandling.ValueOf(string? name) -> ReactiveX.Parallel.ParallelFailureHandling?
static ReactiveX.Parallel.ParallelFailureHandling.Values() -> ReactiveX.Parallel.ParallelFailureHandling![]?
static ReactiveX.Parallel.ParallelFlowable.From(ReactiveStreams.IPublisher? source) -> ReactiveX.Parallel.ParallelFlowable?
static ReactiveX.Parallel.ParallelFlowable.From(ReactiveStreams.IPublisher? source, int parallelism) -> ReactiveX.Parallel.ParallelFlowable?
static ReactiveX.Parallel.ParallelFlowable.From(ReactiveStreams.IPublisher? source, int parallelism, int prefetch) -> ReactiveX.Parallel.ParallelFlowable?
static ReactiveX.Parallel.ParallelFlowable.FromArray(params ReactiveStreams.IPublisher![]? publishers) -> ReactiveX.Parallel.ParallelFlowable?
static ReactiveX.Plugins.RxJavaPlugins.ComputationSchedulerHandler.get -> ReactiveX.Functions.IFunction?
static ReactiveX.Plugins.RxJavaPlugins.ComputationSchedulerHandler.set -> void
static ReactiveX.Plugins.RxJavaPlugins.CreateComputationScheduler(Java.Util.Concurrent.IThreadFactory? threadFactory) -> ReactiveX.Scheduler?
static ReactiveX.Plugins.RxJavaPlugins.CreateIoScheduler(Java.Util.Concurrent.IThreadFactory? threadFactory) -> ReactiveX.Scheduler?
static ReactiveX.Plugins.RxJavaPlugins.CreateNewThreadScheduler(Java.Util.Concurrent.IThreadFactory? threadFactory) -> ReactiveX.Scheduler?
static ReactiveX.Plugins.RxJavaPlugins.CreateSingleScheduler(Java.Util.Concurrent.IThreadFactory? threadFactory) -> ReactiveX.Scheduler?
static ReactiveX.Plugins.RxJavaPlugins.ErrorHandler.get -> ReactiveX.Functions.IConsumer?
static ReactiveX.Plugins.RxJavaPlugins.ErrorHandler.set -> void
static ReactiveX.Plugins.RxJavaPlugins.FailOnNonBlockingScheduler.get -> bool
static ReactiveX.Plugins.RxJavaPlugins.FailOnNonBlockingScheduler.set -> void
static ReactiveX.Plugins.RxJavaPlugins.InitComputationScheduler(Java.Util.Concurrent.ICallable? defaultScheduler) -> ReactiveX.Scheduler?
static ReactiveX.Plugins.RxJavaPlugins.InitComputationSchedulerHandler.get -> ReactiveX.Functions.IFunction?
static ReactiveX.Plugins.RxJavaPlugins.InitComputationSchedulerHandler.set -> void
static ReactiveX.Plugins.RxJavaPlugins.InitIoScheduler(Java.Util.Concurrent.ICallable? defaultScheduler) -> ReactiveX.Scheduler?
static ReactiveX.Plugins.RxJavaPlugins.InitIoSchedulerHandler.get -> ReactiveX.Functions.IFunction?
static ReactiveX.Plugins.RxJavaPlugins.InitIoSchedulerHandler.set -> void
static ReactiveX.Plugins.RxJavaPlugins.InitNewThreadScheduler(Java.Util.Concurrent.ICallable? defaultScheduler) -> ReactiveX.Scheduler?
static ReactiveX.Plugins.RxJavaPlugins.InitNewThreadSchedulerHandler.get -> ReactiveX.Functions.IFunction?
static ReactiveX.Plugins.RxJavaPlugins.InitNewThreadSchedulerHandler.set -> void
static ReactiveX.Plugins.RxJavaPlugins.InitSingleScheduler(Java.Util.Concurrent.ICallable? defaultScheduler) -> ReactiveX.Scheduler?
static ReactiveX.Plugins.RxJavaPlugins.InitSingleSchedulerHandler.get -> ReactiveX.Functions.IFunction?
static ReactiveX.Plugins.RxJavaPlugins.InitSingleSchedulerHandler.set -> void
static ReactiveX.Plugins.RxJavaPlugins.InvokeOnBeforeBlocking() -> bool
static ReactiveX.Plugins.RxJavaPlugins.IoSchedulerHandler.get -> ReactiveX.Functions.IFunction?
static ReactiveX.Plugins.RxJavaPlugins.IoSchedulerHandler.set -> void
static ReactiveX.Plugins.RxJavaPlugins.IsLockdown.get -> bool
static ReactiveX.Plugins.RxJavaPlugins.Lockdown() -> void
static ReactiveX.Plugins.RxJavaPlugins.NewThreadSchedulerHandler.get -> ReactiveX.Functions.IFunction?
static ReactiveX.Plugins.RxJavaPlugins.NewThreadSchedulerHandler.set -> void
static ReactiveX.Plugins.RxJavaPlugins.OnAssembly(ReactiveX.Completable? source) -> ReactiveX.Completable?
static ReactiveX.Plugins.RxJavaPlugins.OnAssembly(ReactiveX.Flowable? source) -> ReactiveX.Flowable?
static ReactiveX.Plugins.RxJavaPlugins.OnAssembly(ReactiveX.Flowables.ConnectableFlowable? source) -> ReactiveX.Flowables.ConnectableFlowable?
static ReactiveX.Plugins.RxJavaPlugins.OnAssembly(ReactiveX.Maybe? source) -> ReactiveX.Maybe?
static ReactiveX.Plugins.RxJavaPlugins.OnAssembly(ReactiveX.Observable? source) -> ReactiveX.Observable?
static ReactiveX.Plugins.RxJavaPlugins.OnAssembly(ReactiveX.Observables.ConnectableObservable? source) -> ReactiveX.Observables.ConnectableObservable?
static ReactiveX.Plugins.RxJavaPlugins.OnAssembly(ReactiveX.Parallel.ParallelFlowable? source) -> ReactiveX.Parallel.ParallelFlowable?
static ReactiveX.Plugins.RxJavaPlugins.OnAssembly(ReactiveX.Single? source) -> ReactiveX.Single?
static ReactiveX.Plugins.RxJavaPlugins.OnBeforeBlocking.get -> ReactiveX.Functions.IBooleanSupplier?
static ReactiveX.Plugins.RxJavaPlugins.OnBeforeBlocking.set -> void
static ReactiveX.Plugins.RxJavaPlugins.OnCompletableAssembly.get -> ReactiveX.Functions.IFunction?
static ReactiveX.Plugins.RxJavaPlugins.OnCompletableAssembly.set -> void
static ReactiveX.Plugins.RxJavaPlugins.OnCompletableSubscribe.get -> ReactiveX.Functions.IBiFunction?
static ReactiveX.Plugins.RxJavaPlugins.OnCompletableSubscribe.set -> void
static ReactiveX.Plugins.RxJavaPlugins.OnComputationScheduler(ReactiveX.Scheduler? defaultScheduler) -> ReactiveX.Scheduler?
static ReactiveX.Plugins.RxJavaPlugins.OnConnectableFlowableAssembly.get -> ReactiveX.Functions.IFunction?
static ReactiveX.Plugins.RxJavaPlugins.OnConnectableFlowableAssembly.set -> void
static ReactiveX.Plugins.RxJavaPlugins.OnConnectableObservableAssembly.get -> ReactiveX.Functions.IFunction?
static ReactiveX.Plugins.RxJavaPlugins.OnConnectableObservableAssembly.set -> void
static ReactiveX.Plugins.RxJavaPlugins.OnError(Java.Lang.Throwable? error) -> void
static ReactiveX.Plugins.RxJavaPlugins.OnFlowableAssembly.get -> ReactiveX.Functions.IFunction?
static ReactiveX.Plugins.RxJavaPlugins.OnFlowableAssembly.set -> void
static ReactiveX.Plugins.RxJavaPlugins.OnFlowableSubscribe.get -> ReactiveX.Functions.IBiFunction?
static ReactiveX.Plugins.RxJavaPlugins.OnFlowableSubscribe.set -> void
static ReactiveX.Plugins.RxJavaPlugins.OnIoScheduler(ReactiveX.Scheduler? defaultScheduler) -> ReactiveX.Scheduler?
static ReactiveX.Plugins.RxJavaPlugins.OnMaybeAssembly.get -> ReactiveX.Functions.IFunction?
static ReactiveX.Plugins.RxJavaPlugins.OnMaybeAssembly.set -> void
static ReactiveX.Plugins.RxJavaPlugins.OnMaybeSubscribe.get -> ReactiveX.Functions.IBiFunction?
static ReactiveX.Plugins.RxJavaPlugins.OnMaybeSubscribe.set -> void
static ReactiveX.Plugins.RxJavaPlugins.OnNewThreadScheduler(ReactiveX.Scheduler? defaultScheduler) -> ReactiveX.Scheduler?
static ReactiveX.Plugins.RxJavaPlugins.OnObservableAssembly.get -> ReactiveX.Functions.IFunction?
static ReactiveX.Plugins.RxJavaPlugins.OnObservableAssembly.set -> void
static ReactiveX.Plugins.RxJavaPlugins.OnObservableSubscribe.get -> ReactiveX.Functions.IBiFunction?
static ReactiveX.Plugins.RxJavaPlugins.OnObservableSubscribe.set -> void
static ReactiveX.Plugins.RxJavaPlugins.OnParallelAssembly.get -> ReactiveX.Functions.IFunction?
static ReactiveX.Plugins.RxJavaPlugins.OnParallelAssembly.set -> void
static ReactiveX.Plugins.RxJavaPlugins.OnSchedule(Java.Lang.IRunnable? run) -> Java.Lang.IRunnable?
static ReactiveX.Plugins.RxJavaPlugins.OnSingleAssembly.get -> ReactiveX.Functions.IFunction?
static ReactiveX.Plugins.RxJavaPlugins.OnSingleAssembly.set -> void
static ReactiveX.Plugins.RxJavaPlugins.OnSingleScheduler(ReactiveX.Scheduler? defaultScheduler) -> ReactiveX.Scheduler?
static ReactiveX.Plugins.RxJavaPlugins.OnSingleSubscribe.get -> ReactiveX.Functions.IBiFunction?
static ReactiveX.Plugins.RxJavaPlugins.OnSingleSubscribe.set -> void
static ReactiveX.Plugins.RxJavaPlugins.OnSubscribe(ReactiveX.Completable? source, ReactiveX.ICompletableObserver? observer) -> ReactiveX.ICompletableObserver?
static ReactiveX.Plugins.RxJavaPlugins.OnSubscribe(ReactiveX.Flowable? source, ReactiveStreams.ISubscriber? subscriber) -> ReactiveStreams.ISubscriber?
static ReactiveX.Plugins.RxJavaPlugins.OnSubscribe(ReactiveX.Maybe? source, ReactiveX.IMaybeObserver? observer) -> ReactiveX.IMaybeObserver?
static ReactiveX.Plugins.RxJavaPlugins.OnSubscribe(ReactiveX.Observable? source, ReactiveX.IObserver? observer) -> ReactiveX.IObserver?
static ReactiveX.Plugins.RxJavaPlugins.OnSubscribe(ReactiveX.Single? source, ReactiveX.ISingleObserver? observer) -> ReactiveX.ISingleObserver?
static ReactiveX.Plugins.RxJavaPlugins.Reset() -> void
static ReactiveX.Plugins.RxJavaPlugins.ScheduleHandler.get -> ReactiveX.Functions.IFunction?
static ReactiveX.Plugins.RxJavaPlugins.ScheduleHandler.set -> void
static ReactiveX.Plugins.RxJavaPlugins.SingleSchedulerHandler.get -> ReactiveX.Functions.IFunction?
static ReactiveX.Plugins.RxJavaPlugins.SingleSchedulerHandler.set -> void
static ReactiveX.Processors.AsyncProcessor.Create() -> ReactiveX.Processors.AsyncProcessor?
static ReactiveX.Processors.BehaviorProcessor.Create() -> ReactiveX.Processors.BehaviorProcessor?
static ReactiveX.Processors.BehaviorProcessor.CreateDefault(Java.Lang.Object? defaultValue) -> ReactiveX.Processors.BehaviorProcessor?
static ReactiveX.Processors.MulticastProcessor.Create() -> ReactiveX.Processors.MulticastProcessor?
static ReactiveX.Processors.MulticastProcessor.Create(bool refCount) -> ReactiveX.Processors.MulticastProcessor?
static ReactiveX.Processors.MulticastProcessor.Create(int bufferSize) -> ReactiveX.Processors.MulticastProcessor?
static ReactiveX.Processors.MulticastProcessor.Create(int bufferSize, bool refCount) -> ReactiveX.Processors.MulticastProcessor?
static ReactiveX.Processors.PublishProcessor.Create() -> ReactiveX.Processors.PublishProcessor?
static ReactiveX.Processors.ReplayProcessor.Create() -> ReactiveX.Processors.ReplayProcessor?
static ReactiveX.Processors.ReplayProcessor.Create(int capacityHint) -> ReactiveX.Processors.ReplayProcessor?
static ReactiveX.Processors.ReplayProcessor.CreateWithSize(int maxSize) -> ReactiveX.Processors.ReplayProcessor?
static ReactiveX.Processors.ReplayProcessor.CreateWithTime(long maxAge, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Processors.ReplayProcessor?
static ReactiveX.Processors.ReplayProcessor.CreateWithTimeAndSize(long maxAge, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, int maxSize) -> ReactiveX.Processors.ReplayProcessor?
static ReactiveX.Processors.UnicastProcessor.Create() -> ReactiveX.Processors.UnicastProcessor?
static ReactiveX.Processors.UnicastProcessor.Create(bool delayError) -> ReactiveX.Processors.UnicastProcessor?
static ReactiveX.Processors.UnicastProcessor.Create(int capacityHint) -> ReactiveX.Processors.UnicastProcessor?
static ReactiveX.Processors.UnicastProcessor.Create(int capacityHint, Java.Lang.IRunnable? onCancelled) -> ReactiveX.Processors.UnicastProcessor?
static ReactiveX.Processors.UnicastProcessor.Create(int capacityHint, Java.Lang.IRunnable? onCancelled, bool delayError) -> ReactiveX.Processors.UnicastProcessor?
static ReactiveX.Scheduler.ClockDriftTolerance() -> long
static ReactiveX.Schedulers.Schedulers.Computation() -> ReactiveX.Scheduler?
static ReactiveX.Schedulers.Schedulers.From(Java.Util.Concurrent.IExecutor? executor) -> ReactiveX.Scheduler?
static ReactiveX.Schedulers.Schedulers.From(Java.Util.Concurrent.IExecutor? executor, bool interruptibleWorker) -> ReactiveX.Scheduler?
static ReactiveX.Schedulers.Schedulers.Io() -> ReactiveX.Scheduler?
static ReactiveX.Schedulers.Schedulers.NewThread() -> ReactiveX.Scheduler?
static ReactiveX.Schedulers.Schedulers.Shutdown() -> void
static ReactiveX.Schedulers.Schedulers.Single() -> ReactiveX.Scheduler?
static ReactiveX.Schedulers.Schedulers.Start() -> void
static ReactiveX.Schedulers.Schedulers.Trampoline() -> ReactiveX.Scheduler?
static ReactiveX.Single.Amb(Java.Lang.IIterable? sources) -> ReactiveX.Single?
static ReactiveX.Single.AmbArray(params ReactiveX.ISingleSource![]? sources) -> ReactiveX.Single?
static ReactiveX.Single.Concat(Java.Lang.IIterable? sources) -> ReactiveX.Flowable?
static ReactiveX.Single.Concat(ReactiveStreams.IPublisher? sources) -> ReactiveX.Flowable?
static ReactiveX.Single.Concat(ReactiveStreams.IPublisher? sources, int prefetch) -> ReactiveX.Flowable?
static ReactiveX.Single.Concat(ReactiveX.IObservableSource? sources) -> ReactiveX.Observable?
static ReactiveX.Single.Concat(ReactiveX.ISingleSource? source1, ReactiveX.ISingleSource? source2) -> ReactiveX.Flowable?
static ReactiveX.Single.Concat(ReactiveX.ISingleSource? source1, ReactiveX.ISingleSource? source2, ReactiveX.ISingleSource? source3) -> ReactiveX.Flowable?
static ReactiveX.Single.Concat(ReactiveX.ISingleSource? source1, ReactiveX.ISingleSource? source2, ReactiveX.ISingleSource? source3, ReactiveX.ISingleSource? source4) -> ReactiveX.Flowable?
static ReactiveX.Single.ConcatArray(params ReactiveX.ISingleSource![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Single.ConcatArrayEager(params ReactiveX.ISingleSource![]? sources) -> ReactiveX.Flowable?
static ReactiveX.Single.ConcatEager(Java.Lang.IIterable? sources) -> ReactiveX.Flowable?
static ReactiveX.Single.ConcatEager(ReactiveStreams.IPublisher? sources) -> ReactiveX.Flowable?
static ReactiveX.Single.Create(ReactiveX.ISingleOnSubscribe? source) -> ReactiveX.Single?
static ReactiveX.Single.Defer(Java.Util.Concurrent.ICallable? singleSupplier) -> ReactiveX.Single?
static ReactiveX.Single.Equals(ReactiveX.ISingleSource? first, ReactiveX.ISingleSource? second) -> ReactiveX.Single?
static ReactiveX.Single.Error(Java.Lang.Throwable? exception) -> ReactiveX.Single?
static ReactiveX.Single.Error(Java.Util.Concurrent.ICallable? errorSupplier) -> ReactiveX.Single?
static ReactiveX.Single.FromCallable(Java.Util.Concurrent.ICallable? callable) -> ReactiveX.Single?
static ReactiveX.Single.FromFuture(Java.Util.Concurrent.IFuture? future) -> ReactiveX.Single?
static ReactiveX.Single.FromFuture(Java.Util.Concurrent.IFuture? future, ReactiveX.Scheduler? scheduler) -> ReactiveX.Single?
static ReactiveX.Single.FromFuture(Java.Util.Concurrent.IFuture? future, long timeout, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Single?
static ReactiveX.Single.FromFuture(Java.Util.Concurrent.IFuture? future, long timeout, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Single?
static ReactiveX.Single.FromObservable(ReactiveX.IObservableSource? observableSource) -> ReactiveX.Single?
static ReactiveX.Single.FromPublisher(ReactiveStreams.IPublisher? publisher) -> ReactiveX.Single?
static ReactiveX.Single.Just(Java.Lang.Object? item) -> ReactiveX.Single?
static ReactiveX.Single.Merge(Java.Lang.IIterable? sources) -> ReactiveX.Flowable?
static ReactiveX.Single.Merge(ReactiveStreams.IPublisher? sources) -> ReactiveX.Flowable?
static ReactiveX.Single.Merge(ReactiveX.ISingleSource? source) -> ReactiveX.Single?
static ReactiveX.Single.Merge(ReactiveX.ISingleSource? source1, ReactiveX.ISingleSource? source2) -> ReactiveX.Flowable?
static ReactiveX.Single.Merge(ReactiveX.ISingleSource? source1, ReactiveX.ISingleSource? source2, ReactiveX.ISingleSource? source3) -> ReactiveX.Flowable?
static ReactiveX.Single.Merge(ReactiveX.ISingleSource? source1, ReactiveX.ISingleSource? source2, ReactiveX.ISingleSource? source3, ReactiveX.ISingleSource? source4) -> ReactiveX.Flowable?
static ReactiveX.Single.MergeDelayError(Java.Lang.IIterable? sources) -> ReactiveX.Flowable?
static ReactiveX.Single.MergeDelayError(ReactiveStreams.IPublisher? sources) -> ReactiveX.Flowable?
static ReactiveX.Single.MergeDelayError(ReactiveX.ISingleSource? source1, ReactiveX.ISingleSource? source2) -> ReactiveX.Flowable?
static ReactiveX.Single.MergeDelayError(ReactiveX.ISingleSource? source1, ReactiveX.ISingleSource? source2, ReactiveX.ISingleSource? source3) -> ReactiveX.Flowable?
static ReactiveX.Single.MergeDelayError(ReactiveX.ISingleSource? source1, ReactiveX.ISingleSource? source2, ReactiveX.ISingleSource? source3, ReactiveX.ISingleSource? source4) -> ReactiveX.Flowable?
static ReactiveX.Single.Never() -> ReactiveX.Single?
static ReactiveX.Single.Timer(long delay, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Single?
static ReactiveX.Single.Timer(long delay, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Single?
static ReactiveX.Single.UnsafeCreate(ReactiveX.ISingleSource? onSubscribe) -> ReactiveX.Single?
static ReactiveX.Single.Using(Java.Util.Concurrent.ICallable? resourceSupplier, ReactiveX.Functions.IFunction? singleFunction, ReactiveX.Functions.IConsumer? disposer) -> ReactiveX.Single?
static ReactiveX.Single.Using(Java.Util.Concurrent.ICallable? resourceSupplier, ReactiveX.Functions.IFunction? singleFunction, ReactiveX.Functions.IConsumer? disposer, bool eager) -> ReactiveX.Single?
static ReactiveX.Single.Wrap(ReactiveX.ISingleSource? source) -> ReactiveX.Single?
static ReactiveX.Single.Zip(Java.Lang.IIterable? sources, ReactiveX.Functions.IFunction? zipper) -> ReactiveX.Single?
static ReactiveX.Single.Zip(ReactiveX.ISingleSource? source1, ReactiveX.ISingleSource? source2, ReactiveX.Functions.IBiFunction? zipper) -> ReactiveX.Single?
static ReactiveX.Single.Zip(ReactiveX.ISingleSource? source1, ReactiveX.ISingleSource? source2, ReactiveX.ISingleSource? source3, ReactiveX.Functions.IFunction3? zipper) -> ReactiveX.Single?
static ReactiveX.Single.Zip(ReactiveX.ISingleSource? source1, ReactiveX.ISingleSource? source2, ReactiveX.ISingleSource? source3, ReactiveX.ISingleSource? source4, ReactiveX.Functions.IFunction4? zipper) -> ReactiveX.Single?
static ReactiveX.Single.Zip(ReactiveX.ISingleSource? source1, ReactiveX.ISingleSource? source2, ReactiveX.ISingleSource? source3, ReactiveX.ISingleSource? source4, ReactiveX.ISingleSource? source5, ReactiveX.Functions.IFunction5? zipper) -> ReactiveX.Single?
static ReactiveX.Single.Zip(ReactiveX.ISingleSource? source1, ReactiveX.ISingleSource? source2, ReactiveX.ISingleSource? source3, ReactiveX.ISingleSource? source4, ReactiveX.ISingleSource? source5, ReactiveX.ISingleSource? source6, ReactiveX.Functions.IFunction6? zipper) -> ReactiveX.Single?
static ReactiveX.Single.Zip(ReactiveX.ISingleSource? source1, ReactiveX.ISingleSource? source2, ReactiveX.ISingleSource? source3, ReactiveX.ISingleSource? source4, ReactiveX.ISingleSource? source5, ReactiveX.ISingleSource? source6, ReactiveX.ISingleSource? source7, ReactiveX.Functions.IFunction7? zipper) -> ReactiveX.Single?
static ReactiveX.Single.Zip(ReactiveX.ISingleSource? source1, ReactiveX.ISingleSource? source2, ReactiveX.ISingleSource? source3, ReactiveX.ISingleSource? source4, ReactiveX.ISingleSource? source5, ReactiveX.ISingleSource? source6, ReactiveX.ISingleSource? source7, ReactiveX.ISingleSource? source8, ReactiveX.Functions.IFunction8? zipper) -> ReactiveX.Single?
static ReactiveX.Single.Zip(ReactiveX.ISingleSource? source1, ReactiveX.ISingleSource? source2, ReactiveX.ISingleSource? source3, ReactiveX.ISingleSource? source4, ReactiveX.ISingleSource? source5, ReactiveX.ISingleSource? source6, ReactiveX.ISingleSource? source7, ReactiveX.ISingleSource? source8, ReactiveX.ISingleSource? source9, ReactiveX.Functions.IFunction9? zipper) -> ReactiveX.Single?
static ReactiveX.Single.ZipArray(ReactiveX.Functions.IFunction? zipper, params ReactiveX.ISingleSource![]? sources) -> ReactiveX.Single?
static ReactiveX.Subjects.AsyncSubject.Create() -> ReactiveX.Subjects.AsyncSubject?
static ReactiveX.Subjects.BehaviorSubject.Create() -> ReactiveX.Subjects.BehaviorSubject?
static ReactiveX.Subjects.BehaviorSubject.CreateDefault(Java.Lang.Object? defaultValue) -> ReactiveX.Subjects.BehaviorSubject?
static ReactiveX.Subjects.CompletableSubject.Create() -> ReactiveX.Subjects.CompletableSubject?
static ReactiveX.Subjects.MaybeSubject.Create() -> ReactiveX.Subjects.MaybeSubject?
static ReactiveX.Subjects.PublishSubject.Create() -> ReactiveX.Subjects.PublishSubject?
static ReactiveX.Subjects.ReplaySubject.Create() -> ReactiveX.Subjects.ReplaySubject?
static ReactiveX.Subjects.ReplaySubject.Create(int capacityHint) -> ReactiveX.Subjects.ReplaySubject?
static ReactiveX.Subjects.ReplaySubject.CreateWithSize(int maxSize) -> ReactiveX.Subjects.ReplaySubject?
static ReactiveX.Subjects.ReplaySubject.CreateWithTime(long maxAge, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler) -> ReactiveX.Subjects.ReplaySubject?
static ReactiveX.Subjects.ReplaySubject.CreateWithTimeAndSize(long maxAge, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Scheduler? scheduler, int maxSize) -> ReactiveX.Subjects.ReplaySubject?
static ReactiveX.Subjects.SingleSubject.Create() -> ReactiveX.Subjects.SingleSubject?
static ReactiveX.Subjects.UnicastSubject.Create() -> ReactiveX.Subjects.UnicastSubject?
static ReactiveX.Subjects.UnicastSubject.Create(bool delayError) -> ReactiveX.Subjects.UnicastSubject?
static ReactiveX.Subjects.UnicastSubject.Create(int capacityHint) -> ReactiveX.Subjects.UnicastSubject?
static ReactiveX.Subjects.UnicastSubject.Create(int capacityHint, Java.Lang.IRunnable? onTerminate) -> ReactiveX.Subjects.UnicastSubject?
static ReactiveX.Subjects.UnicastSubject.Create(int capacityHint, Java.Lang.IRunnable? onTerminate, bool delayError) -> ReactiveX.Subjects.UnicastSubject?
static ReactiveX.Subscribers.TestSubscriber.Create() -> ReactiveX.Subscribers.TestSubscriber?
static ReactiveX.Subscribers.TestSubscriber.Create(ReactiveStreams.ISubscriber? delegate) -> ReactiveX.Subscribers.TestSubscriber?
static ReactiveX.Subscribers.TestSubscriber.Create(long initialRequested) -> ReactiveX.Subscribers.TestSubscriber?
virtual ReactiveX.Flowables.ConnectableFlowable.AutoConnect() -> ReactiveX.Flowable?
virtual ReactiveX.Flowables.ConnectableFlowable.AutoConnect(int numberOfSubscribers) -> ReactiveX.Flowable?
virtual ReactiveX.Flowables.ConnectableFlowable.AutoConnect(int numberOfSubscribers, ReactiveX.Functions.IConsumer? connection) -> ReactiveX.Flowable?
virtual ReactiveX.Flowables.ConnectableFlowable.RefCount() -> ReactiveX.Flowable?
virtual ReactiveX.Flowables.GroupedFlowable.Key.get -> Java.Lang.Object?
virtual ReactiveX.Internal.Functions.Functions.BoundedConsumer.Accept(ReactiveStreams.ISubscription? s) -> void
virtual ReactiveX.Internal.Observers.BasicFuseableObserver.AfterDownstream() -> void
virtual ReactiveX.Internal.Observers.BasicFuseableObserver.BeforeDownstream() -> bool
virtual ReactiveX.Internal.Observers.BasicFuseableObserver.Clear() -> void
virtual ReactiveX.Internal.Observers.BasicFuseableObserver.Dispose() -> void
virtual ReactiveX.Internal.Observers.BasicFuseableObserver.IsDisposed.get -> bool
virtual ReactiveX.Internal.Observers.BasicFuseableObserver.IsEmpty.get -> bool
virtual ReactiveX.Internal.Observers.BasicFuseableObserver.OnComplete() -> void
virtual ReactiveX.Internal.Observers.BasicFuseableObserver.OnError(Java.Lang.Throwable? t) -> void
virtual ReactiveX.Internal.Observers.DeferredScalarObserver.OnComplete() -> void
virtual ReactiveX.Internal.Observers.DeferredScalarObserver.OnError(Java.Lang.Throwable? t) -> void
virtual ReactiveX.Internal.Observers.DeferredScalarObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
virtual ReactiveX.Internal.Observers.QueueDrainObserver.Accept(ReactiveX.IObserver? a, Java.Lang.Object? v) -> void
virtual ReactiveX.Internal.Schedulers.NewThreadWorker.ScheduleActual(Java.Lang.IRunnable? run, long delayTime, Java.Util.Concurrent.TimeUnit? unit, ReactiveX.Internal.Disposables.IDisposableContainer? parent) -> ReactiveX.Internal.Schedulers.ScheduledRunnable?
virtual ReactiveX.Internal.Schedulers.NewThreadWorker.ScheduleDirect(Java.Lang.IRunnable? run, long delayTime, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Disposables.IDisposable?
virtual ReactiveX.Internal.Schedulers.NewThreadWorker.SchedulePeriodicallyDirect(Java.Lang.IRunnable? run, long initialDelay, long period, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Disposables.IDisposable?
virtual ReactiveX.Internal.Schedulers.NewThreadWorker.Shutdown() -> void
virtual ReactiveX.Internal.Schedulers.SchedulerWhen.Dispose() -> void
virtual ReactiveX.Internal.Schedulers.SchedulerWhen.IsDisposed.get -> bool
virtual ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.AfterDownstream() -> void
virtual ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.BeforeDownstream() -> bool
virtual ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.Cancel() -> void
virtual ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.Clear() -> void
virtual ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.IsEmpty.get -> bool
virtual ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.OnComplete() -> void
virtual ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.OnError(Java.Lang.Throwable? t) -> void
virtual ReactiveX.Internal.Subscribers.BasicFuseableConditionalSubscriber.Request(long n) -> void
virtual ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.AfterDownstream() -> void
virtual ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.BeforeDownstream() -> bool
virtual ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.Cancel() -> void
virtual ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.Clear() -> void
virtual ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.IsEmpty.get -> bool
virtual ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.OnComplete() -> void
virtual ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.OnError(Java.Lang.Throwable? t) -> void
virtual ReactiveX.Internal.Subscribers.BasicFuseableSubscriber.Request(long n) -> void
virtual ReactiveX.Internal.Subscribers.DeferredScalarSubscriber.OnComplete() -> void
virtual ReactiveX.Internal.Subscribers.DeferredScalarSubscriber.OnError(Java.Lang.Throwable? t) -> void
virtual ReactiveX.Internal.Subscribers.DeferredScalarSubscriber.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
virtual ReactiveX.Internal.Subscribers.QueueDrainSubscriber.Accept(ReactiveStreams.ISubscriber? a, Java.Lang.Object? v) -> bool
virtual ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber.Cancel() -> void
virtual ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber.OnDrop(Java.Lang.Object? n) -> void
virtual ReactiveX.Internal.Subscribers.SinglePostCompleteSubscriber.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
virtual ReactiveX.Internal.Subscribers.StrictSubscriber.Cancel() -> void
virtual ReactiveX.Internal.Subscribers.StrictSubscriber.OnComplete() -> void
virtual ReactiveX.Internal.Subscribers.StrictSubscriber.OnError(Java.Lang.Throwable? t) -> void
virtual ReactiveX.Internal.Subscribers.StrictSubscriber.OnNext(Java.Lang.Object? t) -> void
virtual ReactiveX.Internal.Subscribers.StrictSubscriber.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
virtual ReactiveX.Internal.Subscribers.StrictSubscriber.Request(long n) -> void
virtual ReactiveX.Internal.Subscriptions.BasicQueueSubscription.Poll() -> Java.Lang.Object?
virtual ReactiveX.Internal.Subscriptions.SubscriptionArbiter.Cancel() -> void
virtual ReactiveX.Internal.Util.AppendOnlyLinkedArrayList.Accept(ReactiveStreams.ISubscriber? subscriber) -> bool
virtual ReactiveX.Internal.Util.AppendOnlyLinkedArrayList.Accept(ReactiveX.IObserver? observer) -> bool
virtual ReactiveX.Internal.Util.AppendOnlyLinkedArrayList.Add(Java.Lang.Object? value) -> void
virtual ReactiveX.Internal.Util.AppendOnlyLinkedArrayList.ForEachWhile(Java.Lang.Object? state, ReactiveX.Functions.IBiPredicate? consumer) -> void
virtual ReactiveX.Internal.Util.AppendOnlyLinkedArrayList.ForEachWhile(ReactiveX.Internal.Util.AppendOnlyLinkedArrayList.INonThrowingPredicate? consumer) -> void
virtual ReactiveX.Internal.Util.AppendOnlyLinkedArrayList.SetFirst(Java.Lang.Object? value) -> void
virtual ReactiveX.Internal.Util.LinkedArrayList.Add(Java.Lang.Object? o) -> void
virtual ReactiveX.Internal.Util.LinkedArrayList.Head() -> Java.Lang.Object![]?
virtual ReactiveX.Internal.Util.LinkedArrayList.Size() -> int
virtual ReactiveX.Observables.ConnectableObservable.AutoConnect() -> ReactiveX.Observable?
virtual ReactiveX.Observables.ConnectableObservable.AutoConnect(int numberOfSubscribers) -> ReactiveX.Observable?
virtual ReactiveX.Observables.ConnectableObservable.AutoConnect(int numberOfSubscribers, ReactiveX.Functions.IConsumer? connection) -> ReactiveX.Observable?
virtual ReactiveX.Observables.ConnectableObservable.RefCount() -> ReactiveX.Observable?
virtual ReactiveX.Observables.GroupedObservable.Key.get -> Java.Lang.Object?
virtual ReactiveX.Observers.DefaultObserver.OnStart() -> void
virtual ReactiveX.Observers.DisposableCompletableObserver.OnStart() -> void
virtual ReactiveX.Observers.DisposableMaybeObserver.OnStart() -> void
virtual ReactiveX.Observers.DisposableObserver.OnStart() -> void
virtual ReactiveX.Observers.DisposableSingleObserver.OnStart() -> void
virtual ReactiveX.Observers.ResourceCompletableObserver.OnStart() -> void
virtual ReactiveX.Observers.ResourceMaybeObserver.OnStart() -> void
virtual ReactiveX.Observers.ResourceObserver.OnStart() -> void
virtual ReactiveX.Observers.ResourceSingleObserver.OnStart() -> void
virtual ReactiveX.Observers.TestObserver.OnComplete() -> void
virtual ReactiveX.Observers.TestObserver.OnError(Java.Lang.Throwable? t) -> void
virtual ReactiveX.Observers.TestObserver.OnNext(Java.Lang.Object? t) -> void
virtual ReactiveX.Observers.TestObserver.OnSubscribe(ReactiveX.Disposables.IDisposable? d) -> void
virtual ReactiveX.Observers.TestObserver.OnSuccess(Java.Lang.Object? value) -> void
virtual ReactiveX.Scheduler.Now(Java.Util.Concurrent.TimeUnit? unit) -> long
virtual ReactiveX.Scheduler.ScheduleDirect(Java.Lang.IRunnable? run) -> ReactiveX.Disposables.IDisposable?
virtual ReactiveX.Scheduler.ScheduleDirect(Java.Lang.IRunnable? run, long delay, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Disposables.IDisposable?
virtual ReactiveX.Scheduler.SchedulePeriodicallyDirect(Java.Lang.IRunnable? run, long initialDelay, long period, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Disposables.IDisposable?
virtual ReactiveX.Scheduler.Shutdown() -> void
virtual ReactiveX.Scheduler.Start() -> void
virtual ReactiveX.Scheduler.When(ReactiveX.Functions.IFunction? combine) -> Java.Lang.Object?
virtual ReactiveX.Scheduler.Worker.Now(Java.Util.Concurrent.TimeUnit? unit) -> long
virtual ReactiveX.Scheduler.Worker.Schedule(Java.Lang.IRunnable? run) -> ReactiveX.Disposables.IDisposable?
virtual ReactiveX.Scheduler.Worker.SchedulePeriodically(Java.Lang.IRunnable? run, long initialDelay, long period, Java.Util.Concurrent.TimeUnit? unit) -> ReactiveX.Disposables.IDisposable?
virtual ReactiveX.Subscribers.DefaultSubscriber.OnStart() -> void
virtual ReactiveX.Subscribers.DisposableSubscriber.OnStart() -> void
virtual ReactiveX.Subscribers.ResourceSubscriber.OnStart() -> void
virtual ReactiveX.Subscribers.TestSubscriber.OnComplete() -> void
virtual ReactiveX.Subscribers.TestSubscriber.OnError(Java.Lang.Throwable? t) -> void
virtual ReactiveX.Subscribers.TestSubscriber.OnNext(Java.Lang.Object? t) -> void
virtual ReactiveX.Subscribers.TestSubscriber.OnStart() -> void
virtual ReactiveX.Subscribers.TestSubscriber.OnSubscribe(ReactiveStreams.ISubscription? s) -> void
