@using System
@using System.Linq
<Project Sdk="Xamarin.Legacy.Sdk">
  <PropertyGroup>
    <TargetFrameworks>MonoAndroid9.0;net6.0-android</TargetFrameworks>
    <IsBindingProject>true</IsBindingProject>
    @if (!string.IsNullOrEmpty(Model.AssemblyName)) {
    <AssemblyName>@(Model.AssemblyName)</AssemblyName>
    } else {
    <AssemblyName>@(Model.NuGetPackageId)</AssemblyName>
    }
    <AndroidUseIntermediateDesignerFile>false</AndroidUseIntermediateDesignerFile>
    <RootNamespace>@(Model.NuGetPackageId.Replace("Xamarin.", ""))</RootNamespace>
    <!--
      No warnings for:
       - CS0618: 'member' is obsolete: 'text'
       - CS0109: The member 'member' does not hide an inherited member. The new keyword is not required
       - CS0114: 'function1' hides inherited member 'function2'. To make the current method override that implementation, add the override keyword. Otherwise add the new keyword.
       - CS0628: 'member' : new protected member declared in sealed class
       - CS0108: 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
       - CS0809: Obsolete member 'member' overrides non-obsolete member 'member'
    -->
    <NoWarn>0618;0109;0114;0628;0108;0809</NoWarn>
  </PropertyGroup>

  @{
      string[] artifact_version_parts = Model.NuGetVersion
                                              .Split(new string[] { "-" }, StringSplitOptions.None);
      string artifact_version = null;

      string artifact_version_release = artifact_version_parts[0];
      string[] artifact_version_release_parts = artifact_version_release.Split(new string[] { "." }, StringSplitOptions.None);
      artifact_version = string.Join(".", artifact_version_release_parts, 0, 3);

      if (artifact_version_parts.Length == 1)
      {
          // release
      }
      if (artifact_version_parts.Length == 2)
      {
          artifact_version += "-" + artifact_version_parts[1];
      }
  }
  <PropertyGroup>
    <PackageId>@(Model.NuGetPackageId)</PackageId>
    <Title>Xamarin AndroidX - @(Model.Name)</Title>
    <Summary>Xamarin.Android bindings for AndroidX - @(Model.Name)</Summary>
    <Description>Xamarin.Android bindings for AndroidX - @(Model.Name)  artifact=@(Model.MavenGroupId):@(Model.Name) artifact_versioned=@(Model.MavenGroupId):@(Model.Name):@(artifact_version)</Description>
    <PackageTags>Xamarin AndroidX Xamarin.AndroidX Support Google @(Model.Name) artifact=@(Model.MavenGroupId):@(Model.Name) artifact_versioned=@(Model.MavenGroupId):@(Model.Name):@(artifact_version)</PackageTags>
    <Authors>Microsoft</Authors>
    <Owners>Microsoft</Owners>
    <Copyright>© Microsoft Corporation. All rights reserved.</Copyright>
    <PackageProjectUrl>https://go.microsoft.com/fwlink/?linkid=2113238</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageIconUrl>https://go.microsoft.com/fwlink/?linkid=2099392</PackageIconUrl>
    <PackageVersion>@(Model.NuGetVersion)$(PackageVersionSuffix)</PackageVersion>
    <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
    <!-- Include symbol files (*.pdb) in the built .nupkg -->
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
  </PropertyGroup>

  <PropertyGroup>
    <AndroidClassParser>class-parse</AndroidClassParser>
    <AndroidCodegenTarget>XAJavaInterop1</AndroidCodegenTarget>
    <AndroidFragmentType>AndroidX.Fragment.App.Fragment</AndroidFragmentType>
  </PropertyGroup>

  <ItemGroup>
      @foreach (var art in @Model.MavenArtifacts) {
      <TransformFile Include="..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId)-paramnames.xml" Condition="Exists('..\..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId)-paramnames.xml')" />
      }
  </ItemGroup>

  <ItemGroup>
    @foreach (var art in @Model.MavenArtifacts)
    {
    <JavaSourceJar
          Include="..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId)-sources.jar"
          Condition="Exists('..\..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId)-sources.jar')"
          />
    <JavaDocJar
          Include="..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId)-javadoc.jar"
          Condition="Exists('..\..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId)-javadoc.jar')"
          />
    }
  </ItemGroup>


  <ItemGroup>
    @foreach (var art in @Model.MavenArtifacts) {
    <_AndroidDocumentationPath Include="..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId)-paramnames.txt" Condition="Exists('..\..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId)-paramnames.txt')" />
    }
  </ItemGroup>

  <ItemGroup>
    <None Include="@(Model.NuGetPackageId).targets" Pack="True" PackagePath="@@(AndroidXNuGetTargetFolders)" />
    <None Include="..\..\LICENSE.md" Pack="True" PackagePath="LICENSE.md" />
  </ItemGroup>

  @if (@Model.MavenArtifacts.Count > 0) {
  <ItemGroup>
    @foreach (var art in @Model.MavenArtifacts) {
      if (art.ProguardFile != null) {
    <None Include="..\..\@(art.ProguardFile)" Pack="True" PackagePath="proguard\" />
      }
    }
  </ItemGroup>
  }

  <ItemGroup>
    <Folder Include="Additions\" />
    <Folder Include="Jars\" />
    <Folder Include="Transforms\" />
    @if (@Model.NuGetPackageId == "Xamarin.Google.Android.Material")
    {
    <Folder Include="Java\" />
    }
  </ItemGroup>
  <ItemGroup>
    <Compile Include="..\..\source\AssemblyInfo.cs" />
    <Compile Include="..\..\source\@(Model.MavenGroupId)\@(Model.Name)\Additions\*.cs">
        <Link>Additions/%(RecursiveDir)/%(Filename)%(Extension)</Link>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <TransformFile Include="..\..\source\Metadata.common.xml" >
      <Link>Transforms/Metadata.common.xml</Link>
    </TransformFile>
    <TransformFile Include="..\..\source\@(Model.MavenGroupId)\@(Model.Name)\Transforms\*.xml">
        <Link>Transforms/%(RecursiveDir)/%(Filename)%(Extension)</Link>
    </TransformFile>
    <AndroidJavaSource
      Condition="Exists('..\..\source\@(Model.MavenGroupId)\@(Model.Name)\java\*.java')"
      Include="..\..\source\@(Model.MavenGroupId)\@(Model.Name)\java\*.java"
      >
      <Link>Java/%(RecursiveDir)/%(Filename)%(Extension)</Link>
    </AndroidJavaSource>
  </ItemGroup>

  <ItemGroup>
    @foreach (var art in @Model.MavenArtifacts) {
      if (art.MavenArtifactPackaging == "aar") {
    <None Include="..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId).aar" Pack="True" PackagePath="aar\@(art.MavenGroupId).@(art.MavenArtifactId).aar" />
      } else {
    <None Include="..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId).jar" Pack="True" PackagePath="jar\@(art.MavenGroupId).@(art.MavenArtifactId).jar" />
      }
    }
  </ItemGroup>


  @if (@Model.MavenArtifacts.Count > 0) {
  <ItemGroup>
    @foreach (var art in @Model.MavenArtifacts)
    {
      if (art.MavenArtifactPackaging == "aar")
      {
    <InputJar Include="..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId)\classes.jar" />
    <!-- For those artifacts with lib/ folder -->
    <InputJar
      Condition="Exists('..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId)\libs\')"
      Include="..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId)\libs\*.jar"
      />
      }
      else
      {
    <InputJar Include="..\..\externals\@(art.MavenGroupId)\@(art.MavenArtifactId).jar" />
      }
    }
  </ItemGroup>
  }

  <ItemGroup>
    <!-- ProjectReference -->
    @foreach (var dep in @Model.NuGetDependencies) {
      if (dep.IsProjectReference) {
        <ProjectReference Include="..\..\generated\@(dep.MavenArtifact.MavenGroupId).@(dep.MavenArtifact.MavenArtifactId)\@(dep.MavenArtifact.MavenGroupId).@(dep.MavenArtifact.MavenArtifactId).csproj" PrivateAssets="none" />

      }
    }
    <!-- some additional fixes -->
    @if (@Model.NuGetPackageId == "Xamarin.AndroidX.Transition")
    {
        <ProjectReference Include="..\androidx.fragment.fragment\androidx.fragment.fragment.csproj" PrivateAssets="none" />
    }
    @if (@Model.NuGetPackageId == "Xamarin.AndroidX.Work.Runtime")
    {
        <!--
        Xamarin.AndroidX.Work.Runtime Should Reference Xamarin.AndroidX.Room.Runtime
        https://github.com/xamarin/AndroidX/issues/86
        -->
        <ProjectReference Include="..\androidx.room.room-runtime\androidx.room.room-runtime.csproj" PrivateAssets="none" />
        <ProjectReference Include="..\androidx.lifecycle.lifecycle-service/androidx.lifecycle.lifecycle-service.csproj" PrivateAssets="none" />
    }
    @if (@Model.NuGetPackageId == "Xamarin.AndroidX.Fragment")
    {
        <ProjectReference Include="..\androidx.savedstate.savedstate\androidx.savedstate.savedstate.csproj" PrivateAssets="none" />
    }
    @if (@Model.NuGetPackageId == "Xamarin.AndroidX.SavedState")
    {
        <ProjectReference Include="..\androidx.lifecycle.lifecycle-common\androidx.lifecycle.lifecycle-common.csproj" PrivateAssets="none" />
    }
    @if (@Model.NuGetPackageId == "Xamarin.AndroidX.Window")
    {
        <ProjectReference Include="..\androidx.core.core\androidx.core.core.csproj" PrivateAssets="none" />
    }
    @if (@Model.NuGetPackageId == "Xamarin.AndroidX.Lifecycle.Runtime")
    {
        <ProjectReference Include="..\androidx.arch.core.core-runtime\androidx.arch.core.core-runtime.csproj" PrivateAssets="none" />
    }
  </ItemGroup>


  <ItemGroup>
    <!-- PackageReference -->
    @foreach (var dep in @Model.NuGetDependencies) {
      if (!dep.IsProjectReference) {
      <PackageReference Include="@(dep.NuGetPackageId)" Version="@(dep.NuGetVersion)" PrivateAssets="none" />
      }
    }
  </ItemGroup>

  @if (@Model.NuGetPackageId == "Xamarin.AndroidX.Annotation")
  {
    <ItemGroup>
      <ProjectReference Include="..\..\source\migration\Dummy\Xamarin.AndroidX.Migration.Dummy.csproj" PrivateAssets="none" Condition=" '$(TargetFramework)' == 'MonoAndroid9.0' " />
    </ItemGroup>
  }

</Project>
