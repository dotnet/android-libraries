#nullable enable
AndroidX.Room.EmptyResultSetException
AndroidX.Room.EmptyResultSetException.EmptyResultSetException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.EmptyResultSetException.EmptyResultSetException(string! message) -> void
AndroidX.Room.RxRoom
AndroidX.Room.RxRoom.Companion
AndroidX.Room.RxRoom.Companion.CreateCompletable(AndroidX.Room.RoomDatabase! db, bool isReadOnly, bool inTransaction, Kotlin.Jvm.Functions.IFunction1! block) -> ReactiveX.Completable!
AndroidX.Room.RxRoom.Companion.CreateFlowable(AndroidX.Room.RoomDatabase! database, bool inTransaction, string![]! tableNames, Java.Util.Concurrent.ICallable! callable) -> ReactiveX.Flowable!
AndroidX.Room.RxRoom.Companion.CreateFlowable(AndroidX.Room.RoomDatabase! database, params string![]! tableNames) -> ReactiveX.Flowable!
AndroidX.Room.RxRoom.Companion.CreateFlowable(AndroidX.Room.RoomDatabase! database, string![]! tableNames, Java.Util.Concurrent.ICallable! callable) -> ReactiveX.Flowable!
AndroidX.Room.RxRoom.Companion.CreateFlowable(AndroidX.Room.RoomDatabase! db, bool inTransaction, string![]! tableNames, Kotlin.Jvm.Functions.IFunction1! block) -> ReactiveX.Flowable!
AndroidX.Room.RxRoom.Companion.CreateMaybe(AndroidX.Room.RoomDatabase! db, bool isReadOnly, bool inTransaction, Kotlin.Jvm.Functions.IFunction1! block) -> ReactiveX.Maybe!
AndroidX.Room.RxRoom.Companion.CreateObservable(AndroidX.Room.RoomDatabase! database, bool inTransaction, string![]! tableNames, Java.Util.Concurrent.ICallable! callable) -> ReactiveX.Observable!
AndroidX.Room.RxRoom.Companion.CreateObservable(AndroidX.Room.RoomDatabase! database, params string![]! tableNames) -> ReactiveX.Observable!
AndroidX.Room.RxRoom.Companion.CreateObservable(AndroidX.Room.RoomDatabase! database, string![]! tableNames, Java.Util.Concurrent.ICallable! callable) -> ReactiveX.Observable!
AndroidX.Room.RxRoom.Companion.CreateObservable(AndroidX.Room.RoomDatabase! db, bool inTransaction, string![]! tableNames, Kotlin.Jvm.Functions.IFunction1! block) -> ReactiveX.Observable!
AndroidX.Room.RxRoom.Companion.CreateSingle(AndroidX.Room.RoomDatabase! db, bool isReadOnly, bool inTransaction, Kotlin.Jvm.Functions.IFunction1! block) -> ReactiveX.Single!
AndroidX.Room.RxRoom.Companion.CreateSingle(Java.Util.Concurrent.ICallable! callable) -> ReactiveX.Single!
AndroidX.Room.RxRoom.RxRoom() -> void
AndroidX.Room.RxRoom.RxRoom(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
override AndroidX.Room.EmptyResultSetException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.EmptyResultSetException.ThresholdClass.get -> nint
override AndroidX.Room.EmptyResultSetException.ThresholdType.get -> System.Type!
override AndroidX.Room.RxRoom.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.RxRoom.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.RxRoom.ThresholdClass.get -> nint
override AndroidX.Room.RxRoom.ThresholdType.get -> System.Type!
static AndroidX.Room.RxRoom.CreateCompletable(AndroidX.Room.RoomDatabase! db, bool isReadOnly, bool inTransaction, Kotlin.Jvm.Functions.IFunction1! block) -> ReactiveX.Completable!
static AndroidX.Room.RxRoom.CreateFlowable(AndroidX.Room.RoomDatabase! database, bool inTransaction, string![]! tableNames, Java.Util.Concurrent.ICallable! callable) -> ReactiveX.Flowable!
static AndroidX.Room.RxRoom.CreateFlowable(AndroidX.Room.RoomDatabase! database, params string![]! tableNames) -> ReactiveX.Flowable!
static AndroidX.Room.RxRoom.CreateFlowable(AndroidX.Room.RoomDatabase! database, string![]! tableNames, Java.Util.Concurrent.ICallable! callable) -> ReactiveX.Flowable!
static AndroidX.Room.RxRoom.CreateFlowable(AndroidX.Room.RoomDatabase! db, bool inTransaction, string![]! tableNames, Kotlin.Jvm.Functions.IFunction1! block) -> ReactiveX.Flowable!
static AndroidX.Room.RxRoom.CreateMaybe(AndroidX.Room.RoomDatabase! db, bool isReadOnly, bool inTransaction, Kotlin.Jvm.Functions.IFunction1! block) -> ReactiveX.Maybe!
static AndroidX.Room.RxRoom.CreateObservable(AndroidX.Room.RoomDatabase! database, bool inTransaction, string![]! tableNames, Java.Util.Concurrent.ICallable! callable) -> ReactiveX.Observable!
static AndroidX.Room.RxRoom.CreateObservable(AndroidX.Room.RoomDatabase! database, params string![]! tableNames) -> ReactiveX.Observable!
static AndroidX.Room.RxRoom.CreateObservable(AndroidX.Room.RoomDatabase! database, string![]! tableNames, Java.Util.Concurrent.ICallable! callable) -> ReactiveX.Observable!
static AndroidX.Room.RxRoom.CreateObservable(AndroidX.Room.RoomDatabase! db, bool inTransaction, string![]! tableNames, Kotlin.Jvm.Functions.IFunction1! block) -> ReactiveX.Observable!
static AndroidX.Room.RxRoom.CreateSingle(AndroidX.Room.RoomDatabase! db, bool isReadOnly, bool inTransaction, Kotlin.Jvm.Functions.IFunction1! block) -> ReactiveX.Single!
static AndroidX.Room.RxRoom.CreateSingle(Java.Util.Concurrent.ICallable! callable) -> ReactiveX.Single!
static AndroidX.Room.RxRoom.Nothing.get -> Java.Lang.Object!
