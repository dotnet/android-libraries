#nullable enable
AndroidX.Room.BaseRoomConnectionManager
AndroidX.Room.BaseRoomConnectionManager.BaseRoomConnectionManager() -> void
AndroidX.Room.BaseRoomConnectionManager.BaseRoomConnectionManager(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.BaseRoomConnectionManager.Companion
AndroidX.Room.BaseRoomConnectionManager.DriverWrapper
AndroidX.Room.BaseRoomConnectionManager.DriverWrapper.DriverWrapper(AndroidX.Room.BaseRoomConnectionManager? __self, AndroidX.Sqlite.ISQLiteDriver! actual) -> void
AndroidX.Room.BaseRoomConnectionManager.DriverWrapper.HasConnectionPool.get -> bool
AndroidX.Room.BaseRoomConnectionManager.DriverWrapper.Open(string! fileName) -> AndroidX.Sqlite.ISQLiteConnection!
AndroidX.Room.BaseRoomConnectionManager.GetMaxNumberOfReaders(AndroidX.Room.RoomDatabase.JournalMode! _this_getMaxNumberOfReaders) -> int
AndroidX.Room.BaseRoomConnectionManager.GetMaxNumberOfWriters(AndroidX.Room.RoomDatabase.JournalMode! _this_getMaxNumberOfWriters) -> int
AndroidX.Room.BaseRoomConnectionManager.OnCreate(AndroidX.Sqlite.ISQLiteConnection! connection) -> void
AndroidX.Room.BaseRoomConnectionManager.OnMigrate(AndroidX.Sqlite.ISQLiteConnection! connection, int oldVersion, int newVersion) -> void
AndroidX.Room.BaseRoomConnectionManager.OnOpen(AndroidX.Sqlite.ISQLiteConnection! connection) -> void
AndroidX.Room.BaseRoomConnectionManager.WhenMappings
AndroidX.Room.Concurrent.AtomicsKt
AndroidX.Room.Concurrent.Atomics_jvmAndroidKt
AndroidX.Room.Concurrent.CloseBarrierKt
AndroidX.Room.Concurrent.ReentrantLockKt
AndroidX.Room.Concurrent.ReentrantLock_jvmAndroidKt
AndroidX.Room.Concurrent.Synchronized_jvmAndroidKt
AndroidX.Room.Concurrent.ThreadLocal_jvmAndroidKt
AndroidX.Room.Coroutines.ConnectionPoolImplKt
AndroidX.Room.Coroutines.ConnectionPoolKt
AndroidX.Room.Coroutines.FlowUtil
AndroidX.Room.Coroutines.PassthroughConnectionPoolKt
AndroidX.Room.Coroutines.RunBlockingUninterruptible_androidKt
AndroidX.Room.CoroutinesRoom
AndroidX.Room.CoroutinesRoom.Companion
AndroidX.Room.CoroutinesRoom.Companion.CreateFlow(AndroidX.Room.RoomDatabase! db, bool inTransaction, string![]! tableNames, Java.Util.Concurrent.ICallable! callable) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
AndroidX.Room.CoroutinesRoom.Companion.Execute(AndroidX.Room.RoomDatabase! db, bool inTransaction, Android.OS.CancellationSignal? cancellationSignal, Java.Util.Concurrent.ICallable! callable, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
AndroidX.Room.CoroutinesRoom.Companion.Execute(AndroidX.Room.RoomDatabase! db, bool inTransaction, Java.Util.Concurrent.ICallable! callable, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
AndroidX.Room.DatabaseConfiguration
AndroidX.Room.DatabaseConfiguration.AllowDestructiveMigrationForAllTables.get -> bool
AndroidX.Room.DatabaseConfiguration.AllowDestructiveMigrationForAllTables.set -> void
AndroidX.Room.DatabaseConfiguration.AllowDestructiveMigrationOnDowngrade.get -> bool
AndroidX.Room.DatabaseConfiguration.AllowDestructiveMigrationOnDowngrade.set -> void
AndroidX.Room.DatabaseConfiguration.AllowMainThreadQueries.get -> bool
AndroidX.Room.DatabaseConfiguration.AllowMainThreadQueries.set -> void
AndroidX.Room.DatabaseConfiguration.AutoMigrationSpecs.get -> System.Collections.IList!
AndroidX.Room.DatabaseConfiguration.AutoMigrationSpecs.set -> void
AndroidX.Room.DatabaseConfiguration.Callbacks.get -> System.Collections.IList?
AndroidX.Room.DatabaseConfiguration.Callbacks.set -> void
AndroidX.Room.DatabaseConfiguration.Context.get -> Android.Content.Context!
AndroidX.Room.DatabaseConfiguration.Context.set -> void
AndroidX.Room.DatabaseConfiguration.Copy(Android.Content.Context! context, string? name, AndroidX.Sqlite.Db.ISupportSQLiteOpenHelperFactory? sqliteOpenHelperFactory, AndroidX.Room.RoomDatabase.MigrationContainer! migrationContainer, System.Collections.Generic.IList<AndroidX.Room.RoomDatabase.Callback!>? callbacks, bool allowMainThreadQueries, AndroidX.Room.RoomDatabase.JournalMode! journalMode, Java.Util.Concurrent.IExecutor! queryExecutor, Java.Util.Concurrent.IExecutor! transactionExecutor, Android.Content.Intent? multiInstanceInvalidationServiceIntent, bool requireMigration, bool allowDestructiveMigrationOnDowngrade, System.Collections.Generic.ICollection<Java.Lang.Integer!>? migrationNotRequiredFrom, string? copyFromAssetPath, Java.IO.File? copyFromFile, Java.Util.Concurrent.ICallable? copyFromInputStream, AndroidX.Room.RoomDatabase.PrepackagedDatabaseCallback? prepackagedDatabaseCallback, System.Collections.Generic.IList<Java.Lang.Object!>! typeConverters, System.Collections.Generic.IList<AndroidX.Room.Migration.IAutoMigrationSpec!>! autoMigrationSpecs, bool allowDestructiveMigrationForAllTables, AndroidX.Sqlite.ISQLiteDriver? sqliteDriver, Kotlin.Coroutines.ICoroutineContext? queryCoroutineContext) -> AndroidX.Room.DatabaseConfiguration!
AndroidX.Room.DatabaseConfiguration.CopyFromAssetPath.get -> string?
AndroidX.Room.DatabaseConfiguration.CopyFromAssetPath.set -> void
AndroidX.Room.DatabaseConfiguration.CopyFromFile.get -> Java.IO.File?
AndroidX.Room.DatabaseConfiguration.CopyFromFile.set -> void
AndroidX.Room.DatabaseConfiguration.CopyFromInputStream.get -> Java.Util.Concurrent.ICallable?
AndroidX.Room.DatabaseConfiguration.CopyFromInputStream.set -> void
AndroidX.Room.DatabaseConfiguration.DatabaseConfiguration(Android.Content.Context! context, string? name, AndroidX.Sqlite.Db.ISupportSQLiteOpenHelperFactory! sqliteOpenHelperFactory, AndroidX.Room.RoomDatabase.MigrationContainer! migrationContainer, System.Collections.Generic.IList<AndroidX.Room.RoomDatabase.Callback!>? callbacks, bool allowMainThreadQueries, AndroidX.Room.RoomDatabase.JournalMode! journalMode, Java.Util.Concurrent.IExecutor! queryExecutor, Java.Util.Concurrent.IExecutor! transactionExecutor, Android.Content.Intent? multiInstanceInvalidationServiceIntent, bool requireMigration, bool allowDestructiveMigrationOnDowngrade, System.Collections.Generic.ICollection<Java.Lang.Integer!>? migrationNotRequiredFrom, string? copyFromAssetPath, Java.IO.File? copyFromFile, Java.Util.Concurrent.ICallable? copyFromInputStream, AndroidX.Room.RoomDatabase.PrepackagedDatabaseCallback? prepackagedDatabaseCallback, System.Collections.Generic.IList<Java.Lang.Object!>! typeConverters, System.Collections.Generic.IList<AndroidX.Room.Migration.IAutoMigrationSpec!>! autoMigrationSpecs) -> void
AndroidX.Room.DatabaseConfiguration.DatabaseConfiguration(Android.Content.Context! context, string? name, AndroidX.Sqlite.Db.ISupportSQLiteOpenHelperFactory! sqliteOpenHelperFactory, AndroidX.Room.RoomDatabase.MigrationContainer! migrationContainer, System.Collections.Generic.IList<AndroidX.Room.RoomDatabase.Callback!>? callbacks, bool allowMainThreadQueries, AndroidX.Room.RoomDatabase.JournalMode! journalMode, Java.Util.Concurrent.IExecutor! queryExecutor, Java.Util.Concurrent.IExecutor! transactionExecutor, Android.Content.Intent? multiInstanceInvalidationServiceIntent, bool requireMigration, bool allowDestructiveMigrationOnDowngrade, System.Collections.Generic.ICollection<Java.Lang.Integer!>? migrationNotRequiredFrom, string? copyFromAssetPath, Java.IO.File? copyFromFile, Java.Util.Concurrent.ICallable? copyFromInputStream, AndroidX.Room.RoomDatabase.PrepackagedDatabaseCallback? prepackagedDatabaseCallback, System.Collections.Generic.IList<Java.Lang.Object!>! typeConverters, System.Collections.Generic.IList<AndroidX.Room.Migration.IAutoMigrationSpec!>! autoMigrationSpecs, bool allowDestructiveMigrationForAllTables) -> void
AndroidX.Room.DatabaseConfiguration.DatabaseConfiguration(Android.Content.Context! context, string? name, AndroidX.Sqlite.Db.ISupportSQLiteOpenHelperFactory! sqliteOpenHelperFactory, AndroidX.Room.RoomDatabase.MigrationContainer! migrationContainer, System.Collections.Generic.IList<AndroidX.Room.RoomDatabase.Callback!>? callbacks, bool allowMainThreadQueries, AndroidX.Room.RoomDatabase.JournalMode! journalMode, Java.Util.Concurrent.IExecutor! queryExecutor, Java.Util.Concurrent.IExecutor! transactionExecutor, bool multiInstanceInvalidation, bool requireMigration, bool allowDestructiveMigrationOnDowngrade, System.Collections.Generic.ICollection<Java.Lang.Integer!>? migrationNotRequiredFrom) -> void
AndroidX.Room.DatabaseConfiguration.DatabaseConfiguration(Android.Content.Context! context, string? name, AndroidX.Sqlite.Db.ISupportSQLiteOpenHelperFactory! sqliteOpenHelperFactory, AndroidX.Room.RoomDatabase.MigrationContainer! migrationContainer, System.Collections.Generic.IList<AndroidX.Room.RoomDatabase.Callback!>? callbacks, bool allowMainThreadQueries, AndroidX.Room.RoomDatabase.JournalMode! journalMode, Java.Util.Concurrent.IExecutor! queryExecutor, Java.Util.Concurrent.IExecutor! transactionExecutor, bool multiInstanceInvalidation, bool requireMigration, bool allowDestructiveMigrationOnDowngrade, System.Collections.Generic.ICollection<Java.Lang.Integer!>? migrationNotRequiredFrom, string? copyFromAssetPath, Java.IO.File? copyFromFile) -> void
AndroidX.Room.DatabaseConfiguration.DatabaseConfiguration(Android.Content.Context! context, string? name, AndroidX.Sqlite.Db.ISupportSQLiteOpenHelperFactory! sqliteOpenHelperFactory, AndroidX.Room.RoomDatabase.MigrationContainer! migrationContainer, System.Collections.Generic.IList<AndroidX.Room.RoomDatabase.Callback!>? callbacks, bool allowMainThreadQueries, AndroidX.Room.RoomDatabase.JournalMode! journalMode, Java.Util.Concurrent.IExecutor! queryExecutor, Java.Util.Concurrent.IExecutor! transactionExecutor, bool multiInstanceInvalidation, bool requireMigration, bool allowDestructiveMigrationOnDowngrade, System.Collections.Generic.ICollection<Java.Lang.Integer!>? migrationNotRequiredFrom, string? copyFromAssetPath, Java.IO.File? copyFromFile, Java.Util.Concurrent.ICallable? copyFromInputStream) -> void
AndroidX.Room.DatabaseConfiguration.DatabaseConfiguration(Android.Content.Context! context, string? name, AndroidX.Sqlite.Db.ISupportSQLiteOpenHelperFactory! sqliteOpenHelperFactory, AndroidX.Room.RoomDatabase.MigrationContainer! migrationContainer, System.Collections.Generic.IList<AndroidX.Room.RoomDatabase.Callback!>? callbacks, bool allowMainThreadQueries, AndroidX.Room.RoomDatabase.JournalMode! journalMode, Java.Util.Concurrent.IExecutor! queryExecutor, Java.Util.Concurrent.IExecutor! transactionExecutor, bool multiInstanceInvalidation, bool requireMigration, bool allowDestructiveMigrationOnDowngrade, System.Collections.Generic.ICollection<Java.Lang.Integer!>? migrationNotRequiredFrom, string? copyFromAssetPath, Java.IO.File? copyFromFile, Java.Util.Concurrent.ICallable? copyFromInputStream, AndroidX.Room.RoomDatabase.PrepackagedDatabaseCallback? prepackagedDatabaseCallback) -> void
AndroidX.Room.DatabaseConfiguration.DatabaseConfiguration(Android.Content.Context! context, string? name, AndroidX.Sqlite.Db.ISupportSQLiteOpenHelperFactory! sqliteOpenHelperFactory, AndroidX.Room.RoomDatabase.MigrationContainer! migrationContainer, System.Collections.Generic.IList<AndroidX.Room.RoomDatabase.Callback!>? callbacks, bool allowMainThreadQueries, AndroidX.Room.RoomDatabase.JournalMode! journalMode, Java.Util.Concurrent.IExecutor! queryExecutor, Java.Util.Concurrent.IExecutor! transactionExecutor, bool multiInstanceInvalidation, bool requireMigration, bool allowDestructiveMigrationOnDowngrade, System.Collections.Generic.ICollection<Java.Lang.Integer!>? migrationNotRequiredFrom, string? copyFromAssetPath, Java.IO.File? copyFromFile, Java.Util.Concurrent.ICallable? copyFromInputStream, AndroidX.Room.RoomDatabase.PrepackagedDatabaseCallback? prepackagedDatabaseCallback, System.Collections.Generic.IList<Java.Lang.Object!>! typeConverters) -> void
AndroidX.Room.DatabaseConfiguration.DatabaseConfiguration(Android.Content.Context! context, string? name, AndroidX.Sqlite.Db.ISupportSQLiteOpenHelperFactory! sqliteOpenHelperFactory, AndroidX.Room.RoomDatabase.MigrationContainer! migrationContainer, System.Collections.Generic.IList<AndroidX.Room.RoomDatabase.Callback!>? callbacks, bool allowMainThreadQueries, AndroidX.Room.RoomDatabase.JournalMode! journalMode, Java.Util.Concurrent.IExecutor! queryExecutor, Java.Util.Concurrent.IExecutor! transactionExecutor, bool multiInstanceInvalidation, bool requireMigration, bool allowDestructiveMigrationOnDowngrade, System.Collections.Generic.ICollection<Java.Lang.Integer!>? migrationNotRequiredFrom, string? copyFromAssetPath, Java.IO.File? copyFromFile, Java.Util.Concurrent.ICallable? copyFromInputStream, AndroidX.Room.RoomDatabase.PrepackagedDatabaseCallback? prepackagedDatabaseCallback, System.Collections.Generic.IList<Java.Lang.Object!>! typeConverters, System.Collections.Generic.IList<AndroidX.Room.Migration.IAutoMigrationSpec!>! autoMigrationSpecs) -> void
AndroidX.Room.DatabaseConfiguration.DatabaseConfiguration(Android.Content.Context! context, string? name, AndroidX.Sqlite.Db.ISupportSQLiteOpenHelperFactory! sqliteOpenHelperFactory, AndroidX.Room.RoomDatabase.MigrationContainer! migrationContainer, System.Collections.Generic.IList<AndroidX.Room.RoomDatabase.Callback!>? callbacks, bool allowMainThreadQueries, AndroidX.Room.RoomDatabase.JournalMode! journalMode, Java.Util.Concurrent.IExecutor! queryExecutor, bool requireMigration, System.Collections.Generic.ICollection<Java.Lang.Integer!>? migrationNotRequiredFrom) -> void
AndroidX.Room.DatabaseConfiguration.DatabaseConfiguration(Android.Content.Context! context, string? name, AndroidX.Sqlite.Db.ISupportSQLiteOpenHelperFactory? sqliteOpenHelperFactory, AndroidX.Room.RoomDatabase.MigrationContainer! migrationContainer, System.Collections.Generic.IList<AndroidX.Room.RoomDatabase.Callback!>? callbacks, bool allowMainThreadQueries, AndroidX.Room.RoomDatabase.JournalMode! journalMode, Java.Util.Concurrent.IExecutor! queryExecutor, Java.Util.Concurrent.IExecutor! transactionExecutor, Android.Content.Intent? multiInstanceInvalidationServiceIntent, bool requireMigration, bool allowDestructiveMigrationOnDowngrade, System.Collections.Generic.ICollection<Java.Lang.Integer!>? migrationNotRequiredFrom, string? copyFromAssetPath, Java.IO.File? copyFromFile, Java.Util.Concurrent.ICallable? copyFromInputStream, AndroidX.Room.RoomDatabase.PrepackagedDatabaseCallback? prepackagedDatabaseCallback, System.Collections.Generic.IList<Java.Lang.Object!>! typeConverters, System.Collections.Generic.IList<AndroidX.Room.Migration.IAutoMigrationSpec!>! autoMigrationSpecs, bool allowDestructiveMigrationForAllTables, AndroidX.Sqlite.ISQLiteDriver? sqliteDriver, Kotlin.Coroutines.ICoroutineContext? queryCoroutineContext) -> void
AndroidX.Room.DatabaseConfiguration.DatabaseConfiguration(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.DatabaseConfiguration.JournalMode.get -> AndroidX.Room.RoomDatabase.JournalMode!
AndroidX.Room.DatabaseConfiguration.JournalMode.set -> void
AndroidX.Room.DatabaseConfiguration.MigrationContainer.get -> AndroidX.Room.RoomDatabase.MigrationContainer!
AndroidX.Room.DatabaseConfiguration.MigrationContainer.set -> void
AndroidX.Room.DatabaseConfiguration.MultiInstanceInvalidation.get -> bool
AndroidX.Room.DatabaseConfiguration.MultiInstanceInvalidation.set -> void
AndroidX.Room.DatabaseConfiguration.MultiInstanceInvalidationServiceIntent.get -> Android.Content.Intent?
AndroidX.Room.DatabaseConfiguration.MultiInstanceInvalidationServiceIntent.set -> void
AndroidX.Room.DatabaseConfiguration.Name.get -> string?
AndroidX.Room.DatabaseConfiguration.Name.set -> void
AndroidX.Room.DatabaseConfiguration.PrepackagedDatabaseCallback.get -> AndroidX.Room.RoomDatabase.PrepackagedDatabaseCallback?
AndroidX.Room.DatabaseConfiguration.PrepackagedDatabaseCallback.set -> void
AndroidX.Room.DatabaseConfiguration.QueryCoroutineContext.get -> Kotlin.Coroutines.ICoroutineContext?
AndroidX.Room.DatabaseConfiguration.QueryCoroutineContext.set -> void
AndroidX.Room.DatabaseConfiguration.QueryExecutor.get -> Java.Util.Concurrent.IExecutor!
AndroidX.Room.DatabaseConfiguration.QueryExecutor.set -> void
AndroidX.Room.DatabaseConfiguration.RequireMigration.get -> bool
AndroidX.Room.DatabaseConfiguration.RequireMigration.set -> void
AndroidX.Room.DatabaseConfiguration.SqliteDriver.get -> AndroidX.Sqlite.ISQLiteDriver?
AndroidX.Room.DatabaseConfiguration.SqliteDriver.set -> void
AndroidX.Room.DatabaseConfiguration.SqliteOpenHelperFactory.get -> AndroidX.Sqlite.Db.ISupportSQLiteOpenHelperFactory?
AndroidX.Room.DatabaseConfiguration.SqliteOpenHelperFactory.set -> void
AndroidX.Room.DatabaseConfiguration.TransactionExecutor.get -> Java.Util.Concurrent.IExecutor!
AndroidX.Room.DatabaseConfiguration.TransactionExecutor.set -> void
AndroidX.Room.DatabaseConfiguration.TypeConverters.get -> System.Collections.IList!
AndroidX.Room.DatabaseConfiguration.TypeConverters.set -> void
AndroidX.Room.EntityDeleteOrUpdateAdapter
AndroidX.Room.EntityDeleteOrUpdateAdapter.EntityDeleteOrUpdateAdapter() -> void
AndroidX.Room.EntityDeleteOrUpdateAdapter.EntityDeleteOrUpdateAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.EntityDeleteOrUpdateAdapter.Handle(AndroidX.Sqlite.ISQLiteConnection! connection, Java.Lang.Object? entity) -> int
AndroidX.Room.EntityDeleteOrUpdateAdapter.HandleMultiple(AndroidX.Sqlite.ISQLiteConnection! connection, Java.Lang.IIterable? entities) -> int
AndroidX.Room.EntityDeleteOrUpdateAdapter.HandleMultiple(AndroidX.Sqlite.ISQLiteConnection! connection, Java.Lang.Object![]? entities) -> int
AndroidX.Room.EntityDeletionOrUpdateAdapter
AndroidX.Room.EntityDeletionOrUpdateAdapter.EntityDeletionOrUpdateAdapter(AndroidX.Room.RoomDatabase! database) -> void
AndroidX.Room.EntityDeletionOrUpdateAdapter.EntityDeletionOrUpdateAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.EntityDeletionOrUpdateAdapter.Handle(Java.Lang.Object? entity) -> int
AndroidX.Room.EntityDeletionOrUpdateAdapter.HandleMultiple(Java.Lang.IIterable! entities) -> int
AndroidX.Room.EntityDeletionOrUpdateAdapter.HandleMultiple(Java.Lang.Object![]! entities) -> int
AndroidX.Room.EntityInsertAdapter
AndroidX.Room.EntityInsertAdapter.EntityInsertAdapter() -> void
AndroidX.Room.EntityInsertAdapter.EntityInsertAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.EntityInsertAdapter.Insert(AndroidX.Sqlite.ISQLiteConnection! connection, Java.Lang.IIterable? entities) -> void
AndroidX.Room.EntityInsertAdapter.Insert(AndroidX.Sqlite.ISQLiteConnection! connection, Java.Lang.Object![]? entities) -> void
AndroidX.Room.EntityInsertAdapter.Insert(AndroidX.Sqlite.ISQLiteConnection! connection, Java.Lang.Object? entity) -> void
AndroidX.Room.EntityInsertAdapter.InsertAndReturnId(AndroidX.Sqlite.ISQLiteConnection! connection, Java.Lang.Object? entity) -> long
AndroidX.Room.EntityInsertAdapter.InsertAndReturnIdsArray(AndroidX.Sqlite.ISQLiteConnection! connection, Java.Lang.Object![]? entities) -> long[]!
AndroidX.Room.EntityInsertAdapter.InsertAndReturnIdsArray(AndroidX.Sqlite.ISQLiteConnection! connection, System.Collections.ICollection? entities) -> long[]!
AndroidX.Room.EntityInsertAdapter.InsertAndReturnIdsArrayBox(AndroidX.Sqlite.ISQLiteConnection! connection, Java.Lang.Object![]? entities) -> Java.Lang.Long![]!
AndroidX.Room.EntityInsertAdapter.InsertAndReturnIdsArrayBox(AndroidX.Sqlite.ISQLiteConnection! connection, System.Collections.ICollection? entities) -> Java.Lang.Long![]!
AndroidX.Room.EntityInsertAdapter.InsertAndReturnIdsList(AndroidX.Sqlite.ISQLiteConnection! connection, Java.Lang.Object![]? entities) -> System.Collections.Generic.IList<Java.Lang.Long!>!
AndroidX.Room.EntityInsertAdapter.InsertAndReturnIdsList(AndroidX.Sqlite.ISQLiteConnection! connection, System.Collections.ICollection? entities) -> System.Collections.Generic.IList<Java.Lang.Long!>!
AndroidX.Room.EntityInsertionAdapter
AndroidX.Room.EntityInsertionAdapter.EntityInsertionAdapter(AndroidX.Room.RoomDatabase! database) -> void
AndroidX.Room.EntityInsertionAdapter.EntityInsertionAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.EntityInsertionAdapter.Insert(Java.Lang.IIterable! entities) -> void
AndroidX.Room.EntityInsertionAdapter.Insert(Java.Lang.Object![]! entities) -> void
AndroidX.Room.EntityInsertionAdapter.Insert(Java.Lang.Object? entity) -> void
AndroidX.Room.EntityInsertionAdapter.InsertAndReturnId(Java.Lang.Object? entity) -> long
AndroidX.Room.EntityInsertionAdapter.InsertAndReturnIdsArray(Java.Lang.Object![]! entities) -> long[]!
AndroidX.Room.EntityInsertionAdapter.InsertAndReturnIdsArray(System.Collections.ICollection! entities) -> long[]!
AndroidX.Room.EntityInsertionAdapter.InsertAndReturnIdsArrayBox(Java.Lang.Object![]! entities) -> Java.Lang.Long![]!
AndroidX.Room.EntityInsertionAdapter.InsertAndReturnIdsArrayBox(System.Collections.ICollection! entities) -> Java.Lang.Long![]!
AndroidX.Room.EntityInsertionAdapter.InsertAndReturnIdsList(Java.Lang.Object![]! entities) -> System.Collections.Generic.IList<Java.Lang.Long!>!
AndroidX.Room.EntityInsertionAdapter.InsertAndReturnIdsList(System.Collections.ICollection! entities) -> System.Collections.Generic.IList<Java.Lang.Long!>!
AndroidX.Room.EntityUpsertAdapter
AndroidX.Room.EntityUpsertAdapter.Companion
AndroidX.Room.EntityUpsertAdapter.EntityUpsertAdapter(AndroidX.Room.EntityInsertAdapter! entityInsertAdapter, AndroidX.Room.EntityDeleteOrUpdateAdapter! updateAdapter) -> void
AndroidX.Room.EntityUpsertAdapter.Upsert(AndroidX.Sqlite.ISQLiteConnection! connection, Java.Lang.IIterable? entities) -> void
AndroidX.Room.EntityUpsertAdapter.Upsert(AndroidX.Sqlite.ISQLiteConnection! connection, Java.Lang.Object![]? entities) -> void
AndroidX.Room.EntityUpsertAdapter.Upsert(AndroidX.Sqlite.ISQLiteConnection! connection, Java.Lang.Object? entity) -> void
AndroidX.Room.EntityUpsertAdapter.UpsertAndReturnId(AndroidX.Sqlite.ISQLiteConnection! connection, Java.Lang.Object? entity) -> long
AndroidX.Room.EntityUpsertAdapter.UpsertAndReturnIdsArray(AndroidX.Sqlite.ISQLiteConnection! connection, Java.Lang.Object![]? entities) -> long[]!
AndroidX.Room.EntityUpsertAdapter.UpsertAndReturnIdsArray(AndroidX.Sqlite.ISQLiteConnection! connection, System.Collections.ICollection? entities) -> long[]!
AndroidX.Room.EntityUpsertAdapter.UpsertAndReturnIdsArrayBox(AndroidX.Sqlite.ISQLiteConnection! connection, Java.Lang.Object![]? entities) -> Java.Lang.Long![]!
AndroidX.Room.EntityUpsertAdapter.UpsertAndReturnIdsArrayBox(AndroidX.Sqlite.ISQLiteConnection! connection, System.Collections.ICollection? entities) -> Java.Lang.Long![]!
AndroidX.Room.EntityUpsertAdapter.UpsertAndReturnIdsList(AndroidX.Sqlite.ISQLiteConnection! connection, Java.Lang.Object![]? entities) -> System.Collections.Generic.IList<Java.Lang.Long!>!
AndroidX.Room.EntityUpsertAdapter.UpsertAndReturnIdsList(AndroidX.Sqlite.ISQLiteConnection! connection, System.Collections.ICollection? entities) -> System.Collections.Generic.IList<Java.Lang.Long!>!
AndroidX.Room.EntityUpsertionAdapter
AndroidX.Room.EntityUpsertionAdapter.EntityUpsertionAdapter(AndroidX.Room.EntityInsertionAdapter! insertionAdapter, AndroidX.Room.EntityDeletionOrUpdateAdapter! updateAdapter) -> void
AndroidX.Room.EntityUpsertionAdapter.Upsert(Java.Lang.IIterable! entities) -> void
AndroidX.Room.EntityUpsertionAdapter.Upsert(Java.Lang.Object![]! entities) -> void
AndroidX.Room.EntityUpsertionAdapter.Upsert(Java.Lang.Object? entity) -> void
AndroidX.Room.EntityUpsertionAdapter.UpsertAndReturnId(Java.Lang.Object? entity) -> long
AndroidX.Room.EntityUpsertionAdapter.UpsertAndReturnIdsArray(Java.Lang.Object![]! entities) -> long[]!
AndroidX.Room.EntityUpsertionAdapter.UpsertAndReturnIdsArray(System.Collections.ICollection! entities) -> long[]!
AndroidX.Room.EntityUpsertionAdapter.UpsertAndReturnIdsArrayBox(Java.Lang.Object![]! entities) -> Java.Lang.Long![]!
AndroidX.Room.EntityUpsertionAdapter.UpsertAndReturnIdsArrayBox(System.Collections.ICollection! entities) -> Java.Lang.Long![]!
AndroidX.Room.EntityUpsertionAdapter.UpsertAndReturnIdsList(Java.Lang.Object![]! entities) -> System.Collections.Generic.IList<Java.Lang.Long!>!
AndroidX.Room.EntityUpsertionAdapter.UpsertAndReturnIdsList(System.Collections.ICollection! entities) -> System.Collections.Generic.IList<Java.Lang.Long!>!
AndroidX.Room.EntityUpsertionAdapter_androidKt
AndroidX.Room.ExperimentalRoomApiAttribute
AndroidX.Room.ExperimentalRoomApiAttribute.ExperimentalRoomApiAttribute() -> void
AndroidX.Room.IExperimentalRoomApi
AndroidX.Room.IMultiInstanceInvalidationCallback
AndroidX.Room.IMultiInstanceInvalidationCallback.Descriptor.get -> string?
AndroidX.Room.IMultiInstanceInvalidationCallback.OnInvalidation(string![]? p0) -> void
AndroidX.Room.IMultiInstanceInvalidationServiceInterface
AndroidX.Room.IMultiInstanceInvalidationServiceInterface.BroadcastInvalidation(int p0, string![]? p1) -> void
AndroidX.Room.IMultiInstanceInvalidationServiceInterface.Descriptor.get -> string?
AndroidX.Room.IMultiInstanceInvalidationServiceInterface.RegisterCallback(AndroidX.Room.IMultiInstanceInvalidationCallback? p0, string? p1) -> int
AndroidX.Room.IMultiInstanceInvalidationServiceInterface.UnregisterCallback(AndroidX.Room.IMultiInstanceInvalidationCallback? p0, int p1) -> void
AndroidX.Room.IPooledConnection
AndroidX.Room.IPooledConnection.UsePrepared(string! sql, Kotlin.Jvm.Functions.IFunction1! block, Kotlin.Coroutines.IContinuation! p2) -> Java.Lang.Object?
AndroidX.Room.IRoomDatabaseConstructor
AndroidX.Room.IRoomDatabaseConstructor.Initialize() -> Java.Lang.Object!
AndroidX.Room.IRoomOpenDelegateMarker
AndroidX.Room.ITransactionScope
AndroidX.Room.ITransactionScope.Rollback(Java.Lang.Object? result, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
AndroidX.Room.ITransactionScope.WithNestedTransaction(Kotlin.Jvm.Functions.IFunction2! block, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
AndroidX.Room.ITransactor
AndroidX.Room.ITransactor.InTransaction(Kotlin.Coroutines.IContinuation! p0) -> Java.Lang.Object?
AndroidX.Room.ITransactor.WithTransaction(AndroidX.Room.TransactorSQLiteTransactionType! type, Kotlin.Jvm.Functions.IFunction2! block, Kotlin.Coroutines.IContinuation! p2) -> Java.Lang.Object?
AndroidX.Room.InvalidationTracker
AndroidX.Room.InvalidationTracker.Companion
AndroidX.Room.InvalidationTracker.CreateFlow(params string![]! tables) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
AndroidX.Room.InvalidationTracker.CreateFlow(string![]! tables, bool emitInitialState) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
AndroidX.Room.InvalidationTracker.InvalidationTracker(AndroidX.Room.RoomDatabase! database, System.Collections.Generic.IDictionary<string!, string!>! shadowTablesMap, System.Collections.Generic.IDictionary<string!, System.Collections.Generic.ICollection<string!>!>! viewTables, params string![]! tableNames) -> void
AndroidX.Room.InvalidationTracker.InvalidationTracker(AndroidX.Room.RoomDatabase! database, params string![]! tableNames) -> void
AndroidX.Room.InvalidationTracker.InvalidationTracker(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.InvalidationTracker.Observer
AndroidX.Room.InvalidationTracker.Observer.Observer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.InvalidationTracker.Observer.Observer(string! firstTable, params string![]! rest) -> void
AndroidX.Room.InvalidationTracker.Observer.Observer(string![]! tables) -> void
AndroidX.Room.InvalidationTracker.Refresh(string![]! tables, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
AndroidX.Room.InvalidationTracker.RefreshAsync() -> void
AndroidX.Room.Migration.IAutoMigrationSpec
AndroidX.Room.Migration.IAutoMigrationSpec.OnPostMigrate(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> void
AndroidX.Room.Migration.IAutoMigrationSpec.OnPostMigrate(AndroidX.Sqlite.ISQLiteConnection! connection) -> void
AndroidX.Room.Migration.Migration
AndroidX.Room.Migration.Migration.EndVersion.get -> int
AndroidX.Room.Migration.Migration.EndVersion.set -> void
AndroidX.Room.Migration.Migration.Migration(int startVersion, int endVersion) -> void
AndroidX.Room.Migration.Migration.Migration(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.Migration.Migration.StartVersion.get -> int
AndroidX.Room.Migration.Migration.StartVersion.set -> void
AndroidX.Room.Migration.MigrationKt
AndroidX.Room.MultiInstanceInvalidationCallback
AndroidX.Room.MultiInstanceInvalidationCallbackConsts
AndroidX.Room.MultiInstanceInvalidationCallbackDefault
AndroidX.Room.MultiInstanceInvalidationCallbackDefault.InterfaceConsts
AndroidX.Room.MultiInstanceInvalidationCallbackDefault.MultiInstanceInvalidationCallbackDefault() -> void
AndroidX.Room.MultiInstanceInvalidationCallbackDefault.MultiInstanceInvalidationCallbackDefault(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.MultiInstanceInvalidationCallbackStub
AndroidX.Room.MultiInstanceInvalidationCallbackStub.InterfaceConsts
AndroidX.Room.MultiInstanceInvalidationCallbackStub.MultiInstanceInvalidationCallbackStub() -> void
AndroidX.Room.MultiInstanceInvalidationCallbackStub.MultiInstanceInvalidationCallbackStub(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.MultiInstanceInvalidationService
AndroidX.Room.MultiInstanceInvalidationService.MultiInstanceInvalidationService() -> void
AndroidX.Room.MultiInstanceInvalidationServiceInterfaceConsts
AndroidX.Room.MultiInstanceInvalidationServiceInterfaceDefault
AndroidX.Room.MultiInstanceInvalidationServiceInterfaceDefault.InterfaceConsts
AndroidX.Room.MultiInstanceInvalidationServiceInterfaceDefault.MultiInstanceInvalidationServiceInterfaceDefault() -> void
AndroidX.Room.MultiInstanceInvalidationServiceInterfaceDefault.MultiInstanceInvalidationServiceInterfaceDefault(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.MultiInstanceInvalidationServiceInterfaceStub
AndroidX.Room.MultiInstanceInvalidationServiceInterfaceStub.InterfaceConsts
AndroidX.Room.MultiInstanceInvalidationServiceInterfaceStub.MultiInstanceInvalidationServiceInterfaceStub() -> void
AndroidX.Room.MultiInstanceInvalidationServiceInterfaceStub.MultiInstanceInvalidationServiceInterfaceStub(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.Paging.CursorSQLiteStatement
AndroidX.Room.Paging.CursorSQLiteStatement.BindBlob(int index, byte[]! value) -> void
AndroidX.Room.Paging.CursorSQLiteStatement.BindDouble(int index, double value) -> void
AndroidX.Room.Paging.CursorSQLiteStatement.BindLong(int index, long value) -> void
AndroidX.Room.Paging.CursorSQLiteStatement.BindNull(int index) -> void
AndroidX.Room.Paging.CursorSQLiteStatement.BindText(int index, string! value) -> void
AndroidX.Room.Paging.CursorSQLiteStatement.ClearBindings() -> void
AndroidX.Room.Paging.CursorSQLiteStatement.Close() -> void
AndroidX.Room.Paging.CursorSQLiteStatement.ColumnCount.get -> int
AndroidX.Room.Paging.CursorSQLiteStatement.Companion
AndroidX.Room.Paging.CursorSQLiteStatement.CursorSQLiteStatement(Android.Database.ICursor! cursor) -> void
AndroidX.Room.Paging.CursorSQLiteStatement.GetBlob(int index) -> byte[]!
AndroidX.Room.Paging.CursorSQLiteStatement.GetColumnName(int index) -> string!
AndroidX.Room.Paging.CursorSQLiteStatement.GetColumnType(int index) -> int
AndroidX.Room.Paging.CursorSQLiteStatement.GetDouble(int index) -> double
AndroidX.Room.Paging.CursorSQLiteStatement.GetLong(int index) -> long
AndroidX.Room.Paging.CursorSQLiteStatement.GetText(int index) -> string!
AndroidX.Room.Paging.CursorSQLiteStatement.IsNull(int index) -> bool
AndroidX.Room.Paging.CursorSQLiteStatement.Reset() -> void
AndroidX.Room.Paging.CursorSQLiteStatement.Step() -> bool
AndroidX.Room.Room
AndroidX.Room.RoomDatabase
AndroidX.Room.RoomDatabase.Builder
AndroidX.Room.RoomDatabase.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.RoomDatabase.Builder.FallbackToDestructiveMigration(bool dropAllTables) -> AndroidX.Room.RoomDatabase.Builder!
AndroidX.Room.RoomDatabase.Builder.FallbackToDestructiveMigrationOnDowngrade(bool dropAllTables) -> AndroidX.Room.RoomDatabase.Builder!
AndroidX.Room.RoomDatabase.Builder.SetDriver(AndroidX.Sqlite.ISQLiteDriver! driver) -> AndroidX.Room.RoomDatabase.Builder!
AndroidX.Room.RoomDatabase.Builder.SetInMemoryTrackingMode(bool inMemory) -> AndroidX.Room.RoomDatabase.Builder!
AndroidX.Room.RoomDatabase.Builder.SetQueryCallback(Kotlin.Coroutines.ICoroutineContext! context, AndroidX.Room.RoomDatabase.IQueryCallback! queryCallback) -> AndroidX.Room.RoomDatabase.Builder!
AndroidX.Room.RoomDatabase.Builder.SetQueryCoroutineContext(Kotlin.Coroutines.ICoroutineContext! context) -> AndroidX.Room.RoomDatabase.Builder!
AndroidX.Room.RoomDatabase.Callback
AndroidX.Room.RoomDatabase.Callback.Callback() -> void
AndroidX.Room.RoomDatabase.Callback.Callback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.RoomDatabase.Companion
AndroidX.Room.RoomDatabase.CoroutineScope.get -> Xamarin.KotlinX.Coroutines.ICoroutineScope!
AndroidX.Room.RoomDatabase.Driver.get -> AndroidX.Sqlite.ISQLiteDriver!
AndroidX.Room.RoomDatabase.GetTypeConverter(Kotlin.Reflect.IKClass! klass) -> Java.Lang.Object!
AndroidX.Room.RoomDatabase.IQueryCallback
AndroidX.Room.RoomDatabase.IQueryCallback.OnQuery(string! sqlQuery, System.Collections.Generic.IList<Java.Lang.Object!>! bindArgs) -> void
AndroidX.Room.RoomDatabase.InCompatibilityMode() -> bool
AndroidX.Room.RoomDatabase.InternalInitInvalidationTracker(AndroidX.Sqlite.ISQLiteConnection! connection) -> void
AndroidX.Room.RoomDatabase.JournalMode
AndroidX.Room.RoomDatabase.MCallbacks.get -> System.Collections.IList?
AndroidX.Room.RoomDatabase.MCallbacks.set -> void
AndroidX.Room.RoomDatabase.MDatabase.get -> AndroidX.Sqlite.Db.ISupportSQLiteDatabase?
AndroidX.Room.RoomDatabase.MDatabase.set -> void
AndroidX.Room.RoomDatabase.MigrationContainer
AndroidX.Room.RoomDatabase.MigrationContainer.AddMigration(AndroidX.Room.Migration.Migration! migration) -> void
AndroidX.Room.RoomDatabase.MigrationContainer.Contains(int startVersion, int endVersion) -> bool
AndroidX.Room.RoomDatabase.MigrationContainer.MigrationContainer() -> void
AndroidX.Room.RoomDatabase.MigrationContainer.MigrationContainer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.RoomDatabase.Path.get -> string?
AndroidX.Room.RoomDatabase.PerformClear(bool hasForeignKeys, params string![]! tableNames) -> void
AndroidX.Room.RoomDatabase.PrepackagedDatabaseCallback
AndroidX.Room.RoomDatabase.PrepackagedDatabaseCallback.PrepackagedDatabaseCallback() -> void
AndroidX.Room.RoomDatabase.PrepackagedDatabaseCallback.PrepackagedDatabaseCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.RoomDatabase.Query(AndroidX.Sqlite.Db.ISupportSQLiteQuery! query) -> Android.Database.ICursor!
AndroidX.Room.RoomDatabase.QueryContext.get -> Kotlin.Coroutines.ICoroutineContext!
AndroidX.Room.RoomDatabase.RoomDatabase() -> void
AndroidX.Room.RoomDatabase.RoomDatabase(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.RoomDatabase.SuspendingTransactionContext.get -> Java.Lang.ThreadLocal!
AndroidX.Room.RoomDatabase.UseConnection(bool isReadOnly, Kotlin.Jvm.Functions.IFunction2! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
AndroidX.Room.RoomDatabaseKt
AndroidX.Room.RoomOpenDelegate
AndroidX.Room.RoomOpenDelegate.IdentityHash.get -> string!
AndroidX.Room.RoomOpenDelegate.LegacyIdentityHash.get -> string!
AndroidX.Room.RoomOpenDelegate.RoomOpenDelegate(int version, string! identityHash, string! legacyIdentityHash) -> void
AndroidX.Room.RoomOpenDelegate.RoomOpenDelegate(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.RoomOpenDelegate.ValidationResult
AndroidX.Room.RoomOpenDelegate.ValidationResult.ExpectedFoundMsg.get -> string?
AndroidX.Room.RoomOpenDelegate.ValidationResult.ExpectedFoundMsg.set -> void
AndroidX.Room.RoomOpenDelegate.ValidationResult.IsValid.get -> bool
AndroidX.Room.RoomOpenDelegate.ValidationResult.IsValid.set -> void
AndroidX.Room.RoomOpenDelegate.ValidationResult.ValidationResult(bool isValid, string? expectedFoundMsg) -> void
AndroidX.Room.RoomOpenDelegate.Version.get -> int
AndroidX.Room.RoomOpenHelper
AndroidX.Room.RoomOpenHelper.CallbackDelegate
AndroidX.Room.RoomOpenHelper.CallbackDelegate.CallbackDelegate(int version) -> void
AndroidX.Room.RoomOpenHelper.CallbackDelegate.CallbackDelegate(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.RoomOpenHelper.CallbackDelegate.Version.get -> int
AndroidX.Room.RoomOpenHelper.CallbackDelegate.Version.set -> void
AndroidX.Room.RoomOpenHelper.Companion
AndroidX.Room.RoomOpenHelper.RoomOpenHelper(AndroidX.Room.DatabaseConfiguration! configuration, AndroidX.Room.RoomOpenHelper.CallbackDelegate! delegate, string! identityHash, string! legacyHash) -> void
AndroidX.Room.RoomOpenHelper.RoomOpenHelper(AndroidX.Room.DatabaseConfiguration! configuration, AndroidX.Room.RoomOpenHelper.CallbackDelegate! delegate, string! legacyHash) -> void
AndroidX.Room.RoomOpenHelper.RoomOpenHelper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.RoomOpenHelper.ValidationResult
AndroidX.Room.RoomOpenHelper.ValidationResult.ExpectedFoundMsg.get -> string?
AndroidX.Room.RoomOpenHelper.ValidationResult.ExpectedFoundMsg.set -> void
AndroidX.Room.RoomOpenHelper.ValidationResult.IsValid.get -> bool
AndroidX.Room.RoomOpenHelper.ValidationResult.IsValid.set -> void
AndroidX.Room.RoomOpenHelper.ValidationResult.ValidationResult(bool isValid, string? expectedFoundMsg) -> void
AndroidX.Room.RoomOpenHelper.ValidationResult.ValidationResult(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.RoomRawQuery
AndroidX.Room.RoomRawQuery.BindingFunction.get -> Kotlin.Jvm.Functions.IFunction1!
AndroidX.Room.RoomRawQuery.RoomRawQuery(string! sql) -> void
AndroidX.Room.RoomRawQuery.RoomRawQuery(string! sql, Kotlin.Jvm.Functions.IFunction1! onBindStatement) -> void
AndroidX.Room.RoomRawQuery.Sql.get -> string!
AndroidX.Room.RoomSQLiteQuery
AndroidX.Room.RoomSQLiteQuery.ArgCount.get -> int
AndroidX.Room.RoomSQLiteQuery.BindBlob(int index, byte[]! value) -> void
AndroidX.Room.RoomSQLiteQuery.BindDouble(int index, double value) -> void
AndroidX.Room.RoomSQLiteQuery.BindLong(int index, long value) -> void
AndroidX.Room.RoomSQLiteQuery.BindNull(int index) -> void
AndroidX.Room.RoomSQLiteQuery.BindString(int index, string! value) -> void
AndroidX.Room.RoomSQLiteQuery.BindText(int index, string! value) -> void
AndroidX.Room.RoomSQLiteQuery.BindTo(AndroidX.Sqlite.Db.ISupportSQLiteProgram! statement) -> void
AndroidX.Room.RoomSQLiteQuery.BindTo(AndroidX.Sqlite.ISQLiteStatement! statement) -> void
AndroidX.Room.RoomSQLiteQuery.BlobBindings.get -> System.Collections.Generic.IList<byte[]!>?
AndroidX.Room.RoomSQLiteQuery.BlobBindings.set -> void
AndroidX.Room.RoomSQLiteQuery.Capacity.get -> int
AndroidX.Room.RoomSQLiteQuery.ClearBindings() -> void
AndroidX.Room.RoomSQLiteQuery.Close() -> void
AndroidX.Room.RoomSQLiteQuery.Companion
AndroidX.Room.RoomSQLiteQuery.Companion.Acquire(string! query, int argumentCount) -> AndroidX.Room.RoomSQLiteQuery!
AndroidX.Room.RoomSQLiteQuery.Companion.CopyFrom(AndroidX.Sqlite.Db.ISupportSQLiteQuery! supportSQLiteQuery) -> AndroidX.Room.RoomSQLiteQuery!
AndroidX.Room.RoomSQLiteQuery.CopyArgumentsFrom(AndroidX.Room.RoomSQLiteQuery! other) -> void
AndroidX.Room.RoomSQLiteQuery.DoubleBindings.get -> System.Collections.Generic.IList<double>?
AndroidX.Room.RoomSQLiteQuery.DoubleBindings.set -> void
AndroidX.Room.RoomSQLiteQuery.Init(string! query, int initArgCount) -> void
AndroidX.Room.RoomSQLiteQuery.LongBindings.get -> System.Collections.Generic.IList<long>?
AndroidX.Room.RoomSQLiteQuery.LongBindings.set -> void
AndroidX.Room.RoomSQLiteQuery.Release() -> void
AndroidX.Room.RoomSQLiteQuery.Sql.get -> string!
AndroidX.Room.RoomSQLiteQuery.StringBindings.get -> System.Collections.Generic.IList<string!>?
AndroidX.Room.RoomSQLiteQuery.StringBindings.set -> void
AndroidX.Room.RoomSQLiteQuery.ToRoomRawQuery() -> AndroidX.Room.RoomRawQuery!
AndroidX.Room.SharedSQLiteStatement
AndroidX.Room.SharedSQLiteStatement.SharedSQLiteStatement(AndroidX.Room.RoomDatabase! database) -> void
AndroidX.Room.SharedSQLiteStatement.SharedSQLiteStatement(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Room.TransactorKt
AndroidX.Room.TransactorSQLiteTransactionType
AndroidX.Room.Util.ByteArrayWrapper
AndroidX.Room.Util.ByteArrayWrapper.Array.get -> System.Collections.Generic.IList<byte>?
AndroidX.Room.Util.ByteArrayWrapper.Array.set -> void
AndroidX.Room.Util.ByteArrayWrapper.ByteArrayWrapper(byte[]! array) -> void
AndroidX.Room.Util.CursorUtil
AndroidX.Room.Util.DBUtil
AndroidX.Room.Util.FileUtil
AndroidX.Room.Util.FtsTableInfo
AndroidX.Room.Util.FtsTableInfo.Columns.get -> System.Collections.ICollection!
AndroidX.Room.Util.FtsTableInfo.Columns.set -> void
AndroidX.Room.Util.FtsTableInfo.Companion
AndroidX.Room.Util.FtsTableInfo.Companion.Read(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! database, string! tableName) -> AndroidX.Room.Util.FtsTableInfo!
AndroidX.Room.Util.FtsTableInfo.Companion.Read(AndroidX.Sqlite.ISQLiteConnection! connection, string! tableName) -> AndroidX.Room.Util.FtsTableInfo!
AndroidX.Room.Util.FtsTableInfo.FtsTableInfo(string! name, System.Collections.Generic.ICollection<string!>! columns, System.Collections.Generic.ICollection<string!>! options) -> void
AndroidX.Room.Util.FtsTableInfo.FtsTableInfo(string! name, System.Collections.Generic.ICollection<string!>! columns, string! createSql) -> void
AndroidX.Room.Util.FtsTableInfo.Name.get -> string!
AndroidX.Room.Util.FtsTableInfo.Name.set -> void
AndroidX.Room.Util.FtsTableInfo.Options.get -> System.Collections.ICollection!
AndroidX.Room.Util.FtsTableInfo.Options.set -> void
AndroidX.Room.Util.FtsTableInfoKt
AndroidX.Room.Util.KClassUtil
AndroidX.Room.Util.MigrationUtil
AndroidX.Room.Util.RelationUtil
AndroidX.Room.Util.SQLiteConnectionUtil
AndroidX.Room.Util.SQLiteStatementUtil
AndroidX.Room.Util.SchemaInfoUtilKt
AndroidX.Room.Util.StringUtil
AndroidX.Room.Util.TableInfo
AndroidX.Room.Util.TableInfo.Column
AndroidX.Room.Util.TableInfo.Column.Affinity.get -> int
AndroidX.Room.Util.TableInfo.Column.Affinity.set -> void
AndroidX.Room.Util.TableInfo.Column.Column(string! name, string! type, bool notNull, int primaryKeyPosition) -> void
AndroidX.Room.Util.TableInfo.Column.Column(string! name, string! type, bool notNull, int primaryKeyPosition, string? defaultValue, int createdFrom) -> void
AndroidX.Room.Util.TableInfo.Column.Companion
AndroidX.Room.Util.TableInfo.Column.Companion.DefaultValueEquals(string! current, string? other) -> bool
AndroidX.Room.Util.TableInfo.Column.CreatedFrom.get -> int
AndroidX.Room.Util.TableInfo.Column.CreatedFrom.set -> void
AndroidX.Room.Util.TableInfo.Column.DefaultValue.get -> string?
AndroidX.Room.Util.TableInfo.Column.DefaultValue.set -> void
AndroidX.Room.Util.TableInfo.Column.IsPrimaryKey.get -> bool
AndroidX.Room.Util.TableInfo.Column.Name.get -> string!
AndroidX.Room.Util.TableInfo.Column.Name.set -> void
AndroidX.Room.Util.TableInfo.Column.NotNull.get -> bool
AndroidX.Room.Util.TableInfo.Column.NotNull.set -> void
AndroidX.Room.Util.TableInfo.Column.PrimaryKeyPosition.get -> int
AndroidX.Room.Util.TableInfo.Column.PrimaryKeyPosition.set -> void
AndroidX.Room.Util.TableInfo.Column.Type.get -> string!
AndroidX.Room.Util.TableInfo.Column.Type.set -> void
AndroidX.Room.Util.TableInfo.Columns.get -> System.Collections.IDictionary!
AndroidX.Room.Util.TableInfo.Columns.set -> void
AndroidX.Room.Util.TableInfo.Companion
AndroidX.Room.Util.TableInfo.Companion.Read(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! database, string! tableName) -> AndroidX.Room.Util.TableInfo!
AndroidX.Room.Util.TableInfo.Companion.Read(AndroidX.Sqlite.ISQLiteConnection! connection, string! tableName) -> AndroidX.Room.Util.TableInfo!
AndroidX.Room.Util.TableInfo.ForeignKey
AndroidX.Room.Util.TableInfo.ForeignKey.ColumnNames.get -> System.Collections.IList!
AndroidX.Room.Util.TableInfo.ForeignKey.ColumnNames.set -> void
AndroidX.Room.Util.TableInfo.ForeignKey.ForeignKey(string! referenceTable, string! onDelete, string! onUpdate, System.Collections.Generic.IList<string!>! columnNames, System.Collections.Generic.IList<string!>! referenceColumnNames) -> void
AndroidX.Room.Util.TableInfo.ForeignKey.OnDelete.get -> string!
AndroidX.Room.Util.TableInfo.ForeignKey.OnDelete.set -> void
AndroidX.Room.Util.TableInfo.ForeignKey.OnUpdate.get -> string!
AndroidX.Room.Util.TableInfo.ForeignKey.OnUpdate.set -> void
AndroidX.Room.Util.TableInfo.ForeignKey.ReferenceColumnNames.get -> System.Collections.IList!
AndroidX.Room.Util.TableInfo.ForeignKey.ReferenceColumnNames.set -> void
AndroidX.Room.Util.TableInfo.ForeignKey.ReferenceTable.get -> string!
AndroidX.Room.Util.TableInfo.ForeignKey.ReferenceTable.set -> void
AndroidX.Room.Util.TableInfo.ForeignKeys.get -> System.Collections.ICollection!
AndroidX.Room.Util.TableInfo.ForeignKeys.set -> void
AndroidX.Room.Util.TableInfo.Index
AndroidX.Room.Util.TableInfo.Index.Columns.get -> System.Collections.IList!
AndroidX.Room.Util.TableInfo.Index.Columns.set -> void
AndroidX.Room.Util.TableInfo.Index.Companion
AndroidX.Room.Util.TableInfo.Index.Index(string! name, bool unique, System.Collections.Generic.IList<string!>! columns) -> void
AndroidX.Room.Util.TableInfo.Index.Index(string! name, bool unique, System.Collections.Generic.IList<string!>! columns, System.Collections.Generic.IList<string!>! orders) -> void
AndroidX.Room.Util.TableInfo.Index.Name.get -> string!
AndroidX.Room.Util.TableInfo.Index.Name.set -> void
AndroidX.Room.Util.TableInfo.Index.Orders.get -> System.Collections.IList!
AndroidX.Room.Util.TableInfo.Index.Orders.set -> void
AndroidX.Room.Util.TableInfo.Index.Unique.get -> bool
AndroidX.Room.Util.TableInfo.Index.Unique.set -> void
AndroidX.Room.Util.TableInfo.Indices.get -> System.Collections.ICollection?
AndroidX.Room.Util.TableInfo.Indices.set -> void
AndroidX.Room.Util.TableInfo.Name.get -> string!
AndroidX.Room.Util.TableInfo.Name.set -> void
AndroidX.Room.Util.TableInfo.TableInfo(string! name, System.Collections.Generic.IDictionary<string!, AndroidX.Room.Util.TableInfo.Column!>! columns, System.Collections.Generic.ICollection<AndroidX.Room.Util.TableInfo.ForeignKey!>! foreignKeys) -> void
AndroidX.Room.Util.TableInfo.TableInfo(string! name, System.Collections.Generic.IDictionary<string!, AndroidX.Room.Util.TableInfo.Column!>! columns, System.Collections.Generic.ICollection<AndroidX.Room.Util.TableInfo.ForeignKey!>! foreignKeys, System.Collections.Generic.ICollection<AndroidX.Room.Util.TableInfo.Index!>? indices) -> void
AndroidX.Room.Util.TableInfoKt
AndroidX.Room.Util.UUIDUtil
AndroidX.Room.Util.ViewInfo
AndroidX.Room.Util.ViewInfo.Companion
AndroidX.Room.Util.ViewInfo.Companion.Read(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! database, string! viewName) -> AndroidX.Room.Util.ViewInfo!
AndroidX.Room.Util.ViewInfo.Companion.Read(AndroidX.Sqlite.ISQLiteConnection! connection, string! viewName) -> AndroidX.Room.Util.ViewInfo!
AndroidX.Room.Util.ViewInfo.Name.get -> string!
AndroidX.Room.Util.ViewInfo.Name.set -> void
AndroidX.Room.Util.ViewInfo.Sql.get -> string?
AndroidX.Room.Util.ViewInfo.Sql.set -> void
AndroidX.Room.Util.ViewInfo.ViewInfo(string! name, string? sql) -> void
AndroidX.Room.Util.ViewInfoKt
abstract AndroidX.Room.BaseRoomConnectionManager.Callbacks.get -> System.Collections.Generic.IList<AndroidX.Room.RoomDatabase.Callback!>!
abstract AndroidX.Room.BaseRoomConnectionManager.Configuration.get -> AndroidX.Room.DatabaseConfiguration!
abstract AndroidX.Room.BaseRoomConnectionManager.OpenDelegate.get -> AndroidX.Room.RoomOpenDelegate!
abstract AndroidX.Room.BaseRoomConnectionManager.UseConnection(bool isReadOnly, Kotlin.Jvm.Functions.IFunction2! block, Kotlin.Coroutines.IContinuation! p2) -> Java.Lang.Object?
abstract AndroidX.Room.EntityDeleteOrUpdateAdapter.Bind(AndroidX.Sqlite.ISQLiteStatement! statement, Java.Lang.Object? entity) -> void
abstract AndroidX.Room.EntityDeleteOrUpdateAdapter.CreateQuery() -> string!
abstract AndroidX.Room.EntityDeletionOrUpdateAdapter.Bind(AndroidX.Sqlite.Db.ISupportSQLiteStatement! statement, Java.Lang.Object? entity) -> void
abstract AndroidX.Room.EntityInsertAdapter.Bind(AndroidX.Sqlite.ISQLiteStatement! statement, Java.Lang.Object? entity) -> void
abstract AndroidX.Room.EntityInsertAdapter.CreateQuery() -> string!
abstract AndroidX.Room.EntityInsertionAdapter.Bind(AndroidX.Sqlite.Db.ISupportSQLiteStatement! statement, Java.Lang.Object? entity) -> void
abstract AndroidX.Room.InvalidationTracker.Observer.OnInvalidated(System.Collections.Generic.ICollection<string!>! tables) -> void
abstract AndroidX.Room.MultiInstanceInvalidationCallbackStub.OnInvalidation(string![]? p0) -> void
abstract AndroidX.Room.MultiInstanceInvalidationServiceInterfaceStub.BroadcastInvalidation(int p0, string![]? p1) -> void
abstract AndroidX.Room.MultiInstanceInvalidationServiceInterfaceStub.RegisterCallback(AndroidX.Room.IMultiInstanceInvalidationCallback? p0, string? p1) -> int
abstract AndroidX.Room.MultiInstanceInvalidationServiceInterfaceStub.UnregisterCallback(AndroidX.Room.IMultiInstanceInvalidationCallback? p0, int p1) -> void
abstract AndroidX.Room.RoomDatabase.ClearAllTables() -> void
abstract AndroidX.Room.RoomDatabase.CreateInvalidationTracker() -> AndroidX.Room.InvalidationTracker!
abstract AndroidX.Room.RoomOpenDelegate.CreateAllTables(AndroidX.Sqlite.ISQLiteConnection! connection) -> void
abstract AndroidX.Room.RoomOpenDelegate.DropAllTables(AndroidX.Sqlite.ISQLiteConnection! connection) -> void
abstract AndroidX.Room.RoomOpenDelegate.OnCreate(AndroidX.Sqlite.ISQLiteConnection! connection) -> void
abstract AndroidX.Room.RoomOpenDelegate.OnOpen(AndroidX.Sqlite.ISQLiteConnection! connection) -> void
abstract AndroidX.Room.RoomOpenDelegate.OnPostMigrate(AndroidX.Sqlite.ISQLiteConnection! connection) -> void
abstract AndroidX.Room.RoomOpenDelegate.OnPreMigrate(AndroidX.Sqlite.ISQLiteConnection! connection) -> void
abstract AndroidX.Room.RoomOpenDelegate.OnValidateSchema(AndroidX.Sqlite.ISQLiteConnection! connection) -> AndroidX.Room.RoomOpenDelegate.ValidationResult!
abstract AndroidX.Room.RoomOpenHelper.CallbackDelegate.CreateAllTables(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> void
abstract AndroidX.Room.RoomOpenHelper.CallbackDelegate.DropAllTables(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> void
abstract AndroidX.Room.RoomOpenHelper.CallbackDelegate.OnCreate(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> void
abstract AndroidX.Room.RoomOpenHelper.CallbackDelegate.OnOpen(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> void
abstract AndroidX.Room.SharedSQLiteStatement.CreateQuery() -> string!
const AndroidX.Room.BaseRoomConnectionManager.BusyTimeoutMs = 3000 -> int
const AndroidX.Room.Room.MasterTableName = "room_master_table" -> string!
const AndroidX.Room.RoomDatabase.MaxBindParameterCnt = 999 -> int
const AndroidX.Room.RoomSQLiteQuery.DesiredPoolSize = 10 -> int
const AndroidX.Room.RoomSQLiteQuery.PoolLimit = 15 -> int
const AndroidX.Room.Util.RelationUtil.MaxBindParameterCnt = 999 -> int
const AndroidX.Room.Util.TableInfo.CreatedFromDatabase = 2 -> int
const AndroidX.Room.Util.TableInfo.CreatedFromEntity = 1 -> int
const AndroidX.Room.Util.TableInfo.CreatedFromUnknown = 0 -> int
const AndroidX.Room.Util.TableInfo.Index.DefaultPrefix = "index_" -> string!
override AndroidX.Room.BaseRoomConnectionManager.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.BaseRoomConnectionManager.DriverWrapper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.BaseRoomConnectionManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.BaseRoomConnectionManager.ThresholdClass.get -> nint
override AndroidX.Room.BaseRoomConnectionManager.ThresholdType.get -> System.Type!
override AndroidX.Room.BaseRoomConnectionManager.WhenMappings.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Concurrent.AtomicsKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Concurrent.Atomics_jvmAndroidKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Concurrent.CloseBarrierKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Concurrent.ReentrantLockKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Concurrent.ReentrantLock_jvmAndroidKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Concurrent.Synchronized_jvmAndroidKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Concurrent.ThreadLocal_jvmAndroidKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Coroutines.ConnectionPoolImplKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Coroutines.ConnectionPoolKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Coroutines.FlowUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Coroutines.PassthroughConnectionPoolKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Coroutines.RunBlockingUninterruptible_androidKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.CoroutinesRoom.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.CoroutinesRoom.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.DatabaseConfiguration.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.DatabaseConfiguration.ThresholdClass.get -> nint
override AndroidX.Room.DatabaseConfiguration.ThresholdType.get -> System.Type!
override AndroidX.Room.EntityDeleteOrUpdateAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.EntityDeleteOrUpdateAdapter.ThresholdClass.get -> nint
override AndroidX.Room.EntityDeleteOrUpdateAdapter.ThresholdType.get -> System.Type!
override AndroidX.Room.EntityDeletionOrUpdateAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.EntityDeletionOrUpdateAdapter.ThresholdClass.get -> nint
override AndroidX.Room.EntityDeletionOrUpdateAdapter.ThresholdType.get -> System.Type!
override AndroidX.Room.EntityInsertAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.EntityInsertAdapter.ThresholdClass.get -> nint
override AndroidX.Room.EntityInsertAdapter.ThresholdType.get -> System.Type!
override AndroidX.Room.EntityInsertionAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.EntityInsertionAdapter.ThresholdClass.get -> nint
override AndroidX.Room.EntityInsertionAdapter.ThresholdType.get -> System.Type!
override AndroidX.Room.EntityUpsertAdapter.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.EntityUpsertAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.EntityUpsertionAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.EntityUpsertionAdapter_androidKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.InvalidationTracker.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.InvalidationTracker.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.InvalidationTracker.Observer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.InvalidationTracker.Observer.ThresholdClass.get -> nint
override AndroidX.Room.InvalidationTracker.Observer.ThresholdType.get -> System.Type!
override AndroidX.Room.InvalidationTracker.ThresholdClass.get -> nint
override AndroidX.Room.InvalidationTracker.ThresholdType.get -> System.Type!
override AndroidX.Room.Migration.Migration.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Migration.Migration.ThresholdClass.get -> nint
override AndroidX.Room.Migration.Migration.ThresholdType.get -> System.Type!
override AndroidX.Room.Migration.MigrationKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.MultiInstanceInvalidationCallbackDefault.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.MultiInstanceInvalidationCallbackDefault.ThresholdClass.get -> nint
override AndroidX.Room.MultiInstanceInvalidationCallbackDefault.ThresholdType.get -> System.Type!
override AndroidX.Room.MultiInstanceInvalidationCallbackStub.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.MultiInstanceInvalidationCallbackStub.ThresholdClass.get -> nint
override AndroidX.Room.MultiInstanceInvalidationCallbackStub.ThresholdType.get -> System.Type!
override AndroidX.Room.MultiInstanceInvalidationService.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.MultiInstanceInvalidationService.OnBind(Android.Content.Intent! intent) -> Android.OS.IBinder!
override AndroidX.Room.MultiInstanceInvalidationServiceInterfaceDefault.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.MultiInstanceInvalidationServiceInterfaceDefault.ThresholdClass.get -> nint
override AndroidX.Room.MultiInstanceInvalidationServiceInterfaceDefault.ThresholdType.get -> System.Type!
override AndroidX.Room.MultiInstanceInvalidationServiceInterfaceStub.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.MultiInstanceInvalidationServiceInterfaceStub.ThresholdClass.get -> nint
override AndroidX.Room.MultiInstanceInvalidationServiceInterfaceStub.ThresholdType.get -> System.Type!
override AndroidX.Room.Paging.CursorSQLiteStatement.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Paging.CursorSQLiteStatement.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Room.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.RoomDatabase.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.RoomDatabase.Builder.ThresholdClass.get -> nint
override AndroidX.Room.RoomDatabase.Builder.ThresholdType.get -> System.Type!
override AndroidX.Room.RoomDatabase.Callback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.RoomDatabase.Callback.ThresholdClass.get -> nint
override AndroidX.Room.RoomDatabase.Callback.ThresholdType.get -> System.Type!
override AndroidX.Room.RoomDatabase.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.RoomDatabase.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.RoomDatabase.JournalMode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.RoomDatabase.MigrationContainer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.RoomDatabase.MigrationContainer.ThresholdClass.get -> nint
override AndroidX.Room.RoomDatabase.MigrationContainer.ThresholdType.get -> System.Type!
override AndroidX.Room.RoomDatabase.PrepackagedDatabaseCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.RoomDatabase.PrepackagedDatabaseCallback.ThresholdClass.get -> nint
override AndroidX.Room.RoomDatabase.PrepackagedDatabaseCallback.ThresholdType.get -> System.Type!
override AndroidX.Room.RoomDatabase.ThresholdClass.get -> nint
override AndroidX.Room.RoomDatabase.ThresholdType.get -> System.Type!
override AndroidX.Room.RoomDatabaseKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.RoomOpenDelegate.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.RoomOpenDelegate.ThresholdClass.get -> nint
override AndroidX.Room.RoomOpenDelegate.ThresholdType.get -> System.Type!
override AndroidX.Room.RoomOpenDelegate.ValidationResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.RoomOpenHelper.CallbackDelegate.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.RoomOpenHelper.CallbackDelegate.ThresholdClass.get -> nint
override AndroidX.Room.RoomOpenHelper.CallbackDelegate.ThresholdType.get -> System.Type!
override AndroidX.Room.RoomOpenHelper.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.RoomOpenHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.RoomOpenHelper.OnCreate(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> void
override AndroidX.Room.RoomOpenHelper.OnUpgrade(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db, int oldVersion, int newVersion) -> void
override AndroidX.Room.RoomOpenHelper.ThresholdClass.get -> nint
override AndroidX.Room.RoomOpenHelper.ThresholdType.get -> System.Type!
override AndroidX.Room.RoomOpenHelper.ValidationResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.RoomOpenHelper.ValidationResult.ThresholdClass.get -> nint
override AndroidX.Room.RoomOpenHelper.ValidationResult.ThresholdType.get -> System.Type!
override AndroidX.Room.RoomRawQuery.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.RoomSQLiteQuery.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.RoomSQLiteQuery.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.SharedSQLiteStatement.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.SharedSQLiteStatement.ThresholdClass.get -> nint
override AndroidX.Room.SharedSQLiteStatement.ThresholdType.get -> System.Type!
override AndroidX.Room.TransactorKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.TransactorSQLiteTransactionType.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.ByteArrayWrapper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.CursorUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.DBUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.FileUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.FtsTableInfo.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.FtsTableInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.FtsTableInfoKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.KClassUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.MigrationUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.RelationUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.SQLiteConnectionUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.SQLiteStatementUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.SchemaInfoUtilKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.StringUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.TableInfo.Column.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.TableInfo.Column.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.TableInfo.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.TableInfo.ForeignKey.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.TableInfo.Index.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.TableInfo.Index.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.TableInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.TableInfoKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.UUIDUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.ViewInfo.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.ViewInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Room.Util.ViewInfoKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
static AndroidX.Room.Coroutines.FlowUtil.CreateFlow(AndroidX.Room.RoomDatabase! db, bool inTransaction, string![]! tableNames, Kotlin.Jvm.Functions.IFunction1! block) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static AndroidX.Room.CoroutinesRoom.CreateFlow(AndroidX.Room.RoomDatabase! db, bool inTransaction, string![]! tableNames, Java.Util.Concurrent.ICallable! callable) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static AndroidX.Room.CoroutinesRoom.Execute(AndroidX.Room.RoomDatabase! db, bool inTransaction, Android.OS.CancellationSignal? cancellationSignal, Java.Util.Concurrent.ICallable! callable, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Room.CoroutinesRoom.Execute(AndroidX.Room.RoomDatabase! db, bool inTransaction, Java.Util.Concurrent.ICallable! callable, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Room.Migration.MigrationKt.Migration(int startVersion, int endVersion, Kotlin.Jvm.Functions.IFunction1! migrate) -> AndroidX.Room.Migration.Migration!
static AndroidX.Room.MultiInstanceInvalidationCallback.Descriptor.get -> string?
static AndroidX.Room.MultiInstanceInvalidationCallbackDefault.InterfaceConsts.Descriptor.get -> string?
static AndroidX.Room.MultiInstanceInvalidationCallbackStub.AsInterface(Android.OS.IBinder? obj) -> AndroidX.Room.IMultiInstanceInvalidationCallback?
static AndroidX.Room.MultiInstanceInvalidationCallbackStub.InterfaceConsts.Descriptor.get -> string?
static AndroidX.Room.MultiInstanceInvalidationServiceInterfaceConsts.Descriptor.get -> string?
static AndroidX.Room.MultiInstanceInvalidationServiceInterfaceDefault.InterfaceConsts.Descriptor.get -> string?
static AndroidX.Room.MultiInstanceInvalidationServiceInterfaceStub.AsInterface(Android.OS.IBinder? obj) -> AndroidX.Room.IMultiInstanceInvalidationServiceInterface?
static AndroidX.Room.MultiInstanceInvalidationServiceInterfaceStub.InterfaceConsts.Descriptor.get -> string?
static AndroidX.Room.Room.DatabaseBuilder(Android.Content.Context! context, Java.Lang.Class! klass, string? name) -> AndroidX.Room.RoomDatabase.Builder!
static AndroidX.Room.Room.InMemoryDatabaseBuilder(Android.Content.Context! context, Java.Lang.Class! klass) -> AndroidX.Room.RoomDatabase.Builder!
static AndroidX.Room.Room.Instance.get -> AndroidX.Room.Room!
static AndroidX.Room.RoomDatabase.JournalMode.Automatic.get -> AndroidX.Room.RoomDatabase.JournalMode?
static AndroidX.Room.RoomDatabase.JournalMode.Entries.get -> Kotlin.Enums.IEnumEntries!
static AndroidX.Room.RoomDatabase.JournalMode.Truncate.get -> AndroidX.Room.RoomDatabase.JournalMode?
static AndroidX.Room.RoomDatabase.JournalMode.ValueOf(string? value) -> AndroidX.Room.RoomDatabase.JournalMode?
static AndroidX.Room.RoomDatabase.JournalMode.Values() -> AndroidX.Room.RoomDatabase.JournalMode![]?
static AndroidX.Room.RoomDatabase.JournalMode.WriteAheadLogging.get -> AndroidX.Room.RoomDatabase.JournalMode?
static AndroidX.Room.RoomDatabaseKt.CompatTransactionCoroutineExecute(AndroidX.Room.RoomDatabase! _this_compatTransactionCoroutineExecute, Kotlin.Jvm.Functions.IFunction1! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Room.RoomDatabaseKt.InvalidationTrackerFlow(AndroidX.Room.RoomDatabase! _this_invalidationTrackerFlow, string![]! tables, bool emitInitialState) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static AndroidX.Room.RoomDatabaseKt.UseReaderConnection(AndroidX.Room.RoomDatabase! _this_useReaderConnection, Kotlin.Jvm.Functions.IFunction2! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Room.RoomDatabaseKt.UseWriterConnection(AndroidX.Room.RoomDatabase! _this_useWriterConnection, Kotlin.Jvm.Functions.IFunction2! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Room.RoomDatabaseKt.ValidateAutoMigrations(AndroidX.Room.RoomDatabase! _this_validateAutoMigrations, AndroidX.Room.DatabaseConfiguration! configuration) -> void
static AndroidX.Room.RoomDatabaseKt.ValidateMigrationsNotRequired(System.Collections.Generic.ICollection<Java.Lang.Integer!>! migrationStartAndEndVersions, System.Collections.Generic.ICollection<Java.Lang.Integer!>! migrationsNotRequiredFrom) -> void
static AndroidX.Room.RoomDatabaseKt.ValidateTypeConverters(AndroidX.Room.RoomDatabase! _this_validateTypeConverters, AndroidX.Room.DatabaseConfiguration! configuration) -> void
static AndroidX.Room.RoomDatabaseKt.WithTransaction(AndroidX.Room.RoomDatabase! _this_withTransaction, Kotlin.Jvm.Functions.IFunction1! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Room.RoomDatabaseKt.WithTransactionContext(AndroidX.Room.RoomDatabase! _this_withTransactionContext, Kotlin.Jvm.Functions.IFunction1! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Room.RoomSQLiteQuery.Acquire(string! query, int argumentCount) -> AndroidX.Room.RoomSQLiteQuery!
static AndroidX.Room.RoomSQLiteQuery.CopyFrom(AndroidX.Sqlite.Db.ISupportSQLiteQuery! supportSQLiteQuery) -> AndroidX.Room.RoomSQLiteQuery!
static AndroidX.Room.RoomSQLiteQuery.QueryPool.get -> Java.Util.TreeMap!
static AndroidX.Room.TransactorKt.DeferredTransaction(AndroidX.Room.ITransactor! obj, Kotlin.Jvm.Functions.IFunction2! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Room.TransactorKt.ExclusiveTransaction(AndroidX.Room.ITransactor! obj, Kotlin.Jvm.Functions.IFunction2! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Room.TransactorKt.ExecSQL(AndroidX.Room.IPooledConnection! obj, string! sql, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Room.TransactorKt.ImmediateTransaction(AndroidX.Room.ITransactor! obj, Kotlin.Jvm.Functions.IFunction2! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Room.TransactorSQLiteTransactionType.Deferred.get -> AndroidX.Room.TransactorSQLiteTransactionType?
static AndroidX.Room.TransactorSQLiteTransactionType.Entries.get -> Kotlin.Enums.IEnumEntries!
static AndroidX.Room.TransactorSQLiteTransactionType.Exclusive.get -> AndroidX.Room.TransactorSQLiteTransactionType?
static AndroidX.Room.TransactorSQLiteTransactionType.Immediate.get -> AndroidX.Room.TransactorSQLiteTransactionType?
static AndroidX.Room.TransactorSQLiteTransactionType.ValueOf(string? value) -> AndroidX.Room.TransactorSQLiteTransactionType?
static AndroidX.Room.TransactorSQLiteTransactionType.Values() -> AndroidX.Room.TransactorSQLiteTransactionType![]?
static AndroidX.Room.Util.CursorUtil.CopyAndClose(Android.Database.ICursor! c) -> Android.Database.ICursor!
static AndroidX.Room.Util.CursorUtil.FindColumnIndexBySuffix(string![]! columnNames, string! name) -> int
static AndroidX.Room.Util.CursorUtil.GetColumnIndex(Android.Database.ICursor! c, string! name) -> int
static AndroidX.Room.Util.CursorUtil.GetColumnIndexOrThrow(Android.Database.ICursor! c, string! name) -> int
static AndroidX.Room.Util.CursorUtil.UseCursor(Android.Database.ICursor! obj, Kotlin.Jvm.Functions.IFunction1! block) -> Java.Lang.Object?
static AndroidX.Room.Util.CursorUtil.WrapMappedColumns(Android.Database.ICursor! cursor, string![]! columnNames, int[]! mapping) -> Android.Database.ICursor!
static AndroidX.Room.Util.DBUtil.CreateCancellationSignal() -> Android.OS.CancellationSignal!
static AndroidX.Room.Util.DBUtil.DropFtsSyncTriggers(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> void
static AndroidX.Room.Util.DBUtil.DropFtsSyncTriggers(AndroidX.Sqlite.ISQLiteConnection! connection) -> void
static AndroidX.Room.Util.DBUtil.ForeignKeyCheck(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db, string! tableName) -> void
static AndroidX.Room.Util.DBUtil.ForeignKeyCheck(AndroidX.Sqlite.ISQLiteConnection! db, string! tableName) -> void
static AndroidX.Room.Util.DBUtil.GetCoroutineContext(AndroidX.Room.RoomDatabase! _this_getCoroutineContext, bool inTransaction, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Room.Util.DBUtil.InternalPerform(AndroidX.Room.RoomDatabase! _this_internalPerform, bool isReadOnly, bool inTransaction, Kotlin.Jvm.Functions.IFunction2! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Room.Util.DBUtil.PerformBlocking(AndroidX.Room.RoomDatabase! db, bool isReadOnly, bool inTransaction, Kotlin.Jvm.Functions.IFunction1! block) -> Java.Lang.Object?
static AndroidX.Room.Util.DBUtil.PerformInTransactionSuspending(AndroidX.Room.RoomDatabase! db, Kotlin.Jvm.Functions.IFunction1! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Room.Util.DBUtil.PerformSuspending(AndroidX.Room.RoomDatabase! db, bool isReadOnly, bool inTransaction, Kotlin.Jvm.Functions.IFunction1! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Room.Util.DBUtil.Query(AndroidX.Room.RoomDatabase! db, AndroidX.Sqlite.Db.ISupportSQLiteQuery! sqLiteQuery, bool maybeCopy) -> Android.Database.ICursor!
static AndroidX.Room.Util.DBUtil.Query(AndroidX.Room.RoomDatabase! db, AndroidX.Sqlite.Db.ISupportSQLiteQuery! sqLiteQuery, bool maybeCopy, Android.OS.CancellationSignal? signal) -> Android.Database.ICursor!
static AndroidX.Room.Util.DBUtil.ReadVersion(Java.IO.File! databaseFile) -> int
static AndroidX.Room.Util.DBUtil.ToSQLiteConnection(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> AndroidX.Sqlite.ISQLiteConnection!
static AndroidX.Room.Util.FileUtil.Copy(Java.Nio.Channels.IReadableByteChannel! input, Java.Nio.Channels.FileChannel! output) -> void
static AndroidX.Room.Util.FtsTableInfo.Read(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! database, string! tableName) -> AndroidX.Room.Util.FtsTableInfo!
static AndroidX.Room.Util.FtsTableInfo.Read(AndroidX.Sqlite.ISQLiteConnection! connection, string! tableName) -> AndroidX.Room.Util.FtsTableInfo!
static AndroidX.Room.Util.KClassUtil.FindAndInstantiateDatabaseImpl(Java.Lang.Class! klass, string! suffix) -> Java.Lang.Object?
static AndroidX.Room.Util.RelationUtil.RecursiveFetchArrayMap(AndroidX.Collection.ArrayMap! map, bool isRelationCollection, Kotlin.Jvm.Functions.IFunction1! fetchBlock) -> void
static AndroidX.Room.Util.RelationUtil.RecursiveFetchHashMap(System.Collections.IDictionary! map, bool isRelationCollection, Kotlin.Jvm.Functions.IFunction1! fetchBlock) -> void
static AndroidX.Room.Util.RelationUtil.RecursiveFetchLongSparseArray(AndroidX.Collection.LongSparseArray! map, bool isRelationCollection, Kotlin.Jvm.Functions.IFunction1! fetchBlock) -> void
static AndroidX.Room.Util.RelationUtil.RecursiveFetchMap(System.Collections.IDictionary! map, bool isRelationCollection, Kotlin.Jvm.Functions.IFunction1! fetchBlock) -> void
static AndroidX.Room.Util.SQLiteConnectionUtil.GetLastInsertedRowId(AndroidX.Sqlite.ISQLiteConnection! connection) -> long
static AndroidX.Room.Util.SQLiteConnectionUtil.GetTotalChangedRows(AndroidX.Sqlite.ISQLiteConnection! connection) -> int
static AndroidX.Room.Util.SQLiteStatementUtil.ColumnIndexOf(AndroidX.Sqlite.ISQLiteStatement! _this_columnIndexOf, string! name) -> int
static AndroidX.Room.Util.SQLiteStatementUtil.ColumnIndexOfCommon(AndroidX.Sqlite.ISQLiteStatement! _this_columnIndexOfCommon, string! name) -> int
static AndroidX.Room.Util.SQLiteStatementUtil.GetColumnIndex(AndroidX.Sqlite.ISQLiteStatement! stmt, string! name) -> int
static AndroidX.Room.Util.SQLiteStatementUtil.GetColumnIndexOrThrow(AndroidX.Sqlite.ISQLiteStatement! stmt, string! name) -> int
static AndroidX.Room.Util.SQLiteStatementUtil.WrapMappedColumns(AndroidX.Sqlite.ISQLiteStatement! statement, string![]! columnNames, int[]! mapping) -> AndroidX.Sqlite.ISQLiteStatement!
static AndroidX.Room.Util.StringUtil.AppendPlaceholders(Java.Lang.StringBuilder! builder, int count) -> void
static AndroidX.Room.Util.StringUtil.EmptyStringArray.get -> System.Collections.Generic.IList<string!>?
static AndroidX.Room.Util.StringUtil.JoinIntoString(System.Collections.Generic.IList<Java.Lang.Integer!>? input) -> string?
static AndroidX.Room.Util.StringUtil.NewStringBuilder() -> Java.Lang.StringBuilder!
static AndroidX.Room.Util.StringUtil.SplitToIntList(string? input) -> System.Collections.Generic.IList<Java.Lang.Integer!>?
static AndroidX.Room.Util.TableInfo.Column.DefaultValueEquals(string! current, string? other) -> bool
static AndroidX.Room.Util.TableInfo.Read(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! database, string! tableName) -> AndroidX.Room.Util.TableInfo!
static AndroidX.Room.Util.TableInfo.Read(AndroidX.Sqlite.ISQLiteConnection! connection, string! tableName) -> AndroidX.Room.Util.TableInfo!
static AndroidX.Room.Util.UUIDUtil.ConvertByteToUUID(byte[]! bytes) -> Java.Util.UUID!
static AndroidX.Room.Util.UUIDUtil.ConvertUUIDToByte(Java.Util.UUID! uuid) -> byte[]!
static AndroidX.Room.Util.ViewInfo.Read(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! database, string! viewName) -> AndroidX.Room.Util.ViewInfo!
static AndroidX.Room.Util.ViewInfo.Read(AndroidX.Sqlite.ISQLiteConnection! connection, string! viewName) -> AndroidX.Room.Util.ViewInfo!
virtual AndroidX.Room.DatabaseConfiguration.IsMigrationRequired(int fromVersion, int toVersion) -> bool
virtual AndroidX.Room.DatabaseConfiguration.IsMigrationRequiredFrom(int version) -> bool
virtual AndroidX.Room.InvalidationTracker.AddObserver(AndroidX.Room.InvalidationTracker.Observer! observer) -> void
virtual AndroidX.Room.InvalidationTracker.AddWeakObserver(AndroidX.Room.InvalidationTracker.Observer! observer) -> void
virtual AndroidX.Room.InvalidationTracker.RefreshVersionsAsync() -> void
virtual AndroidX.Room.InvalidationTracker.RefreshVersionsSync() -> void
virtual AndroidX.Room.InvalidationTracker.RemoveObserver(AndroidX.Room.InvalidationTracker.Observer! observer) -> void
virtual AndroidX.Room.Migration.Migration.Migrate(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> void
virtual AndroidX.Room.Migration.Migration.Migrate(AndroidX.Sqlite.ISQLiteConnection! connection) -> void
virtual AndroidX.Room.MultiInstanceInvalidationCallbackDefault.AsBinder() -> Android.OS.IBinder?
virtual AndroidX.Room.MultiInstanceInvalidationCallbackDefault.OnInvalidation(string![]? tables) -> void
virtual AndroidX.Room.MultiInstanceInvalidationCallbackStub.AsBinder() -> Android.OS.IBinder?
virtual AndroidX.Room.MultiInstanceInvalidationCallbackStub.OnTransact(int code, Android.OS.Parcel? data, Android.OS.Parcel? reply, int flags) -> bool
virtual AndroidX.Room.MultiInstanceInvalidationServiceInterfaceDefault.AsBinder() -> Android.OS.IBinder?
virtual AndroidX.Room.MultiInstanceInvalidationServiceInterfaceDefault.BroadcastInvalidation(int clientId, string![]? tables) -> void
virtual AndroidX.Room.MultiInstanceInvalidationServiceInterfaceDefault.RegisterCallback(AndroidX.Room.IMultiInstanceInvalidationCallback? callback, string? name) -> int
virtual AndroidX.Room.MultiInstanceInvalidationServiceInterfaceDefault.UnregisterCallback(AndroidX.Room.IMultiInstanceInvalidationCallback? callback, int clientId) -> void
virtual AndroidX.Room.MultiInstanceInvalidationServiceInterfaceStub.AsBinder() -> Android.OS.IBinder?
virtual AndroidX.Room.MultiInstanceInvalidationServiceInterfaceStub.OnTransact(int code, Android.OS.Parcel? data, Android.OS.Parcel? reply, int flags) -> bool
virtual AndroidX.Room.RoomDatabase.AssertNotMainThread() -> void
virtual AndroidX.Room.RoomDatabase.AssertNotSuspendingTransaction() -> void
virtual AndroidX.Room.RoomDatabase.BeginTransaction() -> void
virtual AndroidX.Room.RoomDatabase.Builder.AddAutoMigrationSpec(AndroidX.Room.Migration.IAutoMigrationSpec! autoMigrationSpec) -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.AddCallback(AndroidX.Room.RoomDatabase.Callback! callback) -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.AddMigrations(params AndroidX.Room.Migration.Migration![]! migrations) -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.AddTypeConverter(Java.Lang.Object! typeConverter) -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.AllowMainThreadQueries() -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.Build() -> Java.Lang.Object!
virtual AndroidX.Room.RoomDatabase.Builder.CreateFromAsset(string! databaseFilePath) -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.CreateFromAsset(string! databaseFilePath, AndroidX.Room.RoomDatabase.PrepackagedDatabaseCallback! callback) -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.CreateFromFile(Java.IO.File! databaseFile) -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.CreateFromFile(Java.IO.File! databaseFile, AndroidX.Room.RoomDatabase.PrepackagedDatabaseCallback! callback) -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.CreateFromInputStream(Java.Util.Concurrent.ICallable! inputStreamCallable) -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.CreateFromInputStream(Java.Util.Concurrent.ICallable! inputStreamCallable, AndroidX.Room.RoomDatabase.PrepackagedDatabaseCallback! callback) -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.EnableMultiInstanceInvalidation() -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.FallbackToDestructiveMigration() -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.FallbackToDestructiveMigrationFrom(bool dropAllTables, params int[]! startVersions) -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.FallbackToDestructiveMigrationFrom(params int[]! startVersions) -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.FallbackToDestructiveMigrationOnDowngrade() -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.OpenHelperFactory(AndroidX.Sqlite.Db.ISupportSQLiteOpenHelperFactory? factory) -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.SetAutoCloseTimeout(long autoCloseTimeout, Java.Util.Concurrent.TimeUnit! autoCloseTimeUnit) -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.SetJournalMode(AndroidX.Room.RoomDatabase.JournalMode! journalMode) -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.SetMultiInstanceInvalidationServiceIntent(Android.Content.Intent! invalidationServiceIntent) -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.SetQueryCallback(AndroidX.Room.RoomDatabase.IQueryCallback! queryCallback, Java.Util.Concurrent.IExecutor! executor) -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.SetQueryExecutor(Java.Util.Concurrent.IExecutor! executor) -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Builder.SetTransactionExecutor(Java.Util.Concurrent.IExecutor! executor) -> AndroidX.Room.RoomDatabase.Builder!
virtual AndroidX.Room.RoomDatabase.Callback.OnCreate(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> void
virtual AndroidX.Room.RoomDatabase.Callback.OnCreate(AndroidX.Sqlite.ISQLiteConnection! connection) -> void
virtual AndroidX.Room.RoomDatabase.Callback.OnDestructiveMigration(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> void
virtual AndroidX.Room.RoomDatabase.Callback.OnDestructiveMigration(AndroidX.Sqlite.ISQLiteConnection! connection) -> void
virtual AndroidX.Room.RoomDatabase.Callback.OnOpen(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> void
virtual AndroidX.Room.RoomDatabase.Callback.OnOpen(AndroidX.Sqlite.ISQLiteConnection! connection) -> void
virtual AndroidX.Room.RoomDatabase.Close() -> void
virtual AndroidX.Room.RoomDatabase.CompileStatement(string! sql) -> AndroidX.Sqlite.Db.ISupportSQLiteStatement!
virtual AndroidX.Room.RoomDatabase.CreateAutoMigrations(System.Collections.Generic.IDictionary<Kotlin.Reflect.IKClass!, AndroidX.Room.Migration.IAutoMigrationSpec!>! autoMigrationSpecs) -> System.Collections.Generic.IList<AndroidX.Room.Migration.Migration!>!
virtual AndroidX.Room.RoomDatabase.CreateOpenDelegate() -> AndroidX.Room.IRoomOpenDelegateMarker!
virtual AndroidX.Room.RoomDatabase.CreateOpenHelper(AndroidX.Room.DatabaseConfiguration! config) -> AndroidX.Sqlite.Db.ISupportSQLiteOpenHelper!
virtual AndroidX.Room.RoomDatabase.EndTransaction() -> void
virtual AndroidX.Room.RoomDatabase.GetAutoMigrations(System.Collections.Generic.IDictionary<Java.Lang.Class!, AndroidX.Room.Migration.IAutoMigrationSpec!>! autoMigrationSpecs) -> System.Collections.Generic.IList<AndroidX.Room.Migration.Migration!>!
virtual AndroidX.Room.RoomDatabase.GetTypeConverter(Java.Lang.Class! klass) -> Java.Lang.Object?
virtual AndroidX.Room.RoomDatabase.InTransaction() -> bool
virtual AndroidX.Room.RoomDatabase.Init(AndroidX.Room.DatabaseConfiguration! configuration) -> void
virtual AndroidX.Room.RoomDatabase.InternalInitInvalidationTracker(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> void
virtual AndroidX.Room.RoomDatabase.InvalidationTracker.get -> AndroidX.Room.InvalidationTracker!
virtual AndroidX.Room.RoomDatabase.IsOpen.get -> bool
virtual AndroidX.Room.RoomDatabase.MigrationContainer.AddMigrations(System.Collections.Generic.IList<AndroidX.Room.Migration.Migration!>! migrations) -> void
virtual AndroidX.Room.RoomDatabase.MigrationContainer.AddMigrations(params AndroidX.Room.Migration.Migration![]! migrations) -> void
virtual AndroidX.Room.RoomDatabase.MigrationContainer.FindMigrationPath(int start, int end) -> System.Collections.Generic.IList<AndroidX.Room.Migration.Migration!>?
virtual AndroidX.Room.RoomDatabase.MigrationContainer.Migrations.get -> System.Collections.Generic.IDictionary<Java.Lang.Integer!, System.Collections.Generic.IDictionary<Java.Lang.Integer!, AndroidX.Room.Migration.Migration!>!>!
virtual AndroidX.Room.RoomDatabase.OpenHelper.get -> AndroidX.Sqlite.Db.ISupportSQLiteOpenHelper!
virtual AndroidX.Room.RoomDatabase.PrepackagedDatabaseCallback.OnOpenPrepackagedDatabase(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> void
virtual AndroidX.Room.RoomDatabase.Query(AndroidX.Sqlite.Db.ISupportSQLiteQuery! query, Android.OS.CancellationSignal? signal) -> Android.Database.ICursor!
virtual AndroidX.Room.RoomDatabase.Query(string! query, Java.Lang.Object![]? args) -> Android.Database.ICursor!
virtual AndroidX.Room.RoomDatabase.QueryExecutor.get -> Java.Util.Concurrent.IExecutor!
virtual AndroidX.Room.RoomDatabase.RequiredAutoMigrationSpecClasses.get -> System.Collections.Generic.ICollection<Kotlin.Reflect.IKClass!>!
virtual AndroidX.Room.RoomDatabase.RequiredAutoMigrationSpecs.get -> System.Collections.Generic.ICollection<Java.Lang.Class!>!
virtual AndroidX.Room.RoomDatabase.RequiredTypeConverterClasses.get -> System.Collections.Generic.IDictionary<Kotlin.Reflect.IKClass!, System.Collections.Generic.IList<Kotlin.Reflect.IKClass!>!>!
virtual AndroidX.Room.RoomDatabase.RequiredTypeConverters.get -> System.Collections.Generic.IDictionary<Java.Lang.Class!, System.Collections.Generic.IList<Java.Lang.Class!>!>!
virtual AndroidX.Room.RoomDatabase.RunInTransaction(Java.Lang.IRunnable! body) -> void
virtual AndroidX.Room.RoomDatabase.RunInTransaction(Java.Util.Concurrent.ICallable! body) -> Java.Lang.Object?
virtual AndroidX.Room.RoomDatabase.SetTransactionSuccessful() -> void
virtual AndroidX.Room.RoomDatabase.TransactionExecutor.get -> Java.Util.Concurrent.IExecutor!
virtual AndroidX.Room.RoomOpenHelper.CallbackDelegate.OnPostMigrate(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> void
virtual AndroidX.Room.RoomOpenHelper.CallbackDelegate.OnPreMigrate(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> void
virtual AndroidX.Room.RoomOpenHelper.CallbackDelegate.OnValidateSchema(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> AndroidX.Room.RoomOpenHelper.ValidationResult!
virtual AndroidX.Room.RoomOpenHelper.CallbackDelegate.ValidateMigration(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> void
virtual AndroidX.Room.SharedSQLiteStatement.Acquire() -> AndroidX.Sqlite.Db.ISupportSQLiteStatement!
virtual AndroidX.Room.SharedSQLiteStatement.AssertNotMainThread() -> void
virtual AndroidX.Room.SharedSQLiteStatement.Release(AndroidX.Sqlite.Db.ISupportSQLiteStatement! statement) -> void
