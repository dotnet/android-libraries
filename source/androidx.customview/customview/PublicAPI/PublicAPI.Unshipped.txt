#nullable enable
AndroidX.CustomView.View.AbsSavedState
AndroidX.CustomView.View.AbsSavedState.AbsSavedState(Android.OS.IParcelable? superState) -> void
AndroidX.CustomView.View.AbsSavedState.AbsSavedState(Android.OS.Parcel? source) -> void
AndroidX.CustomView.View.AbsSavedState.AbsSavedState(Android.OS.Parcel? source, Java.Lang.ClassLoader? loader) -> void
AndroidX.CustomView.View.AbsSavedState.AbsSavedState(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.CustomView.View.AbsSavedState.SuperState.get -> Android.OS.IParcelable?
AndroidX.CustomView.Widget.ExploreByTouchHelper
AndroidX.CustomView.Widget.ExploreByTouchHelper.AccessibilityFocusedVirtualViewId.get -> int
AndroidX.CustomView.Widget.ExploreByTouchHelper.ClearKeyboardFocusForVirtualView(int virtualViewId) -> bool
AndroidX.CustomView.Widget.ExploreByTouchHelper.DispatchHoverEvent(Android.Views.MotionEvent? e) -> bool
AndroidX.CustomView.Widget.ExploreByTouchHelper.DispatchKeyEvent(Android.Views.KeyEvent? e) -> bool
AndroidX.CustomView.Widget.ExploreByTouchHelper.ExploreByTouchHelper(Android.Views.View? host) -> void
AndroidX.CustomView.Widget.ExploreByTouchHelper.ExploreByTouchHelper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.CustomView.Widget.ExploreByTouchHelper.InvalidateRoot() -> void
AndroidX.CustomView.Widget.ExploreByTouchHelper.InvalidateVirtualView(int virtualViewId) -> void
AndroidX.CustomView.Widget.ExploreByTouchHelper.InvalidateVirtualView(int virtualViewId, int changeTypes) -> void
AndroidX.CustomView.Widget.ExploreByTouchHelper.KeyboardFocusedVirtualViewId.get -> int
AndroidX.CustomView.Widget.ExploreByTouchHelper.OnFocusChanged(bool gainFocus, int direction, Android.Graphics.Rect? previouslyFocusedRect) -> void
AndroidX.CustomView.Widget.ExploreByTouchHelper.RequestKeyboardFocusForVirtualView(int virtualViewId) -> bool
AndroidX.CustomView.Widget.ExploreByTouchHelper.SendEventForVirtualView(int virtualViewId, int eventType) -> bool
AndroidX.CustomView.Widget.ExploreByTouchHelper.SetBoundsInScreenFromBoundsInParent(AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat? node, Android.Graphics.Rect? boundsInParent) -> void
AndroidX.CustomView.Widget.IOpenable
AndroidX.CustomView.Widget.IOpenable.Close() -> void
AndroidX.CustomView.Widget.IOpenable.IsOpen.get -> bool
AndroidX.CustomView.Widget.IOpenable.Open() -> void
AndroidX.CustomView.Widget.ViewDragHelper
AndroidX.CustomView.Widget.ViewDragHelper.Callback
AndroidX.CustomView.Widget.ViewDragHelper.Callback.Callback() -> void
AndroidX.CustomView.Widget.ViewDragHelper.Callback.Callback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.CustomView.Widget.ViewDragHelper.ViewDragHelper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
abstract AndroidX.CustomView.Widget.ExploreByTouchHelper.GetVirtualViewAt(float p0, float p1) -> int
abstract AndroidX.CustomView.Widget.ExploreByTouchHelper.GetVisibleVirtualViews(System.Collections.Generic.IList<Java.Lang.Integer!>? p0) -> void
abstract AndroidX.CustomView.Widget.ExploreByTouchHelper.OnPerformActionForVirtualView(int p0, int p1, Android.OS.Bundle? p2) -> bool
abstract AndroidX.CustomView.Widget.ExploreByTouchHelper.OnPopulateNodeForVirtualView(int p0, AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat? p1) -> void
abstract AndroidX.CustomView.Widget.ViewDragHelper.Callback.TryCaptureView(Android.Views.View? child, int pointerId) -> bool
const AndroidX.CustomView.Widget.ExploreByTouchHelper.HostId = -1 -> int
const AndroidX.CustomView.Widget.ExploreByTouchHelper.InvalidId = -2147483648 -> int
const AndroidX.CustomView.Widget.ViewDragHelper.DirectionAll = 3 -> int
const AndroidX.CustomView.Widget.ViewDragHelper.DirectionHorizontal = 1 -> int
const AndroidX.CustomView.Widget.ViewDragHelper.DirectionVertical = 2 -> int
const AndroidX.CustomView.Widget.ViewDragHelper.EdgeAll = 15 -> int
const AndroidX.CustomView.Widget.ViewDragHelper.EdgeBottom = 8 -> int
const AndroidX.CustomView.Widget.ViewDragHelper.EdgeLeft = 1 -> int
const AndroidX.CustomView.Widget.ViewDragHelper.EdgeRight = 2 -> int
const AndroidX.CustomView.Widget.ViewDragHelper.EdgeTop = 4 -> int
const AndroidX.CustomView.Widget.ViewDragHelper.InvalidPointer = -1 -> int
const AndroidX.CustomView.Widget.ViewDragHelper.StateDragging = 1 -> int
const AndroidX.CustomView.Widget.ViewDragHelper.StateIdle = 0 -> int
const AndroidX.CustomView.Widget.ViewDragHelper.StateSettling = 2 -> int
override AndroidX.CustomView.View.AbsSavedState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.CustomView.View.AbsSavedState.ThresholdClass.get -> nint
override AndroidX.CustomView.View.AbsSavedState.ThresholdType.get -> System.Type!
override AndroidX.CustomView.Widget.ExploreByTouchHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.CustomView.Widget.ExploreByTouchHelper.ThresholdClass.get -> nint
override AndroidX.CustomView.Widget.ExploreByTouchHelper.ThresholdType.get -> System.Type!
override AndroidX.CustomView.Widget.ViewDragHelper.Callback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.CustomView.Widget.ViewDragHelper.Callback.ThresholdClass.get -> nint
override AndroidX.CustomView.Widget.ViewDragHelper.Callback.ThresholdType.get -> System.Type!
override AndroidX.CustomView.Widget.ViewDragHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.CustomView.Widget.ViewDragHelper.ThresholdClass.get -> nint
override AndroidX.CustomView.Widget.ViewDragHelper.ThresholdType.get -> System.Type!
static AndroidX.CustomView.View.AbsSavedState.Creator.get -> Android.OS.IParcelableCreator?
static AndroidX.CustomView.View.AbsSavedState.EmptyState.get -> AndroidX.CustomView.View.AbsSavedState?
static AndroidX.CustomView.Widget.ViewDragHelper.Create(Android.Views.ViewGroup? forParent, AndroidX.CustomView.Widget.ViewDragHelper.Callback? cb) -> AndroidX.CustomView.Widget.ViewDragHelper?
static AndroidX.CustomView.Widget.ViewDragHelper.Create(Android.Views.ViewGroup? forParent, float sensitivity, AndroidX.CustomView.Widget.ViewDragHelper.Callback? cb) -> AndroidX.CustomView.Widget.ViewDragHelper?
virtual AndroidX.CustomView.View.AbsSavedState.DescribeContents() -> int
virtual AndroidX.CustomView.View.AbsSavedState.WriteToParcel(Android.OS.Parcel? dest, Android.OS.ParcelableWriteFlags flags) -> void
virtual AndroidX.CustomView.Widget.ExploreByTouchHelper.FocusedVirtualView.get -> int
virtual AndroidX.CustomView.Widget.ExploreByTouchHelper.OnPopulateEventForHost(Android.Views.Accessibility.AccessibilityEvent? e) -> void
virtual AndroidX.CustomView.Widget.ExploreByTouchHelper.OnPopulateEventForVirtualView(int virtualViewId, Android.Views.Accessibility.AccessibilityEvent? e) -> void
virtual AndroidX.CustomView.Widget.ExploreByTouchHelper.OnPopulateNodeForHost(AndroidX.Core.View.Accessibility.AccessibilityNodeInfoCompat? node) -> void
virtual AndroidX.CustomView.Widget.ExploreByTouchHelper.OnVirtualViewKeyboardFocusChanged(int virtualViewId, bool hasFocus) -> void
virtual AndroidX.CustomView.Widget.ViewDragHelper.Abort() -> void
virtual AndroidX.CustomView.Widget.ViewDragHelper.ActivePointerId.get -> int
virtual AndroidX.CustomView.Widget.ViewDragHelper.Callback.ClampViewPositionHorizontal(Android.Views.View? child, int left, int dx) -> int
virtual AndroidX.CustomView.Widget.ViewDragHelper.Callback.ClampViewPositionVertical(Android.Views.View? child, int top, int dy) -> int
virtual AndroidX.CustomView.Widget.ViewDragHelper.Callback.GetOrderedChildIndex(int index) -> int
virtual AndroidX.CustomView.Widget.ViewDragHelper.Callback.GetViewHorizontalDragRange(Android.Views.View? child) -> int
virtual AndroidX.CustomView.Widget.ViewDragHelper.Callback.GetViewVerticalDragRange(Android.Views.View? child) -> int
virtual AndroidX.CustomView.Widget.ViewDragHelper.Callback.OnEdgeDragStarted(int edgeFlags, int pointerId) -> void
virtual AndroidX.CustomView.Widget.ViewDragHelper.Callback.OnEdgeLock(int edgeFlags) -> bool
virtual AndroidX.CustomView.Widget.ViewDragHelper.Callback.OnEdgeTouched(int edgeFlags, int pointerId) -> void
virtual AndroidX.CustomView.Widget.ViewDragHelper.Callback.OnViewCaptured(Android.Views.View? capturedChild, int activePointerId) -> void
virtual AndroidX.CustomView.Widget.ViewDragHelper.Callback.OnViewDragStateChanged(int state) -> void
virtual AndroidX.CustomView.Widget.ViewDragHelper.Callback.OnViewPositionChanged(Android.Views.View? changedView, int left, int top, int dx, int dy) -> void
virtual AndroidX.CustomView.Widget.ViewDragHelper.Callback.OnViewReleased(Android.Views.View? releasedChild, float xvel, float yvel) -> void
virtual AndroidX.CustomView.Widget.ViewDragHelper.CanScroll(Android.Views.View? v, bool checkV, int dx, int dy, int x, int y) -> bool
virtual AndroidX.CustomView.Widget.ViewDragHelper.Cancel() -> void
virtual AndroidX.CustomView.Widget.ViewDragHelper.CaptureChildView(Android.Views.View? childView, int activePointerId) -> void
virtual AndroidX.CustomView.Widget.ViewDragHelper.CapturedView.get -> Android.Views.View?
virtual AndroidX.CustomView.Widget.ViewDragHelper.CheckTouchSlop(int directions) -> bool
virtual AndroidX.CustomView.Widget.ViewDragHelper.CheckTouchSlop(int directions, int pointerId) -> bool
virtual AndroidX.CustomView.Widget.ViewDragHelper.ContinueSettling(bool deferCallbacks) -> bool
virtual AndroidX.CustomView.Widget.ViewDragHelper.DefaultEdgeSize.get -> int
virtual AndroidX.CustomView.Widget.ViewDragHelper.EdgeSize.get -> int
virtual AndroidX.CustomView.Widget.ViewDragHelper.EdgeSize.set -> void
virtual AndroidX.CustomView.Widget.ViewDragHelper.FindTopChildUnder(int x, int y) -> Android.Views.View?
virtual AndroidX.CustomView.Widget.ViewDragHelper.FlingCapturedView(int minLeft, int minTop, int maxLeft, int maxTop) -> void
virtual AndroidX.CustomView.Widget.ViewDragHelper.IsCapturedViewUnder(int x, int y) -> bool
virtual AndroidX.CustomView.Widget.ViewDragHelper.IsEdgeTouched(int edges) -> bool
virtual AndroidX.CustomView.Widget.ViewDragHelper.IsEdgeTouched(int edges, int pointerId) -> bool
virtual AndroidX.CustomView.Widget.ViewDragHelper.IsPointerDown(int pointerId) -> bool
virtual AndroidX.CustomView.Widget.ViewDragHelper.IsViewUnder(Android.Views.View? view, int x, int y) -> bool
virtual AndroidX.CustomView.Widget.ViewDragHelper.MinVelocity.get -> float
virtual AndroidX.CustomView.Widget.ViewDragHelper.MinVelocity.set -> void
virtual AndroidX.CustomView.Widget.ViewDragHelper.ProcessTouchEvent(Android.Views.MotionEvent? ev) -> void
virtual AndroidX.CustomView.Widget.ViewDragHelper.SetEdgeTrackingEnabled(int edgeFlags) -> void
virtual AndroidX.CustomView.Widget.ViewDragHelper.SettleCapturedViewAt(int finalLeft, int finalTop) -> bool
virtual AndroidX.CustomView.Widget.ViewDragHelper.ShouldInterceptTouchEvent(Android.Views.MotionEvent? ev) -> bool
virtual AndroidX.CustomView.Widget.ViewDragHelper.SmoothSlideViewTo(Android.Views.View? child, int finalLeft, int finalTop) -> bool
virtual AndroidX.CustomView.Widget.ViewDragHelper.SmoothSlideViewTo(Android.Views.View? child, int finalLeft, int finalTop, int duration, Android.Views.Animations.IInterpolator? interpolator) -> bool
virtual AndroidX.CustomView.Widget.ViewDragHelper.TouchSlop.get -> int
virtual AndroidX.CustomView.Widget.ViewDragHelper.ViewDragState.get -> int
