#nullable enable
AndroidX.Activity.ActivityViewModelLazyKt
AndroidX.Activity.BackEventCompat
AndroidX.Activity.BackEventCompat.BackEventCompat(Android.Window.BackEvent! backEvent) -> void
AndroidX.Activity.BackEventCompat.BackEventCompat(float touchX, float touchY, float progress, int swipeEdge) -> void
AndroidX.Activity.BackEventCompat.BackEventCompat(float touchX, float touchY, float progress, int swipeEdge, long frameTimeMillis) -> void
AndroidX.Activity.BackEventCompat.Companion
AndroidX.Activity.BackEventCompat.FrameTimeMillis.get -> long
AndroidX.Activity.BackEventCompat.ISwipeEdge
AndroidX.Activity.BackEventCompat.Progress.get -> float
AndroidX.Activity.BackEventCompat.SwipeEdge.get -> int
AndroidX.Activity.BackEventCompat.ToBackEvent() -> Android.Window.BackEvent!
AndroidX.Activity.BackEventCompat.TouchX.get -> float
AndroidX.Activity.BackEventCompat.TouchY.get -> float
AndroidX.Activity.ComponentActivity
AndroidX.Activity.ComponentActivity.ActivityResultRegistry.get -> AndroidX.Activity.Result.ActivityResultRegistry!
AndroidX.Activity.ComponentActivity.AddOnConfigurationChangedListener(AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Activity.ComponentActivity.AddOnContextAvailableListener(AndroidX.Activity.ContextAware.IOnContextAvailableListener! listener) -> void
AndroidX.Activity.ComponentActivity.AddOnMultiWindowModeChangedListener(AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Activity.ComponentActivity.AddOnNewIntentListener(AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Activity.ComponentActivity.AddOnPictureInPictureModeChangedListener(AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Activity.ComponentActivity.AddOnTrimMemoryListener(AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Activity.ComponentActivity.AddOnUserLeaveHintListener(Java.Lang.IRunnable! listener) -> void
AndroidX.Activity.ComponentActivity.ComponentActivity() -> void
AndroidX.Activity.ComponentActivity.ComponentActivity(int contentLayoutId) -> void
AndroidX.Activity.ComponentActivity.ComponentActivity(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Activity.ComponentActivity.ContextAvailable -> System.EventHandler<AndroidX.Activity.ContextAware.ContextAvailableEventArgs!>!
AndroidX.Activity.ComponentActivity.NonConfigurationInstances
AndroidX.Activity.ComponentActivity.NonConfigurationInstances.Custom.get -> Java.Lang.Object?
AndroidX.Activity.ComponentActivity.NonConfigurationInstances.Custom.set -> void
AndroidX.Activity.ComponentActivity.NonConfigurationInstances.NonConfigurationInstances() -> void
AndroidX.Activity.ComponentActivity.NonConfigurationInstances.ViewModelStore.get -> AndroidX.Lifecycle.ViewModelStore?
AndroidX.Activity.ComponentActivity.NonConfigurationInstances.ViewModelStore.set -> void
AndroidX.Activity.ComponentActivity.OnBackPressedDispatcher.get -> AndroidX.Activity.OnBackPressedDispatcher!
AndroidX.Activity.ComponentActivity.RegisterForActivityResult(AndroidX.Activity.Result.Contract.ActivityResultContract! contract, AndroidX.Activity.Result.ActivityResultRegistry! registry, AndroidX.Activity.Result.IActivityResultCallback! callback) -> AndroidX.Activity.Result.ActivityResultLauncher!
AndroidX.Activity.ComponentActivity.RegisterForActivityResult(AndroidX.Activity.Result.Contract.ActivityResultContract! contract, AndroidX.Activity.Result.IActivityResultCallback! callback) -> AndroidX.Activity.Result.ActivityResultLauncher!
AndroidX.Activity.ComponentActivity.RemoveOnConfigurationChangedListener(AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Activity.ComponentActivity.RemoveOnContextAvailableListener(AndroidX.Activity.ContextAware.IOnContextAvailableListener! listener) -> void
AndroidX.Activity.ComponentActivity.RemoveOnMultiWindowModeChangedListener(AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Activity.ComponentActivity.RemoveOnNewIntentListener(AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Activity.ComponentActivity.RemoveOnPictureInPictureModeChangedListener(AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Activity.ComponentActivity.RemoveOnTrimMemoryListener(AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Activity.ComponentActivity.RemoveOnUserLeaveHintListener(Java.Lang.IRunnable! listener) -> void
AndroidX.Activity.ComponentActivity.SavedStateRegistry.get -> AndroidX.SavedState.SavedStateRegistry!
AndroidX.Activity.ComponentDialog
AndroidX.Activity.ComponentDialog.ComponentDialog(Android.Content.Context! context) -> void
AndroidX.Activity.ComponentDialog.ComponentDialog(Android.Content.Context! context, int themeResId) -> void
AndroidX.Activity.ComponentDialog.ComponentDialog(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Activity.ComponentDialog.OnBackPressedDispatcher.get -> AndroidX.Activity.OnBackPressedDispatcher!
AndroidX.Activity.ContextAware.ContextAvailableEventArgs
AndroidX.Activity.ContextAware.ContextAvailableEventArgs.Context.get -> Android.Content.Context!
AndroidX.Activity.ContextAware.ContextAvailableEventArgs.ContextAvailableEventArgs(Android.Content.Context! context) -> void
AndroidX.Activity.ContextAware.ContextAwareHelper
AndroidX.Activity.ContextAware.ContextAwareHelper.AddOnContextAvailableListener(AndroidX.Activity.ContextAware.IOnContextAvailableListener! listener) -> void
AndroidX.Activity.ContextAware.ContextAwareHelper.ClearAvailableContext() -> void
AndroidX.Activity.ContextAware.ContextAwareHelper.ContextAvailable -> System.EventHandler<AndroidX.Activity.ContextAware.ContextAvailableEventArgs!>!
AndroidX.Activity.ContextAware.ContextAwareHelper.ContextAwareHelper() -> void
AndroidX.Activity.ContextAware.ContextAwareHelper.DispatchOnContextAvailable(Android.Content.Context! context) -> void
AndroidX.Activity.ContextAware.ContextAwareHelper.PeekAvailableContext() -> Android.Content.Context?
AndroidX.Activity.ContextAware.ContextAwareHelper.RemoveOnContextAvailableListener(AndroidX.Activity.ContextAware.IOnContextAvailableListener! listener) -> void
AndroidX.Activity.ContextAware.ContextAwareKt
AndroidX.Activity.ContextAware.IContextAware
AndroidX.Activity.ContextAware.IContextAware.AddOnContextAvailableListener(AndroidX.Activity.ContextAware.IOnContextAvailableListener! listener) -> void
AndroidX.Activity.ContextAware.IContextAware.PeekAvailableContext() -> Android.Content.Context?
AndroidX.Activity.ContextAware.IContextAware.RemoveOnContextAvailableListener(AndroidX.Activity.ContextAware.IOnContextAvailableListener! listener) -> void
AndroidX.Activity.ContextAware.IOnContextAvailableListener
AndroidX.Activity.ContextAware.IOnContextAvailableListener.OnContextAvailable(Android.Content.Context! context) -> void
AndroidX.Activity.EdgeToEdge
AndroidX.Activity.FullyDrawnReporter
AndroidX.Activity.FullyDrawnReporter.AddOnReportDrawnListener(Kotlin.Jvm.Functions.IFunction0! callback) -> void
AndroidX.Activity.FullyDrawnReporter.AddReporter() -> void
AndroidX.Activity.FullyDrawnReporter.FullyDrawnReported() -> void
AndroidX.Activity.FullyDrawnReporter.FullyDrawnReporter(Java.Util.Concurrent.IExecutor! executor, Kotlin.Jvm.Functions.IFunction0! reportFullyDrawn) -> void
AndroidX.Activity.FullyDrawnReporter.IsFullyDrawnReported.get -> bool
AndroidX.Activity.FullyDrawnReporter.RemoveOnReportDrawnListener(Kotlin.Jvm.Functions.IFunction0! callback) -> void
AndroidX.Activity.FullyDrawnReporter.RemoveReporter() -> void
AndroidX.Activity.FullyDrawnReporterKt
AndroidX.Activity.IFullyDrawnReporterOwner
AndroidX.Activity.IFullyDrawnReporterOwner.FullyDrawnReporter.get -> AndroidX.Activity.FullyDrawnReporter!
AndroidX.Activity.IOnBackPressedDispatcherOwner
AndroidX.Activity.IOnBackPressedDispatcherOwner.OnBackPressedDispatcher.get -> AndroidX.Activity.OnBackPressedDispatcher!
AndroidX.Activity.OnBackPressedCallback
AndroidX.Activity.OnBackPressedCallback.Enabled.get -> bool
AndroidX.Activity.OnBackPressedCallback.Enabled.set -> void
AndroidX.Activity.OnBackPressedCallback.OnBackPressedCallback(bool enabled) -> void
AndroidX.Activity.OnBackPressedCallback.OnBackPressedCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Activity.OnBackPressedCallback.Remove() -> void
AndroidX.Activity.OnBackPressedDispatcher
AndroidX.Activity.OnBackPressedDispatcher.AddCallback(AndroidX.Activity.OnBackPressedCallback! onBackPressedCallback) -> void
AndroidX.Activity.OnBackPressedDispatcher.AddCallback(AndroidX.Lifecycle.ILifecycleOwner! owner, AndroidX.Activity.OnBackPressedCallback! onBackPressedCallback) -> void
AndroidX.Activity.OnBackPressedDispatcher.DispatchOnBackCancelled() -> void
AndroidX.Activity.OnBackPressedDispatcher.DispatchOnBackProgressed(AndroidX.Activity.BackEventCompat! backEvent) -> void
AndroidX.Activity.OnBackPressedDispatcher.DispatchOnBackStarted(AndroidX.Activity.BackEventCompat! backEvent) -> void
AndroidX.Activity.OnBackPressedDispatcher.HasEnabledCallbacks.get -> bool
AndroidX.Activity.OnBackPressedDispatcher.OnBackPressed() -> void
AndroidX.Activity.OnBackPressedDispatcher.OnBackPressedDispatcher() -> void
AndroidX.Activity.OnBackPressedDispatcher.OnBackPressedDispatcher(Java.Lang.IRunnable? fallbackOnBackPressed) -> void
AndroidX.Activity.OnBackPressedDispatcher.OnBackPressedDispatcher(Java.Lang.IRunnable? fallbackOnBackPressed, AndroidX.Core.Util.IConsumer? onHasEnabledCallbacksChanged) -> void
AndroidX.Activity.OnBackPressedDispatcher.SetOnBackInvokedDispatcher(Android.Window.IOnBackInvokedDispatcher! invoker) -> void
AndroidX.Activity.OnBackPressedDispatcherKt
AndroidX.Activity.PipHintTrackerKt
AndroidX.Activity.Result.ActivityResult
AndroidX.Activity.Result.ActivityResult.ActivityResult(int resultCode, Android.Content.Intent? data) -> void
AndroidX.Activity.Result.ActivityResult.Companion
AndroidX.Activity.Result.ActivityResult.Companion.ResultCodeToString(int resultCode) -> string!
AndroidX.Activity.Result.ActivityResult.Data.get -> Android.Content.Intent?
AndroidX.Activity.Result.ActivityResult.DescribeContents() -> int
AndroidX.Activity.Result.ActivityResult.ResultCode.get -> int
AndroidX.Activity.Result.ActivityResult.WriteToParcel(Android.OS.Parcel! dest, Android.OS.ParcelableWriteFlags flags) -> void
AndroidX.Activity.Result.ActivityResultCallerKt
AndroidX.Activity.Result.ActivityResultKt
AndroidX.Activity.Result.ActivityResultLauncher
AndroidX.Activity.Result.ActivityResultLauncher.ActivityResultLauncher() -> void
AndroidX.Activity.Result.ActivityResultLauncher.ActivityResultLauncher(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Activity.Result.ActivityResultLauncherKt
AndroidX.Activity.Result.ActivityResultRegistry
AndroidX.Activity.Result.ActivityResultRegistry.ActivityResultRegistry() -> void
AndroidX.Activity.Result.ActivityResultRegistry.ActivityResultRegistry(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Activity.Result.ActivityResultRegistry.DispatchResult(int requestCode, Java.Lang.Object? result) -> bool
AndroidX.Activity.Result.ActivityResultRegistry.DispatchResult(int requestCode, int resultCode, Android.Content.Intent? data) -> bool
AndroidX.Activity.Result.ActivityResultRegistry.OnRestoreInstanceState(Android.OS.Bundle? savedInstanceState) -> void
AndroidX.Activity.Result.ActivityResultRegistry.OnSaveInstanceState(Android.OS.Bundle! outState) -> void
AndroidX.Activity.Result.ActivityResultRegistry.Register(string! key, AndroidX.Activity.Result.Contract.ActivityResultContract! contract, AndroidX.Activity.Result.IActivityResultCallback! callback) -> AndroidX.Activity.Result.ActivityResultLauncher!
AndroidX.Activity.Result.ActivityResultRegistry.Register(string! key, AndroidX.Lifecycle.ILifecycleOwner! lifecycleOwner, AndroidX.Activity.Result.Contract.ActivityResultContract! contract, AndroidX.Activity.Result.IActivityResultCallback! callback) -> AndroidX.Activity.Result.ActivityResultLauncher!
AndroidX.Activity.Result.Contract.ActivityResultContract
AndroidX.Activity.Result.Contract.ActivityResultContract.ActivityResultContract() -> void
AndroidX.Activity.Result.Contract.ActivityResultContract.ActivityResultContract(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Activity.Result.Contract.ActivityResultContract.SynchronousResult
AndroidX.Activity.Result.Contract.ActivityResultContract.SynchronousResult.SynchronousResult(Java.Lang.Object? value) -> void
AndroidX.Activity.Result.Contract.ActivityResultContract.SynchronousResult.Value.get -> Java.Lang.Object?
AndroidX.Activity.Result.Contract.ActivityResultContracts
AndroidX.Activity.Result.Contract.ActivityResultContracts.CaptureVideo
AndroidX.Activity.Result.Contract.ActivityResultContracts.CaptureVideo.CaptureVideo() -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.CaptureVideo.CaptureVideo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.CaptureVideo.GetSynchronousResult(Android.Content.Context! context, Android.Net.Uri! input) -> AndroidX.Activity.Result.Contract.ActivityResultContract.SynchronousResult?
AndroidX.Activity.Result.Contract.ActivityResultContracts.CreateDocument
AndroidX.Activity.Result.Contract.ActivityResultContracts.CreateDocument.CreateDocument() -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.CreateDocument.CreateDocument(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.CreateDocument.CreateDocument(string! mimeType) -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.CreateDocument.GetSynchronousResult(Android.Content.Context! context, string! input) -> AndroidX.Activity.Result.Contract.ActivityResultContract.SynchronousResult?
AndroidX.Activity.Result.Contract.ActivityResultContracts.GetContent
AndroidX.Activity.Result.Contract.ActivityResultContracts.GetContent.GetContent() -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.GetContent.GetContent(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.GetContent.GetSynchronousResult(Android.Content.Context! context, string! input) -> AndroidX.Activity.Result.Contract.ActivityResultContract.SynchronousResult?
AndroidX.Activity.Result.Contract.ActivityResultContracts.GetMultipleContents
AndroidX.Activity.Result.Contract.ActivityResultContracts.GetMultipleContents.GetMultipleContents() -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.GetMultipleContents.GetMultipleContents(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.GetMultipleContents.GetSynchronousResult(Android.Content.Context! context, string! input) -> AndroidX.Activity.Result.Contract.ActivityResultContract.SynchronousResult?
AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenDocument
AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenDocument.GetSynchronousResult(Android.Content.Context! context, string![]! input) -> AndroidX.Activity.Result.Contract.ActivityResultContract.SynchronousResult?
AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenDocument.OpenDocument() -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenDocument.OpenDocument(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenDocumentTree
AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenDocumentTree.GetSynchronousResult(Android.Content.Context! context, Android.Net.Uri? input) -> AndroidX.Activity.Result.Contract.ActivityResultContract.SynchronousResult?
AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenDocumentTree.OpenDocumentTree() -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenDocumentTree.OpenDocumentTree(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenMultipleDocuments
AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenMultipleDocuments.GetSynchronousResult(Android.Content.Context! context, string![]! input) -> AndroidX.Activity.Result.Contract.ActivityResultContract.SynchronousResult?
AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenMultipleDocuments.OpenMultipleDocuments() -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenMultipleDocuments.OpenMultipleDocuments(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickContact
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickContact.PickContact() -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickMultipleVisualMedia
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickMultipleVisualMedia.GetSynchronousResult(Android.Content.Context! context, AndroidX.Activity.Result.PickVisualMediaRequest! input) -> AndroidX.Activity.Result.Contract.ActivityResultContract.SynchronousResult?
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickMultipleVisualMedia.PickMultipleVisualMedia() -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickMultipleVisualMedia.PickMultipleVisualMedia(int maxItems) -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickMultipleVisualMedia.PickMultipleVisualMedia(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.Companion
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.Companion.InvokeIsPhotoPickerAvailable(Android.Content.Context! context) -> bool
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.Companion.IsPhotoPickerAvailable.get -> bool
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab.AlbumsTab
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab.DefaultTab(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab.PhotosTab
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.GetSynchronousResult(Android.Content.Context! context, AndroidX.Activity.Result.PickVisualMediaRequest! input) -> AndroidX.Activity.Result.Contract.ActivityResultContract.SynchronousResult?
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.IVisualMediaType
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.ImageAndVideo
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.ImageOnly
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.MediaCapabilities
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.MediaCapabilities.Builder
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.MediaCapabilities.Builder.AddSupportedHdrType(int hdrType) -> AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.MediaCapabilities.Builder!
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.MediaCapabilities.Builder.Build() -> AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.MediaCapabilities!
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.MediaCapabilities.Builder.Builder() -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.MediaCapabilities.Companion
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.MediaCapabilities.Companion.IHdrType
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.MediaCapabilities.SupportedHdrTypes.get -> System.Collections.Generic.ICollection<Java.Lang.Integer!>!
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.PickVisualMedia() -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.PickVisualMedia(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.SingleMimeType
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.SingleMimeType.MimeType.get -> string!
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.SingleMimeType.SingleMimeType(string! mimeType) -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.VideoOnly
AndroidX.Activity.Result.Contract.ActivityResultContracts.RequestMultiplePermissions
AndroidX.Activity.Result.Contract.ActivityResultContracts.RequestMultiplePermissions.Companion
AndroidX.Activity.Result.Contract.ActivityResultContracts.RequestMultiplePermissions.GetSynchronousResult(Android.Content.Context! context, string![]! input) -> AndroidX.Activity.Result.Contract.ActivityResultContract.SynchronousResult?
AndroidX.Activity.Result.Contract.ActivityResultContracts.RequestMultiplePermissions.RequestMultiplePermissions() -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.RequestPermission
AndroidX.Activity.Result.Contract.ActivityResultContracts.RequestPermission.GetSynchronousResult(Android.Content.Context! context, string! input) -> AndroidX.Activity.Result.Contract.ActivityResultContract.SynchronousResult?
AndroidX.Activity.Result.Contract.ActivityResultContracts.RequestPermission.RequestPermission() -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.StartActivityForResult
AndroidX.Activity.Result.Contract.ActivityResultContracts.StartActivityForResult.Companion
AndroidX.Activity.Result.Contract.ActivityResultContracts.StartActivityForResult.StartActivityForResult() -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.StartIntentSenderForResult
AndroidX.Activity.Result.Contract.ActivityResultContracts.StartIntentSenderForResult.Companion
AndroidX.Activity.Result.Contract.ActivityResultContracts.StartIntentSenderForResult.StartIntentSenderForResult() -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.TakePicture
AndroidX.Activity.Result.Contract.ActivityResultContracts.TakePicture.GetSynchronousResult(Android.Content.Context! context, Android.Net.Uri! input) -> AndroidX.Activity.Result.Contract.ActivityResultContract.SynchronousResult?
AndroidX.Activity.Result.Contract.ActivityResultContracts.TakePicture.TakePicture() -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.TakePicture.TakePicture(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.TakePicturePreview
AndroidX.Activity.Result.Contract.ActivityResultContracts.TakePicturePreview.GetSynchronousResult(Android.Content.Context! context, Java.Lang.Void? input) -> AndroidX.Activity.Result.Contract.ActivityResultContract.SynchronousResult?
AndroidX.Activity.Result.Contract.ActivityResultContracts.TakePicturePreview.TakePicturePreview() -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.TakePicturePreview.TakePicturePreview(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.TakeVideo
AndroidX.Activity.Result.Contract.ActivityResultContracts.TakeVideo.GetSynchronousResult(Android.Content.Context! context, Android.Net.Uri! input) -> AndroidX.Activity.Result.Contract.ActivityResultContract.SynchronousResult?
AndroidX.Activity.Result.Contract.ActivityResultContracts.TakeVideo.TakeVideo() -> void
AndroidX.Activity.Result.Contract.ActivityResultContracts.TakeVideo.TakeVideo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Activity.Result.IActivityResultCallback
AndroidX.Activity.Result.IActivityResultCallback.OnActivityResult(Java.Lang.Object? result) -> void
AndroidX.Activity.Result.IActivityResultCaller
AndroidX.Activity.Result.IActivityResultCaller.RegisterForActivityResult(AndroidX.Activity.Result.Contract.ActivityResultContract! contract, AndroidX.Activity.Result.ActivityResultRegistry! registry, AndroidX.Activity.Result.IActivityResultCallback! callback) -> AndroidX.Activity.Result.ActivityResultLauncher!
AndroidX.Activity.Result.IActivityResultCaller.RegisterForActivityResult(AndroidX.Activity.Result.Contract.ActivityResultContract! contract, AndroidX.Activity.Result.IActivityResultCallback! callback) -> AndroidX.Activity.Result.ActivityResultLauncher!
AndroidX.Activity.Result.IActivityResultRegistryOwner
AndroidX.Activity.Result.IActivityResultRegistryOwner.ActivityResultRegistry.get -> AndroidX.Activity.Result.ActivityResultRegistry!
AndroidX.Activity.Result.IntentSenderRequest
AndroidX.Activity.Result.IntentSenderRequest.Builder
AndroidX.Activity.Result.IntentSenderRequest.Builder.Build() -> AndroidX.Activity.Result.IntentSenderRequest!
AndroidX.Activity.Result.IntentSenderRequest.Builder.Builder(Android.App.PendingIntent! pendingIntent) -> void
AndroidX.Activity.Result.IntentSenderRequest.Builder.Builder(Android.Content.IntentSender! intentSender) -> void
AndroidX.Activity.Result.IntentSenderRequest.Builder.SetFillInIntent(Android.Content.Intent? fillInIntent) -> AndroidX.Activity.Result.IntentSenderRequest.Builder!
AndroidX.Activity.Result.IntentSenderRequest.Builder.SetFlags(int values, int mask) -> AndroidX.Activity.Result.IntentSenderRequest.Builder!
AndroidX.Activity.Result.IntentSenderRequest.Companion
AndroidX.Activity.Result.IntentSenderRequest.DescribeContents() -> int
AndroidX.Activity.Result.IntentSenderRequest.FillInIntent.get -> Android.Content.Intent?
AndroidX.Activity.Result.IntentSenderRequest.FlagsMask.get -> int
AndroidX.Activity.Result.IntentSenderRequest.FlagsValues.get -> int
AndroidX.Activity.Result.IntentSenderRequest.IntentSender.get -> Android.Content.IntentSender!
AndroidX.Activity.Result.IntentSenderRequest.WriteToParcel(Android.OS.Parcel! dest, Android.OS.ParcelableWriteFlags flags) -> void
AndroidX.Activity.Result.PickVisualMediaRequest
AndroidX.Activity.Result.PickVisualMediaRequest.AccentColor.get -> long
AndroidX.Activity.Result.PickVisualMediaRequest.Builder
AndroidX.Activity.Result.PickVisualMediaRequest.Builder.Build() -> AndroidX.Activity.Result.PickVisualMediaRequest!
AndroidX.Activity.Result.PickVisualMediaRequest.Builder.Builder() -> void
AndroidX.Activity.Result.PickVisualMediaRequest.Builder.SetAccentColor(long accentColor) -> AndroidX.Activity.Result.PickVisualMediaRequest.Builder!
AndroidX.Activity.Result.PickVisualMediaRequest.Builder.SetDefaultTab(AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab! defaultTab) -> AndroidX.Activity.Result.PickVisualMediaRequest.Builder!
AndroidX.Activity.Result.PickVisualMediaRequest.Builder.SetMaxItems(int maxItems) -> AndroidX.Activity.Result.PickVisualMediaRequest.Builder!
AndroidX.Activity.Result.PickVisualMediaRequest.Builder.SetMediaCapabilitiesForTranscoding(AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.MediaCapabilities? mediaCapabilities) -> AndroidX.Activity.Result.PickVisualMediaRequest.Builder!
AndroidX.Activity.Result.PickVisualMediaRequest.Builder.SetMediaType(AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.IVisualMediaType! mediaType) -> AndroidX.Activity.Result.PickVisualMediaRequest.Builder!
AndroidX.Activity.Result.PickVisualMediaRequest.Builder.SetOrderedSelection(bool isOrderedSelection) -> AndroidX.Activity.Result.PickVisualMediaRequest.Builder!
AndroidX.Activity.Result.PickVisualMediaRequest.DefaultTab.get -> AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab!
AndroidX.Activity.Result.PickVisualMediaRequest.IsCustomAccentColorApplied.get -> bool
AndroidX.Activity.Result.PickVisualMediaRequest.IsOrderedSelection.get -> bool
AndroidX.Activity.Result.PickVisualMediaRequest.MaxItems.get -> int
AndroidX.Activity.Result.PickVisualMediaRequest.MediaCapabilitiesForTranscoding.get -> AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.MediaCapabilities?
AndroidX.Activity.Result.PickVisualMediaRequest.MediaType.get -> AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.IVisualMediaType!
AndroidX.Activity.Result.PickVisualMediaRequestKt
AndroidX.Activity.SystemBarStyle
AndroidX.Activity.SystemBarStyle.Companion
AndroidX.Activity.SystemBarStyle.Companion.Auto(int lightScrim, int darkScrim) -> AndroidX.Activity.SystemBarStyle!
AndroidX.Activity.SystemBarStyle.Companion.Auto(int lightScrim, int darkScrim, Kotlin.Jvm.Functions.IFunction1! detectDarkMode) -> AndroidX.Activity.SystemBarStyle!
AndroidX.Activity.SystemBarStyle.Companion.Dark(int scrim) -> AndroidX.Activity.SystemBarStyle!
AndroidX.Activity.SystemBarStyle.Companion.Light(int scrim, int darkScrim) -> AndroidX.Activity.SystemBarStyle!
AndroidX.Activity.ViewTreeFullyDrawnReporterOwner
AndroidX.Activity.ViewTreeOnBackPressedDispatcherOwner
abstract AndroidX.Activity.OnBackPressedCallback.HandleOnBackPressed() -> void
abstract AndroidX.Activity.Result.ActivityResultLauncher.Launch(Java.Lang.Object? input, AndroidX.Core.App.ActivityOptionsCompat? options) -> void
abstract AndroidX.Activity.Result.ActivityResultLauncher.RawContract.get -> AndroidX.Activity.Result.Contract.ActivityResultContract!
abstract AndroidX.Activity.Result.ActivityResultLauncher.Unregister() -> void
abstract AndroidX.Activity.Result.ActivityResultRegistry.OnLaunch(int requestCode, AndroidX.Activity.Result.Contract.ActivityResultContract! contract, Java.Lang.Object? input, AndroidX.Core.App.ActivityOptionsCompat? options) -> void
abstract AndroidX.Activity.Result.Contract.ActivityResultContract.CreateIntent(Android.Content.Context! context, Java.Lang.Object? input) -> Android.Content.Intent!
abstract AndroidX.Activity.Result.Contract.ActivityResultContract.ParseResult(int resultCode, Android.Content.Intent? intent) -> Java.Lang.Object?
abstract AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab.Value.get -> int
const AndroidX.Activity.BackEventCompat.EdgeLeft = 0 -> int
const AndroidX.Activity.BackEventCompat.EdgeNone = 2 -> int
const AndroidX.Activity.BackEventCompat.EdgeRight = 1 -> int
const AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.ActionSystemFallbackPickImages = "androidx.activity.result.contract.action.PICK_IMAGES" -> string!
const AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.ExtraSystemFallbackPickImagesAccentColor = "androidx.activity.result.contract.extra.PICK_IMAGES_ACCENT_COLOR" -> string!
const AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.ExtraSystemFallbackPickImagesInOrder = "androidx.activity.result.contract.extra.PICK_IMAGES_IN_ORDER" -> string!
const AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.ExtraSystemFallbackPickImagesLaunchTab = "androidx.activity.result.contract.extra.PICK_IMAGES_LAUNCH_TAB" -> string!
const AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.ExtraSystemFallbackPickImagesMax = "androidx.activity.result.contract.extra.PICK_IMAGES_MAX" -> string!
const AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.GmsActionPickImages = "com.google.android.gms.provider.action.PICK_IMAGES" -> string!
const AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.GmsExtraPickImagesMax = "com.google.android.gms.provider.extra.PICK_IMAGES_MAX" -> string!
const AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.MediaCapabilities.TypeDolbyVision = 3 -> int
const AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.MediaCapabilities.TypeHdr10 = 1 -> int
const AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.MediaCapabilities.TypeHdr10Plus = 2 -> int
const AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.MediaCapabilities.TypeHlg10 = 0 -> int
const AndroidX.Activity.Result.Contract.ActivityResultContracts.RequestMultiplePermissions.ActionRequestPermissions = "androidx.activity.result.contract.action.REQUEST_PERMISSIONS" -> string!
const AndroidX.Activity.Result.Contract.ActivityResultContracts.RequestMultiplePermissions.ExtraPermissionGrantResults = "androidx.activity.result.contract.extra.PERMISSION_GRANT_RESULTS" -> string!
const AndroidX.Activity.Result.Contract.ActivityResultContracts.RequestMultiplePermissions.ExtraPermissions = "androidx.activity.result.contract.extra.PERMISSIONS" -> string!
const AndroidX.Activity.Result.Contract.ActivityResultContracts.StartActivityForResult.ExtraActivityOptionsBundle = "androidx.activity.result.contract.extra.ACTIVITY_OPTIONS_BUNDLE" -> string!
const AndroidX.Activity.Result.Contract.ActivityResultContracts.StartIntentSenderForResult.ActionIntentSenderRequest = "androidx.activity.result.contract.action.INTENT_SENDER_REQUEST" -> string!
const AndroidX.Activity.Result.Contract.ActivityResultContracts.StartIntentSenderForResult.ExtraIntentSenderRequest = "androidx.activity.result.contract.extra.INTENT_SENDER_REQUEST" -> string!
const AndroidX.Activity.Result.Contract.ActivityResultContracts.StartIntentSenderForResult.ExtraSendIntentException = "androidx.activity.result.contract.extra.SEND_INTENT_EXCEPTION" -> string!
override AndroidX.Activity.ActivityViewModelLazyKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.BackEventCompat.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.BackEventCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.ComponentActivity.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.ComponentActivity.NonConfigurationInstances.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.ComponentActivity.ThresholdClass.get -> nint
override AndroidX.Activity.ComponentActivity.ThresholdType.get -> System.Type!
override AndroidX.Activity.ComponentDialog.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.ComponentDialog.ThresholdClass.get -> nint
override AndroidX.Activity.ComponentDialog.ThresholdType.get -> System.Type!
override AndroidX.Activity.ContextAware.ContextAwareHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.ContextAware.ContextAwareKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.EdgeToEdge.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.FullyDrawnReporter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.FullyDrawnReporterKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.OnBackPressedCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.OnBackPressedCallback.ThresholdClass.get -> nint
override AndroidX.Activity.OnBackPressedCallback.ThresholdType.get -> System.Type!
override AndroidX.Activity.OnBackPressedDispatcher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.OnBackPressedDispatcherKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.PipHintTrackerKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.ActivityResult.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.ActivityResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.ActivityResultCallerKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.ActivityResultKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.ActivityResultLauncher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.ActivityResultLauncher.ThresholdClass.get -> nint
override AndroidX.Activity.Result.ActivityResultLauncher.ThresholdType.get -> System.Type!
override AndroidX.Activity.Result.ActivityResultLauncherKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.ActivityResultRegistry.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.ActivityResultRegistry.ThresholdClass.get -> nint
override AndroidX.Activity.Result.ActivityResultRegistry.ThresholdType.get -> System.Type!
override AndroidX.Activity.Result.Contract.ActivityResultContract.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContract.SynchronousResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContract.ThresholdClass.get -> nint
override AndroidX.Activity.Result.Contract.ActivityResultContract.ThresholdType.get -> System.Type!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.CaptureVideo.CreateIntent(Android.Content.Context! context, Java.Lang.Object! input) -> Android.Content.Intent!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.CaptureVideo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.CaptureVideo.ThresholdClass.get -> nint
override AndroidX.Activity.Result.Contract.ActivityResultContracts.CaptureVideo.ThresholdType.get -> System.Type!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.CreateDocument.CreateIntent(Android.Content.Context! context, Java.Lang.Object! input) -> Android.Content.Intent!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.CreateDocument.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.CreateDocument.ThresholdClass.get -> nint
override AndroidX.Activity.Result.Contract.ActivityResultContracts.CreateDocument.ThresholdType.get -> System.Type!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.GetContent.CreateIntent(Android.Content.Context! context, Java.Lang.Object! input) -> Android.Content.Intent!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.GetContent.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.GetContent.ThresholdClass.get -> nint
override AndroidX.Activity.Result.Contract.ActivityResultContracts.GetContent.ThresholdType.get -> System.Type!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.GetMultipleContents.CreateIntent(Android.Content.Context! context, Java.Lang.Object! input) -> Android.Content.Intent!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.GetMultipleContents.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.GetMultipleContents.ThresholdClass.get -> nint
override AndroidX.Activity.Result.Contract.ActivityResultContracts.GetMultipleContents.ThresholdType.get -> System.Type!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenDocument.CreateIntent(Android.Content.Context! context, Java.Lang.Object! input) -> Android.Content.Intent!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenDocument.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenDocument.ThresholdClass.get -> nint
override AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenDocument.ThresholdType.get -> System.Type!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenDocumentTree.CreateIntent(Android.Content.Context! context, Java.Lang.Object? input) -> Android.Content.Intent!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenDocumentTree.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenDocumentTree.ThresholdClass.get -> nint
override AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenDocumentTree.ThresholdType.get -> System.Type!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenMultipleDocuments.CreateIntent(Android.Content.Context! context, Java.Lang.Object! input) -> Android.Content.Intent!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenMultipleDocuments.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenMultipleDocuments.ThresholdClass.get -> nint
override AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenMultipleDocuments.ThresholdType.get -> System.Type!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickContact.CreateIntent(Android.Content.Context! context, Java.Lang.Object? input) -> Android.Content.Intent!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickContact.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickContact.ParseResult(int resultCode, Android.Content.Intent? intent) -> Java.Lang.Object?
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickMultipleVisualMedia.CreateIntent(Android.Content.Context! context, Java.Lang.Object! input) -> Android.Content.Intent!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickMultipleVisualMedia.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickMultipleVisualMedia.ThresholdClass.get -> nint
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickMultipleVisualMedia.ThresholdType.get -> System.Type!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.CreateIntent(Android.Content.Context! context, Java.Lang.Object! input) -> Android.Content.Intent!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab.AlbumsTab.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab.AlbumsTab.Value.get -> int
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab.PhotosTab.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab.PhotosTab.Value.get -> int
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab.ThresholdClass.get -> nint
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab.ThresholdType.get -> System.Type!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.ImageAndVideo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.ImageOnly.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.MediaCapabilities.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.MediaCapabilities.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.MediaCapabilities.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.SingleMimeType.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.ThresholdClass.get -> nint
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.ThresholdType.get -> System.Type!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.VideoOnly.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.RequestMultiplePermissions.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.RequestMultiplePermissions.CreateIntent(Android.Content.Context! context, Java.Lang.Object! input) -> Android.Content.Intent!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.RequestMultiplePermissions.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.RequestMultiplePermissions.ParseResult(int resultCode, Android.Content.Intent? intent) -> Java.Lang.Object!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.RequestPermission.CreateIntent(Android.Content.Context! context, Java.Lang.Object! input) -> Android.Content.Intent!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.RequestPermission.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.RequestPermission.ParseResult(int resultCode, Android.Content.Intent? intent) -> Java.Lang.Object!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.StartActivityForResult.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.StartActivityForResult.CreateIntent(Android.Content.Context! context, Java.Lang.Object! input) -> Android.Content.Intent!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.StartActivityForResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.StartActivityForResult.ParseResult(int resultCode, Android.Content.Intent? intent) -> Java.Lang.Object!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.StartIntentSenderForResult.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.StartIntentSenderForResult.CreateIntent(Android.Content.Context! context, Java.Lang.Object! input) -> Android.Content.Intent!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.StartIntentSenderForResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.StartIntentSenderForResult.ParseResult(int resultCode, Android.Content.Intent? intent) -> Java.Lang.Object!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.TakePicture.CreateIntent(Android.Content.Context! context, Java.Lang.Object! input) -> Android.Content.Intent!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.TakePicture.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.TakePicture.ThresholdClass.get -> nint
override AndroidX.Activity.Result.Contract.ActivityResultContracts.TakePicture.ThresholdType.get -> System.Type!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.TakePicturePreview.CreateIntent(Android.Content.Context! context, Java.Lang.Object? input) -> Android.Content.Intent!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.TakePicturePreview.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.TakePicturePreview.ThresholdClass.get -> nint
override AndroidX.Activity.Result.Contract.ActivityResultContracts.TakePicturePreview.ThresholdType.get -> System.Type!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.TakeVideo.CreateIntent(Android.Content.Context! context, Java.Lang.Object! input) -> Android.Content.Intent!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.TakeVideo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.Contract.ActivityResultContracts.TakeVideo.ThresholdClass.get -> nint
override AndroidX.Activity.Result.Contract.ActivityResultContracts.TakeVideo.ThresholdType.get -> System.Type!
override AndroidX.Activity.Result.IntentSenderRequest.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.IntentSenderRequest.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.IntentSenderRequest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.PickVisualMediaRequest.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.PickVisualMediaRequest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.Result.PickVisualMediaRequestKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.SystemBarStyle.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.SystemBarStyle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.ViewTreeFullyDrawnReporterOwner.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Activity.ViewTreeOnBackPressedDispatcherOwner.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override sealed AndroidX.Activity.ComponentActivity.OnRetainNonConfigurationInstance() -> Java.Lang.Object?
override sealed AndroidX.Activity.Result.Contract.ActivityResultContracts.CaptureVideo.ParseResult(int resultCode, Android.Content.Intent? intent) -> Java.Lang.Object!
override sealed AndroidX.Activity.Result.Contract.ActivityResultContracts.CreateDocument.ParseResult(int resultCode, Android.Content.Intent? intent) -> Java.Lang.Object?
override sealed AndroidX.Activity.Result.Contract.ActivityResultContracts.GetContent.ParseResult(int resultCode, Android.Content.Intent? intent) -> Java.Lang.Object?
override sealed AndroidX.Activity.Result.Contract.ActivityResultContracts.GetMultipleContents.ParseResult(int resultCode, Android.Content.Intent? intent) -> Java.Lang.Object!
override sealed AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenDocument.ParseResult(int resultCode, Android.Content.Intent? intent) -> Java.Lang.Object?
override sealed AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenDocumentTree.ParseResult(int resultCode, Android.Content.Intent? intent) -> Java.Lang.Object?
override sealed AndroidX.Activity.Result.Contract.ActivityResultContracts.OpenMultipleDocuments.ParseResult(int resultCode, Android.Content.Intent? intent) -> Java.Lang.Object!
override sealed AndroidX.Activity.Result.Contract.ActivityResultContracts.PickMultipleVisualMedia.ParseResult(int resultCode, Android.Content.Intent? intent) -> Java.Lang.Object!
override sealed AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.ParseResult(int resultCode, Android.Content.Intent? intent) -> Java.Lang.Object?
override sealed AndroidX.Activity.Result.Contract.ActivityResultContracts.TakePicture.ParseResult(int resultCode, Android.Content.Intent? intent) -> Java.Lang.Object!
override sealed AndroidX.Activity.Result.Contract.ActivityResultContracts.TakePicturePreview.ParseResult(int resultCode, Android.Content.Intent? intent) -> Java.Lang.Object?
override sealed AndroidX.Activity.Result.Contract.ActivityResultContracts.TakeVideo.ParseResult(int resultCode, Android.Content.Intent? intent) -> Java.Lang.Object?
static AndroidX.Activity.ContextAware.ContextAwareKt.WithContextAvailable(AndroidX.Activity.ContextAware.IContextAware! obj, Kotlin.Jvm.Functions.IFunction1! onContextAvailable, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Activity.EdgeToEdge.DefaultDarkScrim.get -> int
static AndroidX.Activity.EdgeToEdge.DefaultLightScrim.get -> int
static AndroidX.Activity.EdgeToEdge.Enable(AndroidX.Activity.ComponentActivity! obj) -> void
static AndroidX.Activity.EdgeToEdge.Enable(AndroidX.Activity.ComponentActivity! obj, AndroidX.Activity.SystemBarStyle! statusBarStyle) -> void
static AndroidX.Activity.EdgeToEdge.Enable(AndroidX.Activity.ComponentActivity! obj, AndroidX.Activity.SystemBarStyle! statusBarStyle, AndroidX.Activity.SystemBarStyle! navigationBarStyle) -> void
static AndroidX.Activity.FullyDrawnReporterKt.ReportWhenComplete(AndroidX.Activity.FullyDrawnReporter! p0, Kotlin.Jvm.Functions.IFunction1! reporter, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Activity.OnBackPressedDispatcherKt.AddCallback(AndroidX.Activity.OnBackPressedDispatcher! obj, AndroidX.Lifecycle.ILifecycleOwner? owner, bool enabled, Kotlin.Jvm.Functions.IFunction1! onBackPressed) -> AndroidX.Activity.OnBackPressedCallback!
static AndroidX.Activity.PipHintTrackerKt.TrackPipAnimationHintView(Android.App.Activity! obj, Android.Views.View! view, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Activity.Result.ActivityResult.Creator.get -> Android.OS.IParcelableCreator!
static AndroidX.Activity.Result.ActivityResult.ResultCodeToString(int resultCode) -> string!
static AndroidX.Activity.Result.ActivityResultCallerKt.RegisterForActivityResult(AndroidX.Activity.Result.IActivityResultCaller! obj, AndroidX.Activity.Result.Contract.ActivityResultContract! contract, Java.Lang.Object? input, AndroidX.Activity.Result.ActivityResultRegistry! registry, Kotlin.Jvm.Functions.IFunction1! callback) -> AndroidX.Activity.Result.ActivityResultLauncher!
static AndroidX.Activity.Result.ActivityResultCallerKt.RegisterForActivityResult(AndroidX.Activity.Result.IActivityResultCaller! obj, AndroidX.Activity.Result.Contract.ActivityResultContract! contract, Java.Lang.Object? input, Kotlin.Jvm.Functions.IFunction1! callback) -> AndroidX.Activity.Result.ActivityResultLauncher!
static AndroidX.Activity.Result.ActivityResultKt.Component1(AndroidX.Activity.Result.ActivityResult! obj) -> int
static AndroidX.Activity.Result.ActivityResultKt.Component2(AndroidX.Activity.Result.ActivityResult! obj) -> Android.Content.Intent?
static AndroidX.Activity.Result.ActivityResultLauncherKt.Launch(AndroidX.Activity.Result.ActivityResultLauncher! obj, AndroidX.Core.App.ActivityOptionsCompat? options) -> void
static AndroidX.Activity.Result.ActivityResultLauncherKt.LaunchUnit(AndroidX.Activity.Result.ActivityResultLauncher! obj, AndroidX.Core.App.ActivityOptionsCompat? options) -> void
static AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab.AlbumsTab.Instance.get -> AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab.AlbumsTab!
static AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab.PhotosTab.Instance.get -> AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab.PhotosTab!
static AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.ImageAndVideo.Instance.get -> AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.ImageAndVideo!
static AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.ImageOnly.Instance.get -> AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.ImageOnly!
static AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.InvokeIsPhotoPickerAvailable(Android.Content.Context! context) -> bool
static AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.IsPhotoPickerAvailable.get -> bool
static AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.VideoOnly.Instance.get -> AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.VideoOnly!
static AndroidX.Activity.Result.IntentSenderRequest.Creator.get -> Android.OS.IParcelableCreator!
static AndroidX.Activity.Result.PickVisualMediaRequestKt.PickVisualMediaRequest(AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.IVisualMediaType! mediaType, int maxItems, bool isOrderedSelection, AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab! defaultTab) -> AndroidX.Activity.Result.PickVisualMediaRequest!
static AndroidX.Activity.Result.PickVisualMediaRequestKt.PickVisualMediaRequest(AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.MediaCapabilities? mediaCapabilitiesForTranscoding, AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.IVisualMediaType! mediaType, int maxItems, bool isOrderedSelection, AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab! defaultTab) -> AndroidX.Activity.Result.PickVisualMediaRequest!
static AndroidX.Activity.Result.PickVisualMediaRequestKt.PickVisualMediaRequest(AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.MediaCapabilities? mediaCapabilitiesForTranscoding, long accentColor, AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.IVisualMediaType! mediaType, int maxItems, bool isOrderedSelection, AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab! defaultTab) -> AndroidX.Activity.Result.PickVisualMediaRequest!
static AndroidX.Activity.Result.PickVisualMediaRequestKt.PickVisualMediaRequest(long accentColor, AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.IVisualMediaType! mediaType, int maxItems, bool isOrderedSelection, AndroidX.Activity.Result.Contract.ActivityResultContracts.PickVisualMedia.DefaultTab! defaultTab) -> AndroidX.Activity.Result.PickVisualMediaRequest!
static AndroidX.Activity.SystemBarStyle.Auto(int lightScrim, int darkScrim) -> AndroidX.Activity.SystemBarStyle!
static AndroidX.Activity.SystemBarStyle.Auto(int lightScrim, int darkScrim, Kotlin.Jvm.Functions.IFunction1! detectDarkMode) -> AndroidX.Activity.SystemBarStyle!
static AndroidX.Activity.SystemBarStyle.Dark(int scrim) -> AndroidX.Activity.SystemBarStyle!
static AndroidX.Activity.SystemBarStyle.Light(int scrim, int darkScrim) -> AndroidX.Activity.SystemBarStyle!
static AndroidX.Activity.ViewTreeFullyDrawnReporterOwner.Get(Android.Views.View! obj) -> AndroidX.Activity.IFullyDrawnReporterOwner?
static AndroidX.Activity.ViewTreeFullyDrawnReporterOwner.Set(Android.Views.View! obj, AndroidX.Activity.IFullyDrawnReporterOwner! fullyDrawnReporterOwner) -> void
static AndroidX.Activity.ViewTreeOnBackPressedDispatcherOwner.Get(Android.Views.View! obj) -> AndroidX.Activity.IOnBackPressedDispatcherOwner?
static AndroidX.Activity.ViewTreeOnBackPressedDispatcherOwner.Set(Android.Views.View! obj, AndroidX.Activity.IOnBackPressedDispatcherOwner! onBackPressedDispatcherOwner) -> void
virtual AndroidX.Activity.ComponentActivity.AddMenuProvider(AndroidX.Core.View.IMenuProvider! provider) -> void
virtual AndroidX.Activity.ComponentActivity.AddMenuProvider(AndroidX.Core.View.IMenuProvider! provider, AndroidX.Lifecycle.ILifecycleOwner! owner) -> void
virtual AndroidX.Activity.ComponentActivity.AddMenuProvider(AndroidX.Core.View.IMenuProvider! provider, AndroidX.Lifecycle.ILifecycleOwner! owner, AndroidX.Lifecycle.Lifecycle.State! state) -> void
virtual AndroidX.Activity.ComponentActivity.DefaultViewModelCreationExtras.get -> AndroidX.Lifecycle.ViewModels.CreationExtras!
virtual AndroidX.Activity.ComponentActivity.DefaultViewModelProviderFactory.get -> AndroidX.Lifecycle.ViewModelProvider.IFactory!
virtual AndroidX.Activity.ComponentActivity.FullyDrawnReporter.get -> AndroidX.Activity.FullyDrawnReporter!
virtual AndroidX.Activity.ComponentActivity.InitializeViewTreeOwners() -> void
virtual AndroidX.Activity.ComponentActivity.InvalidateMenu() -> void
virtual AndroidX.Activity.ComponentActivity.LastCustomNonConfigurationInstance.get -> Java.Lang.Object?
virtual AndroidX.Activity.ComponentActivity.OnRetainCustomNonConfigurationInstance() -> Java.Lang.Object?
virtual AndroidX.Activity.ComponentActivity.PeekAvailableContext() -> Android.Content.Context?
virtual AndroidX.Activity.ComponentActivity.RemoveMenuProvider(AndroidX.Core.View.IMenuProvider! provider) -> void
virtual AndroidX.Activity.ComponentActivity.ViewModelStore.get -> AndroidX.Lifecycle.ViewModelStore!
virtual AndroidX.Activity.ComponentDialog.GetOnBackPressedDispatcher() -> AndroidX.Activity.OnBackPressedDispatcher!
virtual AndroidX.Activity.ComponentDialog.InitializeViewTreeOwners() -> void
virtual AndroidX.Activity.ComponentDialog.Lifecycle.get -> AndroidX.Lifecycle.Lifecycle!
virtual AndroidX.Activity.ComponentDialog.SavedStateRegistry.get -> AndroidX.SavedState.SavedStateRegistry!
virtual AndroidX.Activity.OnBackPressedCallback.HandleOnBackCancelled() -> void
virtual AndroidX.Activity.OnBackPressedCallback.HandleOnBackProgressed(AndroidX.Activity.BackEventCompat! backEvent) -> void
virtual AndroidX.Activity.OnBackPressedCallback.HandleOnBackStarted(AndroidX.Activity.BackEventCompat! backEvent) -> void
virtual AndroidX.Activity.Result.ActivityResultLauncher.Launch(Java.Lang.Object? input) -> void
virtual AndroidX.Activity.Result.Contract.ActivityResultContract.GetSynchronousResult(Android.Content.Context! context, Java.Lang.Object? input) -> AndroidX.Activity.Result.Contract.ActivityResultContract.SynchronousResult?
