#nullable enable
Square.JavaPoet.AnnotationSpec
Square.JavaPoet.AnnotationSpec.Builder
Square.JavaPoet.AnnotationSpec.Builder.AddMember(string? name, Square.JavaPoet.CodeBlock? codeBlock) -> Square.JavaPoet.AnnotationSpec.Builder?
Square.JavaPoet.AnnotationSpec.Builder.AddMember(string? name, string? format, params Java.Lang.Object![]? args) -> Square.JavaPoet.AnnotationSpec.Builder?
Square.JavaPoet.AnnotationSpec.Builder.Build() -> Square.JavaPoet.AnnotationSpec?
Square.JavaPoet.AnnotationSpec.Builder.Members.get -> System.Collections.IDictionary?
Square.JavaPoet.AnnotationSpec.Builder.Members.set -> void
Square.JavaPoet.AnnotationSpec.Members.get -> System.Collections.IDictionary?
Square.JavaPoet.AnnotationSpec.Members.set -> void
Square.JavaPoet.AnnotationSpec.ToBuilder() -> Square.JavaPoet.AnnotationSpec.Builder?
Square.JavaPoet.AnnotationSpec.Type.get -> Square.JavaPoet.TypeName?
Square.JavaPoet.AnnotationSpec.Type.set -> void
Square.JavaPoet.ArrayTypeName
Square.JavaPoet.ArrayTypeName.ComponentType.get -> Square.JavaPoet.TypeName?
Square.JavaPoet.ArrayTypeName.ComponentType.set -> void
Square.JavaPoet.ClassName
Square.JavaPoet.ClassName.CanonicalName() -> string?
Square.JavaPoet.ClassName.CompareTo(Java.Lang.Object? o) -> int
Square.JavaPoet.ClassName.EnclosingClassName() -> Square.JavaPoet.ClassName?
Square.JavaPoet.ClassName.NestedClass(string? name) -> Square.JavaPoet.ClassName?
Square.JavaPoet.ClassName.PackageName() -> string?
Square.JavaPoet.ClassName.PeerClass(string? name) -> Square.JavaPoet.ClassName?
Square.JavaPoet.ClassName.ReflectionName() -> string?
Square.JavaPoet.ClassName.SimpleName() -> string?
Square.JavaPoet.ClassName.SimpleNames() -> System.Collections.Generic.IList<string!>?
Square.JavaPoet.ClassName.TopLevelClassName() -> Square.JavaPoet.ClassName?
Square.JavaPoet.CodeBlock
Square.JavaPoet.CodeBlock.Builder
Square.JavaPoet.CodeBlock.Builder.Add(Square.JavaPoet.CodeBlock? codeBlock) -> Square.JavaPoet.CodeBlock.Builder?
Square.JavaPoet.CodeBlock.Builder.Add(string? format, params Java.Lang.Object![]? args) -> Square.JavaPoet.CodeBlock.Builder?
Square.JavaPoet.CodeBlock.Builder.AddNamed(string? format, System.Collections.Generic.IDictionary<string!, object!>? arguments) -> Square.JavaPoet.CodeBlock.Builder?
Square.JavaPoet.CodeBlock.Builder.AddStatement(Square.JavaPoet.CodeBlock? codeBlock) -> Square.JavaPoet.CodeBlock.Builder?
Square.JavaPoet.CodeBlock.Builder.AddStatement(string? format, params Java.Lang.Object![]? args) -> Square.JavaPoet.CodeBlock.Builder?
Square.JavaPoet.CodeBlock.Builder.BeginControlFlow(string? controlFlow, params Java.Lang.Object![]? args) -> Square.JavaPoet.CodeBlock.Builder?
Square.JavaPoet.CodeBlock.Builder.Build() -> Square.JavaPoet.CodeBlock?
Square.JavaPoet.CodeBlock.Builder.Clear() -> Square.JavaPoet.CodeBlock.Builder?
Square.JavaPoet.CodeBlock.Builder.EndControlFlow() -> Square.JavaPoet.CodeBlock.Builder?
Square.JavaPoet.CodeBlock.Builder.EndControlFlow(string? controlFlow, params Java.Lang.Object![]? args) -> Square.JavaPoet.CodeBlock.Builder?
Square.JavaPoet.CodeBlock.Builder.Indent() -> Square.JavaPoet.CodeBlock.Builder?
Square.JavaPoet.CodeBlock.Builder.IsEmpty.get -> bool
Square.JavaPoet.CodeBlock.Builder.NextControlFlow(string? controlFlow, params Java.Lang.Object![]? args) -> Square.JavaPoet.CodeBlock.Builder?
Square.JavaPoet.CodeBlock.Builder.Unindent() -> Square.JavaPoet.CodeBlock.Builder?
Square.JavaPoet.CodeBlock.IsEmpty.get -> bool
Square.JavaPoet.CodeBlock.ToBuilder() -> Square.JavaPoet.CodeBlock.Builder?
Square.JavaPoet.FieldSpec
Square.JavaPoet.FieldSpec.Annotations.get -> System.Collections.IList?
Square.JavaPoet.FieldSpec.Annotations.set -> void
Square.JavaPoet.FieldSpec.Builder
Square.JavaPoet.FieldSpec.Builder.AddAnnotation(Java.Lang.Class? annotation) -> Square.JavaPoet.FieldSpec.Builder?
Square.JavaPoet.FieldSpec.Builder.AddAnnotation(Square.JavaPoet.AnnotationSpec? annotationSpec) -> Square.JavaPoet.FieldSpec.Builder?
Square.JavaPoet.FieldSpec.Builder.AddAnnotation(Square.JavaPoet.ClassName? annotation) -> Square.JavaPoet.FieldSpec.Builder?
Square.JavaPoet.FieldSpec.Builder.AddAnnotations(Java.Lang.IIterable? annotationSpecs) -> Square.JavaPoet.FieldSpec.Builder?
Square.JavaPoet.FieldSpec.Builder.AddJavadoc(Square.JavaPoet.CodeBlock? block) -> Square.JavaPoet.FieldSpec.Builder?
Square.JavaPoet.FieldSpec.Builder.AddJavadoc(string? format, params Java.Lang.Object![]? args) -> Square.JavaPoet.FieldSpec.Builder?
Square.JavaPoet.FieldSpec.Builder.Annotations.get -> System.Collections.IList?
Square.JavaPoet.FieldSpec.Builder.Annotations.set -> void
Square.JavaPoet.FieldSpec.Builder.Build() -> Square.JavaPoet.FieldSpec?
Square.JavaPoet.FieldSpec.Builder.Initializer(Square.JavaPoet.CodeBlock? codeBlock) -> Square.JavaPoet.FieldSpec.Builder?
Square.JavaPoet.FieldSpec.Builder.Initializer(string? format, params Java.Lang.Object![]? args) -> Square.JavaPoet.FieldSpec.Builder?
Square.JavaPoet.FieldSpec.Initializer.get -> Square.JavaPoet.CodeBlock?
Square.JavaPoet.FieldSpec.Initializer.set -> void
Square.JavaPoet.FieldSpec.Javadoc.get -> Square.JavaPoet.CodeBlock?
Square.JavaPoet.FieldSpec.Javadoc.set -> void
Square.JavaPoet.FieldSpec.Name.get -> string?
Square.JavaPoet.FieldSpec.Name.set -> void
Square.JavaPoet.FieldSpec.ToBuilder() -> Square.JavaPoet.FieldSpec.Builder?
Square.JavaPoet.FieldSpec.Type.get -> Square.JavaPoet.TypeName?
Square.JavaPoet.FieldSpec.Type.set -> void
Square.JavaPoet.JavaFile
Square.JavaPoet.JavaFile.Builder
Square.JavaPoet.JavaFile.Builder.AddFileComment(string? format, params Java.Lang.Object![]? args) -> Square.JavaPoet.JavaFile.Builder?
Square.JavaPoet.JavaFile.Builder.AddStaticImport(Java.Lang.Class? clazz, params string![]? names) -> Square.JavaPoet.JavaFile.Builder?
Square.JavaPoet.JavaFile.Builder.AddStaticImport(Java.Lang.Enum? constant) -> Square.JavaPoet.JavaFile.Builder?
Square.JavaPoet.JavaFile.Builder.AddStaticImport(Square.JavaPoet.ClassName? className, params string![]? names) -> Square.JavaPoet.JavaFile.Builder?
Square.JavaPoet.JavaFile.Builder.Build() -> Square.JavaPoet.JavaFile?
Square.JavaPoet.JavaFile.Builder.Indent(string? indent) -> Square.JavaPoet.JavaFile.Builder?
Square.JavaPoet.JavaFile.Builder.SkipJavaLangImports(bool skipJavaLangImports) -> Square.JavaPoet.JavaFile.Builder?
Square.JavaPoet.JavaFile.Builder.StaticImports.get -> System.Collections.ICollection?
Square.JavaPoet.JavaFile.Builder.StaticImports.set -> void
Square.JavaPoet.JavaFile.FileComment.get -> Square.JavaPoet.CodeBlock?
Square.JavaPoet.JavaFile.FileComment.set -> void
Square.JavaPoet.JavaFile.PackageName.get -> string?
Square.JavaPoet.JavaFile.PackageName.set -> void
Square.JavaPoet.JavaFile.SkipJavaLangImports.get -> bool
Square.JavaPoet.JavaFile.SkipJavaLangImports.set -> void
Square.JavaPoet.JavaFile.ToBuilder() -> Square.JavaPoet.JavaFile.Builder?
Square.JavaPoet.JavaFile.TypeSpec.get -> Square.JavaPoet.TypeSpec?
Square.JavaPoet.JavaFile.TypeSpec.set -> void
Square.JavaPoet.JavaFile.WriteTo(Java.IO.File? directory) -> void
Square.JavaPoet.JavaFile.WriteTo(Java.Lang.IAppendable? out) -> void
Square.JavaPoet.JavaFile.WriteTo(Java.Nio.FileNio.IPath? directory) -> void
Square.JavaPoet.JavaFile.WriteTo(Java.Nio.FileNio.IPath? directory, Java.Nio.Charset.Charset? charset) -> void
Square.JavaPoet.JavaFile.WriteToFile(Java.IO.File? directory) -> Java.IO.File?
Square.JavaPoet.JavaFile.WriteToPath(Java.Nio.FileNio.IPath? directory) -> Java.Nio.FileNio.IPath?
Square.JavaPoet.JavaFile.WriteToPath(Java.Nio.FileNio.IPath? directory, Java.Nio.Charset.Charset? charset) -> Java.Nio.FileNio.IPath?
Square.JavaPoet.MethodSpec
Square.JavaPoet.MethodSpec.Annotations.get -> System.Collections.IList?
Square.JavaPoet.MethodSpec.Annotations.set -> void
Square.JavaPoet.MethodSpec.Builder
Square.JavaPoet.MethodSpec.Builder.AddAnnotation(Java.Lang.Class? annotation) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.AddAnnotation(Square.JavaPoet.AnnotationSpec? annotationSpec) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.AddAnnotation(Square.JavaPoet.ClassName? annotation) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.AddAnnotations(Java.Lang.IIterable? annotationSpecs) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.AddCode(Square.JavaPoet.CodeBlock? codeBlock) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.AddCode(string? format, params Java.Lang.Object![]? args) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.AddComment(string? format, params Java.Lang.Object![]? args) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.AddException(Java.Lang.Reflect.IType? exception) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.AddException(Square.JavaPoet.TypeName? exception) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.AddExceptions(Java.Lang.IIterable? exceptions) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.AddJavadoc(Square.JavaPoet.CodeBlock? block) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.AddJavadoc(string? format, params Java.Lang.Object![]? args) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.AddNamedCode(string? format, System.Collections.Generic.IDictionary<string!, object!>? args) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.AddParameter(Square.JavaPoet.ParameterSpec? parameterSpec) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.AddParameters(Java.Lang.IIterable? parameterSpecs) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.AddStatement(Square.JavaPoet.CodeBlock? codeBlock) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.AddStatement(string? format, params Java.Lang.Object![]? args) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.AddTypeVariable(Square.JavaPoet.TypeVariableName? typeVariable) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.AddTypeVariables(Java.Lang.IIterable? typeVariables) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.Annotations.get -> System.Collections.IList?
Square.JavaPoet.MethodSpec.Builder.Annotations.set -> void
Square.JavaPoet.MethodSpec.Builder.BeginControlFlow(Square.JavaPoet.CodeBlock? codeBlock) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.BeginControlFlow(string? controlFlow, params Java.Lang.Object![]? args) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.Build() -> Square.JavaPoet.MethodSpec?
Square.JavaPoet.MethodSpec.Builder.DefaultValue(Square.JavaPoet.CodeBlock? codeBlock) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.DefaultValue(string? format, params Java.Lang.Object![]? args) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.EndControlFlow() -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.EndControlFlow(Square.JavaPoet.CodeBlock? codeBlock) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.EndControlFlow(string? controlFlow, params Java.Lang.Object![]? args) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.NextControlFlow(Square.JavaPoet.CodeBlock? codeBlock) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.NextControlFlow(string? controlFlow, params Java.Lang.Object![]? args) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.Parameters.get -> System.Collections.IList?
Square.JavaPoet.MethodSpec.Builder.Parameters.set -> void
Square.JavaPoet.MethodSpec.Builder.Returns(Java.Lang.Reflect.IType? returnType) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.Returns(Square.JavaPoet.TypeName? returnType) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.SetName(string? name) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.TypeVariables.get -> System.Collections.IList?
Square.JavaPoet.MethodSpec.Builder.TypeVariables.set -> void
Square.JavaPoet.MethodSpec.Builder.Varargs() -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Builder.Varargs(bool varargs) -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.Code.get -> Square.JavaPoet.CodeBlock?
Square.JavaPoet.MethodSpec.Code.set -> void
Square.JavaPoet.MethodSpec.DefaultValue.get -> Square.JavaPoet.CodeBlock?
Square.JavaPoet.MethodSpec.DefaultValue.set -> void
Square.JavaPoet.MethodSpec.Exceptions.get -> System.Collections.IList?
Square.JavaPoet.MethodSpec.Exceptions.set -> void
Square.JavaPoet.MethodSpec.IsConstructor.get -> bool
Square.JavaPoet.MethodSpec.Javadoc.get -> Square.JavaPoet.CodeBlock?
Square.JavaPoet.MethodSpec.Javadoc.set -> void
Square.JavaPoet.MethodSpec.Name.get -> string?
Square.JavaPoet.MethodSpec.Name.set -> void
Square.JavaPoet.MethodSpec.Parameters.get -> System.Collections.IList?
Square.JavaPoet.MethodSpec.Parameters.set -> void
Square.JavaPoet.MethodSpec.ReturnType.get -> Square.JavaPoet.TypeName?
Square.JavaPoet.MethodSpec.ReturnType.set -> void
Square.JavaPoet.MethodSpec.ToBuilder() -> Square.JavaPoet.MethodSpec.Builder?
Square.JavaPoet.MethodSpec.TypeVariables.get -> System.Collections.IList?
Square.JavaPoet.MethodSpec.TypeVariables.set -> void
Square.JavaPoet.MethodSpec.Varargs.get -> bool
Square.JavaPoet.MethodSpec.Varargs.set -> void
Square.JavaPoet.NameAllocator
Square.JavaPoet.NameAllocator.Clone() -> Square.JavaPoet.NameAllocator?
Square.JavaPoet.NameAllocator.Get(Java.Lang.Object? tag) -> string?
Square.JavaPoet.NameAllocator.NameAllocator() -> void
Square.JavaPoet.NameAllocator.NewName(string? suggestion) -> string?
Square.JavaPoet.NameAllocator.NewName(string? suggestion, Java.Lang.Object? tag) -> string?
Square.JavaPoet.ParameterSpec
Square.JavaPoet.ParameterSpec.Annotations.get -> System.Collections.IList?
Square.JavaPoet.ParameterSpec.Annotations.set -> void
Square.JavaPoet.ParameterSpec.Builder
Square.JavaPoet.ParameterSpec.Builder.AddAnnotation(Java.Lang.Class? annotation) -> Square.JavaPoet.ParameterSpec.Builder?
Square.JavaPoet.ParameterSpec.Builder.AddAnnotation(Square.JavaPoet.AnnotationSpec? annotationSpec) -> Square.JavaPoet.ParameterSpec.Builder?
Square.JavaPoet.ParameterSpec.Builder.AddAnnotation(Square.JavaPoet.ClassName? annotation) -> Square.JavaPoet.ParameterSpec.Builder?
Square.JavaPoet.ParameterSpec.Builder.AddAnnotations(Java.Lang.IIterable? annotationSpecs) -> Square.JavaPoet.ParameterSpec.Builder?
Square.JavaPoet.ParameterSpec.Builder.AddJavadoc(Square.JavaPoet.CodeBlock? block) -> Square.JavaPoet.ParameterSpec.Builder?
Square.JavaPoet.ParameterSpec.Builder.AddJavadoc(string? format, params Java.Lang.Object![]? args) -> Square.JavaPoet.ParameterSpec.Builder?
Square.JavaPoet.ParameterSpec.Builder.Annotations.get -> System.Collections.IList?
Square.JavaPoet.ParameterSpec.Builder.Annotations.set -> void
Square.JavaPoet.ParameterSpec.Builder.Build() -> Square.JavaPoet.ParameterSpec?
Square.JavaPoet.ParameterSpec.Javadoc.get -> Square.JavaPoet.CodeBlock?
Square.JavaPoet.ParameterSpec.Javadoc.set -> void
Square.JavaPoet.ParameterSpec.Name.get -> string?
Square.JavaPoet.ParameterSpec.Name.set -> void
Square.JavaPoet.ParameterSpec.ToBuilder() -> Square.JavaPoet.ParameterSpec.Builder?
Square.JavaPoet.ParameterSpec.Type.get -> Square.JavaPoet.TypeName?
Square.JavaPoet.ParameterSpec.Type.set -> void
Square.JavaPoet.ParameterizedTypeName
Square.JavaPoet.ParameterizedTypeName.NestedClass(string? name) -> Square.JavaPoet.ParameterizedTypeName?
Square.JavaPoet.ParameterizedTypeName.NestedClass(string? name, System.Collections.Generic.IList<Square.JavaPoet.TypeName!>? typeArguments) -> Square.JavaPoet.ParameterizedTypeName?
Square.JavaPoet.ParameterizedTypeName.RawType.get -> Square.JavaPoet.ClassName?
Square.JavaPoet.ParameterizedTypeName.RawType.set -> void
Square.JavaPoet.ParameterizedTypeName.TypeArguments.get -> System.Collections.IList?
Square.JavaPoet.ParameterizedTypeName.TypeArguments.set -> void
Square.JavaPoet.TypeName
Square.JavaPoet.TypeName.Annotated(params Square.JavaPoet.AnnotationSpec![]? annotations) -> Square.JavaPoet.TypeName?
Square.JavaPoet.TypeName.Annotations.get -> System.Collections.IList?
Square.JavaPoet.TypeName.Annotations.set -> void
Square.JavaPoet.TypeName.ConcatAnnotations(System.Collections.Generic.IList<Square.JavaPoet.AnnotationSpec!>? annotations) -> System.Collections.Generic.IList<Square.JavaPoet.AnnotationSpec!>?
Square.JavaPoet.TypeName.TypeName(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Square.JavaPoet.TypeSpec
Square.JavaPoet.TypeSpec.AlwaysQualifiedNames.get -> System.Collections.ICollection?
Square.JavaPoet.TypeSpec.AlwaysQualifiedNames.set -> void
Square.JavaPoet.TypeSpec.Annotations.get -> System.Collections.IList?
Square.JavaPoet.TypeSpec.Annotations.set -> void
Square.JavaPoet.TypeSpec.AnonymousTypeArguments.get -> Square.JavaPoet.CodeBlock?
Square.JavaPoet.TypeSpec.AnonymousTypeArguments.set -> void
Square.JavaPoet.TypeSpec.Builder
Square.JavaPoet.TypeSpec.Builder.AddAnnotation(Java.Lang.Class? annotation) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AddAnnotation(Square.JavaPoet.AnnotationSpec? annotationSpec) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AddAnnotation(Square.JavaPoet.ClassName? annotation) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AddAnnotations(Java.Lang.IIterable? annotationSpecs) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AddEnumConstant(string? name) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AddEnumConstant(string? name, Square.JavaPoet.TypeSpec? typeSpec) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AddField(Square.JavaPoet.FieldSpec? fieldSpec) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AddFields(Java.Lang.IIterable? fieldSpecs) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AddInitializerBlock(Square.JavaPoet.CodeBlock? block) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AddJavadoc(Square.JavaPoet.CodeBlock? block) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AddJavadoc(string? format, params Java.Lang.Object![]? args) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AddMethod(Square.JavaPoet.MethodSpec? methodSpec) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AddMethods(Java.Lang.IIterable? methodSpecs) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AddStaticBlock(Square.JavaPoet.CodeBlock? block) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AddSuperinterface(Java.Lang.Reflect.IType? superinterface) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AddSuperinterface(Java.Lang.Reflect.IType? superinterface, bool avoidNestedTypeNameClashes) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AddSuperinterface(Square.JavaPoet.TypeName? superinterface) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AddSuperinterfaces(Java.Lang.IIterable? superinterfaces) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AddType(Square.JavaPoet.TypeSpec? typeSpec) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AddTypeVariable(Square.JavaPoet.TypeVariableName? typeVariable) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AddTypeVariables(Java.Lang.IIterable? typeVariables) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AddTypes(Java.Lang.IIterable? typeSpecs) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.AlwaysQualifiedNames.get -> System.Collections.ICollection?
Square.JavaPoet.TypeSpec.Builder.AlwaysQualifiedNames.set -> void
Square.JavaPoet.TypeSpec.Builder.AlwaysQualify(params string![]? simpleNames) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.Annotations.get -> System.Collections.IList?
Square.JavaPoet.TypeSpec.Builder.Annotations.set -> void
Square.JavaPoet.TypeSpec.Builder.AvoidClashesWithNestedClasses(Java.Lang.Class? clazz) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.Build() -> Square.JavaPoet.TypeSpec?
Square.JavaPoet.TypeSpec.Builder.EnumConstants.get -> System.Collections.IDictionary?
Square.JavaPoet.TypeSpec.Builder.EnumConstants.set -> void
Square.JavaPoet.TypeSpec.Builder.FieldSpecs.get -> System.Collections.IList?
Square.JavaPoet.TypeSpec.Builder.FieldSpecs.set -> void
Square.JavaPoet.TypeSpec.Builder.MethodSpecs.get -> System.Collections.IList?
Square.JavaPoet.TypeSpec.Builder.MethodSpecs.set -> void
Square.JavaPoet.TypeSpec.Builder.Superclass(Java.Lang.Reflect.IType? superclass) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.Superclass(Java.Lang.Reflect.IType? superclass, bool avoidNestedTypeNameClashes) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.Superclass(Square.JavaPoet.TypeName? superclass) -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.Builder.Superinterfaces.get -> System.Collections.IList?
Square.JavaPoet.TypeSpec.Builder.Superinterfaces.set -> void
Square.JavaPoet.TypeSpec.Builder.TypeSpecs.get -> System.Collections.IList?
Square.JavaPoet.TypeSpec.Builder.TypeSpecs.set -> void
Square.JavaPoet.TypeSpec.Builder.TypeVariables.get -> System.Collections.IList?
Square.JavaPoet.TypeSpec.Builder.TypeVariables.set -> void
Square.JavaPoet.TypeSpec.EnumConstants.get -> System.Collections.IDictionary?
Square.JavaPoet.TypeSpec.EnumConstants.set -> void
Square.JavaPoet.TypeSpec.FieldSpecs.get -> System.Collections.IList?
Square.JavaPoet.TypeSpec.FieldSpecs.set -> void
Square.JavaPoet.TypeSpec.InitializerBlock.get -> Square.JavaPoet.CodeBlock?
Square.JavaPoet.TypeSpec.InitializerBlock.set -> void
Square.JavaPoet.TypeSpec.Javadoc.get -> Square.JavaPoet.CodeBlock?
Square.JavaPoet.TypeSpec.Javadoc.set -> void
Square.JavaPoet.TypeSpec.Kind
Square.JavaPoet.TypeSpec.MethodSpecs.get -> System.Collections.IList?
Square.JavaPoet.TypeSpec.MethodSpecs.set -> void
Square.JavaPoet.TypeSpec.Name.get -> string?
Square.JavaPoet.TypeSpec.Name.set -> void
Square.JavaPoet.TypeSpec.StaticBlock.get -> Square.JavaPoet.CodeBlock?
Square.JavaPoet.TypeSpec.StaticBlock.set -> void
Square.JavaPoet.TypeSpec.Superclass.get -> Square.JavaPoet.TypeName?
Square.JavaPoet.TypeSpec.Superclass.set -> void
Square.JavaPoet.TypeSpec.Superinterfaces.get -> System.Collections.IList?
Square.JavaPoet.TypeSpec.Superinterfaces.set -> void
Square.JavaPoet.TypeSpec.ToBuilder() -> Square.JavaPoet.TypeSpec.Builder?
Square.JavaPoet.TypeSpec.TypeSpecs.get -> System.Collections.IList?
Square.JavaPoet.TypeSpec.TypeSpecs.set -> void
Square.JavaPoet.TypeSpec.TypeVariables.get -> System.Collections.IList?
Square.JavaPoet.TypeSpec.TypeVariables.set -> void
Square.JavaPoet.TypeVariableName
Square.JavaPoet.TypeVariableName.Bounds.get -> System.Collections.IList?
Square.JavaPoet.TypeVariableName.Bounds.set -> void
Square.JavaPoet.TypeVariableName.Name.get -> string?
Square.JavaPoet.TypeVariableName.Name.set -> void
Square.JavaPoet.TypeVariableName.WithBounds(System.Collections.Generic.IList<Square.JavaPoet.TypeName!>? bounds) -> Square.JavaPoet.TypeVariableName?
Square.JavaPoet.TypeVariableName.WithBounds(params Java.Lang.Reflect.IType![]? bounds) -> Square.JavaPoet.TypeVariableName?
Square.JavaPoet.TypeVariableName.WithBounds(params Square.JavaPoet.TypeName![]? bounds) -> Square.JavaPoet.TypeVariableName?
Square.JavaPoet.WildcardTypeName
Square.JavaPoet.WildcardTypeName.LowerBounds.get -> System.Collections.IList?
Square.JavaPoet.WildcardTypeName.LowerBounds.set -> void
Square.JavaPoet.WildcardTypeName.UpperBounds.get -> System.Collections.IList?
Square.JavaPoet.WildcardTypeName.UpperBounds.set -> void
override Square.JavaPoet.AnnotationSpec.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Square.JavaPoet.AnnotationSpec.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Square.JavaPoet.ArrayTypeName.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Square.JavaPoet.ClassName.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Square.JavaPoet.CodeBlock.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Square.JavaPoet.CodeBlock.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Square.JavaPoet.FieldSpec.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Square.JavaPoet.FieldSpec.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Square.JavaPoet.JavaFile.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Square.JavaPoet.JavaFile.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Square.JavaPoet.MethodSpec.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Square.JavaPoet.MethodSpec.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Square.JavaPoet.NameAllocator.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Square.JavaPoet.ParameterSpec.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Square.JavaPoet.ParameterSpec.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Square.JavaPoet.ParameterizedTypeName.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Square.JavaPoet.TypeName.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Square.JavaPoet.TypeName.ThresholdClass.get -> nint
override Square.JavaPoet.TypeName.ThresholdType.get -> System.Type!
override Square.JavaPoet.TypeSpec.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Square.JavaPoet.TypeSpec.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Square.JavaPoet.TypeSpec.Kind.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Square.JavaPoet.TypeVariableName.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Square.JavaPoet.WildcardTypeName.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override sealed Square.JavaPoet.TypeName.Equals(Java.Lang.Object? o) -> bool
override sealed Square.JavaPoet.TypeName.GetHashCode() -> int
override sealed Square.JavaPoet.TypeName.ToString() -> string?
static Square.JavaPoet.AnnotationSpec.Get(Java.Lang.Annotation.IAnnotation? annotation) -> Square.JavaPoet.AnnotationSpec?
static Square.JavaPoet.AnnotationSpec.Get(Java.Lang.Annotation.IAnnotation? annotation, bool includeDefaultValues) -> Square.JavaPoet.AnnotationSpec?
static Square.JavaPoet.AnnotationSpec.InvokeBuilder(Java.Lang.Class? type) -> Square.JavaPoet.AnnotationSpec.Builder?
static Square.JavaPoet.AnnotationSpec.InvokeBuilder(Square.JavaPoet.ClassName? type) -> Square.JavaPoet.AnnotationSpec.Builder?
static Square.JavaPoet.ArrayTypeName.Get(Java.Lang.Reflect.IGenericArrayType? type) -> Square.JavaPoet.ArrayTypeName?
static Square.JavaPoet.ArrayTypeName.Of(Java.Lang.Reflect.IType? componentType) -> Square.JavaPoet.ArrayTypeName?
static Square.JavaPoet.ArrayTypeName.Of(Square.JavaPoet.TypeName? componentType) -> Square.JavaPoet.ArrayTypeName?
static Square.JavaPoet.ClassName.BestGuess(string? classNameString) -> Square.JavaPoet.ClassName?
static Square.JavaPoet.ClassName.Get(Java.Lang.Class? clazz) -> Square.JavaPoet.ClassName?
static Square.JavaPoet.ClassName.Get(string? packageName, string? simpleName, params string![]? simpleNames) -> Square.JavaPoet.ClassName?
static Square.JavaPoet.ClassName.Object.get -> Square.JavaPoet.ClassName?
static Square.JavaPoet.CodeBlock.InvokeBuilder() -> Square.JavaPoet.CodeBlock.Builder?
static Square.JavaPoet.CodeBlock.Join(Java.Lang.IIterable? codeBlocks, string? separator) -> Square.JavaPoet.CodeBlock?
static Square.JavaPoet.CodeBlock.Joining(string? separator) -> Java.Util.Streams.ICollector?
static Square.JavaPoet.CodeBlock.Joining(string? separator, string? prefix, string? suffix) -> Java.Util.Streams.ICollector?
static Square.JavaPoet.CodeBlock.Of(string? format, params Java.Lang.Object![]? args) -> Square.JavaPoet.CodeBlock?
static Square.JavaPoet.JavaFile.InvokeBuilder(string? packageName, Square.JavaPoet.TypeSpec? typeSpec) -> Square.JavaPoet.JavaFile.Builder?
static Square.JavaPoet.MethodSpec.ConstructorBuilder() -> Square.JavaPoet.MethodSpec.Builder?
static Square.JavaPoet.MethodSpec.MethodBuilder(string? name) -> Square.JavaPoet.MethodSpec.Builder?
static Square.JavaPoet.NameAllocator.ToJavaIdentifier(string? suggestion) -> string?
static Square.JavaPoet.ParameterizedTypeName.Get(Java.Lang.Class? rawType, params Java.Lang.Reflect.IType![]? typeArguments) -> Square.JavaPoet.ParameterizedTypeName?
static Square.JavaPoet.ParameterizedTypeName.Get(Java.Lang.Reflect.IParameterizedType? type) -> Square.JavaPoet.ParameterizedTypeName?
static Square.JavaPoet.ParameterizedTypeName.Get(Square.JavaPoet.ClassName? rawType, params Square.JavaPoet.TypeName![]? typeArguments) -> Square.JavaPoet.ParameterizedTypeName?
static Square.JavaPoet.TypeName.Boolean.get -> Square.JavaPoet.TypeName?
static Square.JavaPoet.TypeName.Byte.get -> Square.JavaPoet.TypeName?
static Square.JavaPoet.TypeName.Char.get -> Square.JavaPoet.TypeName?
static Square.JavaPoet.TypeName.Double.get -> Square.JavaPoet.TypeName?
static Square.JavaPoet.TypeName.Float.get -> Square.JavaPoet.TypeName?
static Square.JavaPoet.TypeName.Get(Java.Lang.Reflect.IType? type) -> Square.JavaPoet.TypeName?
static Square.JavaPoet.TypeName.Int.get -> Square.JavaPoet.TypeName?
static Square.JavaPoet.TypeName.Long.get -> Square.JavaPoet.TypeName?
static Square.JavaPoet.TypeName.Object.get -> Square.JavaPoet.ClassName?
static Square.JavaPoet.TypeName.Short.get -> Square.JavaPoet.TypeName?
static Square.JavaPoet.TypeName.Void.get -> Square.JavaPoet.TypeName?
static Square.JavaPoet.TypeSpec.AnnotationBuilder(Square.JavaPoet.ClassName? className) -> Square.JavaPoet.TypeSpec.Builder?
static Square.JavaPoet.TypeSpec.AnnotationBuilder(string? name) -> Square.JavaPoet.TypeSpec.Builder?
static Square.JavaPoet.TypeSpec.AnonymousClassBuilder(Square.JavaPoet.CodeBlock? typeArguments) -> Square.JavaPoet.TypeSpec.Builder?
static Square.JavaPoet.TypeSpec.AnonymousClassBuilder(string? typeArgumentsFormat, params Java.Lang.Object![]? args) -> Square.JavaPoet.TypeSpec.Builder?
static Square.JavaPoet.TypeSpec.ClassBuilder(Square.JavaPoet.ClassName? className) -> Square.JavaPoet.TypeSpec.Builder?
static Square.JavaPoet.TypeSpec.ClassBuilder(string? name) -> Square.JavaPoet.TypeSpec.Builder?
static Square.JavaPoet.TypeSpec.EnumBuilder(Square.JavaPoet.ClassName? className) -> Square.JavaPoet.TypeSpec.Builder?
static Square.JavaPoet.TypeSpec.EnumBuilder(string? name) -> Square.JavaPoet.TypeSpec.Builder?
static Square.JavaPoet.TypeSpec.InterfaceBuilder(Square.JavaPoet.ClassName? className) -> Square.JavaPoet.TypeSpec.Builder?
static Square.JavaPoet.TypeSpec.InterfaceBuilder(string? name) -> Square.JavaPoet.TypeSpec.Builder?
static Square.JavaPoet.TypeSpec.Kind.Annotation.get -> Square.JavaPoet.TypeSpec.Kind?
static Square.JavaPoet.TypeSpec.Kind.Enum.get -> Square.JavaPoet.TypeSpec.Kind?
static Square.JavaPoet.TypeSpec.Kind.Interface.get -> Square.JavaPoet.TypeSpec.Kind?
static Square.JavaPoet.TypeSpec.Kind.ValueOf(string? name) -> Square.JavaPoet.TypeSpec.Kind?
static Square.JavaPoet.TypeSpec.Kind.Values() -> Square.JavaPoet.TypeSpec.Kind![]?
static Square.JavaPoet.TypeVariableName.Get(Java.Lang.Reflect.ITypeVariable? type) -> Square.JavaPoet.TypeVariableName?
static Square.JavaPoet.TypeVariableName.Get(string? name) -> Square.JavaPoet.TypeVariableName?
static Square.JavaPoet.TypeVariableName.Get(string? name, params Java.Lang.Reflect.IType![]? bounds) -> Square.JavaPoet.TypeVariableName?
static Square.JavaPoet.TypeVariableName.Get(string? name, params Square.JavaPoet.TypeName![]? bounds) -> Square.JavaPoet.TypeVariableName?
static Square.JavaPoet.WildcardTypeName.Get(Java.Lang.Reflect.IWildcardType? wildcardName) -> Square.JavaPoet.TypeName?
static Square.JavaPoet.WildcardTypeName.SubtypeOf(Java.Lang.Reflect.IType? upperBound) -> Square.JavaPoet.WildcardTypeName?
static Square.JavaPoet.WildcardTypeName.SubtypeOf(Square.JavaPoet.TypeName? upperBound) -> Square.JavaPoet.WildcardTypeName?
static Square.JavaPoet.WildcardTypeName.SupertypeOf(Java.Lang.Reflect.IType? lowerBound) -> Square.JavaPoet.WildcardTypeName?
static Square.JavaPoet.WildcardTypeName.SupertypeOf(Square.JavaPoet.TypeName? lowerBound) -> Square.JavaPoet.WildcardTypeName?
virtual Square.JavaPoet.TypeName.Annotated(System.Collections.Generic.IList<Square.JavaPoet.AnnotationSpec!>? annotations) -> Square.JavaPoet.TypeName?
virtual Square.JavaPoet.TypeName.Box() -> Square.JavaPoet.TypeName?
virtual Square.JavaPoet.TypeName.IsAnnotated.get -> bool
virtual Square.JavaPoet.TypeName.IsBoxedPrimitive.get -> bool
virtual Square.JavaPoet.TypeName.IsPrimitive.get -> bool
virtual Square.JavaPoet.TypeName.Unbox() -> Square.JavaPoet.TypeName?
virtual Square.JavaPoet.TypeName.WithoutAnnotations() -> Square.JavaPoet.TypeName?
