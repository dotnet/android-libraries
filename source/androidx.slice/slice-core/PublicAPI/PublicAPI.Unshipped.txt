#nullable enable
AndroidX.Slice.Compat.CompatPermissionManager
AndroidX.Slice.Compat.CompatPermissionManager.CompatPermissionManager(Android.Content.Context? context, string? prefsName, int myUid, string![]? autoGrantPermissions) -> void
AndroidX.Slice.Compat.CompatPermissionManager.CompatPermissionManager(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Slice.Compat.CompatPermissionManager.PermissionState
AndroidX.Slice.Compat.CompatPermissionManager.PermissionState.PermissionState(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Slice.Compat.CompatPinnedList
AndroidX.Slice.Compat.CompatPinnedList.CompatPinnedList(Android.Content.Context? context, string? prefsName) -> void
AndroidX.Slice.Compat.CompatPinnedList.CompatPinnedList(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Slice.Compat.SlicePermissionActivity
AndroidX.Slice.Compat.SlicePermissionActivity.SlicePermissionActivity() -> void
AndroidX.Slice.Compat.SlicePermissionActivity.SlicePermissionActivity(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Slice.Compat.SliceProviderCompat
AndroidX.Slice.Compat.SliceProviderCompat.SliceProviderCompat(AndroidX.Slice.SliceProvider? provider, AndroidX.Slice.Compat.CompatPermissionManager? permissionManager, Android.Content.Context? context) -> void
AndroidX.Slice.Compat.SliceProviderCompat.SliceProviderCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Slice.Compat.SliceProviderWrapperContainer
AndroidX.Slice.Compat.SliceProviderWrapperContainer.SliceProviderWrapper
AndroidX.Slice.Compat.SliceProviderWrapperContainer.SliceProviderWrapper.SliceProviderWrapper(AndroidX.Slice.SliceProvider? provider, string![]? autoGrantPermissions) -> void
AndroidX.Slice.Compat.SliceProviderWrapperContainer.SliceProviderWrapper.SliceProviderWrapper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Slice.Compat.SliceProviderWrapperContainer.SliceProviderWrapperContainer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Slice.Core.ISliceAction
AndroidX.Slice.Core.ISliceAction.Action.get -> Android.App.PendingIntent!
AndroidX.Slice.Core.ISliceAction.ContentDescriptionFormatted.get -> Java.Lang.ICharSequence?
AndroidX.Slice.Core.ISliceAction.Icon.get -> AndroidX.Core.Graphics.Drawable.IconCompat?
AndroidX.Slice.Core.ISliceAction.ImageMode.get -> int
AndroidX.Slice.Core.ISliceAction.IsActivity.get -> bool
AndroidX.Slice.Core.ISliceAction.IsChecked.get -> bool
AndroidX.Slice.Core.ISliceAction.IsDefaultToggle.get -> bool
AndroidX.Slice.Core.ISliceAction.IsToggle.get -> bool
AndroidX.Slice.Core.ISliceAction.Priority.get -> int
AndroidX.Slice.Core.ISliceAction.SetChecked(bool p0) -> AndroidX.Slice.Core.ISliceAction?
AndroidX.Slice.Core.ISliceAction.SetContentDescription(Java.Lang.ICharSequence! p0) -> AndroidX.Slice.Core.ISliceAction?
AndroidX.Slice.Core.ISliceAction.SetPriority(int p0) -> AndroidX.Slice.Core.ISliceAction?
AndroidX.Slice.Core.ISliceAction.TitleFormatted.get -> Java.Lang.ICharSequence!
AndroidX.Slice.Core.ISliceActionExtensions
AndroidX.Slice.Core.SliceActionImpl
AndroidX.Slice.Core.SliceActionImpl.ContentDescription.get -> string?
AndroidX.Slice.Core.SliceActionImpl.SetContentDescription(string! description) -> AndroidX.Slice.Core.ISliceAction?
AndroidX.Slice.Core.SliceActionImpl.SliceActionImpl(Android.App.PendingIntent! action, AndroidX.Core.Graphics.Drawable.IconCompat! actionIcon, Java.Lang.ICharSequence! actionTitle) -> void
AndroidX.Slice.Core.SliceActionImpl.SliceActionImpl(Android.App.PendingIntent! action, AndroidX.Core.Graphics.Drawable.IconCompat! actionIcon, Java.Lang.ICharSequence! actionTitle, bool isChecked) -> void
AndroidX.Slice.Core.SliceActionImpl.SliceActionImpl(Android.App.PendingIntent! action, AndroidX.Core.Graphics.Drawable.IconCompat! actionIcon, int imageMode, Java.Lang.ICharSequence! actionTitle) -> void
AndroidX.Slice.Core.SliceActionImpl.SliceActionImpl(Android.App.PendingIntent! action, AndroidX.Core.Graphics.Drawable.IconCompat! actionIcon, int imageMode, string! actionTitle) -> void
AndroidX.Slice.Core.SliceActionImpl.SliceActionImpl(Android.App.PendingIntent! action, AndroidX.Core.Graphics.Drawable.IconCompat! actionIcon, string! actionTitle) -> void
AndroidX.Slice.Core.SliceActionImpl.SliceActionImpl(Android.App.PendingIntent! action, AndroidX.Core.Graphics.Drawable.IconCompat! actionIcon, string! actionTitle, bool isChecked) -> void
AndroidX.Slice.Core.SliceActionImpl.SliceActionImpl(Android.App.PendingIntent! action, Java.Lang.ICharSequence! actionTitle, bool isChecked) -> void
AndroidX.Slice.Core.SliceActionImpl.SliceActionImpl(Android.App.PendingIntent! action, string! actionTitle, bool isChecked) -> void
AndroidX.Slice.Core.SliceActionImpl.SliceActionImpl(AndroidX.Slice.SliceItem? slice) -> void
AndroidX.Slice.Core.SliceActionImpl.SliceActionImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Slice.Core.SliceActionImpl.Title.get -> string?
AndroidX.Slice.Core.SliceHints
AndroidX.Slice.Core.SliceHints.IImageMode
AndroidX.Slice.Core.SliceHints.SliceHints(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Slice.Core.SliceQuery
AndroidX.Slice.Core.SliceQuery.SliceQuery(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Slice.IClock
AndroidX.Slice.IClock.CurrentTimeMillis() -> long
AndroidX.Slice.Slice
AndroidX.Slice.Slice.Builder
AndroidX.Slice.Slice.Builder.AddText(string? text, string? subType, System.Collections.Generic.IList<string!>? hints) -> AndroidX.Slice.Slice.Builder?
AndroidX.Slice.Slice.Builder.AddText(string? text, string? subType, params string![]? hints) -> AndroidX.Slice.Slice.Builder?
AndroidX.Slice.Slice.Builder.Builder(Android.Net.Uri! uri) -> void
AndroidX.Slice.Slice.Builder.Builder(AndroidX.Slice.Slice.Builder! parent) -> void
AndroidX.Slice.Slice.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Slice.Slice.HasHint(string? hint) -> bool
AndroidX.Slice.Slice.Hints.get -> System.Collections.Generic.IList<string!>?
AndroidX.Slice.Slice.ISliceHint
AndroidX.Slice.Slice.Items.get -> System.Collections.Generic.IList<AndroidX.Slice.SliceItem!>?
AndroidX.Slice.Slice.Slice() -> void
AndroidX.Slice.Slice.Slice(Android.OS.Bundle? in) -> void
AndroidX.Slice.Slice.Spec.get -> AndroidX.Slice.SliceSpec?
AndroidX.Slice.Slice.ToBundle() -> Android.OS.Bundle?
AndroidX.Slice.Slice.ToString(string? indent) -> string?
AndroidX.Slice.Slice.Uri.get -> Android.Net.Uri?
AndroidX.Slice.SliceConvert
AndroidX.Slice.SliceConvert.SliceConvert(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Slice.SliceItem
AndroidX.Slice.SliceItem.Action.get -> Android.App.PendingIntent?
AndroidX.Slice.SliceItem.AddHint(string? hint) -> void
AndroidX.Slice.SliceItem.FireAction(Android.Content.Context? context, Android.Content.Intent? i) -> void
AndroidX.Slice.SliceItem.FireActionInternal(Android.Content.Context? context, Android.Content.Intent? i) -> bool
AndroidX.Slice.SliceItem.Format.get -> string?
AndroidX.Slice.SliceItem.HasAnyHints(params string![]? hints) -> bool
AndroidX.Slice.SliceItem.HasHint(string? hint) -> bool
AndroidX.Slice.SliceItem.HasHints(string![]? hints) -> bool
AndroidX.Slice.SliceItem.Hints.get -> System.Collections.Generic.IList<string!>!
AndroidX.Slice.SliceItem.IActionHandler
AndroidX.Slice.SliceItem.IActionHandler.OnAction(AndroidX.Slice.SliceItem? p0, Android.Content.Context? p1, Android.Content.Intent? p2) -> void
AndroidX.Slice.SliceItem.ISliceType
AndroidX.Slice.SliceItem.Icon.get -> AndroidX.Core.Graphics.Drawable.IconCompat?
AndroidX.Slice.SliceItem.Int.get -> int
AndroidX.Slice.SliceItem.Long.get -> long
AndroidX.Slice.SliceItem.RemoteInput.get -> Android.App.RemoteInput?
AndroidX.Slice.SliceItem.Slice.get -> AndroidX.Slice.Slice?
AndroidX.Slice.SliceItem.SliceItem() -> void
AndroidX.Slice.SliceItem.SliceItem(Android.App.PendingIntent? intent, AndroidX.Slice.Slice? slice, string? format, string? subType, string![]? hints) -> void
AndroidX.Slice.SliceItem.SliceItem(Android.OS.Bundle? in) -> void
AndroidX.Slice.SliceItem.SliceItem(AndroidX.Slice.SliceItem.IActionHandler? action, AndroidX.Slice.Slice? slice, string? format, string? subType, string![]? hints) -> void
AndroidX.Slice.SliceItem.SliceItem(Java.Lang.Object? obj, string? format, string? subType, System.Collections.Generic.IList<string!>? hints) -> void
AndroidX.Slice.SliceItem.SliceItem(Java.Lang.Object? obj, string? format, string? subType, string![]? hints) -> void
AndroidX.Slice.SliceItem.SubType.get -> string?
AndroidX.Slice.SliceItem.Text.get -> string?
AndroidX.Slice.SliceItem.TextFormatted.get -> Java.Lang.ICharSequence?
AndroidX.Slice.SliceItem.Timestamp.get -> long
AndroidX.Slice.SliceItem.ToBundle() -> Android.OS.Bundle?
AndroidX.Slice.SliceItem.ToString(string? indent) -> string?
AndroidX.Slice.SliceItemHolder
AndroidX.Slice.SliceItemHolder.SliceItemHolder() -> void
AndroidX.Slice.SliceItemHolder.SliceItemHolder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Slice.SliceItemHolder.SliceItemHolder(string? format, Java.Lang.Object? mObj, bool isStream) -> void
AndroidX.Slice.SliceItemHolderParcelizer
AndroidX.Slice.SliceItemHolderParcelizer.SliceItemHolderParcelizer() -> void
AndroidX.Slice.SliceItemParcelizer
AndroidX.Slice.SliceItemParcelizer.SliceItemParcelizer() -> void
AndroidX.Slice.SliceManager
AndroidX.Slice.SliceManager.SliceManager(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Slice.SliceParcelizer
AndroidX.Slice.SliceParcelizer.SliceParcelizer() -> void
AndroidX.Slice.SliceProvider
AndroidX.Slice.SliceProvider.SliceProvider() -> void
AndroidX.Slice.SliceProvider.SliceProvider(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Slice.SliceProvider.SliceProvider(params string![]! autoGrantPermissions) -> void
AndroidX.Slice.SliceSpec
AndroidX.Slice.SliceSpec.CanRender(AndroidX.Slice.SliceSpec! candidate) -> bool
AndroidX.Slice.SliceSpec.Revision.get -> int
AndroidX.Slice.SliceSpec.SliceSpec() -> void
AndroidX.Slice.SliceSpec.SliceSpec(string! type, int revision) -> void
AndroidX.Slice.SliceSpec.Type.get -> string?
AndroidX.Slice.SliceSpecParcelizer
AndroidX.Slice.SliceSpecParcelizer.SliceSpecParcelizer() -> void
AndroidX.Slice.SliceSpecs
AndroidX.Slice.SliceSpecs.SliceSpecs(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Slice.SystemClock
AndroidX.Slice.SystemClock.SystemClock() -> void
AndroidX.Slice.SystemClock.SystemClock(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
abstract AndroidX.Slice.SliceManager.CheckSlicePermission(Android.Net.Uri! p0, int p1, int p2) -> int
abstract AndroidX.Slice.SliceManager.GetPinnedSpecs(Android.Net.Uri! p0) -> System.Collections.Generic.ICollection<AndroidX.Slice.SliceSpec!>!
abstract AndroidX.Slice.SliceManager.GrantSlicePermission(string! p0, Android.Net.Uri! p1) -> void
abstract AndroidX.Slice.SliceManager.PinnedSlices.get -> System.Collections.Generic.IList<Android.Net.Uri!>!
abstract AndroidX.Slice.SliceManager.RevokeSlicePermission(string! p0, Android.Net.Uri! p1) -> void
abstract AndroidX.Slice.SliceProvider.OnBindSlice(Android.Net.Uri? p0) -> AndroidX.Slice.Slice?
abstract AndroidX.Slice.SliceProvider.OnCreateSliceProvider() -> bool
const AndroidX.Slice.Compat.CompatPermissionManager.AllSuffix = "_all" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.ArgSupportsVersionedParcelable = "supports_versioned_parcelable" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.ExtraBindUri = "slice_uri" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.ExtraIntent = "slice_intent" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.ExtraPid = "pid" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.ExtraPkg = "pkg" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.ExtraProviderPkg = "provider_pkg" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.ExtraResult = "result" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.ExtraSlice = "slice" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.ExtraSliceDescendants = "slice_descendants" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.ExtraSupportedSpecs = "specs" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.ExtraSupportedSpecsRevs = "revs" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.ExtraUid = "uid" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.MethodCheckPermission = "check_perms" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.MethodGetDescendants = "get_descendants" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.MethodGetPinnedSpecs = "get_specs" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.MethodGrantPermission = "grant_perms" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.MethodMapIntent = "map_slice" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.MethodMapOnlyIntent = "map_only" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.MethodPin = "pin_slice" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.MethodRevokePermission = "revoke_perms" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.MethodSlice = "bind_slice" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.MethodUnpin = "unpin_slice" -> string!
const AndroidX.Slice.Compat.SliceProviderCompat.PermsPrefix = "slice_perms_" -> string!
const AndroidX.Slice.Core.SliceHints.HintActivity = "activity" -> string!
const AndroidX.Slice.Core.SliceHints.IconImage = 0 -> int
const AndroidX.Slice.Core.SliceHints.Infinity = -1 -> long
const AndroidX.Slice.Core.SliceHints.LargeImage = 2 -> int
const AndroidX.Slice.Core.SliceHints.SliceMetadataKey = "android.metadata.SLICE_URI" -> string!
const AndroidX.Slice.Core.SliceHints.SmallImage = 1 -> int
const AndroidX.Slice.Core.SliceHints.SubtypeMillis = "millis" -> string!
const AndroidX.Slice.Core.SliceHints.SubtypeMin = "min" -> string!
const AndroidX.Slice.Core.SliceHints.UnknownImage = 3 -> int
override AndroidX.Slice.Compat.CompatPermissionManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.Compat.CompatPermissionManager.PermissionState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.Compat.CompatPermissionManager.PermissionState.ThresholdClass.get -> nint
override AndroidX.Slice.Compat.CompatPermissionManager.PermissionState.ThresholdType.get -> System.Type!
override AndroidX.Slice.Compat.CompatPermissionManager.ThresholdClass.get -> nint
override AndroidX.Slice.Compat.CompatPermissionManager.ThresholdType.get -> System.Type!
override AndroidX.Slice.Compat.CompatPinnedList.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.Compat.CompatPinnedList.ThresholdClass.get -> nint
override AndroidX.Slice.Compat.CompatPinnedList.ThresholdType.get -> System.Type!
override AndroidX.Slice.Compat.SlicePermissionActivity.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.Compat.SlicePermissionActivity.ThresholdClass.get -> nint
override AndroidX.Slice.Compat.SlicePermissionActivity.ThresholdType.get -> System.Type!
override AndroidX.Slice.Compat.SliceProviderCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.Compat.SliceProviderCompat.ThresholdClass.get -> nint
override AndroidX.Slice.Compat.SliceProviderCompat.ThresholdType.get -> System.Type!
override AndroidX.Slice.Compat.SliceProviderWrapperContainer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.Compat.SliceProviderWrapperContainer.SliceProviderWrapper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.Compat.SliceProviderWrapperContainer.SliceProviderWrapper.OnCreate() -> bool
override AndroidX.Slice.Compat.SliceProviderWrapperContainer.SliceProviderWrapper.ThresholdClass.get -> nint
override AndroidX.Slice.Compat.SliceProviderWrapperContainer.SliceProviderWrapper.ThresholdType.get -> System.Type!
override AndroidX.Slice.Compat.SliceProviderWrapperContainer.ThresholdClass.get -> nint
override AndroidX.Slice.Compat.SliceProviderWrapperContainer.ThresholdType.get -> System.Type!
override AndroidX.Slice.Core.SliceActionImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.Core.SliceActionImpl.ThresholdClass.get -> nint
override AndroidX.Slice.Core.SliceActionImpl.ThresholdType.get -> System.Type!
override AndroidX.Slice.Core.SliceHints.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.Core.SliceHints.ThresholdClass.get -> nint
override AndroidX.Slice.Core.SliceHints.ThresholdType.get -> System.Type!
override AndroidX.Slice.Core.SliceQuery.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.Core.SliceQuery.ThresholdClass.get -> nint
override AndroidX.Slice.Core.SliceQuery.ThresholdType.get -> System.Type!
override AndroidX.Slice.Slice.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.Slice.Builder.ThresholdClass.get -> nint
override AndroidX.Slice.Slice.Builder.ThresholdType.get -> System.Type!
override AndroidX.Slice.Slice.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.SliceConvert.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.SliceConvert.ThresholdClass.get -> nint
override AndroidX.Slice.SliceConvert.ThresholdType.get -> System.Type!
override AndroidX.Slice.SliceItem.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.SliceItemHolder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.SliceItemHolder.ThresholdClass.get -> nint
override AndroidX.Slice.SliceItemHolder.ThresholdType.get -> System.Type!
override AndroidX.Slice.SliceItemHolderParcelizer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.SliceItemParcelizer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.SliceManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.SliceManager.ThresholdClass.get -> nint
override AndroidX.Slice.SliceManager.ThresholdType.get -> System.Type!
override AndroidX.Slice.SliceParcelizer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.SliceProvider.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.SliceProvider.ThresholdClass.get -> nint
override AndroidX.Slice.SliceProvider.ThresholdType.get -> System.Type!
override AndroidX.Slice.SliceSpec.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.SliceSpecParcelizer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.SliceSpecs.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.SliceSpecs.ThresholdClass.get -> nint
override AndroidX.Slice.SliceSpecs.ThresholdType.get -> System.Type!
override AndroidX.Slice.SystemClock.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Slice.SystemClock.ThresholdClass.get -> nint
override AndroidX.Slice.SystemClock.ThresholdType.get -> System.Type!
override sealed AndroidX.Slice.SliceProvider.BulkInsert(Android.Net.Uri! uri, Android.Content.ContentValues![]! values) -> int
override sealed AndroidX.Slice.SliceProvider.Canonicalize(Android.Net.Uri! url) -> Android.Net.Uri?
override sealed AndroidX.Slice.SliceProvider.Delete(Android.Net.Uri! uri, string? selection, string![]? selectionArgs) -> int
override sealed AndroidX.Slice.SliceProvider.GetType(Android.Net.Uri? uri) -> string?
override sealed AndroidX.Slice.SliceProvider.Insert(Android.Net.Uri! uri, Android.Content.ContentValues? values) -> Android.Net.Uri?
override sealed AndroidX.Slice.SliceProvider.OnCreate() -> bool
override sealed AndroidX.Slice.SliceProvider.Query(Android.Net.Uri! uri, string![]? projection, Android.OS.Bundle? queryArgs, Android.OS.CancellationSignal? cancellationSignal) -> Android.Database.ICursor?
override sealed AndroidX.Slice.SliceProvider.Query(Android.Net.Uri! uri, string![]? projection, string? selection, string![]? selectionArgs, string? sortOrder) -> Android.Database.ICursor?
override sealed AndroidX.Slice.SliceProvider.Query(Android.Net.Uri! uri, string![]? projection, string? selection, string![]? selectionArgs, string? sortOrder, Android.OS.CancellationSignal? cancellationSignal) -> Android.Database.ICursor?
override sealed AndroidX.Slice.SliceProvider.Update(Android.Net.Uri! uri, Android.Content.ContentValues? values, string? selection, string![]? selectionArgs) -> int
static AndroidX.Slice.Compat.SliceProviderCompat.AddSpecs(Android.OS.Bundle? extras, System.Collections.Generic.ICollection<AndroidX.Slice.SliceSpec!>? supportedSpecs) -> void
static AndroidX.Slice.Compat.SliceProviderCompat.BindSlice(Android.Content.Context? context, Android.Content.Intent? intent, System.Collections.Generic.ICollection<AndroidX.Slice.SliceSpec!>? supportedSpecs) -> AndroidX.Slice.Slice?
static AndroidX.Slice.Compat.SliceProviderCompat.BindSlice(Android.Content.Context? context, Android.Net.Uri? uri, System.Collections.Generic.ICollection<AndroidX.Slice.SliceSpec!>? supportedSpecs) -> AndroidX.Slice.Slice?
static AndroidX.Slice.Compat.SliceProviderCompat.CheckSlicePermission(Android.Content.Context? context, string? packageName, Android.Net.Uri? uri, int pid, int uid) -> int
static AndroidX.Slice.Compat.SliceProviderCompat.GetPinnedSlices(Android.Content.Context? context) -> System.Collections.Generic.IList<Android.Net.Uri!>?
static AndroidX.Slice.Compat.SliceProviderCompat.GetPinnedSpecs(Android.Content.Context? context, Android.Net.Uri? uri) -> System.Collections.Generic.ICollection<AndroidX.Slice.SliceSpec!>?
static AndroidX.Slice.Compat.SliceProviderCompat.GetSliceDescendants(Android.Content.Context? context, Android.Net.Uri! uri) -> System.Collections.Generic.ICollection<Android.Net.Uri!>!
static AndroidX.Slice.Compat.SliceProviderCompat.GetSpecs(Android.OS.Bundle? extras) -> System.Collections.Generic.ICollection<AndroidX.Slice.SliceSpec!>?
static AndroidX.Slice.Compat.SliceProviderCompat.GrantSlicePermission(Android.Content.Context? context, string? packageName, string? toPackage, Android.Net.Uri? uri) -> void
static AndroidX.Slice.Compat.SliceProviderCompat.MapIntentToUri(Android.Content.Context? context, Android.Content.Intent? intent) -> Android.Net.Uri?
static AndroidX.Slice.Compat.SliceProviderCompat.PinSlice(Android.Content.Context? context, Android.Net.Uri? uri, System.Collections.Generic.ICollection<AndroidX.Slice.SliceSpec!>? supportedSpecs) -> void
static AndroidX.Slice.Compat.SliceProviderCompat.RevokeSlicePermission(Android.Content.Context? context, string? packageName, string? toPackage, Android.Net.Uri? uri) -> void
static AndroidX.Slice.Compat.SliceProviderCompat.UnpinSlice(Android.Content.Context? context, Android.Net.Uri? uri, System.Collections.Generic.ICollection<AndroidX.Slice.SliceSpec!>? supportedSpecs) -> void
static AndroidX.Slice.Core.ISliceActionExtensions.SetContentDescription(this AndroidX.Slice.Core.ISliceAction! self, string! p0) -> AndroidX.Slice.Core.ISliceAction?
static AndroidX.Slice.Core.SliceQuery.Find(AndroidX.Slice.Slice? s, string? format) -> AndroidX.Slice.SliceItem?
static AndroidX.Slice.Core.SliceQuery.Find(AndroidX.Slice.Slice? s, string? format, string![]? hints, string![]? nonHints) -> AndroidX.Slice.SliceItem?
static AndroidX.Slice.Core.SliceQuery.Find(AndroidX.Slice.Slice? s, string? format, string? hints, string? nonHints) -> AndroidX.Slice.SliceItem?
static AndroidX.Slice.Core.SliceQuery.Find(AndroidX.Slice.SliceItem? s, string? format) -> AndroidX.Slice.SliceItem?
static AndroidX.Slice.Core.SliceQuery.Find(AndroidX.Slice.SliceItem? s, string? format, string![]? hints, string![]? nonHints) -> AndroidX.Slice.SliceItem?
static AndroidX.Slice.Core.SliceQuery.Find(AndroidX.Slice.SliceItem? s, string? format, string? hints, string? nonHints) -> AndroidX.Slice.SliceItem?
static AndroidX.Slice.Core.SliceQuery.FindAll(AndroidX.Slice.Slice? s, string? format, string![]? hints, string![]? nonHints) -> System.Collections.Generic.IList<AndroidX.Slice.SliceItem!>?
static AndroidX.Slice.Core.SliceQuery.FindAll(AndroidX.Slice.Slice? s, string? format, string? hints, string? nonHints) -> System.Collections.Generic.IList<AndroidX.Slice.SliceItem!>?
static AndroidX.Slice.Core.SliceQuery.FindAll(AndroidX.Slice.SliceItem? s, string? format) -> System.Collections.Generic.IList<AndroidX.Slice.SliceItem!>?
static AndroidX.Slice.Core.SliceQuery.FindAll(AndroidX.Slice.SliceItem? s, string? format, string![]? hints, string![]? nonHints) -> System.Collections.Generic.IList<AndroidX.Slice.SliceItem!>?
static AndroidX.Slice.Core.SliceQuery.FindAll(AndroidX.Slice.SliceItem? s, string? format, string? hints, string? nonHints) -> System.Collections.Generic.IList<AndroidX.Slice.SliceItem!>?
static AndroidX.Slice.Core.SliceQuery.FindItem(AndroidX.Slice.Slice? s, Android.Net.Uri? uri) -> AndroidX.Slice.SliceItem?
static AndroidX.Slice.Core.SliceQuery.FindNotContaining(AndroidX.Slice.SliceItem? container, System.Collections.Generic.IList<AndroidX.Slice.SliceItem!>? list) -> AndroidX.Slice.SliceItem?
static AndroidX.Slice.Core.SliceQuery.FindSubtype(AndroidX.Slice.Slice? s, string? format, string? subtype) -> AndroidX.Slice.SliceItem?
static AndroidX.Slice.Core.SliceQuery.FindSubtype(AndroidX.Slice.SliceItem? s, string? format, string? subtype) -> AndroidX.Slice.SliceItem?
static AndroidX.Slice.Core.SliceQuery.FindTopLevelItem(AndroidX.Slice.Slice? s, string? format, string? subtype, string![]? hints, string![]? nonHints) -> AndroidX.Slice.SliceItem?
static AndroidX.Slice.Core.SliceQuery.HasAnyHints(AndroidX.Slice.SliceItem? item, params string![]? hints) -> bool
static AndroidX.Slice.Core.SliceQuery.HasHints(AndroidX.Slice.Slice? item, params string![]? hints) -> bool
static AndroidX.Slice.Core.SliceQuery.HasHints(AndroidX.Slice.SliceItem? item, params string![]? hints) -> bool
static AndroidX.Slice.Core.SliceQuery.Stream(AndroidX.Slice.Slice? slice) -> Java.Util.IIterator?
static AndroidX.Slice.Core.SliceQuery.Stream(AndroidX.Slice.SliceItem? slice) -> Java.Util.IIterator?
static AndroidX.Slice.Slice.AppendHints(Java.Lang.StringBuilder? sb, string![]? hints) -> void
static AndroidX.Slice.Slice.BindSlice(Android.Content.Context? context, Android.Net.Uri! uri, System.Collections.Generic.ICollection<AndroidX.Slice.SliceSpec!>? supportedSpecs) -> AndroidX.Slice.Slice?
static AndroidX.Slice.SliceConvert.Unwrap(AndroidX.Slice.Slice? slice) -> Android.App.Slices.Slice?
static AndroidX.Slice.SliceConvert.Wrap(Android.App.Slices.Slice? slice, Android.Content.Context? context) -> AndroidX.Slice.Slice?
static AndroidX.Slice.SliceConvert.Wrap(System.Collections.Generic.ICollection<Android.App.Slices.SliceSpec!>? supportedSpecs) -> System.Collections.Generic.ICollection<AndroidX.Slice.SliceSpec!>?
static AndroidX.Slice.SliceItem.TypeToString(string? format) -> string?
static AndroidX.Slice.SliceItemHolderParcelizer.Read(AndroidX.VersionedParcelable.VersionedParcel? parcel) -> AndroidX.Slice.SliceItemHolder?
static AndroidX.Slice.SliceItemHolderParcelizer.Write(AndroidX.Slice.SliceItemHolder? obj, AndroidX.VersionedParcelable.VersionedParcel? parcel) -> void
static AndroidX.Slice.SliceItemParcelizer.Read(AndroidX.VersionedParcelable.VersionedParcel? parcel) -> AndroidX.Slice.SliceItem?
static AndroidX.Slice.SliceItemParcelizer.Write(AndroidX.Slice.SliceItem? obj, AndroidX.VersionedParcelable.VersionedParcel? parcel) -> void
static AndroidX.Slice.SliceManager.GetInstance(Android.Content.Context! context) -> AndroidX.Slice.SliceManager!
static AndroidX.Slice.SliceParcelizer.Read(AndroidX.VersionedParcelable.VersionedParcel? parcel) -> AndroidX.Slice.Slice?
static AndroidX.Slice.SliceParcelizer.Write(AndroidX.Slice.Slice? obj, AndroidX.VersionedParcelable.VersionedParcel? parcel) -> void
static AndroidX.Slice.SliceProvider.Clock.get -> AndroidX.Slice.IClock?
static AndroidX.Slice.SliceProvider.Clock.set -> void
static AndroidX.Slice.SliceProvider.CreatePermissionIntent(Android.Content.Context? context, Android.Net.Uri? sliceUri, string? callingPackage) -> Android.App.PendingIntent?
static AndroidX.Slice.SliceProvider.CreatePermissionSlice(Android.Content.Context? context, Android.Net.Uri? sliceUri, string? callingPackage) -> AndroidX.Slice.Slice?
static AndroidX.Slice.SliceProvider.CurrentSpecs.get -> System.Collections.Generic.ICollection<AndroidX.Slice.SliceSpec!>?
static AndroidX.Slice.SliceProvider.GetPermissionString(Android.Content.Context? context, string? callingPackage) -> string?
static AndroidX.Slice.SliceProvider.GetPermissionStringFormatted(Android.Content.Context? context, string? callingPackage) -> Java.Lang.ICharSequence?
static AndroidX.Slice.SliceProvider.SetSpecs(System.Collections.Generic.ICollection<AndroidX.Slice.SliceSpec!>? specs) -> void
static AndroidX.Slice.SliceSpecParcelizer.Read(AndroidX.VersionedParcelable.VersionedParcel? parcel) -> AndroidX.Slice.SliceSpec?
static AndroidX.Slice.SliceSpecParcelizer.Write(AndroidX.Slice.SliceSpec? obj, AndroidX.VersionedParcelable.VersionedParcel? parcel) -> void
static AndroidX.Slice.SliceSpecs.Basic.get -> AndroidX.Slice.SliceSpec?
static AndroidX.Slice.SliceSpecs.List.get -> AndroidX.Slice.SliceSpec?
static AndroidX.Slice.SliceSpecs.Messaging.get -> AndroidX.Slice.SliceSpec?
virtual AndroidX.Slice.Compat.CompatPermissionManager.CheckSlicePermission(Android.Net.Uri? uri, int pid, int uid) -> int
virtual AndroidX.Slice.Compat.CompatPermissionManager.GrantSlicePermission(Android.Net.Uri? uri, string? toPkg) -> void
virtual AndroidX.Slice.Compat.CompatPermissionManager.PermissionState.HasAccess(System.Collections.Generic.IList<string!>? path) -> bool
virtual AndroidX.Slice.Compat.CompatPermissionManager.PermissionState.HasAllPermissions.get -> bool
virtual AndroidX.Slice.Compat.CompatPermissionManager.PermissionState.Key.get -> string?
virtual AndroidX.Slice.Compat.CompatPermissionManager.PermissionState.ToPersistable() -> System.Collections.Generic.ICollection<string!>?
virtual AndroidX.Slice.Compat.CompatPermissionManager.RevokeSlicePermission(Android.Net.Uri? uri, string? toPkg) -> void
virtual AndroidX.Slice.Compat.CompatPinnedList.AddPin(Android.Net.Uri? uri, string? pkg, System.Collections.Generic.ICollection<AndroidX.Slice.SliceSpec!>? specs) -> bool
virtual AndroidX.Slice.Compat.CompatPinnedList.BootTime.get -> long
virtual AndroidX.Slice.Compat.CompatPinnedList.GetSpecs(Android.Net.Uri? uri) -> AndroidX.Collection.ArraySet?
virtual AndroidX.Slice.Compat.CompatPinnedList.PinnedSlices.get -> System.Collections.Generic.IList<Android.Net.Uri!>?
virtual AndroidX.Slice.Compat.CompatPinnedList.RemovePin(Android.Net.Uri? uri, string? pkg) -> bool
virtual AndroidX.Slice.Compat.SlicePermissionActivity.OnClick(Android.Content.IDialogInterface? dialog, int which) -> void
virtual AndroidX.Slice.Compat.SlicePermissionActivity.OnDestroy() -> void
virtual AndroidX.Slice.Compat.SlicePermissionActivity.OnDismiss(Android.Content.IDialogInterface? dialog) -> void
virtual AndroidX.Slice.Compat.SliceProviderCompat.Call(string? method, string? arg, Android.OS.Bundle? extras) -> Android.OS.Bundle?
virtual AndroidX.Slice.Compat.SliceProviderCompat.CallingPackage.get -> string?
virtual AndroidX.Slice.Compat.SliceProviderWrapperContainer.SliceProviderWrapper.OnBindSlice(Android.Net.Uri? sliceUri, System.Collections.Generic.ICollection<Android.App.Slices.SliceSpec!>? supportedVersions) -> Android.App.Slices.Slice?
virtual AndroidX.Slice.Core.SliceActionImpl.Action.get -> Android.App.PendingIntent!
virtual AndroidX.Slice.Core.SliceActionImpl.ActionItem.get -> AndroidX.Slice.SliceItem?
virtual AndroidX.Slice.Core.SliceActionImpl.BuildPrimaryActionSlice(AndroidX.Slice.Slice.Builder! builder) -> AndroidX.Slice.Slice!
virtual AndroidX.Slice.Core.SliceActionImpl.BuildSlice(AndroidX.Slice.Slice.Builder! builder) -> AndroidX.Slice.Slice!
virtual AndroidX.Slice.Core.SliceActionImpl.ContentDescriptionFormatted.get -> Java.Lang.ICharSequence?
virtual AndroidX.Slice.Core.SliceActionImpl.Icon.get -> AndroidX.Core.Graphics.Drawable.IconCompat?
virtual AndroidX.Slice.Core.SliceActionImpl.ImageMode.get -> int
virtual AndroidX.Slice.Core.SliceActionImpl.IsActivity.get -> bool
virtual AndroidX.Slice.Core.SliceActionImpl.IsChecked.get -> bool
virtual AndroidX.Slice.Core.SliceActionImpl.IsDefaultToggle.get -> bool
virtual AndroidX.Slice.Core.SliceActionImpl.IsToggle.get -> bool
virtual AndroidX.Slice.Core.SliceActionImpl.Priority.get -> int
virtual AndroidX.Slice.Core.SliceActionImpl.SetActivity(bool isActivity) -> void
virtual AndroidX.Slice.Core.SliceActionImpl.SetChecked(bool isChecked) -> AndroidX.Slice.Core.ISliceAction?
virtual AndroidX.Slice.Core.SliceActionImpl.SetContentDescription(Java.Lang.ICharSequence! description) -> AndroidX.Slice.Core.ISliceAction?
virtual AndroidX.Slice.Core.SliceActionImpl.SetPriority(int priority) -> AndroidX.Slice.Core.ISliceAction?
virtual AndroidX.Slice.Core.SliceActionImpl.SliceItem.get -> AndroidX.Slice.SliceItem?
virtual AndroidX.Slice.Core.SliceActionImpl.Subtype.get -> string?
virtual AndroidX.Slice.Core.SliceActionImpl.TitleFormatted.get -> Java.Lang.ICharSequence!
virtual AndroidX.Slice.Slice.Builder.AddAction(Android.App.PendingIntent! action, AndroidX.Slice.Slice! s, string? subType) -> AndroidX.Slice.Slice.Builder?
virtual AndroidX.Slice.Slice.Builder.AddAction(AndroidX.Slice.SliceItem.IActionHandler! action, AndroidX.Slice.Slice! s, string? subType) -> AndroidX.Slice.Slice.Builder?
virtual AndroidX.Slice.Slice.Builder.AddHints(System.Collections.Generic.IList<string!>? hints) -> AndroidX.Slice.Slice.Builder?
virtual AndroidX.Slice.Slice.Builder.AddHints(params string![]? hints) -> AndroidX.Slice.Slice.Builder?
virtual AndroidX.Slice.Slice.Builder.AddIcon(AndroidX.Core.Graphics.Drawable.IconCompat? icon, string? subType, System.Collections.Generic.IList<string!>? hints) -> AndroidX.Slice.Slice.Builder?
virtual AndroidX.Slice.Slice.Builder.AddIcon(AndroidX.Core.Graphics.Drawable.IconCompat? icon, string? subType, params string![]? hints) -> AndroidX.Slice.Slice.Builder?
virtual AndroidX.Slice.Slice.Builder.AddInt(int value, string? subType, System.Collections.Generic.IList<string!>? hints) -> AndroidX.Slice.Slice.Builder?
virtual AndroidX.Slice.Slice.Builder.AddInt(int value, string? subType, params string![]? hints) -> AndroidX.Slice.Slice.Builder?
virtual AndroidX.Slice.Slice.Builder.AddItem(AndroidX.Slice.SliceItem? item) -> AndroidX.Slice.Slice.Builder?
virtual AndroidX.Slice.Slice.Builder.AddLong(long time, string? subType, System.Collections.Generic.IList<string!>? hints) -> AndroidX.Slice.Slice.Builder?
virtual AndroidX.Slice.Slice.Builder.AddLong(long time, string? subType, params string![]? hints) -> AndroidX.Slice.Slice.Builder?
virtual AndroidX.Slice.Slice.Builder.AddRemoteInput(Android.App.RemoteInput? remoteInput, string? subType, System.Collections.Generic.IList<string!>? hints) -> AndroidX.Slice.Slice.Builder?
virtual AndroidX.Slice.Slice.Builder.AddRemoteInput(Android.App.RemoteInput? remoteInput, string? subType, params string![]? hints) -> AndroidX.Slice.Slice.Builder?
virtual AndroidX.Slice.Slice.Builder.AddSubSlice(AndroidX.Slice.Slice! slice) -> AndroidX.Slice.Slice.Builder?
virtual AndroidX.Slice.Slice.Builder.AddSubSlice(AndroidX.Slice.Slice! slice, string? subType) -> AndroidX.Slice.Slice.Builder?
virtual AndroidX.Slice.Slice.Builder.AddText(Java.Lang.ICharSequence? text, string? subType, System.Collections.Generic.IList<string!>? hints) -> AndroidX.Slice.Slice.Builder?
virtual AndroidX.Slice.Slice.Builder.AddText(Java.Lang.ICharSequence? text, string? subType, params string![]? hints) -> AndroidX.Slice.Slice.Builder?
virtual AndroidX.Slice.Slice.Builder.AddTimestamp(long time, string? subType, System.Collections.Generic.IList<string!>? hints) -> AndroidX.Slice.Slice.Builder?
virtual AndroidX.Slice.Slice.Builder.AddTimestamp(long time, string? subType, params string![]? hints) -> AndroidX.Slice.Slice.Builder?
virtual AndroidX.Slice.Slice.Builder.Build() -> AndroidX.Slice.Slice?
virtual AndroidX.Slice.Slice.Builder.SetSpec(AndroidX.Slice.SliceSpec? spec) -> AndroidX.Slice.Slice.Builder?
virtual AndroidX.Slice.SliceItemHolder.GetObj(string? format) -> Java.Lang.Object?
virtual AndroidX.Slice.SliceProvider.HandleSlicePinned(Android.Net.Uri? sliceUri) -> void
virtual AndroidX.Slice.SliceProvider.HandleSliceUnpinned(Android.Net.Uri? sliceUri) -> void
virtual AndroidX.Slice.SliceProvider.OnCreatePermissionManager(string![]? autoGrantPermissions) -> AndroidX.Slice.Compat.CompatPermissionManager?
virtual AndroidX.Slice.SliceProvider.OnGetSliceDescendants(Android.Net.Uri? uri) -> System.Collections.Generic.ICollection<Android.Net.Uri!>?
virtual AndroidX.Slice.SliceProvider.OnMapIntentToUri(Android.Content.Intent? intent) -> Android.Net.Uri!
virtual AndroidX.Slice.SliceProvider.OnSlicePinned(Android.Net.Uri? sliceUri) -> void
virtual AndroidX.Slice.SliceProvider.OnSliceUnpinned(Android.Net.Uri? sliceUri) -> void
virtual AndroidX.Slice.SliceProvider.PinnedSlices.get -> System.Collections.Generic.IList<Android.Net.Uri!>!
virtual AndroidX.Slice.SliceProvider.Wrapper.get -> Java.Lang.Object?
virtual AndroidX.Slice.SystemClock.CurrentTimeMillis() -> long
