#nullable enable
AndroidX.WebKit.ChromiumLibBoundary.IDropDataContentProviderBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IDropDataContentProviderBoundaryInterface.Cache(byte[]? p0, string? p1, string? p2) -> Android.Net.Uri?
AndroidX.WebKit.ChromiumLibBoundary.IDropDataContentProviderBoundaryInterface.Call(string? p0, string? p1, Android.OS.Bundle? p2) -> Android.OS.Bundle?
AndroidX.WebKit.ChromiumLibBoundary.IDropDataContentProviderBoundaryInterface.GetStreamTypes(Android.Net.Uri? p0, string? p1) -> string![]?
AndroidX.WebKit.ChromiumLibBoundary.IDropDataContentProviderBoundaryInterface.GetType(Android.Net.Uri? p0) -> string?
AndroidX.WebKit.ChromiumLibBoundary.IDropDataContentProviderBoundaryInterface.OnCreate() -> bool
AndroidX.WebKit.ChromiumLibBoundary.IDropDataContentProviderBoundaryInterface.OnDragEnd(bool p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IDropDataContentProviderBoundaryInterface.OpenFile(Android.Content.ContentProvider? p0, Android.Net.Uri? p1) -> Android.OS.ParcelFileDescriptor?
AndroidX.WebKit.ChromiumLibBoundary.IDropDataContentProviderBoundaryInterface.Query(Android.Net.Uri? p0, string![]? p1, string? p2, string![]? p3, string? p4) -> Android.Database.ICursor?
AndroidX.WebKit.ChromiumLibBoundary.IDropDataContentProviderBoundaryInterface.SetClearCachedDataIntervalMs(int p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IFeatureFlagHolderBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IFeatureFlagHolderBoundaryInterface.GetSupportedFeatures() -> string![]?
AndroidX.WebKit.ChromiumLibBoundary.IIsomorphicObjectBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IIsomorphicObjectBoundaryInterface.GetOrCreatePeer(Java.Util.Concurrent.ICallable? p0) -> Java.Lang.Object?
AndroidX.WebKit.ChromiumLibBoundary.IJsReplyProxyBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IJsReplyProxyBoundaryInterface.PostMessage(string? p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IJsReplyProxyBoundaryInterface.PostMessageWithPayload(Java.Lang.Reflect.IInvocationHandler? p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.INoVarySearchDataBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.INoVarySearchDataBoundaryInterface.ConsideredQueryParameters.get -> System.Collections.Generic.IList<string!>?
AndroidX.WebKit.ChromiumLibBoundary.INoVarySearchDataBoundaryInterface.IgnoreDifferencesInParameters.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.INoVarySearchDataBoundaryInterface.IgnoredQueryParameters.get -> System.Collections.Generic.IList<string!>?
AndroidX.WebKit.ChromiumLibBoundary.INoVarySearchDataBoundaryInterface.VaryOnKeyOrder.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IPrefetchOperationCallbackBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IPrefetchOperationCallbackBoundaryInterface.OnFailure(int p0, string? p1, int p2) -> void
AndroidX.WebKit.ChromiumLibBoundary.IPrefetchOperationCallbackBoundaryInterface.OnSuccess() -> void
AndroidX.WebKit.ChromiumLibBoundary.IPrefetchOperationCallbackBoundaryInterfacePrefetchExceptionTypeBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IProfileBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IProfileBoundaryInterface.ClearPrefetch(string? p0, Java.Util.Concurrent.IExecutor? p1, Java.Lang.Reflect.IInvocationHandler? p2) -> void
AndroidX.WebKit.ChromiumLibBoundary.IProfileBoundaryInterface.CookieManager.get -> Android.Webkit.CookieManager?
AndroidX.WebKit.ChromiumLibBoundary.IProfileBoundaryInterface.GeoLocationPermissions.get -> Android.Webkit.GeolocationPermissions?
AndroidX.WebKit.ChromiumLibBoundary.IProfileBoundaryInterface.Name.get -> string?
AndroidX.WebKit.ChromiumLibBoundary.IProfileBoundaryInterface.PrefetchUrl(string? p0, Android.OS.CancellationSignal? p1, Java.Util.Concurrent.IExecutor? p2, Java.Lang.Reflect.IInvocationHandler? p3) -> void
AndroidX.WebKit.ChromiumLibBoundary.IProfileBoundaryInterface.PrefetchUrl(string? p0, Android.OS.CancellationSignal? p1, Java.Util.Concurrent.IExecutor? p2, Java.Lang.Reflect.IInvocationHandler? p3, Java.Lang.Reflect.IInvocationHandler? p4) -> void
AndroidX.WebKit.ChromiumLibBoundary.IProfileBoundaryInterface.ServiceWorkerController.get -> Android.Webkit.ServiceWorkerController?
AndroidX.WebKit.ChromiumLibBoundary.IProfileBoundaryInterface.SetSpeculativeLoadingConfig(Java.Lang.Reflect.IInvocationHandler? p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IProfileBoundaryInterface.WebStorage.get -> Android.Webkit.WebStorage?
AndroidX.WebKit.ChromiumLibBoundary.IProfileStoreBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IProfileStoreBoundaryInterface.AllProfileNames.get -> System.Collections.Generic.IList<string!>?
AndroidX.WebKit.ChromiumLibBoundary.IProfileStoreBoundaryInterface.DeleteProfile(string? p0) -> bool
AndroidX.WebKit.ChromiumLibBoundary.IProfileStoreBoundaryInterface.GetOrCreateProfile(string? p0) -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IProfileStoreBoundaryInterface.GetProfile(string? p0) -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IProxyControllerBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IProxyControllerBoundaryInterface.ClearProxyOverride(Java.Lang.IRunnable? p0, Java.Util.Concurrent.IExecutor? p1) -> void
AndroidX.WebKit.ChromiumLibBoundary.IProxyControllerBoundaryInterface.SetProxyOverride(string![]![]? p0, string![]? p1, Java.Lang.IRunnable? p2, Java.Util.Concurrent.IExecutor? p3) -> void
AndroidX.WebKit.ChromiumLibBoundary.IProxyControllerBoundaryInterface.SetProxyOverride(string![]![]? p0, string![]? p1, Java.Lang.IRunnable? p2, Java.Util.Concurrent.IExecutor? p3, bool p4) -> void
AndroidX.WebKit.ChromiumLibBoundary.ISafeBrowsingResponseBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.ISafeBrowsingResponseBoundaryInterface.BackToSafety(bool p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.ISafeBrowsingResponseBoundaryInterface.Proceed(bool p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.ISafeBrowsingResponseBoundaryInterface.ShowInterstitial(bool p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IScriptHandlerBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IScriptHandlerBoundaryInterface.Remove() -> void
AndroidX.WebKit.ChromiumLibBoundary.IServiceWorkerClientBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IServiceWorkerClientBoundaryInterface.ShouldInterceptRequest(Android.Webkit.IWebResourceRequest? p0) -> Android.Webkit.WebResourceResponse?
AndroidX.WebKit.ChromiumLibBoundary.IServiceWorkerControllerBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IServiceWorkerControllerBoundaryInterface.ServiceWorkerWebSettings.get -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IServiceWorkerControllerBoundaryInterface.SetServiceWorkerClient(Java.Lang.Reflect.IInvocationHandler? p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IServiceWorkerWebSettingsBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IServiceWorkerWebSettingsBoundaryInterface.AllowContentAccess.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IServiceWorkerWebSettingsBoundaryInterface.AllowContentAccess.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IServiceWorkerWebSettingsBoundaryInterface.AllowFileAccess.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IServiceWorkerWebSettingsBoundaryInterface.AllowFileAccess.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IServiceWorkerWebSettingsBoundaryInterface.BlockNetworkLoads.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IServiceWorkerWebSettingsBoundaryInterface.BlockNetworkLoads.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IServiceWorkerWebSettingsBoundaryInterface.CacheMode.get -> int
AndroidX.WebKit.ChromiumLibBoundary.IServiceWorkerWebSettingsBoundaryInterface.CacheMode.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IServiceWorkerWebSettingsBoundaryInterface.IncludeCookiesOnIntercept.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IServiceWorkerWebSettingsBoundaryInterface.IncludeCookiesOnIntercept.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IServiceWorkerWebSettingsBoundaryInterface.RequestedWithHeaderOriginAllowList.get -> System.Collections.Generic.ICollection<string!>?
AndroidX.WebKit.ChromiumLibBoundary.IServiceWorkerWebSettingsBoundaryInterface.RequestedWithHeaderOriginAllowList.set -> void
AndroidX.WebKit.ChromiumLibBoundary.ISpeculativeLoadingConfigBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.ISpeculativeLoadingConfigBoundaryInterface.MaxPrefetches.get -> int
AndroidX.WebKit.ChromiumLibBoundary.ISpeculativeLoadingConfigBoundaryInterface.MaxPrerenders.get -> int
AndroidX.WebKit.ChromiumLibBoundary.ISpeculativeLoadingConfigBoundaryInterface.PrefetchTTLSeconds.get -> int
AndroidX.WebKit.ChromiumLibBoundary.ISpeculativeLoadingParametersBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.ISpeculativeLoadingParametersBoundaryInterface.AdditionalHeaders.get -> System.Collections.Generic.IDictionary<string!, string!>?
AndroidX.WebKit.ChromiumLibBoundary.ISpeculativeLoadingParametersBoundaryInterface.IsJavaScriptEnabled.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.ISpeculativeLoadingParametersBoundaryInterface.NoVarySearchData.get -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IStaticsBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IStaticsBoundaryInterface.InitSafeBrowsing(Android.Content.Context? p0, Android.Webkit.IValueCallback? p1) -> void
AndroidX.WebKit.ChromiumLibBoundary.IStaticsBoundaryInterface.IsMultiProcessEnabled.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IStaticsBoundaryInterface.SafeBrowsingPrivacyPolicyUrl.get -> Android.Net.Uri?
AndroidX.WebKit.ChromiumLibBoundary.IStaticsBoundaryInterface.SetDefaultTrafficStatsTag(int p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IStaticsBoundaryInterface.SetDefaultTrafficStatsUid(int p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IStaticsBoundaryInterface.SetSafeBrowsingAllowlist(System.Collections.Generic.ICollection<string!>? p0, Android.Webkit.IValueCallback? p1) -> void
AndroidX.WebKit.ChromiumLibBoundary.IStaticsBoundaryInterface.SetSafeBrowsingWhitelist(System.Collections.Generic.IList<string!>? p0, Android.Webkit.IValueCallback? p1) -> void
AndroidX.WebKit.ChromiumLibBoundary.IStaticsBoundaryInterface.VariationsHeader.get -> string?
AndroidX.WebKit.ChromiumLibBoundary.ITracingControllerBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.ITracingControllerBoundaryInterface.IsTracing.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.ITracingControllerBoundaryInterface.Start(int p0, System.Collections.Generic.ICollection<string!>? p1, int p2) -> void
AndroidX.WebKit.ChromiumLibBoundary.ITracingControllerBoundaryInterface.Stop(System.IO.Stream? p0, Java.Util.Concurrent.IExecutor? p1) -> bool
AndroidX.WebKit.ChromiumLibBoundary.IVisualStateCallbackBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IVisualStateCallbackBoundaryInterface.OnComplete(long p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebMessageBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebMessageBoundaryInterface.Data.get -> string?
AndroidX.WebKit.ChromiumLibBoundary.IWebMessageBoundaryInterface.GetPorts() -> Java.Lang.Reflect.IInvocationHandler![]?
AndroidX.WebKit.ChromiumLibBoundary.IWebMessageBoundaryInterface.MessagePayload.get -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebMessageCallbackBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebMessageCallbackBoundaryInterface.OnMessage(Java.Lang.Reflect.IInvocationHandler? p0, Java.Lang.Reflect.IInvocationHandler? p1) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebMessageListenerBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebMessageListenerBoundaryInterface.OnPostMessage(Android.Webkit.WebView? p0, Java.Lang.Reflect.IInvocationHandler? p1, Android.Net.Uri? p2, bool p3, Java.Lang.Reflect.IInvocationHandler? p4) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebMessagePayloadBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebMessagePayloadBoundaryInterface.AsString.get -> string?
AndroidX.WebKit.ChromiumLibBoundary.IWebMessagePayloadBoundaryInterface.GetAsArrayBuffer() -> byte[]?
AndroidX.WebKit.ChromiumLibBoundary.IWebMessagePayloadBoundaryInterface.Type.get -> int
AndroidX.WebKit.ChromiumLibBoundary.IWebMessagePayloadBoundaryInterfaceWebMessagePayloadType
AndroidX.WebKit.ChromiumLibBoundary.IWebMessagePortBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebMessagePortBoundaryInterface.Close() -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebMessagePortBoundaryInterface.PostMessage(Java.Lang.Reflect.IInvocationHandler? p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebMessagePortBoundaryInterface.SetWebMessageCallback(Java.Lang.Reflect.IInvocationHandler? p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebMessagePortBoundaryInterface.SetWebMessageCallback(Java.Lang.Reflect.IInvocationHandler? p0, Android.OS.Handler? p1) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebResourceErrorBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebResourceErrorBoundaryInterface.DescriptionFormatted.get -> Java.Lang.ICharSequence?
AndroidX.WebKit.ChromiumLibBoundary.IWebResourceErrorBoundaryInterface.ErrorCode.get -> int
AndroidX.WebKit.ChromiumLibBoundary.IWebResourceRequestBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebResourceRequestBoundaryInterface.IsRedirect.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.AlgorithmicDarkeningAllowed.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.AlgorithmicDarkeningAllowed.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.AttributionBehavior.get -> int
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.AttributionBehavior.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.BackForwardCacheEnabled.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.BackForwardCacheEnabled.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.DisabledActionModeMenuItems.get -> int
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.DisabledActionModeMenuItems.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.EnterpriseAuthenticationAppLinkPolicyEnabled.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.EnterpriseAuthenticationAppLinkPolicyEnabled.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.ForceDark.get -> int
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.ForceDark.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.ForceDarkBehavior.get -> int
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.ForceDarkBehavior.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.HasEnrolledInstrumentEnabled.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.HasEnrolledInstrumentEnabled.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.IncludeCookiesOnIntercept.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.IncludeCookiesOnIntercept.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.OffscreenPreRaster.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.OffscreenPreRaster.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.PaymentRequestEnabled.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.PaymentRequestEnabled.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.RequestedWithHeaderOriginAllowList.get -> System.Collections.Generic.ICollection<string!>?
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.RequestedWithHeaderOriginAllowList.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.SafeBrowsingEnabled.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.SafeBrowsingEnabled.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.SetUserAgentMetadataFromMap(System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>? p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.SetWebViewMediaIntegrityApiStatus(int p0, System.Collections.Generic.IDictionary<string!, Java.Lang.Integer!>? p1) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.SpeculativeLoadingStatus.get -> int
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.SpeculativeLoadingStatus.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.UserAgentMetadataMap.get -> System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>?
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.WebViewMediaIntegrityApiDefaultStatus.get -> int
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.WebViewMediaIntegrityApiOverrideRules.get -> System.Collections.Generic.IDictionary<string!, Java.Lang.Integer!>?
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.WebauthnSupport.get -> int
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.WebauthnSupport.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.WillSuppressErrorPage.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface.WillSuppressErrorPage.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterfaceAttributionBehavior
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterfaceForceDarkBehavior
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterfaceSpeculativeLoadingStatus
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterfaceWebViewMediaIntegrityApiStatus
AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterfaceWebauthnSupport
AndroidX.WebKit.ChromiumLibBoundary.IWebStorageBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebStorageBoundaryInterface.DeleteBrowsingData(Java.Util.Concurrent.IExecutor? p0, Java.Lang.IRunnable? p1) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebStorageBoundaryInterface.DeleteBrowsingDataForSite(string? p0, Java.Util.Concurrent.IExecutor? p1, Java.Lang.IRunnable? p2) -> string?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewBuilderBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebViewBuilderBoundaryInterface.Build(Android.Content.Context? p0, Java.Util.Functions.IConsumer? p1) -> Android.Webkit.WebView?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewBuilderBoundaryInterfaceBaseline
AndroidX.WebKit.ChromiumLibBoundary.IWebViewBuilderBoundaryInterfaceConfigField
AndroidX.WebKit.ChromiumLibBoundary.IWebViewClientBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebViewClientBoundaryInterface.OnPageCommitVisible(Android.Webkit.WebView? p0, string? p1) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewClientBoundaryInterface.OnReceivedError(Android.Webkit.WebView? p0, Android.Webkit.IWebResourceRequest? p1, Java.Lang.Reflect.IInvocationHandler? p2) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewClientBoundaryInterface.OnReceivedHttpError(Android.Webkit.WebView? p0, Android.Webkit.IWebResourceRequest? p1, Android.Webkit.WebResourceResponse? p2) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewClientBoundaryInterface.OnSafeBrowsingHit(Android.Webkit.WebView? p0, Android.Webkit.IWebResourceRequest? p1, int p2, Java.Lang.Reflect.IInvocationHandler? p3) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewClientBoundaryInterface.ShouldOverrideUrlLoading(Android.Webkit.WebView? p0, Android.Webkit.IWebResourceRequest? p1) -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebViewCookieManagerBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebViewCookieManagerBoundaryInterface.GetCookieInfo(string? p0) -> System.Collections.Generic.IList<string!>?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationBoundaryInterface.DidCommit() -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationBoundaryInterface.DidCommitErrorPage() -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationBoundaryInterface.IsBack.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationBoundaryInterface.IsForward.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationBoundaryInterface.IsHistory.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationBoundaryInterface.IsReload.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationBoundaryInterface.IsRestore.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationBoundaryInterface.IsSameDocument.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationBoundaryInterface.Page.get -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationBoundaryInterface.StatusCode.get -> int
AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationBoundaryInterface.Url.get -> string?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationBoundaryInterface.WasInitiatedByPage() -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationClientBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationClientBoundaryInterface.OnFirstContentfulPaint(Java.Lang.Reflect.IInvocationHandler? p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationClientBoundaryInterface.OnNavigationCompleted(Java.Lang.Reflect.IInvocationHandler? p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationClientBoundaryInterface.OnNavigationRedirected(Java.Lang.Reflect.IInvocationHandler? p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationClientBoundaryInterface.OnNavigationStarted(Java.Lang.Reflect.IInvocationHandler? p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationClientBoundaryInterface.OnPageDOMContentLoadedEventFired(Java.Lang.Reflect.IInvocationHandler? p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationClientBoundaryInterface.OnPageDeleted(Java.Lang.Reflect.IInvocationHandler? p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationClientBoundaryInterface.OnPageLoadEventFired(Java.Lang.Reflect.IInvocationHandler? p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewPageBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface.AddDocumentStartJavaScript(string? p0, string![]? p1) -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface.AddWebMessageListener(string? p0, string![]? p1, Java.Lang.Reflect.IInvocationHandler? p2) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface.AudioMuted.get -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface.AudioMuted.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface.CreateWebMessageChannel() -> Java.Lang.Reflect.IInvocationHandler![]?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface.InsertVisualStateCallback(long p0, Java.Lang.Reflect.IInvocationHandler? p1) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface.PostMessageToMainFrame(Java.Lang.Reflect.IInvocationHandler? p0, Android.Net.Uri? p1) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface.PrerenderUrl(string? p0, Android.OS.CancellationSignal? p1, Java.Util.Concurrent.IExecutor? p2, Android.Webkit.IValueCallback? p3, Android.Webkit.IValueCallback? p4) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface.PrerenderUrl(string? p0, Android.OS.CancellationSignal? p1, Java.Util.Concurrent.IExecutor? p2, Java.Lang.Reflect.IInvocationHandler? p3, Android.Webkit.IValueCallback? p4, Android.Webkit.IValueCallback? p5) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface.Profile.get -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface.RemoveWebMessageListener(string? p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface.SaveState(Android.OS.Bundle? p0, int p1, bool p2) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface.SetProfile(string? p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface.WebChromeClient.get -> Android.Webkit.WebChromeClient?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface.WebViewClient.get -> Android.Webkit.WebViewClient?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface.WebViewNavigationClient.get -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface.WebViewNavigationClient.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface.WebViewRenderer.get -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface.WebViewRendererClient.get -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface.WebViewRendererClient.set -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderFactoryBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderFactoryBoundaryInterface.CreateWebView(Android.Webkit.WebView? p0) -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderFactoryBoundaryInterface.DropDataProvider.get -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderFactoryBoundaryInterface.GetSupportedFeatures() -> string![]?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderFactoryBoundaryInterface.ProfileStore.get -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderFactoryBoundaryInterface.ProxyController.get -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderFactoryBoundaryInterface.ServiceWorkerController.get -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderFactoryBoundaryInterface.StartUpWebView(Java.Lang.Reflect.IInvocationHandler? p0, Java.Lang.Reflect.IInvocationHandler? p1) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderFactoryBoundaryInterface.Statics.get -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderFactoryBoundaryInterface.TracingController.get -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderFactoryBoundaryInterface.WebViewBuilder.get -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderFactoryBoundaryInterface.WebkitToCompatConverter.get -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewRendererBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebViewRendererBoundaryInterface.Terminate() -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebViewRendererClientBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebViewRendererClientBoundaryInterface.OnRendererResponsive(Android.Webkit.WebView? p0, Java.Lang.Reflect.IInvocationHandler? p1) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewRendererClientBoundaryInterface.OnRendererUnresponsive(Android.Webkit.WebView? p0, Java.Lang.Reflect.IInvocationHandler? p1) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewStartUpCallbackBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebViewStartUpCallbackBoundaryInterface.OnSuccess(Java.Lang.Reflect.IInvocationHandler? p0) -> void
AndroidX.WebKit.ChromiumLibBoundary.IWebViewStartUpConfigBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebViewStartUpConfigBoundaryInterface.BackgroundExecutor.get -> Java.Util.Concurrent.IExecutor?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewStartUpConfigBoundaryInterface.ShouldRunUiThreadStartUpTasks() -> bool
AndroidX.WebKit.ChromiumLibBoundary.IWebViewStartUpResultBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebViewStartUpResultBoundaryInterface.BlockingStartUpLocations.get -> System.Collections.Generic.IList<Java.Lang.Throwable!>?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewStartUpResultBoundaryInterface.MaxTimePerTaskInUiThreadMillis.get -> Java.Lang.Long?
AndroidX.WebKit.ChromiumLibBoundary.IWebViewStartUpResultBoundaryInterface.TotalTimeInUiThreadMillis.get -> Java.Lang.Long?
AndroidX.WebKit.ChromiumLibBoundary.IWebkitToCompatConverterBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.IWebkitToCompatConverterBoundaryInterface.ConvertCookieManager(Java.Lang.Object? p0) -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebkitToCompatConverterBoundaryInterface.ConvertSafeBrowsingResponse(Java.Lang.Object? p0) -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebkitToCompatConverterBoundaryInterface.ConvertSafeBrowsingResponse(Java.Lang.Reflect.IInvocationHandler? p0) -> Java.Lang.Object?
AndroidX.WebKit.ChromiumLibBoundary.IWebkitToCompatConverterBoundaryInterface.ConvertServiceWorkerSettings(Java.Lang.Object? p0) -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebkitToCompatConverterBoundaryInterface.ConvertServiceWorkerSettings(Java.Lang.Reflect.IInvocationHandler? p0) -> Java.Lang.Object?
AndroidX.WebKit.ChromiumLibBoundary.IWebkitToCompatConverterBoundaryInterface.ConvertSettings(Android.Webkit.WebSettings? p0) -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebkitToCompatConverterBoundaryInterface.ConvertWebMessagePort(Java.Lang.Object? p0) -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebkitToCompatConverterBoundaryInterface.ConvertWebMessagePort(Java.Lang.Reflect.IInvocationHandler? p0) -> Java.Lang.Object?
AndroidX.WebKit.ChromiumLibBoundary.IWebkitToCompatConverterBoundaryInterface.ConvertWebResourceError(Java.Lang.Object? p0) -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebkitToCompatConverterBoundaryInterface.ConvertWebResourceError(Java.Lang.Reflect.IInvocationHandler? p0) -> Java.Lang.Object?
AndroidX.WebKit.ChromiumLibBoundary.IWebkitToCompatConverterBoundaryInterface.ConvertWebResourceRequest(Android.Webkit.IWebResourceRequest? p0) -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.IWebkitToCompatConverterBoundaryInterface.ConvertWebStorage(Java.Lang.Object? p0) -> Java.Lang.Reflect.IInvocationHandler?
AndroidX.WebKit.ChromiumLibBoundary.PrefetchOperationCallbackBoundaryInterfacePrefetchExceptionTypeBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.PrefetchOperationCallbackBoundaryInterfacePrefetchExceptionTypeBoundaryInterfaceConsts
AndroidX.WebKit.ChromiumLibBoundary.ProcessGlobalConfigConstants
AndroidX.WebKit.ChromiumLibBoundary.ProcessGlobalConfigConstants.IProcessGlobalConfigMapKey
AndroidX.WebKit.ChromiumLibBoundary.Util.BoundaryInterfaceReflectionUtil
AndroidX.WebKit.ChromiumLibBoundary.Util.BoundaryInterfaceReflectionUtil.BoundaryInterfaceReflectionUtil() -> void
AndroidX.WebKit.ChromiumLibBoundary.Util.BoundaryInterfaceReflectionUtil.BoundaryInterfaceReflectionUtil(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.ChromiumLibBoundary.Util.Features
AndroidX.WebKit.ChromiumLibBoundary.Util.Features.Features(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.ChromiumLibBoundary.WebMessagePayloadBoundaryInterfaceWebMessagePayloadType
AndroidX.WebKit.ChromiumLibBoundary.WebMessagePayloadBoundaryInterfaceWebMessagePayloadTypeConsts
AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceAttributionBehavior
AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceAttributionBehaviorConsts
AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceForceDarkBehavior
AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceForceDarkBehaviorConsts
AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceSpeculativeLoadingStatus
AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceSpeculativeLoadingStatusConsts
AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceWebViewMediaIntegrityApiStatus
AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceWebViewMediaIntegrityApiStatusConsts
AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceWebauthnSupport
AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceWebauthnSupportConsts
AndroidX.WebKit.ChromiumLibBoundary.WebViewBuilderBoundaryInterfaceBaseline
AndroidX.WebKit.ChromiumLibBoundary.WebViewBuilderBoundaryInterfaceBaselineConsts
AndroidX.WebKit.ChromiumLibBoundary.WebViewBuilderBoundaryInterfaceConfig
AndroidX.WebKit.ChromiumLibBoundary.WebViewBuilderBoundaryInterfaceConfig.Baseline.get -> int
AndroidX.WebKit.ChromiumLibBoundary.WebViewBuilderBoundaryInterfaceConfig.Baseline.set -> void
AndroidX.WebKit.ChromiumLibBoundary.WebViewBuilderBoundaryInterfaceConfig.WebViewBuilderBoundaryInterfaceConfig() -> void
AndroidX.WebKit.ChromiumLibBoundary.WebViewBuilderBoundaryInterfaceConfig.WebViewBuilderBoundaryInterfaceConfig(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.ChromiumLibBoundary.WebViewBuilderBoundaryInterfaceConfigField
AndroidX.WebKit.ChromiumLibBoundary.WebViewBuilderBoundaryInterfaceConfigFieldConsts
AndroidX.WebKit.ChromiumLibBoundary.WebViewProviderFactoryBoundaryInterface
AndroidX.WebKit.ChromiumLibBoundary.WebViewProviderFactoryBoundaryInterfaceConsts
AndroidX.WebKit.CookieManagerCompat
AndroidX.WebKit.CookieManagerCompat.CookieManagerCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.DropDataContentProvider
AndroidX.WebKit.DropDataContentProvider.DropDataContentProvider() -> void
AndroidX.WebKit.IBlockingStartUpLocation
AndroidX.WebKit.IBlockingStartUpLocation.StackInformation.get -> string!
AndroidX.WebKit.INavigation
AndroidX.WebKit.INavigation.DidCommit() -> bool
AndroidX.WebKit.INavigation.DidCommitErrorPage() -> bool
AndroidX.WebKit.INavigation.IsBack.get -> bool
AndroidX.WebKit.INavigation.IsForward.get -> bool
AndroidX.WebKit.INavigation.IsHistory.get -> bool
AndroidX.WebKit.INavigation.IsReload.get -> bool
AndroidX.WebKit.INavigation.IsRestore.get -> bool
AndroidX.WebKit.INavigation.IsSameDocument.get -> bool
AndroidX.WebKit.INavigation.Page.get -> AndroidX.WebKit.IPage?
AndroidX.WebKit.INavigation.StatusCode.get -> int
AndroidX.WebKit.INavigation.WasInitiatedByPage() -> bool
AndroidX.WebKit.IOutcomeReceiverCompat
AndroidX.WebKit.IOutcomeReceiverCompat.OnError(Java.Lang.Object! error) -> void
AndroidX.WebKit.IOutcomeReceiverCompat.OnResult(Java.Lang.Object? p0) -> void
AndroidX.WebKit.IPage
AndroidX.WebKit.IPrerenderOperationCallback
AndroidX.WebKit.IPrerenderOperationCallback.OnError(AndroidX.WebKit.PrerenderException? p0) -> void
AndroidX.WebKit.IPrerenderOperationCallback.OnPrerenderActivated() -> void
AndroidX.WebKit.IProfile
AndroidX.WebKit.IProfile.ClearPrefetchAsync(string? p0, Java.Util.Concurrent.IExecutor? p1, AndroidX.WebKit.IOutcomeReceiverCompat? p2) -> void
AndroidX.WebKit.IProfile.CookieManager.get -> Android.Webkit.CookieManager?
AndroidX.WebKit.IProfile.GeolocationPermissions.get -> Android.Webkit.GeolocationPermissions?
AndroidX.WebKit.IProfile.Name.get -> string?
AndroidX.WebKit.IProfile.PrefetchUrlAsync(string? p0, Android.OS.CancellationSignal? p1, Java.Util.Concurrent.IExecutor? p2, AndroidX.WebKit.IOutcomeReceiverCompat? p3) -> void
AndroidX.WebKit.IProfile.PrefetchUrlAsync(string? p0, Android.OS.CancellationSignal? p1, Java.Util.Concurrent.IExecutor? p2, AndroidX.WebKit.SpeculativeLoadingParameters? p3, AndroidX.WebKit.IOutcomeReceiverCompat? p4) -> void
AndroidX.WebKit.IProfile.ServiceWorkerController.get -> Android.Webkit.ServiceWorkerController?
AndroidX.WebKit.IProfile.SetSpeculativeLoadingConfig(AndroidX.WebKit.SpeculativeLoadingConfig? p0) -> void
AndroidX.WebKit.IProfile.WebStorage.get -> Android.Webkit.WebStorage?
AndroidX.WebKit.IProfileExperimentalUrlPrefetch
AndroidX.WebKit.IProfileStore
AndroidX.WebKit.IProfileStore.AllProfileNames.get -> System.Collections.Generic.IList<string!>?
AndroidX.WebKit.IProfileStore.DeleteProfile(string? p0) -> bool
AndroidX.WebKit.IProfileStore.GetOrCreateProfile(string? p0) -> AndroidX.WebKit.IProfile?
AndroidX.WebKit.IProfileStore.GetProfile(string? p0) -> AndroidX.WebKit.IProfile?
AndroidX.WebKit.IProfileStore.Instance.get -> AndroidX.WebKit.IProfileStore?
AndroidX.WebKit.IScriptHandler
AndroidX.WebKit.IScriptHandler.Remove() -> void
AndroidX.WebKit.IWebNavigationClient
AndroidX.WebKit.IWebNavigationClient.OnFirstContentfulPaint(AndroidX.WebKit.IPage? p0) -> void
AndroidX.WebKit.IWebNavigationClient.OnNavigationCompleted(AndroidX.WebKit.INavigation? p0) -> void
AndroidX.WebKit.IWebNavigationClient.OnNavigationRedirected(AndroidX.WebKit.INavigation? p0) -> void
AndroidX.WebKit.IWebNavigationClient.OnNavigationStarted(AndroidX.WebKit.INavigation? p0) -> void
AndroidX.WebKit.IWebNavigationClient.OnPageDeleted(AndroidX.WebKit.IPage? p0) -> void
AndroidX.WebKit.IWebNavigationClient.OnPageDomContentLoadedEventFired(AndroidX.WebKit.IPage? p0) -> void
AndroidX.WebKit.IWebNavigationClient.OnPageLoadEventFired(AndroidX.WebKit.IPage? p0) -> void
AndroidX.WebKit.IWebNavigationClientExperimentalNavigationCallback
AndroidX.WebKit.IWebViewStartUpResult
AndroidX.WebKit.IWebViewStartUpResult.BlockingStartUpLocations.get -> System.Collections.Generic.IList<AndroidX.WebKit.IBlockingStartUpLocation!>?
AndroidX.WebKit.IWebViewStartUpResult.MaxTimePerTaskInUiThreadMillis.get -> Java.Lang.Long?
AndroidX.WebKit.IWebViewStartUpResult.TotalTimeInUiThreadMillis.get -> Java.Lang.Long?
AndroidX.WebKit.Internal.ApiFeature
AndroidX.WebKit.Internal.ApiFeature.ApiFeature(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ApiFeature.M
AndroidX.WebKit.Internal.ApiFeature.M.M(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ApiFeature.N
AndroidX.WebKit.Internal.ApiFeature.N.N(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ApiFeature.NoFramework
AndroidX.WebKit.Internal.ApiFeature.NoFramework.NoFramework(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ApiFeature.O
AndroidX.WebKit.Internal.ApiFeature.O.O(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ApiFeature.O_MR1
AndroidX.WebKit.Internal.ApiFeature.O_MR1.O_MR1(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ApiFeature.P
AndroidX.WebKit.Internal.ApiFeature.P.P(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ApiFeature.Q
AndroidX.WebKit.Internal.ApiFeature.Q.Q(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ApiFeature.T
AndroidX.WebKit.Internal.ApiFeature.T.T(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ApiHelperForM
AndroidX.WebKit.Internal.ApiHelperForM.ApiHelperForM(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ApiHelperForN
AndroidX.WebKit.Internal.ApiHelperForN.ApiHelperForN(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ApiHelperForO
AndroidX.WebKit.Internal.ApiHelperForO.ApiHelperForO(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ApiHelperForOMR1
AndroidX.WebKit.Internal.ApiHelperForOMR1.ApiHelperForOMR1(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ApiHelperForP
AndroidX.WebKit.Internal.ApiHelperForP.ApiHelperForP(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ApiHelperForQ
AndroidX.WebKit.Internal.ApiHelperForQ.ApiHelperForQ(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ApiHelperForTiramisu
AndroidX.WebKit.Internal.ApiHelperForTiramisu.ApiHelperForTiramisu(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.AssetHelper
AndroidX.WebKit.Internal.AssetHelper.AssetHelper(Android.Content.Context? context) -> void
AndroidX.WebKit.Internal.AssetHelper.AssetHelper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.CookieManagerAdapter
AndroidX.WebKit.Internal.CookieManagerAdapter.CookieManagerAdapter(AndroidX.WebKit.ChromiumLibBoundary.IWebViewCookieManagerBoundaryInterface? boundaryInterface) -> void
AndroidX.WebKit.Internal.CookieManagerAdapter.CookieManagerAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.FrameworkServiceWorkerClient
AndroidX.WebKit.Internal.FrameworkServiceWorkerClient.FrameworkServiceWorkerClient(AndroidX.WebKit.ServiceWorkerClientCompat? impl) -> void
AndroidX.WebKit.Internal.FrameworkServiceWorkerClient.FrameworkServiceWorkerClient(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.IConditionallySupportedFeature
AndroidX.WebKit.Internal.IConditionallySupportedFeature.IsSupported.get -> bool
AndroidX.WebKit.Internal.IConditionallySupportedFeature.PublicFeatureName.get -> string?
AndroidX.WebKit.Internal.IWebViewProviderFactory
AndroidX.WebKit.Internal.IWebViewProviderFactory.CreateWebView(Android.Webkit.WebView? p0) -> AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface?
AndroidX.WebKit.Internal.IWebViewProviderFactory.DropDataProvider.get -> AndroidX.WebKit.ChromiumLibBoundary.IDropDataContentProviderBoundaryInterface?
AndroidX.WebKit.Internal.IWebViewProviderFactory.GetWebViewFeatures() -> string![]?
AndroidX.WebKit.Internal.IWebViewProviderFactory.ProfileStore.get -> AndroidX.WebKit.ChromiumLibBoundary.IProfileStoreBoundaryInterface?
AndroidX.WebKit.Internal.IWebViewProviderFactory.ProxyController.get -> AndroidX.WebKit.ChromiumLibBoundary.IProxyControllerBoundaryInterface?
AndroidX.WebKit.Internal.IWebViewProviderFactory.ServiceWorkerController.get -> AndroidX.WebKit.ChromiumLibBoundary.IServiceWorkerControllerBoundaryInterface?
AndroidX.WebKit.Internal.IWebViewProviderFactory.StartUpWebView(AndroidX.WebKit.WebViewStartUpConfig? p0, AndroidX.WebKit.WebViewCompat.IWebViewStartUpCallback? p1) -> void
AndroidX.WebKit.Internal.IWebViewProviderFactory.Statics.get -> AndroidX.WebKit.ChromiumLibBoundary.IStaticsBoundaryInterface?
AndroidX.WebKit.Internal.IWebViewProviderFactory.TracingController.get -> AndroidX.WebKit.ChromiumLibBoundary.ITracingControllerBoundaryInterface?
AndroidX.WebKit.Internal.IWebViewProviderFactory.WebViewBuilder.get -> AndroidX.WebKit.ChromiumLibBoundary.IWebViewBuilderBoundaryInterface?
AndroidX.WebKit.Internal.IWebViewProviderFactory.WebkitToCompatConverter.get -> AndroidX.WebKit.ChromiumLibBoundary.IWebkitToCompatConverterBoundaryInterface?
AndroidX.WebKit.Internal.IncompatibleApkWebViewProviderFactory
AndroidX.WebKit.Internal.IncompatibleApkWebViewProviderFactory.IncompatibleApkWebViewProviderFactory() -> void
AndroidX.WebKit.Internal.IncompatibleApkWebViewProviderFactory.IncompatibleApkWebViewProviderFactory(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.JavaScriptReplyProxyImpl
AndroidX.WebKit.Internal.JavaScriptReplyProxyImpl.JavaScriptReplyProxyImpl(AndroidX.WebKit.ChromiumLibBoundary.IJsReplyProxyBoundaryInterface? boundaryInterface) -> void
AndroidX.WebKit.Internal.JavaScriptReplyProxyImpl.JavaScriptReplyProxyImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.NavigationAdapter
AndroidX.WebKit.Internal.NavigationAdapter.NavigationAdapter(AndroidX.WebKit.ChromiumLibBoundary.IWebViewNavigationBoundaryInterface? impl) -> void
AndroidX.WebKit.Internal.NavigationAdapter.NavigationAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.NoVarySearchHeaderAdapter
AndroidX.WebKit.Internal.NoVarySearchHeaderAdapter.NoVarySearchHeaderAdapter(AndroidX.WebKit.NoVarySearchHeader? impl) -> void
AndroidX.WebKit.Internal.NoVarySearchHeaderAdapter.NoVarySearchHeaderAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.PageImpl
AndroidX.WebKit.Internal.PageImpl.PageImpl(AndroidX.WebKit.ChromiumLibBoundary.IWebViewPageBoundaryInterface? impl) -> void
AndroidX.WebKit.Internal.PageImpl.PageImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.PrefetchOperationCallbackAdapter
AndroidX.WebKit.Internal.PrefetchOperationCallbackAdapter.PrefetchOperationCallbackAdapter() -> void
AndroidX.WebKit.Internal.PrefetchOperationCallbackAdapter.PrefetchOperationCallbackAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ProfileImpl
AndroidX.WebKit.Internal.ProfileImpl.InterfaceConsts
AndroidX.WebKit.Internal.ProfileImpl.ProfileImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ProfileStoreImpl
AndroidX.WebKit.Internal.ProfileStoreImpl.ProfileStoreImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ProxyControllerImpl
AndroidX.WebKit.Internal.ProxyControllerImpl.ProxyControllerImpl() -> void
AndroidX.WebKit.Internal.ProxyControllerImpl.ProxyControllerImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.SafeBrowsingResponseImpl
AndroidX.WebKit.Internal.SafeBrowsingResponseImpl.SafeBrowsingResponseImpl(Android.Webkit.SafeBrowsingResponse? response) -> void
AndroidX.WebKit.Internal.SafeBrowsingResponseImpl.SafeBrowsingResponseImpl(Java.Lang.Reflect.IInvocationHandler? invocationHandler) -> void
AndroidX.WebKit.Internal.SafeBrowsingResponseImpl.SafeBrowsingResponseImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ScriptHandlerImpl
AndroidX.WebKit.Internal.ScriptHandlerImpl.ScriptHandlerImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ServiceWorkerClientAdapter
AndroidX.WebKit.Internal.ServiceWorkerClientAdapter.ServiceWorkerClientAdapter(AndroidX.WebKit.ServiceWorkerClientCompat? client) -> void
AndroidX.WebKit.Internal.ServiceWorkerClientAdapter.ServiceWorkerClientAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ServiceWorkerControllerImpl
AndroidX.WebKit.Internal.ServiceWorkerControllerImpl.ServiceWorkerControllerImpl() -> void
AndroidX.WebKit.Internal.ServiceWorkerControllerImpl.ServiceWorkerControllerImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.ServiceWorkerWebSettingsImpl
AndroidX.WebKit.Internal.ServiceWorkerWebSettingsImpl.ServiceWorkerWebSettingsImpl(Android.Webkit.ServiceWorkerWebSettings? settings) -> void
AndroidX.WebKit.Internal.ServiceWorkerWebSettingsImpl.ServiceWorkerWebSettingsImpl(Java.Lang.Reflect.IInvocationHandler? invocationHandler) -> void
AndroidX.WebKit.Internal.ServiceWorkerWebSettingsImpl.ServiceWorkerWebSettingsImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.SpeculativeLoadingConfigAdapter
AndroidX.WebKit.Internal.SpeculativeLoadingConfigAdapter.SpeculativeLoadingConfigAdapter(AndroidX.WebKit.SpeculativeLoadingConfig? config) -> void
AndroidX.WebKit.Internal.SpeculativeLoadingConfigAdapter.SpeculativeLoadingConfigAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.SpeculativeLoadingParametersAdapter
AndroidX.WebKit.Internal.SpeculativeLoadingParametersAdapter.SpeculativeLoadingParametersAdapter(AndroidX.WebKit.SpeculativeLoadingParameters? impl) -> void
AndroidX.WebKit.Internal.SpeculativeLoadingParametersAdapter.SpeculativeLoadingParametersAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.StartupApiFeature
AndroidX.WebKit.Internal.StartupApiFeature.NoFramework
AndroidX.WebKit.Internal.StartupApiFeature.NoFramework.NoFramework(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.StartupApiFeature.P
AndroidX.WebKit.Internal.StartupApiFeature.P.P(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.StartupApiFeature.StartupApiFeature(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.StartupFeatures
AndroidX.WebKit.Internal.StartupFeatures.StartupFeatures(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.TracingControllerImpl
AndroidX.WebKit.Internal.TracingControllerImpl.TracingControllerImpl() -> void
AndroidX.WebKit.Internal.TracingControllerImpl.TracingControllerImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.UserAgentMetadataInternal
AndroidX.WebKit.Internal.UserAgentMetadataInternal.UserAgentMetadataInternal() -> void
AndroidX.WebKit.Internal.UserAgentMetadataInternal.UserAgentMetadataInternal(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.VisualStateCallbackAdapter
AndroidX.WebKit.Internal.VisualStateCallbackAdapter.VisualStateCallbackAdapter(AndroidX.WebKit.WebViewCompat.IVisualStateCallback? visualStateCallback) -> void
AndroidX.WebKit.Internal.VisualStateCallbackAdapter.VisualStateCallbackAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.WebMessageAdapter
AndroidX.WebKit.Internal.WebMessageAdapter.WebMessageAdapter(AndroidX.WebKit.WebMessageCompat? webMessage) -> void
AndroidX.WebKit.Internal.WebMessageAdapter.WebMessageAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.WebMessageCallbackAdapter
AndroidX.WebKit.Internal.WebMessageCallbackAdapter.WebMessageCallbackAdapter(AndroidX.WebKit.WebMessagePortCompat.WebMessageCallbackCompat? impl) -> void
AndroidX.WebKit.Internal.WebMessageCallbackAdapter.WebMessageCallbackAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.WebMessageListenerAdapter
AndroidX.WebKit.Internal.WebMessageListenerAdapter.WebMessageListenerAdapter(AndroidX.WebKit.WebViewCompat.IWebMessageListener? webMessageListener) -> void
AndroidX.WebKit.Internal.WebMessageListenerAdapter.WebMessageListenerAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.WebMessagePayloadAdapter
AndroidX.WebKit.Internal.WebMessagePayloadAdapter.WebMessagePayloadAdapter(byte[]? arrayBuffer) -> void
AndroidX.WebKit.Internal.WebMessagePayloadAdapter.WebMessagePayloadAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.WebMessagePayloadAdapter.WebMessagePayloadAdapter(string? data) -> void
AndroidX.WebKit.Internal.WebMessagePortImpl
AndroidX.WebKit.Internal.WebMessagePortImpl.WebMessagePortImpl(Android.Webkit.WebMessagePort? frameworksImpl) -> void
AndroidX.WebKit.Internal.WebMessagePortImpl.WebMessagePortImpl(Java.Lang.Reflect.IInvocationHandler? invocationHandler) -> void
AndroidX.WebKit.Internal.WebMessagePortImpl.WebMessagePortImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.WebNavigationClientAdapter
AndroidX.WebKit.Internal.WebNavigationClientAdapter.WebNavigationClientAdapter(AndroidX.WebKit.IWebNavigationClient? client) -> void
AndroidX.WebKit.Internal.WebNavigationClientAdapter.WebNavigationClientAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.WebResourceErrorImpl
AndroidX.WebKit.Internal.WebResourceErrorImpl.WebResourceErrorImpl(Android.Webkit.WebResourceError? error) -> void
AndroidX.WebKit.Internal.WebResourceErrorImpl.WebResourceErrorImpl(Java.Lang.Reflect.IInvocationHandler? invocationHandler) -> void
AndroidX.WebKit.Internal.WebResourceErrorImpl.WebResourceErrorImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.WebResourceRequestAdapter
AndroidX.WebKit.Internal.WebResourceRequestAdapter.WebResourceRequestAdapter(AndroidX.WebKit.ChromiumLibBoundary.IWebResourceRequestBoundaryInterface? boundaryInterface) -> void
AndroidX.WebKit.Internal.WebResourceRequestAdapter.WebResourceRequestAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.WebSettingsAdapter
AndroidX.WebKit.Internal.WebSettingsAdapter.WebSettingsAdapter(AndroidX.WebKit.ChromiumLibBoundary.IWebSettingsBoundaryInterface? boundaryInterface) -> void
AndroidX.WebKit.Internal.WebSettingsAdapter.WebSettingsAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.WebSettingsNoOpAdapter
AndroidX.WebKit.Internal.WebSettingsNoOpAdapter.WebSettingsNoOpAdapter() -> void
AndroidX.WebKit.Internal.WebSettingsNoOpAdapter.WebSettingsNoOpAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.WebStorageAdapter
AndroidX.WebKit.Internal.WebStorageAdapter.WebStorageAdapter(AndroidX.WebKit.ChromiumLibBoundary.IWebStorageBoundaryInterface? impl) -> void
AndroidX.WebKit.Internal.WebStorageAdapter.WebStorageAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.WebViewFeatureInternal
AndroidX.WebKit.Internal.WebViewFeatureInternal.WebViewFeatureInternal(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.WebViewGlueCommunicator
AndroidX.WebKit.Internal.WebViewGlueCommunicator.WebViewGlueCommunicator(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.WebViewProviderAdapter
AndroidX.WebKit.Internal.WebViewProviderAdapter.WebViewProviderAdapter(AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface? impl) -> void
AndroidX.WebKit.Internal.WebViewProviderAdapter.WebViewProviderAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.WebViewProviderFactoryAdapter
AndroidX.WebKit.Internal.WebViewProviderFactoryAdapter.WebViewProviderFactoryAdapter(AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderFactoryBoundaryInterface? impl) -> void
AndroidX.WebKit.Internal.WebViewProviderFactoryAdapter.WebViewProviderFactoryAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.WebViewRenderProcessClientAdapter
AndroidX.WebKit.Internal.WebViewRenderProcessClientAdapter.GetSupportedFeatures() -> string![]?
AndroidX.WebKit.Internal.WebViewRenderProcessClientAdapter.OnRendererResponsive(Android.Webkit.WebView? view, Java.Lang.Reflect.IInvocationHandler? renderer) -> void
AndroidX.WebKit.Internal.WebViewRenderProcessClientAdapter.OnRendererUnresponsive(Android.Webkit.WebView? view, Java.Lang.Reflect.IInvocationHandler? renderer) -> void
AndroidX.WebKit.Internal.WebViewRenderProcessClientAdapter.WebViewRenderProcessClientAdapter(Java.Util.Concurrent.IExecutor? executor, AndroidX.WebKit.WebViewRenderProcessClient? webViewRenderProcessClient) -> void
AndroidX.WebKit.Internal.WebViewRenderProcessClientAdapter.WebViewRenderProcessClientAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.WebViewRenderProcessClientFrameworkAdapter
AndroidX.WebKit.Internal.WebViewRenderProcessClientFrameworkAdapter.WebViewRenderProcessClientFrameworkAdapter(AndroidX.WebKit.WebViewRenderProcessClient? client) -> void
AndroidX.WebKit.Internal.WebViewRenderProcessClientFrameworkAdapter.WebViewRenderProcessClientFrameworkAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.WebViewRenderProcessImpl
AndroidX.WebKit.Internal.WebViewRenderProcessImpl.WebViewRenderProcessImpl(Android.Webkit.WebViewRenderProcess? frameworkRenderer) -> void
AndroidX.WebKit.Internal.WebViewRenderProcessImpl.WebViewRenderProcessImpl(AndroidX.WebKit.ChromiumLibBoundary.IWebViewRendererBoundaryInterface? boundaryInterface) -> void
AndroidX.WebKit.Internal.WebViewRenderProcessImpl.WebViewRenderProcessImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.WebViewStartUpCallbackAdapter
AndroidX.WebKit.Internal.WebViewStartUpCallbackAdapter.WebViewStartUpCallbackAdapter(AndroidX.WebKit.WebViewCompat.IWebViewStartUpCallback! webViewStartUpCallback) -> void
AndroidX.WebKit.Internal.WebViewStartUpCallbackAdapter.WebViewStartUpCallbackAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.WebViewStartUpConfigAdapter
AndroidX.WebKit.Internal.WebViewStartUpConfigAdapter.WebViewStartUpConfigAdapter(AndroidX.WebKit.WebViewStartUpConfig! webViewStartUpConfig) -> void
AndroidX.WebKit.Internal.WebViewStartUpConfigAdapter.WebViewStartUpConfigAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Internal.WebkitToCompatConverter
AndroidX.WebKit.Internal.WebkitToCompatConverter.WebkitToCompatConverter(AndroidX.WebKit.ChromiumLibBoundary.IWebkitToCompatConverterBoundaryInterface? impl) -> void
AndroidX.WebKit.Internal.WebkitToCompatConverter.WebkitToCompatConverter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.JavaScriptReplyProxy
AndroidX.WebKit.JavaScriptReplyProxy.JavaScriptReplyProxy() -> void
AndroidX.WebKit.JavaScriptReplyProxy.JavaScriptReplyProxy(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.NoVarySearchHeader
AndroidX.WebKit.NoVarySearchHeader.ConsideredQueryParameters.get -> System.Collections.IList?
AndroidX.WebKit.NoVarySearchHeader.ConsideredQueryParameters.set -> void
AndroidX.WebKit.NoVarySearchHeader.IgnoreDifferencesInParameters.get -> bool
AndroidX.WebKit.NoVarySearchHeader.IgnoreDifferencesInParameters.set -> void
AndroidX.WebKit.NoVarySearchHeader.IgnoredQueryParameters.get -> System.Collections.IList?
AndroidX.WebKit.NoVarySearchHeader.IgnoredQueryParameters.set -> void
AndroidX.WebKit.NoVarySearchHeader.NoVarySearchHeader(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.NoVarySearchHeader.VaryOnKeyOrder.get -> bool
AndroidX.WebKit.NoVarySearchHeader.VaryOnKeyOrder.set -> void
AndroidX.WebKit.Policy
AndroidX.WebKit.Policy.Builder
AndroidX.WebKit.Policy.Builder.Build() -> AndroidX.WebKit.Policy?
AndroidX.WebKit.Policy.Builder.Builder() -> void
AndroidX.WebKit.PrefetchException
AndroidX.WebKit.PrefetchException.PrefetchException() -> void
AndroidX.WebKit.PrefetchException.PrefetchException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.PrefetchException.PrefetchException(string? error) -> void
AndroidX.WebKit.PrefetchNetworkException
AndroidX.WebKit.PrefetchNetworkException.HttpResponseStatusCode.get -> int
AndroidX.WebKit.PrefetchNetworkException.HttpResponseStatusCode.set -> void
AndroidX.WebKit.PrefetchNetworkException.PrefetchNetworkException() -> void
AndroidX.WebKit.PrefetchNetworkException.PrefetchNetworkException(int httpResponseStatusCode) -> void
AndroidX.WebKit.PrefetchNetworkException.PrefetchNetworkException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.PrefetchNetworkException.PrefetchNetworkException(string? error) -> void
AndroidX.WebKit.PrefetchNetworkException.PrefetchNetworkException(string? error, int httpResponseStatusCode) -> void
AndroidX.WebKit.PrerenderException
AndroidX.WebKit.PrerenderException.PrerenderException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.PrerenderException.PrerenderException(string! error, Java.Lang.Throwable? cause) -> void
AndroidX.WebKit.ProcessGlobalConfig
AndroidX.WebKit.ProcessGlobalConfig.ProcessGlobalConfig() -> void
AndroidX.WebKit.ProcessGlobalConfig.ProcessGlobalConfig(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.Profile
AndroidX.WebKit.ProfileConsts
AndroidX.WebKit.ProxyConfig
AndroidX.WebKit.ProxyConfig.Builder
AndroidX.WebKit.ProxyConfig.Builder.AddBypassRule(string? bypassRule) -> AndroidX.WebKit.ProxyConfig.Builder?
AndroidX.WebKit.ProxyConfig.Builder.AddDirect() -> AndroidX.WebKit.ProxyConfig.Builder?
AndroidX.WebKit.ProxyConfig.Builder.AddDirect(string? schemeFilter) -> AndroidX.WebKit.ProxyConfig.Builder?
AndroidX.WebKit.ProxyConfig.Builder.AddProxyRule(string? proxyUrl) -> AndroidX.WebKit.ProxyConfig.Builder?
AndroidX.WebKit.ProxyConfig.Builder.AddProxyRule(string? proxyUrl, string? schemeFilter) -> AndroidX.WebKit.ProxyConfig.Builder?
AndroidX.WebKit.ProxyConfig.Builder.Build() -> AndroidX.WebKit.ProxyConfig?
AndroidX.WebKit.ProxyConfig.Builder.Builder() -> void
AndroidX.WebKit.ProxyConfig.Builder.Builder(AndroidX.WebKit.ProxyConfig? proxyConfig) -> void
AndroidX.WebKit.ProxyConfig.Builder.BypassSimpleHostnames() -> AndroidX.WebKit.ProxyConfig.Builder?
AndroidX.WebKit.ProxyConfig.Builder.RemoveImplicitRules() -> AndroidX.WebKit.ProxyConfig.Builder?
AndroidX.WebKit.ProxyConfig.Builder.SetReverseBypassEnabled(bool reverseBypass) -> AndroidX.WebKit.ProxyConfig.Builder?
AndroidX.WebKit.ProxyConfig.BypassRules.get -> System.Collections.Generic.IList<string!>?
AndroidX.WebKit.ProxyConfig.IProxyScheme
AndroidX.WebKit.ProxyConfig.IsReverseBypassEnabled.get -> bool
AndroidX.WebKit.ProxyConfig.ProxyConfig(System.Collections.Generic.IList<AndroidX.WebKit.ProxyConfig.ProxyRule!>? proxyRules, System.Collections.Generic.IList<string!>? bypassRules, bool reverseBypass) -> void
AndroidX.WebKit.ProxyConfig.ProxyRule
AndroidX.WebKit.ProxyConfig.ProxyRule.ProxyRule(string? schemeFilter, string? url) -> void
AndroidX.WebKit.ProxyConfig.ProxyRule.ProxyRule(string? url) -> void
AndroidX.WebKit.ProxyConfig.ProxyRule.SchemeFilter.get -> string?
AndroidX.WebKit.ProxyConfig.ProxyRule.Url.get -> string?
AndroidX.WebKit.ProxyConfig.ProxyRules.get -> System.Collections.Generic.IList<AndroidX.WebKit.ProxyConfig.ProxyRule!>?
AndroidX.WebKit.ProxyController
AndroidX.WebKit.ProxyController.ProxyController() -> void
AndroidX.WebKit.ProxyController.ProxyController(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.SafeBrowsingResponseCompat
AndroidX.WebKit.SafeBrowsingResponseCompat.SafeBrowsingResponseCompat() -> void
AndroidX.WebKit.SafeBrowsingResponseCompat.SafeBrowsingResponseCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.ServiceWorkerClientCompat
AndroidX.WebKit.ServiceWorkerClientCompat.ServiceWorkerClientCompat() -> void
AndroidX.WebKit.ServiceWorkerClientCompat.ServiceWorkerClientCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.ServiceWorkerControllerCompat
AndroidX.WebKit.ServiceWorkerControllerCompat.ServiceWorkerControllerCompat() -> void
AndroidX.WebKit.ServiceWorkerControllerCompat.ServiceWorkerControllerCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.ServiceWorkerWebSettingsCompat
AndroidX.WebKit.ServiceWorkerWebSettingsCompat.ICacheMode
AndroidX.WebKit.ServiceWorkerWebSettingsCompat.ServiceWorkerWebSettingsCompat() -> void
AndroidX.WebKit.ServiceWorkerWebSettingsCompat.ServiceWorkerWebSettingsCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.SpeculativeLoadingConfig
AndroidX.WebKit.SpeculativeLoadingConfig.Builder
AndroidX.WebKit.SpeculativeLoadingConfig.Builder.Build() -> AndroidX.WebKit.SpeculativeLoadingConfig?
AndroidX.WebKit.SpeculativeLoadingConfig.Builder.Builder() -> void
AndroidX.WebKit.SpeculativeLoadingConfig.Builder.SetMaxPrefetches(int max) -> AndroidX.WebKit.SpeculativeLoadingConfig.Builder?
AndroidX.WebKit.SpeculativeLoadingConfig.Builder.SetMaxPrerenders(int max) -> AndroidX.WebKit.SpeculativeLoadingConfig.Builder?
AndroidX.WebKit.SpeculativeLoadingConfig.Builder.SetPrefetchTtlSeconds(int ttlSeconds) -> AndroidX.WebKit.SpeculativeLoadingConfig.Builder?
AndroidX.WebKit.SpeculativeLoadingConfig.SpeculativeLoadingConfig(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.SpeculativeLoadingParameters
AndroidX.WebKit.SpeculativeLoadingParameters.AdditionalHeaders.get -> System.Collections.Generic.IDictionary<string!, string!>?
AndroidX.WebKit.SpeculativeLoadingParameters.Builder
AndroidX.WebKit.SpeculativeLoadingParameters.Builder.AddAdditionalHeader(string? key, string? value) -> AndroidX.WebKit.SpeculativeLoadingParameters.Builder?
AndroidX.WebKit.SpeculativeLoadingParameters.Builder.AddAdditionalHeaders(System.Collections.Generic.IDictionary<string!, string!>? additionalHeaders) -> AndroidX.WebKit.SpeculativeLoadingParameters.Builder?
AndroidX.WebKit.SpeculativeLoadingParameters.Builder.Build() -> AndroidX.WebKit.SpeculativeLoadingParameters?
AndroidX.WebKit.SpeculativeLoadingParameters.Builder.Builder() -> void
AndroidX.WebKit.SpeculativeLoadingParameters.Builder.SetExpectedNoVarySearchData(AndroidX.WebKit.NoVarySearchHeader? expectedNoVarySearchHeader) -> AndroidX.WebKit.SpeculativeLoadingParameters.Builder?
AndroidX.WebKit.SpeculativeLoadingParameters.Builder.SetJavaScriptEnabled(bool javaScriptEnabled) -> AndroidX.WebKit.SpeculativeLoadingParameters.Builder?
AndroidX.WebKit.SpeculativeLoadingParameters.ExpectedNoVarySearchData.get -> AndroidX.WebKit.NoVarySearchHeader?
AndroidX.WebKit.SpeculativeLoadingParameters.IsJavaScriptEnabled.get -> bool
AndroidX.WebKit.TracingConfig
AndroidX.WebKit.TracingConfig.Builder
AndroidX.WebKit.TracingConfig.Builder.Builder() -> void
AndroidX.WebKit.TracingConfig.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.TracingConfig.IPredefinedCategories
AndroidX.WebKit.TracingConfig.ITracingMode
AndroidX.WebKit.TracingConfig.TracingConfig(int predefinedCategories, System.Collections.Generic.IList<string!>? customIncludedCategories, int tracingMode) -> void
AndroidX.WebKit.TracingConfig.TracingConfig(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.TracingController
AndroidX.WebKit.TracingController.TracingController() -> void
AndroidX.WebKit.TracingController.TracingController(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.URLUtilCompat
AndroidX.WebKit.UserAgentMetadata
AndroidX.WebKit.UserAgentMetadata.Architecture.get -> string?
AndroidX.WebKit.UserAgentMetadata.Bitness.get -> int
AndroidX.WebKit.UserAgentMetadata.BrandVersion
AndroidX.WebKit.UserAgentMetadata.BrandVersion.Brand.get -> string?
AndroidX.WebKit.UserAgentMetadata.BrandVersion.Builder
AndroidX.WebKit.UserAgentMetadata.BrandVersion.Builder.Build() -> AndroidX.WebKit.UserAgentMetadata.BrandVersion?
AndroidX.WebKit.UserAgentMetadata.BrandVersion.Builder.Builder() -> void
AndroidX.WebKit.UserAgentMetadata.BrandVersion.Builder.Builder(AndroidX.WebKit.UserAgentMetadata.BrandVersion? brandVersion) -> void
AndroidX.WebKit.UserAgentMetadata.BrandVersion.Builder.SetBrand(string? brand) -> AndroidX.WebKit.UserAgentMetadata.BrandVersion.Builder?
AndroidX.WebKit.UserAgentMetadata.BrandVersion.Builder.SetFullVersion(string? fullVersion) -> AndroidX.WebKit.UserAgentMetadata.BrandVersion.Builder?
AndroidX.WebKit.UserAgentMetadata.BrandVersion.Builder.SetMajorVersion(string? majorVersion) -> AndroidX.WebKit.UserAgentMetadata.BrandVersion.Builder?
AndroidX.WebKit.UserAgentMetadata.BrandVersion.FullVersion.get -> string?
AndroidX.WebKit.UserAgentMetadata.BrandVersion.MajorVersion.get -> string?
AndroidX.WebKit.UserAgentMetadata.BrandVersionList.get -> System.Collections.Generic.IList<AndroidX.WebKit.UserAgentMetadata.BrandVersion!>?
AndroidX.WebKit.UserAgentMetadata.Builder
AndroidX.WebKit.UserAgentMetadata.Builder.Build() -> AndroidX.WebKit.UserAgentMetadata?
AndroidX.WebKit.UserAgentMetadata.Builder.Builder() -> void
AndroidX.WebKit.UserAgentMetadata.Builder.Builder(AndroidX.WebKit.UserAgentMetadata? uaMetadata) -> void
AndroidX.WebKit.UserAgentMetadata.Builder.SetArchitecture(string? architecture) -> AndroidX.WebKit.UserAgentMetadata.Builder?
AndroidX.WebKit.UserAgentMetadata.Builder.SetBitness(int bitness) -> AndroidX.WebKit.UserAgentMetadata.Builder?
AndroidX.WebKit.UserAgentMetadata.Builder.SetBrandVersionList(System.Collections.Generic.IList<AndroidX.WebKit.UserAgentMetadata.BrandVersion!>? brandVersions) -> AndroidX.WebKit.UserAgentMetadata.Builder?
AndroidX.WebKit.UserAgentMetadata.Builder.SetFullVersion(string? fullVersion) -> AndroidX.WebKit.UserAgentMetadata.Builder?
AndroidX.WebKit.UserAgentMetadata.Builder.SetMobile(bool mobile) -> AndroidX.WebKit.UserAgentMetadata.Builder?
AndroidX.WebKit.UserAgentMetadata.Builder.SetModel(string? model) -> AndroidX.WebKit.UserAgentMetadata.Builder?
AndroidX.WebKit.UserAgentMetadata.Builder.SetPlatform(string? platform) -> AndroidX.WebKit.UserAgentMetadata.Builder?
AndroidX.WebKit.UserAgentMetadata.Builder.SetPlatformVersion(string? platformVersion) -> AndroidX.WebKit.UserAgentMetadata.Builder?
AndroidX.WebKit.UserAgentMetadata.Builder.SetWow64(bool wow64) -> AndroidX.WebKit.UserAgentMetadata.Builder?
AndroidX.WebKit.UserAgentMetadata.FullVersion.get -> string?
AndroidX.WebKit.UserAgentMetadata.IsMobile.get -> bool
AndroidX.WebKit.UserAgentMetadata.IsWow64.get -> bool
AndroidX.WebKit.UserAgentMetadata.Model.get -> string?
AndroidX.WebKit.UserAgentMetadata.Platform.get -> string?
AndroidX.WebKit.UserAgentMetadata.PlatformVersion.get -> string?
AndroidX.WebKit.WebMessageCompat
AndroidX.WebKit.WebMessageCompat.IType
AndroidX.WebKit.WebMessageCompat.WebMessageCompat(byte[]? arrayBuffer) -> void
AndroidX.WebKit.WebMessageCompat.WebMessageCompat(byte[]? arrayBuffer, AndroidX.WebKit.WebMessagePortCompat![]? ports) -> void
AndroidX.WebKit.WebMessageCompat.WebMessageCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.WebMessageCompat.WebMessageCompat(string? data) -> void
AndroidX.WebKit.WebMessageCompat.WebMessageCompat(string? data, AndroidX.WebKit.WebMessagePortCompat![]? ports) -> void
AndroidX.WebKit.WebMessagePortCompat
AndroidX.WebKit.WebMessagePortCompat.WebMessageCallbackCompat
AndroidX.WebKit.WebMessagePortCompat.WebMessageCallbackCompat.WebMessageCallbackCompat() -> void
AndroidX.WebKit.WebMessagePortCompat.WebMessageCallbackCompat.WebMessageCallbackCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.WebMessagePortCompat.WebMessagePortCompat() -> void
AndroidX.WebKit.WebMessagePortCompat.WebMessagePortCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.WebResourceErrorCompat
AndroidX.WebKit.WebResourceErrorCompat.Description.get -> string?
AndroidX.WebKit.WebResourceErrorCompat.INetErrorCode
AndroidX.WebKit.WebResourceErrorCompat.WebResourceErrorCompat() -> void
AndroidX.WebKit.WebResourceErrorCompat.WebResourceErrorCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.WebResourceRequestCompat
AndroidX.WebKit.WebResourceRequestCompat.WebResourceRequestCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.WebSettingsCompat
AndroidX.WebKit.WebSettingsCompat.IExperimentalBackForwardCache
AndroidX.WebKit.WebSettingsCompat.IExperimentalSpeculativeLoading
AndroidX.WebKit.WebSettingsCompat.IForceDark
AndroidX.WebKit.WebSettingsCompat.IForceDarkStrategy
AndroidX.WebKit.WebSettingsCompat.IMenuItemFlags
AndroidX.WebKit.WebSettingsCompat.WebSettingsCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.WebStorageCompat
AndroidX.WebKit.WebViewAssetLoader
AndroidX.WebKit.WebViewAssetLoader.AssetsPathHandler
AndroidX.WebKit.WebViewAssetLoader.AssetsPathHandler.AssetsPathHandler(Android.Content.Context? context) -> void
AndroidX.WebKit.WebViewAssetLoader.AssetsPathHandler.Handle(string? path) -> Android.Webkit.WebResourceResponse?
AndroidX.WebKit.WebViewAssetLoader.Builder
AndroidX.WebKit.WebViewAssetLoader.Builder.AddPathHandler(string? path, AndroidX.WebKit.WebViewAssetLoader.IPathHandler? handler) -> AndroidX.WebKit.WebViewAssetLoader.Builder?
AndroidX.WebKit.WebViewAssetLoader.Builder.Build() -> AndroidX.WebKit.WebViewAssetLoader?
AndroidX.WebKit.WebViewAssetLoader.Builder.Builder() -> void
AndroidX.WebKit.WebViewAssetLoader.Builder.SetDomain(string? domain) -> AndroidX.WebKit.WebViewAssetLoader.Builder?
AndroidX.WebKit.WebViewAssetLoader.Builder.SetHttpAllowed(bool httpAllowed) -> AndroidX.WebKit.WebViewAssetLoader.Builder?
AndroidX.WebKit.WebViewAssetLoader.IPathHandler
AndroidX.WebKit.WebViewAssetLoader.IPathHandler.Handle(string? p0) -> Android.Webkit.WebResourceResponse?
AndroidX.WebKit.WebViewAssetLoader.InternalStoragePathHandler
AndroidX.WebKit.WebViewAssetLoader.InternalStoragePathHandler.Handle(string? path) -> Android.Webkit.WebResourceResponse?
AndroidX.WebKit.WebViewAssetLoader.InternalStoragePathHandler.InternalStoragePathHandler(Android.Content.Context? context, Java.IO.File? directory) -> void
AndroidX.WebKit.WebViewAssetLoader.ResourcesPathHandler
AndroidX.WebKit.WebViewAssetLoader.ResourcesPathHandler.Handle(string? path) -> Android.Webkit.WebResourceResponse?
AndroidX.WebKit.WebViewAssetLoader.ResourcesPathHandler.ResourcesPathHandler(Android.Content.Context? context) -> void
AndroidX.WebKit.WebViewAssetLoader.ShouldInterceptRequest(Android.Net.Uri? url) -> Android.Webkit.WebResourceResponse?
AndroidX.WebKit.WebViewBuilder
AndroidX.WebKit.WebViewBuilder.Build(Android.Content.Context? context) -> Android.Webkit.WebView?
AndroidX.WebKit.WebViewBuilder.IExperimental
AndroidX.WebKit.WebViewBuilder.SetPolicy(AndroidX.WebKit.Policy? policy) -> AndroidX.WebKit.WebViewBuilder?
AndroidX.WebKit.WebViewBuilder.WebViewBuilder() -> void
AndroidX.WebKit.WebViewBuilderException
AndroidX.WebKit.WebViewBuilderException.WebViewBuilderException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.WebViewClientCompat
AndroidX.WebKit.WebViewClientCompat.GetSupportedFeatures() -> string![]?
AndroidX.WebKit.WebViewClientCompat.ISafeBrowsingThreat
AndroidX.WebKit.WebViewClientCompat.OnReceivedError(Android.Webkit.WebView? view, Android.Webkit.IWebResourceRequest? request, Java.Lang.Reflect.IInvocationHandler? handler) -> void
AndroidX.WebKit.WebViewClientCompat.OnSafeBrowsingHit(Android.Webkit.WebView? view, Android.Webkit.IWebResourceRequest? request, int threatType, Java.Lang.Reflect.IInvocationHandler? handler) -> void
AndroidX.WebKit.WebViewClientCompat.WebViewClientCompat() -> void
AndroidX.WebKit.WebViewClientCompat.WebViewClientCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.WebViewCompat
AndroidX.WebKit.WebViewCompat.IExperimentalAsyncStartUp
AndroidX.WebKit.WebViewCompat.IExperimentalCacheProvider
AndroidX.WebKit.WebViewCompat.IExperimentalSaveState
AndroidX.WebKit.WebViewCompat.IExperimentalUrlPrerender
AndroidX.WebKit.WebViewCompat.IVisualStateCallback
AndroidX.WebKit.WebViewCompat.IVisualStateCallback.OnComplete(long p0) -> void
AndroidX.WebKit.WebViewCompat.IWebMessageListener
AndroidX.WebKit.WebViewCompat.IWebMessageListener.OnPostMessage(Android.Webkit.WebView? p0, AndroidX.WebKit.WebMessageCompat? p1, Android.Net.Uri? p2, bool p3, AndroidX.WebKit.JavaScriptReplyProxy? p4) -> void
AndroidX.WebKit.WebViewCompat.IWebViewStartUpCallback
AndroidX.WebKit.WebViewCompat.IWebViewStartUpCallback.OnSuccess(AndroidX.WebKit.IWebViewStartUpResult? p0) -> void
AndroidX.WebKit.WebViewCompat.WebMessageEventArgs
AndroidX.WebKit.WebViewCompat.WebMessageEventArgs.P0.get -> Android.Webkit.WebView?
AndroidX.WebKit.WebViewCompat.WebMessageEventArgs.P1.get -> AndroidX.WebKit.WebMessageCompat?
AndroidX.WebKit.WebViewCompat.WebMessageEventArgs.P2.get -> Android.Net.Uri?
AndroidX.WebKit.WebViewCompat.WebMessageEventArgs.P3.get -> bool
AndroidX.WebKit.WebViewCompat.WebMessageEventArgs.P4.get -> AndroidX.WebKit.JavaScriptReplyProxy?
AndroidX.WebKit.WebViewCompat.WebMessageEventArgs.WebMessageEventArgs(Android.Webkit.WebView? p0, AndroidX.WebKit.WebMessageCompat? p1, Android.Net.Uri? p2, bool p3, AndroidX.WebKit.JavaScriptReplyProxy? p4) -> void
AndroidX.WebKit.WebViewCompat.WebViewCompat(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.WebViewFeature
AndroidX.WebKit.WebViewFeature.IWebViewStartupFeature
AndroidX.WebKit.WebViewFeature.IWebViewSupportFeature
AndroidX.WebKit.WebViewFeature.WebViewFeature(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig
AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig.Builder
AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig.Builder.AddOverrideRule(string? originPattern, int permission) -> AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig.Builder?
AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig.Builder.Build() -> AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig?
AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig.Builder.Builder(int defaultStatus) -> void
AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig.Builder.SetOverrideRules(System.Collections.Generic.IDictionary<string!, Java.Lang.Integer!>? overrideRules) -> AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig.Builder?
AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig.WebViewMediaIntegrityApiStatusConfig(AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig.Builder? builder) -> void
AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig.WebViewMediaIntegrityApiStatusConfig(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.WebViewRenderProcess
AndroidX.WebKit.WebViewRenderProcess.WebViewRenderProcess() -> void
AndroidX.WebKit.WebViewRenderProcess.WebViewRenderProcess(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.WebViewRenderProcessClient
AndroidX.WebKit.WebViewRenderProcessClient.WebViewRenderProcessClient() -> void
AndroidX.WebKit.WebViewRenderProcessClient.WebViewRenderProcessClient(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.WebKit.WebViewStartUpConfig
AndroidX.WebKit.WebViewStartUpConfig.BackgroundExecutor.get -> Java.Util.Concurrent.IExecutor?
AndroidX.WebKit.WebViewStartUpConfig.Builder
AndroidX.WebKit.WebViewStartUpConfig.Builder.Build() -> AndroidX.WebKit.WebViewStartUpConfig?
AndroidX.WebKit.WebViewStartUpConfig.Builder.Builder(Java.Util.Concurrent.IExecutor? executor) -> void
AndroidX.WebKit.WebViewStartUpConfig.Builder.SetShouldRunUiThreadStartUpTasks(bool shouldRunUiThreadStartUpTasks) -> AndroidX.WebKit.WebViewStartUpConfig.Builder?
AndroidX.WebKit.WebViewStartUpConfig.ShouldRunUiThreadStartUpTasks() -> bool
abstract AndroidX.WebKit.Internal.ApiFeature.IsSupportedByFramework.get -> bool
abstract AndroidX.WebKit.Internal.StartupApiFeature.IsSupportedByFramework.get -> bool
abstract AndroidX.WebKit.JavaScriptReplyProxy.PostMessage(byte[]? p0) -> void
abstract AndroidX.WebKit.JavaScriptReplyProxy.PostMessage(string? p0) -> void
abstract AndroidX.WebKit.ProxyController.ClearProxyOverride(Java.Util.Concurrent.IExecutor? p0, Java.Lang.IRunnable? p1) -> void
abstract AndroidX.WebKit.ProxyController.SetProxyOverride(AndroidX.WebKit.ProxyConfig? p0, Java.Util.Concurrent.IExecutor? p1, Java.Lang.IRunnable? p2) -> void
abstract AndroidX.WebKit.SafeBrowsingResponseCompat.BackToSafety(bool p0) -> void
abstract AndroidX.WebKit.SafeBrowsingResponseCompat.Proceed(bool p0) -> void
abstract AndroidX.WebKit.SafeBrowsingResponseCompat.ShowInterstitial(bool p0) -> void
abstract AndroidX.WebKit.ServiceWorkerClientCompat.ShouldInterceptRequest(Android.Webkit.IWebResourceRequest? p0) -> Android.Webkit.WebResourceResponse?
abstract AndroidX.WebKit.ServiceWorkerControllerCompat.ServiceWorkerWebSettings.get -> AndroidX.WebKit.ServiceWorkerWebSettingsCompat?
abstract AndroidX.WebKit.ServiceWorkerControllerCompat.SetServiceWorkerClient(AndroidX.WebKit.ServiceWorkerClientCompat? p0) -> void
abstract AndroidX.WebKit.ServiceWorkerWebSettingsCompat.AllowContentAccess.get -> bool
abstract AndroidX.WebKit.ServiceWorkerWebSettingsCompat.AllowContentAccess.set -> void
abstract AndroidX.WebKit.ServiceWorkerWebSettingsCompat.AllowFileAccess.get -> bool
abstract AndroidX.WebKit.ServiceWorkerWebSettingsCompat.AllowFileAccess.set -> void
abstract AndroidX.WebKit.ServiceWorkerWebSettingsCompat.BlockNetworkLoads.get -> bool
abstract AndroidX.WebKit.ServiceWorkerWebSettingsCompat.BlockNetworkLoads.set -> void
abstract AndroidX.WebKit.ServiceWorkerWebSettingsCompat.CacheMode.get -> int
abstract AndroidX.WebKit.ServiceWorkerWebSettingsCompat.CacheMode.set -> void
abstract AndroidX.WebKit.ServiceWorkerWebSettingsCompat.RequestedWithHeaderOriginAllowList.get -> System.Collections.Generic.ICollection<string!>?
abstract AndroidX.WebKit.ServiceWorkerWebSettingsCompat.RequestedWithHeaderOriginAllowList.set -> void
abstract AndroidX.WebKit.TracingController.IsTracing.get -> bool
abstract AndroidX.WebKit.TracingController.Start(AndroidX.WebKit.TracingConfig? p0) -> void
abstract AndroidX.WebKit.TracingController.Stop(System.IO.Stream? p0, Java.Util.Concurrent.IExecutor? p1) -> bool
abstract AndroidX.WebKit.WebMessagePortCompat.Close() -> void
abstract AndroidX.WebKit.WebMessagePortCompat.FrameworkPort.get -> Android.Webkit.WebMessagePort?
abstract AndroidX.WebKit.WebMessagePortCompat.InvocationHandler.get -> Java.Lang.Reflect.IInvocationHandler?
abstract AndroidX.WebKit.WebMessagePortCompat.PostMessage(AndroidX.WebKit.WebMessageCompat? p0) -> void
abstract AndroidX.WebKit.WebMessagePortCompat.SetWebMessageCallback(Android.OS.Handler? p0, AndroidX.WebKit.WebMessagePortCompat.WebMessageCallbackCompat? p1) -> void
abstract AndroidX.WebKit.WebMessagePortCompat.SetWebMessageCallback(AndroidX.WebKit.WebMessagePortCompat.WebMessageCallbackCompat? p0) -> void
abstract AndroidX.WebKit.WebResourceErrorCompat.DescriptionFormatted.get -> Java.Lang.ICharSequence?
abstract AndroidX.WebKit.WebResourceErrorCompat.ErrorCode.get -> int
abstract AndroidX.WebKit.WebViewRenderProcess.Terminate() -> bool
abstract AndroidX.WebKit.WebViewRenderProcessClient.OnRenderProcessResponsive(Android.Webkit.WebView? p0, AndroidX.WebKit.WebViewRenderProcess? p1) -> void
abstract AndroidX.WebKit.WebViewRenderProcessClient.OnRenderProcessUnresponsive(Android.Webkit.WebView? p0, AndroidX.WebKit.WebViewRenderProcess? p1) -> void
const AndroidX.WebKit.ChromiumLibBoundary.PrefetchOperationCallbackBoundaryInterfacePrefetchExceptionTypeBoundaryInterface.Duplicate = 2 -> int
const AndroidX.WebKit.ChromiumLibBoundary.PrefetchOperationCallbackBoundaryInterfacePrefetchExceptionTypeBoundaryInterface.Generic = 0 -> int
const AndroidX.WebKit.ChromiumLibBoundary.PrefetchOperationCallbackBoundaryInterfacePrefetchExceptionTypeBoundaryInterface.Network = 1 -> int
const AndroidX.WebKit.ChromiumLibBoundary.ProcessGlobalConfigConstants.CacheDirectoryBasePath = "CACHE_DIRECTORY_BASE_PATH" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.ProcessGlobalConfigConstants.ConfigurePartitionedCookies = "CONFIGURE_PARTITIONED_COOKIES" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.ProcessGlobalConfigConstants.DataDirectoryBasePath = "DATA_DIRECTORY_BASE_PATH" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.ProcessGlobalConfigConstants.DataDirectorySuffix = "DATA_DIRECTORY_SUFFIX" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.AlgorithmicDarkening = "ALGORITHMIC_DARKENING" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.AsyncWebviewStartup = "ASYNC_WEBVIEW_STARTUP" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.AttributionBehavior = "ATTRIBUTION_BEHAVIOR" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.BackForwardCache = "BACK_FORWARD_CACHE" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.CookieIntercept = "COOKIE_INTERCEPT" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.CreateWebMessageChannel = "CREATE_WEB_MESSAGE_CHANNEL" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.DefaultTrafficstatsTagging = "DEFAULT_TRAFFICSTATS_TAGGING" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.DevSuffix = ":dev" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.DisabledActionModeMenuItems = "DISABLED_ACTION_MODE_MENU_ITEMS" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.DocumentStartScript = "DOCUMENT_START_SCRIPT:1" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.EnterpriseAuthenticationAppLinkPolicy = "ENTERPRISE_AUTHENTICATION_APP_LINK_POLICY" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.ForceDark = "FORCE_DARK" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.ForceDarkBehavior = "FORCE_DARK_BEHAVIOR" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.GetCookieInfo = "GET_COOKIE_INFO" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.GetVariationsHeader = "GET_VARIATIONS_HEADER" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.GetWebChromeClient = "GET_WEB_CHROME_CLIENT" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.GetWebViewClient = "GET_WEB_VIEW_CLIENT" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.GetWebViewRenderer = "GET_WEB_VIEW_RENDERER" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.ImageDragDrop = "IMAGE_DRAG_DROP" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.MultiProcessQuery = "MULTI_PROCESS_QUERY" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.MultiProfile = "MULTI_PROFILE" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.MuteAudio = "MUTE_AUDIO" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.OffScreenPreraster = "OFF_SCREEN_PRERASTER" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.PaymentRequest = "PAYMENT_REQUEST" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.PostWebMessage = "POST_WEB_MESSAGE" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.PrefetchWithUrl = "PREFETCH_URL_V4" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.PrerenderWithUrl = "PRERENDER_URL_V2" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.ProviderWeaklyRefWebview = "PROVIDER_WEAKLY_REF_WEBVIEW" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.ProxyOverride = "PROXY_OVERRIDE:3" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.ProxyOverrideReverseBypass = "PROXY_OVERRIDE_REVERSE_BYPASS" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.ReceiveHttpError = "RECEIVE_HTTP_ERROR" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.ReceiveWebResourceError = "RECEIVE_WEB_RESOURCE_ERROR" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.RequestedWithHeaderAllowList = "REQUESTED_WITH_HEADER_ALLOW_LIST" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.RequestedWithHeaderControl = "REQUESTED_WITH_HEADER_CONTROL" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.RestrictSensitiveWebContent = "RESTRICT_SENSITIVE_WEB_CONTENT" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.SafeBrowsingAllowlist = "SAFE_BROWSING_ALLOWLIST" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.SafeBrowsingEnable = "SAFE_BROWSING_ENABLE" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.SafeBrowsingHit = "SAFE_BROWSING_HIT" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.SafeBrowsingPrivacyPolicyUrl = "SAFE_BROWSING_PRIVACY_POLICY_URL" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.SafeBrowsingResponseBackToSafety = "SAFE_BROWSING_RESPONSE_BACK_TO_SAFETY" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.SafeBrowsingResponseProceed = "SAFE_BROWSING_RESPONSE_PROCEED" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.SafeBrowsingResponseShowInterstitial = "SAFE_BROWSING_RESPONSE_SHOW_INTERSTITIAL" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.SafeBrowsingWhitelist = "SAFE_BROWSING_WHITELIST" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.SaveState = "SAVE_STATE" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.ServiceWorkerBasicUsage = "SERVICE_WORKER_BASIC_USAGE" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.ServiceWorkerBlockNetworkLoads = "SERVICE_WORKER_BLOCK_NETWORK_LOADS" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.ServiceWorkerCacheMode = "SERVICE_WORKER_CACHE_MODE" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.ServiceWorkerContentAccess = "SERVICE_WORKER_CONTENT_ACCESS" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.ServiceWorkerFileAccess = "SERVICE_WORKER_FILE_ACCESS" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.ServiceWorkerShouldInterceptRequest = "SERVICE_WORKER_SHOULD_INTERCEPT_REQUEST" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.ShouldOverrideWithRedirects = "SHOULD_OVERRIDE_WITH_REDIRECTS" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.SpeculativeLoading = "SPECULATIVE_LOADING" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.SpeculativeLoadingConfig = "SPECULATIVE_LOADING_CONFIG_V2" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.StartSafeBrowsing = "START_SAFE_BROWSING" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.SuppressErrorPage = "SUPPRESS_ERROR_PAGE" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.TracingControllerBasicUsage = "TRACING_CONTROLLER_BASIC_USAGE" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.UserAgentMetadata = "USER_AGENT_METADATA" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.VisualStateCallback = "VISUAL_STATE_CALLBACK" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.WebAuthentication = "WEB_AUTHENTICATION" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.WebMessageArrayBuffer = "WEB_MESSAGE_ARRAY_BUFFER" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.WebMessageCallbackOnMessage = "WEB_MESSAGE_CALLBACK_ON_MESSAGE" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.WebMessageGetMessagePayload = "WEB_MESSAGE_GET_MESSAGE_PAYLOAD" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.WebMessageListener = "WEB_MESSAGE_LISTENER" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.WebMessagePortClose = "WEB_MESSAGE_PORT_CLOSE" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.WebMessagePortPostMessage = "WEB_MESSAGE_PORT_POST_MESSAGE" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.WebMessagePortSetMessageCallback = "WEB_MESSAGE_PORT_SET_MESSAGE_CALLBACK" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.WebResourceErrorGetCode = "WEB_RESOURCE_ERROR_GET_CODE" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.WebResourceErrorGetDescription = "WEB_RESOURCE_ERROR_GET_DESCRIPTION" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.WebResourceRequestIsRedirect = "WEB_RESOURCE_REQUEST_IS_REDIRECT" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.WebStorageDeleteBrowsingData = "WEB_STORAGE_DELETE_BROWSING_DATA" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.WebViewNavigationClientBasicUsage = "WEB_VIEW_NAVIGATION_CLIENT_BASIC_USAGE" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.WebViewRendererClientBasicUsage = "WEB_VIEW_RENDERER_CLIENT_BASIC_USAGE" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.WebViewRendererTerminate = "WEB_VIEW_RENDERER_TERMINATE" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.WebviewBuilder = "WEBVIEW_BUILDER" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.Util.Features.WebviewMediaIntegrityApiStatus = "WEBVIEW_INTEGRITY_API_STATUS" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.WebMessagePayloadBoundaryInterfaceWebMessagePayloadType.TypeArrayBuffer = 1 -> int
const AndroidX.WebKit.ChromiumLibBoundary.WebMessagePayloadBoundaryInterfaceWebMessagePayloadType.TypeString = 0 -> int
const AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceAttributionBehavior.AppSourceAndAppTrigger = 3 -> int
const AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceAttributionBehavior.AppSourceAndWebTrigger = 1 -> int
const AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceAttributionBehavior.Disabled = 0 -> int
const AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceAttributionBehavior.WebSourceAndWebTrigger = 2 -> int
const AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceForceDarkBehavior.ForceDarkOnly = 0 -> int
const AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceForceDarkBehavior.MediaQueryOnly = 1 -> int
const AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceForceDarkBehavior.PreferMediaQueryOverForceDark = 2 -> int
const AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceSpeculativeLoadingStatus.Disabled = 0 -> int
const AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceSpeculativeLoadingStatus.PrerenderEnabled = 1 -> int
const AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceWebViewMediaIntegrityApiStatus.Disabled = 0 -> int
const AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceWebViewMediaIntegrityApiStatus.Enabled = 2 -> int
const AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceWebViewMediaIntegrityApiStatus.EnabledWithoutAppIdentity = 1 -> int
const AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceWebauthnSupport.App = 1 -> int
const AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceWebauthnSupport.Browser = 2 -> int
const AndroidX.WebKit.ChromiumLibBoundary.WebSettingsBoundaryInterfaceWebauthnSupport.None = 0 -> int
const AndroidX.WebKit.ChromiumLibBoundary.WebViewBuilderBoundaryInterfaceBaseline.Default = 0 -> int
const AndroidX.WebKit.ChromiumLibBoundary.WebViewBuilderBoundaryInterfaceConfigField.Baseline = 0 -> int
const AndroidX.WebKit.ChromiumLibBoundary.WebViewBuilderBoundaryInterfaceConfigField.JavascriptInterface = 1 -> int
const AndroidX.WebKit.ChromiumLibBoundary.WebViewProviderFactoryBoundaryInterface.MultiCookieHeaderName = "\0Set-Cookie-Multivalue\0" -> string!
const AndroidX.WebKit.ChromiumLibBoundary.WebViewProviderFactoryBoundaryInterface.MultiCookieValueSeparator = "\0" -> string!
const AndroidX.WebKit.Internal.AssetHelper.DefaultMimeType = "text/plain" -> string!
const AndroidX.WebKit.Internal.ProfileImpl.InterfaceConsts.DefaultProfileName = "Default" -> string!
const AndroidX.WebKit.Internal.StartupApiFeature.MetadataHolderServiceName = "org.chromium.android_webview.services.StartupFeatureMetadataHolder" -> string!
const AndroidX.WebKit.Internal.StartupFeatures.StartupFeatureConfigurePartitionedCookies = "STARTUP_FEATURE_CONFIGURE_PARTITIONED_COOKIES" -> string!
const AndroidX.WebKit.Internal.StartupFeatures.StartupFeatureSetDataDirectorySuffix = "STARTUP_FEATURE_SET_DATA_DIRECTORY_SUFFIX" -> string!
const AndroidX.WebKit.Internal.StartupFeatures.StartupFeatureSetDirectoryBasePath = "STARTUP_FEATURE_SET_DIRECTORY_BASE_PATH" -> string!
const AndroidX.WebKit.PrefetchNetworkException.NoHttpResponseStatusCode = 0 -> int
const AndroidX.WebKit.Profile.DefaultProfileName = "Default" -> string!
const AndroidX.WebKit.ProxyConfig.MatchAllSchemes = "*" -> string!
const AndroidX.WebKit.ProxyConfig.MatchHttp = "http" -> string!
const AndroidX.WebKit.ProxyConfig.MatchHttps = "https" -> string!
const AndroidX.WebKit.TracingConfig.CategoriesAll = 1 -> int
const AndroidX.WebKit.TracingConfig.CategoriesAndroidWebview = 2 -> int
const AndroidX.WebKit.TracingConfig.CategoriesFrameViewer = 64 -> int
const AndroidX.WebKit.TracingConfig.CategoriesInputLatency = 8 -> int
const AndroidX.WebKit.TracingConfig.CategoriesJavascriptAndRendering = 32 -> int
const AndroidX.WebKit.TracingConfig.CategoriesNone = 0 -> int
const AndroidX.WebKit.TracingConfig.CategoriesRendering = 16 -> int
const AndroidX.WebKit.TracingConfig.CategoriesWebDeveloper = 4 -> int
const AndroidX.WebKit.TracingConfig.RecordContinuously = 1 -> int
const AndroidX.WebKit.TracingConfig.RecordUntilFull = 0 -> int
const AndroidX.WebKit.UserAgentMetadata.BitnessDefault = 0 -> int
const AndroidX.WebKit.WebMessageCompat.TypeArrayBuffer = 1 -> int
const AndroidX.WebKit.WebMessageCompat.TypeString = 0 -> int
const AndroidX.WebKit.WebSettingsCompat.AttributionBehaviorAppSourceAndAppTrigger = 3 -> int
const AndroidX.WebKit.WebSettingsCompat.AttributionBehaviorAppSourceAndWebTrigger = 1 -> int
const AndroidX.WebKit.WebSettingsCompat.AttributionBehaviorDisabled = 0 -> int
const AndroidX.WebKit.WebSettingsCompat.AttributionBehaviorWebSourceAndWebTrigger = 2 -> int
const AndroidX.WebKit.WebSettingsCompat.DarkStrategyPreferWebThemeOverUserAgentDarkening = 2 -> int
const AndroidX.WebKit.WebSettingsCompat.DarkStrategyUserAgentDarkeningOnly = 0 -> int
const AndroidX.WebKit.WebSettingsCompat.DarkStrategyWebThemeDarkeningOnly = 1 -> int
const AndroidX.WebKit.WebSettingsCompat.ForceDarkAuto = 1 -> int
const AndroidX.WebKit.WebSettingsCompat.ForceDarkOff = 0 -> int
const AndroidX.WebKit.WebSettingsCompat.ForceDarkOn = 2 -> int
const AndroidX.WebKit.WebSettingsCompat.SpeculativeLoadingDisabled = 0 -> int
const AndroidX.WebKit.WebSettingsCompat.SpeculativeLoadingPrerenderEnabled = 1 -> int
const AndroidX.WebKit.WebSettingsCompat.WebAuthenticationSupportForApp = 1 -> int
const AndroidX.WebKit.WebSettingsCompat.WebAuthenticationSupportForBrowser = 2 -> int
const AndroidX.WebKit.WebSettingsCompat.WebAuthenticationSupportNone = 0 -> int
const AndroidX.WebKit.WebViewAssetLoader.DefaultDomain = "appassets.androidplatform.net" -> string!
const AndroidX.WebKit.WebViewFeature.AlgorithmicDarkening = "ALGORITHMIC_DARKENING" -> string!
const AndroidX.WebKit.WebViewFeature.AttributionRegistrationBehavior = "ATTRIBUTION_REGISTRATION_BEHAVIOR" -> string!
const AndroidX.WebKit.WebViewFeature.BackForwardCache = "BACK_FORWARD_CACHE" -> string!
const AndroidX.WebKit.WebViewFeature.CacheProvider = "CACHE_PROVIDER" -> string!
const AndroidX.WebKit.WebViewFeature.CreateWebMessageChannel = "CREATE_WEB_MESSAGE_CHANNEL" -> string!
const AndroidX.WebKit.WebViewFeature.DefaultTrafficstatsTagging = "DEFAULT_TRAFFICSTATS_TAGGING" -> string!
const AndroidX.WebKit.WebViewFeature.DeleteBrowsingData = "DELETE_BROWSING_DATA" -> string!
const AndroidX.WebKit.WebViewFeature.DisabledActionModeMenuItems = "DISABLED_ACTION_MODE_MENU_ITEMS" -> string!
const AndroidX.WebKit.WebViewFeature.DocumentStartScript = "DOCUMENT_START_SCRIPT" -> string!
const AndroidX.WebKit.WebViewFeature.EnterpriseAuthenticationAppLinkPolicy = "ENTERPRISE_AUTHENTICATION_APP_LINK_POLICY" -> string!
const AndroidX.WebKit.WebViewFeature.ForceDark = "FORCE_DARK" -> string!
const AndroidX.WebKit.WebViewFeature.ForceDarkStrategy = "FORCE_DARK_STRATEGY" -> string!
const AndroidX.WebKit.WebViewFeature.GetCookieInfo = "GET_COOKIE_INFO" -> string!
const AndroidX.WebKit.WebViewFeature.GetVariationsHeader = "GET_VARIATIONS_HEADER" -> string!
const AndroidX.WebKit.WebViewFeature.GetWebChromeClient = "GET_WEB_CHROME_CLIENT" -> string!
const AndroidX.WebKit.WebViewFeature.GetWebViewClient = "GET_WEB_VIEW_CLIENT" -> string!
const AndroidX.WebKit.WebViewFeature.GetWebViewRenderer = "GET_WEB_VIEW_RENDERER" -> string!
const AndroidX.WebKit.WebViewFeature.MultiProcess = "MULTI_PROCESS" -> string!
const AndroidX.WebKit.WebViewFeature.MultiProfile = "MULTI_PROFILE" -> string!
const AndroidX.WebKit.WebViewFeature.MuteAudio = "MUTE_AUDIO" -> string!
const AndroidX.WebKit.WebViewFeature.NavigationCallbackBasic = "WEB_VIEW_NAVIGATION_CLIENT_BASIC_USAGE" -> string!
const AndroidX.WebKit.WebViewFeature.OffScreenPreraster = "OFF_SCREEN_PRERASTER" -> string!
const AndroidX.WebKit.WebViewFeature.PaymentRequest = "PAYMENT_REQUEST" -> string!
const AndroidX.WebKit.WebViewFeature.PostWebMessage = "POST_WEB_MESSAGE" -> string!
const AndroidX.WebKit.WebViewFeature.PrerenderWithUrl = "PRERENDER_URL_V2" -> string!
const AndroidX.WebKit.WebViewFeature.ProfileUrlPrefetch = "PREFETCH_URL_V4" -> string!
const AndroidX.WebKit.WebViewFeature.ProxyOverride = "PROXY_OVERRIDE" -> string!
const AndroidX.WebKit.WebViewFeature.ProxyOverrideReverseBypass = "PROXY_OVERRIDE_REVERSE_BYPASS" -> string!
const AndroidX.WebKit.WebViewFeature.ReceiveHttpError = "RECEIVE_HTTP_ERROR" -> string!
const AndroidX.WebKit.WebViewFeature.ReceiveWebResourceError = "RECEIVE_WEB_RESOURCE_ERROR" -> string!
const AndroidX.WebKit.WebViewFeature.RequestedWithHeaderAllowList = "REQUESTED_WITH_HEADER_ALLOW_LIST" -> string!
const AndroidX.WebKit.WebViewFeature.SafeBrowsingAllowlist = "SAFE_BROWSING_ALLOWLIST" -> string!
const AndroidX.WebKit.WebViewFeature.SafeBrowsingEnable = "SAFE_BROWSING_ENABLE" -> string!
const AndroidX.WebKit.WebViewFeature.SafeBrowsingHit = "SAFE_BROWSING_HIT" -> string!
const AndroidX.WebKit.WebViewFeature.SafeBrowsingPrivacyPolicyUrl = "SAFE_BROWSING_PRIVACY_POLICY_URL" -> string!
const AndroidX.WebKit.WebViewFeature.SafeBrowsingResponseBackToSafety = "SAFE_BROWSING_RESPONSE_BACK_TO_SAFETY" -> string!
const AndroidX.WebKit.WebViewFeature.SafeBrowsingResponseProceed = "SAFE_BROWSING_RESPONSE_PROCEED" -> string!
const AndroidX.WebKit.WebViewFeature.SafeBrowsingResponseShowInterstitial = "SAFE_BROWSING_RESPONSE_SHOW_INTERSTITIAL" -> string!
const AndroidX.WebKit.WebViewFeature.SafeBrowsingWhitelist = "SAFE_BROWSING_WHITELIST" -> string!
const AndroidX.WebKit.WebViewFeature.SaveState = "SAVE_STATE" -> string!
const AndroidX.WebKit.WebViewFeature.ServiceWorkerBasicUsage = "SERVICE_WORKER_BASIC_USAGE" -> string!
const AndroidX.WebKit.WebViewFeature.ServiceWorkerBlockNetworkLoads = "SERVICE_WORKER_BLOCK_NETWORK_LOADS" -> string!
const AndroidX.WebKit.WebViewFeature.ServiceWorkerCacheMode = "SERVICE_WORKER_CACHE_MODE" -> string!
const AndroidX.WebKit.WebViewFeature.ServiceWorkerContentAccess = "SERVICE_WORKER_CONTENT_ACCESS" -> string!
const AndroidX.WebKit.WebViewFeature.ServiceWorkerFileAccess = "SERVICE_WORKER_FILE_ACCESS" -> string!
const AndroidX.WebKit.WebViewFeature.ServiceWorkerShouldInterceptRequest = "SERVICE_WORKER_SHOULD_INTERCEPT_REQUEST" -> string!
const AndroidX.WebKit.WebViewFeature.ShouldOverrideWithRedirects = "SHOULD_OVERRIDE_WITH_REDIRECTS" -> string!
const AndroidX.WebKit.WebViewFeature.SpeculativeLoading = "SPECULATIVE_LOADING_STATUS" -> string!
const AndroidX.WebKit.WebViewFeature.SpeculativeLoadingConfig = "SPECULATIVE_LOADING_CONFIG_V2" -> string!
const AndroidX.WebKit.WebViewFeature.StartSafeBrowsing = "START_SAFE_BROWSING" -> string!
const AndroidX.WebKit.WebViewFeature.StartupFeatureConfigurePartitionedCookies = "STARTUP_FEATURE_CONFIGURE_PARTITIONED_COOKIES" -> string!
const AndroidX.WebKit.WebViewFeature.StartupFeatureSetDataDirectorySuffix = "STARTUP_FEATURE_SET_DATA_DIRECTORY_SUFFIX" -> string!
const AndroidX.WebKit.WebViewFeature.StartupFeatureSetDirectoryBasePaths = "STARTUP_FEATURE_SET_DIRECTORY_BASE_PATHS" -> string!
const AndroidX.WebKit.WebViewFeature.TracingControllerBasicUsage = "TRACING_CONTROLLER_BASIC_USAGE" -> string!
const AndroidX.WebKit.WebViewFeature.UserAgentMetadata = "USER_AGENT_METADATA" -> string!
const AndroidX.WebKit.WebViewFeature.VisualStateCallback = "VISUAL_STATE_CALLBACK" -> string!
const AndroidX.WebKit.WebViewFeature.WebAuthentication = "WEB_AUTHENTICATION" -> string!
const AndroidX.WebKit.WebViewFeature.WebMessageArrayBuffer = "WEB_MESSAGE_ARRAY_BUFFER" -> string!
const AndroidX.WebKit.WebViewFeature.WebMessageCallbackOnMessage = "WEB_MESSAGE_CALLBACK_ON_MESSAGE" -> string!
const AndroidX.WebKit.WebViewFeature.WebMessageListener = "WEB_MESSAGE_LISTENER" -> string!
const AndroidX.WebKit.WebViewFeature.WebMessagePortClose = "WEB_MESSAGE_PORT_CLOSE" -> string!
const AndroidX.WebKit.WebViewFeature.WebMessagePortPostMessage = "WEB_MESSAGE_PORT_POST_MESSAGE" -> string!
const AndroidX.WebKit.WebViewFeature.WebMessagePortSetMessageCallback = "WEB_MESSAGE_PORT_SET_MESSAGE_CALLBACK" -> string!
const AndroidX.WebKit.WebViewFeature.WebResourceErrorGetCode = "WEB_RESOURCE_ERROR_GET_CODE" -> string!
const AndroidX.WebKit.WebViewFeature.WebResourceErrorGetDescription = "WEB_RESOURCE_ERROR_GET_DESCRIPTION" -> string!
const AndroidX.WebKit.WebViewFeature.WebResourceRequestIsRedirect = "WEB_RESOURCE_REQUEST_IS_REDIRECT" -> string!
const AndroidX.WebKit.WebViewFeature.WebViewRendererClientBasicUsage = "WEB_VIEW_RENDERER_CLIENT_BASIC_USAGE" -> string!
const AndroidX.WebKit.WebViewFeature.WebViewRendererTerminate = "WEB_VIEW_RENDERER_TERMINATE" -> string!
const AndroidX.WebKit.WebViewFeature.WebviewBuilder = "WEBVIEW_BUILDER" -> string!
const AndroidX.WebKit.WebViewFeature.WebviewMediaIntegrityApiStatus = "WEBVIEW_MEDIA_INTEGRITY_API_STATUS" -> string!
const AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig.WebviewMediaIntegrityApiDisabled = 0 -> int
const AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig.WebviewMediaIntegrityApiEnabled = 2 -> int
const AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig.WebviewMediaIntegrityApiEnabledWithoutAppIdentity = 1 -> int
override AndroidX.WebKit.ChromiumLibBoundary.ProcessGlobalConfigConstants.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.ChromiumLibBoundary.Util.BoundaryInterfaceReflectionUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.ChromiumLibBoundary.Util.BoundaryInterfaceReflectionUtil.ThresholdClass.get -> nint
override AndroidX.WebKit.ChromiumLibBoundary.Util.BoundaryInterfaceReflectionUtil.ThresholdType.get -> System.Type!
override AndroidX.WebKit.ChromiumLibBoundary.Util.Features.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.ChromiumLibBoundary.Util.Features.ThresholdClass.get -> nint
override AndroidX.WebKit.ChromiumLibBoundary.Util.Features.ThresholdType.get -> System.Type!
override AndroidX.WebKit.ChromiumLibBoundary.WebViewBuilderBoundaryInterfaceConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.ChromiumLibBoundary.WebViewBuilderBoundaryInterfaceConfig.ThresholdClass.get -> nint
override AndroidX.WebKit.ChromiumLibBoundary.WebViewBuilderBoundaryInterfaceConfig.ThresholdType.get -> System.Type!
override AndroidX.WebKit.CookieManagerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.CookieManagerCompat.ThresholdClass.get -> nint
override AndroidX.WebKit.CookieManagerCompat.ThresholdType.get -> System.Type!
override AndroidX.WebKit.DropDataContentProvider.Delete(Android.Net.Uri? uri, string? selection, string![]? selectionArgs) -> int
override AndroidX.WebKit.DropDataContentProvider.GetType(Android.Net.Uri? uri) -> string?
override AndroidX.WebKit.DropDataContentProvider.Insert(Android.Net.Uri? uri, Android.Content.ContentValues? contentValues) -> Android.Net.Uri?
override AndroidX.WebKit.DropDataContentProvider.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.DropDataContentProvider.OnCreate() -> bool
override AndroidX.WebKit.DropDataContentProvider.Query(Android.Net.Uri? uri, string![]? projection, string? selection, string![]? selectionArgs, string? sortOrder) -> Android.Database.ICursor?
override AndroidX.WebKit.DropDataContentProvider.Update(Android.Net.Uri? uri, Android.Content.ContentValues? contentValues, string? s, string![]? strings) -> int
override AndroidX.WebKit.Internal.ApiFeature.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ApiFeature.M.IsSupportedByFramework.get -> bool
override AndroidX.WebKit.Internal.ApiFeature.M.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ApiFeature.M.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ApiFeature.M.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ApiFeature.N.IsSupportedByFramework.get -> bool
override AndroidX.WebKit.Internal.ApiFeature.N.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ApiFeature.N.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ApiFeature.N.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ApiFeature.NoFramework.IsSupportedByFramework.get -> bool
override AndroidX.WebKit.Internal.ApiFeature.NoFramework.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ApiFeature.NoFramework.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ApiFeature.NoFramework.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ApiFeature.O.IsSupportedByFramework.get -> bool
override AndroidX.WebKit.Internal.ApiFeature.O.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ApiFeature.O.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ApiFeature.O.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ApiFeature.O_MR1.IsSupportedByFramework.get -> bool
override AndroidX.WebKit.Internal.ApiFeature.O_MR1.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ApiFeature.O_MR1.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ApiFeature.O_MR1.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ApiFeature.P.IsSupportedByFramework.get -> bool
override AndroidX.WebKit.Internal.ApiFeature.P.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ApiFeature.P.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ApiFeature.P.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ApiFeature.Q.IsSupportedByFramework.get -> bool
override AndroidX.WebKit.Internal.ApiFeature.Q.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ApiFeature.Q.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ApiFeature.Q.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ApiFeature.T.IsSupportedByFramework.get -> bool
override AndroidX.WebKit.Internal.ApiFeature.T.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ApiFeature.T.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ApiFeature.T.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ApiFeature.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ApiFeature.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ApiHelperForM.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ApiHelperForM.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ApiHelperForM.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ApiHelperForN.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ApiHelperForN.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ApiHelperForN.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ApiHelperForO.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ApiHelperForO.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ApiHelperForO.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ApiHelperForOMR1.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ApiHelperForOMR1.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ApiHelperForOMR1.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ApiHelperForP.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ApiHelperForP.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ApiHelperForP.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ApiHelperForQ.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ApiHelperForQ.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ApiHelperForQ.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ApiHelperForTiramisu.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ApiHelperForTiramisu.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ApiHelperForTiramisu.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.AssetHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.AssetHelper.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.AssetHelper.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.CookieManagerAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.CookieManagerAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.CookieManagerAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.FrameworkServiceWorkerClient.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.FrameworkServiceWorkerClient.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.FrameworkServiceWorkerClient.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.IncompatibleApkWebViewProviderFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.IncompatibleApkWebViewProviderFactory.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.IncompatibleApkWebViewProviderFactory.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.JavaScriptReplyProxyImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.JavaScriptReplyProxyImpl.PostMessage(byte[]? arrayBuffer) -> void
override AndroidX.WebKit.Internal.JavaScriptReplyProxyImpl.PostMessage(string? message) -> void
override AndroidX.WebKit.Internal.JavaScriptReplyProxyImpl.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.JavaScriptReplyProxyImpl.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.NavigationAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.NavigationAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.NavigationAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.NoVarySearchHeaderAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.NoVarySearchHeaderAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.NoVarySearchHeaderAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.PageImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.PageImpl.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.PageImpl.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.PrefetchOperationCallbackAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.PrefetchOperationCallbackAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.PrefetchOperationCallbackAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ProfileImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ProfileImpl.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ProfileImpl.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ProfileStoreImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ProfileStoreImpl.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ProfileStoreImpl.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ProxyControllerImpl.ClearProxyOverride(Java.Util.Concurrent.IExecutor? executor, Java.Lang.IRunnable? listener) -> void
override AndroidX.WebKit.Internal.ProxyControllerImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ProxyControllerImpl.SetProxyOverride(AndroidX.WebKit.ProxyConfig? proxyConfig, Java.Util.Concurrent.IExecutor? executor, Java.Lang.IRunnable? listener) -> void
override AndroidX.WebKit.Internal.ProxyControllerImpl.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ProxyControllerImpl.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.SafeBrowsingResponseImpl.BackToSafety(bool report) -> void
override AndroidX.WebKit.Internal.SafeBrowsingResponseImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.SafeBrowsingResponseImpl.Proceed(bool report) -> void
override AndroidX.WebKit.Internal.SafeBrowsingResponseImpl.ShowInterstitial(bool allowReporting) -> void
override AndroidX.WebKit.Internal.SafeBrowsingResponseImpl.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.SafeBrowsingResponseImpl.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ScriptHandlerImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ScriptHandlerImpl.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ScriptHandlerImpl.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ServiceWorkerClientAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ServiceWorkerClientAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ServiceWorkerClientAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ServiceWorkerControllerImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ServiceWorkerControllerImpl.ServiceWorkerWebSettings.get -> AndroidX.WebKit.ServiceWorkerWebSettingsCompat?
override AndroidX.WebKit.Internal.ServiceWorkerControllerImpl.SetServiceWorkerClient(AndroidX.WebKit.ServiceWorkerClientCompat? client) -> void
override AndroidX.WebKit.Internal.ServiceWorkerControllerImpl.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ServiceWorkerControllerImpl.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.ServiceWorkerWebSettingsImpl.AllowContentAccess.get -> bool
override AndroidX.WebKit.Internal.ServiceWorkerWebSettingsImpl.AllowContentAccess.set -> void
override AndroidX.WebKit.Internal.ServiceWorkerWebSettingsImpl.AllowFileAccess.get -> bool
override AndroidX.WebKit.Internal.ServiceWorkerWebSettingsImpl.AllowFileAccess.set -> void
override AndroidX.WebKit.Internal.ServiceWorkerWebSettingsImpl.BlockNetworkLoads.get -> bool
override AndroidX.WebKit.Internal.ServiceWorkerWebSettingsImpl.BlockNetworkLoads.set -> void
override AndroidX.WebKit.Internal.ServiceWorkerWebSettingsImpl.CacheMode.get -> int
override AndroidX.WebKit.Internal.ServiceWorkerWebSettingsImpl.CacheMode.set -> void
override AndroidX.WebKit.Internal.ServiceWorkerWebSettingsImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.ServiceWorkerWebSettingsImpl.RequestedWithHeaderOriginAllowList.get -> System.Collections.Generic.ICollection<string!>?
override AndroidX.WebKit.Internal.ServiceWorkerWebSettingsImpl.RequestedWithHeaderOriginAllowList.set -> void
override AndroidX.WebKit.Internal.ServiceWorkerWebSettingsImpl.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.ServiceWorkerWebSettingsImpl.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.SpeculativeLoadingConfigAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.SpeculativeLoadingConfigAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.SpeculativeLoadingConfigAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.SpeculativeLoadingParametersAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.SpeculativeLoadingParametersAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.SpeculativeLoadingParametersAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.StartupApiFeature.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.StartupApiFeature.NoFramework.IsSupportedByFramework.get -> bool
override AndroidX.WebKit.Internal.StartupApiFeature.NoFramework.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.StartupApiFeature.NoFramework.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.StartupApiFeature.NoFramework.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.StartupApiFeature.P.IsSupportedByFramework.get -> bool
override AndroidX.WebKit.Internal.StartupApiFeature.P.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.StartupApiFeature.P.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.StartupApiFeature.P.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.StartupApiFeature.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.StartupApiFeature.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.StartupFeatures.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.StartupFeatures.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.StartupFeatures.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.TracingControllerImpl.IsTracing.get -> bool
override AndroidX.WebKit.Internal.TracingControllerImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.TracingControllerImpl.Start(AndroidX.WebKit.TracingConfig? tracingConfig) -> void
override AndroidX.WebKit.Internal.TracingControllerImpl.Stop(System.IO.Stream? outputStream, Java.Util.Concurrent.IExecutor? executor) -> bool
override AndroidX.WebKit.Internal.TracingControllerImpl.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.TracingControllerImpl.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.UserAgentMetadataInternal.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.UserAgentMetadataInternal.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.UserAgentMetadataInternal.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.VisualStateCallbackAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.VisualStateCallbackAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.VisualStateCallbackAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.WebMessageAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.WebMessageAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.WebMessageAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.WebMessageCallbackAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.WebMessageCallbackAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.WebMessageCallbackAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.WebMessageListenerAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.WebMessageListenerAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.WebMessageListenerAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.WebMessagePayloadAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.WebMessagePayloadAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.WebMessagePayloadAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.WebMessagePortImpl.Close() -> void
override AndroidX.WebKit.Internal.WebMessagePortImpl.FrameworkPort.get -> Android.Webkit.WebMessagePort?
override AndroidX.WebKit.Internal.WebMessagePortImpl.InvocationHandler.get -> Java.Lang.Reflect.IInvocationHandler?
override AndroidX.WebKit.Internal.WebMessagePortImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.WebMessagePortImpl.PostMessage(AndroidX.WebKit.WebMessageCompat? message) -> void
override AndroidX.WebKit.Internal.WebMessagePortImpl.SetWebMessageCallback(Android.OS.Handler? handler, AndroidX.WebKit.WebMessagePortCompat.WebMessageCallbackCompat? callback) -> void
override AndroidX.WebKit.Internal.WebMessagePortImpl.SetWebMessageCallback(AndroidX.WebKit.WebMessagePortCompat.WebMessageCallbackCompat? callback) -> void
override AndroidX.WebKit.Internal.WebMessagePortImpl.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.WebMessagePortImpl.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.WebNavigationClientAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.WebNavigationClientAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.WebNavigationClientAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.WebResourceErrorImpl.DescriptionFormatted.get -> Java.Lang.ICharSequence?
override AndroidX.WebKit.Internal.WebResourceErrorImpl.ErrorCode.get -> int
override AndroidX.WebKit.Internal.WebResourceErrorImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.WebResourceErrorImpl.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.WebResourceErrorImpl.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.WebResourceRequestAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.WebResourceRequestAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.WebResourceRequestAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.WebSettingsAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.WebSettingsAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.WebSettingsAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.WebSettingsNoOpAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.WebSettingsNoOpAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.WebSettingsNoOpAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.WebStorageAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.WebStorageAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.WebStorageAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.WebViewFeatureInternal.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.WebViewFeatureInternal.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.WebViewFeatureInternal.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.WebViewGlueCommunicator.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.WebViewGlueCommunicator.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.WebViewGlueCommunicator.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.WebViewProviderAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.WebViewProviderAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.WebViewProviderAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.WebViewProviderFactoryAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.WebViewProviderFactoryAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.WebViewProviderFactoryAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.WebViewRenderProcessClientAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.WebViewRenderProcessClientAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.WebViewRenderProcessClientAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.WebViewRenderProcessClientFrameworkAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.WebViewRenderProcessClientFrameworkAdapter.OnRenderProcessResponsive(Android.Webkit.WebView? view, Android.Webkit.WebViewRenderProcess? renderer) -> void
override AndroidX.WebKit.Internal.WebViewRenderProcessClientFrameworkAdapter.OnRenderProcessUnresponsive(Android.Webkit.WebView? view, Android.Webkit.WebViewRenderProcess? renderer) -> void
override AndroidX.WebKit.Internal.WebViewRenderProcessClientFrameworkAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.WebViewRenderProcessClientFrameworkAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.WebViewRenderProcessImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.WebViewRenderProcessImpl.Terminate() -> bool
override AndroidX.WebKit.Internal.WebViewRenderProcessImpl.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.WebViewRenderProcessImpl.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.WebViewStartUpCallbackAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.WebViewStartUpCallbackAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.WebViewStartUpCallbackAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.WebViewStartUpConfigAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.WebViewStartUpConfigAdapter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.WebViewStartUpConfigAdapter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Internal.WebkitToCompatConverter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Internal.WebkitToCompatConverter.ThresholdClass.get -> nint
override AndroidX.WebKit.Internal.WebkitToCompatConverter.ThresholdType.get -> System.Type!
override AndroidX.WebKit.JavaScriptReplyProxy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.JavaScriptReplyProxy.ThresholdClass.get -> nint
override AndroidX.WebKit.JavaScriptReplyProxy.ThresholdType.get -> System.Type!
override AndroidX.WebKit.NoVarySearchHeader.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.NoVarySearchHeader.ThresholdClass.get -> nint
override AndroidX.WebKit.NoVarySearchHeader.ThresholdType.get -> System.Type!
override AndroidX.WebKit.Policy.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.Policy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.PrefetchException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.PrefetchException.ThresholdClass.get -> nint
override AndroidX.WebKit.PrefetchException.ThresholdType.get -> System.Type!
override AndroidX.WebKit.PrefetchNetworkException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.PrefetchNetworkException.ThresholdClass.get -> nint
override AndroidX.WebKit.PrefetchNetworkException.ThresholdType.get -> System.Type!
override AndroidX.WebKit.PrerenderException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.PrerenderException.ThresholdClass.get -> nint
override AndroidX.WebKit.PrerenderException.ThresholdType.get -> System.Type!
override AndroidX.WebKit.ProcessGlobalConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.ProcessGlobalConfig.ThresholdClass.get -> nint
override AndroidX.WebKit.ProcessGlobalConfig.ThresholdType.get -> System.Type!
override AndroidX.WebKit.ProxyConfig.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.ProxyConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.ProxyConfig.ProxyRule.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.ProxyController.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.ProxyController.ThresholdClass.get -> nint
override AndroidX.WebKit.ProxyController.ThresholdType.get -> System.Type!
override AndroidX.WebKit.SafeBrowsingResponseCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.SafeBrowsingResponseCompat.ThresholdClass.get -> nint
override AndroidX.WebKit.SafeBrowsingResponseCompat.ThresholdType.get -> System.Type!
override AndroidX.WebKit.ServiceWorkerClientCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.ServiceWorkerClientCompat.ThresholdClass.get -> nint
override AndroidX.WebKit.ServiceWorkerClientCompat.ThresholdType.get -> System.Type!
override AndroidX.WebKit.ServiceWorkerControllerCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.ServiceWorkerControllerCompat.ThresholdClass.get -> nint
override AndroidX.WebKit.ServiceWorkerControllerCompat.ThresholdType.get -> System.Type!
override AndroidX.WebKit.ServiceWorkerWebSettingsCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.ServiceWorkerWebSettingsCompat.ThresholdClass.get -> nint
override AndroidX.WebKit.ServiceWorkerWebSettingsCompat.ThresholdType.get -> System.Type!
override AndroidX.WebKit.SpeculativeLoadingConfig.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.SpeculativeLoadingConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.SpeculativeLoadingConfig.ThresholdClass.get -> nint
override AndroidX.WebKit.SpeculativeLoadingConfig.ThresholdType.get -> System.Type!
override AndroidX.WebKit.SpeculativeLoadingParameters.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.SpeculativeLoadingParameters.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.TracingConfig.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.TracingConfig.Builder.ThresholdClass.get -> nint
override AndroidX.WebKit.TracingConfig.Builder.ThresholdType.get -> System.Type!
override AndroidX.WebKit.TracingConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.TracingConfig.ThresholdClass.get -> nint
override AndroidX.WebKit.TracingConfig.ThresholdType.get -> System.Type!
override AndroidX.WebKit.TracingController.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.TracingController.ThresholdClass.get -> nint
override AndroidX.WebKit.TracingController.ThresholdType.get -> System.Type!
override AndroidX.WebKit.URLUtilCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.UserAgentMetadata.BrandVersion.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.UserAgentMetadata.BrandVersion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.UserAgentMetadata.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.UserAgentMetadata.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebMessageCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebMessageCompat.ThresholdClass.get -> nint
override AndroidX.WebKit.WebMessageCompat.ThresholdType.get -> System.Type!
override AndroidX.WebKit.WebMessagePortCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebMessagePortCompat.ThresholdClass.get -> nint
override AndroidX.WebKit.WebMessagePortCompat.ThresholdType.get -> System.Type!
override AndroidX.WebKit.WebMessagePortCompat.WebMessageCallbackCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebMessagePortCompat.WebMessageCallbackCompat.ThresholdClass.get -> nint
override AndroidX.WebKit.WebMessagePortCompat.WebMessageCallbackCompat.ThresholdType.get -> System.Type!
override AndroidX.WebKit.WebResourceErrorCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebResourceErrorCompat.ThresholdClass.get -> nint
override AndroidX.WebKit.WebResourceErrorCompat.ThresholdType.get -> System.Type!
override AndroidX.WebKit.WebResourceRequestCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebResourceRequestCompat.ThresholdClass.get -> nint
override AndroidX.WebKit.WebResourceRequestCompat.ThresholdType.get -> System.Type!
override AndroidX.WebKit.WebSettingsCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebSettingsCompat.ThresholdClass.get -> nint
override AndroidX.WebKit.WebSettingsCompat.ThresholdType.get -> System.Type!
override AndroidX.WebKit.WebStorageCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebViewAssetLoader.AssetsPathHandler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebViewAssetLoader.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebViewAssetLoader.InternalStoragePathHandler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebViewAssetLoader.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebViewAssetLoader.ResourcesPathHandler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebViewBuilder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebViewBuilderException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebViewBuilderException.ThresholdClass.get -> nint
override AndroidX.WebKit.WebViewBuilderException.ThresholdType.get -> System.Type!
override AndroidX.WebKit.WebViewClientCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebViewClientCompat.ThresholdClass.get -> nint
override AndroidX.WebKit.WebViewClientCompat.ThresholdType.get -> System.Type!
override AndroidX.WebKit.WebViewCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebViewCompat.ThresholdClass.get -> nint
override AndroidX.WebKit.WebViewCompat.ThresholdType.get -> System.Type!
override AndroidX.WebKit.WebViewFeature.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebViewFeature.ThresholdClass.get -> nint
override AndroidX.WebKit.WebViewFeature.ThresholdType.get -> System.Type!
override AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig.ThresholdClass.get -> nint
override AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig.ThresholdType.get -> System.Type!
override AndroidX.WebKit.WebViewRenderProcess.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebViewRenderProcess.ThresholdClass.get -> nint
override AndroidX.WebKit.WebViewRenderProcess.ThresholdType.get -> System.Type!
override AndroidX.WebKit.WebViewRenderProcessClient.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebViewRenderProcessClient.ThresholdClass.get -> nint
override AndroidX.WebKit.WebViewRenderProcessClient.ThresholdType.get -> System.Type!
override AndroidX.WebKit.WebViewStartUpConfig.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.WebKit.WebViewStartUpConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override sealed AndroidX.WebKit.WebViewClientCompat.OnReceivedError(Android.Webkit.WebView? view, Android.Webkit.IWebResourceRequest? request, Android.Webkit.WebResourceError? error) -> void
override sealed AndroidX.WebKit.WebViewClientCompat.OnSafeBrowsingHit(Android.Webkit.WebView? view, Android.Webkit.IWebResourceRequest? request, Android.Webkit.SafeBrowsingThreat threatType, Android.Webkit.SafeBrowsingResponse? response) -> void
static AndroidX.WebKit.ChromiumLibBoundary.Util.BoundaryInterfaceReflectionUtil.CastToSuppLibClass(Java.Lang.Class? clazz, Java.Lang.Reflect.IInvocationHandler? invocationHandler) -> Java.Lang.Object?
static AndroidX.WebKit.ChromiumLibBoundary.Util.BoundaryInterfaceReflectionUtil.ContainsFeature(System.Collections.Generic.ICollection<string!>? features, string? soughtFeature) -> bool
static AndroidX.WebKit.ChromiumLibBoundary.Util.BoundaryInterfaceReflectionUtil.ContainsFeature(string![]? features, string? soughtFeature) -> bool
static AndroidX.WebKit.ChromiumLibBoundary.Util.BoundaryInterfaceReflectionUtil.CreateInvocationHandlerFor(Java.Lang.Object? delegate) -> Java.Lang.Reflect.IInvocationHandler?
static AndroidX.WebKit.ChromiumLibBoundary.Util.BoundaryInterfaceReflectionUtil.CreateInvocationHandlersForArray(Java.Lang.Object![]? delegates) -> Java.Lang.Reflect.IInvocationHandler![]?
static AndroidX.WebKit.ChromiumLibBoundary.Util.BoundaryInterfaceReflectionUtil.DupeMethod(Java.Lang.Reflect.Method? method, Java.Lang.ClassLoader? delegateLoader) -> Java.Lang.Reflect.Method?
static AndroidX.WebKit.ChromiumLibBoundary.Util.BoundaryInterfaceReflectionUtil.GetDelegateFromInvocationHandler(Java.Lang.Reflect.IInvocationHandler? invocationHandler) -> Java.Lang.Object?
static AndroidX.WebKit.ChromiumLibBoundary.Util.BoundaryInterfaceReflectionUtil.InstanceOfInOwnClassLoader(Java.Lang.Object? obj, string? className) -> bool
static AndroidX.WebKit.CookieManagerCompat.GetCookieInfo(Android.Webkit.CookieManager? cookieManager, string? url) -> System.Collections.Generic.IList<string!>?
static AndroidX.WebKit.Internal.ApiFeature.Values() -> System.Collections.Generic.ICollection<AndroidX.WebKit.Internal.ApiFeature!>?
static AndroidX.WebKit.Internal.ApiFeature.WebViewApkFeaturesForTesting.get -> System.Collections.Generic.ICollection<string!>?
static AndroidX.WebKit.Internal.ApiHelperForM.Close(Android.Webkit.WebMessagePort? webMessagePort) -> void
static AndroidX.WebKit.Internal.ApiHelperForM.CreateWebMessage(AndroidX.WebKit.WebMessageCompat? message) -> Android.Webkit.WebMessage?
static AndroidX.WebKit.Internal.ApiHelperForM.CreateWebMessageChannel(Android.Webkit.WebView? webView) -> Android.Webkit.WebMessagePort![]?
static AndroidX.WebKit.Internal.ApiHelperForM.CreateWebMessageCompat(Android.Webkit.WebMessage? webMessage) -> AndroidX.WebKit.WebMessageCompat?
static AndroidX.WebKit.Internal.ApiHelperForM.GetDescription(Android.Webkit.WebResourceError? webResourceError) -> string?
static AndroidX.WebKit.Internal.ApiHelperForM.GetDescriptionFormatted(Android.Webkit.WebResourceError? webResourceError) -> Java.Lang.ICharSequence?
static AndroidX.WebKit.Internal.ApiHelperForM.GetErrorCode(Android.Webkit.WebResourceError? webResourceError) -> int
static AndroidX.WebKit.Internal.ApiHelperForM.GetOffscreenPreRaster(Android.Webkit.WebSettings? webSettings) -> bool
static AndroidX.WebKit.Internal.ApiHelperForM.PostMessage(Android.Webkit.WebMessagePort? webMessagePort, Android.Webkit.WebMessage? webMessage) -> void
static AndroidX.WebKit.Internal.ApiHelperForM.PostVisualStateCallback(Android.Webkit.WebView? webView, long requestId, AndroidX.WebKit.WebViewCompat.IVisualStateCallback? callback) -> void
static AndroidX.WebKit.Internal.ApiHelperForM.PostWebMessage(Android.Webkit.WebView? webView, Android.Webkit.WebMessage? message, Android.Net.Uri? targetOrigin) -> void
static AndroidX.WebKit.Internal.ApiHelperForM.SetOffscreenPreRaster(Android.Webkit.WebSettings? webSettings, bool b) -> void
static AndroidX.WebKit.Internal.ApiHelperForM.SetWebMessageCallback(Android.Webkit.WebMessagePort? frameworksImpl, AndroidX.WebKit.WebMessagePortCompat.WebMessageCallbackCompat? callback) -> void
static AndroidX.WebKit.Internal.ApiHelperForM.SetWebMessageCallback(Android.Webkit.WebMessagePort? frameworksImpl, AndroidX.WebKit.WebMessagePortCompat.WebMessageCallbackCompat? callback, Android.OS.Handler? handler) -> void
static AndroidX.WebKit.Internal.ApiHelperForN.GetAllowContentAccess(Android.Webkit.ServiceWorkerWebSettings? serviceWorkerWebSettings) -> bool
static AndroidX.WebKit.Internal.ApiHelperForN.GetAllowFileAccess(Android.Webkit.ServiceWorkerWebSettings? serviceWorkerWebSettings) -> bool
static AndroidX.WebKit.Internal.ApiHelperForN.GetBlockNetworkLoads(Android.Webkit.ServiceWorkerWebSettings? serviceWorkerWebSettings) -> bool
static AndroidX.WebKit.Internal.ApiHelperForN.GetCacheMode(Android.Webkit.ServiceWorkerWebSettings? serviceWorkerWebSettings) -> int
static AndroidX.WebKit.Internal.ApiHelperForN.GetDataDir(Android.Content.Context? context) -> Java.IO.File?
static AndroidX.WebKit.Internal.ApiHelperForN.GetDisabledActionModeMenuItems(Android.Webkit.WebSettings? webSettings) -> int
static AndroidX.WebKit.Internal.ApiHelperForN.GetServiceWorkerWebSettings(Android.Webkit.ServiceWorkerController? serviceWorkerController) -> Android.Webkit.ServiceWorkerWebSettings?
static AndroidX.WebKit.Internal.ApiHelperForN.GetServiceWorkerWebSettingsImpl(Android.Webkit.ServiceWorkerController? serviceWorkerController) -> AndroidX.WebKit.Internal.ServiceWorkerWebSettingsImpl?
static AndroidX.WebKit.Internal.ApiHelperForN.IsRedirect(Android.Webkit.IWebResourceRequest? webResourceRequest) -> bool
static AndroidX.WebKit.Internal.ApiHelperForN.ServiceWorkerControllerInstance.get -> Android.Webkit.ServiceWorkerController?
static AndroidX.WebKit.Internal.ApiHelperForN.SetAllowContentAccess(Android.Webkit.ServiceWorkerWebSettings? serviceWorkerWebSettings, bool allowContentAccess) -> void
static AndroidX.WebKit.Internal.ApiHelperForN.SetAllowFileAccess(Android.Webkit.ServiceWorkerWebSettings? serviceWorkerWebSettings, bool allowFileAccess) -> void
static AndroidX.WebKit.Internal.ApiHelperForN.SetBlockNetworkLoads(Android.Webkit.ServiceWorkerWebSettings? serviceWorkerWebSettings, bool blockNetworkLoads) -> void
static AndroidX.WebKit.Internal.ApiHelperForN.SetCacheMode(Android.Webkit.ServiceWorkerWebSettings? serviceWorkerWebSettings, int cacheMode) -> void
static AndroidX.WebKit.Internal.ApiHelperForN.SetDisabledActionModeMenuItems(Android.Webkit.WebSettings? webSettings, int i) -> void
static AndroidX.WebKit.Internal.ApiHelperForN.SetServiceWorkerClient(Android.Webkit.ServiceWorkerController? serviceWorkerController, Android.Webkit.ServiceWorkerClient? serviceWorkerClient) -> void
static AndroidX.WebKit.Internal.ApiHelperForN.SetServiceWorkerClientCompat(Android.Webkit.ServiceWorkerController? serviceWorkerController, AndroidX.WebKit.ServiceWorkerClientCompat? serviceWorkerClientCompat) -> void
static AndroidX.WebKit.Internal.ApiHelperForO.CurrentWebViewPackage.get -> Android.Content.PM.PackageInfo?
static AndroidX.WebKit.Internal.ApiHelperForO.GetSafeBrowsingEnabled(Android.Webkit.WebSettings? webSettings) -> bool
static AndroidX.WebKit.Internal.ApiHelperForO.GetWebChromeClient(Android.Webkit.WebView? webView) -> Android.Webkit.WebChromeClient?
static AndroidX.WebKit.Internal.ApiHelperForO.GetWebViewClient(Android.Webkit.WebView? webView) -> Android.Webkit.WebViewClient?
static AndroidX.WebKit.Internal.ApiHelperForO.SetSafeBrowsingEnabled(Android.Webkit.WebSettings? webSettings, bool b) -> void
static AndroidX.WebKit.Internal.ApiHelperForOMR1.BackToSafety(Android.Webkit.SafeBrowsingResponse? safeBrowsingResponse, bool backToSafety) -> void
static AndroidX.WebKit.Internal.ApiHelperForOMR1.Proceed(Android.Webkit.SafeBrowsingResponse? frameworksImpl, bool proceed) -> void
static AndroidX.WebKit.Internal.ApiHelperForOMR1.SafeBrowsingPrivacyPolicyUrl.get -> Android.Net.Uri?
static AndroidX.WebKit.Internal.ApiHelperForOMR1.SetSafeBrowsingWhitelist(System.Collections.Generic.IList<string!>? hosts, Android.Webkit.IValueCallback? callback) -> void
static AndroidX.WebKit.Internal.ApiHelperForOMR1.ShowInterstitial(Android.Webkit.SafeBrowsingResponse? safeBrowsingResponse, bool showInterstitial) -> void
static AndroidX.WebKit.Internal.ApiHelperForOMR1.StartSafeBrowsing(Android.Content.Context? context, Android.Webkit.IValueCallback? callback) -> void
static AndroidX.WebKit.Internal.ApiHelperForP.GetWebViewLooper(Android.Webkit.WebView? webView) -> Android.OS.Looper?
static AndroidX.WebKit.Internal.ApiHelperForP.IsTracing(Android.Webkit.TracingController? tracingController) -> bool
static AndroidX.WebKit.Internal.ApiHelperForP.SetDataDirectorySuffix(string? suffix) -> void
static AndroidX.WebKit.Internal.ApiHelperForP.Start(Android.Webkit.TracingController? tracingController, AndroidX.WebKit.TracingConfig? tracingConfig) -> void
static AndroidX.WebKit.Internal.ApiHelperForP.Stop(Android.Webkit.TracingController? tracingController, System.IO.Stream? os, Java.Util.Concurrent.IExecutor? ex) -> bool
static AndroidX.WebKit.Internal.ApiHelperForP.TracingControllerInstance.get -> Android.Webkit.TracingController?
static AndroidX.WebKit.Internal.ApiHelperForP.WebViewClassLoader.get -> Java.Lang.ClassLoader?
static AndroidX.WebKit.Internal.ApiHelperForQ.GetForceDark(Android.Webkit.WebSettings? webSettings) -> int
static AndroidX.WebKit.Internal.ApiHelperForQ.GetWebViewRenderProcess(Android.Webkit.WebView? webView) -> Android.Webkit.WebViewRenderProcess?
static AndroidX.WebKit.Internal.ApiHelperForQ.GetWebViewRenderProcessClient(Android.Webkit.WebView? webView) -> Android.Webkit.WebViewRenderProcessClient?
static AndroidX.WebKit.Internal.ApiHelperForQ.SetForceDark(Android.Webkit.WebSettings? webSettings, int forceDark) -> void
static AndroidX.WebKit.Internal.ApiHelperForQ.SetWebViewRenderProcessClient(Android.Webkit.WebView? webView, AndroidX.WebKit.WebViewRenderProcessClient? client) -> void
static AndroidX.WebKit.Internal.ApiHelperForQ.SetWebViewRenderProcessClient(Android.Webkit.WebView? webView, Java.Util.Concurrent.IExecutor? executor, AndroidX.WebKit.WebViewRenderProcessClient? client) -> void
static AndroidX.WebKit.Internal.ApiHelperForQ.Terminate(Android.Webkit.WebViewRenderProcess? webViewRenderProcess) -> bool
static AndroidX.WebKit.Internal.AssetHelper.GetCanonicalDirPath(Java.IO.File? file) -> string?
static AndroidX.WebKit.Internal.AssetHelper.GetCanonicalFileIfChild(Java.IO.File? parent, string? child) -> Java.IO.File?
static AndroidX.WebKit.Internal.AssetHelper.GetDataDir(Android.Content.Context? context) -> Java.IO.File?
static AndroidX.WebKit.Internal.AssetHelper.GuessMimeType(string? filePath) -> string?
static AndroidX.WebKit.Internal.AssetHelper.OpenFile(Java.IO.File? file) -> System.IO.Stream?
static AndroidX.WebKit.Internal.JavaScriptReplyProxyImpl.ForInvocationHandler(Java.Lang.Reflect.IInvocationHandler? invocationHandler) -> AndroidX.WebKit.Internal.JavaScriptReplyProxyImpl?
static AndroidX.WebKit.Internal.PrefetchOperationCallbackAdapter.BuildInvocationHandler(AndroidX.WebKit.IOutcomeReceiverCompat? callback) -> Java.Lang.Reflect.IInvocationHandler?
static AndroidX.WebKit.Internal.ProfileStoreImpl.Instance.get -> AndroidX.WebKit.IProfileStore?
static AndroidX.WebKit.Internal.ProxyControllerImpl.ProxyRulesToStringArray(System.Collections.Generic.IList<AndroidX.WebKit.ProxyConfig.ProxyRule!>? proxyRuleList) -> string![]![]?
static AndroidX.WebKit.Internal.ScriptHandlerImpl.ToScriptHandler(Java.Lang.Reflect.IInvocationHandler? invocationHandler) -> AndroidX.WebKit.Internal.ScriptHandlerImpl?
static AndroidX.WebKit.Internal.StartupApiFeature.Values() -> System.Collections.Generic.ICollection<AndroidX.WebKit.Internal.StartupApiFeature!>?
static AndroidX.WebKit.Internal.WebMessageAdapter.IsMessagePayloadTypeSupportedByWebView(int type) -> bool
static AndroidX.WebKit.Internal.WebMessageAdapter.WebMessageCompatFromBoundaryInterface(AndroidX.WebKit.ChromiumLibBoundary.IWebMessageBoundaryInterface? boundaryInterface) -> AndroidX.WebKit.WebMessageCompat?
static AndroidX.WebKit.Internal.WebMessagePortImpl.CompatToFrameworkMessage(AndroidX.WebKit.WebMessageCompat? message) -> Android.Webkit.WebMessage?
static AndroidX.WebKit.Internal.WebMessagePortImpl.CompatToPorts(AndroidX.WebKit.WebMessagePortCompat![]? compatPorts) -> Android.Webkit.WebMessagePort![]?
static AndroidX.WebKit.Internal.WebMessagePortImpl.FrameworkMessageToCompat(Android.Webkit.WebMessage? message) -> AndroidX.WebKit.WebMessageCompat?
static AndroidX.WebKit.Internal.WebMessagePortImpl.PortsToCompat(Android.Webkit.WebMessagePort![]? ports) -> AndroidX.WebKit.WebMessagePortCompat![]?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.AlgorithmicDarkening.get -> AndroidX.WebKit.Internal.ApiFeature.T?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.AsyncWebviewStartup.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.AttributionRegistrationBehavior.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.BackForwardCache.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.CacheProvider.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.CreateWebMessageChannel.get -> AndroidX.WebKit.Internal.ApiFeature.M?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.DefaultTrafficstatsTagging.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.DeleteBrowsingData.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.DisabledActionModeMenuItems.get -> AndroidX.WebKit.Internal.ApiFeature.N?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.DocumentStartScript.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.EnterpriseAuthenticationAppLinkPolicy.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.ForceDark.get -> AndroidX.WebKit.Internal.ApiFeature.Q?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.ForceDarkStrategy.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.GetCookieInfo.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.GetVariationsHeader.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.GetWebChromeClient.get -> AndroidX.WebKit.Internal.ApiFeature.O?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.GetWebViewClient.get -> AndroidX.WebKit.Internal.ApiFeature.O?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.GetWebViewRenderer.get -> AndroidX.WebKit.Internal.ApiFeature.Q?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.IsStartupFeatureSupported(string? publicFeatureValue, Android.Content.Context? context) -> bool
static AndroidX.WebKit.Internal.WebViewFeatureInternal.IsStartupFeatureSupported(string? publicFeatureValue, System.Collections.Generic.ICollection<AndroidX.WebKit.Internal.StartupApiFeature!>? internalFeatures, Android.Content.Context? context) -> bool
static AndroidX.WebKit.Internal.WebViewFeatureInternal.IsSupported(string? publicFeatureValue) -> bool
static AndroidX.WebKit.Internal.WebViewFeatureInternal.IsSupported(string? publicFeatureValue, System.Collections.ICollection? internalFeatures) -> bool
static AndroidX.WebKit.Internal.WebViewFeatureInternal.MultiProcess.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.MultiProfile.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.MuteAudio.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.NavigationCallbackBasic.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.OffScreenPreraster.get -> AndroidX.WebKit.Internal.ApiFeature.M?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.PaymentRequest.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.PostWebMessage.get -> AndroidX.WebKit.Internal.ApiFeature.M?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.PrerenderWithUrl.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.ProfileUrlPrefetch.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.ProxyOverride.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.ProxyOverrideReverseBypass.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.ReceiveHttpError.get -> AndroidX.WebKit.Internal.ApiFeature.M?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.ReceiveWebResourceError.get -> AndroidX.WebKit.Internal.ApiFeature.M?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.RequestedWithHeaderAllowList.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.SafeBrowsingAllowlistDeprecatedToDeprecated.get -> AndroidX.WebKit.Internal.ApiFeature.O_MR1?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.SafeBrowsingAllowlistDeprecatedToPreferred.get -> AndroidX.WebKit.Internal.ApiFeature.O_MR1?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.SafeBrowsingAllowlistPreferredToDeprecated.get -> AndroidX.WebKit.Internal.ApiFeature.O_MR1?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.SafeBrowsingAllowlistPreferredToPreferred.get -> AndroidX.WebKit.Internal.ApiFeature.O_MR1?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.SafeBrowsingEnable.get -> AndroidX.WebKit.Internal.ApiFeature.O?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.SafeBrowsingHit.get -> AndroidX.WebKit.Internal.ApiFeature.O_MR1?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.SafeBrowsingPrivacyPolicyUrl.get -> AndroidX.WebKit.Internal.ApiFeature.O_MR1?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.SafeBrowsingResponseBackToSafety.get -> AndroidX.WebKit.Internal.ApiFeature.O_MR1?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.SafeBrowsingResponseProceed.get -> AndroidX.WebKit.Internal.ApiFeature.O_MR1?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.SafeBrowsingResponseShowInterstitial.get -> AndroidX.WebKit.Internal.ApiFeature.O_MR1?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.SaveState.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.ServiceWorkerBasicUsage.get -> AndroidX.WebKit.Internal.ApiFeature.N?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.ServiceWorkerBlockNetworkLoads.get -> AndroidX.WebKit.Internal.ApiFeature.N?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.ServiceWorkerCacheMode.get -> AndroidX.WebKit.Internal.ApiFeature.N?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.ServiceWorkerContentAccess.get -> AndroidX.WebKit.Internal.ApiFeature.N?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.ServiceWorkerFileAccess.get -> AndroidX.WebKit.Internal.ApiFeature.N?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.ServiceWorkerShouldInterceptRequest.get -> AndroidX.WebKit.Internal.ApiFeature.N?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.ShouldOverrideWithRedirects.get -> AndroidX.WebKit.Internal.ApiFeature.N?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.SpeculativeLoading.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.SpeculativeLoadingConfig.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.StartSafeBrowsing.get -> AndroidX.WebKit.Internal.ApiFeature.O_MR1?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.StartupFeatureConfigurePartitionedCookies.get -> AndroidX.WebKit.Internal.StartupApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.StartupFeatureSetDataDirectorySuffix.get -> AndroidX.WebKit.Internal.StartupApiFeature.P?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.StartupFeatureSetDirectoryBasePath.get -> AndroidX.WebKit.Internal.StartupApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.TracingControllerBasicUsage.get -> AndroidX.WebKit.Internal.ApiFeature.P?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.UnsupportedOperationException.get -> Java.Lang.UnsupportedOperationException?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.UserAgentMetadata.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.VisualStateCallback.get -> AndroidX.WebKit.Internal.ApiFeature.M?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.WebAuthentication.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.WebMessageArrayBuffer.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.WebMessageCallbackOnMessage.get -> AndroidX.WebKit.Internal.ApiFeature.M?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.WebMessageListener.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.WebMessagePortClose.get -> AndroidX.WebKit.Internal.ApiFeature.M?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.WebMessagePortPostMessage.get -> AndroidX.WebKit.Internal.ApiFeature.M?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.WebMessagePortSetMessageCallback.get -> AndroidX.WebKit.Internal.ApiFeature.M?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.WebResourceErrorGetCode.get -> AndroidX.WebKit.Internal.ApiFeature.M?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.WebResourceErrorGetDescription.get -> AndroidX.WebKit.Internal.ApiFeature.M?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.WebResourceRequestIsRedirect.get -> AndroidX.WebKit.Internal.ApiFeature.N?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.WebViewRendererClientBasicUsage.get -> AndroidX.WebKit.Internal.ApiFeature.Q?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.WebViewRendererTerminate.get -> AndroidX.WebKit.Internal.ApiFeature.Q?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.WebviewBuilder.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewFeatureInternal.WebviewMediaIntegrityApiStatus.get -> AndroidX.WebKit.Internal.ApiFeature.NoFramework?
static AndroidX.WebKit.Internal.WebViewGlueCommunicator.CompatConverter.get -> AndroidX.WebKit.Internal.WebkitToCompatConverter?
static AndroidX.WebKit.Internal.WebViewGlueCommunicator.Factory.get -> AndroidX.WebKit.Internal.IWebViewProviderFactory?
static AndroidX.WebKit.Internal.WebViewGlueCommunicator.WebViewClassLoader.get -> Java.Lang.ClassLoader?
static AndroidX.WebKit.Internal.WebViewRenderProcessImpl.ForFrameworkObject(Android.Webkit.WebViewRenderProcess? frameworkRenderer) -> AndroidX.WebKit.Internal.WebViewRenderProcessImpl?
static AndroidX.WebKit.Internal.WebViewRenderProcessImpl.ForInvocationHandler(Java.Lang.Reflect.IInvocationHandler? invocationHandler) -> AndroidX.WebKit.Internal.WebViewRenderProcessImpl?
static AndroidX.WebKit.NoVarySearchHeader.AlwaysVaryHeader() -> AndroidX.WebKit.NoVarySearchHeader?
static AndroidX.WebKit.NoVarySearchHeader.NeverVaryExcept(bool varyOnOrdering, System.Collections.Generic.IList<string!>? consideredQueryParameters) -> AndroidX.WebKit.NoVarySearchHeader?
static AndroidX.WebKit.NoVarySearchHeader.NeverVaryHeader() -> AndroidX.WebKit.NoVarySearchHeader?
static AndroidX.WebKit.NoVarySearchHeader.VaryExcept(bool varyOnOrdering, System.Collections.Generic.IList<string!>? ignoredQueryParameters) -> AndroidX.WebKit.NoVarySearchHeader?
static AndroidX.WebKit.ProcessGlobalConfig.Apply(AndroidX.WebKit.ProcessGlobalConfig? config) -> void
static AndroidX.WebKit.ProxyController.Instance.get -> AndroidX.WebKit.ProxyController?
static AndroidX.WebKit.ServiceWorkerControllerCompat.Instance.get -> AndroidX.WebKit.ServiceWorkerControllerCompat?
static AndroidX.WebKit.TracingController.Instance.get -> AndroidX.WebKit.TracingController?
static AndroidX.WebKit.URLUtilCompat.GetFilenameFromContentDisposition(string? contentDisposition) -> string?
static AndroidX.WebKit.URLUtilCompat.GuessFileName(string? url, string? contentDisposition, string? mimeType) -> string?
static AndroidX.WebKit.WebResourceRequestCompat.IsRedirect(Android.Webkit.IWebResourceRequest? request) -> bool
static AndroidX.WebKit.WebSettingsCompat.GetAttributionRegistrationBehavior(Android.Webkit.WebSettings? settings) -> int
static AndroidX.WebKit.WebSettingsCompat.GetBackForwardCacheEnabled(Android.Webkit.WebSettings? settings) -> bool
static AndroidX.WebKit.WebSettingsCompat.GetDisabledActionModeMenuItems(Android.Webkit.WebSettings? settings) -> int
static AndroidX.WebKit.WebSettingsCompat.GetEnterpriseAuthenticationAppLinkPolicyEnabled(Android.Webkit.WebSettings? settings) -> bool
static AndroidX.WebKit.WebSettingsCompat.GetForceDark(Android.Webkit.WebSettings? settings) -> int
static AndroidX.WebKit.WebSettingsCompat.GetForceDarkStrategy(Android.Webkit.WebSettings? settings) -> int
static AndroidX.WebKit.WebSettingsCompat.GetHasEnrolledInstrumentEnabled(Android.Webkit.WebSettings? settings) -> bool
static AndroidX.WebKit.WebSettingsCompat.GetOffscreenPreRaster(Android.Webkit.WebSettings? settings) -> bool
static AndroidX.WebKit.WebSettingsCompat.GetPaymentRequestEnabled(Android.Webkit.WebSettings? settings) -> bool
static AndroidX.WebKit.WebSettingsCompat.GetRequestedWithHeaderOriginAllowList(Android.Webkit.WebSettings? settings) -> System.Collections.Generic.ICollection<string!>?
static AndroidX.WebKit.WebSettingsCompat.GetSafeBrowsingEnabled(Android.Webkit.WebSettings? settings) -> bool
static AndroidX.WebKit.WebSettingsCompat.GetSpeculativeLoadingStatus(Android.Webkit.WebSettings? settings) -> int
static AndroidX.WebKit.WebSettingsCompat.GetUserAgentMetadata(Android.Webkit.WebSettings? settings) -> AndroidX.WebKit.UserAgentMetadata?
static AndroidX.WebKit.WebSettingsCompat.GetWebAuthenticationSupport(Android.Webkit.WebSettings? settings) -> int
static AndroidX.WebKit.WebSettingsCompat.GetWebViewMediaIntegrityApiStatus(Android.Webkit.WebSettings? settings) -> AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig?
static AndroidX.WebKit.WebSettingsCompat.IsAlgorithmicDarkeningAllowed(Android.Webkit.WebSettings? settings) -> bool
static AndroidX.WebKit.WebSettingsCompat.SetAlgorithmicDarkeningAllowed(Android.Webkit.WebSettings? settings, bool allow) -> void
static AndroidX.WebKit.WebSettingsCompat.SetAttributionRegistrationBehavior(Android.Webkit.WebSettings? settings, int behavior) -> void
static AndroidX.WebKit.WebSettingsCompat.SetBackForwardCacheEnabled(Android.Webkit.WebSettings? settings, bool backForwardCacheEnabled) -> void
static AndroidX.WebKit.WebSettingsCompat.SetDisabledActionModeMenuItems(Android.Webkit.WebSettings? settings, int menuItems) -> void
static AndroidX.WebKit.WebSettingsCompat.SetEnterpriseAuthenticationAppLinkPolicyEnabled(Android.Webkit.WebSettings? settings, bool enabled) -> void
static AndroidX.WebKit.WebSettingsCompat.SetForceDark(Android.Webkit.WebSettings? settings, int forceDarkMode) -> void
static AndroidX.WebKit.WebSettingsCompat.SetForceDarkStrategy(Android.Webkit.WebSettings? settings, int forceDarkBehavior) -> void
static AndroidX.WebKit.WebSettingsCompat.SetHasEnrolledInstrumentEnabled(Android.Webkit.WebSettings? settings, bool enabled) -> void
static AndroidX.WebKit.WebSettingsCompat.SetOffscreenPreRaster(Android.Webkit.WebSettings? settings, bool enabled) -> void
static AndroidX.WebKit.WebSettingsCompat.SetPaymentRequestEnabled(Android.Webkit.WebSettings? settings, bool enabled) -> void
static AndroidX.WebKit.WebSettingsCompat.SetRequestedWithHeaderOriginAllowList(Android.Webkit.WebSettings? settings, System.Collections.Generic.ICollection<string!>? allowList) -> void
static AndroidX.WebKit.WebSettingsCompat.SetSafeBrowsingEnabled(Android.Webkit.WebSettings? settings, bool enabled) -> void
static AndroidX.WebKit.WebSettingsCompat.SetSpeculativeLoadingStatus(Android.Webkit.WebSettings? settings, int speculativeLoadingStatus) -> void
static AndroidX.WebKit.WebSettingsCompat.SetUserAgentMetadata(Android.Webkit.WebSettings? settings, AndroidX.WebKit.UserAgentMetadata? metadata) -> void
static AndroidX.WebKit.WebSettingsCompat.SetWebAuthenticationSupport(Android.Webkit.WebSettings? settings, int support) -> void
static AndroidX.WebKit.WebSettingsCompat.SetWebViewMediaIntegrityApiStatus(Android.Webkit.WebSettings? settings, AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig? permissionConfig) -> void
static AndroidX.WebKit.WebStorageCompat.DeleteBrowsingData(Android.Webkit.WebStorage? instance, Java.Lang.IRunnable? doneCallback) -> void
static AndroidX.WebKit.WebStorageCompat.DeleteBrowsingData(Android.Webkit.WebStorage? instance, Java.Util.Concurrent.IExecutor? executor, Java.Lang.IRunnable? doneCallback) -> void
static AndroidX.WebKit.WebStorageCompat.DeleteBrowsingDataForSite(Android.Webkit.WebStorage? instance, string? site, Java.Lang.IRunnable? doneCallback) -> string?
static AndroidX.WebKit.WebStorageCompat.DeleteBrowsingDataForSite(Android.Webkit.WebStorage? instance, string? site, Java.Util.Concurrent.IExecutor? executor, Java.Lang.IRunnable? doneCallback) -> string?
static AndroidX.WebKit.WebViewCompat.AddDocumentStartJavaScript(Android.Webkit.WebView? webview, string? script, System.Collections.Generic.ICollection<string!>? allowedOriginRules) -> AndroidX.WebKit.IScriptHandler?
static AndroidX.WebKit.WebViewCompat.AddWebMessageListener(Android.Webkit.WebView? webView, string? jsObjectName, System.Collections.Generic.ICollection<string!>? allowedOriginRules, AndroidX.WebKit.WebViewCompat.IWebMessageListener? listener) -> void
static AndroidX.WebKit.WebViewCompat.CreateWebMessageChannel(Android.Webkit.WebView? webview) -> AndroidX.WebKit.WebMessagePortCompat![]?
static AndroidX.WebKit.WebViewCompat.CurrentLoadedWebViewPackage.get -> Android.Content.PM.PackageInfo?
static AndroidX.WebKit.WebViewCompat.GetCurrentWebViewPackage(Android.Content.Context? context) -> Android.Content.PM.PackageInfo?
static AndroidX.WebKit.WebViewCompat.GetProfile(Android.Webkit.WebView? webView) -> AndroidX.WebKit.IProfile?
static AndroidX.WebKit.WebViewCompat.GetWebChromeClient(Android.Webkit.WebView? webview) -> Android.Webkit.WebChromeClient?
static AndroidX.WebKit.WebViewCompat.GetWebNavigationClient(Android.Webkit.WebView? webView) -> AndroidX.WebKit.IWebNavigationClient?
static AndroidX.WebKit.WebViewCompat.GetWebViewClient(Android.Webkit.WebView? webview) -> Android.Webkit.WebViewClient?
static AndroidX.WebKit.WebViewCompat.GetWebViewRenderProcess(Android.Webkit.WebView? webview) -> AndroidX.WebKit.WebViewRenderProcess?
static AndroidX.WebKit.WebViewCompat.GetWebViewRenderProcessClient(Android.Webkit.WebView? webview) -> AndroidX.WebKit.WebViewRenderProcessClient?
static AndroidX.WebKit.WebViewCompat.IsAudioMuted(Android.Webkit.WebView? webView) -> bool
static AndroidX.WebKit.WebViewCompat.IsMultiProcessEnabled.get -> bool
static AndroidX.WebKit.WebViewCompat.PostVisualStateCallback(Android.Webkit.WebView? webview, long requestId, AndroidX.WebKit.WebViewCompat.IVisualStateCallback? callback) -> void
static AndroidX.WebKit.WebViewCompat.PostWebMessage(Android.Webkit.WebView? webview, AndroidX.WebKit.WebMessageCompat? message, Android.Net.Uri? targetOrigin) -> void
static AndroidX.WebKit.WebViewCompat.PrerenderUrlAsync(Android.Webkit.WebView? webView, string? url, Android.OS.CancellationSignal? cancellationSignal, Java.Util.Concurrent.IExecutor? callbackExecutor, AndroidX.WebKit.IPrerenderOperationCallback? callback) -> void
static AndroidX.WebKit.WebViewCompat.PrerenderUrlAsync(Android.Webkit.WebView? webView, string? url, Android.OS.CancellationSignal? cancellationSignal, Java.Util.Concurrent.IExecutor? callbackExecutor, AndroidX.WebKit.SpeculativeLoadingParameters? params, AndroidX.WebKit.IPrerenderOperationCallback? callback) -> void
static AndroidX.WebKit.WebViewCompat.RemoveWebMessageListener(Android.Webkit.WebView? webview, string? jsObjectName) -> void
static AndroidX.WebKit.WebViewCompat.SafeBrowsingPrivacyPolicyUrl.get -> Android.Net.Uri?
static AndroidX.WebKit.WebViewCompat.SaveState(Android.Webkit.WebView? webView, Android.OS.Bundle? outState, int maxSizeBytes, bool includeForwardState) -> void
static AndroidX.WebKit.WebViewCompat.SetAudioMuted(Android.Webkit.WebView? webView, bool mute) -> void
static AndroidX.WebKit.WebViewCompat.SetDefaultTrafficStatsTag(int tag) -> void
static AndroidX.WebKit.WebViewCompat.SetProfile(Android.Webkit.WebView? webView, string? profileName) -> void
static AndroidX.WebKit.WebViewCompat.SetSafeBrowsingAllowlist(System.Collections.Generic.ICollection<string!>? hosts, Android.Webkit.IValueCallback? callback) -> void
static AndroidX.WebKit.WebViewCompat.SetSafeBrowsingWhitelist(System.Collections.Generic.IList<string!>? hosts, Android.Webkit.IValueCallback? callback) -> void
static AndroidX.WebKit.WebViewCompat.SetShouldCacheProvider(bool shouldCacheProvider) -> void
static AndroidX.WebKit.WebViewCompat.SetWebNavigationClient(Android.Webkit.WebView? webView, AndroidX.WebKit.IWebNavigationClient? client) -> void
static AndroidX.WebKit.WebViewCompat.SetWebViewRenderProcessClient(Android.Webkit.WebView? webview, AndroidX.WebKit.WebViewRenderProcessClient? webViewRenderProcessClient) -> void
static AndroidX.WebKit.WebViewCompat.SetWebViewRenderProcessClient(Android.Webkit.WebView? webview, Java.Util.Concurrent.IExecutor? executor, AndroidX.WebKit.WebViewRenderProcessClient? webViewRenderProcessClient) -> void
static AndroidX.WebKit.WebViewCompat.StartSafeBrowsing(Android.Content.Context? context, Android.Webkit.IValueCallback? callback) -> void
static AndroidX.WebKit.WebViewCompat.StartUpWebView(Android.Content.Context? context, AndroidX.WebKit.WebViewStartUpConfig? config, AndroidX.WebKit.WebViewCompat.IWebViewStartUpCallback? callback) -> void
static AndroidX.WebKit.WebViewCompat.VariationsHeader.get -> string?
static AndroidX.WebKit.WebViewFeature.IsFeatureSupported(string? feature) -> bool
static AndroidX.WebKit.WebViewFeature.IsStartupFeatureSupported(Android.Content.Context? context, string? startupFeature) -> bool
virtual AndroidX.WebKit.ChromiumLibBoundary.WebViewBuilderBoundaryInterfaceConfig.Accept(Java.Lang.Object? chromiumConfig) -> void
virtual AndroidX.WebKit.ChromiumLibBoundary.WebViewBuilderBoundaryInterfaceConfig.Accept(Java.Util.Functions.IBiConsumer? chromiumConfig) -> void
virtual AndroidX.WebKit.ChromiumLibBoundary.WebViewBuilderBoundaryInterfaceConfig.AddJavascriptInterface(Java.Lang.Object? object, string? name, System.Collections.Generic.IList<string!>? sitePatterns) -> void
virtual AndroidX.WebKit.Internal.ApiFeature.IsSupported.get -> bool
virtual AndroidX.WebKit.Internal.ApiFeature.IsSupportedByWebView.get -> bool
virtual AndroidX.WebKit.Internal.ApiFeature.PublicFeatureName.get -> string?
virtual AndroidX.WebKit.Internal.AssetHelper.OpenAsset(string? path) -> System.IO.Stream?
virtual AndroidX.WebKit.Internal.AssetHelper.OpenResource(string? path) -> System.IO.Stream?
virtual AndroidX.WebKit.Internal.CookieManagerAdapter.GetCookieInfo(string? url) -> System.Collections.Generic.IList<string!>?
virtual AndroidX.WebKit.Internal.IncompatibleApkWebViewProviderFactory.CreateWebView(Android.Webkit.WebView? webview) -> AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface?
virtual AndroidX.WebKit.Internal.IncompatibleApkWebViewProviderFactory.DropDataProvider.get -> AndroidX.WebKit.ChromiumLibBoundary.IDropDataContentProviderBoundaryInterface?
virtual AndroidX.WebKit.Internal.IncompatibleApkWebViewProviderFactory.GetWebViewFeatures() -> string![]?
virtual AndroidX.WebKit.Internal.IncompatibleApkWebViewProviderFactory.ProfileStore.get -> AndroidX.WebKit.ChromiumLibBoundary.IProfileStoreBoundaryInterface?
virtual AndroidX.WebKit.Internal.IncompatibleApkWebViewProviderFactory.ProxyController.get -> AndroidX.WebKit.ChromiumLibBoundary.IProxyControllerBoundaryInterface?
virtual AndroidX.WebKit.Internal.IncompatibleApkWebViewProviderFactory.ServiceWorkerController.get -> AndroidX.WebKit.ChromiumLibBoundary.IServiceWorkerControllerBoundaryInterface?
virtual AndroidX.WebKit.Internal.IncompatibleApkWebViewProviderFactory.StartUpWebView(AndroidX.WebKit.WebViewStartUpConfig? config, AndroidX.WebKit.WebViewCompat.IWebViewStartUpCallback? callback) -> void
virtual AndroidX.WebKit.Internal.IncompatibleApkWebViewProviderFactory.Statics.get -> AndroidX.WebKit.ChromiumLibBoundary.IStaticsBoundaryInterface?
virtual AndroidX.WebKit.Internal.IncompatibleApkWebViewProviderFactory.TracingController.get -> AndroidX.WebKit.ChromiumLibBoundary.ITracingControllerBoundaryInterface?
virtual AndroidX.WebKit.Internal.IncompatibleApkWebViewProviderFactory.WebViewBuilder.get -> AndroidX.WebKit.ChromiumLibBoundary.IWebViewBuilderBoundaryInterface?
virtual AndroidX.WebKit.Internal.IncompatibleApkWebViewProviderFactory.WebkitToCompatConverter.get -> AndroidX.WebKit.ChromiumLibBoundary.IWebkitToCompatConverterBoundaryInterface?
virtual AndroidX.WebKit.Internal.NavigationAdapter.DidCommit() -> bool
virtual AndroidX.WebKit.Internal.NavigationAdapter.DidCommitErrorPage() -> bool
virtual AndroidX.WebKit.Internal.NavigationAdapter.IsBack.get -> bool
virtual AndroidX.WebKit.Internal.NavigationAdapter.IsForward.get -> bool
virtual AndroidX.WebKit.Internal.NavigationAdapter.IsHistory.get -> bool
virtual AndroidX.WebKit.Internal.NavigationAdapter.IsReload.get -> bool
virtual AndroidX.WebKit.Internal.NavigationAdapter.IsRestore.get -> bool
virtual AndroidX.WebKit.Internal.NavigationAdapter.IsSameDocument.get -> bool
virtual AndroidX.WebKit.Internal.NavigationAdapter.Page.get -> AndroidX.WebKit.IPage?
virtual AndroidX.WebKit.Internal.NavigationAdapter.StatusCode.get -> int
virtual AndroidX.WebKit.Internal.NavigationAdapter.WasInitiatedByPage() -> bool
virtual AndroidX.WebKit.Internal.NoVarySearchHeaderAdapter.ConsideredQueryParameters.get -> System.Collections.Generic.IList<string!>?
virtual AndroidX.WebKit.Internal.NoVarySearchHeaderAdapter.IgnoreDifferencesInParameters.get -> bool
virtual AndroidX.WebKit.Internal.NoVarySearchHeaderAdapter.IgnoredQueryParameters.get -> System.Collections.Generic.IList<string!>?
virtual AndroidX.WebKit.Internal.NoVarySearchHeaderAdapter.VaryOnKeyOrder.get -> bool
virtual AndroidX.WebKit.Internal.ProfileImpl.ClearPrefetchAsync(string? url, Java.Util.Concurrent.IExecutor? callbackExecutor, AndroidX.WebKit.IOutcomeReceiverCompat? callback) -> void
virtual AndroidX.WebKit.Internal.ProfileImpl.CookieManager.get -> Android.Webkit.CookieManager?
virtual AndroidX.WebKit.Internal.ProfileImpl.GeolocationPermissions.get -> Android.Webkit.GeolocationPermissions?
virtual AndroidX.WebKit.Internal.ProfileImpl.Name.get -> string?
virtual AndroidX.WebKit.Internal.ProfileImpl.PrefetchUrlAsync(string? url, Android.OS.CancellationSignal? cancellationSignal, Java.Util.Concurrent.IExecutor? callbackExecutor, AndroidX.WebKit.IOutcomeReceiverCompat? callback) -> void
virtual AndroidX.WebKit.Internal.ProfileImpl.PrefetchUrlAsync(string? url, Android.OS.CancellationSignal? cancellationSignal, Java.Util.Concurrent.IExecutor? callbackExecutor, AndroidX.WebKit.SpeculativeLoadingParameters? params, AndroidX.WebKit.IOutcomeReceiverCompat? callback) -> void
virtual AndroidX.WebKit.Internal.ProfileImpl.ServiceWorkerController.get -> Android.Webkit.ServiceWorkerController?
virtual AndroidX.WebKit.Internal.ProfileImpl.SetSpeculativeLoadingConfig(AndroidX.WebKit.SpeculativeLoadingConfig? speculativeLoadingConfig) -> void
virtual AndroidX.WebKit.Internal.ProfileImpl.WebStorage.get -> Android.Webkit.WebStorage?
virtual AndroidX.WebKit.Internal.ProfileStoreImpl.AllProfileNames.get -> System.Collections.Generic.IList<string!>?
virtual AndroidX.WebKit.Internal.ProfileStoreImpl.DeleteProfile(string? name) -> bool
virtual AndroidX.WebKit.Internal.ProfileStoreImpl.GetOrCreateProfile(string? name) -> AndroidX.WebKit.IProfile?
virtual AndroidX.WebKit.Internal.ProfileStoreImpl.GetProfile(string? name) -> AndroidX.WebKit.IProfile?
virtual AndroidX.WebKit.Internal.ScriptHandlerImpl.Remove() -> void
virtual AndroidX.WebKit.Internal.ServiceWorkerClientAdapter.GetSupportedFeatures() -> string![]?
virtual AndroidX.WebKit.Internal.ServiceWorkerClientAdapter.ShouldInterceptRequest(Android.Webkit.IWebResourceRequest? request) -> Android.Webkit.WebResourceResponse?
virtual AndroidX.WebKit.Internal.SpeculativeLoadingConfigAdapter.MaxPrefetches.get -> int
virtual AndroidX.WebKit.Internal.SpeculativeLoadingConfigAdapter.MaxPrerenders.get -> int
virtual AndroidX.WebKit.Internal.SpeculativeLoadingConfigAdapter.PrefetchTTLSeconds.get -> int
virtual AndroidX.WebKit.Internal.SpeculativeLoadingParametersAdapter.AdditionalHeaders.get -> System.Collections.Generic.IDictionary<string!, string!>?
virtual AndroidX.WebKit.Internal.SpeculativeLoadingParametersAdapter.IsJavaScriptEnabled.get -> bool
virtual AndroidX.WebKit.Internal.SpeculativeLoadingParametersAdapter.NoVarySearchData.get -> Java.Lang.Reflect.IInvocationHandler?
virtual AndroidX.WebKit.Internal.StartupApiFeature.IsSupported(Android.Content.Context? context) -> bool
virtual AndroidX.WebKit.Internal.StartupApiFeature.IsSupportedByWebView(Android.Content.Context? context) -> bool
virtual AndroidX.WebKit.Internal.StartupApiFeature.PublicFeatureName.get -> string?
virtual AndroidX.WebKit.Internal.VisualStateCallbackAdapter.OnComplete(long requestId) -> void
virtual AndroidX.WebKit.Internal.WebMessageAdapter.Data.get -> string?
virtual AndroidX.WebKit.Internal.WebMessageAdapter.GetPorts() -> Java.Lang.Reflect.IInvocationHandler![]?
virtual AndroidX.WebKit.Internal.WebMessageAdapter.GetSupportedFeatures() -> string![]?
virtual AndroidX.WebKit.Internal.WebMessageAdapter.MessagePayload.get -> Java.Lang.Reflect.IInvocationHandler?
virtual AndroidX.WebKit.Internal.WebMessageCallbackAdapter.GetSupportedFeatures() -> string![]?
virtual AndroidX.WebKit.Internal.WebMessageCallbackAdapter.OnMessage(Java.Lang.Reflect.IInvocationHandler? port, Java.Lang.Reflect.IInvocationHandler? message) -> void
virtual AndroidX.WebKit.Internal.WebMessageListenerAdapter.GetSupportedFeatures() -> string![]?
virtual AndroidX.WebKit.Internal.WebMessageListenerAdapter.OnPostMessage(Android.Webkit.WebView? view, Java.Lang.Reflect.IInvocationHandler? message, Android.Net.Uri? sourceOrigin, bool isMainFrame, Java.Lang.Reflect.IInvocationHandler? replyProxy) -> void
virtual AndroidX.WebKit.Internal.WebMessagePayloadAdapter.AsString.get -> string?
virtual AndroidX.WebKit.Internal.WebMessagePayloadAdapter.GetAsArrayBuffer() -> byte[]?
virtual AndroidX.WebKit.Internal.WebMessagePayloadAdapter.GetSupportedFeatures() -> string![]?
virtual AndroidX.WebKit.Internal.WebMessagePayloadAdapter.Type.get -> int
virtual AndroidX.WebKit.Internal.WebNavigationClientAdapter.GetSupportedFeatures() -> string![]?
virtual AndroidX.WebKit.Internal.WebNavigationClientAdapter.OnFirstContentfulPaint(Java.Lang.Reflect.IInvocationHandler? page) -> void
virtual AndroidX.WebKit.Internal.WebNavigationClientAdapter.OnNavigationCompleted(Java.Lang.Reflect.IInvocationHandler? navigation) -> void
virtual AndroidX.WebKit.Internal.WebNavigationClientAdapter.OnNavigationRedirected(Java.Lang.Reflect.IInvocationHandler? navigation) -> void
virtual AndroidX.WebKit.Internal.WebNavigationClientAdapter.OnNavigationStarted(Java.Lang.Reflect.IInvocationHandler? navigation) -> void
virtual AndroidX.WebKit.Internal.WebNavigationClientAdapter.OnPageDOMContentLoadedEventFired(Java.Lang.Reflect.IInvocationHandler? page) -> void
virtual AndroidX.WebKit.Internal.WebNavigationClientAdapter.OnPageDeleted(Java.Lang.Reflect.IInvocationHandler? page) -> void
virtual AndroidX.WebKit.Internal.WebNavigationClientAdapter.OnPageLoadEventFired(Java.Lang.Reflect.IInvocationHandler? page) -> void
virtual AndroidX.WebKit.Internal.WebNavigationClientAdapter.WebNavigationClient.get -> AndroidX.WebKit.IWebNavigationClient?
virtual AndroidX.WebKit.Internal.WebResourceRequestAdapter.IsRedirect.get -> bool
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.AlgorithmicDarkeningAllowed.get -> bool
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.AlgorithmicDarkeningAllowed.set -> void
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.AttributionRegistrationBehavior.get -> int
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.AttributionRegistrationBehavior.set -> void
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.BackForwardCacheEnabled.get -> bool
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.BackForwardCacheEnabled.set -> void
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.DisabledActionModeMenuItems.get -> int
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.DisabledActionModeMenuItems.set -> void
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.EnterpriseAuthenticationAppLinkPolicyEnabled.get -> bool
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.EnterpriseAuthenticationAppLinkPolicyEnabled.set -> void
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.ForceDark.get -> int
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.ForceDark.set -> void
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.ForceDarkStrategy.get -> int
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.ForceDarkStrategy.set -> void
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.HasEnrolledInstrumentEnabled.get -> bool
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.HasEnrolledInstrumentEnabled.set -> void
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.OffscreenPreRaster.get -> bool
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.OffscreenPreRaster.set -> void
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.PaymentRequestEnabled.get -> bool
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.PaymentRequestEnabled.set -> void
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.RequestedWithHeaderOriginAllowList.get -> System.Collections.Generic.ICollection<string!>?
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.RequestedWithHeaderOriginAllowList.set -> void
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.SafeBrowsingEnabled.get -> bool
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.SafeBrowsingEnabled.set -> void
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.SpeculativeLoadingStatus.get -> int
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.SpeculativeLoadingStatus.set -> void
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.UserAgentMetadata.get -> AndroidX.WebKit.UserAgentMetadata?
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.UserAgentMetadata.set -> void
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.WebAuthenticationSupport.get -> int
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.WebAuthenticationSupport.set -> void
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.WebViewMediaIntegrityApiStatus.get -> AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig?
virtual AndroidX.WebKit.Internal.WebSettingsAdapter.WebViewMediaIntegrityApiStatus.set -> void
virtual AndroidX.WebKit.Internal.WebStorageAdapter.DeleteBrowsingData(Java.Util.Concurrent.IExecutor? callbackExecutor, Java.Lang.IRunnable? doneCallback) -> void
virtual AndroidX.WebKit.Internal.WebStorageAdapter.DeleteBrowsingDataForSite(string? domainOrUrl, Java.Util.Concurrent.IExecutor? callbackExecutor, Java.Lang.IRunnable? doneCallback) -> string?
virtual AndroidX.WebKit.Internal.WebViewProviderAdapter.AddDocumentStartJavaScript(string? script, string![]? allowedOriginRules) -> AndroidX.WebKit.Internal.ScriptHandlerImpl?
virtual AndroidX.WebKit.Internal.WebViewProviderAdapter.AddWebMessageListener(string? jsObjectName, string![]? allowedOriginRules, AndroidX.WebKit.WebViewCompat.IWebMessageListener? listener) -> void
virtual AndroidX.WebKit.Internal.WebViewProviderAdapter.AudioMuted.get -> bool
virtual AndroidX.WebKit.Internal.WebViewProviderAdapter.AudioMuted.set -> void
virtual AndroidX.WebKit.Internal.WebViewProviderAdapter.CreateWebMessageChannel() -> AndroidX.WebKit.WebMessagePortCompat![]?
virtual AndroidX.WebKit.Internal.WebViewProviderAdapter.InsertVisualStateCallback(long requestId, AndroidX.WebKit.WebViewCompat.IVisualStateCallback? callback) -> void
virtual AndroidX.WebKit.Internal.WebViewProviderAdapter.PostWebMessage(AndroidX.WebKit.WebMessageCompat? message, Android.Net.Uri? targetOrigin) -> void
virtual AndroidX.WebKit.Internal.WebViewProviderAdapter.PrerenderUrlAsync(string? url, Android.OS.CancellationSignal? cancellationSignal, Java.Util.Concurrent.IExecutor? callbackExecutor, AndroidX.WebKit.IPrerenderOperationCallback? callback) -> void
virtual AndroidX.WebKit.Internal.WebViewProviderAdapter.PrerenderUrlAsync(string? url, Android.OS.CancellationSignal? cancellationSignal, Java.Util.Concurrent.IExecutor? callbackExecutor, AndroidX.WebKit.SpeculativeLoadingParameters? params, AndroidX.WebKit.IPrerenderOperationCallback? callback) -> void
virtual AndroidX.WebKit.Internal.WebViewProviderAdapter.Profile.get -> AndroidX.WebKit.IProfile?
virtual AndroidX.WebKit.Internal.WebViewProviderAdapter.RemoveWebMessageListener(string? jsObjectName) -> void
virtual AndroidX.WebKit.Internal.WebViewProviderAdapter.SaveState(Android.OS.Bundle? outState, int maxSizeBytes, bool includeForwardState) -> void
virtual AndroidX.WebKit.Internal.WebViewProviderAdapter.SetProfileWithName(string? profileName) -> void
virtual AndroidX.WebKit.Internal.WebViewProviderAdapter.SetWebViewRenderProcessClient(Java.Util.Concurrent.IExecutor? executor, AndroidX.WebKit.WebViewRenderProcessClient? webViewRenderProcessClient) -> void
virtual AndroidX.WebKit.Internal.WebViewProviderAdapter.WebChromeClient.get -> Android.Webkit.WebChromeClient?
virtual AndroidX.WebKit.Internal.WebViewProviderAdapter.WebNavigationClient.get -> AndroidX.WebKit.IWebNavigationClient?
virtual AndroidX.WebKit.Internal.WebViewProviderAdapter.WebNavigationClient.set -> void
virtual AndroidX.WebKit.Internal.WebViewProviderAdapter.WebViewClient.get -> Android.Webkit.WebViewClient?
virtual AndroidX.WebKit.Internal.WebViewProviderAdapter.WebViewRenderProcess.get -> AndroidX.WebKit.WebViewRenderProcess?
virtual AndroidX.WebKit.Internal.WebViewProviderAdapter.WebViewRenderProcessClient.get -> AndroidX.WebKit.WebViewRenderProcessClient?
virtual AndroidX.WebKit.Internal.WebViewProviderFactoryAdapter.CreateWebView(Android.Webkit.WebView? webview) -> AndroidX.WebKit.ChromiumLibBoundary.IWebViewProviderBoundaryInterface?
virtual AndroidX.WebKit.Internal.WebViewProviderFactoryAdapter.DropDataProvider.get -> AndroidX.WebKit.ChromiumLibBoundary.IDropDataContentProviderBoundaryInterface?
virtual AndroidX.WebKit.Internal.WebViewProviderFactoryAdapter.GetWebViewFeatures() -> string![]?
virtual AndroidX.WebKit.Internal.WebViewProviderFactoryAdapter.ProfileStore.get -> AndroidX.WebKit.ChromiumLibBoundary.IProfileStoreBoundaryInterface?
virtual AndroidX.WebKit.Internal.WebViewProviderFactoryAdapter.ProxyController.get -> AndroidX.WebKit.ChromiumLibBoundary.IProxyControllerBoundaryInterface?
virtual AndroidX.WebKit.Internal.WebViewProviderFactoryAdapter.ServiceWorkerController.get -> AndroidX.WebKit.ChromiumLibBoundary.IServiceWorkerControllerBoundaryInterface?
virtual AndroidX.WebKit.Internal.WebViewProviderFactoryAdapter.StartUpWebView(AndroidX.WebKit.WebViewStartUpConfig? config, AndroidX.WebKit.WebViewCompat.IWebViewStartUpCallback? callback) -> void
virtual AndroidX.WebKit.Internal.WebViewProviderFactoryAdapter.Statics.get -> AndroidX.WebKit.ChromiumLibBoundary.IStaticsBoundaryInterface?
virtual AndroidX.WebKit.Internal.WebViewProviderFactoryAdapter.TracingController.get -> AndroidX.WebKit.ChromiumLibBoundary.ITracingControllerBoundaryInterface?
virtual AndroidX.WebKit.Internal.WebViewProviderFactoryAdapter.WebViewBuilder.get -> AndroidX.WebKit.ChromiumLibBoundary.IWebViewBuilderBoundaryInterface?
virtual AndroidX.WebKit.Internal.WebViewProviderFactoryAdapter.WebkitToCompatConverter.get -> AndroidX.WebKit.ChromiumLibBoundary.IWebkitToCompatConverterBoundaryInterface?
virtual AndroidX.WebKit.Internal.WebViewRenderProcessClientAdapter.WebViewRenderProcessClient.get -> AndroidX.WebKit.WebViewRenderProcessClient?
virtual AndroidX.WebKit.Internal.WebViewRenderProcessClientFrameworkAdapter.FrameworkRenderProcessClient.get -> AndroidX.WebKit.WebViewRenderProcessClient?
virtual AndroidX.WebKit.Internal.WebViewStartUpCallbackAdapter.OnSuccess(Java.Lang.Reflect.IInvocationHandler! resultInvocationHandler) -> void
virtual AndroidX.WebKit.Internal.WebViewStartUpConfigAdapter.BackgroundExecutor.get -> Java.Util.Concurrent.IExecutor!
virtual AndroidX.WebKit.Internal.WebViewStartUpConfigAdapter.ShouldRunUiThreadStartUpTasks() -> bool
virtual AndroidX.WebKit.Internal.WebkitToCompatConverter.ConvertCookieManager(Android.Webkit.CookieManager? cookieManager) -> AndroidX.WebKit.Internal.CookieManagerAdapter?
virtual AndroidX.WebKit.Internal.WebkitToCompatConverter.ConvertSafeBrowsingResponse(Android.Webkit.SafeBrowsingResponse? safeBrowsingResponse) -> Java.Lang.Reflect.IInvocationHandler?
virtual AndroidX.WebKit.Internal.WebkitToCompatConverter.ConvertSafeBrowsingResponse(Java.Lang.Reflect.IInvocationHandler? safeBrowsingResponse) -> Android.Webkit.SafeBrowsingResponse?
virtual AndroidX.WebKit.Internal.WebkitToCompatConverter.ConvertServiceWorkerSettings(Android.Webkit.ServiceWorkerWebSettings? settings) -> Java.Lang.Reflect.IInvocationHandler?
virtual AndroidX.WebKit.Internal.WebkitToCompatConverter.ConvertServiceWorkerSettings(Java.Lang.Reflect.IInvocationHandler? serviceWorkerSettings) -> Android.Webkit.ServiceWorkerWebSettings?
virtual AndroidX.WebKit.Internal.WebkitToCompatConverter.ConvertSettings(Android.Webkit.WebSettings? webSettings) -> AndroidX.WebKit.Internal.WebSettingsAdapter?
virtual AndroidX.WebKit.Internal.WebkitToCompatConverter.ConvertWebMessagePort(Android.Webkit.WebMessagePort? webMessagePort) -> Java.Lang.Reflect.IInvocationHandler?
virtual AndroidX.WebKit.Internal.WebkitToCompatConverter.ConvertWebMessagePort(Java.Lang.Reflect.IInvocationHandler? webMessagePort) -> Android.Webkit.WebMessagePort?
virtual AndroidX.WebKit.Internal.WebkitToCompatConverter.ConvertWebResourceError(Android.Webkit.WebResourceError? webResourceError) -> Java.Lang.Reflect.IInvocationHandler?
virtual AndroidX.WebKit.Internal.WebkitToCompatConverter.ConvertWebResourceError(Java.Lang.Reflect.IInvocationHandler? webResourceError) -> Android.Webkit.WebResourceError?
virtual AndroidX.WebKit.Internal.WebkitToCompatConverter.ConvertWebResourceRequest(Android.Webkit.IWebResourceRequest? request) -> AndroidX.WebKit.Internal.WebResourceRequestAdapter?
virtual AndroidX.WebKit.Internal.WebkitToCompatConverter.ConvertWebStorage(Android.Webkit.WebStorage? webStorage) -> AndroidX.WebKit.Internal.WebStorageAdapter?
virtual AndroidX.WebKit.ProcessGlobalConfig.SetDataDirectorySuffix(Android.Content.Context? context, string? suffix) -> AndroidX.WebKit.ProcessGlobalConfig?
virtual AndroidX.WebKit.ProcessGlobalConfig.SetDirectoryBasePaths(Android.Content.Context? context, Java.IO.File? dataDirectoryBasePath, Java.IO.File? cacheDirectoryBasePath) -> AndroidX.WebKit.ProcessGlobalConfig?
virtual AndroidX.WebKit.ProcessGlobalConfig.SetPartitionedCookiesEnabled(Android.Content.Context? context, bool isEnabled) -> AndroidX.WebKit.ProcessGlobalConfig?
virtual AndroidX.WebKit.SpeculativeLoadingConfig.MaxPrefetches.get -> int
virtual AndroidX.WebKit.SpeculativeLoadingConfig.MaxPrerenders.get -> int
virtual AndroidX.WebKit.SpeculativeLoadingConfig.PrefetchTtlSeconds.get -> int
virtual AndroidX.WebKit.TracingConfig.Builder.AddCategories(System.Collections.Generic.ICollection<string!>? categories) -> AndroidX.WebKit.TracingConfig.Builder?
virtual AndroidX.WebKit.TracingConfig.Builder.AddCategories(params int[]? predefinedCategories) -> AndroidX.WebKit.TracingConfig.Builder?
virtual AndroidX.WebKit.TracingConfig.Builder.AddCategories(params string![]? categories) -> AndroidX.WebKit.TracingConfig.Builder?
virtual AndroidX.WebKit.TracingConfig.Builder.Build() -> AndroidX.WebKit.TracingConfig?
virtual AndroidX.WebKit.TracingConfig.Builder.SetTracingMode(int tracingMode) -> AndroidX.WebKit.TracingConfig.Builder?
virtual AndroidX.WebKit.TracingConfig.CustomIncludedCategories.get -> System.Collections.Generic.IList<string!>?
virtual AndroidX.WebKit.TracingConfig.PredefinedCategories.get -> int
virtual AndroidX.WebKit.TracingConfig.TracingMode.get -> int
virtual AndroidX.WebKit.WebMessageCompat.Data.get -> string?
virtual AndroidX.WebKit.WebMessageCompat.GetArrayBuffer() -> byte[]?
virtual AndroidX.WebKit.WebMessageCompat.GetPorts() -> AndroidX.WebKit.WebMessagePortCompat![]?
virtual AndroidX.WebKit.WebMessageCompat.Type.get -> int
virtual AndroidX.WebKit.WebMessagePortCompat.WebMessageCallbackCompat.OnMessage(AndroidX.WebKit.WebMessagePortCompat? port, AndroidX.WebKit.WebMessageCompat? message) -> void
virtual AndroidX.WebKit.WebViewClientCompat.OnReceivedError(Android.Webkit.WebView? view, Android.Webkit.IWebResourceRequest? request, AndroidX.WebKit.WebResourceErrorCompat? error) -> void
virtual AndroidX.WebKit.WebViewClientCompat.OnSafeBrowsingHit(Android.Webkit.WebView? view, Android.Webkit.IWebResourceRequest? request, int threatType, AndroidX.WebKit.SafeBrowsingResponseCompat? callback) -> void
virtual AndroidX.WebKit.WebViewClientCompat.OnWebAuthnIntent(Android.Webkit.WebView? view, Android.App.PendingIntent? intent, Java.Lang.Reflect.IInvocationHandler? callback) -> bool
virtual AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig.DefaultStatus.get -> int
virtual AndroidX.WebKit.WebViewMediaIntegrityApiStatusConfig.OverrideRules.get -> System.Collections.Generic.IDictionary<string!, Java.Lang.Integer!>?
