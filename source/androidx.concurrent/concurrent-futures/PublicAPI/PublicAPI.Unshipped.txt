#nullable enable
AndroidX.Concurrent.Futures.AbstractResolvableFuture
AndroidX.Concurrent.Futures.AbstractResolvableFuture.AbstractResolvableFuture() -> void
AndroidX.Concurrent.Futures.AbstractResolvableFuture.AbstractResolvableFuture(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Concurrent.Futures.AbstractResolvableFuture.AddListener(Java.Lang.IRunnable? listener, Java.Util.Concurrent.IExecutor? executor) -> void
AndroidX.Concurrent.Futures.AbstractResolvableFuture.Cancel(bool mayInterruptIfRunning) -> bool
AndroidX.Concurrent.Futures.AbstractResolvableFuture.Get() -> Java.Lang.Object?
AndroidX.Concurrent.Futures.AbstractResolvableFuture.Get(long timeout, Java.Util.Concurrent.TimeUnit? unit) -> Java.Lang.Object?
AndroidX.Concurrent.Futures.AbstractResolvableFuture.IsCancelled.get -> bool
AndroidX.Concurrent.Futures.AbstractResolvableFuture.IsDone.get -> bool
AndroidX.Concurrent.Futures.AbstractResolvableFuture.WasInterrupted() -> bool
AndroidX.Concurrent.Futures.CallbackToFutureAdapter
AndroidX.Concurrent.Futures.CallbackToFutureAdapter.Completer
AndroidX.Concurrent.Futures.CallbackToFutureAdapter.Completer.AddCancellationListener(Java.Lang.IRunnable? runnable, Java.Util.Concurrent.IExecutor? executor) -> void
AndroidX.Concurrent.Futures.CallbackToFutureAdapter.Completer.Set(Java.Lang.Object? value) -> bool
AndroidX.Concurrent.Futures.CallbackToFutureAdapter.Completer.SetCancelled() -> bool
AndroidX.Concurrent.Futures.CallbackToFutureAdapter.Completer.SetException(Java.Lang.Throwable? t) -> bool
AndroidX.Concurrent.Futures.CallbackToFutureAdapter.IResolver
AndroidX.Concurrent.Futures.CallbackToFutureAdapter.IResolver.AttachCompleter(AndroidX.Concurrent.Futures.CallbackToFutureAdapter.Completer? p0) -> Java.Lang.Object?
AndroidX.Concurrent.Futures.DirectExecutor
AndroidX.Concurrent.Futures.DirectExecutor.Execute(Java.Lang.IRunnable? command) -> void
AndroidX.Concurrent.Futures.ResolvableFuture
AndroidX.Concurrent.Futures.ResolvableFuture.Set(Java.Lang.Object? value) -> bool
AndroidX.Concurrent.Futures.ResolvableFuture.SetException(Java.Lang.Throwable? throwable) -> bool
AndroidX.Concurrent.Futures.ResolvableFuture.SetFuture(Google.Common.Util.Concurrent.IListenableFuture? future) -> bool
override AndroidX.Concurrent.Futures.AbstractResolvableFuture.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Concurrent.Futures.AbstractResolvableFuture.ThresholdClass.get -> nint
override AndroidX.Concurrent.Futures.AbstractResolvableFuture.ThresholdType.get -> System.Type!
override AndroidX.Concurrent.Futures.CallbackToFutureAdapter.Completer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Concurrent.Futures.CallbackToFutureAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Concurrent.Futures.DirectExecutor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Concurrent.Futures.ResolvableFuture.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
static AndroidX.Concurrent.Futures.CallbackToFutureAdapter.GetFuture(AndroidX.Concurrent.Futures.CallbackToFutureAdapter.IResolver? callback) -> Google.Common.Util.Concurrent.IListenableFuture?
static AndroidX.Concurrent.Futures.DirectExecutor.Instance.get -> AndroidX.Concurrent.Futures.DirectExecutor?
static AndroidX.Concurrent.Futures.DirectExecutor.ValueOf(string? name) -> AndroidX.Concurrent.Futures.DirectExecutor?
static AndroidX.Concurrent.Futures.DirectExecutor.Values() -> AndroidX.Concurrent.Futures.DirectExecutor![]?
static AndroidX.Concurrent.Futures.ResolvableFuture.Create() -> AndroidX.Concurrent.Futures.ResolvableFuture?
virtual AndroidX.Concurrent.Futures.AbstractResolvableFuture.AfterDone() -> void
virtual AndroidX.Concurrent.Futures.AbstractResolvableFuture.InterruptTask() -> void
virtual AndroidX.Concurrent.Futures.AbstractResolvableFuture.PendingToString() -> string?
virtual AndroidX.Concurrent.Futures.AbstractResolvableFuture.Set(Java.Lang.Object? value) -> bool
virtual AndroidX.Concurrent.Futures.AbstractResolvableFuture.SetException(Java.Lang.Throwable? throwable) -> bool
virtual AndroidX.Concurrent.Futures.AbstractResolvableFuture.SetFuture(Google.Common.Util.Concurrent.IListenableFuture? future) -> bool
