#nullable enable
Xamarin.KotlinX.Coroutines.AbstractTimeSourceKt
Xamarin.KotlinX.Coroutines.AwaitKt
Xamarin.KotlinX.Coroutines.BuildersKt
Xamarin.KotlinX.Coroutines.CancellableContinuationDefaultImpls
Xamarin.KotlinX.Coroutines.CancellableContinuationImplKt
Xamarin.KotlinX.Coroutines.CancellableContinuationKt
Xamarin.KotlinX.Coroutines.Channels.ActorKt
Xamarin.KotlinX.Coroutines.Channels.ActorScopeDefaultImpls
Xamarin.KotlinX.Coroutines.Channels.BroadcastChannelDefaultImpls
Xamarin.KotlinX.Coroutines.Channels.BroadcastChannelKt
Xamarin.KotlinX.Coroutines.Channels.BroadcastKt
Xamarin.KotlinX.Coroutines.Channels.BufferOverflow
Xamarin.KotlinX.Coroutines.Channels.BufferedChannelKt
Xamarin.KotlinX.Coroutines.Channels.Channel
Xamarin.KotlinX.Coroutines.Channels.ChannelConsts
Xamarin.KotlinX.Coroutines.Channels.ChannelDefaultImpls
Xamarin.KotlinX.Coroutines.Channels.ChannelFactory
Xamarin.KotlinX.Coroutines.Channels.ChannelIteratorDefaultImpls
Xamarin.KotlinX.Coroutines.Channels.ChannelKt
Xamarin.KotlinX.Coroutines.Channels.ChannelResult
Xamarin.KotlinX.Coroutines.Channels.ChannelResult.Companion
Xamarin.KotlinX.Coroutines.Channels.ChannelResult.Companion.Closed_JP2dKIU(Java.Lang.Throwable? cause) -> Java.Lang.Object!
Xamarin.KotlinX.Coroutines.Channels.ChannelResult.Companion.Failure_PtdJZtk() -> Java.Lang.Object!
Xamarin.KotlinX.Coroutines.Channels.ChannelResult.Companion.Success_JP2dKIU(Java.Lang.Object? value) -> Java.Lang.Object!
Xamarin.KotlinX.Coroutines.Channels.ChannelsKt
Xamarin.KotlinX.Coroutines.Channels.ClosedReceiveChannelException
Xamarin.KotlinX.Coroutines.Channels.ClosedReceiveChannelException.ClosedReceiveChannelException(string? message) -> void
Xamarin.KotlinX.Coroutines.Channels.ClosedSendChannelException
Xamarin.KotlinX.Coroutines.Channels.ClosedSendChannelException.ClosedSendChannelException(string? message) -> void
Xamarin.KotlinX.Coroutines.Channels.ConflatedBroadcastChannel
Xamarin.KotlinX.Coroutines.Channels.ConflatedBroadcastChannel.Cancel(Java.Util.Concurrent.CancellationException? cause) -> void
Xamarin.KotlinX.Coroutines.Channels.ConflatedBroadcastChannel.Close(Java.Lang.Throwable? cause) -> bool
Xamarin.KotlinX.Coroutines.Channels.ConflatedBroadcastChannel.ConflatedBroadcastChannel() -> void
Xamarin.KotlinX.Coroutines.Channels.ConflatedBroadcastChannel.ConflatedBroadcastChannel(Java.Lang.Object? value) -> void
Xamarin.KotlinX.Coroutines.Channels.ConflatedBroadcastChannel.InvokeOnClose(Kotlin.Jvm.Functions.IFunction1! handler) -> void
Xamarin.KotlinX.Coroutines.Channels.ConflatedBroadcastChannel.IsClosedForSend.get -> bool
Xamarin.KotlinX.Coroutines.Channels.ConflatedBroadcastChannel.Offer(Java.Lang.Object? element) -> bool
Xamarin.KotlinX.Coroutines.Channels.ConflatedBroadcastChannel.OnSend.get -> Xamarin.KotlinX.Coroutines.Selects.ISelectClause2!
Xamarin.KotlinX.Coroutines.Channels.ConflatedBroadcastChannel.OpenSubscription() -> Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel!
Xamarin.KotlinX.Coroutines.Channels.ConflatedBroadcastChannel.Send(Java.Lang.Object? element, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.Channels.ConflatedBroadcastChannel.TrySend(Java.Lang.Object? element) -> Java.Lang.Object!
Xamarin.KotlinX.Coroutines.Channels.ConflatedBroadcastChannel.Value.get -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.Channels.ConflatedBroadcastChannel.ValueOrNull.get -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.Channels.IActorScope
Xamarin.KotlinX.Coroutines.Channels.IActorScope.Channel.get -> Xamarin.KotlinX.Coroutines.Channels.IChannel!
Xamarin.KotlinX.Coroutines.Channels.IBroadcastChannel
Xamarin.KotlinX.Coroutines.Channels.IBroadcastChannel.Cancel(Java.Util.Concurrent.CancellationException? cause) -> void
Xamarin.KotlinX.Coroutines.Channels.IBroadcastChannel.OpenSubscription() -> Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel!
Xamarin.KotlinX.Coroutines.Channels.IChannel
Xamarin.KotlinX.Coroutines.Channels.IChannel.Factory.get -> Xamarin.KotlinX.Coroutines.Channels.ChannelFactory!
Xamarin.KotlinX.Coroutines.Channels.IChannelIterator
Xamarin.KotlinX.Coroutines.Channels.IChannelIterator.HasNext(Kotlin.Coroutines.IContinuation! p0) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.Channels.IChannelIterator.Next() -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.Channels.IProducerScope
Xamarin.KotlinX.Coroutines.Channels.IProducerScope.Channel.get -> Xamarin.KotlinX.Coroutines.Channels.ISendChannel!
Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel
Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel.Cancel(Java.Util.Concurrent.CancellationException? cause) -> void
Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel.IsClosedForReceive.get -> bool
Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel.IsEmpty.get -> bool
Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel.Iterator() -> Xamarin.KotlinX.Coroutines.Channels.IChannelIterator!
Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel.OnReceive.get -> Xamarin.KotlinX.Coroutines.Selects.ISelectClause1!
Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel.OnReceiveCatching.get -> Xamarin.KotlinX.Coroutines.Selects.ISelectClause1!
Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel.OnReceiveOrNull.get -> Xamarin.KotlinX.Coroutines.Selects.ISelectClause1!
Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel.Poll() -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel.Receive(Kotlin.Coroutines.IContinuation! p0) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel.ReceiveCatching(Kotlin.Coroutines.IContinuation! p0) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel.ReceiveOrNull(Kotlin.Coroutines.IContinuation! p0) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel.TryReceive() -> Java.Lang.Object!
Xamarin.KotlinX.Coroutines.Channels.ISendChannel
Xamarin.KotlinX.Coroutines.Channels.ISendChannel.Close(Java.Lang.Throwable? cause) -> bool
Xamarin.KotlinX.Coroutines.Channels.ISendChannel.InvokeOnClose(Kotlin.Jvm.Functions.IFunction1! handler) -> void
Xamarin.KotlinX.Coroutines.Channels.ISendChannel.IsClosedForSend.get -> bool
Xamarin.KotlinX.Coroutines.Channels.ISendChannel.Offer(Java.Lang.Object? element) -> bool
Xamarin.KotlinX.Coroutines.Channels.ISendChannel.OnSend.get -> Xamarin.KotlinX.Coroutines.Selects.ISelectClause2!
Xamarin.KotlinX.Coroutines.Channels.ISendChannel.Send(Java.Lang.Object? element, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.Channels.ISendChannel.TrySend(Java.Lang.Object? element) -> Java.Lang.Object!
Xamarin.KotlinX.Coroutines.Channels.ProduceKt
Xamarin.KotlinX.Coroutines.Channels.ProducerScopeDefaultImpls
Xamarin.KotlinX.Coroutines.Channels.ReceiveChannelDefaultImpls
Xamarin.KotlinX.Coroutines.Channels.SendChannelDefaultImpls
Xamarin.KotlinX.Coroutines.Channels.TickerChannelsKt
Xamarin.KotlinX.Coroutines.Channels.TickerMode
Xamarin.KotlinX.Coroutines.ChildHandleDefaultImpls
Xamarin.KotlinX.Coroutines.ChildJobDefaultImpls
Xamarin.KotlinX.Coroutines.CompletableDeferredDefaultImpls
Xamarin.KotlinX.Coroutines.CompletableDeferredKt
Xamarin.KotlinX.Coroutines.CompletableJobDefaultImpls
Xamarin.KotlinX.Coroutines.CompletionHandlerException
Xamarin.KotlinX.Coroutines.CompletionHandlerException.CompletionHandlerException(string! message, Java.Lang.Throwable! cause) -> void
Xamarin.KotlinX.Coroutines.CompletionHandler_commonKt
Xamarin.KotlinX.Coroutines.CompletionStateKt
Xamarin.KotlinX.Coroutines.CopyableThreadContextElementDefaultImpls
Xamarin.KotlinX.Coroutines.CoroutineContextKt
Xamarin.KotlinX.Coroutines.CoroutineDispatcher
Xamarin.KotlinX.Coroutines.CoroutineDispatcher.CoroutineDispatcher() -> void
Xamarin.KotlinX.Coroutines.CoroutineDispatcher.CoroutineDispatcher(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.KotlinX.Coroutines.CoroutineDispatcher.InterceptContinuation(Kotlin.Coroutines.IContinuation! continuation) -> Kotlin.Coroutines.IContinuation!
Xamarin.KotlinX.Coroutines.CoroutineDispatcher.Plus(Xamarin.KotlinX.Coroutines.CoroutineDispatcher! other) -> Xamarin.KotlinX.Coroutines.CoroutineDispatcher!
Xamarin.KotlinX.Coroutines.CoroutineDispatcher.ReleaseInterceptedContinuation(Kotlin.Coroutines.IContinuation! continuation) -> void
Xamarin.KotlinX.Coroutines.CoroutineExceptionHandler
Xamarin.KotlinX.Coroutines.CoroutineExceptionHandlerConsts
Xamarin.KotlinX.Coroutines.CoroutineExceptionHandlerDefaultImpls
Xamarin.KotlinX.Coroutines.CoroutineExceptionHandlerKey
Xamarin.KotlinX.Coroutines.CoroutineExceptionHandlerKt
Xamarin.KotlinX.Coroutines.CoroutineName
Xamarin.KotlinX.Coroutines.CoroutineName.Component1() -> string!
Xamarin.KotlinX.Coroutines.CoroutineName.Copy(string! name) -> Xamarin.KotlinX.Coroutines.CoroutineName!
Xamarin.KotlinX.Coroutines.CoroutineName.CoroutineName(string! name) -> void
Xamarin.KotlinX.Coroutines.CoroutineName.Key
Xamarin.KotlinX.Coroutines.CoroutineName.Name.get -> string!
Xamarin.KotlinX.Coroutines.CoroutineScopeKt
Xamarin.KotlinX.Coroutines.CoroutineStart
Xamarin.KotlinX.Coroutines.CoroutineStart.Invoke(Kotlin.Jvm.Functions.IFunction2! block, Java.Lang.Object? receiver, Kotlin.Coroutines.IContinuation! completion) -> void
Xamarin.KotlinX.Coroutines.CoroutineStart.IsLazy.get -> bool
Xamarin.KotlinX.Coroutines.CoroutineStart.WhenMappings
Xamarin.KotlinX.Coroutines.DebugKt
Xamarin.KotlinX.Coroutines.DebugStringsKt
Xamarin.KotlinX.Coroutines.DefaultExecutorKt
Xamarin.KotlinX.Coroutines.DeferredDefaultImpls
Xamarin.KotlinX.Coroutines.DelayDefaultImpls
Xamarin.KotlinX.Coroutines.DelayKt
Xamarin.KotlinX.Coroutines.DelicateCoroutinesApiAttribute
Xamarin.KotlinX.Coroutines.DelicateCoroutinesApiAttribute.DelicateCoroutinesApiAttribute() -> void
Xamarin.KotlinX.Coroutines.DispatchedTaskKt
Xamarin.KotlinX.Coroutines.Dispatchers
Xamarin.KotlinX.Coroutines.Dispatchers.Shutdown() -> void
Xamarin.KotlinX.Coroutines.DispatchersKt
Xamarin.KotlinX.Coroutines.EventLoopKt
Xamarin.KotlinX.Coroutines.EventLoop_commonKt
Xamarin.KotlinX.Coroutines.ExceptionsKt
Xamarin.KotlinX.Coroutines.ExecutorCoroutineDispatcher
Xamarin.KotlinX.Coroutines.ExecutorCoroutineDispatcher.ExecutorCoroutineDispatcher() -> void
Xamarin.KotlinX.Coroutines.ExecutorCoroutineDispatcher.ExecutorCoroutineDispatcher(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.KotlinX.Coroutines.ExecutorsKt
Xamarin.KotlinX.Coroutines.ExperimentalCoroutinesApiAttribute
Xamarin.KotlinX.Coroutines.ExperimentalCoroutinesApiAttribute.ExperimentalCoroutinesApiAttribute() -> void
Xamarin.KotlinX.Coroutines.ExperimentalForInheritanceCoroutinesApiAttribute
Xamarin.KotlinX.Coroutines.ExperimentalForInheritanceCoroutinesApiAttribute.ExperimentalForInheritanceCoroutinesApiAttribute() -> void
Xamarin.KotlinX.Coroutines.Flow.FlowKt
Xamarin.KotlinX.Coroutines.Flow.IFlow
Xamarin.KotlinX.Coroutines.Flow.IFlow.Collect(Xamarin.KotlinX.Coroutines.Flow.IFlowCollector! collector, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.Flow.IFlowCollector
Xamarin.KotlinX.Coroutines.Flow.IFlowCollector.Emit(Java.Lang.Object? value, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.Flow.IMutableSharedFlow
Xamarin.KotlinX.Coroutines.Flow.IMutableSharedFlow.Emit(Java.Lang.Object? value, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.Flow.IMutableSharedFlow.ResetReplayCache() -> void
Xamarin.KotlinX.Coroutines.Flow.IMutableSharedFlow.SubscriptionCount.get -> Xamarin.KotlinX.Coroutines.Flow.IStateFlow!
Xamarin.KotlinX.Coroutines.Flow.IMutableSharedFlow.TryEmit(Java.Lang.Object? value) -> bool
Xamarin.KotlinX.Coroutines.Flow.IMutableStateFlow
Xamarin.KotlinX.Coroutines.Flow.IMutableStateFlow.CompareAndSet(Java.Lang.Object? expect, Java.Lang.Object? update) -> bool
Xamarin.KotlinX.Coroutines.Flow.IMutableStateFlow.Value.get -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.Flow.IMutableStateFlow.Value.set -> void
Xamarin.KotlinX.Coroutines.Flow.ISharedFlow
Xamarin.KotlinX.Coroutines.Flow.ISharedFlow.Collect(Xamarin.KotlinX.Coroutines.Flow.IFlowCollector! collector, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.Flow.ISharedFlow.ReplayCache.get -> System.Collections.IList!
Xamarin.KotlinX.Coroutines.Flow.ISharingStarted
Xamarin.KotlinX.Coroutines.Flow.ISharingStarted.Command(Xamarin.KotlinX.Coroutines.Flow.IStateFlow! subscriptionCount) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
Xamarin.KotlinX.Coroutines.Flow.ISharingStarted.Companion.get -> Xamarin.KotlinX.Coroutines.Flow.SharingStartedCompanion!
Xamarin.KotlinX.Coroutines.Flow.IStateFlow
Xamarin.KotlinX.Coroutines.Flow.IStateFlow.Value.get -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.Flow.LintKt
Xamarin.KotlinX.Coroutines.Flow.SharedFlowKt
Xamarin.KotlinX.Coroutines.Flow.SharingCommand
Xamarin.KotlinX.Coroutines.Flow.SharingStarted
Xamarin.KotlinX.Coroutines.Flow.SharingStartedCompanion
Xamarin.KotlinX.Coroutines.Flow.SharingStartedCompanion.Eagerly.get -> Xamarin.KotlinX.Coroutines.Flow.ISharingStarted!
Xamarin.KotlinX.Coroutines.Flow.SharingStartedCompanion.Lazily.get -> Xamarin.KotlinX.Coroutines.Flow.ISharingStarted!
Xamarin.KotlinX.Coroutines.Flow.SharingStartedCompanion.WhileSubscribed(long stopTimeoutMillis, long replayExpirationMillis) -> Xamarin.KotlinX.Coroutines.Flow.ISharingStarted!
Xamarin.KotlinX.Coroutines.Flow.SharingStartedConsts
Xamarin.KotlinX.Coroutines.Flow.SharingStartedKt
Xamarin.KotlinX.Coroutines.Flow.StateFlowKt
Xamarin.KotlinX.Coroutines.FlowPreviewAttribute
Xamarin.KotlinX.Coroutines.FlowPreviewAttribute.FlowPreviewAttribute() -> void
Xamarin.KotlinX.Coroutines.Future.FutureKt
Xamarin.KotlinX.Coroutines.GlobalScope
Xamarin.KotlinX.Coroutines.GlobalScope.CoroutineContext.get -> Kotlin.Coroutines.ICoroutineContext!
Xamarin.KotlinX.Coroutines.GuidanceKt
Xamarin.KotlinX.Coroutines.ICancellableContinuation
Xamarin.KotlinX.Coroutines.ICancellableContinuation.Cancel(Java.Lang.Throwable? cause) -> bool
Xamarin.KotlinX.Coroutines.ICancellableContinuation.CompleteResume(Java.Lang.Object! token) -> void
Xamarin.KotlinX.Coroutines.ICancellableContinuation.InitCancellability() -> void
Xamarin.KotlinX.Coroutines.ICancellableContinuation.InvokeOnCancellation(Kotlin.Jvm.Functions.IFunction1! handler) -> void
Xamarin.KotlinX.Coroutines.ICancellableContinuation.IsActive.get -> bool
Xamarin.KotlinX.Coroutines.ICancellableContinuation.IsCancelled.get -> bool
Xamarin.KotlinX.Coroutines.ICancellableContinuation.IsCompleted.get -> bool
Xamarin.KotlinX.Coroutines.ICancellableContinuation.Resume(Java.Lang.Object? value, Kotlin.Jvm.Functions.IFunction1? onCancellation) -> void
Xamarin.KotlinX.Coroutines.ICancellableContinuation.Resume(Java.Lang.Object? value, Kotlin.Jvm.Functions.IFunction3? onCancellation) -> void
Xamarin.KotlinX.Coroutines.ICancellableContinuation.ResumeUndispatched(Xamarin.KotlinX.Coroutines.CoroutineDispatcher! p0, Java.Lang.Object? value) -> void
Xamarin.KotlinX.Coroutines.ICancellableContinuation.ResumeUndispatchedWithException(Xamarin.KotlinX.Coroutines.CoroutineDispatcher! p0, Java.Lang.Throwable! exception) -> void
Xamarin.KotlinX.Coroutines.ICancellableContinuation.TryResume(Java.Lang.Object? value, Java.Lang.Object? idempotent) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.ICancellableContinuation.TryResume(Java.Lang.Object? value, Java.Lang.Object? idempotent, Kotlin.Jvm.Functions.IFunction3? onCancellation) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.ICancellableContinuation.TryResumeWithException(Java.Lang.Throwable! exception) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.IChildHandle
Xamarin.KotlinX.Coroutines.IChildHandle.ChildCancelled(Java.Lang.Throwable! cause) -> bool
Xamarin.KotlinX.Coroutines.IChildHandle.Parent.get -> Xamarin.KotlinX.Coroutines.IJob?
Xamarin.KotlinX.Coroutines.IChildJob
Xamarin.KotlinX.Coroutines.IChildJob.ParentCancelled(Xamarin.KotlinX.Coroutines.IParentJob! parentJob) -> void
Xamarin.KotlinX.Coroutines.ICompletableDeferred
Xamarin.KotlinX.Coroutines.ICompletableDeferred.Complete(Java.Lang.Object? value) -> bool
Xamarin.KotlinX.Coroutines.ICompletableDeferred.CompleteExceptionally(Java.Lang.Throwable! exception) -> bool
Xamarin.KotlinX.Coroutines.ICompletableJob
Xamarin.KotlinX.Coroutines.ICompletableJob.Complete() -> bool
Xamarin.KotlinX.Coroutines.ICompletableJob.CompleteExceptionally(Java.Lang.Throwable! exception) -> bool
Xamarin.KotlinX.Coroutines.ICopyableThreadContextElement
Xamarin.KotlinX.Coroutines.ICopyableThreadContextElement.CopyForChild() -> Xamarin.KotlinX.Coroutines.ICopyableThreadContextElement!
Xamarin.KotlinX.Coroutines.ICopyableThreadContextElement.MergeForChild(Kotlin.Coroutines.ICoroutineContextElement! overwritingElement) -> Kotlin.Coroutines.ICoroutineContext!
Xamarin.KotlinX.Coroutines.ICopyableThrowable
Xamarin.KotlinX.Coroutines.ICopyableThrowable.CreateCopy() -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.ICoroutineExceptionHandler
Xamarin.KotlinX.Coroutines.ICoroutineExceptionHandler.HandleException(Kotlin.Coroutines.ICoroutineContext! context, Java.Lang.Throwable! exception) -> void
Xamarin.KotlinX.Coroutines.ICoroutineScope
Xamarin.KotlinX.Coroutines.ICoroutineScope.CoroutineContext.get -> Kotlin.Coroutines.ICoroutineContext!
Xamarin.KotlinX.Coroutines.IDeferred
Xamarin.KotlinX.Coroutines.IDeferred.Await(Kotlin.Coroutines.IContinuation! p0) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.IDeferred.Completed.get -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.IDeferred.CompletionExceptionOrNull.get -> Java.Lang.Throwable?
Xamarin.KotlinX.Coroutines.IDeferred.OnAwait.get -> Xamarin.KotlinX.Coroutines.Selects.ISelectClause1!
Xamarin.KotlinX.Coroutines.IDelay
Xamarin.KotlinX.Coroutines.IDelay.Delay(long time, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.IDelay.InvokeOnTimeout(long timeMillis, Java.Lang.IRunnable! block, Kotlin.Coroutines.ICoroutineContext! context) -> Xamarin.KotlinX.Coroutines.IDisposableHandle!
Xamarin.KotlinX.Coroutines.IDelay.ScheduleResumeAfterDelay(long timeMillis, Xamarin.KotlinX.Coroutines.ICancellableContinuation! continuation) -> void
Xamarin.KotlinX.Coroutines.IDelicateCoroutinesApi
Xamarin.KotlinX.Coroutines.IDisposableHandle
Xamarin.KotlinX.Coroutines.IDisposableHandle.Dispose() -> void
Xamarin.KotlinX.Coroutines.IExperimentalCoroutinesApi
Xamarin.KotlinX.Coroutines.IExperimentalForInheritanceCoroutinesApi
Xamarin.KotlinX.Coroutines.IFlowPreview
Xamarin.KotlinX.Coroutines.IInternalCoroutinesApi
Xamarin.KotlinX.Coroutines.IInternalForInheritanceCoroutinesApi
Xamarin.KotlinX.Coroutines.IJob
Xamarin.KotlinX.Coroutines.IJob.AttachChild(Xamarin.KotlinX.Coroutines.IChildJob! child) -> Xamarin.KotlinX.Coroutines.IChildHandle!
Xamarin.KotlinX.Coroutines.IJob.Cancel(Java.Util.Concurrent.CancellationException? cause) -> void
Xamarin.KotlinX.Coroutines.IJob.CancellationException.get -> Java.Util.Concurrent.CancellationException!
Xamarin.KotlinX.Coroutines.IJob.Children.get -> Kotlin.Sequences.ISequence!
Xamarin.KotlinX.Coroutines.IJob.InvokeOnCompletion(Kotlin.Jvm.Functions.IFunction1! handler) -> Xamarin.KotlinX.Coroutines.IDisposableHandle!
Xamarin.KotlinX.Coroutines.IJob.InvokeOnCompletion(bool onCancelling, bool invokeImmediately, Kotlin.Jvm.Functions.IFunction1! handler) -> Xamarin.KotlinX.Coroutines.IDisposableHandle!
Xamarin.KotlinX.Coroutines.IJob.IsActive.get -> bool
Xamarin.KotlinX.Coroutines.IJob.IsCancelled.get -> bool
Xamarin.KotlinX.Coroutines.IJob.IsCompleted.get -> bool
Xamarin.KotlinX.Coroutines.IJob.Join(Kotlin.Coroutines.IContinuation! p0) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.IJob.OnJoin.get -> Xamarin.KotlinX.Coroutines.Selects.ISelectClause0!
Xamarin.KotlinX.Coroutines.IJob.Parent.get -> Xamarin.KotlinX.Coroutines.IJob?
Xamarin.KotlinX.Coroutines.IJob.Plus(Xamarin.KotlinX.Coroutines.IJob! other) -> Xamarin.KotlinX.Coroutines.IJob!
Xamarin.KotlinX.Coroutines.IJob.Start() -> bool
Xamarin.KotlinX.Coroutines.IObsoleteCoroutinesApi
Xamarin.KotlinX.Coroutines.IParentJob
Xamarin.KotlinX.Coroutines.IParentJob.ChildJobCancellationCause.get -> Java.Util.Concurrent.CancellationException!
Xamarin.KotlinX.Coroutines.IThreadContextElement
Xamarin.KotlinX.Coroutines.IThreadContextElement.RestoreThreadContext(Kotlin.Coroutines.ICoroutineContext! context, Java.Lang.Object? oldState) -> void
Xamarin.KotlinX.Coroutines.IThreadContextElement.UpdateThreadContext(Kotlin.Coroutines.ICoroutineContext! context) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.InternalCoroutinesApiAttribute
Xamarin.KotlinX.Coroutines.InternalCoroutinesApiAttribute.InternalCoroutinesApiAttribute() -> void
Xamarin.KotlinX.Coroutines.InternalForInheritanceCoroutinesApiAttribute
Xamarin.KotlinX.Coroutines.InternalForInheritanceCoroutinesApiAttribute.InternalForInheritanceCoroutinesApiAttribute() -> void
Xamarin.KotlinX.Coroutines.InterruptibleKt
Xamarin.KotlinX.Coroutines.Intrinsics.CancellableKt
Xamarin.KotlinX.Coroutines.Intrinsics.UndispatchedKt
Xamarin.KotlinX.Coroutines.Job
Xamarin.KotlinX.Coroutines.JobConsts
Xamarin.KotlinX.Coroutines.JobDefaultImpls
Xamarin.KotlinX.Coroutines.JobKey
Xamarin.KotlinX.Coroutines.JobKt
Xamarin.KotlinX.Coroutines.JobSupport
Xamarin.KotlinX.Coroutines.JobSupport.AttachChild(Xamarin.KotlinX.Coroutines.IChildJob! child) -> Xamarin.KotlinX.Coroutines.IChildHandle!
Xamarin.KotlinX.Coroutines.JobSupport.AwaitInternal(Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.JobSupport.CancelCoroutine(Java.Lang.Throwable? cause) -> bool
Xamarin.KotlinX.Coroutines.JobSupport.CancellationException.get -> Java.Util.Concurrent.CancellationException!
Xamarin.KotlinX.Coroutines.JobSupport.Children.get -> Kotlin.Sequences.ISequence!
Xamarin.KotlinX.Coroutines.JobSupport.CompletionCause.get -> Java.Lang.Throwable?
Xamarin.KotlinX.Coroutines.JobSupport.CompletionCauseHandled.get -> bool
Xamarin.KotlinX.Coroutines.JobSupport.CompletionExceptionOrNull.get -> Java.Lang.Throwable?
Xamarin.KotlinX.Coroutines.JobSupport.InitParentJob(Xamarin.KotlinX.Coroutines.IJob? parent) -> void
Xamarin.KotlinX.Coroutines.JobSupport.InvokeOnCompletion(Kotlin.Jvm.Functions.IFunction1! handler) -> Xamarin.KotlinX.Coroutines.IDisposableHandle!
Xamarin.KotlinX.Coroutines.JobSupport.InvokeOnCompletion(bool onCancelling, bool invokeImmediately, Kotlin.Jvm.Functions.IFunction1! handler) -> Xamarin.KotlinX.Coroutines.IDisposableHandle!
Xamarin.KotlinX.Coroutines.JobSupport.IsCancelled.get -> bool
Xamarin.KotlinX.Coroutines.JobSupport.IsCompleted.get -> bool
Xamarin.KotlinX.Coroutines.JobSupport.IsCompletedExceptionally.get -> bool
Xamarin.KotlinX.Coroutines.JobSupport.JobSupport(bool active) -> void
Xamarin.KotlinX.Coroutines.JobSupport.JobSupport(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.KotlinX.Coroutines.JobSupport.Join(Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.JobSupport.Key.get -> Kotlin.Coroutines.ICoroutineContextKey!
Xamarin.KotlinX.Coroutines.JobSupport.OnAwaitInternal.get -> Xamarin.KotlinX.Coroutines.Selects.ISelectClause1!
Xamarin.KotlinX.Coroutines.JobSupport.OnJoin.get -> Xamarin.KotlinX.Coroutines.Selects.ISelectClause0!
Xamarin.KotlinX.Coroutines.JobSupport.ParentCancelled(Xamarin.KotlinX.Coroutines.IParentJob! parentJob) -> void
Xamarin.KotlinX.Coroutines.JobSupport.Start() -> bool
Xamarin.KotlinX.Coroutines.JobSupport.ToCancellationException(Java.Lang.Throwable! _this_toCancellationException, string? message) -> Java.Util.Concurrent.CancellationException!
Xamarin.KotlinX.Coroutines.JobSupport.ToDebugString() -> string!
Xamarin.KotlinX.Coroutines.JobSupportKt
Xamarin.KotlinX.Coroutines.MainCoroutineDispatcher
Xamarin.KotlinX.Coroutines.MainCoroutineDispatcher.MainCoroutineDispatcher() -> void
Xamarin.KotlinX.Coroutines.MainCoroutineDispatcher.MainCoroutineDispatcher(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.KotlinX.Coroutines.MainCoroutineDispatcher.ToStringInternalImpl() -> string?
Xamarin.KotlinX.Coroutines.NonCancellable
Xamarin.KotlinX.Coroutines.NonCancellable.AttachChild(Xamarin.KotlinX.Coroutines.IChildJob! child) -> Xamarin.KotlinX.Coroutines.IChildHandle!
Xamarin.KotlinX.Coroutines.NonCancellable.Cancel(Java.Util.Concurrent.CancellationException? cause) -> void
Xamarin.KotlinX.Coroutines.NonCancellable.CancellationException.get -> Java.Util.Concurrent.CancellationException!
Xamarin.KotlinX.Coroutines.NonCancellable.Children.get -> Kotlin.Sequences.ISequence!
Xamarin.KotlinX.Coroutines.NonCancellable.InvokeOnCompletion(Kotlin.Jvm.Functions.IFunction1! handler) -> Xamarin.KotlinX.Coroutines.IDisposableHandle!
Xamarin.KotlinX.Coroutines.NonCancellable.InvokeOnCompletion(bool onCancelling, bool invokeImmediately, Kotlin.Jvm.Functions.IFunction1! handler) -> Xamarin.KotlinX.Coroutines.IDisposableHandle!
Xamarin.KotlinX.Coroutines.NonCancellable.IsActive.get -> bool
Xamarin.KotlinX.Coroutines.NonCancellable.IsCancelled.get -> bool
Xamarin.KotlinX.Coroutines.NonCancellable.IsCompleted.get -> bool
Xamarin.KotlinX.Coroutines.NonCancellable.Join(Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.NonCancellable.OnJoin.get -> Xamarin.KotlinX.Coroutines.Selects.ISelectClause0!
Xamarin.KotlinX.Coroutines.NonCancellable.Parent.get -> Xamarin.KotlinX.Coroutines.IJob?
Xamarin.KotlinX.Coroutines.NonCancellable.Plus(Xamarin.KotlinX.Coroutines.IJob! other) -> Xamarin.KotlinX.Coroutines.IJob!
Xamarin.KotlinX.Coroutines.NonCancellable.Start() -> bool
Xamarin.KotlinX.Coroutines.NonDisposableHandle
Xamarin.KotlinX.Coroutines.NonDisposableHandle.ChildCancelled(Java.Lang.Throwable! cause) -> bool
Xamarin.KotlinX.Coroutines.NonDisposableHandle.Dispose() -> void
Xamarin.KotlinX.Coroutines.NonDisposableHandle.Parent.get -> Xamarin.KotlinX.Coroutines.IJob?
Xamarin.KotlinX.Coroutines.ObsoleteCoroutinesApiAttribute
Xamarin.KotlinX.Coroutines.ObsoleteCoroutinesApiAttribute.ObsoleteCoroutinesApiAttribute() -> void
Xamarin.KotlinX.Coroutines.ParentJobDefaultImpls
Xamarin.KotlinX.Coroutines.RunnableKt
Xamarin.KotlinX.Coroutines.SchedulerTaskKt
Xamarin.KotlinX.Coroutines.Scheduling.CoroutineSchedulerKt
Xamarin.KotlinX.Coroutines.Scheduling.TasksKt
Xamarin.KotlinX.Coroutines.Scheduling.WorkQueueKt
Xamarin.KotlinX.Coroutines.Selects.ISelectBuilder
Xamarin.KotlinX.Coroutines.Selects.ISelectBuilder.Invoke(Xamarin.KotlinX.Coroutines.Selects.ISelectClause0! p0, Kotlin.Jvm.Functions.IFunction1! block) -> void
Xamarin.KotlinX.Coroutines.Selects.ISelectBuilder.Invoke(Xamarin.KotlinX.Coroutines.Selects.ISelectClause1! p0, Kotlin.Jvm.Functions.IFunction2! block) -> void
Xamarin.KotlinX.Coroutines.Selects.ISelectBuilder.Invoke(Xamarin.KotlinX.Coroutines.Selects.ISelectClause2! p0, Java.Lang.Object? param, Kotlin.Jvm.Functions.IFunction2! block) -> void
Xamarin.KotlinX.Coroutines.Selects.ISelectBuilder.Invoke(Xamarin.KotlinX.Coroutines.Selects.ISelectClause2! p0, Kotlin.Jvm.Functions.IFunction2! block) -> void
Xamarin.KotlinX.Coroutines.Selects.ISelectBuilder.OnTimeout(long timeMillis, Kotlin.Jvm.Functions.IFunction1! block) -> void
Xamarin.KotlinX.Coroutines.Selects.ISelectClause
Xamarin.KotlinX.Coroutines.Selects.ISelectClause.ClauseObject.get -> Java.Lang.Object!
Xamarin.KotlinX.Coroutines.Selects.ISelectClause.OnCancellationConstructor.get -> Kotlin.Jvm.Functions.IFunction3?
Xamarin.KotlinX.Coroutines.Selects.ISelectClause.ProcessResFunc.get -> Kotlin.Jvm.Functions.IFunction3!
Xamarin.KotlinX.Coroutines.Selects.ISelectClause.RegFunc.get -> Kotlin.Jvm.Functions.IFunction3!
Xamarin.KotlinX.Coroutines.Selects.ISelectClause0
Xamarin.KotlinX.Coroutines.Selects.ISelectClause1
Xamarin.KotlinX.Coroutines.Selects.ISelectClause2
Xamarin.KotlinX.Coroutines.Selects.ISelectInstance
Xamarin.KotlinX.Coroutines.Selects.ISelectInstance.Context.get -> Kotlin.Coroutines.ICoroutineContext!
Xamarin.KotlinX.Coroutines.Selects.ISelectInstance.DisposeOnCompletion(Xamarin.KotlinX.Coroutines.IDisposableHandle! disposableHandle) -> void
Xamarin.KotlinX.Coroutines.Selects.ISelectInstance.SelectInRegistrationPhase(Java.Lang.Object? internalResult) -> void
Xamarin.KotlinX.Coroutines.Selects.ISelectInstance.TrySelect(Java.Lang.Object! clauseObject, Java.Lang.Object? result) -> bool
Xamarin.KotlinX.Coroutines.Selects.OnTimeoutKt
Xamarin.KotlinX.Coroutines.Selects.SelectBuilderDefaultImpls
Xamarin.KotlinX.Coroutines.Selects.SelectKt
Xamarin.KotlinX.Coroutines.Selects.SelectOldKt
Xamarin.KotlinX.Coroutines.Selects.SelectUnbiasedKt
Xamarin.KotlinX.Coroutines.Selects.WhileSelectKt
Xamarin.KotlinX.Coroutines.Stream.StreamKt
Xamarin.KotlinX.Coroutines.SupervisorKt
Xamarin.KotlinX.Coroutines.Sync.IMutex
Xamarin.KotlinX.Coroutines.Sync.IMutex.HoldsLock(Java.Lang.Object! owner) -> bool
Xamarin.KotlinX.Coroutines.Sync.IMutex.IsLocked.get -> bool
Xamarin.KotlinX.Coroutines.Sync.IMutex.Lock(Java.Lang.Object? owner, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.Sync.IMutex.OnLock.get -> Xamarin.KotlinX.Coroutines.Selects.ISelectClause2!
Xamarin.KotlinX.Coroutines.Sync.IMutex.TryLock(Java.Lang.Object? owner) -> bool
Xamarin.KotlinX.Coroutines.Sync.IMutex.Unlock(Java.Lang.Object? owner) -> void
Xamarin.KotlinX.Coroutines.Sync.ISemaphore
Xamarin.KotlinX.Coroutines.Sync.ISemaphore.Acquire(Kotlin.Coroutines.IContinuation! p0) -> Java.Lang.Object?
Xamarin.KotlinX.Coroutines.Sync.ISemaphore.AvailablePermits.get -> int
Xamarin.KotlinX.Coroutines.Sync.ISemaphore.Release() -> void
Xamarin.KotlinX.Coroutines.Sync.ISemaphore.TryAcquire() -> bool
Xamarin.KotlinX.Coroutines.Sync.MutexDefaultImpls
Xamarin.KotlinX.Coroutines.Sync.MutexKt
Xamarin.KotlinX.Coroutines.Sync.SemaphoreKt
Xamarin.KotlinX.Coroutines.ThreadContextElementDefaultImpls
Xamarin.KotlinX.Coroutines.ThreadContextElementKt
Xamarin.KotlinX.Coroutines.ThreadPoolDispatcherKt
Xamarin.KotlinX.Coroutines.Time.TimeKt
Xamarin.KotlinX.Coroutines.TimeoutCancellationException
Xamarin.KotlinX.Coroutines.TimeoutCancellationException.CreateCopy() -> Xamarin.KotlinX.Coroutines.TimeoutCancellationException!
Xamarin.KotlinX.Coroutines.TimeoutKt
Xamarin.KotlinX.Coroutines.YieldKt
_COROUTINE.ArtificialStackFrames
_COROUTINE.ArtificialStackFrames.ArtificialStackFrames() -> void
_COROUTINE.ArtificialStackFrames.CoroutineBoundary() -> Java.Lang.StackTraceElement!
_COROUTINE.ArtificialStackFrames.CoroutineCreation() -> Java.Lang.StackTraceElement!
_COROUTINE.CoroutineDebuggingKt
abstract Xamarin.KotlinX.Coroutines.CoroutineDispatcher.Dispatch(Kotlin.Coroutines.ICoroutineContext! context, Java.Lang.IRunnable! block) -> void
abstract Xamarin.KotlinX.Coroutines.ExecutorCoroutineDispatcher.Close() -> void
abstract Xamarin.KotlinX.Coroutines.ExecutorCoroutineDispatcher.Executor.get -> Java.Util.Concurrent.IExecutor!
abstract Xamarin.KotlinX.Coroutines.MainCoroutineDispatcher.Immediate.get -> Xamarin.KotlinX.Coroutines.MainCoroutineDispatcher!
const Xamarin.KotlinX.Coroutines.Channels.Channel.Buffered = -2 -> int
const Xamarin.KotlinX.Coroutines.Channels.Channel.Conflated = -1 -> int
const Xamarin.KotlinX.Coroutines.Channels.Channel.DefaultBufferPropertyName = "kotlinx.coroutines.channels.defaultBuffer" -> string!
const Xamarin.KotlinX.Coroutines.Channels.Channel.OptionalChannel = -3 -> int
const Xamarin.KotlinX.Coroutines.Channels.Channel.Rendezvous = 0 -> int
const Xamarin.KotlinX.Coroutines.Channels.Channel.Unlimited = 2147483647 -> int
const Xamarin.KotlinX.Coroutines.Channels.ChannelFactory.Buffered = -2 -> int
const Xamarin.KotlinX.Coroutines.Channels.ChannelFactory.Conflated = -1 -> int
const Xamarin.KotlinX.Coroutines.Channels.ChannelFactory.DefaultBufferPropertyName = "kotlinx.coroutines.channels.defaultBuffer" -> string!
const Xamarin.KotlinX.Coroutines.Channels.ChannelFactory.Rendezvous = 0 -> int
const Xamarin.KotlinX.Coroutines.Channels.ChannelFactory.Unlimited = 2147483647 -> int
const Xamarin.KotlinX.Coroutines.Channels.ChannelsKt.DefaultCloseMessage = "Channel was closed" -> string!
const Xamarin.KotlinX.Coroutines.DebugKt.DebugPropertyName = "kotlinx.coroutines.debug" -> string!
const Xamarin.KotlinX.Coroutines.DebugKt.DebugPropertyValueAuto = "auto" -> string!
const Xamarin.KotlinX.Coroutines.DebugKt.DebugPropertyValueOff = "off" -> string!
const Xamarin.KotlinX.Coroutines.DebugKt.DebugPropertyValueOn = "on" -> string!
const Xamarin.KotlinX.Coroutines.DispatchersKt.IoParallelismPropertyName = "kotlinx.coroutines.io.parallelism" -> string!
const Xamarin.KotlinX.Coroutines.Flow.FlowKt.DefaultConcurrencyPropertyName = "kotlinx.coroutines.flow.defaultConcurrency" -> string!
override Xamarin.KotlinX.Coroutines.AbstractTimeSourceKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.AwaitKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.BuildersKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.CancellableContinuationDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.CancellableContinuationImplKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.CancellableContinuationKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.ActorKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.ActorScopeDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.BroadcastChannelDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.BroadcastChannelKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.BroadcastKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.BufferOverflow.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.BufferedChannelKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.ChannelDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.ChannelFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.ChannelIteratorDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.ChannelKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.ChannelResult.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.ChannelResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.ChannelsKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.ClosedReceiveChannelException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.ClosedSendChannelException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.ConflatedBroadcastChannel.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.ProduceKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.ProducerScopeDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.ReceiveChannelDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.SendChannelDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.TickerChannelsKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Channels.TickerMode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.ChildHandleDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.ChildJobDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.CompletableDeferredDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.CompletableDeferredKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.CompletableJobDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.CompletionHandlerException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.CompletionHandler_commonKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.CompletionStateKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.CopyableThreadContextElementDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.CoroutineContextKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.CoroutineDispatcher.Get(Kotlin.Coroutines.ICoroutineContextKey! key) -> Java.Lang.Object?
override Xamarin.KotlinX.Coroutines.CoroutineDispatcher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.CoroutineDispatcher.MinusKey(Kotlin.Coroutines.ICoroutineContextKey! key) -> Kotlin.Coroutines.ICoroutineContext!
override Xamarin.KotlinX.Coroutines.CoroutineDispatcher.ThresholdClass.get -> nint
override Xamarin.KotlinX.Coroutines.CoroutineDispatcher.ThresholdType.get -> System.Type!
override Xamarin.KotlinX.Coroutines.CoroutineExceptionHandlerDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.CoroutineExceptionHandlerKey.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.CoroutineExceptionHandlerKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.CoroutineName.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.CoroutineName.Key.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.CoroutineScopeKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.CoroutineStart.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.CoroutineStart.WhenMappings.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.DebugKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.DebugStringsKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.DefaultExecutorKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.DeferredDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.DelayDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.DelayKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.DispatchedTaskKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Dispatchers.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.DispatchersKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.EventLoopKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.EventLoop_commonKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.ExceptionsKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.ExecutorCoroutineDispatcher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.ExecutorCoroutineDispatcher.ThresholdClass.get -> nint
override Xamarin.KotlinX.Coroutines.ExecutorCoroutineDispatcher.ThresholdType.get -> System.Type!
override Xamarin.KotlinX.Coroutines.ExecutorsKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Flow.FlowKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Flow.LintKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Flow.SharedFlowKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Flow.SharingCommand.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Flow.SharingStartedCompanion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Flow.SharingStartedKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Flow.StateFlowKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Future.FutureKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.GlobalScope.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.GuidanceKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.InterruptibleKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Intrinsics.CancellableKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Intrinsics.UndispatchedKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.JobDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.JobKey.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.JobKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.JobSupport.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.JobSupport.ThresholdClass.get -> nint
override Xamarin.KotlinX.Coroutines.JobSupport.ThresholdType.get -> System.Type!
override Xamarin.KotlinX.Coroutines.JobSupportKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.MainCoroutineDispatcher.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.MainCoroutineDispatcher.ThresholdClass.get -> nint
override Xamarin.KotlinX.Coroutines.MainCoroutineDispatcher.ThresholdType.get -> System.Type!
override Xamarin.KotlinX.Coroutines.NonCancellable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.NonDisposableHandle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.ParentJobDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.RunnableKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.SchedulerTaskKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Scheduling.CoroutineSchedulerKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Scheduling.TasksKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Scheduling.WorkQueueKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Selects.OnTimeoutKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Selects.SelectBuilderDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Selects.SelectKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Selects.SelectOldKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Selects.SelectUnbiasedKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Selects.WhileSelectKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Stream.StreamKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.SupervisorKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Sync.MutexDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Sync.MutexKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Sync.SemaphoreKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.ThreadContextElementDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.ThreadContextElementKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.ThreadPoolDispatcherKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.Time.TimeKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.TimeoutCancellationException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.TimeoutKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.KotlinX.Coroutines.YieldKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override _COROUTINE.ArtificialStackFrames.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override _COROUTINE.CoroutineDebuggingKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
static Xamarin.KotlinX.Coroutines.AwaitKt.AwaitAll(System.Collections.ICollection! obj, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.AwaitKt.AwaitAll(Xamarin.KotlinX.Coroutines.IDeferred![]! deferreds, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.AwaitKt.JoinAll(System.Collections.Generic.ICollection<Xamarin.KotlinX.Coroutines.IJob!>! p0, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.AwaitKt.JoinAll(Xamarin.KotlinX.Coroutines.IJob![]! jobs, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.BuildersKt.Async(Xamarin.KotlinX.Coroutines.ICoroutineScope! _this_async, Kotlin.Coroutines.ICoroutineContext! context, Xamarin.KotlinX.Coroutines.CoroutineStart! start, Kotlin.Jvm.Functions.IFunction2! block) -> Xamarin.KotlinX.Coroutines.IDeferred!
static Xamarin.KotlinX.Coroutines.BuildersKt.Invoke(Xamarin.KotlinX.Coroutines.CoroutineDispatcher! _this_invoke, Kotlin.Jvm.Functions.IFunction2! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.BuildersKt.Launch(Xamarin.KotlinX.Coroutines.ICoroutineScope! _this_launch, Kotlin.Coroutines.ICoroutineContext! context, Xamarin.KotlinX.Coroutines.CoroutineStart! start, Kotlin.Jvm.Functions.IFunction2! block) -> Xamarin.KotlinX.Coroutines.IJob!
static Xamarin.KotlinX.Coroutines.BuildersKt.RunBlocking(Kotlin.Coroutines.ICoroutineContext! context, Kotlin.Jvm.Functions.IFunction2! block) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.BuildersKt.WithContext(Kotlin.Coroutines.ICoroutineContext! context, Kotlin.Jvm.Functions.IFunction2! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.CancellableContinuationKt.DisposeOnCancellation(Xamarin.KotlinX.Coroutines.ICancellableContinuation! obj, Xamarin.KotlinX.Coroutines.IDisposableHandle! handle) -> void
static Xamarin.KotlinX.Coroutines.CancellableContinuationKt.SuspendCancellableCoroutine(Kotlin.Jvm.Functions.IFunction1! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Channels.ActorKt.Actor(Xamarin.KotlinX.Coroutines.ICoroutineScope! obj, Kotlin.Coroutines.ICoroutineContext! context, int capacity, Xamarin.KotlinX.Coroutines.CoroutineStart! start, Kotlin.Jvm.Functions.IFunction1? onCompletion, Kotlin.Jvm.Functions.IFunction2! block) -> Xamarin.KotlinX.Coroutines.Channels.ISendChannel!
static Xamarin.KotlinX.Coroutines.Channels.ActorScopeDefaultImpls.GetOnReceiveOrNull(Xamarin.KotlinX.Coroutines.Channels.IActorScope! _this) -> Xamarin.KotlinX.Coroutines.Selects.ISelectClause1!
static Xamarin.KotlinX.Coroutines.Channels.ActorScopeDefaultImpls.Poll(Xamarin.KotlinX.Coroutines.Channels.IActorScope! _this) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Channels.ActorScopeDefaultImpls.ReceiveOrNull(Xamarin.KotlinX.Coroutines.Channels.IActorScope! _this, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Channels.BroadcastChannelDefaultImpls.Offer(Xamarin.KotlinX.Coroutines.Channels.IBroadcastChannel! _this, Java.Lang.Object? element) -> bool
static Xamarin.KotlinX.Coroutines.Channels.BroadcastChannelKt.BroadcastChannel(int capacity) -> Xamarin.KotlinX.Coroutines.Channels.IBroadcastChannel!
static Xamarin.KotlinX.Coroutines.Channels.BroadcastKt.Broadcast(Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! obj, int capacity, Xamarin.KotlinX.Coroutines.CoroutineStart! start) -> Xamarin.KotlinX.Coroutines.Channels.IBroadcastChannel!
static Xamarin.KotlinX.Coroutines.Channels.BroadcastKt.Broadcast(Xamarin.KotlinX.Coroutines.ICoroutineScope! obj, Kotlin.Coroutines.ICoroutineContext! context, int capacity, Xamarin.KotlinX.Coroutines.CoroutineStart! start, Kotlin.Jvm.Functions.IFunction1? onCompletion, Kotlin.Jvm.Functions.IFunction2! block) -> Xamarin.KotlinX.Coroutines.Channels.IBroadcastChannel!
static Xamarin.KotlinX.Coroutines.Channels.BufferOverflow.DropLatest.get -> Xamarin.KotlinX.Coroutines.Channels.BufferOverflow?
static Xamarin.KotlinX.Coroutines.Channels.BufferOverflow.DropOldest.get -> Xamarin.KotlinX.Coroutines.Channels.BufferOverflow?
static Xamarin.KotlinX.Coroutines.Channels.BufferOverflow.Entries.get -> Kotlin.Enums.IEnumEntries!
static Xamarin.KotlinX.Coroutines.Channels.BufferOverflow.Suspend.get -> Xamarin.KotlinX.Coroutines.Channels.BufferOverflow?
static Xamarin.KotlinX.Coroutines.Channels.BufferOverflow.ValueOf(string? value) -> Xamarin.KotlinX.Coroutines.Channels.BufferOverflow?
static Xamarin.KotlinX.Coroutines.Channels.BufferOverflow.Values() -> Xamarin.KotlinX.Coroutines.Channels.BufferOverflow![]?
static Xamarin.KotlinX.Coroutines.Channels.BufferedChannelKt.CHANNEL_CLOSED.get -> Java.Lang.Object!
static Xamarin.KotlinX.Coroutines.Channels.BufferedChannelKt.CreateSegmentFunction() -> Kotlin.Reflect.IKFunction!
static Xamarin.KotlinX.Coroutines.Channels.Channel.Factory.get -> Xamarin.KotlinX.Coroutines.Channels.ChannelFactory!
static Xamarin.KotlinX.Coroutines.Channels.ChannelDefaultImpls.GetOnReceiveOrNull(Xamarin.KotlinX.Coroutines.Channels.IChannel! _this) -> Xamarin.KotlinX.Coroutines.Selects.ISelectClause1!
static Xamarin.KotlinX.Coroutines.Channels.ChannelDefaultImpls.Offer(Xamarin.KotlinX.Coroutines.Channels.IChannel! _this, Java.Lang.Object? element) -> bool
static Xamarin.KotlinX.Coroutines.Channels.ChannelDefaultImpls.Poll(Xamarin.KotlinX.Coroutines.Channels.IChannel! _this) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Channels.ChannelDefaultImpls.ReceiveOrNull(Xamarin.KotlinX.Coroutines.Channels.IChannel! _this, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Channels.ChannelKt.Channel(int capacity, Xamarin.KotlinX.Coroutines.Channels.BufferOverflow! onBufferOverflow, Kotlin.Jvm.Functions.IFunction1? onUndeliveredElement) -> Xamarin.KotlinX.Coroutines.Channels.IChannel!
static Xamarin.KotlinX.Coroutines.Channels.ChannelKt.GetOrElse(Java.Lang.Object! obj, Kotlin.Jvm.Functions.IFunction1! onFailure) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Channels.ChannelKt.OnClosed(Java.Lang.Object! obj, Kotlin.Jvm.Functions.IFunction1! action) -> Java.Lang.Object!
static Xamarin.KotlinX.Coroutines.Channels.ChannelKt.OnFailure(Java.Lang.Object! obj, Kotlin.Jvm.Functions.IFunction1! action) -> Java.Lang.Object!
static Xamarin.KotlinX.Coroutines.Channels.ChannelKt.OnSuccess(Java.Lang.Object! obj, Kotlin.Jvm.Functions.IFunction1! action) -> Java.Lang.Object!
static Xamarin.KotlinX.Coroutines.Channels.ChannelsKt.CancelConsumed(Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! _this_cancelConsumed, Java.Lang.Throwable? cause) -> void
static Xamarin.KotlinX.Coroutines.Channels.ChannelsKt.Consume(Xamarin.KotlinX.Coroutines.Channels.IBroadcastChannel! _this_consume, Kotlin.Jvm.Functions.IFunction1! block) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Channels.ChannelsKt.Consume(Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! _this_consume, Kotlin.Jvm.Functions.IFunction1! block) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Channels.ChannelsKt.ConsumeEach(Xamarin.KotlinX.Coroutines.Channels.IBroadcastChannel! _this_consumeEach, Kotlin.Jvm.Functions.IFunction1! action, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Channels.ChannelsKt.ConsumeEach(Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! _this_consumeEach, Kotlin.Jvm.Functions.IFunction1! action, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Channels.ChannelsKt.Consumes(Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! _this_consumes) -> Kotlin.Jvm.Functions.IFunction1!
static Xamarin.KotlinX.Coroutines.Channels.ChannelsKt.ConsumesAll(params Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel![]! channels) -> Kotlin.Jvm.Functions.IFunction1!
static Xamarin.KotlinX.Coroutines.Channels.ChannelsKt.DistinctBy(Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! _this_distinctBy, Kotlin.Coroutines.ICoroutineContext! context, Kotlin.Jvm.Functions.IFunction2! selector) -> Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel!
static Xamarin.KotlinX.Coroutines.Channels.ChannelsKt.Filter(Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! _this_filter, Kotlin.Coroutines.ICoroutineContext! context, Kotlin.Jvm.Functions.IFunction2! predicate) -> Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel!
static Xamarin.KotlinX.Coroutines.Channels.ChannelsKt.FilterNotNull(Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! _this_filterNotNull) -> Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel!
static Xamarin.KotlinX.Coroutines.Channels.ChannelsKt.Map(Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! _this_map, Kotlin.Coroutines.ICoroutineContext! context, Kotlin.Jvm.Functions.IFunction2! transform) -> Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel!
static Xamarin.KotlinX.Coroutines.Channels.ChannelsKt.MapIndexed(Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! _this_mapIndexed, Kotlin.Coroutines.ICoroutineContext! context, Kotlin.Jvm.Functions.IFunction3! transform) -> Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel!
static Xamarin.KotlinX.Coroutines.Channels.ChannelsKt.ToChannel(Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! _this_toChannel, Java.Lang.Object! destination, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Channels.ChannelsKt.ToCollection(Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! _this_toCollection, Java.Lang.Object! destination, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Channels.ChannelsKt.ToList(Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! _this_toList, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Channels.ChannelsKt.ToMap(Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! _this_toMap, Java.Lang.Object! destination, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Channels.ChannelsKt.ToMutableSet(Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! _this_toMutableSet, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Channels.ChannelsKt.TrySendBlocking(Xamarin.KotlinX.Coroutines.Channels.ISendChannel! _this_trySendBlocking, Java.Lang.Object? element) -> Java.Lang.Object!
static Xamarin.KotlinX.Coroutines.Channels.ChannelsKt.Zip(Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! _this_zip, Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! other, Kotlin.Coroutines.ICoroutineContext! context, Kotlin.Jvm.Functions.IFunction2! transform) -> Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel!
static Xamarin.KotlinX.Coroutines.Channels.ProduceKt.AwaitClose(Xamarin.KotlinX.Coroutines.Channels.IProducerScope! p0, Kotlin.Jvm.Functions.IFunction0! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Channels.ProduceKt.Produce(Xamarin.KotlinX.Coroutines.ICoroutineScope! obj, Kotlin.Coroutines.ICoroutineContext! context, int capacity, Kotlin.Jvm.Functions.IFunction2! block) -> Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel!
static Xamarin.KotlinX.Coroutines.Channels.ProduceKt.Produce(Xamarin.KotlinX.Coroutines.ICoroutineScope! obj, Kotlin.Coroutines.ICoroutineContext! context, int capacity, Xamarin.KotlinX.Coroutines.CoroutineStart! start, Kotlin.Jvm.Functions.IFunction1? onCompletion, Kotlin.Jvm.Functions.IFunction2! block) -> Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel!
static Xamarin.KotlinX.Coroutines.Channels.ProducerScopeDefaultImpls.Offer(Xamarin.KotlinX.Coroutines.Channels.IProducerScope! _this, Java.Lang.Object? element) -> bool
static Xamarin.KotlinX.Coroutines.Channels.ReceiveChannelDefaultImpls.GetOnReceiveOrNull(Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! _this) -> Xamarin.KotlinX.Coroutines.Selects.ISelectClause1!
static Xamarin.KotlinX.Coroutines.Channels.ReceiveChannelDefaultImpls.Poll(Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! _this) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Channels.ReceiveChannelDefaultImpls.ReceiveOrNull(Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! p0, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Channels.SendChannelDefaultImpls.Offer(Xamarin.KotlinX.Coroutines.Channels.ISendChannel! _this, Java.Lang.Object? element) -> bool
static Xamarin.KotlinX.Coroutines.Channels.TickerChannelsKt.Ticker(long delayMillis, long initialDelayMillis, Kotlin.Coroutines.ICoroutineContext! context, Xamarin.KotlinX.Coroutines.Channels.TickerMode! mode) -> Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel!
static Xamarin.KotlinX.Coroutines.Channels.TickerMode.Entries.get -> Kotlin.Enums.IEnumEntries!
static Xamarin.KotlinX.Coroutines.Channels.TickerMode.FixedDelay.get -> Xamarin.KotlinX.Coroutines.Channels.TickerMode?
static Xamarin.KotlinX.Coroutines.Channels.TickerMode.FixedPeriod.get -> Xamarin.KotlinX.Coroutines.Channels.TickerMode?
static Xamarin.KotlinX.Coroutines.Channels.TickerMode.ValueOf(string? value) -> Xamarin.KotlinX.Coroutines.Channels.TickerMode?
static Xamarin.KotlinX.Coroutines.Channels.TickerMode.Values() -> Xamarin.KotlinX.Coroutines.Channels.TickerMode![]?
static Xamarin.KotlinX.Coroutines.ChildJobDefaultImpls.Fold(Xamarin.KotlinX.Coroutines.IChildJob! _this, Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction2! operation) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.ChildJobDefaultImpls.Get(Xamarin.KotlinX.Coroutines.IChildJob! _this, Kotlin.Coroutines.ICoroutineContextKey! key) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.ChildJobDefaultImpls.MinusKey(Xamarin.KotlinX.Coroutines.IChildJob! _this, Kotlin.Coroutines.ICoroutineContextKey! key) -> Kotlin.Coroutines.ICoroutineContext!
static Xamarin.KotlinX.Coroutines.ChildJobDefaultImpls.Plus(Xamarin.KotlinX.Coroutines.IChildJob! _this, Kotlin.Coroutines.ICoroutineContext! context) -> Kotlin.Coroutines.ICoroutineContext!
static Xamarin.KotlinX.Coroutines.ChildJobDefaultImpls.Plus(Xamarin.KotlinX.Coroutines.IChildJob! _this, Xamarin.KotlinX.Coroutines.IJob! other) -> Xamarin.KotlinX.Coroutines.IJob!
static Xamarin.KotlinX.Coroutines.CompletableDeferredDefaultImpls.Fold(Xamarin.KotlinX.Coroutines.ICompletableDeferred! _this, Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction2! operation) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.CompletableDeferredDefaultImpls.Get(Xamarin.KotlinX.Coroutines.ICompletableDeferred! _this, Kotlin.Coroutines.ICoroutineContextKey! key) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.CompletableDeferredDefaultImpls.MinusKey(Xamarin.KotlinX.Coroutines.ICompletableDeferred! _this, Kotlin.Coroutines.ICoroutineContextKey! key) -> Kotlin.Coroutines.ICoroutineContext!
static Xamarin.KotlinX.Coroutines.CompletableDeferredDefaultImpls.Plus(Xamarin.KotlinX.Coroutines.ICompletableDeferred! _this, Kotlin.Coroutines.ICoroutineContext! context) -> Kotlin.Coroutines.ICoroutineContext!
static Xamarin.KotlinX.Coroutines.CompletableDeferredDefaultImpls.Plus(Xamarin.KotlinX.Coroutines.ICompletableDeferred! _this, Xamarin.KotlinX.Coroutines.IJob! other) -> Xamarin.KotlinX.Coroutines.IJob!
static Xamarin.KotlinX.Coroutines.CompletableDeferredKt.CompletableDeferred(Java.Lang.Object? value) -> Xamarin.KotlinX.Coroutines.ICompletableDeferred!
static Xamarin.KotlinX.Coroutines.CompletableDeferredKt.CompletableDeferred(Xamarin.KotlinX.Coroutines.IJob? parent) -> Xamarin.KotlinX.Coroutines.ICompletableDeferred!
static Xamarin.KotlinX.Coroutines.CompletableDeferredKt.CompleteWith(Xamarin.KotlinX.Coroutines.ICompletableDeferred! obj, Java.Lang.Object! result) -> bool
static Xamarin.KotlinX.Coroutines.CompletableJobDefaultImpls.Fold(Xamarin.KotlinX.Coroutines.ICompletableJob! _this, Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction2! operation) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.CompletableJobDefaultImpls.Get(Xamarin.KotlinX.Coroutines.ICompletableJob! _this, Kotlin.Coroutines.ICoroutineContextKey! key) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.CompletableJobDefaultImpls.MinusKey(Xamarin.KotlinX.Coroutines.ICompletableJob! _this, Kotlin.Coroutines.ICoroutineContextKey! key) -> Kotlin.Coroutines.ICoroutineContext!
static Xamarin.KotlinX.Coroutines.CompletableJobDefaultImpls.Plus(Xamarin.KotlinX.Coroutines.ICompletableJob! _this, Kotlin.Coroutines.ICoroutineContext! context) -> Kotlin.Coroutines.ICoroutineContext!
static Xamarin.KotlinX.Coroutines.CompletableJobDefaultImpls.Plus(Xamarin.KotlinX.Coroutines.ICompletableJob! _this, Xamarin.KotlinX.Coroutines.IJob! other) -> Xamarin.KotlinX.Coroutines.IJob!
static Xamarin.KotlinX.Coroutines.CopyableThreadContextElementDefaultImpls.Fold(Xamarin.KotlinX.Coroutines.ICopyableThreadContextElement! _this, Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction2! operation) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.CopyableThreadContextElementDefaultImpls.Get(Xamarin.KotlinX.Coroutines.ICopyableThreadContextElement! _this, Kotlin.Coroutines.ICoroutineContextKey! key) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.CopyableThreadContextElementDefaultImpls.MinusKey(Xamarin.KotlinX.Coroutines.ICopyableThreadContextElement! _this, Kotlin.Coroutines.ICoroutineContextKey! key) -> Kotlin.Coroutines.ICoroutineContext!
static Xamarin.KotlinX.Coroutines.CopyableThreadContextElementDefaultImpls.Plus(Xamarin.KotlinX.Coroutines.ICopyableThreadContextElement! _this, Kotlin.Coroutines.ICoroutineContext! context) -> Kotlin.Coroutines.ICoroutineContext!
static Xamarin.KotlinX.Coroutines.CoroutineContextKt.GetCoroutineName(Kotlin.Coroutines.ICoroutineContext! obj) -> string?
static Xamarin.KotlinX.Coroutines.CoroutineContextKt.NewCoroutineContext(Kotlin.Coroutines.ICoroutineContext! obj, Kotlin.Coroutines.ICoroutineContext! addedContext) -> Kotlin.Coroutines.ICoroutineContext!
static Xamarin.KotlinX.Coroutines.CoroutineContextKt.NewCoroutineContext(Xamarin.KotlinX.Coroutines.ICoroutineScope! obj, Kotlin.Coroutines.ICoroutineContext! context) -> Kotlin.Coroutines.ICoroutineContext!
static Xamarin.KotlinX.Coroutines.CoroutineExceptionHandlerDefaultImpls.Fold(Xamarin.KotlinX.Coroutines.ICoroutineExceptionHandler! _this, Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction2! operation) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.CoroutineExceptionHandlerDefaultImpls.Get(Xamarin.KotlinX.Coroutines.ICoroutineExceptionHandler! _this, Kotlin.Coroutines.ICoroutineContextKey! key) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.CoroutineExceptionHandlerDefaultImpls.MinusKey(Xamarin.KotlinX.Coroutines.ICoroutineExceptionHandler! _this, Kotlin.Coroutines.ICoroutineContextKey! key) -> Kotlin.Coroutines.ICoroutineContext!
static Xamarin.KotlinX.Coroutines.CoroutineExceptionHandlerDefaultImpls.Plus(Xamarin.KotlinX.Coroutines.ICoroutineExceptionHandler! _this, Kotlin.Coroutines.ICoroutineContext! context) -> Kotlin.Coroutines.ICoroutineContext!
static Xamarin.KotlinX.Coroutines.CoroutineExceptionHandlerKt.CoroutineExceptionHandler(Kotlin.Jvm.Functions.IFunction2! handler) -> Xamarin.KotlinX.Coroutines.ICoroutineExceptionHandler!
static Xamarin.KotlinX.Coroutines.CoroutineExceptionHandlerKt.HandleCoroutineException(Kotlin.Coroutines.ICoroutineContext! context, Java.Lang.Throwable! exception) -> void
static Xamarin.KotlinX.Coroutines.CoroutineScopeKt.Cancel(Xamarin.KotlinX.Coroutines.ICoroutineScope! obj, Java.Util.Concurrent.CancellationException? cause) -> void
static Xamarin.KotlinX.Coroutines.CoroutineScopeKt.Cancel(Xamarin.KotlinX.Coroutines.ICoroutineScope! obj, string! message, Java.Lang.Throwable? cause) -> void
static Xamarin.KotlinX.Coroutines.CoroutineScopeKt.CoroutineScope(Kotlin.Coroutines.ICoroutineContext! context) -> Xamarin.KotlinX.Coroutines.ICoroutineScope!
static Xamarin.KotlinX.Coroutines.CoroutineScopeKt.CoroutineScope(Kotlin.Jvm.Functions.IFunction2! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.CoroutineScopeKt.CurrentCoroutineContext(Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.CoroutineScopeKt.EnsureActive(Xamarin.KotlinX.Coroutines.ICoroutineScope! obj) -> void
static Xamarin.KotlinX.Coroutines.CoroutineScopeKt.IsActive(Xamarin.KotlinX.Coroutines.ICoroutineScope! obj) -> bool
static Xamarin.KotlinX.Coroutines.CoroutineScopeKt.MainScope() -> Xamarin.KotlinX.Coroutines.ICoroutineScope!
static Xamarin.KotlinX.Coroutines.CoroutineScopeKt.Plus(Xamarin.KotlinX.Coroutines.ICoroutineScope! obj, Kotlin.Coroutines.ICoroutineContext! context) -> Xamarin.KotlinX.Coroutines.ICoroutineScope!
static Xamarin.KotlinX.Coroutines.CoroutineStart.Atomic.get -> Xamarin.KotlinX.Coroutines.CoroutineStart?
static Xamarin.KotlinX.Coroutines.CoroutineStart.Default.get -> Xamarin.KotlinX.Coroutines.CoroutineStart?
static Xamarin.KotlinX.Coroutines.CoroutineStart.Entries.get -> Kotlin.Enums.IEnumEntries!
static Xamarin.KotlinX.Coroutines.CoroutineStart.Lazy.get -> Xamarin.KotlinX.Coroutines.CoroutineStart?
static Xamarin.KotlinX.Coroutines.CoroutineStart.Undispatched.get -> Xamarin.KotlinX.Coroutines.CoroutineStart?
static Xamarin.KotlinX.Coroutines.CoroutineStart.ValueOf(string? value) -> Xamarin.KotlinX.Coroutines.CoroutineStart?
static Xamarin.KotlinX.Coroutines.CoroutineStart.Values() -> Xamarin.KotlinX.Coroutines.CoroutineStart![]?
static Xamarin.KotlinX.Coroutines.DebugKt.ASSERTIONS_ENABLED.get -> bool
static Xamarin.KotlinX.Coroutines.DebugKt.COROUTINE_ID.get -> Java.Util.Concurrent.Atomic.AtomicLong!
static Xamarin.KotlinX.Coroutines.DebugKt.DEBUG.get -> bool
static Xamarin.KotlinX.Coroutines.DebugKt.RECOVER_STACK_TRACES.get -> bool
static Xamarin.KotlinX.Coroutines.DebugStringsKt.GetClassSimpleName(Java.Lang.Object! obj) -> string!
static Xamarin.KotlinX.Coroutines.DebugStringsKt.GetHexAddress(Java.Lang.Object! obj) -> string!
static Xamarin.KotlinX.Coroutines.DefaultExecutorKt.DefaultDelay.get -> Xamarin.KotlinX.Coroutines.IDelay!
static Xamarin.KotlinX.Coroutines.DeferredDefaultImpls.Fold(Xamarin.KotlinX.Coroutines.IDeferred! _this, Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction2! operation) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.DeferredDefaultImpls.Get(Xamarin.KotlinX.Coroutines.IDeferred! _this, Kotlin.Coroutines.ICoroutineContextKey! key) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.DeferredDefaultImpls.MinusKey(Xamarin.KotlinX.Coroutines.IDeferred! _this, Kotlin.Coroutines.ICoroutineContextKey! key) -> Kotlin.Coroutines.ICoroutineContext!
static Xamarin.KotlinX.Coroutines.DeferredDefaultImpls.Plus(Xamarin.KotlinX.Coroutines.IDeferred! _this, Kotlin.Coroutines.ICoroutineContext! context) -> Kotlin.Coroutines.ICoroutineContext!
static Xamarin.KotlinX.Coroutines.DeferredDefaultImpls.Plus(Xamarin.KotlinX.Coroutines.IDeferred! _this, Xamarin.KotlinX.Coroutines.IJob! other) -> Xamarin.KotlinX.Coroutines.IJob!
static Xamarin.KotlinX.Coroutines.DelayDefaultImpls.Delay(Xamarin.KotlinX.Coroutines.IDelay! _this, long time, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.DelayDefaultImpls.InvokeOnTimeout(Xamarin.KotlinX.Coroutines.IDelay! _this, long timeMillis, Java.Lang.IRunnable! block, Kotlin.Coroutines.ICoroutineContext! context) -> Xamarin.KotlinX.Coroutines.IDisposableHandle!
static Xamarin.KotlinX.Coroutines.DelayKt.AwaitCancellation(Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.DelayKt.Delay(long timeMillis, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.DelayKt.GetDelay(Kotlin.Coroutines.ICoroutineContext! obj) -> Xamarin.KotlinX.Coroutines.IDelay!
static Xamarin.KotlinX.Coroutines.DispatchedTaskKt.IsCancellableMode(int obj) -> bool
static Xamarin.KotlinX.Coroutines.DispatchedTaskKt.IsReusableMode(int obj) -> bool
static Xamarin.KotlinX.Coroutines.Dispatchers.Default.get -> Xamarin.KotlinX.Coroutines.CoroutineDispatcher!
static Xamarin.KotlinX.Coroutines.Dispatchers.IO.get -> Xamarin.KotlinX.Coroutines.CoroutineDispatcher!
static Xamarin.KotlinX.Coroutines.Dispatchers.Instance.get -> Xamarin.KotlinX.Coroutines.Dispatchers!
static Xamarin.KotlinX.Coroutines.Dispatchers.Main.get -> Xamarin.KotlinX.Coroutines.MainCoroutineDispatcher!
static Xamarin.KotlinX.Coroutines.Dispatchers.Unconfined.get -> Xamarin.KotlinX.Coroutines.CoroutineDispatcher!
static Xamarin.KotlinX.Coroutines.EventLoopKt.ProcessNextEventInCurrentThread() -> long
static Xamarin.KotlinX.Coroutines.ExceptionsKt.CancellationException(string? message, Java.Lang.Throwable? cause) -> Java.Util.Concurrent.CancellationException!
static Xamarin.KotlinX.Coroutines.ExecutorsKt.AsExecutor(Xamarin.KotlinX.Coroutines.CoroutineDispatcher! obj) -> Java.Util.Concurrent.IExecutor!
static Xamarin.KotlinX.Coroutines.ExecutorsKt.From(Java.Util.Concurrent.IExecutor! obj) -> Xamarin.KotlinX.Coroutines.CoroutineDispatcher!
static Xamarin.KotlinX.Coroutines.ExecutorsKt.From(Java.Util.Concurrent.IExecutorService! obj) -> Xamarin.KotlinX.Coroutines.ExecutorCoroutineDispatcher!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.All(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_all, Kotlin.Jvm.Functions.IFunction2! predicate, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Any(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_any, Kotlin.Jvm.Functions.IFunction2! predicate, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.AsFlow(Java.Lang.IIterable! _this_asFlow) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.AsFlow(Java.Lang.Object![]! _this_asFlow) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.AsFlow(Java.Util.IIterator! _this_asFlow) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.AsFlow(Kotlin.Jvm.Functions.IFunction0! _this_asFlow) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.AsFlow(Kotlin.Jvm.Functions.IFunction1! _this_asFlow) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.AsFlow(Kotlin.Ranges.IntRange! _this_asFlow) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.AsFlow(Kotlin.Ranges.LongRange! _this_asFlow) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.AsFlow(Kotlin.Sequences.ISequence! _this_asFlow) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.AsFlow(int[]! _this_asFlow) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.AsFlow(long[]! _this_asFlow) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.AsSharedFlow(Xamarin.KotlinX.Coroutines.Flow.IMutableSharedFlow! _this_asSharedFlow) -> Xamarin.KotlinX.Coroutines.Flow.ISharedFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.AsStateFlow(Xamarin.KotlinX.Coroutines.Flow.IMutableStateFlow! _this_asStateFlow) -> Xamarin.KotlinX.Coroutines.Flow.IStateFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Buffer(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_buffer, int capacity, Xamarin.KotlinX.Coroutines.Channels.BufferOverflow! onBufferOverflow) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Cache(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_cache) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.CallbackFlow(Kotlin.Jvm.Functions.IFunction2! block) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Cancellable(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_cancellable) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Catch(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_catch, Kotlin.Jvm.Functions.IFunction3! action) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.CatchImpl(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_catchImpl, Xamarin.KotlinX.Coroutines.Flow.IFlowCollector! collector, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.ChannelFlow(Kotlin.Jvm.Functions.IFunction2! block) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Chunked(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_chunked, int size) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Collect(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_collect, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.CollectIndexed(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_collectIndexed, Kotlin.Jvm.Functions.IFunction3! action, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.CollectLatest(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_collectLatest, Kotlin.Jvm.Functions.IFunction2! action, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.CollectWhile(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_collectWhile, Kotlin.Jvm.Functions.IFunction2! predicate, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Combine(Xamarin.KotlinX.Coroutines.Flow.IFlow! flow, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow2, Kotlin.Jvm.Functions.IFunction3! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Combine(Xamarin.KotlinX.Coroutines.Flow.IFlow! flow, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow2, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow3, Kotlin.Jvm.Functions.IFunction4! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Combine(Xamarin.KotlinX.Coroutines.Flow.IFlow! flow, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow2, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow3, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow4, Kotlin.Jvm.Functions.IFunction5! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Combine(Xamarin.KotlinX.Coroutines.Flow.IFlow! flow, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow2, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow3, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow4, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow5, Kotlin.Jvm.Functions.IFunction6! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.CombineLatest(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_combineLatest, Xamarin.KotlinX.Coroutines.Flow.IFlow! other, Kotlin.Jvm.Functions.IFunction3! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.CombineLatest(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_combineLatest, Xamarin.KotlinX.Coroutines.Flow.IFlow! other, Xamarin.KotlinX.Coroutines.Flow.IFlow! other2, Kotlin.Jvm.Functions.IFunction4! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.CombineLatest(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_combineLatest, Xamarin.KotlinX.Coroutines.Flow.IFlow! other, Xamarin.KotlinX.Coroutines.Flow.IFlow! other2, Xamarin.KotlinX.Coroutines.Flow.IFlow! other3, Kotlin.Jvm.Functions.IFunction5! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.CombineLatest(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_combineLatest, Xamarin.KotlinX.Coroutines.Flow.IFlow! other, Xamarin.KotlinX.Coroutines.Flow.IFlow! other2, Xamarin.KotlinX.Coroutines.Flow.IFlow! other3, Xamarin.KotlinX.Coroutines.Flow.IFlow! other4, Kotlin.Jvm.Functions.IFunction6! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.CombineTransform(Xamarin.KotlinX.Coroutines.Flow.IFlow! flow, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow2, Kotlin.Jvm.Functions.IFunction4! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.CombineTransform(Xamarin.KotlinX.Coroutines.Flow.IFlow! flow, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow2, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow3, Kotlin.Jvm.Functions.IFunction5! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.CombineTransform(Xamarin.KotlinX.Coroutines.Flow.IFlow! flow, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow2, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow3, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow4, Kotlin.Jvm.Functions.IFunction6! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.CombineTransform(Xamarin.KotlinX.Coroutines.Flow.IFlow! flow, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow2, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow3, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow4, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow5, Kotlin.Jvm.Functions.IFunction7! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Compose(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_compose, Kotlin.Jvm.Functions.IFunction1! transformer) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.ConcatMap(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_concatMap, Kotlin.Jvm.Functions.IFunction1! mapper) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.ConcatWith(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_concatWith, Java.Lang.Object? value) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.ConcatWith(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_concatWith, Xamarin.KotlinX.Coroutines.Flow.IFlow! other) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Conflate(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_conflate) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.ConsumeAsFlow(Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! _this_consumeAsFlow) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Count(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_count, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Count(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_count, Kotlin.Jvm.Functions.IFunction2! predicate, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.DEFAULT_CONCURRENCY.get -> int
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Debounce(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_debounce, Kotlin.Jvm.Functions.IFunction1! timeoutMillis) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Debounce(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_debounce, long timeoutMillis) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.DebounceDuration(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_debounce, Kotlin.Jvm.Functions.IFunction1! timeout) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.DelayEach(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_delayEach, long timeMillis) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.DelayFlow(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_delayFlow, long timeMillis) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.DistinctUntilChanged(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_distinctUntilChanged) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.DistinctUntilChanged(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_distinctUntilChanged, Kotlin.Jvm.Functions.IFunction2! areEquivalent) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.DistinctUntilChangedBy(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_distinctUntilChangedBy, Kotlin.Jvm.Functions.IFunction1! keySelector) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Drop(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_drop, int count) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.DropWhile(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_dropWhile, Kotlin.Jvm.Functions.IFunction2! predicate) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.EmitAll(Xamarin.KotlinX.Coroutines.Flow.IFlowCollector! _this_emitAll, Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! channel, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.EmitAll(Xamarin.KotlinX.Coroutines.Flow.IFlowCollector! _this_emitAll, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.EmptyFlow() -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.EnsureActive(Xamarin.KotlinX.Coroutines.Flow.IFlowCollector! _this_ensureActive) -> void
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Filter(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_filter, Kotlin.Jvm.Functions.IFunction2! predicate) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.FilterIsInstance(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_filterIsInstance, Kotlin.Reflect.IKClass! klass) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.FilterNot(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_filterNot, Kotlin.Jvm.Functions.IFunction2! predicate) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.FilterNotNull(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_filterNotNull) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.First(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_first, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.First(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_first, Kotlin.Jvm.Functions.IFunction2! predicate, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.FirstOrNull(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_firstOrNull, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.FirstOrNull(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_firstOrNull, Kotlin.Jvm.Functions.IFunction2! predicate, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.FixedPeriodTicker(Xamarin.KotlinX.Coroutines.ICoroutineScope! _this_fixedPeriodTicker, long delayMillis) -> Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.FlatMap(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_flatMap, Kotlin.Jvm.Functions.IFunction2! mapper) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.FlatMapConcat(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_flatMapConcat, Kotlin.Jvm.Functions.IFunction2! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.FlatMapLatest(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_flatMapLatest, Kotlin.Jvm.Functions.IFunction2! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.FlatMapMerge(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_flatMapMerge, int concurrency, Kotlin.Jvm.Functions.IFunction2! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Flatten(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_flatten) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.FlattenConcat(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_flattenConcat) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.FlattenMerge(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_flattenMerge, int concurrency) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Flow(Kotlin.Jvm.Functions.IFunction2! block) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.FlowCombine(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_combine, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow, Kotlin.Jvm.Functions.IFunction3! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.FlowCombineTransform(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_combineTransform, Xamarin.KotlinX.Coroutines.Flow.IFlow! flow, Kotlin.Jvm.Functions.IFunction4! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.FlowOf(Java.Lang.Object? value) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.FlowOf(params Java.Lang.Object![]! elements) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.FlowOn(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_flowOn, Kotlin.Coroutines.ICoroutineContext! context) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Fold(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_fold, Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction3! operation, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.ForEach(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_forEach, Kotlin.Jvm.Functions.IFunction2! action) -> void
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Last(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_last, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.LastOrNull(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_lastOrNull, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.LaunchIn(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_launchIn, Xamarin.KotlinX.Coroutines.ICoroutineScope! scope) -> Xamarin.KotlinX.Coroutines.IJob!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Map(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_map, Kotlin.Jvm.Functions.IFunction2! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.MapLatest(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_mapLatest, Kotlin.Jvm.Functions.IFunction2! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.MapNotNull(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_mapNotNull, Kotlin.Jvm.Functions.IFunction2! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Merge(Java.Lang.IIterable! _this_merge) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Merge(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_merge) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Merge(params Xamarin.KotlinX.Coroutines.Flow.IFlow![]! flows) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.NoImpl() -> Java.Lang.Void!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.None(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_none, Kotlin.Jvm.Functions.IFunction2! predicate, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.ObserveOn(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_observeOn, Kotlin.Coroutines.ICoroutineContext! context) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.OnCompletion(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_onCompletion, Kotlin.Jvm.Functions.IFunction3! action) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.OnEach(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_onEach, Kotlin.Jvm.Functions.IFunction2! action) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.OnEmpty(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_onEmpty, Kotlin.Jvm.Functions.IFunction2! action) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.OnErrorResume(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_onErrorResume, Xamarin.KotlinX.Coroutines.Flow.IFlow! fallback) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.OnErrorResumeNext(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_onErrorResumeNext, Xamarin.KotlinX.Coroutines.Flow.IFlow! fallback) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.OnErrorReturn(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_onErrorReturn, Java.Lang.Object? fallback) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.OnErrorReturn(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_onErrorReturn, Java.Lang.Object? fallback, Kotlin.Jvm.Functions.IFunction1! predicate) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.OnStart(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_onStart, Kotlin.Jvm.Functions.IFunction2! action) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.OnSubscription(Xamarin.KotlinX.Coroutines.Flow.ISharedFlow! _this_onSubscription, Kotlin.Jvm.Functions.IFunction2! action) -> Xamarin.KotlinX.Coroutines.Flow.ISharedFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.ProduceIn(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_produceIn, Xamarin.KotlinX.Coroutines.ICoroutineScope! scope) -> Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Publish(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_publish) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Publish(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_publish, int bufferSize) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.PublishOn(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_publishOn, Kotlin.Coroutines.ICoroutineContext! context) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.ReceiveAsFlow(Xamarin.KotlinX.Coroutines.Channels.IReceiveChannel! _this_receiveAsFlow) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Reduce(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_reduce, Kotlin.Jvm.Functions.IFunction3! operation, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Replay(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_replay) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Replay(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_replay, int bufferSize) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Retry(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_retry, long retries, Kotlin.Jvm.Functions.IFunction2! predicate) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.RetryWhen(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_retryWhen, Kotlin.Jvm.Functions.IFunction4! predicate) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.RunningFold(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_runningFold, Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction3! operation) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.RunningReduce(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_runningReduce, Kotlin.Jvm.Functions.IFunction3! operation) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Sample(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_sample, long periodMillis) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Scan(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_scan, Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction3! operation) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.ScanFold(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_scanFold, Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction3! operation) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.ScanReduce(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_scanReduce, Kotlin.Jvm.Functions.IFunction3! operation) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.ShareIn(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_shareIn, Xamarin.KotlinX.Coroutines.ICoroutineScope! scope, Xamarin.KotlinX.Coroutines.Flow.ISharingStarted! started, int replay) -> Xamarin.KotlinX.Coroutines.Flow.ISharedFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Single(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_single, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.SingleOrNull(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_singleOrNull, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Skip(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_skip, int count) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.StartWith(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_startWith, Java.Lang.Object? value) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.StartWith(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_startWith, Xamarin.KotlinX.Coroutines.Flow.IFlow! other) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.StateIn(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_stateIn, Xamarin.KotlinX.Coroutines.ICoroutineScope! scope, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.StateIn(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_stateIn, Xamarin.KotlinX.Coroutines.ICoroutineScope! scope, Xamarin.KotlinX.Coroutines.Flow.ISharingStarted! started, Java.Lang.Object? initialValue) -> Xamarin.KotlinX.Coroutines.Flow.IStateFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Subscribe(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_subscribe) -> void
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Subscribe(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_subscribe, Kotlin.Jvm.Functions.IFunction2! onEach) -> void
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Subscribe(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_subscribe, Kotlin.Jvm.Functions.IFunction2! onEach, Kotlin.Jvm.Functions.IFunction2! onError) -> void
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.SubscribeOn(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_subscribeOn, Kotlin.Coroutines.ICoroutineContext! context) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.SwitchMap(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_switchMap, Kotlin.Jvm.Functions.IFunction2! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Take(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_take, int count) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.TakeWhile(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_takeWhile, Kotlin.Jvm.Functions.IFunction2! predicate) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Timeout(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_timeout_u2dHG0u8IE, long timeout) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.ToCollection(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_toCollection, Java.Lang.Object! destination, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.ToList(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_toList, System.Collections.IList! destination, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.ToSet(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_toSet, System.Collections.ICollection! destination, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Transform(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_transform, Kotlin.Jvm.Functions.IFunction3! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.TransformLatest(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_transformLatest, Kotlin.Jvm.Functions.IFunction3! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.TransformWhile(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_transformWhile, Kotlin.Jvm.Functions.IFunction3! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.UnsafeTransform(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_unsafeTransform, Kotlin.Jvm.Functions.IFunction3! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.WithIndex(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_withIndex) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.FlowKt.Zip(Xamarin.KotlinX.Coroutines.Flow.IFlow! _this_zip, Xamarin.KotlinX.Coroutines.Flow.IFlow! other, Kotlin.Jvm.Functions.IFunction3! transform) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.LintKt.Cancel(Xamarin.KotlinX.Coroutines.Flow.IFlowCollector! obj, Java.Util.Concurrent.CancellationException? cause) -> void
static Xamarin.KotlinX.Coroutines.Flow.LintKt.Cancellable(Xamarin.KotlinX.Coroutines.Flow.ISharedFlow! obj) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.LintKt.Conflate(Xamarin.KotlinX.Coroutines.Flow.IStateFlow! obj) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.LintKt.DistinctUntilChanged(Xamarin.KotlinX.Coroutines.Flow.IStateFlow! obj) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.LintKt.FlowOn(Xamarin.KotlinX.Coroutines.Flow.ISharedFlow! obj, Kotlin.Coroutines.ICoroutineContext! context) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Flow.LintKt.GetCoroutineContext(Xamarin.KotlinX.Coroutines.Flow.IFlowCollector! obj) -> Kotlin.Coroutines.ICoroutineContext!
static Xamarin.KotlinX.Coroutines.Flow.LintKt.IsActive(Xamarin.KotlinX.Coroutines.Flow.IFlowCollector! obj) -> bool
static Xamarin.KotlinX.Coroutines.Flow.SharedFlowKt.MutableSharedFlow(int replay, int extraBufferCapacity, Xamarin.KotlinX.Coroutines.Channels.BufferOverflow! onBufferOverflow) -> Xamarin.KotlinX.Coroutines.Flow.IMutableSharedFlow!
static Xamarin.KotlinX.Coroutines.Flow.SharingCommand.Entries.get -> Kotlin.Enums.IEnumEntries!
static Xamarin.KotlinX.Coroutines.Flow.SharingCommand.Start.get -> Xamarin.KotlinX.Coroutines.Flow.SharingCommand?
static Xamarin.KotlinX.Coroutines.Flow.SharingCommand.Stop.get -> Xamarin.KotlinX.Coroutines.Flow.SharingCommand?
static Xamarin.KotlinX.Coroutines.Flow.SharingCommand.StopAndResetReplayCache.get -> Xamarin.KotlinX.Coroutines.Flow.SharingCommand?
static Xamarin.KotlinX.Coroutines.Flow.SharingCommand.ValueOf(string? value) -> Xamarin.KotlinX.Coroutines.Flow.SharingCommand?
static Xamarin.KotlinX.Coroutines.Flow.SharingCommand.Values() -> Xamarin.KotlinX.Coroutines.Flow.SharingCommand![]?
static Xamarin.KotlinX.Coroutines.Flow.SharingStarted.Companion.get -> Xamarin.KotlinX.Coroutines.Flow.SharingStartedCompanion!
static Xamarin.KotlinX.Coroutines.Flow.SharingStartedKt.WhileSubscribed(Xamarin.KotlinX.Coroutines.Flow.SharingStartedCompanion! obj, long stopTimeout, long replayExpiration) -> Xamarin.KotlinX.Coroutines.Flow.ISharingStarted!
static Xamarin.KotlinX.Coroutines.Flow.StateFlowKt.GetAndUpdate(Xamarin.KotlinX.Coroutines.Flow.IMutableStateFlow! obj, Kotlin.Jvm.Functions.IFunction1! function) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Flow.StateFlowKt.MutableStateFlow(Java.Lang.Object? value) -> Xamarin.KotlinX.Coroutines.Flow.IMutableStateFlow!
static Xamarin.KotlinX.Coroutines.Flow.StateFlowKt.Update(Xamarin.KotlinX.Coroutines.Flow.IMutableStateFlow! obj, Kotlin.Jvm.Functions.IFunction1! function) -> void
static Xamarin.KotlinX.Coroutines.Flow.StateFlowKt.UpdateAndGet(Xamarin.KotlinX.Coroutines.Flow.IMutableStateFlow! obj, Kotlin.Jvm.Functions.IFunction1! function) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Future.FutureKt.AsCompletableFuture(Xamarin.KotlinX.Coroutines.IDeferred! obj) -> Java.Util.Concurrent.CompletableFuture!
static Xamarin.KotlinX.Coroutines.Future.FutureKt.AsCompletableFuture(Xamarin.KotlinX.Coroutines.IJob! obj) -> Java.Util.Concurrent.CompletableFuture!
static Xamarin.KotlinX.Coroutines.Future.FutureKt.AsDeferred(Java.Util.Concurrent.ICompletionStage! obj) -> Xamarin.KotlinX.Coroutines.IDeferred!
static Xamarin.KotlinX.Coroutines.Future.FutureKt.Await(Java.Util.Concurrent.ICompletionStage! obj, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Future.FutureKt.Future(Xamarin.KotlinX.Coroutines.ICoroutineScope! obj, Kotlin.Coroutines.ICoroutineContext! context, Xamarin.KotlinX.Coroutines.CoroutineStart! start, Kotlin.Jvm.Functions.IFunction2! block) -> Java.Util.Concurrent.CompletableFuture!
static Xamarin.KotlinX.Coroutines.GlobalScope.Instance.get -> Xamarin.KotlinX.Coroutines.GlobalScope!
static Xamarin.KotlinX.Coroutines.GuidanceKt.Async(Kotlin.Coroutines.ICoroutineContext! context, Xamarin.KotlinX.Coroutines.CoroutineStart! start, Kotlin.Jvm.Functions.IFunction2! block) -> Xamarin.KotlinX.Coroutines.IDeferred!
static Xamarin.KotlinX.Coroutines.GuidanceKt.Launch(Kotlin.Coroutines.ICoroutineContext! context, Xamarin.KotlinX.Coroutines.CoroutineStart! start, Kotlin.Jvm.Functions.IFunction2! block) -> Xamarin.KotlinX.Coroutines.IJob!
static Xamarin.KotlinX.Coroutines.InterruptibleKt.RunInterruptible(Kotlin.Coroutines.ICoroutineContext! context, Kotlin.Jvm.Functions.IFunction0! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Intrinsics.CancellableKt.StartCoroutineCancellable(Kotlin.Jvm.Functions.IFunction1! obj, Kotlin.Coroutines.IContinuation! completion) -> void
static Xamarin.KotlinX.Coroutines.JobDefaultImpls.Fold(Xamarin.KotlinX.Coroutines.IJob! _this, Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction2! operation) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.JobDefaultImpls.Get(Xamarin.KotlinX.Coroutines.IJob! _this, Kotlin.Coroutines.ICoroutineContextKey! key) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.JobDefaultImpls.MinusKey(Xamarin.KotlinX.Coroutines.IJob! _this, Kotlin.Coroutines.ICoroutineContextKey! key) -> Kotlin.Coroutines.ICoroutineContext!
static Xamarin.KotlinX.Coroutines.JobDefaultImpls.Plus(Xamarin.KotlinX.Coroutines.IJob! _this, Kotlin.Coroutines.ICoroutineContext! context) -> Kotlin.Coroutines.ICoroutineContext!
static Xamarin.KotlinX.Coroutines.JobDefaultImpls.Plus(Xamarin.KotlinX.Coroutines.IJob! _this, Xamarin.KotlinX.Coroutines.IJob! other) -> Xamarin.KotlinX.Coroutines.IJob!
static Xamarin.KotlinX.Coroutines.JobKt.Cancel(Kotlin.Coroutines.ICoroutineContext! _this_cancel, Java.Util.Concurrent.CancellationException? cause) -> void
static Xamarin.KotlinX.Coroutines.JobKt.Cancel(Xamarin.KotlinX.Coroutines.IJob! _this_cancel, string! message, Java.Lang.Throwable? cause) -> void
static Xamarin.KotlinX.Coroutines.JobKt.CancelAndJoin(Xamarin.KotlinX.Coroutines.IJob! _this_cancelAndJoin, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.JobKt.CancelChildren(Kotlin.Coroutines.ICoroutineContext! _this_cancelChildren, Java.Util.Concurrent.CancellationException? cause) -> void
static Xamarin.KotlinX.Coroutines.JobKt.CancelChildren(Xamarin.KotlinX.Coroutines.IJob! _this_cancelChildren, Java.Util.Concurrent.CancellationException? cause) -> void
static Xamarin.KotlinX.Coroutines.JobKt.CancelFutureOnCancellation(Xamarin.KotlinX.Coroutines.ICancellableContinuation! _this_cancelFutureOnCancellation, Java.Util.Concurrent.IFuture! future) -> void
static Xamarin.KotlinX.Coroutines.JobKt.DisposeOnCompletion(Xamarin.KotlinX.Coroutines.IJob! _this_disposeOnCompletion, Xamarin.KotlinX.Coroutines.IDisposableHandle! handle) -> Xamarin.KotlinX.Coroutines.IDisposableHandle!
static Xamarin.KotlinX.Coroutines.JobKt.EnsureActive(Kotlin.Coroutines.ICoroutineContext! _this_ensureActive) -> void
static Xamarin.KotlinX.Coroutines.JobKt.EnsureActive(Xamarin.KotlinX.Coroutines.IJob! _this_ensureActive) -> void
static Xamarin.KotlinX.Coroutines.JobKt.GetJob(Kotlin.Coroutines.ICoroutineContext! _this_job) -> Xamarin.KotlinX.Coroutines.IJob!
static Xamarin.KotlinX.Coroutines.JobKt.IsActive(Kotlin.Coroutines.ICoroutineContext! _this_isActive) -> bool
static Xamarin.KotlinX.Coroutines.JobKt.Job(Xamarin.KotlinX.Coroutines.IJob? parent) -> Xamarin.KotlinX.Coroutines.ICompletableJob!
static Xamarin.KotlinX.Coroutines.NonCancellable.Instance.get -> Xamarin.KotlinX.Coroutines.NonCancellable!
static Xamarin.KotlinX.Coroutines.NonDisposableHandle.Instance.get -> Xamarin.KotlinX.Coroutines.NonDisposableHandle!
static Xamarin.KotlinX.Coroutines.ParentJobDefaultImpls.Fold(Xamarin.KotlinX.Coroutines.IParentJob! _this, Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction2! operation) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.ParentJobDefaultImpls.Get(Xamarin.KotlinX.Coroutines.IParentJob! _this, Kotlin.Coroutines.ICoroutineContextKey! key) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.ParentJobDefaultImpls.MinusKey(Xamarin.KotlinX.Coroutines.IParentJob! _this, Kotlin.Coroutines.ICoroutineContextKey! key) -> Kotlin.Coroutines.ICoroutineContext!
static Xamarin.KotlinX.Coroutines.ParentJobDefaultImpls.Plus(Xamarin.KotlinX.Coroutines.IParentJob! _this, Kotlin.Coroutines.ICoroutineContext! context) -> Kotlin.Coroutines.ICoroutineContext!
static Xamarin.KotlinX.Coroutines.ParentJobDefaultImpls.Plus(Xamarin.KotlinX.Coroutines.IParentJob! _this, Xamarin.KotlinX.Coroutines.IJob! other) -> Xamarin.KotlinX.Coroutines.IJob!
static Xamarin.KotlinX.Coroutines.Scheduling.TasksKt.IsBlocking(Java.Lang.Object! obj) -> bool
static Xamarin.KotlinX.Coroutines.Scheduling.WorkQueueKt.GetMaskForStealingMode(Java.Lang.Object! obj) -> int
static Xamarin.KotlinX.Coroutines.Selects.OnTimeoutKt.OnTimeout(Xamarin.KotlinX.Coroutines.Selects.ISelectBuilder! obj, long timeMillis, Kotlin.Jvm.Functions.IFunction1! block) -> void
static Xamarin.KotlinX.Coroutines.Selects.OnTimeoutKt.OnTimeout2(Xamarin.KotlinX.Coroutines.Selects.ISelectBuilder! obj, long timeout, Kotlin.Jvm.Functions.IFunction1! block) -> void
static Xamarin.KotlinX.Coroutines.Selects.SelectBuilderDefaultImpls.Invoke(Xamarin.KotlinX.Coroutines.Selects.ISelectBuilder! _this, Xamarin.KotlinX.Coroutines.Selects.ISelectClause2! _receiver, Kotlin.Jvm.Functions.IFunction2! block) -> void
static Xamarin.KotlinX.Coroutines.Selects.SelectBuilderDefaultImpls.OnTimeout(Xamarin.KotlinX.Coroutines.Selects.ISelectBuilder! _this, long timeMillis, Kotlin.Jvm.Functions.IFunction1! block) -> void
static Xamarin.KotlinX.Coroutines.Selects.SelectKt.PARAM_CLAUSE_0.get -> Java.Lang.Object!
static Xamarin.KotlinX.Coroutines.Selects.SelectKt.Select(Kotlin.Jvm.Functions.IFunction1! builder, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Selects.SelectUnbiasedKt.SelectUnbiased(Kotlin.Jvm.Functions.IFunction1! builder, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Selects.WhileSelectKt.WhileSelect(Kotlin.Jvm.Functions.IFunction1! builder, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.SupervisorKt.SupervisorJob(Xamarin.KotlinX.Coroutines.IJob? parent) -> Xamarin.KotlinX.Coroutines.ICompletableJob!
static Xamarin.KotlinX.Coroutines.SupervisorKt.SupervisorScope(Kotlin.Jvm.Functions.IFunction2! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Sync.MutexKt.Mutex(bool locked) -> Xamarin.KotlinX.Coroutines.Sync.IMutex!
static Xamarin.KotlinX.Coroutines.Sync.MutexKt.WithLock(Xamarin.KotlinX.Coroutines.Sync.IMutex! p0, Java.Lang.Object? owner, Kotlin.Jvm.Functions.IFunction0! action, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Sync.SemaphoreKt.Semaphore(int permits, int acquiredPermits) -> Xamarin.KotlinX.Coroutines.Sync.ISemaphore!
static Xamarin.KotlinX.Coroutines.Sync.SemaphoreKt.WithPermit(Xamarin.KotlinX.Coroutines.Sync.ISemaphore! p0, Kotlin.Jvm.Functions.IFunction0! action, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.ThreadContextElementDefaultImpls.Fold(Xamarin.KotlinX.Coroutines.IThreadContextElement! _this, Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction2! operation) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.ThreadContextElementDefaultImpls.Get(Xamarin.KotlinX.Coroutines.IThreadContextElement! _this, Kotlin.Coroutines.ICoroutineContextKey! key) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.ThreadContextElementDefaultImpls.MinusKey(Xamarin.KotlinX.Coroutines.IThreadContextElement! _this, Kotlin.Coroutines.ICoroutineContextKey! key) -> Kotlin.Coroutines.ICoroutineContext!
static Xamarin.KotlinX.Coroutines.ThreadContextElementDefaultImpls.Plus(Xamarin.KotlinX.Coroutines.IThreadContextElement! _this, Kotlin.Coroutines.ICoroutineContext! context) -> Kotlin.Coroutines.ICoroutineContext!
static Xamarin.KotlinX.Coroutines.ThreadContextElementKt.AsContextElement(Java.Lang.ThreadLocal! obj, Java.Lang.Object? value) -> Xamarin.KotlinX.Coroutines.IThreadContextElement!
static Xamarin.KotlinX.Coroutines.ThreadContextElementKt.EnsurePresent(Java.Lang.ThreadLocal! obj, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.ThreadContextElementKt.IsPresent(Java.Lang.ThreadLocal! obj, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.ThreadPoolDispatcherKt.NewFixedThreadPoolContext(int nThreads, string! name) -> Xamarin.KotlinX.Coroutines.ExecutorCoroutineDispatcher!
static Xamarin.KotlinX.Coroutines.ThreadPoolDispatcherKt.NewSingleThreadContext(string! name) -> Xamarin.KotlinX.Coroutines.ExecutorCoroutineDispatcher!
static Xamarin.KotlinX.Coroutines.Time.TimeKt.Debounce(Xamarin.KotlinX.Coroutines.Flow.IFlow! obj, Java.Time.Duration! timeout) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Time.TimeKt.Delay(Java.Time.Duration! duration, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Time.TimeKt.OnTimeout(Xamarin.KotlinX.Coroutines.Selects.ISelectBuilder! obj, Java.Time.Duration! duration, Kotlin.Jvm.Functions.IFunction1! block) -> void
static Xamarin.KotlinX.Coroutines.Time.TimeKt.Sample(Xamarin.KotlinX.Coroutines.Flow.IFlow! obj, Java.Time.Duration! period) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static Xamarin.KotlinX.Coroutines.Time.TimeKt.WithTimeout(Java.Time.Duration! duration, Kotlin.Jvm.Functions.IFunction2! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.Time.TimeKt.WithTimeoutOrNull(Java.Time.Duration! duration, Kotlin.Jvm.Functions.IFunction2! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.TimeoutKt.WithTimeout(long timeMillis, Kotlin.Jvm.Functions.IFunction2! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.TimeoutKt.WithTimeoutOrNull(long timeMillis, Kotlin.Jvm.Functions.IFunction2! block, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static Xamarin.KotlinX.Coroutines.YieldKt.Yield(Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static _COROUTINE.CoroutineDebuggingKt.ARTIFICIAL_FRAME_PACKAGE_NAME.get -> string!
virtual Xamarin.KotlinX.Coroutines.CoroutineDispatcher.DispatchYield(Kotlin.Coroutines.ICoroutineContext! context, Java.Lang.IRunnable! block) -> void
virtual Xamarin.KotlinX.Coroutines.CoroutineDispatcher.IsDispatchNeeded(Kotlin.Coroutines.ICoroutineContext! context) -> bool
virtual Xamarin.KotlinX.Coroutines.CoroutineDispatcher.LimitedParallelism(int parallelism, string? name) -> Xamarin.KotlinX.Coroutines.CoroutineDispatcher!
virtual Xamarin.KotlinX.Coroutines.JobSupport.AfterCompletion(Java.Lang.Object? state) -> void
virtual Xamarin.KotlinX.Coroutines.JobSupport.Cancel(Java.Util.Concurrent.CancellationException? cause) -> void
virtual Xamarin.KotlinX.Coroutines.JobSupport.CancelInternal(Java.Lang.Throwable! cause) -> void
virtual Xamarin.KotlinX.Coroutines.JobSupport.CancellationExceptionMessage() -> string!
virtual Xamarin.KotlinX.Coroutines.JobSupport.ChildCancelled(Java.Lang.Throwable! cause) -> bool
virtual Xamarin.KotlinX.Coroutines.JobSupport.ChildJobCancellationCause.get -> Java.Util.Concurrent.CancellationException!
virtual Xamarin.KotlinX.Coroutines.JobSupport.Fold(Java.Lang.Object? initial, Kotlin.Jvm.Functions.IFunction2! operation) -> Java.Lang.Object?
virtual Xamarin.KotlinX.Coroutines.JobSupport.Get(Kotlin.Coroutines.ICoroutineContextKey! key) -> Java.Lang.Object?
virtual Xamarin.KotlinX.Coroutines.JobSupport.HandleJobException(Java.Lang.Throwable! exception) -> bool
virtual Xamarin.KotlinX.Coroutines.JobSupport.IsActive.get -> bool
virtual Xamarin.KotlinX.Coroutines.JobSupport.IsScopedCoroutine.get -> bool
virtual Xamarin.KotlinX.Coroutines.JobSupport.MinusKey(Kotlin.Coroutines.ICoroutineContextKey! key) -> Kotlin.Coroutines.ICoroutineContext!
virtual Xamarin.KotlinX.Coroutines.JobSupport.OnCancelling(Java.Lang.Throwable? cause) -> void
virtual Xamarin.KotlinX.Coroutines.JobSupport.OnCompletionInternal(Java.Lang.Object? state) -> void
virtual Xamarin.KotlinX.Coroutines.JobSupport.OnStart() -> void
virtual Xamarin.KotlinX.Coroutines.JobSupport.Parent.get -> Xamarin.KotlinX.Coroutines.IJob?
virtual Xamarin.KotlinX.Coroutines.JobSupport.Plus(Kotlin.Coroutines.ICoroutineContext! context) -> Kotlin.Coroutines.ICoroutineContext!
virtual Xamarin.KotlinX.Coroutines.JobSupport.Plus(Xamarin.KotlinX.Coroutines.IJob! other) -> Xamarin.KotlinX.Coroutines.IJob!
