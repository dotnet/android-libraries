#nullable enable
Internal.J.N
Internal.J.N.N() -> void
Internal.J.N.N(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Internal.Org.Jni_zero.AccessedByNativeAttribute
Internal.Org.Jni_zero.AccessedByNativeAttribute.AccessedByNativeAttribute() -> void
Internal.Org.Jni_zero.AccessedByNativeAttribute.Value.get -> string?
Internal.Org.Jni_zero.AccessedByNativeAttribute.Value.set -> void
Internal.Org.Jni_zero.CalledByNativeAttribute
Internal.Org.Jni_zero.CalledByNativeAttribute.CalledByNativeAttribute() -> void
Internal.Org.Jni_zero.CalledByNativeAttribute.Value.get -> string?
Internal.Org.Jni_zero.CalledByNativeAttribute.Value.set -> void
Internal.Org.Jni_zero.CalledByNativeForTestingAttribute
Internal.Org.Jni_zero.CalledByNativeForTestingAttribute.CalledByNativeForTestingAttribute() -> void
Internal.Org.Jni_zero.CalledByNativeForTestingAttribute.Value.get -> string?
Internal.Org.Jni_zero.CalledByNativeForTestingAttribute.Value.set -> void
Internal.Org.Jni_zero.CalledByNativeUncheckedAttribute
Internal.Org.Jni_zero.CalledByNativeUncheckedAttribute.CalledByNativeUncheckedAttribute() -> void
Internal.Org.Jni_zero.CalledByNativeUncheckedAttribute.Value.get -> string?
Internal.Org.Jni_zero.CalledByNativeUncheckedAttribute.Value.set -> void
Internal.Org.Jni_zero.CheckDiscardAttribute
Internal.Org.Jni_zero.CheckDiscardAttribute.CheckDiscardAttribute() -> void
Internal.Org.Jni_zero.CheckDiscardAttribute.Value.get -> string?
Internal.Org.Jni_zero.CheckDiscardAttribute.Value.set -> void
Internal.Org.Jni_zero.GEN_JNI
Internal.Org.Jni_zero.GEN_JNI.GEN_JNI() -> void
Internal.Org.Jni_zero.GEN_JNI.GEN_JNI(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Internal.Org.Jni_zero.IAccessedByNative
Internal.Org.Jni_zero.IAccessedByNative.Value() -> string?
Internal.Org.Jni_zero.ICalledByNative
Internal.Org.Jni_zero.ICalledByNative.Value() -> string?
Internal.Org.Jni_zero.ICalledByNativeForTesting
Internal.Org.Jni_zero.ICalledByNativeForTesting.Value() -> string?
Internal.Org.Jni_zero.ICalledByNativeUnchecked
Internal.Org.Jni_zero.ICalledByNativeUnchecked.Value() -> string?
Internal.Org.Jni_zero.ICheckDiscard
Internal.Org.Jni_zero.ICheckDiscard.Value() -> string?
Internal.Org.Jni_zero.IJNINamespace
Internal.Org.Jni_zero.IJNINamespace.Value() -> string?
Internal.Org.Jni_zero.IJniStaticTestMocker
Internal.Org.Jni_zero.IJniStaticTestMocker.SetInstanceForTesting(Java.Lang.Object? instance) -> void
Internal.Org.Jni_zero.IJniType
Internal.Org.Jni_zero.IJniType.Value() -> string?
Internal.Org.Jni_zero.INativeClassQualifiedName
Internal.Org.Jni_zero.INativeClassQualifiedName.Value() -> string?
Internal.Org.Jni_zero.INativeMethods
Internal.Org.Jni_zero.INativeMethods.Value() -> string?
Internal.Org.Jni_zero.Internal.INullUnmarked
Internal.Org.Jni_zero.Internal.INullable
Internal.Org.Jni_zero.Internal.NullUnmarkedAttribute
Internal.Org.Jni_zero.Internal.NullUnmarkedAttribute.NullUnmarkedAttribute() -> void
Internal.Org.Jni_zero.Internal.NullableAttribute
Internal.Org.Jni_zero.Internal.NullableAttribute.NullableAttribute() -> void
Internal.Org.Jni_zero.JNINamespaceAttribute
Internal.Org.Jni_zero.JNINamespaceAttribute.JNINamespaceAttribute() -> void
Internal.Org.Jni_zero.JNINamespaceAttribute.Value.get -> string?
Internal.Org.Jni_zero.JNINamespaceAttribute.Value.set -> void
Internal.Org.Jni_zero.JniInit
Internal.Org.Jni_zero.JniInit.JniInit() -> void
Internal.Org.Jni_zero.JniInit.JniInit(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Internal.Org.Jni_zero.JniTestInstanceHolder
Internal.Org.Jni_zero.JniTestInstanceHolder.JniTestInstanceHolder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Internal.Org.Jni_zero.JniTestInstanceHolder.Value.get -> Java.Lang.Object?
Internal.Org.Jni_zero.JniTestInstanceHolder.Value.set -> void
Internal.Org.Jni_zero.JniTestInstancesSnapshot
Internal.Org.Jni_zero.JniTestInstancesSnapshot.JniTestInstancesSnapshot(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Internal.Org.Jni_zero.JniTypeAttribute
Internal.Org.Jni_zero.JniTypeAttribute.JniTypeAttribute() -> void
Internal.Org.Jni_zero.JniTypeAttribute.Value.get -> string?
Internal.Org.Jni_zero.JniTypeAttribute.Value.set -> void
Internal.Org.Jni_zero.JniUtil
Internal.Org.Jni_zero.JniUtil.JniUtil() -> void
Internal.Org.Jni_zero.JniUtil.JniUtil(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Internal.Org.Jni_zero.NativeClassQualifiedNameAttribute
Internal.Org.Jni_zero.NativeClassQualifiedNameAttribute.NativeClassQualifiedNameAttribute() -> void
Internal.Org.Jni_zero.NativeClassQualifiedNameAttribute.Value.get -> string?
Internal.Org.Jni_zero.NativeClassQualifiedNameAttribute.Value.set -> void
Internal.Org.Jni_zero.NativeMethodsAttribute
Internal.Org.Jni_zero.NativeMethodsAttribute.NativeMethodsAttribute() -> void
Internal.Org.Jni_zero.NativeMethodsAttribute.Value.get -> string?
Internal.Org.Jni_zero.NativeMethodsAttribute.Value.set -> void
Internal.Xamarin.Chromium.Build.BuildConfig
Internal.Xamarin.Chromium.Build.BuildConfig.BuildConfig() -> void
Internal.Xamarin.Chromium.Build.BuildConfig.BuildConfig(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.ActivityLifecycleCallbacksAdapter
Xamarin.Chromium.Base.ActivityLifecycleCallbacksAdapter.ActivityLifecycleCallbacksAdapter() -> void
Xamarin.Chromium.Base.ActivityLifecycleCallbacksAdapter.ActivityLifecycleCallbacksAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.ActivityState
Xamarin.Chromium.Base.ActivityStateAttribute
Xamarin.Chromium.Base.ActivityStateAttribute.ActivityStateAttribute() -> void
Xamarin.Chromium.Base.ActivityStateConsts
Xamarin.Chromium.Base.AndroidInfo
Xamarin.Chromium.Base.ApiCompatibilityUtils
Xamarin.Chromium.Base.ApiCompatibilityUtils.ApiCompatibilityUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.ApkAssets
Xamarin.Chromium.Base.ApkAssets.ApkAssets() -> void
Xamarin.Chromium.Base.ApkAssets.ApkAssets(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.ApkInfo
Xamarin.Chromium.Base.ApkInfo.BrowserApplicationInfo.get -> Android.Content.PM.ApplicationInfo?
Xamarin.Chromium.Base.ApplicationState
Xamarin.Chromium.Base.ApplicationStateAttribute
Xamarin.Chromium.Base.ApplicationStateAttribute.ApplicationStateAttribute() -> void
Xamarin.Chromium.Base.ApplicationStateConsts
Xamarin.Chromium.Base.ApplicationStatus
Xamarin.Chromium.Base.ApplicationStatus.ActivityStateEventArgs
Xamarin.Chromium.Base.ApplicationStatus.ActivityStateEventArgs.Activity.get -> Android.App.Activity?
Xamarin.Chromium.Base.ApplicationStatus.ActivityStateEventArgs.ActivityStateEventArgs(Android.App.Activity? activity, int newState) -> void
Xamarin.Chromium.Base.ApplicationStatus.ActivityStateEventArgs.NewState.get -> int
Xamarin.Chromium.Base.ApplicationStatus.ApplicationStateEventArgs
Xamarin.Chromium.Base.ApplicationStatus.ApplicationStateEventArgs.ApplicationStateEventArgs(int newState) -> void
Xamarin.Chromium.Base.ApplicationStatus.ApplicationStateEventArgs.NewState.get -> int
Xamarin.Chromium.Base.ApplicationStatus.ApplicationStatus(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.ApplicationStatus.IActivityStateListener
Xamarin.Chromium.Base.ApplicationStatus.IActivityStateListener.OnActivityStateChange(Android.App.Activity? activity, int newState) -> void
Xamarin.Chromium.Base.ApplicationStatus.IApplicationStateListener
Xamarin.Chromium.Base.ApplicationStatus.IApplicationStateListener.OnApplicationStateChange(int newState) -> void
Xamarin.Chromium.Base.ApplicationStatus.ITaskVisibilityListener
Xamarin.Chromium.Base.ApplicationStatus.ITaskVisibilityListener.OnTaskVisibilityChanged(int taskId, bool isVisible) -> void
Xamarin.Chromium.Base.ApplicationStatus.IWindowFocusChangedListener
Xamarin.Chromium.Base.ApplicationStatus.IWindowFocusChangedListener.OnWindowFocusChanged(Android.App.Activity? activity, bool hasFocus) -> void
Xamarin.Chromium.Base.ApplicationStatus.TaskVisibilityEventArgs
Xamarin.Chromium.Base.ApplicationStatus.TaskVisibilityEventArgs.IsVisible.get -> bool
Xamarin.Chromium.Base.ApplicationStatus.TaskVisibilityEventArgs.TaskId.get -> int
Xamarin.Chromium.Base.ApplicationStatus.TaskVisibilityEventArgs.TaskVisibilityEventArgs(int taskId, bool isVisible) -> void
Xamarin.Chromium.Base.ApplicationStatus.WindowFocusChangedEventArgs
Xamarin.Chromium.Base.ApplicationStatus.WindowFocusChangedEventArgs.Activity.get -> Android.App.Activity?
Xamarin.Chromium.Base.ApplicationStatus.WindowFocusChangedEventArgs.HasFocus.get -> bool
Xamarin.Chromium.Base.ApplicationStatus.WindowFocusChangedEventArgs.WindowFocusChangedEventArgs(Android.App.Activity? activity, bool hasFocus) -> void
Xamarin.Chromium.Base.BaseFeatureList
Xamarin.Chromium.Base.BaseFeatureList.BaseFeatureList(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.BaseFeatures
Xamarin.Chromium.Base.BaseSwitches
Xamarin.Chromium.Base.BinderCallsListener
Xamarin.Chromium.Base.BinderCallsListener.BinderCallsListener(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.BuildInfo
Xamarin.Chromium.Base.BuildInfo.AbiString.get -> string?
Xamarin.Chromium.Base.BuildInfo.AbiString.set -> void
Xamarin.Chromium.Base.BuildInfo.AndroidBuildFingerprint.get -> string?
Xamarin.Chromium.Base.BuildInfo.AndroidBuildFingerprint.set -> void
Xamarin.Chromium.Base.BuildInfo.BuildInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.BuildInfo.HostPackageLabel.get -> string?
Xamarin.Chromium.Base.BuildInfo.HostPackageLabel.set -> void
Xamarin.Chromium.Base.BuildInfo.HostPackageName.get -> string?
Xamarin.Chromium.Base.BuildInfo.HostPackageName.set -> void
Xamarin.Chromium.Base.BuildInfo.HostVersionCode.get -> string?
Xamarin.Chromium.Base.BuildInfo.HostVersionCode.set -> void
Xamarin.Chromium.Base.BuildInfo.InstallerPackageName.get -> string?
Xamarin.Chromium.Base.BuildInfo.InstallerPackageName.set -> void
Xamarin.Chromium.Base.BuildInfo.IsAutomotive.get -> bool
Xamarin.Chromium.Base.BuildInfo.IsAutomotive.set -> void
Xamarin.Chromium.Base.BuildInfo.IsFoldable.get -> bool
Xamarin.Chromium.Base.BuildInfo.IsFoldable.set -> void
Xamarin.Chromium.Base.BuildInfo.IsTV.get -> bool
Xamarin.Chromium.Base.BuildInfo.IsTV.set -> void
Xamarin.Chromium.Base.BuildInfo.PackageName.get -> string?
Xamarin.Chromium.Base.BuildInfo.PackageName.set -> void
Xamarin.Chromium.Base.BuildInfo.ResourcesVersion.get -> string?
Xamarin.Chromium.Base.BuildInfo.ResourcesVersion.set -> void
Xamarin.Chromium.Base.BuildInfo.VersionCode.get -> long
Xamarin.Chromium.Base.BuildInfo.VersionCode.set -> void
Xamarin.Chromium.Base.BuildInfo.VersionName.get -> string?
Xamarin.Chromium.Base.BuildInfo.VersionName.set -> void
Xamarin.Chromium.Base.BuildInfo.VulkanDeqpLevel.get -> int
Xamarin.Chromium.Base.BuildInfo.VulkanDeqpLevel.set -> void
Xamarin.Chromium.Base.BundleUtils
Xamarin.Chromium.Base.BundleUtils.BundleUtils() -> void
Xamarin.Chromium.Base.BundleUtils.BundleUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Callback
Xamarin.Chromium.Base.CallbackConsts
Xamarin.Chromium.Base.CallbackController
Xamarin.Chromium.Base.CallbackController.CallbackController() -> void
Xamarin.Chromium.Base.CallbackController.Destroy() -> void
Xamarin.Chromium.Base.CallbackController.MakeCancelable(Java.Lang.IRunnable? runnable) -> Java.Lang.IRunnable?
Xamarin.Chromium.Base.CallbackController.MakeCancelable(Xamarin.Chromium.Base.ICallback? callback) -> Xamarin.Chromium.Base.ICallback?
Xamarin.Chromium.Base.CallbackHelper
Xamarin.Chromium.Base.CallbackHelper.CallbackHelper() -> void
Xamarin.Chromium.Base.CallbackHelper.CallbackHelper(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.CallbackUtils
Xamarin.Chromium.Base.CallbackUtils.CallbackUtils() -> void
Xamarin.Chromium.Base.CallbackUtils.CallbackUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.CancelableRunnable
Xamarin.Chromium.Base.CancelableRunnable.CancelableRunnable(Java.Lang.IRunnable? runnable) -> void
Xamarin.Chromium.Base.CancelableRunnable.CancelableRunnable(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.ChildBindingState
Xamarin.Chromium.Base.ChildBindingStateAttribute
Xamarin.Chromium.Base.ChildBindingStateAttribute.ChildBindingStateAttribute() -> void
Xamarin.Chromium.Base.ChildBindingStateConsts
Xamarin.Chromium.Base.CollectionUtil
Xamarin.Chromium.Base.CommandLine
Xamarin.Chromium.Base.CommandLine.CommandLine() -> void
Xamarin.Chromium.Base.CommandLine.CommandLine(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.CommandLineInitUtil
Xamarin.Chromium.Base.ContextUtils
Xamarin.Chromium.Base.ContextUtils.ContextUtils() -> void
Xamarin.Chromium.Base.ContextUtils.ContextUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.CpuFeatures
Xamarin.Chromium.Base.CpuFeatures.CpuFeatures() -> void
Xamarin.Chromium.Base.CpuFeatures.CpuFeatures(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.DeviceInfo
Xamarin.Chromium.Base.DiscardableReferencePool
Xamarin.Chromium.Base.DiscardableReferencePool.DiscardableReference
Xamarin.Chromium.Base.DiscardableReferencePool.DiscardableReference.DiscardableReference(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.DiscardableReferencePool.DiscardableReferencePool() -> void
Xamarin.Chromium.Base.DiscardableReferencePool.DiscardableReferencePool(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.EarlyTraceEvent
Xamarin.Chromium.Base.EarlyTraceEvent.EarlyTraceEvent() -> void
Xamarin.Chromium.Base.EarlyTraceEvent.EarlyTraceEvent(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.EventLog
Xamarin.Chromium.Base.EventLog.EventLog() -> void
Xamarin.Chromium.Base.EventLog.EventLog(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.FieldTrialList
Xamarin.Chromium.Base.FieldTrialList.FieldTrialList(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.FileProviderUtils
Xamarin.Chromium.Base.FileProviderUtils.FileProviderUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.FileProviderUtils.IFileProviderUtil
Xamarin.Chromium.Base.FileProviderUtils.IFileProviderUtil.GetContentUriFromFile(Java.IO.File? file) -> Android.Net.Uri?
Xamarin.Chromium.Base.FileUtils
Xamarin.Chromium.Base.FileUtils.FileUtils() -> void
Xamarin.Chromium.Base.FileUtils.FileUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.FileUtils.INatives
Xamarin.Chromium.Base.FileUtils.INatives.GetAbsoluteFilePath(string? filePath) -> string?
Xamarin.Chromium.Base.FileUtilsJni
Xamarin.Chromium.Base.FileUtilsJni.FileUtilsJni() -> void
Xamarin.Chromium.Base.FileUtilsJni.FileUtilsJni(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Flag
Xamarin.Chromium.Base.Flag.Flag(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Flag.MFeatureName.get -> string?
Xamarin.Chromium.Base.Flag.MFeatureName.set -> void
Xamarin.Chromium.Base.IActivityState
Xamarin.Chromium.Base.IAndroidInfo
Xamarin.Chromium.Base.IAndroidInfo.AbiName.get -> string?
Xamarin.Chromium.Base.IAndroidInfo.AbiName.set -> void
Xamarin.Chromium.Base.IAndroidInfo.AndroidBuildFp.get -> string?
Xamarin.Chromium.Base.IAndroidInfo.AndroidBuildFp.set -> void
Xamarin.Chromium.Base.IAndroidInfo.AndroidBuildId.get -> string?
Xamarin.Chromium.Base.IAndroidInfo.AndroidBuildId.set -> void
Xamarin.Chromium.Base.IAndroidInfo.Board.get -> string?
Xamarin.Chromium.Base.IAndroidInfo.Board.set -> void
Xamarin.Chromium.Base.IAndroidInfo.Brand.get -> string?
Xamarin.Chromium.Base.IAndroidInfo.Brand.set -> void
Xamarin.Chromium.Base.IAndroidInfo.BuildType.get -> string?
Xamarin.Chromium.Base.IAndroidInfo.BuildType.set -> void
Xamarin.Chromium.Base.IAndroidInfo.Codename.get -> string?
Xamarin.Chromium.Base.IAndroidInfo.Codename.set -> void
Xamarin.Chromium.Base.IAndroidInfo.Device.get -> string?
Xamarin.Chromium.Base.IAndroidInfo.Device.set -> void
Xamarin.Chromium.Base.IAndroidInfo.Hardware.get -> string?
Xamarin.Chromium.Base.IAndroidInfo.Hardware.set -> void
Xamarin.Chromium.Base.IAndroidInfo.IAndroidInfo() -> void
Xamarin.Chromium.Base.IAndroidInfo.IAndroidInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.IAndroidInfo.IsDebugAndroid.get -> bool
Xamarin.Chromium.Base.IAndroidInfo.IsDebugAndroid.set -> void
Xamarin.Chromium.Base.IAndroidInfo.Manufacturer.get -> string?
Xamarin.Chromium.Base.IAndroidInfo.Manufacturer.set -> void
Xamarin.Chromium.Base.IAndroidInfo.Model.get -> string?
Xamarin.Chromium.Base.IAndroidInfo.Model.set -> void
Xamarin.Chromium.Base.IAndroidInfo.ReadFromParcel(Android.OS.Parcel? _aidl_parcel) -> void
Xamarin.Chromium.Base.IAndroidInfo.SdkInt.get -> int
Xamarin.Chromium.Base.IAndroidInfo.SdkInt.set -> void
Xamarin.Chromium.Base.IAndroidInfo.SecurityPatch.get -> string?
Xamarin.Chromium.Base.IAndroidInfo.SecurityPatch.set -> void
Xamarin.Chromium.Base.IAndroidInfo.SocManufacturer.get -> string?
Xamarin.Chromium.Base.IAndroidInfo.SocManufacturer.set -> void
Xamarin.Chromium.Base.IAndroidInfo.VersionIncremental.get -> string?
Xamarin.Chromium.Base.IAndroidInfo.VersionIncremental.set -> void
Xamarin.Chromium.Base.IAndroidInfo.WriteToParcel(Android.OS.Parcel? _aidl_parcel, Android.OS.ParcelableWriteFlags _aidl_flag) -> void
Xamarin.Chromium.Base.IApkInfo
Xamarin.Chromium.Base.IApkInfo.HostPackageLabel.get -> string?
Xamarin.Chromium.Base.IApkInfo.HostPackageLabel.set -> void
Xamarin.Chromium.Base.IApkInfo.HostPackageName.get -> string?
Xamarin.Chromium.Base.IApkInfo.HostPackageName.set -> void
Xamarin.Chromium.Base.IApkInfo.HostVersionCode.get -> string?
Xamarin.Chromium.Base.IApkInfo.HostVersionCode.set -> void
Xamarin.Chromium.Base.IApkInfo.IApkInfo() -> void
Xamarin.Chromium.Base.IApkInfo.IApkInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.IApkInfo.InstallerPackageName.get -> string?
Xamarin.Chromium.Base.IApkInfo.InstallerPackageName.set -> void
Xamarin.Chromium.Base.IApkInfo.IsDebugApp.get -> bool
Xamarin.Chromium.Base.IApkInfo.IsDebugApp.set -> void
Xamarin.Chromium.Base.IApkInfo.PackageName.get -> string?
Xamarin.Chromium.Base.IApkInfo.PackageName.set -> void
Xamarin.Chromium.Base.IApkInfo.PackageVersionCode.get -> string?
Xamarin.Chromium.Base.IApkInfo.PackageVersionCode.set -> void
Xamarin.Chromium.Base.IApkInfo.PackageVersionName.get -> string?
Xamarin.Chromium.Base.IApkInfo.PackageVersionName.set -> void
Xamarin.Chromium.Base.IApkInfo.ReadFromParcel(Android.OS.Parcel? _aidl_parcel) -> void
Xamarin.Chromium.Base.IApkInfo.ResourcesVersion.get -> string?
Xamarin.Chromium.Base.IApkInfo.ResourcesVersion.set -> void
Xamarin.Chromium.Base.IApkInfo.TargetSdkVersion.get -> int
Xamarin.Chromium.Base.IApkInfo.TargetSdkVersion.set -> void
Xamarin.Chromium.Base.IApkInfo.WriteToParcel(Android.OS.Parcel? _aidl_parcel, Android.OS.ParcelableWriteFlags _aidl_flag) -> void
Xamarin.Chromium.Base.IApplicationState
Xamarin.Chromium.Base.ICallback
Xamarin.Chromium.Base.ICallback.Bind(Java.Lang.Object? result) -> Java.Lang.IRunnable?
Xamarin.Chromium.Base.ICallback.OnResult(Java.Lang.Object? result) -> void
Xamarin.Chromium.Base.ICallback.RunNullSafe(Xamarin.Chromium.Base.ICallback? callback, Java.Lang.Object? object) -> void
Xamarin.Chromium.Base.IChildBindingState
Xamarin.Chromium.Base.IDeviceInfo
Xamarin.Chromium.Base.IDeviceInfo.GmsVersionCode.get -> string?
Xamarin.Chromium.Base.IDeviceInfo.GmsVersionCode.set -> void
Xamarin.Chromium.Base.IDeviceInfo.IDeviceInfo() -> void
Xamarin.Chromium.Base.IDeviceInfo.IDeviceInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.IDeviceInfo.IsAutomotive.get -> bool
Xamarin.Chromium.Base.IDeviceInfo.IsAutomotive.set -> void
Xamarin.Chromium.Base.IDeviceInfo.IsDesktop.get -> bool
Xamarin.Chromium.Base.IDeviceInfo.IsDesktop.set -> void
Xamarin.Chromium.Base.IDeviceInfo.IsFoldable.get -> bool
Xamarin.Chromium.Base.IDeviceInfo.IsFoldable.set -> void
Xamarin.Chromium.Base.IDeviceInfo.IsTv.get -> bool
Xamarin.Chromium.Base.IDeviceInfo.IsTv.set -> void
Xamarin.Chromium.Base.IDeviceInfo.ReadFromParcel(Android.OS.Parcel? _aidl_parcel) -> void
Xamarin.Chromium.Base.IDeviceInfo.VulkanDeqpLevel.get -> int
Xamarin.Chromium.Base.IDeviceInfo.VulkanDeqpLevel.set -> void
Xamarin.Chromium.Base.IDeviceInfo.WriteToParcel(Android.OS.Parcel? _aidl_parcel, Android.OS.ParcelableWriteFlags _aidl_flag) -> void
Xamarin.Chromium.Base.IIntStringCallback
Xamarin.Chromium.Base.IIntStringCallback.OnResult(int number, string? string) -> void
Xamarin.Chromium.Base.IJniOnceCallback
Xamarin.Chromium.Base.IJniOnceRunnable
Xamarin.Chromium.Base.IJniRepeatingCallback
Xamarin.Chromium.Base.IJniRepeatingRunnable
Xamarin.Chromium.Base.IMemoryPressureLevel
Xamarin.Chromium.Base.ITerminationStatus
Xamarin.Chromium.Base.ITraceRecordMode
Xamarin.Chromium.Base.IUnownedUserData
Xamarin.Chromium.Base.IUnownedUserData.InformOnDetachmentFromHost() -> bool
Xamarin.Chromium.Base.IUnownedUserData.OnDetachedFromHost(Xamarin.Chromium.Base.UnownedUserDataHost? host) -> void
Xamarin.Chromium.Base.IUserData
Xamarin.Chromium.Base.IUserData.Destroy() -> void
Xamarin.Chromium.Base.ImportantFileWriterAndroid
Xamarin.Chromium.Base.ImportantFileWriterAndroid.INatives
Xamarin.Chromium.Base.ImportantFileWriterAndroid.INatives.WriteFileAtomically(string? fileName, byte[]? data) -> bool
Xamarin.Chromium.Base.ImportantFileWriterAndroid.ImportantFileWriterAndroid() -> void
Xamarin.Chromium.Base.ImportantFileWriterAndroid.ImportantFileWriterAndroid(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.ImportantFileWriterAndroidJni
Xamarin.Chromium.Base.ImportantFileWriterAndroidJni.ImportantFileWriterAndroidJni() -> void
Xamarin.Chromium.Base.ImportantFileWriterAndroidJni.ImportantFileWriterAndroidJni(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.InputHintChecker
Xamarin.Chromium.Base.InputHintChecker.INatives
Xamarin.Chromium.Base.InputHintChecker.INatives.FailedToInitializeForTesting() -> bool
Xamarin.Chromium.Base.InputHintChecker.INatives.HasInputForTesting.get -> bool
Xamarin.Chromium.Base.InputHintChecker.INatives.HasInputWithThrottlingForTesting.get -> bool
Xamarin.Chromium.Base.InputHintChecker.INatives.IsInitializedForTesting.get -> bool
Xamarin.Chromium.Base.InputHintChecker.INatives.OnCompositorViewHolderTouchEvent() -> void
Xamarin.Chromium.Base.InputHintChecker.INatives.SetIsAfterInputYieldForTesting(bool after) -> void
Xamarin.Chromium.Base.InputHintChecker.INatives.SetView(Java.Lang.Object? view) -> void
Xamarin.Chromium.Base.InputHintChecker.InputHintChecker() -> void
Xamarin.Chromium.Base.InputHintChecker.InputHintChecker(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.InputHintCheckerJni
Xamarin.Chromium.Base.InputHintCheckerJni.InputHintCheckerJni() -> void
Xamarin.Chromium.Base.InputHintCheckerJni.InputHintCheckerJni(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.IntentUtils
Xamarin.Chromium.Base.IntentUtils.IntentUtils() -> void
Xamarin.Chromium.Base.IntentUtils.IntentUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.JNIUtils
Xamarin.Chromium.Base.JNIUtils.JNIUtils() -> void
Xamarin.Chromium.Base.JNIUtils.JNIUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.JavaExceptionReporter
Xamarin.Chromium.Base.JavaExceptionReporter.JavaExceptionReporter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.JavaHandlerThread
Xamarin.Chromium.Base.JavaHandlerThread.JavaHandlerThread(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.JavaHandlerThread.JavaHandlerThread(string? name, int priority) -> void
Xamarin.Chromium.Base.JavaUtils
Xamarin.Chromium.Base.JavaUtils.JavaUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.JniAndroid
Xamarin.Chromium.Base.JniAndroid.UncaughtExceptionException
Xamarin.Chromium.Base.JniAndroid.UncaughtExceptionException.UncaughtExceptionException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.JniAndroid.UncaughtExceptionException.UncaughtExceptionException(string? nativeStackTrace, Java.Lang.Throwable? uncaughtException) -> void
Xamarin.Chromium.Base.Lifetime.DestroyChecker
Xamarin.Chromium.Base.Lifetime.DestroyChecker.DestroyChecker() -> void
Xamarin.Chromium.Base.Lifetime.DestroyChecker.DestroyChecker(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Lifetime.IDestroyable
Xamarin.Chromium.Base.Lifetime.IDestroyable.Destroy() -> void
Xamarin.Chromium.Base.Lifetime.LifetimeAssert
Xamarin.Chromium.Base.Lifetime.LifetimeAssert.LifetimeAssert(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.LocaleUtils
Xamarin.Chromium.Base.LocaleUtils.LocaleUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Log
Xamarin.Chromium.Base.Log.Log(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.MathUtils
Xamarin.Chromium.Base.MathUtils.MathUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Memory.IMemoryPressureCallback
Xamarin.Chromium.Base.Memory.IMemoryPressureCallback.OnPressure(int pressure) -> void
Xamarin.Chromium.Base.Memory.ISelfFreezeCallback
Xamarin.Chromium.Base.Memory.ISelfFreezeCallback.OnSelfFreeze() -> void
Xamarin.Chromium.Base.Memory.JavaHeapDumpGenerator
Xamarin.Chromium.Base.Memory.MemoryInfoBridge
Xamarin.Chromium.Base.Memory.MemoryInfoBridge.MemoryInfoBridge() -> void
Xamarin.Chromium.Base.Memory.MemoryInfoBridge.MemoryInfoBridge(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Memory.MemoryPressureUma
Xamarin.Chromium.Base.Memory.MemoryPressureUma.MemoryPressureUma(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.MemoryPressureLevel
Xamarin.Chromium.Base.MemoryPressureLevelAttribute
Xamarin.Chromium.Base.MemoryPressureLevelAttribute.MemoryPressureLevelAttribute() -> void
Xamarin.Chromium.Base.MemoryPressureLevelConsts
Xamarin.Chromium.Base.MemoryPressureListener
Xamarin.Chromium.Base.MemoryPressureListener.MemoryPressureListener() -> void
Xamarin.Chromium.Base.MemoryPressureListener.MemoryPressureListener(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Metrics.HistogramBucket
Xamarin.Chromium.Base.Metrics.HistogramBucket.HistogramBucket(int min, long max, int count) -> void
Xamarin.Chromium.Base.Metrics.HistogramBucket.HistogramBucket(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Metrics.HistogramBucket.MCount.get -> int
Xamarin.Chromium.Base.Metrics.HistogramBucket.MCount.set -> void
Xamarin.Chromium.Base.Metrics.HistogramBucket.MMax.get -> long
Xamarin.Chromium.Base.Metrics.HistogramBucket.MMax.set -> void
Xamarin.Chromium.Base.Metrics.HistogramBucket.MMin.get -> int
Xamarin.Chromium.Base.Metrics.HistogramBucket.MMin.set -> void
Xamarin.Chromium.Base.Metrics.IJSONVerbosityLevel
Xamarin.Chromium.Base.Metrics.IUmaRecorder
Xamarin.Chromium.Base.Metrics.IUmaRecorder.AddUserActionCallbackForTesting(Xamarin.Chromium.Base.ICallback? callback) -> void
Xamarin.Chromium.Base.Metrics.IUmaRecorder.GetHistogramSamplesForTesting(string? name) -> System.Collections.Generic.IList<Xamarin.Chromium.Base.Metrics.HistogramBucket!>?
Xamarin.Chromium.Base.Metrics.IUmaRecorder.GetHistogramTotalCountForTesting(string? name) -> int
Xamarin.Chromium.Base.Metrics.IUmaRecorder.GetHistogramValueCountForTesting(string? name, int sample) -> int
Xamarin.Chromium.Base.Metrics.IUmaRecorder.RecordBooleanHistogram(string? name, bool sample) -> void
Xamarin.Chromium.Base.Metrics.IUmaRecorder.RecordExponentialHistogram(string? name, int sample, int min, int max, int numBuckets) -> void
Xamarin.Chromium.Base.Metrics.IUmaRecorder.RecordLinearHistogram(string? name, int sample, int min, int max, int numBuckets) -> void
Xamarin.Chromium.Base.Metrics.IUmaRecorder.RecordSparseHistogram(string? name, int sample) -> void
Xamarin.Chromium.Base.Metrics.IUmaRecorder.RecordUserAction(string? name, long elapsedRealtimeMillis) -> void
Xamarin.Chromium.Base.Metrics.IUmaRecorder.RemoveUserActionCallbackForTesting(Xamarin.Chromium.Base.ICallback? callback) -> void
Xamarin.Chromium.Base.Metrics.JSONVerbosityLevel
Xamarin.Chromium.Base.Metrics.JSONVerbosityLevelAttribute
Xamarin.Chromium.Base.Metrics.JSONVerbosityLevelAttribute.JSONVerbosityLevelAttribute() -> void
Xamarin.Chromium.Base.Metrics.JSONVerbosityLevelConsts
Xamarin.Chromium.Base.Metrics.NativeUmaRecorderJni
Xamarin.Chromium.Base.Metrics.NativeUmaRecorderJni.NativeUmaRecorderJni() -> void
Xamarin.Chromium.Base.Metrics.NativeUmaRecorderJni.NativeUmaRecorderJni(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Metrics.RecordHistogram
Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordHistogram() -> void
Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordHistogram(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Metrics.RecordUserAction
Xamarin.Chromium.Base.Metrics.RecordUserAction.RecordUserAction() -> void
Xamarin.Chromium.Base.Metrics.RecordUserAction.RecordUserAction(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Metrics.StatisticsRecorderAndroid
Xamarin.Chromium.Base.Metrics.TimingMetric
Xamarin.Chromium.Base.Metrics.TimingMetric.TimingMetric(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Metrics.UmaRecorderHolder
Xamarin.Chromium.Base.Metrics.UmaRecorderHolder.UmaRecorderHolder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.MutableFlagWithSafeDefault
Xamarin.Chromium.Base.MutableFlagWithSafeDefault.MutableFlagWithSafeDefault(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.ObserverList
Xamarin.Chromium.Base.ObserverList.IRewindableIterator
Xamarin.Chromium.Base.ObserverList.IRewindableIterator.Rewind() -> void
Xamarin.Chromium.Base.ObserverList.MObservers.get -> System.Collections.IList?
Xamarin.Chromium.Base.ObserverList.MObservers.set -> void
Xamarin.Chromium.Base.ObserverList.ObserverList() -> void
Xamarin.Chromium.Base.ObserverList.ObserverList(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.PackageManagerUtils
Xamarin.Chromium.Base.PackageManagerUtils.PackageManagerUtils() -> void
Xamarin.Chromium.Base.PackageManagerUtils.PackageManagerUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.PackageUtils
Xamarin.Chromium.Base.PackageUtils.PackageUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.PathService
Xamarin.Chromium.Base.PathService.PathService(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.PathUtils
Xamarin.Chromium.Base.PathUtils.PathUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.PiiElider
Xamarin.Chromium.Base.PiiElider.PiiElider() -> void
Xamarin.Chromium.Base.PiiElider.PiiElider(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.PostNativeFlag
Xamarin.Chromium.Base.PostNativeFlag.PostNativeFlag(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Power_monitor.BatteryPowerStatus
Xamarin.Chromium.Base.Power_monitor.BatteryPowerStatusAttribute
Xamarin.Chromium.Base.Power_monitor.BatteryPowerStatusAttribute.BatteryPowerStatusAttribute() -> void
Xamarin.Chromium.Base.Power_monitor.BatteryPowerStatusConsts
Xamarin.Chromium.Base.Power_monitor.IBatteryPowerStatus
Xamarin.Chromium.Base.Promise
Xamarin.Chromium.Base.Promise.IAsyncFunction
Xamarin.Chromium.Base.Promise.Promise() -> void
Xamarin.Chromium.Base.Promise.Promise(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Promise.UnhandledRejectionException
Xamarin.Chromium.Base.Promise.UnhandledRejectionException.UnhandledRejectionException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Promise.UnhandledRejectionException.UnhandledRejectionException(string? message, Java.Lang.Throwable? cause) -> void
Xamarin.Chromium.Base.RadioUtils
Xamarin.Chromium.Base.RadioUtils.RadioUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.RequiredCallback
Xamarin.Chromium.Base.RequiredCallback.RequiredCallback(Xamarin.Chromium.Base.ICallback? callback) -> void
Xamarin.Chromium.Base.RequiredCallback.RequiredCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.ResettersForTesting
Xamarin.Chromium.Base.ResettersForTesting.IState
Xamarin.Chromium.Base.ResettersForTesting.ResettersForTesting() -> void
Xamarin.Chromium.Base.ResettersForTesting.ResettersForTesting(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.ResettersForTesting.State
Xamarin.Chromium.Base.ResettersForTesting.StateConsts
Xamarin.Chromium.Base.StreamUtil
Xamarin.Chromium.Base.StreamUtil.StreamUtil() -> void
Xamarin.Chromium.Base.StreamUtil.StreamUtil(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.StrictModeContext
Xamarin.Chromium.Base.StrictModeContext.StrictModeContext() -> void
Xamarin.Chromium.Base.StrictModeContext.StrictModeContext(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Supplier.IDestroyableObservableSupplier
Xamarin.Chromium.Base.Supplier.ILazyOneshotSupplier
Xamarin.Chromium.Base.Supplier.ILazyOneshotSupplier.FromSupplier(Xamarin.Chromium.Base.Supplier.ISupplier? supplier) -> Xamarin.Chromium.Base.Supplier.ILazyOneshotSupplier?
Xamarin.Chromium.Base.Supplier.ILazyOneshotSupplier.FromValue(Java.Lang.Object? value) -> Xamarin.Chromium.Base.Supplier.ILazyOneshotSupplier?
Xamarin.Chromium.Base.Supplier.ILazyOneshotSupplier.Get() -> Java.Lang.Object?
Xamarin.Chromium.Base.Supplier.ILazyOneshotSupplier.HasValue.get -> bool
Xamarin.Chromium.Base.Supplier.ILazyOneshotSupplier.OnAvailable(Xamarin.Chromium.Base.ICallback? callback) -> void
Xamarin.Chromium.Base.Supplier.IObservableSupplier
Xamarin.Chromium.Base.Supplier.IObservableSupplier.AddObserver(Xamarin.Chromium.Base.ICallback? obs) -> Java.Lang.Object?
Xamarin.Chromium.Base.Supplier.IObservableSupplier.AddObserver(Xamarin.Chromium.Base.ICallback? obs, int behavior) -> Java.Lang.Object?
Xamarin.Chromium.Base.Supplier.IObservableSupplier.AddSyncObserver(Xamarin.Chromium.Base.ICallback? obs) -> Java.Lang.Object?
Xamarin.Chromium.Base.Supplier.IObservableSupplier.AddSyncObserverAndCallIfNonNull(Xamarin.Chromium.Base.ICallback? obs) -> Java.Lang.Object?
Xamarin.Chromium.Base.Supplier.IObservableSupplier.AddSyncObserverAndPostIfNonNull(Xamarin.Chromium.Base.ICallback? obs) -> Java.Lang.Object?
Xamarin.Chromium.Base.Supplier.IObservableSupplier.RemoveObserver(Xamarin.Chromium.Base.ICallback? obs) -> void
Xamarin.Chromium.Base.Supplier.IObservableSupplierNotifyBehavior
Xamarin.Chromium.Base.Supplier.IOneshotSupplier
Xamarin.Chromium.Base.Supplier.IOneshotSupplier.OnAvailable(Xamarin.Chromium.Base.ICallback? callback) -> Java.Lang.Object?
Xamarin.Chromium.Base.Supplier.IOneshotSupplier.RunSyncOrOnAvailable(Xamarin.Chromium.Base.ICallback? callback) -> void
Xamarin.Chromium.Base.Supplier.ISupplier
Xamarin.Chromium.Base.Supplier.ISupplier.HasValue.get -> bool
Xamarin.Chromium.Base.Supplier.ISyncOneshotSupplier
Xamarin.Chromium.Base.Supplier.ISyncOneshotSupplier.OnAvailable(Xamarin.Chromium.Base.ICallback? callback) -> Java.Lang.Object?
Xamarin.Chromium.Base.Supplier.LazyOneshotSupplier
Xamarin.Chromium.Base.Supplier.LazyOneshotSupplierConsts
Xamarin.Chromium.Base.Supplier.LazyOneshotSupplierImpl
Xamarin.Chromium.Base.Supplier.LazyOneshotSupplierImpl.LazyOneshotSupplierImpl() -> void
Xamarin.Chromium.Base.Supplier.LazyOneshotSupplierImpl.LazyOneshotSupplierImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Supplier.ObservableSupplierImpl
Xamarin.Chromium.Base.Supplier.ObservableSupplierImpl.MObservers.get -> Xamarin.Chromium.Base.ObserverList?
Xamarin.Chromium.Base.Supplier.ObservableSupplierImpl.MObservers.set -> void
Xamarin.Chromium.Base.Supplier.ObservableSupplierImpl.ObservableSupplierImpl() -> void
Xamarin.Chromium.Base.Supplier.ObservableSupplierImpl.ObservableSupplierImpl(Java.Lang.Object? initialValue) -> void
Xamarin.Chromium.Base.Supplier.ObservableSupplierImpl.ObservableSupplierImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Supplier.ObservableSupplierNotifyBehavior
Xamarin.Chromium.Base.Supplier.ObservableSupplierNotifyBehaviorConsts
Xamarin.Chromium.Base.Supplier.OneShotCallback
Xamarin.Chromium.Base.Supplier.OneShotCallback.OneShotCallback(Xamarin.Chromium.Base.Supplier.IObservableSupplier? supplier, Xamarin.Chromium.Base.ICallback? callback) -> void
Xamarin.Chromium.Base.Supplier.OneShotCallback.OneShotCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Supplier.OneshotSupplierImpl
Xamarin.Chromium.Base.Supplier.OneshotSupplierImpl.OneshotSupplierImpl() -> void
Xamarin.Chromium.Base.Supplier.OneshotSupplierImpl.OneshotSupplierImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Supplier.SupplierUtils
Xamarin.Chromium.Base.Supplier.SupplierUtils.SupplierUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Supplier.SyncOneshotSupplierImpl
Xamarin.Chromium.Base.Supplier.SyncOneshotSupplierImpl.SyncOneshotSupplierImpl() -> void
Xamarin.Chromium.Base.Supplier.SyncOneshotSupplierImpl.SyncOneshotSupplierImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Supplier.TransitiveObservableSupplier
Xamarin.Chromium.Base.Supplier.TransitiveObservableSupplier.TransitiveObservableSupplier(Xamarin.Chromium.Base.Supplier.IObservableSupplier? parentSupplier, Java.Util.Functions.IFunction? unwrapFunction) -> void
Xamarin.Chromium.Base.Supplier.TransitiveObservableSupplier.TransitiveObservableSupplier(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Supplier.UnownedUserDataSupplier
Xamarin.Chromium.Base.Supplier.UnownedUserDataSupplier.UnownedUserDataSupplier(Xamarin.Chromium.Base.UnownedUserDataKey? uudKey) -> void
Xamarin.Chromium.Base.Supplier.UnownedUserDataSupplier.UnownedUserDataSupplier(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Supplier.UnwrapObservableSupplier
Xamarin.Chromium.Base.Supplier.UnwrapObservableSupplier.UnwrapObservableSupplier(Xamarin.Chromium.Base.Supplier.IObservableSupplier? parentSupplier, Java.Util.Functions.IFunction? unwrapFunction) -> void
Xamarin.Chromium.Base.Supplier.UnwrapObservableSupplier.UnwrapObservableSupplier(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Task.AsyncTask
Xamarin.Chromium.Base.Task.AsyncTask.AsyncTask() -> void
Xamarin.Chromium.Base.Task.AsyncTask.AsyncTask(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Task.AsyncTask.Cancel(bool mayInterruptIfRunning) -> bool
Xamarin.Chromium.Base.Task.AsyncTask.ExecuteOnExecutor(Java.Util.Concurrent.IExecutor? exec) -> Xamarin.Chromium.Base.Task.AsyncTask?
Xamarin.Chromium.Base.Task.AsyncTask.ExecuteOnTaskRunner(Xamarin.Chromium.Base.Task.ITaskRunner? taskRunner) -> Xamarin.Chromium.Base.Task.AsyncTask?
Xamarin.Chromium.Base.Task.AsyncTask.ExecuteWithTaskTraits(int taskTraits) -> Xamarin.Chromium.Base.Task.AsyncTask?
Xamarin.Chromium.Base.Task.AsyncTask.Get() -> Java.Lang.Object?
Xamarin.Chromium.Base.Task.AsyncTask.Get(long timeout, Java.Util.Concurrent.TimeUnit? unit) -> Java.Lang.Object?
Xamarin.Chromium.Base.Task.AsyncTask.IStatus
Xamarin.Chromium.Base.Task.AsyncTask.IsCancelled.get -> bool
Xamarin.Chromium.Base.Task.AsyncTask.Status
Xamarin.Chromium.Base.Task.AsyncTask.StatusConsts
Xamarin.Chromium.Base.Task.AsyncTask.StatusData() -> int
Xamarin.Chromium.Base.Task.AsyncTask.UmaStatus.get -> int
Xamarin.Chromium.Base.Task.BackgroundOnlyAsyncTask
Xamarin.Chromium.Base.Task.BackgroundOnlyAsyncTask.BackgroundOnlyAsyncTask() -> void
Xamarin.Chromium.Base.Task.BackgroundOnlyAsyncTask.BackgroundOnlyAsyncTask(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Task.ChainedTasks
Xamarin.Chromium.Base.Task.ChainedTasks.ChainedTasks() -> void
Xamarin.Chromium.Base.Task.ChainedTasks.ChainedTasks(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Task.ISequencedTaskRunner
Xamarin.Chromium.Base.Task.ITaskPriority
Xamarin.Chromium.Base.Task.ITaskRunner
Xamarin.Chromium.Base.Task.ITaskRunner.PostDelayedTask(Java.Lang.IRunnable? task, long delay) -> void
Xamarin.Chromium.Base.Task.ITaskRunnerType
Xamarin.Chromium.Base.Task.ITaskTraits
Xamarin.Chromium.Base.Task.PostTask
Xamarin.Chromium.Base.Task.PostTask.PostTask() -> void
Xamarin.Chromium.Base.Task.PostTask.PostTask(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Task.SequencedTaskRunnerImpl
Xamarin.Chromium.Base.Task.SequencedTaskRunnerImpl.SequencedTaskRunnerImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Task.TaskPriority
Xamarin.Chromium.Base.Task.TaskPriorityAttribute
Xamarin.Chromium.Base.Task.TaskPriorityAttribute.TaskPriorityAttribute() -> void
Xamarin.Chromium.Base.Task.TaskPriorityConsts
Xamarin.Chromium.Base.Task.TaskRunnerImpl
Xamarin.Chromium.Base.Task.TaskRunnerImpl.Execute(Java.Lang.IRunnable? task) -> void
Xamarin.Chromium.Base.Task.TaskRunnerImpl.MRunPreNativeTaskClosure.get -> Java.Lang.IRunnable?
Xamarin.Chromium.Base.Task.TaskRunnerImpl.MRunPreNativeTaskClosure.set -> void
Xamarin.Chromium.Base.Task.TaskRunnerImpl.MTaskTraits.get -> int
Xamarin.Chromium.Base.Task.TaskRunnerImpl.MTaskTraits.set -> void
Xamarin.Chromium.Base.Task.TaskRunnerImpl.PostDelayedTask(Java.Lang.IRunnable? task, long delay) -> void
Xamarin.Chromium.Base.Task.TaskRunnerImpl.TaskRunnerImpl(int traits, string? traceCategory, int taskRunnerType) -> void
Xamarin.Chromium.Base.Task.TaskRunnerImpl.TaskRunnerImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Task.TaskRunnerType
Xamarin.Chromium.Base.Task.TaskRunnerTypeAttribute
Xamarin.Chromium.Base.Task.TaskRunnerTypeAttribute.TaskRunnerTypeAttribute() -> void
Xamarin.Chromium.Base.Task.TaskRunnerTypeConsts
Xamarin.Chromium.Base.Task.TaskTraits
Xamarin.Chromium.Base.Task.TaskTraitsAttribute
Xamarin.Chromium.Base.Task.TaskTraitsAttribute.TaskTraitsAttribute() -> void
Xamarin.Chromium.Base.Task.TaskTraitsConsts
Xamarin.Chromium.Base.Task.UiThreadTaskRunnerImpl
Xamarin.Chromium.Base.Task.UiThreadTaskRunnerImpl.UiThreadTaskRunnerImpl(int traits) -> void
Xamarin.Chromium.Base.Task.UiThreadTaskRunnerImpl.UiThreadTaskRunnerImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.TerminationStatus
Xamarin.Chromium.Base.TerminationStatusAttribute
Xamarin.Chromium.Base.TerminationStatusAttribute.TerminationStatusAttribute() -> void
Xamarin.Chromium.Base.TerminationStatusConsts
Xamarin.Chromium.Base.Test.ClangProfiler
Xamarin.Chromium.Base.Test.ClangProfiler.ClangProfiler(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.ThreadUtils
Xamarin.Chromium.Base.ThreadUtils.ThreadChecker
Xamarin.Chromium.Base.ThreadUtils.ThreadChecker.ThreadChecker() -> void
Xamarin.Chromium.Base.ThreadUtils.ThreadChecker.ThreadChecker(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.ThreadUtils.ThreadUtils() -> void
Xamarin.Chromium.Base.ThreadUtils.ThreadUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.TimeUtils
Xamarin.Chromium.Base.TimeUtils.CurrentThreadTimeMillisTimer
Xamarin.Chromium.Base.TimeUtils.CurrentThreadTimeMillisTimer.CurrentThreadTimeMillisTimer() -> void
Xamarin.Chromium.Base.TimeUtils.CurrentThreadTimeMillisTimer.CurrentThreadTimeMillisTimer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.TimeUtils.ElapsedRealtimeMillisTimer
Xamarin.Chromium.Base.TimeUtils.ElapsedRealtimeMillisTimer.ElapsedRealtimeMillisTimer() -> void
Xamarin.Chromium.Base.TimeUtils.ElapsedRealtimeMillisTimer.ElapsedRealtimeMillisTimer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.TimeUtils.ElapsedRealtimeNanosTimer
Xamarin.Chromium.Base.TimeUtils.ElapsedRealtimeNanosTimer.ElapsedRealtimeNanosTimer() -> void
Xamarin.Chromium.Base.TimeUtils.ElapsedRealtimeNanosTimer.ElapsedRealtimeNanosTimer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.TimeUtils.TimeUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.TimeUtils.UptimeMillisTimer
Xamarin.Chromium.Base.TimeUtils.UptimeMillisTimer.UptimeMillisTimer() -> void
Xamarin.Chromium.Base.TimeUtils.UptimeMillisTimer.UptimeMillisTimer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Token
Xamarin.Chromium.Base.Token.High.get -> long
Xamarin.Chromium.Base.Token.INatives
Xamarin.Chromium.Base.Token.INatives.CreateRandom() -> Xamarin.Chromium.Base.Token?
Xamarin.Chromium.Base.Token.IsZero.get -> bool
Xamarin.Chromium.Base.Token.Low.get -> long
Xamarin.Chromium.Base.Token.ToBundle() -> Android.OS.Bundle?
Xamarin.Chromium.Base.Token.Token(long high, long low) -> void
Xamarin.Chromium.Base.TokenBase
Xamarin.Chromium.Base.TokenBase.MHigh.get -> long
Xamarin.Chromium.Base.TokenBase.MHigh.set -> void
Xamarin.Chromium.Base.TokenBase.MLow.get -> long
Xamarin.Chromium.Base.TokenBase.MLow.set -> void
Xamarin.Chromium.Base.TokenBase.TokenBase(long high, long low) -> void
Xamarin.Chromium.Base.TokenBase.TokenBase(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.TokenJni
Xamarin.Chromium.Base.TokenJni.TokenJni() -> void
Xamarin.Chromium.Base.TokenJni.TokenJni(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.TraceEvent
Xamarin.Chromium.Base.TraceEvent.ActivityInfo
Xamarin.Chromium.Base.TraceEvent.ActivityInfo.ActivityInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.TraceEvent.ActivityInfo.ActivityInfo(string? activityName) -> void
Xamarin.Chromium.Base.TraceEvent.ActivityInfo.MActivityName.get -> string?
Xamarin.Chromium.Base.TraceEvent.ActivityInfo.MActivityName.set -> void
Xamarin.Chromium.Base.TraceEvent.ActivityInfo.MViews.get -> System.Collections.IList?
Xamarin.Chromium.Base.TraceEvent.ActivityInfo.MViews.set -> void
Xamarin.Chromium.Base.TraceEvent.TraceEvent(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.TraceEvent.ViewInfo
Xamarin.Chromium.Base.TraceEvent.ViewInfo.ViewInfo(int id, int parentId, bool isShown, bool isDirty, string? className, Android.Content.Res.Resources? res) -> void
Xamarin.Chromium.Base.TraceEvent.ViewInfo.ViewInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.TraceRecordMode
Xamarin.Chromium.Base.TraceRecordModeAttribute
Xamarin.Chromium.Base.TraceRecordModeAttribute.TraceRecordModeAttribute() -> void
Xamarin.Chromium.Base.TraceRecordModeConsts
Xamarin.Chromium.Base.UnguessableToken
Xamarin.Chromium.Base.UnguessableToken.DescribeContents() -> int
Xamarin.Chromium.Base.UnguessableToken.HighForTesting.get -> long
Xamarin.Chromium.Base.UnguessableToken.LowForTesting.get -> long
Xamarin.Chromium.Base.UnguessableToken.WriteToParcel(Android.OS.Parcel? dest, Android.OS.ParcelableWriteFlags flags) -> void
Xamarin.Chromium.Base.UnownedUserDataHost
Xamarin.Chromium.Base.UnownedUserDataHost.Destroy() -> void
Xamarin.Chromium.Base.UnownedUserDataHost.UnownedUserDataHost() -> void
Xamarin.Chromium.Base.UnownedUserDataKey
Xamarin.Chromium.Base.UnownedUserDataKey.AttachToHost(Xamarin.Chromium.Base.UnownedUserDataHost? host, Java.Lang.Object? object) -> void
Xamarin.Chromium.Base.UnownedUserDataKey.DetachFromAllHosts(Java.Lang.Object? object) -> void
Xamarin.Chromium.Base.UnownedUserDataKey.DetachFromHost(Xamarin.Chromium.Base.UnownedUserDataHost? host) -> void
Xamarin.Chromium.Base.UnownedUserDataKey.IsAttachedToAnyHost(Java.Lang.Object? object) -> bool
Xamarin.Chromium.Base.UnownedUserDataKey.IsAttachedToHost(Xamarin.Chromium.Base.UnownedUserDataHost? host) -> bool
Xamarin.Chromium.Base.UnownedUserDataKey.RetrieveDataFromHost(Xamarin.Chromium.Base.UnownedUserDataHost? host) -> Java.Lang.Object?
Xamarin.Chromium.Base.UnownedUserDataKey.UnownedUserDataKey(Java.Lang.Class? clazz) -> void
Xamarin.Chromium.Base.UserDataHost
Xamarin.Chromium.Base.UserDataHost.Destroy() -> void
Xamarin.Chromium.Base.UserDataHost.GetUserData(Java.Lang.Class? key) -> Java.Lang.Object?
Xamarin.Chromium.Base.UserDataHost.RemoveUserData(Java.Lang.Class? key) -> Java.Lang.Object?
Xamarin.Chromium.Base.UserDataHost.SetUserData(Java.Lang.Class? key, Java.Lang.Object? object) -> Java.Lang.Object?
Xamarin.Chromium.Base.UserDataHost.UserDataHost() -> void
Xamarin.Chromium.Base.ValueChangedCallback
Xamarin.Chromium.Base.ValueChangedCallback.IValueChangedObserver
Xamarin.Chromium.Base.ValueChangedCallback.IValueChangedObserver.OnValueChanged(Java.Lang.Object? newValue, Java.Lang.Object? oldValue) -> void
Xamarin.Chromium.Base.ValueChangedCallback.ValueChangedCallback(Xamarin.Chromium.Base.ValueChangedCallback.IValueChangedObserver? onValueChangedObserver) -> void
Xamarin.Chromium.Base.ValueChangedCallback.ValueChangedCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Version_info.Channel
Xamarin.Chromium.Base.Version_info.ChannelAttribute
Xamarin.Chromium.Base.Version_info.ChannelAttribute.ChannelAttribute() -> void
Xamarin.Chromium.Base.Version_info.ChannelConsts
Xamarin.Chromium.Base.Version_info.IChannel
Xamarin.Chromium.Base.Version_info.VersionConstants
Xamarin.Chromium.Base.Version_info.VersionConstants.VersionConstants() -> void
Xamarin.Chromium.Base.Version_info.VersionConstants.VersionConstants(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Version_info.VersionConstantsBridge
Xamarin.Chromium.Base.Version_info.VersionConstantsBridge.VersionConstantsBridge() -> void
Xamarin.Chromium.Base.Version_info.VersionConstantsBridge.VersionConstantsBridge(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.Version_info.VersionInfo
Xamarin.Chromium.Base.Version_info.VersionInfo.VersionInfo() -> void
Xamarin.Chromium.Base.Version_info.VersionInfo.VersionInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Base.WrappedClassLoader
Xamarin.Chromium.Base.WrappedClassLoader.WrappedClassLoader(Java.Lang.ClassLoader? primary, Java.Lang.ClassLoader? secondary) -> void
Xamarin.Chromium.Base.WrappedClassLoader.WrappedClassLoader(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.AndroidCertVerifyResult
Xamarin.Chromium.CroNet.AndroidCertVerifyResult.AndroidCertVerifyResult(int status) -> void
Xamarin.Chromium.CroNet.AndroidCertVerifyResult.AndroidCertVerifyResult(int status, bool isIssuedByKnownRoot, System.Collections.Generic.IList<Java.Security.Cert.X509Certificate!>? certificateChain) -> void
Xamarin.Chromium.CroNet.AndroidCertVerifyResult.AndroidCertVerifyResult(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.AndroidKeyStore
Xamarin.Chromium.CroNet.AndroidKeyStore.AndroidKeyStore() -> void
Xamarin.Chromium.CroNet.AndroidKeyStore.AndroidKeyStore(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.AndroidTrafficStats
Xamarin.Chromium.CroNet.AndroidTrafficStats.AndroidTrafficStats(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.CertVerifyStatusAndroid
Xamarin.Chromium.CroNet.CertVerifyStatusAndroidAttribute
Xamarin.Chromium.CroNet.CertVerifyStatusAndroidAttribute.CertVerifyStatusAndroidAttribute() -> void
Xamarin.Chromium.CroNet.CertVerifyStatusAndroidConsts
Xamarin.Chromium.CroNet.ChromiumNetworkAdapter
Xamarin.Chromium.CroNet.ConnectionCost
Xamarin.Chromium.CroNet.ConnectionCostAttribute
Xamarin.Chromium.CroNet.ConnectionCostAttribute.ConnectionCostAttribute() -> void
Xamarin.Chromium.CroNet.ConnectionCostConsts
Xamarin.Chromium.CroNet.ConnectionSubtype
Xamarin.Chromium.CroNet.ConnectionSubtypeAttribute
Xamarin.Chromium.CroNet.ConnectionSubtypeAttribute.ConnectionSubtypeAttribute() -> void
Xamarin.Chromium.CroNet.ConnectionSubtypeConsts
Xamarin.Chromium.CroNet.ConnectionType
Xamarin.Chromium.CroNet.ConnectionTypeAttribute
Xamarin.Chromium.CroNet.ConnectionTypeAttribute.ConnectionTypeAttribute() -> void
Xamarin.Chromium.CroNet.ConnectionTypeConsts
Xamarin.Chromium.CroNet.ConnectivityManagerShim
Xamarin.Chromium.CroNet.ConnectivityManagerShim.ConnectivityManagerShim() -> void
Xamarin.Chromium.CroNet.ConnectivityManagerShim.ConnectivityManagerShim(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.DnsStatus
Xamarin.Chromium.CroNet.DnsStatus.DnsStatus(System.Collections.Generic.IList<Java.Net.InetAddress!>? dnsServers, bool privateDnsActive, string? privateDnsServerName, string? searchDomains) -> void
Xamarin.Chromium.CroNet.DnsStatus.DnsStatus(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.GURLUtils
Xamarin.Chromium.CroNet.GURLUtils.GURLUtils() -> void
Xamarin.Chromium.CroNet.GURLUtils.INatives
Xamarin.Chromium.CroNet.GURLUtils.INatives.GetOrigin(string? url) -> string?
Xamarin.Chromium.CroNet.GURLUtilsJni
Xamarin.Chromium.CroNet.GURLUtilsJni.GURLUtilsJni() -> void
Xamarin.Chromium.CroNet.GURLUtilsJni.GURLUtilsJni(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.HttpNegotiateAuthenticator
Xamarin.Chromium.CroNet.HttpNegotiateAuthenticator.HttpNegotiateAuthenticator(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.HttpNegotiateAuthenticator.HttpNegotiateAuthenticator(string? accountType) -> void
Xamarin.Chromium.CroNet.HttpNegotiateConstants
Xamarin.Chromium.CroNet.HttpNegotiateConstants.HttpNegotiateConstants() -> void
Xamarin.Chromium.CroNet.HttpNegotiateConstants.HttpNegotiateConstants(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.HttpUtil
Xamarin.Chromium.CroNet.HttpUtil.HttpUtil() -> void
Xamarin.Chromium.CroNet.ICertVerifyStatusAndroid
Xamarin.Chromium.CroNet.IConnectionCost
Xamarin.Chromium.CroNet.IConnectionSubtype
Xamarin.Chromium.CroNet.IConnectionType
Xamarin.Chromium.CroNet.IIdempotency
Xamarin.Chromium.CroNet.INetError
Xamarin.Chromium.CroNet.INetId
Xamarin.Chromium.CroNet.INetLogCaptureMode
Xamarin.Chromium.CroNet.INetworkQualityObservationSource
Xamarin.Chromium.CroNet.IPrivateKeyType
Xamarin.Chromium.CroNet.IRequestPriority
Xamarin.Chromium.CroNet.ITrafficStatsError
Xamarin.Chromium.CroNet.ITrafficStatsTag
Xamarin.Chromium.CroNet.ITrafficStatsUid
Xamarin.Chromium.CroNet.Idempotency
Xamarin.Chromium.CroNet.IdempotencyAttribute
Xamarin.Chromium.CroNet.IdempotencyAttribute.IdempotencyAttribute() -> void
Xamarin.Chromium.CroNet.IdempotencyConsts
Xamarin.Chromium.CroNet.Impl.AndroidOsBuild
Xamarin.Chromium.CroNet.Impl.AndroidOsBuild.AndroidOsBuild(string? type) -> void
Xamarin.Chromium.CroNet.Impl.AndroidOsBuild.Type.get -> string?
Xamarin.Chromium.CroNet.Impl.AndroidOsBuild.WithOverrideForTesting
Xamarin.Chromium.CroNet.Impl.AndroidOsBuild.WithOverrideForTesting.Close() -> void
Xamarin.Chromium.CroNet.Impl.AndroidOsBuild.WithOverrideForTesting.WithOverrideForTesting(Xamarin.Chromium.CroNet.Impl.AndroidOsBuild? override) -> void
Xamarin.Chromium.CroNet.Impl.AndroidOsSystemProperties
Xamarin.Chromium.CroNet.Impl.AndroidOsSystemProperties.AndroidOsSystemProperties() -> void
Xamarin.Chromium.CroNet.Impl.AndroidOsSystemProperties.WithOverridesForTesting
Xamarin.Chromium.CroNet.Impl.AndroidOsSystemProperties.WithOverridesForTesting.Close() -> void
Xamarin.Chromium.CroNet.Impl.AndroidOsSystemProperties.WithOverridesForTesting.WithOverridesForTesting(System.Collections.Generic.IDictionary<string!, string!>? overrides) -> void
Xamarin.Chromium.CroNet.Impl.BidirectionalStreamNetworkException
Xamarin.Chromium.CroNet.Impl.BidirectionalStreamNetworkException.BidirectionalStreamNetworkException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.Impl.BidirectionalStreamNetworkException.BidirectionalStreamNetworkException(string? message, int errorCode, int cronetInternalErrorCode) -> void
Xamarin.Chromium.CroNet.Impl.CronetBidirectionalStream
Xamarin.Chromium.CroNet.Impl.CronetBidirectionalStream.CronetBidirectionalStream(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.Impl.CronetLibraryLoader
Xamarin.Chromium.CroNet.Impl.CronetLibraryLoader.CronetLibraryLoader() -> void
Xamarin.Chromium.CroNet.Impl.CronetLibraryLoader.CronetLibraryLoader(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.Impl.CronetUploadDataStream
Xamarin.Chromium.CroNet.Impl.CronetUploadDataStream.CreateUploadDataStreamForTesting() -> long
Xamarin.Chromium.CroNet.Impl.CronetUploadDataStream.CronetUploadDataStream(Xamarin.Chromium.CroNet.UploadDataProvider? dataProvider, Java.Util.Concurrent.IExecutor? executor, Xamarin.Chromium.CroNet.Impl.CronetUrlRequest? request) -> void
Xamarin.Chromium.CroNet.Impl.CronetUrlRequest
Xamarin.Chromium.CroNet.Impl.CronetUrlRequest.SetOnDestroyedCallbackForTesting(Java.Lang.IRunnable? onDestroyedCallbackForTesting) -> void
Xamarin.Chromium.CroNet.Impl.CronetUrlRequest.SetOnDestroyedUploadCallbackForTesting(Java.Lang.IRunnable? onDestroyedUploadCallbackForTesting) -> void
Xamarin.Chromium.CroNet.Impl.CronetUrlRequest.UrlRequestAdapterForTesting.get -> long
Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext
Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.CronetUrlRequestContext(Xamarin.Chromium.CroNet.Impl.CronetEngineBuilderImpl? builder, long startUptimeMillis) -> void
Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.CronetUrlRequestContext(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.Impl.IUrlRequestError
Xamarin.Chromium.CroNet.Impl.NativeCronetEngineBuilderImpl
Xamarin.Chromium.CroNet.Impl.NativeCronetEngineBuilderImpl.NativeCronetEngineBuilderImpl(Android.Content.Context? context) -> void
Xamarin.Chromium.CroNet.Impl.NativeCronetEngineBuilderImpl.NativeCronetEngineBuilderImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.Impl.NativeCronetEngineBuilderWithLibraryLoaderImpl
Xamarin.Chromium.CroNet.Impl.NativeCronetEngineBuilderWithLibraryLoaderImpl.NativeCronetEngineBuilderWithLibraryLoaderImpl(Android.Content.Context? context) -> void
Xamarin.Chromium.CroNet.Impl.NativeCronetEngineBuilderWithLibraryLoaderImpl.NativeCronetEngineBuilderWithLibraryLoaderImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.Impl.NativeCronetProvider
Xamarin.Chromium.CroNet.Impl.NativeCronetProvider.NativeCronetProvider(Android.Content.Context? context) -> void
Xamarin.Chromium.CroNet.Impl.NativeCronetProvider.NativeCronetProvider(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.Impl.UrlRequestError
Xamarin.Chromium.CroNet.Impl.UrlRequestErrorAttribute
Xamarin.Chromium.CroNet.Impl.UrlRequestErrorAttribute.UrlRequestErrorAttribute() -> void
Xamarin.Chromium.CroNet.Impl.UrlRequestErrorConsts
Xamarin.Chromium.CroNet.MimeTypeFilter
Xamarin.Chromium.CroNet.MimeTypeFilter.MimeTypeFilter(System.Collections.Generic.IList<string!>? mimeTypes, bool acceptDirectory) -> void
Xamarin.Chromium.CroNet.MimeTypeFilter.MimeTypeFilter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.NetError
Xamarin.Chromium.CroNet.NetErrorAttribute
Xamarin.Chromium.CroNet.NetErrorAttribute.NetErrorAttribute() -> void
Xamarin.Chromium.CroNet.NetErrorConsts
Xamarin.Chromium.CroNet.NetId
Xamarin.Chromium.CroNet.NetIdAttribute
Xamarin.Chromium.CroNet.NetIdAttribute.NetIdAttribute() -> void
Xamarin.Chromium.CroNet.NetIdConsts
Xamarin.Chromium.CroNet.NetLogCaptureMode
Xamarin.Chromium.CroNet.NetLogCaptureModeAttribute
Xamarin.Chromium.CroNet.NetLogCaptureModeAttribute.NetLogCaptureModeAttribute() -> void
Xamarin.Chromium.CroNet.NetLogCaptureModeConsts
Xamarin.Chromium.CroNet.NetStringUtil
Xamarin.Chromium.CroNet.NetStringUtil.NetStringUtil() -> void
Xamarin.Chromium.CroNet.NetStringUtil.NetStringUtil(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.NetworkActiveNotifier
Xamarin.Chromium.CroNet.NetworkActiveNotifier.NetworkActiveNotifier(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.NetworkChangeNotifier
Xamarin.Chromium.CroNet.NetworkChangeNotifier.IConnectionTypeObserver
Xamarin.Chromium.CroNet.NetworkChangeNotifier.IConnectionTypeObserver.OnConnectionTypeChanged(int connectionType) -> void
Xamarin.Chromium.CroNet.NetworkChangeNotifier.NetworkChangeNotifier() -> void
Xamarin.Chromium.CroNet.NetworkChangeNotifier.NetworkChangeNotifier(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect
Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.IObserver
Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.IObserver.OnConnectionCostChanged(int newConnectionCost) -> void
Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.IObserver.OnConnectionSubtypeChanged(int newConnectionSubtype) -> void
Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.IObserver.OnConnectionTypeChanged(int newConnectionType) -> void
Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.IObserver.OnNetworkConnect(long netId, int connectionType) -> void
Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.IObserver.OnNetworkDisconnect(long netId) -> void
Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.IObserver.OnNetworkSoonToDisconnect(long netId) -> void
Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.IObserver.PurgeActiveNetworkList(long[]? activeNetIds) -> void
Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.NetworkChangeNotifierAutoDetect(Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.IObserver? observer, Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.RegistrationPolicy? policy) -> void
Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.NetworkChangeNotifierAutoDetect(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.NetworkState
Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.NetworkState.NetworkState(bool connected, int type, int subtype, bool isMetered, string? networkIdentifier, bool isPrivateDnsActive, string? privateDnsServerName) -> void
Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.NetworkState.NetworkState(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.RegistrationPolicy
Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.RegistrationPolicy.Register() -> void
Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.RegistrationPolicy.RegistrationPolicy() -> void
Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.RegistrationPolicy.RegistrationPolicy(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.RegistrationPolicy.Unregister() -> void
Xamarin.Chromium.CroNet.NetworkQualityObservationSource
Xamarin.Chromium.CroNet.NetworkQualityObservationSourceAttribute
Xamarin.Chromium.CroNet.NetworkQualityObservationSourceAttribute.NetworkQualityObservationSourceAttribute() -> void
Xamarin.Chromium.CroNet.NetworkQualityObservationSourceConsts
Xamarin.Chromium.CroNet.NetworkTrafficAnnotationTag
Xamarin.Chromium.CroNet.NetworkTrafficAnnotationTag.NetworkTrafficAnnotationTag(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.PrivateKeyType
Xamarin.Chromium.CroNet.PrivateKeyTypeAttribute
Xamarin.Chromium.CroNet.PrivateKeyTypeAttribute.PrivateKeyTypeAttribute() -> void
Xamarin.Chromium.CroNet.PrivateKeyTypeConsts
Xamarin.Chromium.CroNet.ProxyChangeListener
Xamarin.Chromium.CroNet.ProxyChangeListener.IDelegate
Xamarin.Chromium.CroNet.ProxyChangeListener.IDelegate.ProxySettingsChanged() -> void
Xamarin.Chromium.CroNet.ProxyChangeListener.ProxyChangeListener(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.RegistrationPolicyAlwaysRegister
Xamarin.Chromium.CroNet.RegistrationPolicyAlwaysRegister.RegistrationPolicyAlwaysRegister() -> void
Xamarin.Chromium.CroNet.RegistrationPolicyAlwaysRegister.RegistrationPolicyAlwaysRegister(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.RegistrationPolicyApplicationStatus
Xamarin.Chromium.CroNet.RegistrationPolicyApplicationStatus.RegistrationPolicyApplicationStatus() -> void
Xamarin.Chromium.CroNet.RegistrationPolicyApplicationStatus.RegistrationPolicyApplicationStatus(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.RequestPriority
Xamarin.Chromium.CroNet.RequestPriorityAttribute
Xamarin.Chromium.CroNet.RequestPriorityAttribute.RequestPriorityAttribute() -> void
Xamarin.Chromium.CroNet.RequestPriorityConsts
Xamarin.Chromium.CroNet.TrafficStatsError
Xamarin.Chromium.CroNet.TrafficStatsErrorAttribute
Xamarin.Chromium.CroNet.TrafficStatsErrorAttribute.TrafficStatsErrorAttribute() -> void
Xamarin.Chromium.CroNet.TrafficStatsErrorConsts
Xamarin.Chromium.CroNet.TrafficStatsTag
Xamarin.Chromium.CroNet.TrafficStatsTagAttribute
Xamarin.Chromium.CroNet.TrafficStatsTagAttribute.TrafficStatsTagAttribute() -> void
Xamarin.Chromium.CroNet.TrafficStatsTagConsts
Xamarin.Chromium.CroNet.TrafficStatsUid
Xamarin.Chromium.CroNet.TrafficStatsUidAttribute
Xamarin.Chromium.CroNet.TrafficStatsUidAttribute.TrafficStatsUidAttribute() -> void
Xamarin.Chromium.CroNet.TrafficStatsUidConsts
Xamarin.Chromium.CroNet.UrlConnection.CronetHttpURLConnection
Xamarin.Chromium.CroNet.UrlConnection.CronetHttpURLConnection.CronetHttpURLConnection(Java.Net.URL? url, Xamarin.Chromium.CroNet.CronetEngine? cronetEngine) -> void
Xamarin.Chromium.CroNet.UrlConnection.CronetHttpURLConnection.CronetHttpURLConnection(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.UrlConnection.CronetURLStreamHandlerFactory
Xamarin.Chromium.CroNet.UrlConnection.CronetURLStreamHandlerFactory.CronetURLStreamHandlerFactory(Xamarin.Chromium.CroNet.ExperimentalCronetEngine? cronetEngine) -> void
Xamarin.Chromium.CroNet.UrlConnection.CronetURLStreamHandlerFactory.CronetURLStreamHandlerFactory(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.CroNet.X509Util
Xamarin.Chromium.CroNet.X509Util.X509Util() -> void
Xamarin.Chromium.CroNet.X509Util.X509Util(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
Xamarin.Chromium.Url.IDNStringUtil
Xamarin.Chromium.Url.IDNStringUtil.IDNStringUtil() -> void
Xamarin.Chromium.Url.IDNStringUtil.IDNStringUtil(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
abstract Xamarin.Chromium.Base.ActivityLifecycleCallbacksAdapter.OnStateChanged(Android.App.Activity? activity, int newState) -> void
abstract Xamarin.Chromium.Base.Flag.ClearInMemoryCachedValueForTesting() -> void
abstract Xamarin.Chromium.Base.Flag.IsEnabled.get -> bool
abstract Xamarin.Chromium.Base.Supplier.LazyOneshotSupplierImpl.DoSet() -> void
abstract Xamarin.Chromium.Base.Task.AsyncTask.DoInBackground() -> Java.Lang.Object?
abstract Xamarin.Chromium.Base.Task.AsyncTask.OnPostExecute(Java.Lang.Object? result) -> void
abstract Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.RegistrationPolicy.Destroy() -> void
const Internal.Xamarin.Chromium.Build.BuildConfig.LogtagPrefix = "cn_" -> string!
const Xamarin.Chromium.Base.ActivityState.Created = 1 -> int
const Xamarin.Chromium.Base.ActivityState.Destroyed = 6 -> int
const Xamarin.Chromium.Base.ActivityState.Paused = 4 -> int
const Xamarin.Chromium.Base.ActivityState.Resumed = 3 -> int
const Xamarin.Chromium.Base.ActivityState.Started = 2 -> int
const Xamarin.Chromium.Base.ActivityState.Stopped = 5 -> int
const Xamarin.Chromium.Base.ApplicationState.HasDestroyedActivities = 4 -> int
const Xamarin.Chromium.Base.ApplicationState.HasPausedActivities = 2 -> int
const Xamarin.Chromium.Base.ApplicationState.HasRunningActivities = 1 -> int
const Xamarin.Chromium.Base.ApplicationState.HasStoppedActivities = 3 -> int
const Xamarin.Chromium.Base.ApplicationState.Unknown = 0 -> int
const Xamarin.Chromium.Base.BaseFeatures.AddTaskLeewayFeature = "AddTaskLeeway" -> string!
const Xamarin.Chromium.Base.BaseFeatures.AlignWakeUps = "AlignWakeUps" -> string!
const Xamarin.Chromium.Base.BaseFeatures.AsanBrpDereferenceCheck = "AsanBrpDereferenceCheck" -> string!
const Xamarin.Chromium.Base.BaseFeatures.AsanBrpExtractionCheck = "AsanBrpExtractionCheck" -> string!
const Xamarin.Chromium.Base.BaseFeatures.AsanBrpInstantiationCheck = "AsanBrpInstantiationCheck" -> string!
const Xamarin.Chromium.Base.BaseFeatures.BackgroundNotPerceptibleBinding = "BackgroundNotPerceptibleBinding" -> string!
const Xamarin.Chromium.Base.BaseFeatures.CollectAndroidFrameTimelineMetrics = "CollectAndroidFrameTimelineMetrics" -> string!
const Xamarin.Chromium.Base.BaseFeatures.EnableConfigurableThreadCacheMinCachedMemoryForPurging = "EnableConfigurableThreadCacheMinCachedMemoryForPurging" -> string!
const Xamarin.Chromium.Base.BaseFeatures.EnableConfigurableThreadCacheMultiplier = "EnableConfigurableThreadCacheMultiplier" -> string!
const Xamarin.Chromium.Base.BaseFeatures.EnableConfigurableThreadCachePurgeInterval = "EnableConfigurableThreadCachePurgeInterval" -> string!
const Xamarin.Chromium.Base.BaseFeatures.FastFilePathIsParent = "FastFilePathIsParent" -> string!
const Xamarin.Chromium.Base.BaseFeatures.FeatureParamWithCache = "FeatureParamWithCache" -> string!
const Xamarin.Chromium.Base.BaseFeatures.KillPartitionAllocMemoryTagging = "KillPartitionAllocMemoryTagging" -> string!
const Xamarin.Chromium.Base.BaseFeatures.LowEndMemoryExperiment = "LowEndMemoryExperiment" -> string!
const Xamarin.Chromium.Base.BaseFeatures.LowerPaMemoryLimitForNonMainRenderers = "LowerPAMemoryLimitForNonMainRenderers" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PageAllocatorRetryOnCommitFailure = "PageAllocatorRetryOnCommitFailure" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PartialLowEndModeOn3GbDevices = "PartialLowEndModeOn3GbDevices" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PartialLowEndModeOnMidRangeDevices = "PartialLowEndModeOnMidRangeDevices" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PartitionAllocAdjustSizeWhenInForeground = "PartitionAllocAdjustSizeWhenInForeground" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PartitionAllocBackupRefPtr = "PartitionAllocBackupRefPtr" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PartitionAllocDanglingPtr = "PartitionAllocDanglingPtr" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PartitionAllocDisableBrpInBufferPartition = "PartitionAllocDisableBRPInBufferPartition" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PartitionAllocEventuallyZeroFreedMemory = "PartitionAllocEventuallyZeroFreedMemory" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PartitionAllocFewerMemoryRegions = "PartitionAllocFewerMemoryRegions" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PartitionAllocLargeEmptySlotSpanRing = "PartitionAllocLargeEmptySlotSpanRing" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PartitionAllocLargeThreadCacheSize = "PartitionAllocLargeThreadCacheSize" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PartitionAllocMemoryReclaimer = "PartitionAllocMemoryReclaimer" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PartitionAllocMemoryTagging = "PartitionAllocMemoryTagging" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PartitionAllocPermissiveMte = "PartitionAllocPermissiveMte" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PartitionAllocSchedulerLoopQuarantine = "PartitionAllocSchedulerLoopQuarantine" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PartitionAllocSortActiveSlotSpans = "PartitionAllocSortActiveSlotSpans" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PartitionAllocSortSmallerSlotSpanFreeLists = "PartitionAllocSortSmallerSlotSpanFreeLists" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PartitionAllocStraightenLargerSlotSpanFreeLists = "PartitionAllocStraightenLargerSlotSpanFreeLists" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PartitionAllocUnretainedDanglingPtr = "PartitionAllocUnretainedDanglingPtr" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PartitionAllocUseDenserDistribution = "PartitionAllocUseDenserDistribution" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PartitionAllocUsePriorityInheritanceLocks = "PartitionAllocUsePriorityInheritanceLocks" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PartitionAllocWithAdvancedChecks = "PartitionAllocWithAdvancedChecks" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PostGetMyMemoryStateToBackground = "PostGetMyMemoryStateToBackground" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PostPowerMonitorBroadcastReceiverInitToBackground = "PostPowerMonitorBroadcastReceiverInitToBackground" -> string!
const Xamarin.Chromium.Base.BaseFeatures.PumpFastToSleepAndroid = "PumpFastToSleepAndroid" -> string!
const Xamarin.Chromium.Base.BaseFeatures.ReducePpMs = "ReducePPMs" -> string!
const Xamarin.Chromium.Base.BaseFeatures.RunTasksByBatches = "RunTasksByBatches" -> string!
const Xamarin.Chromium.Base.BaseFeatures.TimerSlackMac = "TimerSlackMac" -> string!
const Xamarin.Chromium.Base.BaseFeatures.UiPumpImprovementsWin = "UIPumpImprovementsWin" -> string!
const Xamarin.Chromium.Base.BaseFeatures.UpdateStateBeforeUnbinding = "UpdateStateBeforeUnbinding" -> string!
const Xamarin.Chromium.Base.BaseFeatures.UseSharedRebindServiceConnection = "UseSharedRebindServiceConnection" -> string!
const Xamarin.Chromium.Base.BaseFeatures.UseUtilityThreadGroup = "UseUtilityThreadGroup" -> string!
const Xamarin.Chromium.Base.BaseSwitches.AndroidSkipChildServiceInitForTesting = "android-skip-child-service-init-for-testing" -> string!
const Xamarin.Chromium.Base.BaseSwitches.BackgroundThreadPoolFieldTrial = "background-thread-pool-field-trial" -> string!
const Xamarin.Chromium.Base.BaseSwitches.DefaultCountryCodeAtInstall = "default-country-code" -> string!
const Xamarin.Chromium.Base.BaseSwitches.DisableBestEffortTasks = "disable-best-effort-tasks" -> string!
const Xamarin.Chromium.Base.BaseSwitches.DisableBreakpad = "disable-breakpad" -> string!
const Xamarin.Chromium.Base.BaseSwitches.DisableDevShmUsage = "disable-dev-shm-usage" -> string!
const Xamarin.Chromium.Base.BaseSwitches.DisableFeatures = "disable-features" -> string!
const Xamarin.Chromium.Base.BaseSwitches.DisableHighResTimer = "disable-highres-timer" -> string!
const Xamarin.Chromium.Base.BaseSwitches.DisableLowEndDeviceMode = "disable-low-end-device-mode" -> string!
const Xamarin.Chromium.Base.BaseSwitches.DisableUsbKeyboardDetect = "disable-usb-keyboard-detect" -> string!
const Xamarin.Chromium.Base.BaseSwitches.EnableCrashReporter = "enable-crash-reporter" -> string!
const Xamarin.Chromium.Base.BaseSwitches.EnableCrashReporterForTesting = "enable-crash-reporter-for-testing" -> string!
const Xamarin.Chromium.Base.BaseSwitches.EnableFeatures = "enable-features" -> string!
const Xamarin.Chromium.Base.BaseSwitches.EnableIdleTracing = "enable-idle-tracing" -> string!
const Xamarin.Chromium.Base.BaseSwitches.EnableLowEndDeviceMode = "enable-low-end-device-mode" -> string!
const Xamarin.Chromium.Base.BaseSwitches.FieldTrialHandle = "field-trial-handle" -> string!
const Xamarin.Chromium.Base.BaseSwitches.ForceDesktopAndroid = "force-desktop-android" -> string!
const Xamarin.Chromium.Base.BaseSwitches.ForceFieldTrials = "force-fieldtrials" -> string!
const Xamarin.Chromium.Base.BaseSwitches.ForceHighResTimeTicks = "force-high-res-timeticks" -> string!
const Xamarin.Chromium.Base.BaseSwitches.FullMemoryCrashReport = "full-memory-crash-report" -> string!
const Xamarin.Chromium.Base.BaseSwitches.HostPackageLabel = "host-package-label" -> string!
const Xamarin.Chromium.Base.BaseSwitches.HostPackageName = "host-package-name" -> string!
const Xamarin.Chromium.Base.BaseSwitches.HostVersionCode = "host-version-code" -> string!
const Xamarin.Chromium.Base.BaseSwitches.LogBestEffortTasks = "log-best-effort-tasks" -> string!
const Xamarin.Chromium.Base.BaseSwitches.MetricsSharedMemoryHandle = "metrics-shmem-handle" -> string!
const Xamarin.Chromium.Base.BaseSwitches.NoErrorDialogs = "noerrdialogs" -> string!
const Xamarin.Chromium.Base.BaseSwitches.PackageName = "package-name" -> string!
const Xamarin.Chromium.Base.BaseSwitches.PackageVersionName = "package-version-name" -> string!
const Xamarin.Chromium.Base.BaseSwitches.ProfilingAtStart = "profiling-at-start" -> string!
const Xamarin.Chromium.Base.BaseSwitches.ProfilingFile = "profiling-file" -> string!
const Xamarin.Chromium.Base.BaseSwitches.ProfilingFlush = "profiling-flush" -> string!
const Xamarin.Chromium.Base.BaseSwitches.RendererWaitForJavaDebugger = "renderer-wait-for-java-debugger" -> string!
const Xamarin.Chromium.Base.BaseSwitches.SchedulerBoostUrgent = "scheduler-boost-urgent" -> string!
const Xamarin.Chromium.Base.BaseSwitches.TestChildProcess = "test-child-process" -> string!
const Xamarin.Chromium.Base.BaseSwitches.TraceToFile = "trace-to-file" -> string!
const Xamarin.Chromium.Base.BaseSwitches.TraceToFileName = "trace-to-file-name" -> string!
const Xamarin.Chromium.Base.BaseSwitches.V = "v" -> string!
const Xamarin.Chromium.Base.BaseSwitches.VModule = "vmodule" -> string!
const Xamarin.Chromium.Base.BaseSwitches.WaitForDebugger = "wait-for-debugger" -> string!
const Xamarin.Chromium.Base.ChildBindingState.MaxValue = 4 -> int
const Xamarin.Chromium.Base.ChildBindingState.NotPerceptible = 2 -> int
const Xamarin.Chromium.Base.ChildBindingState.Strong = 4 -> int
const Xamarin.Chromium.Base.ChildBindingState.Unbound = 0 -> int
const Xamarin.Chromium.Base.ChildBindingState.Visible = 3 -> int
const Xamarin.Chromium.Base.ChildBindingState.Waived = 1 -> int
const Xamarin.Chromium.Base.ContextUtils.ReceiverExported = 2 -> int
const Xamarin.Chromium.Base.ContextUtils.ReceiverNotExported = 4 -> int
const Xamarin.Chromium.Base.EarlyTraceEvent.TraceEarlyJavaInChildSwitch = "trace-early-java-in-child" -> string!
const Xamarin.Chromium.Base.IntentUtils.AndroidAppReferrerScheme = "android-app" -> string!
const Xamarin.Chromium.Base.IntentUtils.TrustedApplicationCodeExtra = "trusted_application_code_extra" -> string!
const Xamarin.Chromium.Base.Log.Assert = 7 -> int
const Xamarin.Chromium.Base.Log.Debug = 3 -> int
const Xamarin.Chromium.Base.Log.Error = 6 -> int
const Xamarin.Chromium.Base.Log.Info = 4 -> int
const Xamarin.Chromium.Base.Log.Verbose = 2 -> int
const Xamarin.Chromium.Base.Log.Warn = 5 -> int
const Xamarin.Chromium.Base.MathUtils.Epsilon = 0.001 -> float
const Xamarin.Chromium.Base.MemoryPressureLevel.Critical = 2 -> int
const Xamarin.Chromium.Base.MemoryPressureLevel.MaxValue = 2 -> int
const Xamarin.Chromium.Base.MemoryPressureLevel.Moderate = 1 -> int
const Xamarin.Chromium.Base.MemoryPressureLevel.None = 0 -> int
const Xamarin.Chromium.Base.Metrics.JSONVerbosityLevel.JsonVerbosityLevelFull = 0 -> int
const Xamarin.Chromium.Base.Metrics.JSONVerbosityLevel.JsonVerbosityLevelOmitBuckets = 1 -> int
const Xamarin.Chromium.Base.PackageManagerUtils.XrOpenxrFeatureName = "android.software.xr.api.openxr" -> string!
const Xamarin.Chromium.Base.PathService.DirModule = 3 -> int
const Xamarin.Chromium.Base.Power_monitor.BatteryPowerStatus.BatteryPower = 1 -> int
const Xamarin.Chromium.Base.Power_monitor.BatteryPowerStatus.ExternalPower = 2 -> int
const Xamarin.Chromium.Base.Power_monitor.BatteryPowerStatus.Unknown = 0 -> int
const Xamarin.Chromium.Base.ResettersForTesting.State.BetweenClasses = 1 -> int
const Xamarin.Chromium.Base.ResettersForTesting.State.BetweenMethods = 3 -> int
const Xamarin.Chromium.Base.ResettersForTesting.State.ClassScoped = 2 -> int
const Xamarin.Chromium.Base.ResettersForTesting.State.MethodScoped = 4 -> int
const Xamarin.Chromium.Base.ResettersForTesting.State.NotEnabled = 0 -> int
const Xamarin.Chromium.Base.Supplier.ObservableSupplierNotifyBehavior.None = 0 -> int
const Xamarin.Chromium.Base.Supplier.ObservableSupplierNotifyBehavior.NotifyOnAdd = 1 -> int
const Xamarin.Chromium.Base.Supplier.ObservableSupplierNotifyBehavior.PostOnAdd = 2 -> int
const Xamarin.Chromium.Base.Task.AsyncTask.Status.Finished = 2 -> int
const Xamarin.Chromium.Base.Task.AsyncTask.Status.NumEntries = 3 -> int
const Xamarin.Chromium.Base.Task.AsyncTask.Status.Pending = 0 -> int
const Xamarin.Chromium.Base.Task.AsyncTask.Status.Running = 1 -> int
const Xamarin.Chromium.Base.Task.TaskPriority.BestEffort = 0 -> int
const Xamarin.Chromium.Base.Task.TaskPriority.Highest = 2 -> int
const Xamarin.Chromium.Base.Task.TaskPriority.Lowest = 0 -> int
const Xamarin.Chromium.Base.Task.TaskPriority.UserBlocking = 2 -> int
const Xamarin.Chromium.Base.Task.TaskPriority.UserVisible = 1 -> int
const Xamarin.Chromium.Base.Task.TaskRunnerType.Base = 0 -> int
const Xamarin.Chromium.Base.Task.TaskRunnerType.Sequenced = 1 -> int
const Xamarin.Chromium.Base.Task.TaskRunnerType.SingleThread = 2 -> int
const Xamarin.Chromium.Base.Task.TaskTraits.BestEffort = 0 -> int
const Xamarin.Chromium.Base.Task.TaskTraits.BestEffortMayBlock = 1 -> int
const Xamarin.Chromium.Base.Task.TaskTraits.ThreadPoolTraitsEnd = 5 -> int
const Xamarin.Chromium.Base.Task.TaskTraits.ThreadPoolTraitsStart = 0 -> int
const Xamarin.Chromium.Base.Task.TaskTraits.UiBestEffort = 6 -> int
const Xamarin.Chromium.Base.Task.TaskTraits.UiDefault = 7 -> int
const Xamarin.Chromium.Base.Task.TaskTraits.UiStartup = 9 -> int
const Xamarin.Chromium.Base.Task.TaskTraits.UiTraitsEnd = 9 -> int
const Xamarin.Chromium.Base.Task.TaskTraits.UiTraitsStart = 6 -> int
const Xamarin.Chromium.Base.Task.TaskTraits.UiUserBlocking = 8 -> int
const Xamarin.Chromium.Base.Task.TaskTraits.UiUserVisible = 7 -> int
const Xamarin.Chromium.Base.Task.TaskTraits.UserBlocking = 4 -> int
const Xamarin.Chromium.Base.Task.TaskTraits.UserBlockingMayBlock = 5 -> int
const Xamarin.Chromium.Base.Task.TaskTraits.UserVisible = 2 -> int
const Xamarin.Chromium.Base.Task.TaskTraits.UserVisibleMayBlock = 3 -> int
const Xamarin.Chromium.Base.TerminationStatus.AbnormalTermination = 1 -> int
const Xamarin.Chromium.Base.TerminationStatus.LaunchFailed = 7 -> int
const Xamarin.Chromium.Base.TerminationStatus.MaxEnum = 10 -> int
const Xamarin.Chromium.Base.TerminationStatus.NormalTermination = 0 -> int
const Xamarin.Chromium.Base.TerminationStatus.Oom = 8 -> int
const Xamarin.Chromium.Base.TerminationStatus.OomProtected = 6 -> int
const Xamarin.Chromium.Base.TerminationStatus.ProcessCrashed = 3 -> int
const Xamarin.Chromium.Base.TerminationStatus.ProcessWasKilled = 2 -> int
const Xamarin.Chromium.Base.TerminationStatus.StillRunning = 4 -> int
const Xamarin.Chromium.Base.TimeUtils.MillisecondsPerDay = 86400000 -> long
const Xamarin.Chromium.Base.TimeUtils.MillisecondsPerMinute = 60000 -> long
const Xamarin.Chromium.Base.TimeUtils.MillisecondsPerYear = 31536000000 -> long
const Xamarin.Chromium.Base.TimeUtils.NanosecondsPerMicrosecond = 1000 -> long
const Xamarin.Chromium.Base.TimeUtils.NanosecondsPerMillisecond = 1000000 -> long
const Xamarin.Chromium.Base.TimeUtils.SecondsPerDay = 86400 -> long
const Xamarin.Chromium.Base.TimeUtils.SecondsPerHour = 3600 -> long
const Xamarin.Chromium.Base.TimeUtils.SecondsPerMinute = 60 -> long
const Xamarin.Chromium.Base.TraceRecordMode.EchoToConsole = 3 -> int
const Xamarin.Chromium.Base.TraceRecordMode.RecordAsMuchAsPossible = 2 -> int
const Xamarin.Chromium.Base.TraceRecordMode.RecordContinuously = 1 -> int
const Xamarin.Chromium.Base.TraceRecordMode.RecordUntilFull = 0 -> int
const Xamarin.Chromium.Base.Version_info.Channel.Beta = 3 -> int
const Xamarin.Chromium.Base.Version_info.Channel.Canary = 1 -> int
const Xamarin.Chromium.Base.Version_info.Channel.Default = 0 -> int
const Xamarin.Chromium.Base.Version_info.Channel.Dev = 2 -> int
const Xamarin.Chromium.Base.Version_info.Channel.Stable = 4 -> int
const Xamarin.Chromium.Base.Version_info.Channel.Unknown = 0 -> int
const Xamarin.Chromium.Base.Version_info.VersionConstants.Channel = 0 -> int
const Xamarin.Chromium.Base.Version_info.VersionConstants.IsOfficialBuild = true -> bool
const Xamarin.Chromium.Base.Version_info.VersionConstants.ProductBuildVersion = 7340 -> int
const Xamarin.Chromium.Base.Version_info.VersionConstants.ProductMajorVersion = 141 -> int
const Xamarin.Chromium.Base.Version_info.VersionConstants.ProductVersion = "141.0.7340.3" -> string!
const Xamarin.Chromium.CroNet.CertVerifyStatusAndroid.Expired = -3 -> int
const Xamarin.Chromium.CroNet.CertVerifyStatusAndroid.Failed = -1 -> int
const Xamarin.Chromium.CroNet.CertVerifyStatusAndroid.IncorrectKeyUsage = -6 -> int
const Xamarin.Chromium.CroNet.CertVerifyStatusAndroid.NoTrustedRoot = -2 -> int
const Xamarin.Chromium.CroNet.CertVerifyStatusAndroid.NotYetValid = -4 -> int
const Xamarin.Chromium.CroNet.CertVerifyStatusAndroid.Ok = 0 -> int
const Xamarin.Chromium.CroNet.CertVerifyStatusAndroid.UnableToParse = -5 -> int
const Xamarin.Chromium.CroNet.ConnectionCost.Last = 3 -> int
const Xamarin.Chromium.CroNet.ConnectionCost.Metered = 2 -> int
const Xamarin.Chromium.CroNet.ConnectionCost.Unknown = 0 -> int
const Xamarin.Chromium.CroNet.ConnectionCost.Unmetered = 1 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.Subtype10GigabitEthernet = 27 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.Subtype1xrtt = 6 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeBluetooth12 = 20 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeBluetooth21 = 21 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeBluetooth30 = 22 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeBluetooth40 = 23 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeCdma = 5 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeEdge = 8 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeEhrpd = 16 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeEthernet = 24 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeEvdoRev0 = 10 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeEvdoRevA = 11 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeEvdoRevB = 13 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeFastEthernet = 25 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeGigabitEthernet = 26 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeGprs = 7 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeGsm = 3 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeHsdpa = 14 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeHspa = 12 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeHspap = 17 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeHsupa = 15 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeIden = 4 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeLast = 32 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeLte = 18 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeLteAdvanced = 19 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeNone = 1 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeOther = 2 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeUmts = 9 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeUnknown = 0 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeWifiAc = 31 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeWifiAd = 32 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeWifiB = 28 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeWifiG = 29 -> int
const Xamarin.Chromium.CroNet.ConnectionSubtype.SubtypeWifiN = 30 -> int
const Xamarin.Chromium.CroNet.ConnectionType.Connection2g = 3 -> int
const Xamarin.Chromium.CroNet.ConnectionType.Connection3g = 4 -> int
const Xamarin.Chromium.CroNet.ConnectionType.Connection4g = 5 -> int
const Xamarin.Chromium.CroNet.ConnectionType.Connection5g = 8 -> int
const Xamarin.Chromium.CroNet.ConnectionType.ConnectionBluetooth = 7 -> int
const Xamarin.Chromium.CroNet.ConnectionType.ConnectionEthernet = 1 -> int
const Xamarin.Chromium.CroNet.ConnectionType.ConnectionLast = 8 -> int
const Xamarin.Chromium.CroNet.ConnectionType.ConnectionNone = 6 -> int
const Xamarin.Chromium.CroNet.ConnectionType.ConnectionUnknown = 0 -> int
const Xamarin.Chromium.CroNet.ConnectionType.ConnectionWifi = 2 -> int
const Xamarin.Chromium.CroNet.HttpNegotiateConstants.ErrAborted = 2 -> int
const Xamarin.Chromium.CroNet.HttpNegotiateConstants.ErrInvalidAuthCredentials = 5 -> int
const Xamarin.Chromium.CroNet.HttpNegotiateConstants.ErrInvalidResponse = 4 -> int
const Xamarin.Chromium.CroNet.HttpNegotiateConstants.ErrMalformedIdentity = 9 -> int
const Xamarin.Chromium.CroNet.HttpNegotiateConstants.ErrMissingAuthCredentials = 7 -> int
const Xamarin.Chromium.CroNet.HttpNegotiateConstants.ErrUndocumentedSecurityLibraryStatus = 8 -> int
const Xamarin.Chromium.CroNet.HttpNegotiateConstants.ErrUnexpected = 1 -> int
const Xamarin.Chromium.CroNet.HttpNegotiateConstants.ErrUnexpectedSecurityLibraryStatus = 3 -> int
const Xamarin.Chromium.CroNet.HttpNegotiateConstants.ErrUnsupportedAuthScheme = 6 -> int
const Xamarin.Chromium.CroNet.HttpNegotiateConstants.KeyCanDelegate = "canDelegate" -> string!
const Xamarin.Chromium.CroNet.HttpNegotiateConstants.KeyIncomingAuthToken = "incomingAuthToken" -> string!
const Xamarin.Chromium.CroNet.HttpNegotiateConstants.KeySpnegoContext = "spnegoContext" -> string!
const Xamarin.Chromium.CroNet.HttpNegotiateConstants.KeySpnegoResult = "spnegoResult" -> string!
const Xamarin.Chromium.CroNet.HttpNegotiateConstants.Ok = 0 -> int
const Xamarin.Chromium.CroNet.HttpNegotiateConstants.SpnegoFeature = "SPNEGO" -> string!
const Xamarin.Chromium.CroNet.HttpNegotiateConstants.SpnegoTokenTypeBase = "SPNEGO:HOSTBASED:" -> string!
const Xamarin.Chromium.CroNet.Idempotency.DefaultIdempotency = 0 -> int
const Xamarin.Chromium.CroNet.Idempotency.Idempotent = 1 -> int
const Xamarin.Chromium.CroNet.Idempotency.NotIdempotent = 2 -> int
const Xamarin.Chromium.CroNet.Impl.CronetLibraryLoader.TraceNetLogSystemPropertyKey = "debug.cronet.trace_netlog" -> string!
const Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.AlwaysEnableBrotliFlagName = "Cronet_always_enable_brotli" -> string!
const Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.OverrideNetworkThreadPriorityFlagName = "Cronet_override_network_thread_priority" -> string!
const Xamarin.Chromium.CroNet.Impl.NativeCronetProvider.OverrideNativeCronetWithHttpengineFlag = "Cronet_OverrideNativeCronetWithHttpEngine" -> string!
const Xamarin.Chromium.CroNet.Impl.UrlRequestError.AddressUnreachable = 9 -> int
const Xamarin.Chromium.CroNet.Impl.UrlRequestError.ConnectionClosed = 5 -> int
const Xamarin.Chromium.CroNet.Impl.UrlRequestError.ConnectionRefused = 7 -> int
const Xamarin.Chromium.CroNet.Impl.UrlRequestError.ConnectionReset = 8 -> int
const Xamarin.Chromium.CroNet.Impl.UrlRequestError.ConnectionTimedOut = 6 -> int
const Xamarin.Chromium.CroNet.Impl.UrlRequestError.HostnameNotResolved = 1 -> int
const Xamarin.Chromium.CroNet.Impl.UrlRequestError.InternetDisconnected = 2 -> int
const Xamarin.Chromium.CroNet.Impl.UrlRequestError.ListenerExceptionThrown = 0 -> int
const Xamarin.Chromium.CroNet.Impl.UrlRequestError.NetworkChanged = 3 -> int
const Xamarin.Chromium.CroNet.Impl.UrlRequestError.Other = 11 -> int
const Xamarin.Chromium.CroNet.Impl.UrlRequestError.QuicProtocolFailed = 10 -> int
const Xamarin.Chromium.CroNet.Impl.UrlRequestError.TimedOut = 4 -> int
const Xamarin.Chromium.CroNet.NetError.ErrAborted = -3 -> int
const Xamarin.Chromium.CroNet.NetError.ErrAccessDenied = -10 -> int
const Xamarin.Chromium.CroNet.NetError.ErrAddUserCertFailed = -503 -> int
const Xamarin.Chromium.CroNet.NetError.ErrAddressInUse = -147 -> int
const Xamarin.Chromium.CroNet.NetError.ErrAddressInvalid = -108 -> int
const Xamarin.Chromium.CroNet.NetError.ErrAddressUnreachable = -109 -> int
const Xamarin.Chromium.CroNet.NetError.ErrAlpnNegotiationFailed = -122 -> int
const Xamarin.Chromium.CroNet.NetError.ErrBadSslClientAuthCert = -117 -> int
const Xamarin.Chromium.CroNet.NetError.ErrBlobDereferencedWhileBuilding = -904 -> int
const Xamarin.Chromium.CroNet.NetError.ErrBlobFileWriteFailed = -902 -> int
const Xamarin.Chromium.CroNet.NetError.ErrBlobInvalidConstructionArguments = -900 -> int
const Xamarin.Chromium.CroNet.NetError.ErrBlobOutOfMemory = -901 -> int
const Xamarin.Chromium.CroNet.NetError.ErrBlobReferencedBlobBroken = -905 -> int
const Xamarin.Chromium.CroNet.NetError.ErrBlobReferencedFileUnavailable = -906 -> int
const Xamarin.Chromium.CroNet.NetError.ErrBlobSourceDiedInTransit = -903 -> int
const Xamarin.Chromium.CroNet.NetError.ErrBlockedByAdministrator = -22 -> int
const Xamarin.Chromium.CroNet.NetError.ErrBlockedByClient = -20 -> int
const Xamarin.Chromium.CroNet.NetError.ErrBlockedByCsp = -30 -> int
const Xamarin.Chromium.CroNet.NetError.ErrBlockedByFingerprintingProtection = -34 -> int
const Xamarin.Chromium.CroNet.NetError.ErrBlockedByOrb = -32 -> int
const Xamarin.Chromium.CroNet.NetError.ErrBlockedByPrivateNetworkAccessChecks = -385 -> int
const Xamarin.Chromium.CroNet.NetError.ErrBlockedByResponse = -27 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCacheAuthFailureAfterRead = -410 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCacheChecksumMismatch = -408 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCacheChecksumReadFailure = -407 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCacheCreateFailure = -405 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCacheDoomFailure = -412 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCacheEntryNotSuitable = -411 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCacheLockTimeout = -409 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCacheMiss = -400 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCacheOpenFailure = -404 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCacheOpenOrCreateFailure = -413 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCacheOperationNotSupported = -403 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCacheRace = -406 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCacheReadFailure = -401 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCacheWriteFailure = -402 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCachedIpAddressSpaceBlockedByPrivateNetworkAccessPolicy = -384 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCertAuthorityInvalid = -202 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCertCommonNameInvalid = -200 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCertContainsErrors = -203 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCertDatabaseChanged = -714 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCertDateInvalid = -201 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCertEnd = -220 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCertInvalid = -207 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCertKnownInterceptionBlocked = -217 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCertNameConstraintViolation = -212 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCertNoRevocationMechanism = -204 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCertNonUniqueName = -210 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCertRevoked = -206 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCertSelfSignedLocalNetwork = -219 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCertUnableToCheckRevocation = -205 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCertValidityTooLong = -213 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCertVerifierChanged = -716 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCertWeakKey = -211 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCertWeakSignatureAlgorithm = -208 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCertificateTransparencyRequired = -214 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCleartextNotPermitted = -29 -> int
const Xamarin.Chromium.CroNet.NetError.ErrClientAuthCertTypeUnsupported = -151 -> int
const Xamarin.Chromium.CroNet.NetError.ErrConnectionAborted = -103 -> int
const Xamarin.Chromium.CroNet.NetError.ErrConnectionClosed = -100 -> int
const Xamarin.Chromium.CroNet.NetError.ErrConnectionFailed = -104 -> int
const Xamarin.Chromium.CroNet.NetError.ErrConnectionRefused = -102 -> int
const Xamarin.Chromium.CroNet.NetError.ErrConnectionReset = -101 -> int
const Xamarin.Chromium.CroNet.NetError.ErrConnectionTimedOut = -118 -> int
const Xamarin.Chromium.CroNet.NetError.ErrContentDecodingFailed = -330 -> int
const Xamarin.Chromium.CroNet.NetError.ErrContentDecodingInitFailed = -371 -> int
const Xamarin.Chromium.CroNet.NetError.ErrContentLengthMismatch = -354 -> int
const Xamarin.Chromium.CroNet.NetError.ErrContextShutDown = -26 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCtConsistencyProofParsingFailed = -171 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCtSthIncomplete = -169 -> int
const Xamarin.Chromium.CroNet.NetError.ErrCtSthParsingFailed = -168 -> int
const Xamarin.Chromium.CroNet.NetError.ErrDictionaryLoadFailed = -387 -> int
const Xamarin.Chromium.CroNet.NetError.ErrDisallowedUrlScheme = -301 -> int
const Xamarin.Chromium.CroNet.NetError.ErrDnsCacheMiss = -804 -> int
const Xamarin.Chromium.CroNet.NetError.ErrDnsMalformedResponse = -800 -> int
const Xamarin.Chromium.CroNet.NetError.ErrDnsNameHttpsOnly = -809 -> int
const Xamarin.Chromium.CroNet.NetError.ErrDnsNoMatchingSupportedAlpn = -811 -> int
const Xamarin.Chromium.CroNet.NetError.ErrDnsRequestCancelled = -810 -> int
const Xamarin.Chromium.CroNet.NetError.ErrDnsSearchEmpty = -805 -> int
const Xamarin.Chromium.CroNet.NetError.ErrDnsSecureProbeRecordInvalid = -814 -> int
const Xamarin.Chromium.CroNet.NetError.ErrDnsSecureResolverHostnameResolutionFailed = -808 -> int
const Xamarin.Chromium.CroNet.NetError.ErrDnsServerFailed = -802 -> int
const Xamarin.Chromium.CroNet.NetError.ErrDnsServerRequiresTcp = -801 -> int
const Xamarin.Chromium.CroNet.NetError.ErrDnsSortError = -806 -> int
const Xamarin.Chromium.CroNet.NetError.ErrDnsTimedOut = -803 -> int
const Xamarin.Chromium.CroNet.NetError.ErrEarlyDataRejected = -178 -> int
const Xamarin.Chromium.CroNet.NetError.ErrEchFallbackCertificateInvalid = -184 -> int
const Xamarin.Chromium.CroNet.NetError.ErrEchNotNegotiated = -183 -> int
const Xamarin.Chromium.CroNet.NetError.ErrEmptyResponse = -324 -> int
const Xamarin.Chromium.CroNet.NetError.ErrEncodingConversionFailed = -333 -> int
const Xamarin.Chromium.CroNet.NetError.ErrEncodingDetectionFailed = -340 -> int
const Xamarin.Chromium.CroNet.NetError.ErrFailed = -2 -> int
const Xamarin.Chromium.CroNet.NetError.ErrFileExists = -16 -> int
const Xamarin.Chromium.CroNet.NetError.ErrFileNoSpace = -18 -> int
const Xamarin.Chromium.CroNet.NetError.ErrFileNotFound = -6 -> int
const Xamarin.Chromium.CroNet.NetError.ErrFilePathTooLong = -17 -> int
const Xamarin.Chromium.CroNet.NetError.ErrFileTooBig = -8 -> int
const Xamarin.Chromium.CroNet.NetError.ErrFileVirusInfected = -19 -> int
const Xamarin.Chromium.CroNet.NetError.ErrHostResolverQueueTooLarge = -119 -> int
const Xamarin.Chromium.CroNet.NetError.ErrHttp11Required = -365 -> int
const Xamarin.Chromium.CroNet.NetError.ErrHttp2CompressionError = -363 -> int
const Xamarin.Chromium.CroNet.NetError.ErrHttp2FlowControlError = -361 -> int
const Xamarin.Chromium.CroNet.NetError.ErrHttp2FrameSizeError = -362 -> int
const Xamarin.Chromium.CroNet.NetError.ErrHttp2InadequateTransportSecurity = -360 -> int
const Xamarin.Chromium.CroNet.NetError.ErrHttp2PingFailed = -352 -> int
const Xamarin.Chromium.CroNet.NetError.ErrHttp2ProtocolError = -337 -> int
const Xamarin.Chromium.CroNet.NetError.ErrHttp2RstStreamNoErrorReceived = -372 -> int
const Xamarin.Chromium.CroNet.NetError.ErrHttp2ServerRefusedStream = -351 -> int
const Xamarin.Chromium.CroNet.NetError.ErrHttp2StreamClosed = -376 -> int
const Xamarin.Chromium.CroNet.NetError.ErrHttpResponseCodeFailure = -379 -> int
const Xamarin.Chromium.CroNet.NetError.ErrHttpsProxyTunnelResponseRedirect = -140 -> int
const Xamarin.Chromium.CroNet.NetError.ErrIcannNameCollision = -166 -> int
const Xamarin.Chromium.CroNet.NetError.ErrImportCaCertFailed = -705 -> int
const Xamarin.Chromium.CroNet.NetError.ErrImportCaCertNotCa = -703 -> int
const Xamarin.Chromium.CroNet.NetError.ErrImportCertAlreadyExists = -704 -> int
const Xamarin.Chromium.CroNet.NetError.ErrImportServerCertFailed = -706 -> int
const Xamarin.Chromium.CroNet.NetError.ErrIncompleteChunkedEncoding = -355 -> int
const Xamarin.Chromium.CroNet.NetError.ErrIncompleteHttp2Headers = -347 -> int
const Xamarin.Chromium.CroNet.NetError.ErrInconsistentIpAddressSpace = -383 -> int
const Xamarin.Chromium.CroNet.NetError.ErrInsecureResponse = -501 -> int
const Xamarin.Chromium.CroNet.NetError.ErrInsufficientResources = -12 -> int
const Xamarin.Chromium.CroNet.NetError.ErrInternetDisconnected = -106 -> int
const Xamarin.Chromium.CroNet.NetError.ErrInvalidArgument = -4 -> int
const Xamarin.Chromium.CroNet.NetError.ErrInvalidAuthCredentials = -338 -> int
const Xamarin.Chromium.CroNet.NetError.ErrInvalidChunkedEncoding = -321 -> int
const Xamarin.Chromium.CroNet.NetError.ErrInvalidEchConfigList = -182 -> int
const Xamarin.Chromium.CroNet.NetError.ErrInvalidHandle = -5 -> int
const Xamarin.Chromium.CroNet.NetError.ErrInvalidHttpResponse = -370 -> int
const Xamarin.Chromium.CroNet.NetError.ErrInvalidRedirect = -303 -> int
const Xamarin.Chromium.CroNet.NetError.ErrInvalidResponse = -320 -> int
const Xamarin.Chromium.CroNet.NetError.ErrInvalidSignedExchange = -504 -> int
const Xamarin.Chromium.CroNet.NetError.ErrInvalidUrl = -300 -> int
const Xamarin.Chromium.CroNet.NetError.ErrInvalidWebBundle = -505 -> int
const Xamarin.Chromium.CroNet.NetError.ErrIoPending = -1 -> int
const Xamarin.Chromium.CroNet.NetError.ErrKeyGenerationFailed = -710 -> int
const Xamarin.Chromium.CroNet.NetError.ErrMalformedIdentity = -329 -> int
const Xamarin.Chromium.CroNet.NetError.ErrMandatoryProxyConfigurationFailed = -131 -> int
const Xamarin.Chromium.CroNet.NetError.ErrMethodNotSupported = -322 -> int
const Xamarin.Chromium.CroNet.NetError.ErrMisconfiguredAuthEnvironment = -343 -> int
const Xamarin.Chromium.CroNet.NetError.ErrMissingAuthCredentials = -341 -> int
const Xamarin.Chromium.CroNet.NetError.ErrMsgTooBig = -142 -> int
const Xamarin.Chromium.CroNet.NetError.ErrNameNotResolved = -105 -> int
const Xamarin.Chromium.CroNet.NetError.ErrNameResolutionFailed = -137 -> int
const Xamarin.Chromium.CroNet.NetError.ErrNetworkAccessDenied = -138 -> int
const Xamarin.Chromium.CroNet.NetError.ErrNetworkAccessRevoked = -33 -> int
const Xamarin.Chromium.CroNet.NetError.ErrNetworkChanged = -21 -> int
const Xamarin.Chromium.CroNet.NetError.ErrNetworkIoSuspended = -331 -> int
const Xamarin.Chromium.CroNet.NetError.ErrNoBufferSpace = -176 -> int
const Xamarin.Chromium.CroNet.NetError.ErrNoPrivateKeyForCert = -502 -> int
const Xamarin.Chromium.CroNet.NetError.ErrNoSslVersionsEnabled = -112 -> int
const Xamarin.Chromium.CroNet.NetError.ErrNoSupportedProxies = -336 -> int
const Xamarin.Chromium.CroNet.NetError.ErrNotImplemented = -11 -> int
const Xamarin.Chromium.CroNet.NetError.ErrOutOfMemory = -13 -> int
const Xamarin.Chromium.CroNet.NetError.ErrPacNotInDhcp = -348 -> int
const Xamarin.Chromium.CroNet.NetError.ErrPacScriptFailed = -327 -> int
const Xamarin.Chromium.CroNet.NetError.ErrPacScriptTerminated = -367 -> int
const Xamarin.Chromium.CroNet.NetError.ErrPkcs12ImportBadPassword = -701 -> int
const Xamarin.Chromium.CroNet.NetError.ErrPkcs12ImportFailed = -702 -> int
const Xamarin.Chromium.CroNet.NetError.ErrPkcs12ImportInvalidFile = -708 -> int
const Xamarin.Chromium.CroNet.NetError.ErrPkcs12ImportInvalidMac = -707 -> int
const Xamarin.Chromium.CroNet.NetError.ErrPkcs12ImportUnsupported = -709 -> int
const Xamarin.Chromium.CroNet.NetError.ErrPreconnectMaxSocketLimit = -133 -> int
const Xamarin.Chromium.CroNet.NetError.ErrPrivateKeyExportFailed = -712 -> int
const Xamarin.Chromium.CroNet.NetError.ErrProxyAuthRequested = -127 -> int
const Xamarin.Chromium.CroNet.NetError.ErrProxyAuthRequestedWithNoConnection = -364 -> int
const Xamarin.Chromium.CroNet.NetError.ErrProxyAuthUnsupported = -115 -> int
const Xamarin.Chromium.CroNet.NetError.ErrProxyCertificateInvalid = -136 -> int
const Xamarin.Chromium.CroNet.NetError.ErrProxyConnectionFailed = -130 -> int
const Xamarin.Chromium.CroNet.NetError.ErrProxyHttp11Required = -366 -> int
const Xamarin.Chromium.CroNet.NetError.ErrProxyRequired = -368 -> int
const Xamarin.Chromium.CroNet.NetError.ErrProxyTunnelRequestFailed = -185 -> int
const Xamarin.Chromium.CroNet.NetError.ErrQuicCertRootNotKnown = -380 -> int
const Xamarin.Chromium.CroNet.NetError.ErrQuicGoawayRequestCanBeRetried = -381 -> int
const Xamarin.Chromium.CroNet.NetError.ErrQuicHandshakeFailed = -358 -> int
const Xamarin.Chromium.CroNet.NetError.ErrQuicProtocolError = -356 -> int
const Xamarin.Chromium.CroNet.NetError.ErrReadIfReadyNotImplemented = -174 -> int
const Xamarin.Chromium.CroNet.NetError.ErrRequestRangeNotSatisfiable = -328 -> int
const Xamarin.Chromium.CroNet.NetError.ErrResponseBodyTooBigToDrain = -345 -> int
const Xamarin.Chromium.CroNet.NetError.ErrResponseHeadersMultipleContentDisposition = -349 -> int
const Xamarin.Chromium.CroNet.NetError.ErrResponseHeadersMultipleContentLength = -346 -> int
const Xamarin.Chromium.CroNet.NetError.ErrResponseHeadersMultipleLocation = -350 -> int
const Xamarin.Chromium.CroNet.NetError.ErrResponseHeadersTooBig = -325 -> int
const Xamarin.Chromium.CroNet.NetError.ErrResponseHeadersTruncated = -357 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSelfSignedCertGenerationFailed = -713 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSocketIsConnected = -23 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSocketNotConnected = -15 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSocketReceiveBufferSizeUnchangeable = -162 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSocketSendBufferSizeUnchangeable = -163 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSocketSetReceiveBufferSizeError = -160 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSocketSetSendBufferSizeError = -161 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSocksConnectionFailed = -120 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSocksConnectionHostUnreachable = -121 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSslBadPeerPublicKey = -149 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSslBadRecordMacAlert = -126 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSslClientAuthCertBadFormat = -164 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSslClientAuthCertNeeded = -110 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSslClientAuthCertNoPrivateKey = -135 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSslClientAuthNoCommonAlgorithms = -177 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSslClientAuthPrivateKeyAccessDenied = -134 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSslClientAuthSignatureFailed = -141 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSslDecompressionFailureAlert = -125 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSslDecryptErrorAlert = -153 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSslHandshakeNotCompleted = -148 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSslKeyUsageIncompatible = -181 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSslNoRenegotiation = -123 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSslObsoleteCipher = -172 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSslPinnedKeyNotInCertChain = -150 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSslProtocolError = -107 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSslRenegotiationRequested = -114 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSslServerCertBadFormat = -167 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSslServerCertChanged = -156 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSslUnrecognizedNameAlert = -159 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSslVersionOrCipherMismatch = -113 -> int
const Xamarin.Chromium.CroNet.NetError.ErrSynReplyNotReceived = -332 -> int
const Xamarin.Chromium.CroNet.NetError.ErrTemporarilyThrottled = -139 -> int
const Xamarin.Chromium.CroNet.NetError.ErrTimedOut = -7 -> int
const Xamarin.Chromium.CroNet.NetError.ErrTls13DowngradeDetected = -180 -> int
const Xamarin.Chromium.CroNet.NetError.ErrTooManyAcceptChRestarts = -382 -> int
const Xamarin.Chromium.CroNet.NetError.ErrTooManyRedirects = -310 -> int
const Xamarin.Chromium.CroNet.NetError.ErrTooManyRetries = -375 -> int
const Xamarin.Chromium.CroNet.NetError.ErrTrustTokenOperationFailed = -506 -> int
const Xamarin.Chromium.CroNet.NetError.ErrTrustTokenOperationSuccessWithoutSendingRequest = -507 -> int
const Xamarin.Chromium.CroNet.NetError.ErrTunnelConnectionFailed = -111 -> int
const Xamarin.Chromium.CroNet.NetError.ErrUnableToReuseConnectionForProxyAuth = -170 -> int
const Xamarin.Chromium.CroNet.NetError.ErrUndocumentedSecurityLibraryStatus = -344 -> int
const Xamarin.Chromium.CroNet.NetError.ErrUnexpected = -9 -> int
const Xamarin.Chromium.CroNet.NetError.ErrUnexpectedContentDictionaryHeader = -388 -> int
const Xamarin.Chromium.CroNet.NetError.ErrUnexpectedProxyAuth = -323 -> int
const Xamarin.Chromium.CroNet.NetError.ErrUnexpectedSecurityLibraryStatus = -342 -> int
const Xamarin.Chromium.CroNet.NetError.ErrUnknownUrlScheme = -302 -> int
const Xamarin.Chromium.CroNet.NetError.ErrUnrecognizedFtpDirectoryListingFormat = -334 -> int
const Xamarin.Chromium.CroNet.NetError.ErrUnsafePort = -312 -> int
const Xamarin.Chromium.CroNet.NetError.ErrUnsafeRedirect = -311 -> int
const Xamarin.Chromium.CroNet.NetError.ErrUnsupportedAuthScheme = -339 -> int
const Xamarin.Chromium.CroNet.NetError.ErrUploadFileChanged = -14 -> int
const Xamarin.Chromium.CroNet.NetError.ErrUploadStreamRewindNotSupported = -25 -> int
const Xamarin.Chromium.CroNet.NetError.ErrWinsockUnexpectedWrittenBytes = -124 -> int
const Xamarin.Chromium.CroNet.NetError.ErrWrongVersionOnEarlyData = -179 -> int
const Xamarin.Chromium.CroNet.NetError.ErrWsProtocolError = -145 -> int
const Xamarin.Chromium.CroNet.NetError.ErrWsThrottleQueueTooLarge = -154 -> int
const Xamarin.Chromium.CroNet.NetError.ErrWsUpgrade = -173 -> int
const Xamarin.Chromium.CroNet.NetError.ErrZstdWindowSizeTooBig = -386 -> int
const Xamarin.Chromium.CroNet.NetError.Ok = 0 -> int
const Xamarin.Chromium.CroNet.NetId.Invalid = -1 -> int
const Xamarin.Chromium.CroNet.NetLogCaptureMode.Default = 1 -> int
const Xamarin.Chromium.CroNet.NetLogCaptureMode.Everything = 3 -> int
const Xamarin.Chromium.CroNet.NetLogCaptureMode.HeavilyRedacted = 0 -> int
const Xamarin.Chromium.CroNet.NetLogCaptureMode.IncludeSensitive = 2 -> int
const Xamarin.Chromium.CroNet.NetLogCaptureMode.Last = 3 -> int
const Xamarin.Chromium.CroNet.NetworkQualityObservationSource.DefaultHttpFromPlatform = 4 -> int
const Xamarin.Chromium.CroNet.NetworkQualityObservationSource.DefaultTransportFromPlatform = 7 -> int
const Xamarin.Chromium.CroNet.NetworkQualityObservationSource.DeprecatedHttpExternalEstimate = 5 -> int
const Xamarin.Chromium.CroNet.NetworkQualityObservationSource.H2Pings = 8 -> int
const Xamarin.Chromium.CroNet.NetworkQualityObservationSource.Http = 0 -> int
const Xamarin.Chromium.CroNet.NetworkQualityObservationSource.HttpCachedEstimate = 3 -> int
const Xamarin.Chromium.CroNet.NetworkQualityObservationSource.Max = 9 -> int
const Xamarin.Chromium.CroNet.NetworkQualityObservationSource.Quic = 2 -> int
const Xamarin.Chromium.CroNet.NetworkQualityObservationSource.Tcp = 1 -> int
const Xamarin.Chromium.CroNet.NetworkQualityObservationSource.TransportCachedEstimate = 6 -> int
const Xamarin.Chromium.CroNet.PrivateKeyType.Ecdsa = 2 -> int
const Xamarin.Chromium.CroNet.PrivateKeyType.Invalid = 255 -> int
const Xamarin.Chromium.CroNet.PrivateKeyType.Rsa = 0 -> int
const Xamarin.Chromium.CroNet.RequestPriority.DefaultPriority = 2 -> int
const Xamarin.Chromium.CroNet.RequestPriority.Highest = 5 -> int
const Xamarin.Chromium.CroNet.RequestPriority.Idle = 1 -> int
const Xamarin.Chromium.CroNet.RequestPriority.Low = 3 -> int
const Xamarin.Chromium.CroNet.RequestPriority.Lowest = 2 -> int
const Xamarin.Chromium.CroNet.RequestPriority.MaxValue = 5 -> int
const Xamarin.Chromium.CroNet.RequestPriority.MaximumPriority = 5 -> int
const Xamarin.Chromium.CroNet.RequestPriority.Medium = 4 -> int
const Xamarin.Chromium.CroNet.RequestPriority.MinimumPriority = 0 -> int
const Xamarin.Chromium.CroNet.RequestPriority.Throttled = 0 -> int
const Xamarin.Chromium.CroNet.TrafficStatsError.ErrorNotSupported = 0 -> int
const Xamarin.Chromium.CroNet.TrafficStatsTag.UnsetTag = -1 -> int
const Xamarin.Chromium.CroNet.TrafficStatsUid.UnsetUid = -1 -> int
override Internal.J.N.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Internal.J.N.ThresholdClass.get -> nint
override Internal.J.N.ThresholdType.get -> System.Type!
override Internal.Org.Jni_zero.GEN_JNI.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Internal.Org.Jni_zero.GEN_JNI.ThresholdClass.get -> nint
override Internal.Org.Jni_zero.GEN_JNI.ThresholdType.get -> System.Type!
override Internal.Org.Jni_zero.JniInit.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Internal.Org.Jni_zero.JniInit.ThresholdClass.get -> nint
override Internal.Org.Jni_zero.JniInit.ThresholdType.get -> System.Type!
override Internal.Org.Jni_zero.JniTestInstanceHolder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Internal.Org.Jni_zero.JniTestInstanceHolder.ThresholdClass.get -> nint
override Internal.Org.Jni_zero.JniTestInstanceHolder.ThresholdType.get -> System.Type!
override Internal.Org.Jni_zero.JniTestInstancesSnapshot.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Internal.Org.Jni_zero.JniTestInstancesSnapshot.ThresholdClass.get -> nint
override Internal.Org.Jni_zero.JniTestInstancesSnapshot.ThresholdType.get -> System.Type!
override Internal.Org.Jni_zero.JniUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Internal.Org.Jni_zero.JniUtil.ThresholdClass.get -> nint
override Internal.Org.Jni_zero.JniUtil.ThresholdType.get -> System.Type!
override Internal.Xamarin.Chromium.Build.BuildConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Internal.Xamarin.Chromium.Build.BuildConfig.ThresholdClass.get -> nint
override Internal.Xamarin.Chromium.Build.BuildConfig.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.ActivityLifecycleCallbacksAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.ActivityLifecycleCallbacksAdapter.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.ActivityLifecycleCallbacksAdapter.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.AndroidInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.ApiCompatibilityUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.ApiCompatibilityUtils.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.ApiCompatibilityUtils.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.ApkAssets.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.ApkAssets.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.ApkAssets.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.ApkInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.ApplicationStatus.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.ApplicationStatus.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.ApplicationStatus.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.BaseFeatureList.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.BaseFeatureList.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.BaseFeatureList.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.BaseFeatures.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.BaseSwitches.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.BinderCallsListener.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.BinderCallsListener.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.BinderCallsListener.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.BuildInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.BuildInfo.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.BuildInfo.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.BundleUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.BundleUtils.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.BundleUtils.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.CallbackController.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.CallbackHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.CallbackHelper.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.CallbackHelper.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.CallbackUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.CallbackUtils.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.CallbackUtils.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.CancelableRunnable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.CancelableRunnable.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.CancelableRunnable.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.CollectionUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.CommandLine.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.CommandLine.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.CommandLine.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.CommandLineInitUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.ContextUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.ContextUtils.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.ContextUtils.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.CpuFeatures.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.CpuFeatures.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.CpuFeatures.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.DeviceInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.DiscardableReferencePool.DiscardableReference.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.DiscardableReferencePool.DiscardableReference.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.DiscardableReferencePool.DiscardableReference.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.DiscardableReferencePool.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.DiscardableReferencePool.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.DiscardableReferencePool.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.EarlyTraceEvent.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.EarlyTraceEvent.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.EarlyTraceEvent.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.EventLog.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.EventLog.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.EventLog.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.FieldTrialList.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.FieldTrialList.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.FieldTrialList.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.FileProviderUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.FileProviderUtils.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.FileProviderUtils.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.FileUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.FileUtils.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.FileUtils.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.FileUtilsJni.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.FileUtilsJni.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.FileUtilsJni.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Flag.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Flag.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Flag.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.IAndroidInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.IAndroidInfo.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.IAndroidInfo.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.IApkInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.IApkInfo.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.IApkInfo.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.IDeviceInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.IDeviceInfo.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.IDeviceInfo.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.ImportantFileWriterAndroid.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.ImportantFileWriterAndroid.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.ImportantFileWriterAndroid.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.ImportantFileWriterAndroidJni.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.ImportantFileWriterAndroidJni.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.ImportantFileWriterAndroidJni.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.InputHintChecker.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.InputHintChecker.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.InputHintChecker.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.InputHintCheckerJni.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.InputHintCheckerJni.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.InputHintCheckerJni.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.IntentUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.IntentUtils.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.IntentUtils.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.JNIUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.JNIUtils.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.JNIUtils.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.JavaExceptionReporter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.JavaExceptionReporter.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.JavaExceptionReporter.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.JavaHandlerThread.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.JavaHandlerThread.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.JavaHandlerThread.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.JavaUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.JavaUtils.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.JavaUtils.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.JniAndroid.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.JniAndroid.UncaughtExceptionException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.JniAndroid.UncaughtExceptionException.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.JniAndroid.UncaughtExceptionException.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Lifetime.DestroyChecker.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Lifetime.DestroyChecker.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Lifetime.DestroyChecker.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Lifetime.LifetimeAssert.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Lifetime.LifetimeAssert.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Lifetime.LifetimeAssert.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.LocaleUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.LocaleUtils.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.LocaleUtils.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Log.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Log.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Log.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.MathUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.MathUtils.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.MathUtils.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Memory.JavaHeapDumpGenerator.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Memory.MemoryInfoBridge.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Memory.MemoryInfoBridge.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Memory.MemoryInfoBridge.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Memory.MemoryPressureUma.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Memory.MemoryPressureUma.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Memory.MemoryPressureUma.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.MemoryPressureListener.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.MemoryPressureListener.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.MemoryPressureListener.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Metrics.HistogramBucket.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Metrics.HistogramBucket.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Metrics.HistogramBucket.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Metrics.NativeUmaRecorderJni.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Metrics.NativeUmaRecorderJni.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Metrics.NativeUmaRecorderJni.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Metrics.RecordHistogram.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Metrics.RecordHistogram.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Metrics.RecordHistogram.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Metrics.RecordUserAction.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Metrics.RecordUserAction.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Metrics.RecordUserAction.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Metrics.StatisticsRecorderAndroid.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Metrics.TimingMetric.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Metrics.TimingMetric.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Metrics.TimingMetric.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Metrics.UmaRecorderHolder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Metrics.UmaRecorderHolder.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Metrics.UmaRecorderHolder.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.MutableFlagWithSafeDefault.ClearInMemoryCachedValueForTesting() -> void
override Xamarin.Chromium.Base.MutableFlagWithSafeDefault.IsEnabled.get -> bool
override Xamarin.Chromium.Base.MutableFlagWithSafeDefault.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.MutableFlagWithSafeDefault.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.MutableFlagWithSafeDefault.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.ObserverList.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.ObserverList.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.ObserverList.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.PackageManagerUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.PackageManagerUtils.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.PackageManagerUtils.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.PackageUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.PackageUtils.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.PackageUtils.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.PathService.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.PathService.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.PathService.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.PathUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.PathUtils.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.PathUtils.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.PiiElider.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.PiiElider.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.PiiElider.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.PostNativeFlag.ClearInMemoryCachedValueForTesting() -> void
override Xamarin.Chromium.Base.PostNativeFlag.IsEnabled.get -> bool
override Xamarin.Chromium.Base.PostNativeFlag.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.PostNativeFlag.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.PostNativeFlag.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Promise.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Promise.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Promise.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Promise.UnhandledRejectionException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Promise.UnhandledRejectionException.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Promise.UnhandledRejectionException.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.RadioUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.RadioUtils.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.RadioUtils.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.RequiredCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.RequiredCallback.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.RequiredCallback.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.ResettersForTesting.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.ResettersForTesting.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.ResettersForTesting.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.StreamUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.StreamUtil.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.StreamUtil.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.StrictModeContext.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.StrictModeContext.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.StrictModeContext.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Supplier.LazyOneshotSupplierImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Supplier.LazyOneshotSupplierImpl.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Supplier.LazyOneshotSupplierImpl.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Supplier.ObservableSupplierImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Supplier.ObservableSupplierImpl.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Supplier.ObservableSupplierImpl.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Supplier.OneShotCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Supplier.OneShotCallback.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Supplier.OneShotCallback.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Supplier.OneshotSupplierImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Supplier.OneshotSupplierImpl.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Supplier.OneshotSupplierImpl.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Supplier.SupplierUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Supplier.SupplierUtils.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Supplier.SupplierUtils.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Supplier.SyncOneshotSupplierImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Supplier.SyncOneshotSupplierImpl.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Supplier.SyncOneshotSupplierImpl.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Supplier.TransitiveObservableSupplier.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Supplier.TransitiveObservableSupplier.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Supplier.TransitiveObservableSupplier.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Supplier.UnownedUserDataSupplier.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Supplier.UnownedUserDataSupplier.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Supplier.UnownedUserDataSupplier.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Supplier.UnwrapObservableSupplier.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Supplier.UnwrapObservableSupplier.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Supplier.UnwrapObservableSupplier.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Task.AsyncTask.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Task.AsyncTask.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Task.AsyncTask.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Task.BackgroundOnlyAsyncTask.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Task.BackgroundOnlyAsyncTask.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Task.BackgroundOnlyAsyncTask.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Task.ChainedTasks.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Task.ChainedTasks.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Task.ChainedTasks.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Task.PostTask.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Task.PostTask.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Task.PostTask.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Task.SequencedTaskRunnerImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Task.SequencedTaskRunnerImpl.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Task.SequencedTaskRunnerImpl.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Task.TaskRunnerImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Task.TaskRunnerImpl.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Task.TaskRunnerImpl.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Task.UiThreadTaskRunnerImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Task.UiThreadTaskRunnerImpl.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Task.UiThreadTaskRunnerImpl.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Test.ClangProfiler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Test.ClangProfiler.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Test.ClangProfiler.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.ThreadUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.ThreadUtils.ThreadChecker.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.ThreadUtils.ThreadChecker.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.ThreadUtils.ThreadChecker.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.ThreadUtils.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.ThreadUtils.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.TimeUtils.CurrentThreadTimeMillisTimer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.TimeUtils.CurrentThreadTimeMillisTimer.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.TimeUtils.CurrentThreadTimeMillisTimer.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.TimeUtils.ElapsedRealtimeMillisTimer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.TimeUtils.ElapsedRealtimeMillisTimer.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.TimeUtils.ElapsedRealtimeMillisTimer.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.TimeUtils.ElapsedRealtimeNanosTimer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.TimeUtils.ElapsedRealtimeNanosTimer.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.TimeUtils.ElapsedRealtimeNanosTimer.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.TimeUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.TimeUtils.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.TimeUtils.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.TimeUtils.UptimeMillisTimer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.TimeUtils.UptimeMillisTimer.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.TimeUtils.UptimeMillisTimer.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Token.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.TokenBase.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.TokenBase.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.TokenBase.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.TokenJni.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.TokenJni.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.TokenJni.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.TraceEvent.ActivityInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.TraceEvent.ActivityInfo.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.TraceEvent.ActivityInfo.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.TraceEvent.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.TraceEvent.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.TraceEvent.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.TraceEvent.ViewInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.TraceEvent.ViewInfo.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.TraceEvent.ViewInfo.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.UnguessableToken.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.UnownedUserDataHost.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.UnownedUserDataKey.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.UserDataHost.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.ValueChangedCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.ValueChangedCallback.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.ValueChangedCallback.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Version_info.VersionConstants.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Version_info.VersionConstants.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Version_info.VersionConstants.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Version_info.VersionConstantsBridge.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Version_info.VersionConstantsBridge.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Version_info.VersionConstantsBridge.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.Version_info.VersionInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.Version_info.VersionInfo.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.Version_info.VersionInfo.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Base.WrappedClassLoader.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Base.WrappedClassLoader.ThresholdClass.get -> nint
override Xamarin.Chromium.Base.WrappedClassLoader.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.AndroidCertVerifyResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.AndroidCertVerifyResult.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.AndroidCertVerifyResult.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.AndroidKeyStore.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.AndroidKeyStore.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.AndroidKeyStore.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.AndroidTrafficStats.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.AndroidTrafficStats.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.AndroidTrafficStats.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.ChromiumNetworkAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.ConnectivityManagerShim.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.ConnectivityManagerShim.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.ConnectivityManagerShim.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.DnsStatus.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.DnsStatus.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.DnsStatus.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.GURLUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.GURLUtilsJni.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.GURLUtilsJni.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.GURLUtilsJni.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.HttpNegotiateAuthenticator.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.HttpNegotiateAuthenticator.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.HttpNegotiateAuthenticator.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.HttpNegotiateConstants.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.HttpNegotiateConstants.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.HttpNegotiateConstants.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.HttpUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.Impl.AndroidOsBuild.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.Impl.AndroidOsBuild.WithOverrideForTesting.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.Impl.AndroidOsSystemProperties.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.Impl.AndroidOsSystemProperties.WithOverridesForTesting.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.Impl.BidirectionalStreamNetworkException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.Impl.BidirectionalStreamNetworkException.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.Impl.BidirectionalStreamNetworkException.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.Impl.CronetBidirectionalStream.Cancel() -> void
override Xamarin.Chromium.CroNet.Impl.CronetBidirectionalStream.Flush() -> void
override Xamarin.Chromium.CroNet.Impl.CronetBidirectionalStream.IsDone.get -> bool
override Xamarin.Chromium.CroNet.Impl.CronetBidirectionalStream.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.Impl.CronetBidirectionalStream.Read(Java.Nio.ByteBuffer? buffer) -> void
override Xamarin.Chromium.CroNet.Impl.CronetBidirectionalStream.Start() -> void
override Xamarin.Chromium.CroNet.Impl.CronetBidirectionalStream.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.Impl.CronetBidirectionalStream.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.Impl.CronetBidirectionalStream.Write(Java.Nio.ByteBuffer? buffer, bool endOfStream) -> void
override Xamarin.Chromium.CroNet.Impl.CronetLibraryLoader.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.Impl.CronetLibraryLoader.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.Impl.CronetLibraryLoader.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.Impl.CronetUploadDataStream.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.Impl.CronetUploadDataStream.OnReadError(Java.Lang.Exception? exception) -> void
override Xamarin.Chromium.CroNet.Impl.CronetUploadDataStream.OnReadSucceeded(bool lastChunk) -> void
override Xamarin.Chromium.CroNet.Impl.CronetUploadDataStream.OnRewindError(Java.Lang.Exception? exception) -> void
override Xamarin.Chromium.CroNet.Impl.CronetUploadDataStream.OnRewindSucceeded() -> void
override Xamarin.Chromium.CroNet.Impl.CronetUrlRequest.Cancel() -> void
override Xamarin.Chromium.CroNet.Impl.CronetUrlRequest.FollowRedirect() -> void
override Xamarin.Chromium.CroNet.Impl.CronetUrlRequest.GetStatus(Xamarin.Chromium.CroNet.UrlRequest.StatusListener? unsafeListener) -> void
override Xamarin.Chromium.CroNet.Impl.CronetUrlRequest.IsDone.get -> bool
override Xamarin.Chromium.CroNet.Impl.CronetUrlRequest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.Impl.CronetUrlRequest.Read(Java.Nio.ByteBuffer? buffer) -> void
override Xamarin.Chromium.CroNet.Impl.CronetUrlRequest.Start() -> void
override Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.CreateURLStreamHandlerFactory() -> Java.Net.IURLStreamHandlerFactory?
override Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.GetGlobalMetricsDeltas() -> byte[]?
override Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.NewBidirectionalStreamBuilder(string? url, Xamarin.Chromium.CroNet.BidirectionalStream.Callback? callback, Java.Util.Concurrent.IExecutor? executor) -> Xamarin.Chromium.CroNet.ExperimentalBidirectionalStream.Builder?
override Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.OpenConnection(Java.Net.URL? url) -> Java.Net.URLConnection?
override Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.Shutdown() -> void
override Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.StartNetLogToFile(string? fileName, bool logAll) -> void
override Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.StopNetLog() -> void
override Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.VersionString.get -> string?
override Xamarin.Chromium.CroNet.Impl.NativeCronetEngineBuilderImpl.Build() -> Xamarin.Chromium.CroNet.ExperimentalCronetEngine?
override Xamarin.Chromium.CroNet.Impl.NativeCronetEngineBuilderImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.Impl.NativeCronetEngineBuilderImpl.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.Impl.NativeCronetEngineBuilderImpl.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.Impl.NativeCronetEngineBuilderWithLibraryLoaderImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.Impl.NativeCronetEngineBuilderWithLibraryLoaderImpl.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.Impl.NativeCronetEngineBuilderWithLibraryLoaderImpl.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.Impl.NativeCronetProvider.CreateBuilder() -> Xamarin.Chromium.CroNet.CronetEngine.Builder?
override Xamarin.Chromium.CroNet.Impl.NativeCronetProvider.IsEnabled.get -> bool
override Xamarin.Chromium.CroNet.Impl.NativeCronetProvider.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.Impl.NativeCronetProvider.Name.get -> string?
override Xamarin.Chromium.CroNet.Impl.NativeCronetProvider.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.Impl.NativeCronetProvider.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.Impl.NativeCronetProvider.Version.get -> string?
override Xamarin.Chromium.CroNet.MimeTypeFilter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.MimeTypeFilter.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.MimeTypeFilter.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.NetStringUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.NetStringUtil.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.NetStringUtil.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.NetworkActiveNotifier.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.NetworkActiveNotifier.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.NetworkActiveNotifier.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.NetworkChangeNotifier.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.NetworkChangeNotifier.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.NetworkChangeNotifier.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.NetworkState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.NetworkState.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.NetworkState.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.OnReceive(Android.Content.Context? context, Android.Content.Intent? intent) -> void
override Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.RegistrationPolicy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.RegistrationPolicy.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.RegistrationPolicy.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.NetworkTrafficAnnotationTag.GetHashCode() -> int
override Xamarin.Chromium.CroNet.NetworkTrafficAnnotationTag.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.NetworkTrafficAnnotationTag.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.NetworkTrafficAnnotationTag.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.ProxyChangeListener.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.ProxyChangeListener.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.ProxyChangeListener.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.RegistrationPolicyAlwaysRegister.Destroy() -> void
override Xamarin.Chromium.CroNet.RegistrationPolicyAlwaysRegister.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.RegistrationPolicyAlwaysRegister.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.RegistrationPolicyAlwaysRegister.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.RegistrationPolicyApplicationStatus.Destroy() -> void
override Xamarin.Chromium.CroNet.RegistrationPolicyApplicationStatus.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.RegistrationPolicyApplicationStatus.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.RegistrationPolicyApplicationStatus.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.UrlConnection.CronetHttpURLConnection.Connect() -> void
override Xamarin.Chromium.CroNet.UrlConnection.CronetHttpURLConnection.Disconnect() -> void
override Xamarin.Chromium.CroNet.UrlConnection.CronetHttpURLConnection.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.UrlConnection.CronetHttpURLConnection.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.UrlConnection.CronetHttpURLConnection.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.UrlConnection.CronetHttpURLConnection.UsingProxy() -> bool
override Xamarin.Chromium.CroNet.UrlConnection.CronetURLStreamHandlerFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.UrlConnection.CronetURLStreamHandlerFactory.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.UrlConnection.CronetURLStreamHandlerFactory.ThresholdType.get -> System.Type!
override Xamarin.Chromium.CroNet.X509Util.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.CroNet.X509Util.ThresholdClass.get -> nint
override Xamarin.Chromium.CroNet.X509Util.ThresholdType.get -> System.Type!
override Xamarin.Chromium.Url.IDNStringUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override Xamarin.Chromium.Url.IDNStringUtil.ThresholdClass.get -> nint
override Xamarin.Chromium.Url.IDNStringUtil.ThresholdType.get -> System.Type!
override sealed Xamarin.Chromium.Base.Task.BackgroundOnlyAsyncTask.OnPostExecute(Java.Lang.Object? result) -> void
override sealed Xamarin.Chromium.CroNet.UrlConnection.CronetHttpURLConnection.AddRequestProperty(string? key, string? value) -> void
override sealed Xamarin.Chromium.CroNet.UrlConnection.CronetHttpURLConnection.GetHeaderField(int pos) -> string?
override sealed Xamarin.Chromium.CroNet.UrlConnection.CronetHttpURLConnection.GetHeaderField(string? fieldName) -> string?
override sealed Xamarin.Chromium.CroNet.UrlConnection.CronetHttpURLConnection.GetHeaderFieldKey(int pos) -> string?
override sealed Xamarin.Chromium.CroNet.UrlConnection.CronetHttpURLConnection.SetRequestProperty(string? key, string? value) -> void
static Internal.J.N.M0s8NeYn(long nativeJavaNegotiateResultWrapper, int status, Java.Lang.Object? authToken) -> void
static Internal.J.N.M135Cu0D(long urlRequestContextConfig) -> long
static Internal.J.N.M1cMYXGO(Java.Lang.Object? switchString) -> void
static Internal.J.N.M22p8lu4() -> bool
static Internal.J.N.M2evocmp(long featureMap, Java.Lang.Object? featureName) -> bool
static Internal.J.N.M4pgQGxC(int channel) -> void
static Internal.J.N.M4znfYdB(long nativePtr, bool sendOnCanceled) -> void
static Internal.J.N.M51RPBJe(long nativePtr, Java.Lang.Object? method) -> bool
static Internal.J.N.M5_IQXaH(int taskRunnerType, int taskTraits) -> long
static Internal.J.N.M6C2IQIc() -> void
static Internal.J.N.M6Dz0nZ5(long nativePtr, Java.Lang.Object? self) -> void
static Internal.J.N.M6H_IiaF(int what, Java.Lang.Object? path) -> void
static Internal.J.N.M6mA2913() -> void
static Internal.J.N.M6sIJDgy_ForTesting(long nativePtr, bool useLocalHostRequests, bool useSmallerResponses, bool disableOfflineCheck) -> void
static Internal.J.N.M6xubM8G() -> Java.Lang.Object?
static Internal.J.N.M7JarlfB() -> void
static Internal.J.N.M7UXCmoq(Java.Lang.Object? name, long timeNanos, int threadId, long threadMillis) -> void
static Internal.J.N.M81WqFvs(int processType) -> bool
static Internal.J.N.M8R55Xut(long featurePointer, Java.Lang.Object? paramName, bool defaultValue) -> bool
static Internal.J.N.M9XfPu17(Java.Lang.Object? name, Java.Lang.Object? arg) -> void
static Internal.J.N.M9wfStLu(long featurePointer, Java.Lang.Object? paramName) -> Java.Lang.Object?
static Internal.J.N.MA4X1aZa(Java.Lang.Object? caller, long urlRequestAdapter, long length) -> long
static Internal.J.N.MB3ntV7V(Java.Lang.Object? serializedRequestContextConfigOptions) -> long
static Internal.J.N.MBT1i5cd(long nativePtr, long netId, int connectionType) -> void
static Internal.J.N.MCEqyWQ0(long nativePtr, int subType) -> void
static Internal.J.N.MCIk73GZ(long nativePtr) -> void
static Internal.J.N.MCImhGql() -> void
static Internal.J.N.MCS8G8B2(long activityId, long startTimeMs, long durationMs) -> void
static Internal.J.N.MDDrLK5r_ForTesting() -> bool
static Internal.J.N.MDkrKi31(Java.Lang.Object? args) -> void
static Internal.J.N.MDpuHJTB(long nativePtr, long netId) -> void
static Internal.J.N.MDr5ROsj_ForTesting(Java.Lang.Object? name) -> Java.Lang.Object?
static Internal.J.N.MERCiIV8(long nativeTaskRunnerAndroid) -> void
static Internal.J.N.MFFzPOVw() -> void
static Internal.J.N.MFTJCvBh() -> bool
static Internal.J.N.MFWeJGQZ(Java.Lang.Object? gmsVersionCode, bool isTV, bool isAutomotive, bool isFoldable, bool isDesktop, int vulkanDeqpLevel) -> void
static Internal.J.N.MFpRjSMv(long nativePtr) -> void
static Internal.J.N.MGLIR7Sc(long nativePtr) -> void
static Internal.J.N.MGqzwlIM(Java.Lang.Object? trialName, Java.Lang.Object? groupName) -> bool
static Internal.J.N.MHopMqLX(Java.Lang.Object? name, long id) -> void
static Internal.J.N.MHz6Fn06() -> void
static Internal.J.N.MILRV9Ch(Java.Lang.Object? name, long nativeHint, int sample, int min, int max, int numBuckets) -> long
static Internal.J.N.MJ46uzUz(Java.Lang.Object? durationsNs, Java.Lang.Object? missedVsyncs, long reportingIntervalStartTime, long reportingIntervalDuration, int scenario) -> void
static Internal.J.N.MJcct7gJ(long nativeJavaHandlerThread, long nativeEvent) -> void
static Internal.J.N.MJdorYDE() -> void
static Internal.J.N.MKFm_qQ7(long nativePtr) -> void
static Internal.J.N.ML0T8q1U() -> long
static Internal.J.N.ML40H8ed(Java.Lang.Object? name, Java.Lang.Object? arg) -> void
static Internal.J.N.MLJecZJ9() -> void
static Internal.J.N.MLlibBXh(bool crashAfterReport, Java.Lang.Object? e) -> void
static Internal.J.N.MMW1G0N1(long nativePtr) -> void
static Internal.J.N.MMxc_BIz_ForTesting(long nativePtr) -> void
static Internal.J.N.MNL5_Cay_ForTesting() -> int
static Internal.J.N.MOXOasS5() -> void
static Internal.J.N.MOh5qbSu(Java.Lang.Object? hostPackageName, Java.Lang.Object? hostVersionCode, Java.Lang.Object? hostPackageLabel, Java.Lang.Object? packageVersionCode, Java.Lang.Object? packageVersionName, Java.Lang.Object? packageName, Java.Lang.Object? resourcesVersion, Java.Lang.Object? installerPackageName, bool isDebugApp, int targetSdkVersion) -> void
static Internal.J.N.MOiBJ1qS() -> int
static Internal.J.N.MPquHBNa(Java.Lang.Object? array) -> void
static Internal.J.N.MQNVaF2F(int thermalStatus) -> void
static Internal.J.N.MR5ZSvGM(long featureMap, Java.Lang.Object? featureName, Java.Lang.Object? paramName, bool defaultValue) -> bool
static Internal.J.N.MROCxiBo(int traceNetLogCaptureMode) -> void
static Internal.J.N.MRiRQ_Ey(long featurePointer) -> bool
static Internal.J.N.MRlw2LEn(Java.Lang.Object? name, long timeNanos, int threadId, long threadMillis) -> void
static Internal.J.N.MS2l1kNx(long nativePtr, bool sendOnCanceled) -> void
static Internal.J.N.MSZPA7qE(long nativePtr) -> void
static Internal.J.N.MSryNsDk(long startTimeMs, long durationMs) -> void
static Internal.J.N.MTDsfZGe(Java.Lang.Object? name, long millisSinceEvent) -> void
static Internal.J.N.MTGiZpkh(Java.Lang.Object? view) -> void
static Internal.J.N.MTULt02u(long nativePtr, Java.Lang.Object? dirPath, bool logAll, int maxSize) -> void
static Internal.J.N.MU2h8swg(long startTimeMs, long durationMs, bool includedGlobalStartup) -> void
static Internal.J.N.MUBbgum1_ForTesting(long callbackId) -> void
static Internal.J.N.MUOsQUSh_ForTesting() -> bool
static Internal.J.N.MUoYiNbY(Java.Lang.Object? switchString, Java.Lang.Object? value) -> void
static Internal.J.N.MV_QqWU4(long featureMap, Java.Lang.Object? featureName) -> Java.Lang.Object?
static Internal.J.N.MWck3aif(Java.Lang.Object? filePath) -> Java.Lang.Object?
static Internal.J.N.MYc8mtnY(Java.Lang.Object? brand, Java.Lang.Object? device, Java.Lang.Object? buildId, Java.Lang.Object? manufacturer, Java.Lang.Object? model, Java.Lang.Object? type, Java.Lang.Object? board, Java.Lang.Object? androidBuildFingerprint, Java.Lang.Object? versionIncremental, Java.Lang.Object? hardware, Java.Lang.Object? codename, Java.Lang.Object? socManufacturer, Java.Lang.Object? supportedAbis, int sdkInt, bool isDebugAndroid, Java.Lang.Object? securityPatch) -> void
static Internal.J.N.MYsbhTIY(Java.Lang.Object? headerValue) -> bool
static Internal.J.N.MZJ2lrZY(Java.Lang.Object? switchString) -> Java.Lang.Object?
static Internal.J.N.MZJzyjAa(int pressure) -> void
static Internal.J.N.MZWMOP4I(Java.Lang.Object? trialName, Java.Lang.Object? parameterKey) -> Java.Lang.Object?
static Internal.J.N.M_1WxmXI_ForTesting(Java.Lang.Object? name, int sample, long snapshotPtr) -> int
static Internal.J.N.M_Gv8TwM(Java.Lang.Object? name, long id, long timeNanos) -> void
static Internal.J.N.M_y76mct(Java.Lang.Object? target) -> void
static Internal.J.N.MaQ9HvMU() -> bool
static Internal.J.N.MabZ5m6r(long nativePtr) -> void
static Internal.J.N.MbPIImnU(long nativePtr, int newConnectionType, long defaultNetId) -> void
static Internal.J.N.MbWHcONC(long activityId, long startTimeMs, int launchCause) -> void
static Internal.J.N.McDUim_I(long nativePtr, Java.Lang.Object? url, int priority, Java.Lang.Object? method, Java.Lang.Object? headers, bool endOfStream) -> int
static Internal.J.N.MczIGOvj_ForTesting() -> bool
static Internal.J.N.MdC43qwX(Java.Lang.Object? trialName) -> Java.Lang.Object?
static Internal.J.N.Md_rPmgC(long nativePtr, Java.Lang.Object? byteBuffer, int position, int limit) -> bool
static Internal.J.N.MeBvNXm5(long nativePtr) -> void
static Internal.J.N.MfCxA8r3(long nativePtr, Java.Lang.Object? byteBuffer, int position, int capacity) -> bool
static Internal.J.N.MffNhCLU(long id) -> void
static Internal.J.N.MfyKGfoR(Java.Lang.Object? name, int arg) -> void
static Internal.J.N.Mg0W7eRL(long nativePtr, int newConnectionCost) -> void
static Internal.J.N.MgIIMpT9(long nativePtr, Java.Lang.Object? listener) -> void
static Internal.J.N.MgOW0Igo(Java.Lang.Object? name, long durMs) -> void
static Internal.J.N.MgwJQAH1(long nativePtr, Java.Lang.Object? fileName, bool logAll) -> bool
static Internal.J.N.MhNry1OP(long startTimeMs, long durationMs, int startCallSite, int finishCallSite, int startupMode) -> void
static Internal.J.N.MhkobVIJ(long delayMillis) -> void
static Internal.J.N.Mhp54Oqs(long nativePtr) -> void
static Internal.J.N.MiAkQ_SU(int newState) -> void
static Internal.J.N.MiJIMrTb(long nativePtr, long netId) -> void
static Internal.J.N.Mk1ai9mx(Java.Lang.Object? name, long nativeHint, int sample) -> long
static Internal.J.N.MkEZDArf(long featureMap, Java.Lang.Object? featureName, Java.Lang.Object? paramName) -> Java.Lang.Object?
static Internal.J.N.MkM80XCq(long startTimeMs, long durationMs) -> void
static Internal.J.N.Ml5G_GLY(long id, Java.Lang.Object? list) -> void
static Internal.J.N.MlZcyPle_ForTesting() -> long
static Internal.J.N.MmS4zlEt(Java.Lang.Object? stackTrace) -> void
static Internal.J.N.MmnP6i1r(int id, int parentId, bool isShown, bool isDirty, Java.Lang.Object? className, Java.Lang.Object? resourceName, long activityProtoPtr) -> void
static Internal.J.N.Mmqqda9c(Java.Lang.Object? trialName) -> bool
static Internal.J.N.MmyrhqXB(Java.Lang.Object? name, long timeNanos, int threadId, long threadMillis) -> void
static Internal.J.N.MnDEFloP_ForTesting(Java.Lang.Object? caller) -> long
static Internal.J.N.MnPUhNKP(long nativePtr, bool should) -> void
static Internal.J.N.MnfJQqTB() -> bool
static Internal.J.N.MnpYy_DE() -> Java.Lang.Object?
static Internal.J.N.MorcXgQd(Java.Lang.Object? headerName, Java.Lang.Object? headerValue) -> bool
static Internal.J.N.MpCt7siL(Java.Lang.Object? url) -> Java.Lang.Object?
static Internal.J.N.MpWH3VIr(long nativePtr, int bytesRead, bool finalChunk) -> void
static Internal.J.N.MpnFLFF2(long nativePtr, bool should) -> void
static Internal.J.N.MqHgOQAN_ForTesting(long snapshotPtr) -> void
static Internal.J.N.MqTDYvZd(Java.Lang.Object? self, long urlRequestContextAdapter, bool sendRequestHeadersAutomatically, bool trafficStatsTagSet, int trafficStatsTag, bool trafficStatsUidSet, int trafficStatsUid, long networkHandle) -> long
static Internal.J.N.MrKsqeCD(long id, long timeNanos) -> void
static Internal.J.N.MrWG2uUW(Java.Lang.Object? name, long timeNanos, int threadId, long threadMillis) -> void
static Internal.J.N.Mrxu2pQS(int loggingLevel) -> void
static Internal.J.N.MsCvypjU(Java.Lang.Object? switchString) -> bool
static Internal.J.N.MsOKBrZ5(Java.Lang.Object? fileName, Java.Lang.Object? data) -> bool
static Internal.J.N.MsUcOjxl(long startTimeMs, long durationMs) -> void
static Internal.J.N.MsfzhsO7(bool isRepeating, long callbackPtr) -> void
static Internal.J.N.MshdYEWu() -> long
static Internal.J.N.MtKTTHie(Java.Lang.Object? name, long nativeHint, bool sample) -> long
static Internal.J.N.MtNxwUj9_ForTesting(bool after) -> void
static Internal.J.N.MtoXPJsu(int blockReason, int allowReason, int snapshotDiff) -> void
static Internal.J.N.MuOIsMvf(Java.Lang.Object? self, long urlRequestContextAdapter, Java.Lang.Object? url, int priority, bool disableCache, bool disableConnectionMigration, bool trafficStatsTagSet, int trafficStatsTag, bool trafficStatsUidSet, int trafficStatsUid, int idempotency, Java.Lang.Object? dictionarySha256Hash, Java.Lang.Object? dictionary, int dictionaryPosition, int dictionaryCapacity, Java.Lang.Object? dictionaryId, long networkHandle) -> long
static Internal.J.N.Muq3ic6p(long urlRequestContextConfig, Java.Lang.Object? host, Java.Lang.Object? hashes, bool includeSubdomains, long expirationTime) -> void
static Internal.J.N.Mv1m4r87(bool isRepeating, long callbackPtr, Java.Lang.Object? result) -> void
static Internal.J.N.MvHusd1J(long nativePtr, Java.Lang.Object? name, Java.Lang.Object? value) -> bool
static Internal.J.N.MvcVeOsg(long activityId, long startTimeMs) -> void
static Internal.J.N.Mw73xTww(Java.Lang.Object? arg, long flow) -> void
static Internal.J.N.MwJCBTMQ(long nativePtr, Java.Lang.Object? buffers, Java.Lang.Object? positions, Java.Lang.Object? limits, bool endOfStream) -> bool
static Internal.J.N.MwX2YEhL(Java.Lang.Object? name, long dumpProtoPtr) -> long
static Internal.J.N.MwaXYQQA(Java.Lang.Object? headerName) -> bool
static Internal.J.N.MwfavhFV() -> void
static Internal.J.N.MyRIv1Ij(long urlRequestContextConfig, Java.Lang.Object? host, int port, int alternatePort) -> void
static Internal.J.N.MymnNC4__ForTesting(Java.Lang.Object? caller, long length, long adapter) -> long
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_AndroidInfo_fillFields(Java.Lang.Object? brand, Java.Lang.Object? device, Java.Lang.Object? buildId, Java.Lang.Object? manufacturer, Java.Lang.Object? model, Java.Lang.Object? type, Java.Lang.Object? board, Java.Lang.Object? androidBuildFingerprint, Java.Lang.Object? versionIncremental, Java.Lang.Object? hardware, Java.Lang.Object? codename, Java.Lang.Object? socManufacturer, Java.Lang.Object? supportedAbis, int sdkInt, bool isDebugAndroid, Java.Lang.Object? securityPatch) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_ApkInfo_fillFields(Java.Lang.Object? hostPackageName, Java.Lang.Object? hostVersionCode, Java.Lang.Object? hostPackageLabel, Java.Lang.Object? packageVersionCode, Java.Lang.Object? packageVersionName, Java.Lang.Object? packageName, Java.Lang.Object? resourcesVersion, Java.Lang.Object? installerPackageName, bool isDebugApp, int targetSdkVersion) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_ApplicationStatus_onApplicationStateChange(int newState) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_BaseFeatureMap_getNativeMap() -> long
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_CommandLine_appendSwitchWithValue(Java.Lang.Object? switchString, Java.Lang.Object? value) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_CommandLine_appendSwitchesAndArguments(Java.Lang.Object? array) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_CommandLine_getSwitchValue(Java.Lang.Object? switchString) -> Java.Lang.Object?
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_CommandLine_getSwitches() -> Java.Lang.Object?
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_CommandLine_hasSwitch(Java.Lang.Object? switchString) -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_CommandLine_init(Java.Lang.Object? args) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_CommandLine_removeSwitch(Java.Lang.Object? switchString) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_CpuFeatures_getCoreCount() -> int
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_CpuFeatures_getCpuFeatures() -> long
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_DeviceInfo_fillFields(Java.Lang.Object? gmsVersionCode, bool isTV, bool isAutomotive, bool isFoldable, bool isDesktop, int vulkanDeqpLevel) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_EarlyTraceEvent_recordEarlyAsyncBeginEvent(Java.Lang.Object? name, long id, long timeNanos) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_EarlyTraceEvent_recordEarlyAsyncEndEvent(long id, long timeNanos) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_EarlyTraceEvent_recordEarlyBeginEvent(Java.Lang.Object? name, long timeNanos, int threadId, long threadMillis) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_EarlyTraceEvent_recordEarlyEndEvent(Java.Lang.Object? name, long timeNanos, int threadId, long threadMillis) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_EarlyTraceEvent_recordEarlyToplevelBeginEvent(Java.Lang.Object? name, long timeNanos, int threadId, long threadMillis) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_EarlyTraceEvent_recordEarlyToplevelEndEvent(Java.Lang.Object? name, long timeNanos, int threadId, long threadMillis) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_FeatureList_isInitialized() -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_FeatureMap_getFieldTrialParamByFeature(long featureMap, Java.Lang.Object? featureName, Java.Lang.Object? paramName) -> Java.Lang.Object?
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_FeatureMap_getFieldTrialParamByFeatureAsBoolean(long featureMap, Java.Lang.Object? featureName, Java.Lang.Object? paramName, bool defaultValue) -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_FeatureMap_getFieldTrialParamByFeatureAsDouble(long featureMap, Java.Lang.Object? featureName, Java.Lang.Object? paramName, double defaultValue) -> double
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_FeatureMap_getFieldTrialParamByFeatureAsInt(long featureMap, Java.Lang.Object? featureName, Java.Lang.Object? paramName, int defaultValue) -> int
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_FeatureMap_getFlattedFieldTrialParamsForFeature(long featureMap, Java.Lang.Object? featureName) -> Java.Lang.Object?
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_FeatureMap_isEnabled(long featureMap, Java.Lang.Object? featureName) -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_Features_getFieldTrialParamByFeatureAsBoolean(long featurePointer, Java.Lang.Object? paramName, bool defaultValue) -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_Features_getFieldTrialParamByFeatureAsString(long featurePointer, Java.Lang.Object? paramName) -> Java.Lang.Object?
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_Features_isEnabled(long featurePointer) -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_FieldTrialList_createFieldTrial(Java.Lang.Object? trialName, Java.Lang.Object? groupName) -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_FieldTrialList_findFullName(Java.Lang.Object? trialName) -> Java.Lang.Object?
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_FieldTrialList_getVariationParameter(Java.Lang.Object? trialName, Java.Lang.Object? parameterKey) -> Java.Lang.Object?
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_FieldTrialList_logActiveTrials() -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_FieldTrialList_trialExists(Java.Lang.Object? trialName) -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_FileUtils_getAbsoluteFilePath(Java.Lang.Object? filePath) -> Java.Lang.Object?
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_ImportantFileWriterAndroid_writeFileAtomically(Java.Lang.Object? fileName, Java.Lang.Object? data) -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_InputHintChecker_failedToInitializeForTesting() -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_InputHintChecker_hasInputForTesting() -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_InputHintChecker_hasInputWithThrottlingForTesting() -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_InputHintChecker_isInitializedForTesting() -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_InputHintChecker_onCompositorViewHolderTouchEvent() -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_InputHintChecker_setIsAfterInputYieldForTesting(bool after) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_InputHintChecker_setView(Java.Lang.Object? view) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_JavaExceptionReporter_reportJavaException(bool crashAfterReport, Java.Lang.Object? e) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_JavaExceptionReporter_reportJavaStackTrace(Java.Lang.Object? stackTrace) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_JavaHandlerThread_initializeThread(long nativeJavaHandlerThread, long nativeEvent) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_JavaHandlerThread_onLooperStopped(long nativeJavaHandlerThread) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_JniCallbackImpl_destroy(bool isRepeating, long callbackPtr) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_JniCallbackImpl_onResult(bool isRepeating, long callbackPtr, Java.Lang.Object? result) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_MemoryPressureListener_isTrimMemoryBackgroundCritical() -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_MemoryPressureListener_onMemoryPressure(int pressure) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_MemoryPressureListener_onPreFreeze() -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_PathService_override(int what, Java.Lang.Object? path) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_PowerMonitor_onBatteryChargingChanged() -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_PowerMonitor_onThermalStatusChanged(int thermalStatus) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_SysUtils_logPageFaultCountToTracing() -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_Token_createRandom() -> Java.Lang.Object?
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_addViewDump(int id, int parentId, bool isShown, bool isDirty, Java.Lang.Object? className, Java.Lang.Object? resourceName, long activityProtoPtr) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_begin(Java.Lang.Object? name, Java.Lang.Object? arg) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_beginToplevel(Java.Lang.Object? target) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_beginWithIntArg(Java.Lang.Object? name, int arg) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_end(Java.Lang.Object? arg, long flow) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_endToplevel() -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_finishAsync(long id) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_initViewHierarchyDump(long id, Java.Lang.Object? list) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_instant(Java.Lang.Object? name, Java.Lang.Object? arg) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_instantAndroidIPC(Java.Lang.Object? name, long durMs) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_instantAndroidToolbar(int blockReason, int allowReason, int snapshotDiff) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_registerEnabledObserver() -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_startActivityDump(Java.Lang.Object? name, long dumpProtoPtr) -> long
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_startAsync(Java.Lang.Object? name, long id) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_startupActivityStart(long activityId, long startTimeMs) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_startupLaunchCause(long activityId, long startTimeMs, int launchCause) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_startupTimeToFirstVisibleContent2(long activityId, long startTimeMs, long durationMs) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_viewHierarchyDumpEnabled() -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_webViewStartupFirstInstance(long startTimeMs, long durationMs, bool includedGlobalStartup) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_webViewStartupNotFirstInstance(long startTimeMs, long durationMs) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_webViewStartupStage1(long startTimeMs, long durationMs) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_webViewStartupStartChromiumLocked(long startTimeMs, long durationMs, int startCallSite, int finishCallSite, int startupMode) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_TraceEvent_webViewStartupTotalFactoryInit(long startTimeMs, long durationMs) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_jank_1tracker_JankMetricUMARecorder_recordJankMetrics(Java.Lang.Object? durationsNs, Java.Lang.Object? missedVsyncs, long reportingIntervalStartTime, long reportingIntervalDuration, int scenario) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_library_1loader_LibraryLoader_libraryLoaded(int processType) -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_library_1loader_LibraryPrefetcher_prefetchNativeLibraryForWebView() -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_memory_MemoryPurgeManager_isOnPreFreezeMemoryTrimEnabled() -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_memory_MemoryPurgeManager_postDelayedPurgeTaskOnUiThread(long delayMillis) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_metrics_NativeUmaRecorder_addActionCallbackForTesting(Java.Lang.Object? callback) -> long
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_metrics_NativeUmaRecorder_createHistogramSnapshotForTesting() -> long
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_metrics_NativeUmaRecorder_destroyHistogramSnapshotForTesting(long snapshotPtr) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_metrics_NativeUmaRecorder_getHistogramSamplesForTesting(Java.Lang.Object? name) -> Java.Lang.Object?
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_metrics_NativeUmaRecorder_getHistogramTotalCountForTesting(Java.Lang.Object? name, long snapshotPtr) -> int
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_metrics_NativeUmaRecorder_getHistogramValueCountForTesting(Java.Lang.Object? name, int sample, long snapshotPtr) -> int
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_metrics_NativeUmaRecorder_recordBooleanHistogram(Java.Lang.Object? name, long nativeHint, bool sample) -> long
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_metrics_NativeUmaRecorder_recordExponentialHistogram(Java.Lang.Object? name, long nativeHint, int sample, int min, int max, int numBuckets) -> long
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_metrics_NativeUmaRecorder_recordLinearHistogram(Java.Lang.Object? name, long nativeHint, int sample, int min, int max, int numBuckets) -> long
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_metrics_NativeUmaRecorder_recordSparseHistogram(Java.Lang.Object? name, long nativeHint, int sample) -> long
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_metrics_NativeUmaRecorder_recordUserAction(Java.Lang.Object? name, long millisSinceEvent) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_metrics_NativeUmaRecorder_removeActionCallbackForTesting(long callbackId) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_metrics_StatisticsRecorderAndroid_toJson(int verbosityLevel) -> Java.Lang.Object?
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_task_TaskRunnerImpl_destroy(long nativeTaskRunnerAndroid) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_task_TaskRunnerImpl_init(int taskRunnerType, int taskTraits) -> long
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_task_TaskRunnerImpl_postDelayedTask(long nativeTaskRunnerAndroid, long delay, int taskIndex) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_base_version_1info_VersionConstantsBridge_nativeSetChannel(int channel) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_GURLUtils_getOrigin(Java.Lang.Object? url) -> Java.Lang.Object?
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_HttpNegotiateAuthenticator_setResult(long nativeJavaNegotiateResultWrapper, int status, Java.Lang.Object? authToken) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_HttpUtil_isAllowedHeader(Java.Lang.Object? headerName, Java.Lang.Object? headerValue) -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_NetworkActiveNotifier_notifyOfDefaultNetworkActive(long nativePtr) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_NetworkChangeNotifier_notifyConnectionCostChanged(long nativePtr, int newConnectionCost) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_NetworkChangeNotifier_notifyConnectionSubtypeChanged(long nativePtr, int subType) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_NetworkChangeNotifier_notifyConnectionTypeChanged(long nativePtr, int newConnectionType, long defaultNetId) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_NetworkChangeNotifier_notifyOfNetworkConnect(long nativePtr, long netId, int connectionType) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_NetworkChangeNotifier_notifyOfNetworkDisconnect(long nativePtr, long netId) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_NetworkChangeNotifier_notifyOfNetworkSoonToDisconnect(long nativePtr, long netId) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_NetworkChangeNotifier_notifyPurgeActiveNetworkList(long nativePtr, Java.Lang.Object? activeNetIds) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_ProxyChangeListener_proxySettingsChanged(long nativePtr) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_ProxyChangeListener_proxySettingsChangedTo(long nativePtr, Java.Lang.Object? host, int port, Java.Lang.Object? pacUrl, Java.Lang.Object? exclusionList) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_X509Util_notifyClientCertStoreChanged() -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_X509Util_notifyTrustStoreChanged() -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetBidirectionalStream_createBidirectionalStream(Java.Lang.Object? self, long urlRequestContextAdapter, bool sendRequestHeadersAutomatically, bool trafficStatsTagSet, int trafficStatsTag, bool trafficStatsUidSet, int trafficStatsUid, long networkHandle) -> long
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetBidirectionalStream_destroy(long nativePtr, bool sendOnCanceled) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetBidirectionalStream_readData(long nativePtr, Java.Lang.Object? byteBuffer, int position, int limit) -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetBidirectionalStream_sendRequestHeaders(long nativePtr) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetBidirectionalStream_start(long nativePtr, Java.Lang.Object? url, int priority, Java.Lang.Object? method, Java.Lang.Object? headers, bool endOfStream) -> int
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetBidirectionalStream_writevData(long nativePtr, Java.Lang.Object? buffers, Java.Lang.Object? positions, Java.Lang.Object? limits, bool endOfStream) -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetLibraryLoader_cronetInitOnInitThread(int traceNetLogCaptureMode) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetLibraryLoader_getCronetVersion() -> Java.Lang.Object?
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetLibraryLoader_getTraceNetLogCaptureModeForTesting() -> int
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetLibraryLoader_nativeInit(bool initializePerfetto) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetLibraryLoader_setMinLogLevel(int loggingLevel) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUploadDataStream_attachUploadDataToRequest(Java.Lang.Object? caller, long urlRequestAdapter, long length) -> long
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUploadDataStream_createAdapterForTesting(Java.Lang.Object? caller) -> long
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUploadDataStream_createUploadDataStreamForTesting(Java.Lang.Object? caller, long length, long adapter) -> long
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUploadDataStream_destroy(long nativePtr) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUploadDataStream_onReadSucceeded(long nativePtr, int bytesRead, bool finalChunk) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUploadDataStream_onRewindSucceeded(long nativePtr) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequestContext_addPkp(long urlRequestContextConfig, Java.Lang.Object? host, Java.Lang.Object? hashes, bool includeSubdomains, long expirationTime) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequestContext_addQuicHint(long urlRequestContextConfig, Java.Lang.Object? host, int port, int alternatePort) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequestContext_configureNetworkQualityEstimatorForTesting(long nativePtr, bool useLocalHostRequests, bool useSmallerResponses, bool disableOfflineCheck) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequestContext_createRequestContextAdapter(long urlRequestContextConfig) -> long
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequestContext_createRequestContextConfig(Java.Lang.Object? serializedRequestContextConfigOptions) -> long
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequestContext_destroy(long nativePtr) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequestContext_flushWritePropertiesForTesting(long nativePtr) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequestContext_initRequestContextOnInitThread(long nativePtr, Java.Lang.Object? self) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequestContext_isValidHeaderName(Java.Lang.Object? headerName) -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequestContext_isValidHeaderValue(Java.Lang.Object? headerValue) -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequestContext_provideRTTObservations(long nativePtr, bool should) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequestContext_provideThroughputObservations(long nativePtr, bool should) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequestContext_startNetLogToDisk(long nativePtr, Java.Lang.Object? dirPath, bool logAll, int maxSize) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequestContext_startNetLogToFile(long nativePtr, Java.Lang.Object? fileName, bool logAll) -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequestContext_stopNetLog(long nativePtr) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequest_addRequestHeader(long nativePtr, Java.Lang.Object? name, Java.Lang.Object? value) -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequest_createRequestAdapter(Java.Lang.Object? self, long urlRequestContextAdapter, Java.Lang.Object? url, int priority, bool disableCache, bool disableConnectionMigration, bool trafficStatsTagSet, int trafficStatsTag, bool trafficStatsUidSet, int trafficStatsUid, int idempotency, Java.Lang.Object? dictionarySha256Hash, Java.Lang.Object? dictionary, int dictionaryPosition, int dictionaryCapacity, Java.Lang.Object? dictionaryId, long networkHandle) -> long
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequest_destroy(long nativePtr, bool sendOnCanceled) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequest_followDeferredRedirect(long nativePtr) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequest_getStatus(long nativePtr, Java.Lang.Object? listener) -> void
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequest_readData(long nativePtr, Java.Lang.Object? byteBuffer, int position, int capacity) -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequest_setHttpMethod(long nativePtr, Java.Lang.Object? method) -> bool
static Internal.Org.Jni_zero.GEN_JNI.Org_chromium_net_impl_CronetUrlRequest_start(long nativePtr) -> void
static Internal.Org.Jni_zero.JniTestInstanceHolder.Create() -> Internal.Org.Jni_zero.JniTestInstanceHolder?
static Internal.Org.Jni_zero.JniTestInstancesSnapshot.ClearAllForTesting() -> void
static Internal.Org.Jni_zero.JniTestInstancesSnapshot.RestoreSnapshotForTesting(Internal.Org.Jni_zero.JniTestInstancesSnapshot? overrides) -> void
static Internal.Org.Jni_zero.JniTestInstancesSnapshot.SnapshotOverridesForTesting() -> Internal.Org.Jni_zero.JniTestInstancesSnapshot?
static Internal.Xamarin.Chromium.Build.BuildConfig.ApkAssetsSuffix.get -> string?
static Internal.Xamarin.Chromium.Build.BuildConfig.ApkAssetsSuffix.set -> void
static Internal.Xamarin.Chromium.Build.BuildConfig.ApkAssetsSuffixedList.get -> System.Collections.Generic.IList<string!>?
static Internal.Xamarin.Chromium.Build.BuildConfig.ApkAssetsSuffixedList.set -> void
static Internal.Xamarin.Chromium.Build.BuildConfig.CronetForAospBuild.get -> bool
static Internal.Xamarin.Chromium.Build.BuildConfig.CronetForAospBuild.set -> void
static Internal.Xamarin.Chromium.Build.BuildConfig.DisableStrictModeContext.get -> bool
static Internal.Xamarin.Chromium.Build.BuildConfig.DisableStrictModeContext.set -> void
static Internal.Xamarin.Chromium.Build.BuildConfig.EnableAsserts.get -> bool
static Internal.Xamarin.Chromium.Build.BuildConfig.EnableAsserts.set -> void
static Internal.Xamarin.Chromium.Build.BuildConfig.EnableDebugLogs.get -> bool
static Internal.Xamarin.Chromium.Build.BuildConfig.EnableDebugLogs.set -> void
static Internal.Xamarin.Chromium.Build.BuildConfig.IsChromeBranded.get -> bool
static Internal.Xamarin.Chromium.Build.BuildConfig.IsChromeBranded.set -> void
static Internal.Xamarin.Chromium.Build.BuildConfig.IsCronetBuild.get -> bool
static Internal.Xamarin.Chromium.Build.BuildConfig.IsCronetBuild.set -> void
static Internal.Xamarin.Chromium.Build.BuildConfig.IsDesktopAndroid.get -> bool
static Internal.Xamarin.Chromium.Build.BuildConfig.IsDesktopAndroid.set -> void
static Internal.Xamarin.Chromium.Build.BuildConfig.IsForTest.get -> bool
static Internal.Xamarin.Chromium.Build.BuildConfig.IsForTest.set -> void
static Internal.Xamarin.Chromium.Build.BuildConfig.IsIncrementalInstall.get -> bool
static Internal.Xamarin.Chromium.Build.BuildConfig.IsIncrementalInstall.set -> void
static Internal.Xamarin.Chromium.Build.BuildConfig.IsUbsan.get -> bool
static Internal.Xamarin.Chromium.Build.BuildConfig.IsUbsan.set -> void
static Internal.Xamarin.Chromium.Build.BuildConfig.JavalessRenderersAvailable.get -> bool
static Internal.Xamarin.Chromium.Build.BuildConfig.JavalessRenderersAvailable.set -> void
static Internal.Xamarin.Chromium.Build.BuildConfig.MinSdkVersion.get -> int
static Internal.Xamarin.Chromium.Build.BuildConfig.MinSdkVersion.set -> void
static Internal.Xamarin.Chromium.Build.BuildConfig.RStringProductVersion.get -> int
static Internal.Xamarin.Chromium.Build.BuildConfig.RStringProductVersion.set -> void
static Internal.Xamarin.Chromium.Build.BuildConfig.VersionCode.get -> long
static Internal.Xamarin.Chromium.Build.BuildConfig.VersionCode.set -> void
static Internal.Xamarin.Chromium.Build.BuildConfig.WriteClangProfilingData.get -> bool
static Internal.Xamarin.Chromium.Build.BuildConfig.WriteClangProfilingData.set -> void
static Xamarin.Chromium.Base.AndroidInfo.AidlInfo.get -> Xamarin.Chromium.Base.IAndroidInfo?
static Xamarin.Chromium.Base.AndroidInfo.AndroidBuildFingerprint.get -> string?
static Xamarin.Chromium.Base.AndroidInfo.AndroidSupportedAbis.get -> string?
static Xamarin.Chromium.Base.AndroidInfo.IsDebugAndroid.get -> bool
static Xamarin.Chromium.Base.AndroidInfo.SendToNative(Xamarin.Chromium.Base.IAndroidInfo? info) -> void
static Xamarin.Chromium.Base.ApiCompatibilityUtils.CheckPermission(Android.Content.Context? context, string? permission, int pid, int uid) -> int
static Xamarin.Chromium.Base.ApiCompatibilityUtils.ClearHandwritingBoundsOffsetBottom(Android.Views.View? view) -> void
static Xamarin.Chromium.Base.ApiCompatibilityUtils.GetBitmapByUri(Android.Content.ContentResolver? cr, Android.Net.Uri? uri) -> Android.Graphics.Bitmap?
static Xamarin.Chromium.Base.ApiCompatibilityUtils.GetBytesUtf8(string? str) -> byte[]?
static Xamarin.Chromium.Base.ApiCompatibilityUtils.GetDrawable(Android.Content.Res.Resources? res, int id) -> Android.Graphics.Drawables.Drawable?
static Xamarin.Chromium.Base.ApiCompatibilityUtils.GetDrawableForDensity(Android.Content.Res.Resources? res, int id, int density) -> Android.Graphics.Drawables.Drawable?
static Xamarin.Chromium.Base.ApiCompatibilityUtils.GetTargetableDisplayIds(Android.App.Activity? activity) -> System.Collections.Generic.IList<Java.Lang.Integer!>?
static Xamarin.Chromium.Base.ApiCompatibilityUtils.IsDemoUser.get -> bool
static Xamarin.Chromium.Base.ApiCompatibilityUtils.IsRunningInUserTestHarness.get -> bool
static Xamarin.Chromium.Base.ApiCompatibilityUtils.SetActivityOptionsBackgroundActivityStartAllowAlways(Android.App.ActivityOptions? options) -> void
static Xamarin.Chromium.Base.ApiCompatibilityUtils.SetCreatorActivityOptionsBackgroundActivityStartMode(Android.App.ActivityOptions? options) -> void
static Xamarin.Chromium.Base.ApkAssets.Exists(string? apkSubpath) -> bool
static Xamarin.Chromium.Base.ApkAssets.Open(string? apkSubpath, string? splitName) -> long[]?
static Xamarin.Chromium.Base.ApkInfo.AidlInfo.get -> Xamarin.Chromium.Base.IApkInfo?
static Xamarin.Chromium.Base.ApkInfo.HostPackageLabel.get -> string?
static Xamarin.Chromium.Base.ApkInfo.HostPackageName.get -> string?
static Xamarin.Chromium.Base.ApkInfo.HostVersionCode.get -> string?
static Xamarin.Chromium.Base.ApkInfo.InstallerPackageName.get -> string?
static Xamarin.Chromium.Base.ApkInfo.Instance.get -> Xamarin.Chromium.Base.ApkInfo?
static Xamarin.Chromium.Base.ApkInfo.IsDebugApp.get -> bool
static Xamarin.Chromium.Base.ApkInfo.IsInitializedForTesting.get -> bool
static Xamarin.Chromium.Base.ApkInfo.PackageName.get -> string?
static Xamarin.Chromium.Base.ApkInfo.PackageVersionCode.get -> string?
static Xamarin.Chromium.Base.ApkInfo.PackageVersionName.get -> string?
static Xamarin.Chromium.Base.ApkInfo.ResourcesVersion.get -> string?
static Xamarin.Chromium.Base.ApkInfo.SendToNative(Xamarin.Chromium.Base.IApkInfo? info) -> void
static Xamarin.Chromium.Base.ApkInfo.SetBrowserPackageInfo(Android.Content.PM.PackageInfo? packageInfo) -> void
static Xamarin.Chromium.Base.ApkInfo.TargetAtLeastB() -> bool
static Xamarin.Chromium.Base.ApplicationStatus.ApplicationStateListenerCountForTesting.get -> int
static Xamarin.Chromium.Base.ApplicationStatus.CachingEnabled.get -> bool
static Xamarin.Chromium.Base.ApplicationStatus.CachingEnabled.set -> void
static Xamarin.Chromium.Base.ApplicationStatus.CleanupInvalidTask(int taskId) -> bool
static Xamarin.Chromium.Base.ApplicationStatus.DestroyForJUnitTests() -> void
static Xamarin.Chromium.Base.ApplicationStatus.GetStateForActivity(Android.App.Activity? activity) -> int
static Xamarin.Chromium.Base.ApplicationStatus.GetTaskId(Android.App.Activity? activity) -> int
static Xamarin.Chromium.Base.ApplicationStatus.HasVisibleActivities.get -> bool
static Xamarin.Chromium.Base.ApplicationStatus.Initialize(Android.App.Application? application) -> void
static Xamarin.Chromium.Base.ApplicationStatus.IsEveryActivityDestroyed.get -> bool
static Xamarin.Chromium.Base.ApplicationStatus.IsInitialized.get -> bool
static Xamarin.Chromium.Base.ApplicationStatus.IsTaskVisible(int taskId) -> bool
static Xamarin.Chromium.Base.ApplicationStatus.LastTrackedFocusedActivity.get -> Android.App.Activity?
static Xamarin.Chromium.Base.ApplicationStatus.OnStateChangeForTesting(Android.App.Activity? activity, int newState) -> void
static Xamarin.Chromium.Base.ApplicationStatus.RegisterApplicationStateListener(Xamarin.Chromium.Base.ApplicationStatus.IApplicationStateListener? listener) -> void
static Xamarin.Chromium.Base.ApplicationStatus.RegisterStateListenerForActivity(Xamarin.Chromium.Base.ApplicationStatus.IActivityStateListener? listener, Android.App.Activity? activity) -> void
static Xamarin.Chromium.Base.ApplicationStatus.RegisterStateListenerForAllActivities(Xamarin.Chromium.Base.ApplicationStatus.IActivityStateListener? listener) -> void
static Xamarin.Chromium.Base.ApplicationStatus.RegisterTaskVisibilityListener(Xamarin.Chromium.Base.ApplicationStatus.ITaskVisibilityListener? listener) -> void
static Xamarin.Chromium.Base.ApplicationStatus.RegisterWindowFocusChangedListener(Xamarin.Chromium.Base.ApplicationStatus.IWindowFocusChangedListener? listener) -> void
static Xamarin.Chromium.Base.ApplicationStatus.ResetActivitiesForInstrumentationTests() -> void
static Xamarin.Chromium.Base.ApplicationStatus.RunningActivities.get -> System.Collections.Generic.IList<Android.App.Activity!>?
static Xamarin.Chromium.Base.ApplicationStatus.SActivityTaskId.get -> System.Collections.IDictionary?
static Xamarin.Chromium.Base.ApplicationStatus.StateForApplication.get -> int
static Xamarin.Chromium.Base.ApplicationStatus.UnregisterActivityStateListener(Xamarin.Chromium.Base.ApplicationStatus.IActivityStateListener? listener) -> void
static Xamarin.Chromium.Base.ApplicationStatus.UnregisterApplicationStateListener(Xamarin.Chromium.Base.ApplicationStatus.IApplicationStateListener? listener) -> void
static Xamarin.Chromium.Base.ApplicationStatus.UnregisterTaskVisibilityListener(Xamarin.Chromium.Base.ApplicationStatus.ITaskVisibilityListener? listener) -> void
static Xamarin.Chromium.Base.ApplicationStatus.UnregisterWindowFocusChangedListener(Xamarin.Chromium.Base.ApplicationStatus.IWindowFocusChangedListener? listener) -> void
static Xamarin.Chromium.Base.BaseFeatureList.SUpdateStateBeforeUnbinding.get -> Xamarin.Chromium.Base.MutableFlagWithSafeDefault?
static Xamarin.Chromium.Base.BaseFeatureList.SUseSharedRebindServiceConnection.get -> Xamarin.Chromium.Base.MutableFlagWithSafeDefault?
static Xamarin.Chromium.Base.BinderCallsListener.Instance.get -> Xamarin.Chromium.Base.BinderCallsListener?
static Xamarin.Chromium.Base.BinderCallsListener.SetInstanceForTesting(Xamarin.Chromium.Base.BinderCallsListener? testInstance) -> void
static Xamarin.Chromium.Base.BuildInfo.Arch.get -> string?
static Xamarin.Chromium.Base.BuildInfo.Instance.get -> Xamarin.Chromium.Base.BuildInfo?
static Xamarin.Chromium.Base.BuildInfo.IsDebugAndroid.get -> bool
static Xamarin.Chromium.Base.BuildInfo.IsDebugAndroidOrApp.get -> bool
static Xamarin.Chromium.Base.BuildInfo.IsDebugApp.get -> bool
static Xamarin.Chromium.Base.BuildInfo.PackageVersionCode(Android.Content.PM.PackageInfo? pi) -> long
static Xamarin.Chromium.Base.BuildInfo.SetBrowserPackageInfo(Android.Content.PM.PackageInfo? packageInfo) -> void
static Xamarin.Chromium.Base.BuildInfo.SetGmsVersionCodeForTest(string? gmsVersionCode) -> void
static Xamarin.Chromium.Base.BundleUtils.CacheAndValidateSplitClassLoader(Android.Content.Context? splitContext, string? splitName) -> void
static Xamarin.Chromium.Base.BundleUtils.CanLoadClass(Java.Lang.ClassLoader? classLoader, string? className) -> bool
static Xamarin.Chromium.Base.BundleUtils.CheckContextClassLoader(Android.Content.Context? baseContext, Android.App.Activity? activity) -> void
static Xamarin.Chromium.Base.BundleUtils.CreateContextForInflation(Android.Content.Context? context, string? splitName) -> Android.Content.Context?
static Xamarin.Chromium.Base.BundleUtils.CreateIsolatedSplitContext(string? splitName) -> Android.Content.Context?
static Xamarin.Chromium.Base.BundleUtils.GetNativeLibraryPath(string? libraryName, string? splitName) -> string?
static Xamarin.Chromium.Base.BundleUtils.GetOrCreateSplitClassLoader(string? splitName) -> Java.Lang.ClassLoader?
static Xamarin.Chromium.Base.BundleUtils.HasAnyInstalledSplits.get -> bool
static Xamarin.Chromium.Base.BundleUtils.InstalledSplitNamesForLogging.get -> string?
static Xamarin.Chromium.Base.BundleUtils.IsIsolatedSplitInstalled(string? splitName) -> bool
static Xamarin.Chromium.Base.BundleUtils.NewInstance(string? className, string? splitName) -> Java.Lang.Object?
static Xamarin.Chromium.Base.BundleUtils.RegisterSplitClassLoaderForInflation(string? splitName) -> Java.Lang.ClassLoader?
static Xamarin.Chromium.Base.BundleUtils.ReplaceClassLoader(Android.Content.Context? baseContext, Java.Lang.ClassLoader? classLoader) -> void
static Xamarin.Chromium.Base.BundleUtils.ResetForTesting() -> void
static Xamarin.Chromium.Base.BundleUtils.RestoreLoadedSplits(Android.OS.Bundle? savedInstanceState) -> void
static Xamarin.Chromium.Base.BundleUtils.SaveLoadedSplits(Android.OS.Bundle? outState) -> void
static Xamarin.Chromium.Base.BundleUtils.SetHasSplitsForTesting(bool newVal) -> void
static Xamarin.Chromium.Base.BundleUtils.SplitCompatClassLoader.get -> Java.Lang.ClassLoader?
static Xamarin.Chromium.Base.Callback.RunNullSafe(Xamarin.Chromium.Base.ICallback? callback, Java.Lang.Object? object) -> void
static Xamarin.Chromium.Base.CallbackUtils.EmptyCallback() -> Xamarin.Chromium.Base.ICallback?
static Xamarin.Chromium.Base.CallbackUtils.EmptyRunnable() -> Java.Lang.IRunnable?
static Xamarin.Chromium.Base.CollectionUtil.Flatten(System.Collections.Generic.ICollection<System.Collections.ICollection!>? input) -> System.Collections.IList?
static Xamarin.Chromium.Base.CollectionUtil.IntegerCollectionToIntArray(System.Collections.Generic.ICollection<Java.Lang.Integer!>? collection) -> int[]?
static Xamarin.Chromium.Base.CollectionUtil.Strengthen(System.Collections.Generic.ICollection<Java.Lang.Ref.WeakReference!>? weakRefs) -> System.Collections.IList?
static Xamarin.Chromium.Base.CommandLine.GetJavaSwitchesForTesting() -> string![]?
static Xamarin.Chromium.Base.CommandLine.HasSwitchedToNative.get -> bool
static Xamarin.Chromium.Base.CommandLine.Init(string![]? args) -> void
static Xamarin.Chromium.Base.CommandLine.InitFromFile(string? file) -> void
static Xamarin.Chromium.Base.CommandLine.Instance.get -> Xamarin.Chromium.Base.CommandLine?
static Xamarin.Chromium.Base.CommandLine.IsInitialized.get -> bool
static Xamarin.Chromium.Base.CommandLine.ResetForTesting(bool initialize) -> void
static Xamarin.Chromium.Base.CommandLineInitUtil.InitCommandLine(string? fileName, Xamarin.Chromium.Base.Supplier.ISupplier? shouldUseDebugFlags) -> void
static Xamarin.Chromium.Base.CommandLineInitUtil.SetFilenameOverrideForTesting(string? value) -> void
static Xamarin.Chromium.Base.ContextUtils.ActivityFromContext(Android.Content.Context? context) -> Android.App.Activity?
static Xamarin.Chromium.Base.ContextUtils.AppSharedPreferences.get -> Android.Content.ISharedPreferences?
static Xamarin.Chromium.Base.ContextUtils.ApplicationContext.get -> Android.Content.Context?
static Xamarin.Chromium.Base.ContextUtils.InitApplicationContext(Android.Content.Context? appContext) -> void
static Xamarin.Chromium.Base.ContextUtils.InitApplicationContextForTests(Android.Content.Context? appContext) -> void
static Xamarin.Chromium.Base.ContextUtils.IsIsolatedProcess.get -> bool
static Xamarin.Chromium.Base.ContextUtils.IsProcess64Bit.get -> bool
static Xamarin.Chromium.Base.ContextUtils.IsSdkSandboxProcess.get -> bool
static Xamarin.Chromium.Base.ContextUtils.ProcessName.get -> string?
static Xamarin.Chromium.Base.ContextUtils.RegisterExportedBroadcastReceiver(Android.Content.Context? context, Android.Content.BroadcastReceiver? receiver, Android.Content.IntentFilter? filter, string? permission) -> Android.Content.Intent?
static Xamarin.Chromium.Base.ContextUtils.RegisterNonExportedBroadcastReceiver(Android.Content.Context? context, Android.Content.BroadcastReceiver? receiver, Android.Content.IntentFilter? filter) -> Android.Content.Intent?
static Xamarin.Chromium.Base.ContextUtils.RegisterNonExportedBroadcastReceiver(Android.Content.Context? context, Android.Content.BroadcastReceiver? receiver, Android.Content.IntentFilter? filter, Android.OS.Handler? scheduler) -> Android.Content.Intent?
static Xamarin.Chromium.Base.ContextUtils.RegisterProtectedBroadcastReceiver(Android.Content.Context? context, Android.Content.BroadcastReceiver? receiver, Android.Content.IntentFilter? filter) -> Android.Content.Intent?
static Xamarin.Chromium.Base.ContextUtils.RegisterProtectedBroadcastReceiver(Android.Content.Context? context, Android.Content.BroadcastReceiver? receiver, Android.Content.IntentFilter? filter, Android.OS.Handler? scheduler) -> Android.Content.Intent?
static Xamarin.Chromium.Base.CpuFeatures.Count.get -> int
static Xamarin.Chromium.Base.CpuFeatures.Mask.get -> long
static Xamarin.Chromium.Base.DeviceInfo.AidlInfo.get -> Xamarin.Chromium.Base.IDeviceInfo?
static Xamarin.Chromium.Base.DeviceInfo.GmsVersionCode.get -> string?
static Xamarin.Chromium.Base.DeviceInfo.IsAutomotive.get -> bool
static Xamarin.Chromium.Base.DeviceInfo.IsDesktop.get -> bool
static Xamarin.Chromium.Base.DeviceInfo.IsFoldable.get -> bool
static Xamarin.Chromium.Base.DeviceInfo.IsInitializedForTesting.get -> bool
static Xamarin.Chromium.Base.DeviceInfo.IsTV.get -> bool
static Xamarin.Chromium.Base.DeviceInfo.PackageVersionCode(Android.Content.PM.PackageInfo? pi) -> long
static Xamarin.Chromium.Base.DeviceInfo.SendToNative(Xamarin.Chromium.Base.IDeviceInfo? info) -> void
static Xamarin.Chromium.Base.DeviceInfo.SetGmsVersionCodeForTest(string? gmsVersionCode) -> void
static Xamarin.Chromium.Base.DeviceInfo.SetIsAutomotiveForTesting(bool isAutomotive) -> void
static Xamarin.Chromium.Base.DeviceInfo.VulkanDeqpLevel.get -> int
static Xamarin.Chromium.Base.EarlyTraceEvent.BackgroundStartupTracingFlag.get -> bool
static Xamarin.Chromium.Base.EarlyTraceEvent.Begin(string? name, bool isToplevel) -> void
static Xamarin.Chromium.Base.EarlyTraceEvent.DumpActivityStartupEvents() -> void
static Xamarin.Chromium.Base.EarlyTraceEvent.EarlyEnableInChildWithoutCommandLine() -> void
static Xamarin.Chromium.Base.EarlyTraceEvent.End(string? name, bool isToplevel) -> void
static Xamarin.Chromium.Base.EarlyTraceEvent.FinishAsync(string? name, long id) -> void
static Xamarin.Chromium.Base.EarlyTraceEvent.OnCommandLineAvailableInChildProcess() -> void
static Xamarin.Chromium.Base.EarlyTraceEvent.StartAsync(string? name, long id) -> void
static Xamarin.Chromium.Base.EarlyTraceEvent.StartupActivityStart(long activityId, long startTimeMs) -> void
static Xamarin.Chromium.Base.EarlyTraceEvent.StartupLaunchCause(long activityId, int launchCause) -> void
static Xamarin.Chromium.Base.EventLog.WriteEvent(int tag, int value) -> void
static Xamarin.Chromium.Base.FieldTrialList.CreateFieldTrial(string? trialName, string? groupName) -> bool
static Xamarin.Chromium.Base.FieldTrialList.FindFullName(string? trialName) -> string?
static Xamarin.Chromium.Base.FieldTrialList.GetVariationParameter(string? trialName, string? parameterKey) -> string?
static Xamarin.Chromium.Base.FieldTrialList.LogActiveTrials() -> void
static Xamarin.Chromium.Base.FieldTrialList.TrialExists(string? trialName) -> bool
static Xamarin.Chromium.Base.FileProviderUtils.GetContentUriFromFile(Java.IO.File? file) -> Android.Net.Uri?
static Xamarin.Chromium.Base.FileProviderUtils.SetFileProviderUtil(Xamarin.Chromium.Base.FileProviderUtils.IFileProviderUtil? util) -> void
static Xamarin.Chromium.Base.FileUtils.CopyStream(System.IO.Stream? inputStream, System.IO.Stream? outputStream) -> void
static Xamarin.Chromium.Base.FileUtils.CopyStreamToFile(System.IO.Stream? is, Java.IO.File? outFile) -> void
static Xamarin.Chromium.Base.FileUtils.DeleteAll.get -> Java.Util.Functions.IFunction?
static Xamarin.Chromium.Base.FileUtils.DeleteAll.set -> void
static Xamarin.Chromium.Base.FileUtils.GetAbsoluteFilePath(string? filePath) -> string?
static Xamarin.Chromium.Base.FileUtils.GetExtension(string? file) -> string?
static Xamarin.Chromium.Base.FileUtils.GetFileSizeBytes(Java.IO.File? file) -> long
static Xamarin.Chromium.Base.FileUtils.GetUriForFile(Java.IO.File? file) -> Android.Net.Uri?
static Xamarin.Chromium.Base.FileUtils.QueryBitmapFromContentProvider(Android.Content.Context? context, Android.Net.Uri? uri) -> Android.Graphics.Bitmap?
static Xamarin.Chromium.Base.FileUtils.ReadStream(System.IO.Stream? inputStream) -> byte[]?
static Xamarin.Chromium.Base.FileUtils.RecursivelyDeleteFile(Java.IO.File? currentFile, Java.Util.Functions.IFunction? canDelete) -> bool
static Xamarin.Chromium.Base.FileUtilsJni.Get() -> Xamarin.Chromium.Base.FileUtils.INatives?
static Xamarin.Chromium.Base.FileUtilsJni.SetInstanceForTesting(Xamarin.Chromium.Base.FileUtils.INatives? impl) -> void
static Xamarin.Chromium.Base.Flag.ResetAllInMemoryCachedValuesForTesting() -> void
static Xamarin.Chromium.Base.Flag.UseTemporaryFlagsCreatedForTesting() -> void
static Xamarin.Chromium.Base.IAndroidInfo.Creator.get -> Android.OS.IParcelableCreator?
static Xamarin.Chromium.Base.IApkInfo.Creator.get -> Android.OS.IParcelableCreator?
static Xamarin.Chromium.Base.IDeviceInfo.Creator.get -> Android.OS.IParcelableCreator?
static Xamarin.Chromium.Base.ImportantFileWriterAndroid.WriteFileAtomically(string? fileName, byte[]? data) -> bool
static Xamarin.Chromium.Base.ImportantFileWriterAndroidJni.Get() -> Xamarin.Chromium.Base.ImportantFileWriterAndroid.INatives?
static Xamarin.Chromium.Base.ImportantFileWriterAndroidJni.SetInstanceForTesting(Xamarin.Chromium.Base.ImportantFileWriterAndroid.INatives? impl) -> void
static Xamarin.Chromium.Base.InputHintChecker.FailedToInitializeForTesting() -> bool
static Xamarin.Chromium.Base.InputHintChecker.HasInputForTesting.get -> bool
static Xamarin.Chromium.Base.InputHintChecker.HasInputWithThrottlingForTesting.get -> bool
static Xamarin.Chromium.Base.InputHintChecker.IsInitializedForTesting.get -> bool
static Xamarin.Chromium.Base.InputHintChecker.OnCompositorViewHolderTouchEvent() -> void
static Xamarin.Chromium.Base.InputHintChecker.SetAllowSetViewForTesting(bool allow) -> void
static Xamarin.Chromium.Base.InputHintChecker.SetIsAfterInputYieldForTesting(bool after) -> void
static Xamarin.Chromium.Base.InputHintChecker.SetView(Android.Views.View? view) -> void
static Xamarin.Chromium.Base.InputHintChecker.SetWrongViewForTesting() -> void
static Xamarin.Chromium.Base.InputHintCheckerJni.Get() -> Xamarin.Chromium.Base.InputHintChecker.INatives?
static Xamarin.Chromium.Base.InputHintCheckerJni.SetInstanceForTesting(Xamarin.Chromium.Base.InputHintChecker.INatives? impl) -> void
static Xamarin.Chromium.Base.IntentUtils.AddTrustedIntentExtras(Android.Content.Intent? intent) -> void
static Xamarin.Chromium.Base.IntentUtils.GetParcelableArrayListExtra(Android.Content.Intent? intent, string? name) -> System.Collections.IList?
static Xamarin.Chromium.Base.IntentUtils.GetParceledIntentSize(Android.Content.Intent? intent) -> int
static Xamarin.Chromium.Base.IntentUtils.GetPendingIntentMutabilityFlag(bool mutable) -> int
static Xamarin.Chromium.Base.IntentUtils.IntentTargetsSelf(Android.Content.Intent? intent) -> bool
static Xamarin.Chromium.Base.IntentUtils.IsIntentForNewTaskOrNewDocument(Android.Content.Intent? intent) -> bool
static Xamarin.Chromium.Base.IntentUtils.IsMainIntentFromLauncher(Android.Content.Intent? intent) -> bool
static Xamarin.Chromium.Base.IntentUtils.IsTrustedIntentFromSelf(Android.Content.Intent? intent) -> bool
static Xamarin.Chromium.Base.IntentUtils.LogTransactionTooLargeOrRethrow(Java.Lang.RuntimeException? e, Android.Content.Intent? intent) -> void
static Xamarin.Chromium.Base.IntentUtils.SafeGetBinder(Android.OS.Bundle? bundle, string? name) -> Android.OS.IBinder?
static Xamarin.Chromium.Base.IntentUtils.SafeGetBinderExtra(Android.Content.Intent? intent, string? name) -> Android.OS.IBinder?
static Xamarin.Chromium.Base.IntentUtils.SafeGetBoolean(Android.OS.Bundle? bundle, string? name, bool defaultValue) -> bool
static Xamarin.Chromium.Base.IntentUtils.SafeGetBooleanExtra(Android.Content.Intent? intent, string? name, bool defaultValue) -> bool
static Xamarin.Chromium.Base.IntentUtils.SafeGetBundle(Android.OS.Bundle? bundle, string? name) -> Android.OS.Bundle?
static Xamarin.Chromium.Base.IntentUtils.SafeGetBundleExtra(Android.Content.Intent? intent, string? name) -> Android.OS.Bundle?
static Xamarin.Chromium.Base.IntentUtils.SafeGetByteArrayExtra(Android.Content.Intent? intent, string? name) -> byte[]?
static Xamarin.Chromium.Base.IntentUtils.SafeGetFloatArray(Android.OS.Bundle? bundle, string? name) -> float[]?
static Xamarin.Chromium.Base.IntentUtils.SafeGetInt(Android.OS.Bundle? bundle, string? name, int defaultValue) -> int
static Xamarin.Chromium.Base.IntentUtils.SafeGetIntArray(Android.OS.Bundle? bundle, string? name) -> int[]?
static Xamarin.Chromium.Base.IntentUtils.SafeGetIntArrayExtra(Android.Content.Intent? intent, string? name) -> int[]?
static Xamarin.Chromium.Base.IntentUtils.SafeGetIntExtra(Android.Content.Intent? intent, string? name, int defaultValue) -> int
static Xamarin.Chromium.Base.IntentUtils.SafeGetLong(Android.OS.Bundle? bundle, string? name, long defaultValue) -> long
static Xamarin.Chromium.Base.IntentUtils.SafeGetLongExtra(Android.Content.Intent? intent, string? name, long defaultValue) -> long
static Xamarin.Chromium.Base.IntentUtils.SafeGetParcelable(Android.OS.Bundle? bundle, string? name) -> Java.Lang.Object?
static Xamarin.Chromium.Base.IntentUtils.SafeGetParcelableArrayExtra(Android.Content.Intent? intent, string? name) -> Android.OS.IParcelable![]?
static Xamarin.Chromium.Base.IntentUtils.SafeGetParcelableArrayList(Android.OS.Bundle? bundle, string? name) -> System.Collections.IList?
static Xamarin.Chromium.Base.IntentUtils.SafeGetParcelableExtra(Android.Content.Intent? intent, string? name) -> Java.Lang.Object?
static Xamarin.Chromium.Base.IntentUtils.SafeGetSerializableExtra(Android.Content.Intent? intent, string? name) -> Java.Lang.Object?
static Xamarin.Chromium.Base.IntentUtils.SafeGetString(Android.OS.Bundle? bundle, string? name) -> string?
static Xamarin.Chromium.Base.IntentUtils.SafeGetStringArrayListExtra(Android.Content.Intent? intent, string? name) -> System.Collections.Generic.IList<string!>?
static Xamarin.Chromium.Base.IntentUtils.SafeGetStringExtra(Android.Content.Intent? intent, string? name) -> string?
static Xamarin.Chromium.Base.IntentUtils.SafeHasExtra(Android.Content.Intent? intent, string? name) -> bool
static Xamarin.Chromium.Base.IntentUtils.SafePutBinderExtra(Android.Content.Intent? intent, string? name, Android.OS.IBinder? binder) -> void
static Xamarin.Chromium.Base.IntentUtils.SafeRemoveExtra(Android.Content.Intent? intent, string? name) -> void
static Xamarin.Chromium.Base.IntentUtils.SafeStartActivity(Android.Content.Context? context, Android.Content.Intent? intent) -> bool
static Xamarin.Chromium.Base.IntentUtils.SafeStartActivity(Android.Content.Context? context, Android.Content.Intent? intent, Android.OS.Bundle? bundle) -> bool
static Xamarin.Chromium.Base.IntentUtils.SanitizeIntent(Android.Content.Intent? incomingIntent) -> Android.Content.Intent?
static Xamarin.Chromium.Base.IntentUtils.SetForceIsTrustedIntentForTesting(bool isTrusted) -> void
static Xamarin.Chromium.Base.JNIUtils.SetDefaultClassLoader(Java.Lang.ClassLoader? classLoader) -> void
static Xamarin.Chromium.Base.JavaExceptionReporter.ReportException(Java.Lang.Throwable? exception) -> void
static Xamarin.Chromium.Base.JavaExceptionReporter.ReportStackTrace(string? stackTrace) -> void
static Xamarin.Chromium.Base.JavaExceptionReporter.ShouldReportThrowable(Java.Lang.Throwable? e) -> bool
static Xamarin.Chromium.Base.JavaUtils.ThrowUnchecked(Java.Lang.Throwable? t) -> Java.Lang.RuntimeException?
static Xamarin.Chromium.Base.Lifetime.LifetimeAssert.AssertAllInstancesDestroyedForTesting() -> void
static Xamarin.Chromium.Base.Lifetime.LifetimeAssert.AssertNotDestroyed(Xamarin.Chromium.Base.Lifetime.LifetimeAssert? asserter) -> void
static Xamarin.Chromium.Base.Lifetime.LifetimeAssert.Create(Java.Lang.Object? target) -> Xamarin.Chromium.Base.Lifetime.LifetimeAssert?
static Xamarin.Chromium.Base.Lifetime.LifetimeAssert.Create(Java.Lang.Object? target, bool safeToGc) -> Xamarin.Chromium.Base.Lifetime.LifetimeAssert?
static Xamarin.Chromium.Base.Lifetime.LifetimeAssert.Destroy(Xamarin.Chromium.Base.Lifetime.LifetimeAssert? asserter) -> void
static Xamarin.Chromium.Base.Lifetime.LifetimeAssert.ResetForTesting() -> void
static Xamarin.Chromium.Base.Lifetime.LifetimeAssert.SetSafeToGc(Xamarin.Chromium.Base.Lifetime.LifetimeAssert? asserter, bool value) -> void
static Xamarin.Chromium.Base.LocaleUtils.DefaultCountryCode.get -> string?
static Xamarin.Chromium.Base.LocaleUtils.DefaultLocaleListString.get -> string?
static Xamarin.Chromium.Base.LocaleUtils.DefaultLocaleString.get -> string?
static Xamarin.Chromium.Base.LocaleUtils.ForLanguageTag(string? languageTag) -> Java.Util.Locale?
static Xamarin.Chromium.Base.LocaleUtils.GetConfigurationLanguage(Android.Content.Res.Configuration? config) -> string?
static Xamarin.Chromium.Base.LocaleUtils.GetContextLanguage(Android.Content.Context? context) -> string?
static Xamarin.Chromium.Base.LocaleUtils.GetUpdatedLanguageForAndroid(string? language) -> string?
static Xamarin.Chromium.Base.LocaleUtils.GetUpdatedLanguageForChromium(string? language) -> string?
static Xamarin.Chromium.Base.LocaleUtils.GetUpdatedLocaleForAndroid(Java.Util.Locale? locale) -> Java.Util.Locale?
static Xamarin.Chromium.Base.LocaleUtils.GetUpdatedLocaleForChromium(Java.Util.Locale? locale) -> Java.Util.Locale?
static Xamarin.Chromium.Base.LocaleUtils.IsBaseLanguageEqual(string? first, string? second) -> bool
static Xamarin.Chromium.Base.LocaleUtils.SetDefaultLocalesFromConfiguration(Android.Content.Res.Configuration? config) -> void
static Xamarin.Chromium.Base.LocaleUtils.ToBaseLanguage(string? languageTag) -> string?
static Xamarin.Chromium.Base.LocaleUtils.ToLanguageTag(Java.Util.Locale? locale) -> string?
static Xamarin.Chromium.Base.LocaleUtils.ToLanguageTags(Android.OS.LocaleList? localeList) -> string?
static Xamarin.Chromium.Base.LocaleUtils.UpdateConfig(Android.Content.Context? base, Android.Content.Res.Configuration? config, string? languageTag) -> void
static Xamarin.Chromium.Base.Log.D(string? tag, string? messageTemplate, params Java.Lang.Object![]? args) -> void
static Xamarin.Chromium.Base.Log.E(string? tag, string? message) -> void
static Xamarin.Chromium.Base.Log.E(string? tag, string? message, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.E(string? tag, string? messageTemplate, Java.Lang.Object? param1) -> void
static Xamarin.Chromium.Base.Log.E(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2) -> void
static Xamarin.Chromium.Base.Log.E(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3) -> void
static Xamarin.Chromium.Base.Log.E(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4) -> void
static Xamarin.Chromium.Base.Log.E(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4, Java.Lang.Object? param5) -> void
static Xamarin.Chromium.Base.Log.E(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4, Java.Lang.Object? param5, Java.Lang.Object? param6) -> void
static Xamarin.Chromium.Base.Log.E(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4, Java.Lang.Object? param5, Java.Lang.Object? param6, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.E(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4, Java.Lang.Object? param5, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.E(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.E(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.E(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.E(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.E(string? tag, string? messageTemplate, params Java.Lang.Object![]? args) -> void
static Xamarin.Chromium.Base.Log.GetStackTraceString(Java.Lang.Throwable? tr) -> string?
static Xamarin.Chromium.Base.Log.I(string? tag, string? message) -> void
static Xamarin.Chromium.Base.Log.I(string? tag, string? message, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.I(string? tag, string? messageTemplate, Java.Lang.Object? param1) -> void
static Xamarin.Chromium.Base.Log.I(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2) -> void
static Xamarin.Chromium.Base.Log.I(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3) -> void
static Xamarin.Chromium.Base.Log.I(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4) -> void
static Xamarin.Chromium.Base.Log.I(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4, Java.Lang.Object? param5) -> void
static Xamarin.Chromium.Base.Log.I(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4, Java.Lang.Object? param5, Java.Lang.Object? param6) -> void
static Xamarin.Chromium.Base.Log.I(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4, Java.Lang.Object? param5, Java.Lang.Object? param6, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.I(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4, Java.Lang.Object? param5, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.I(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.I(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.I(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.I(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.I(string? tag, string? messageTemplate, params Java.Lang.Object![]? args) -> void
static Xamarin.Chromium.Base.Log.IsLoggable(string? tag, int level) -> bool
static Xamarin.Chromium.Base.Log.NormalizeTag(string? tag) -> string?
static Xamarin.Chromium.Base.Log.V(string? tag, string? messageTemplate, params Java.Lang.Object![]? args) -> void
static Xamarin.Chromium.Base.Log.W(string? tag, string? message) -> void
static Xamarin.Chromium.Base.Log.W(string? tag, string? message, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.W(string? tag, string? messageTemplate, Java.Lang.Object? param1) -> void
static Xamarin.Chromium.Base.Log.W(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2) -> void
static Xamarin.Chromium.Base.Log.W(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3) -> void
static Xamarin.Chromium.Base.Log.W(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4) -> void
static Xamarin.Chromium.Base.Log.W(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4, Java.Lang.Object? param5) -> void
static Xamarin.Chromium.Base.Log.W(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4, Java.Lang.Object? param5, Java.Lang.Object? param6) -> void
static Xamarin.Chromium.Base.Log.W(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4, Java.Lang.Object? param5, Java.Lang.Object? param6, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.W(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4, Java.Lang.Object? param5, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.W(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.W(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.W(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.W(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.W(string? tag, string? messageTemplate, params Java.Lang.Object![]? args) -> void
static Xamarin.Chromium.Base.Log.Wtf(string? tag, string? message) -> void
static Xamarin.Chromium.Base.Log.Wtf(string? tag, string? message, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.Wtf(string? tag, string? messageTemplate, Java.Lang.Object? param1) -> void
static Xamarin.Chromium.Base.Log.Wtf(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2) -> void
static Xamarin.Chromium.Base.Log.Wtf(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3) -> void
static Xamarin.Chromium.Base.Log.Wtf(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4) -> void
static Xamarin.Chromium.Base.Log.Wtf(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4, Java.Lang.Object? param5) -> void
static Xamarin.Chromium.Base.Log.Wtf(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4, Java.Lang.Object? param5, Java.Lang.Object? param6) -> void
static Xamarin.Chromium.Base.Log.Wtf(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4, Java.Lang.Object? param5, Java.Lang.Object? param6, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.Wtf(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4, Java.Lang.Object? param5, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.Wtf(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Object? param4, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.Wtf(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Object? param3, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.Wtf(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Object? param2, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.Wtf(string? tag, string? messageTemplate, Java.Lang.Object? param1, Java.Lang.Throwable? t) -> void
static Xamarin.Chromium.Base.Log.Wtf(string? tag, string? messageTemplate, params Java.Lang.Object![]? args) -> void
static Xamarin.Chromium.Base.MathUtils.AreFloatsEqual(float f1, float f2) -> bool
static Xamarin.Chromium.Base.MathUtils.Clamp(float value, float a, float b) -> float
static Xamarin.Chromium.Base.MathUtils.Clamp(int value, int a, int b) -> int
static Xamarin.Chromium.Base.MathUtils.Clamp(long value, long a, long b) -> long
static Xamarin.Chromium.Base.MathUtils.Distance(float distanceX, float distanceY) -> float
static Xamarin.Chromium.Base.MathUtils.Distance(float x1, float y1, float x2, float y2) -> float
static Xamarin.Chromium.Base.MathUtils.FlipSignIf(float value, bool flipSign) -> float
static Xamarin.Chromium.Base.MathUtils.FlipSignIf(int value, bool flipSign) -> int
static Xamarin.Chromium.Base.MathUtils.Interpolate(float value, float target, float speed) -> float
static Xamarin.Chromium.Base.MathUtils.Map(float value, float fromStart, float fromStop, float toStart, float toStop) -> float
static Xamarin.Chromium.Base.MathUtils.PositiveModulo(int a, int b) -> int
static Xamarin.Chromium.Base.MathUtils.RoundTwoDecimalPlaces(double value) -> double
static Xamarin.Chromium.Base.MathUtils.Smoothstep(float t) -> float
static Xamarin.Chromium.Base.Memory.JavaHeapDumpGenerator.GenerateHprof(string? filePath) -> bool
static Xamarin.Chromium.Base.Memory.MemoryInfoBridge.ActivityManagerMemoryInfoForSelf.get -> Android.OS.Debug.MemoryInfo?
static Xamarin.Chromium.Base.Memory.MemoryPressureUma.InitializeForBrowser() -> void
static Xamarin.Chromium.Base.Memory.MemoryPressureUma.InitializeForChildService() -> void
static Xamarin.Chromium.Base.MemoryPressureListener.AddCallback(Xamarin.Chromium.Base.Memory.IMemoryPressureCallback? callback) -> void
static Xamarin.Chromium.Base.MemoryPressureListener.AddSelfFreezeCallback(Xamarin.Chromium.Base.Memory.ISelfFreezeCallback? callback) -> void
static Xamarin.Chromium.Base.MemoryPressureListener.HandleDebugIntent(Android.App.Activity? activity, string? action) -> bool
static Xamarin.Chromium.Base.MemoryPressureListener.IsTrimMemoryBackgroundCritical.get -> bool
static Xamarin.Chromium.Base.MemoryPressureListener.NotifyMemoryPressure(int pressure) -> void
static Xamarin.Chromium.Base.MemoryPressureListener.NotifySelfFreeze() -> void
static Xamarin.Chromium.Base.MemoryPressureListener.OnPreFreeze() -> void
static Xamarin.Chromium.Base.MemoryPressureListener.RemoveCallback(Xamarin.Chromium.Base.Memory.IMemoryPressureCallback? callback) -> void
static Xamarin.Chromium.Base.MemoryPressureListener.RemoveSelfFreezeCallback(Xamarin.Chromium.Base.Memory.ISelfFreezeCallback? callback) -> void
static Xamarin.Chromium.Base.Metrics.RecordHistogram.DeprecatedRecordMediumTimesHistogram(string? name, long durationMs) -> void
static Xamarin.Chromium.Base.Metrics.RecordHistogram.GetHistogramSamplesForTesting(string? name) -> System.Collections.Generic.IList<Xamarin.Chromium.Base.Metrics.HistogramBucket!>?
static Xamarin.Chromium.Base.Metrics.RecordHistogram.GetHistogramTotalCountForTesting(string? name) -> int
static Xamarin.Chromium.Base.Metrics.RecordHistogram.GetHistogramValueCountForTesting(string? name, int sample) -> int
static Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordBooleanHistogram(string? name, bool sample) -> void
static Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordCount100000Histogram(string? name, int sample) -> void
static Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordCount1000Histogram(string? name, int sample) -> void
static Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordCount100Histogram(string? name, int sample) -> void
static Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordCount1MHistogram(string? name, int sample) -> void
static Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordCustomCountHistogram(string? name, int sample, int min, int max, int numBuckets) -> void
static Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordCustomMicroTimesHistogram(string? name, long durationMicros, long min, long max, int numBuckets) -> void
static Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordCustomTimesHistogram(string? name, long durationMs, long min, long max, int numBuckets) -> void
static Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordEnumeratedHistogram(string? name, int sample, int max) -> void
static Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordExactLinearHistogram(string? name, int sample, int max) -> void
static Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordLinearCountHistogram(string? name, int sample, int min, int max, int numBuckets) -> void
static Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordLongTimesHistogram(string? name, long durationMs) -> void
static Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordLongTimesHistogram100(string? name, long durationMs) -> void
static Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordMediumTimesHistogram(string? name, long durationMs) -> void
static Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordMemoryKBHistogram(string? name, int sizeInKB) -> void
static Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordMemoryMediumMBHistogram(string? name, int sizeInMB) -> void
static Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordMicroTimesHistogram(string? name, long durationMicros) -> void
static Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordPercentageHistogram(string? name, int sample) -> void
static Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordSparseHistogram(string? name, int sample) -> void
static Xamarin.Chromium.Base.Metrics.RecordHistogram.RecordTimesHistogram(string? name, long durationMs) -> void
static Xamarin.Chromium.Base.Metrics.RecordUserAction.Record(string? action) -> void
static Xamarin.Chromium.Base.Metrics.StatisticsRecorderAndroid.ToJson(int verbosityLevel) -> string?
static Xamarin.Chromium.Base.Metrics.TimingMetric.MediumUptime(string? metricName) -> Xamarin.Chromium.Base.Metrics.TimingMetric?
static Xamarin.Chromium.Base.Metrics.TimingMetric.ShortThreadTime(string? metricName) -> Xamarin.Chromium.Base.Metrics.TimingMetric?
static Xamarin.Chromium.Base.Metrics.TimingMetric.ShortUptime(string? metricName) -> Xamarin.Chromium.Base.Metrics.TimingMetric?
static Xamarin.Chromium.Base.Metrics.UmaRecorderHolder.Get() -> Xamarin.Chromium.Base.Metrics.IUmaRecorder?
static Xamarin.Chromium.Base.Metrics.UmaRecorderHolder.OnLibraryLoaded() -> void
static Xamarin.Chromium.Base.Metrics.UmaRecorderHolder.ResetForTesting() -> void
static Xamarin.Chromium.Base.Metrics.UmaRecorderHolder.SetNonNativeDelegate(Xamarin.Chromium.Base.Metrics.IUmaRecorder? recorder) -> void
static Xamarin.Chromium.Base.Metrics.UmaRecorderHolder.SetUpNativeUmaRecorder(bool setUpNativeUmaRecorder) -> void
static Xamarin.Chromium.Base.PackageManagerUtils.BrowserIntent.get -> Android.Content.Intent?
static Xamarin.Chromium.Base.PackageManagerUtils.CanResolveActivity(Android.Content.Intent? intent) -> bool
static Xamarin.Chromium.Base.PackageManagerUtils.CanResolveActivity(Android.Content.Intent? intent, int flags) -> bool
static Xamarin.Chromium.Base.PackageManagerUtils.HasSystemFeature(string? feature) -> bool
static Xamarin.Chromium.Base.PackageManagerUtils.QueryAllLaunchersInfo() -> System.Collections.Generic.IList<Android.Content.PM.ResolveInfo!>?
static Xamarin.Chromium.Base.PackageManagerUtils.QueryAllWebBrowsersInfo() -> System.Collections.Generic.IList<Android.Content.PM.ResolveInfo!>?
static Xamarin.Chromium.Base.PackageManagerUtils.QueryInstalledHomeLaunchersIntent.get -> Android.Content.Intent?
static Xamarin.Chromium.Base.PackageManagerUtils.QueryIntentActivities(Android.Content.Intent? intent, int flags) -> System.Collections.Generic.IList<Android.Content.PM.ResolveInfo!>?
static Xamarin.Chromium.Base.PackageManagerUtils.ResolveActivity(Android.Content.Intent? intent, int flags) -> Android.Content.PM.ResolveInfo?
static Xamarin.Chromium.Base.PackageManagerUtils.ResolveDefaultWebBrowserActivity() -> Android.Content.PM.ResolveInfo?
static Xamarin.Chromium.Base.PackageUtils.GetApplicationPackageInfo(int flags) -> Android.Content.PM.PackageInfo?
static Xamarin.Chromium.Base.PackageUtils.GetCertificateSHA256FingerprintForPackage(string? packageName) -> System.Collections.Generic.IList<string!>?
static Xamarin.Chromium.Base.PackageUtils.GetDefaultAssistantPackageName(Android.Content.Context? context) -> string?
static Xamarin.Chromium.Base.PackageUtils.GetPackageInfo(string? packageName, int flags) -> Android.Content.PM.PackageInfo?
static Xamarin.Chromium.Base.PackageUtils.GetPackageVersion(string? packageName) -> int
static Xamarin.Chromium.Base.PackageUtils.IsPackageInstalled(string? packageName) -> bool
static Xamarin.Chromium.Base.PackageUtils.MaybeWorkAroundWebViewPackageVisibility() -> void
static Xamarin.Chromium.Base.PackageUtils.PackageVersionCode(Android.Content.PM.PackageInfo? pi) -> long
static Xamarin.Chromium.Base.PathService.Override(int what, string? path) -> void
static Xamarin.Chromium.Base.PathUtils.CacheDirectory.get -> string?
static Xamarin.Chromium.Base.PathUtils.CacheQuotaBytes.get -> long
static Xamarin.Chromium.Base.PathUtils.DataDirectory.get -> string?
static Xamarin.Chromium.Base.PathUtils.DownloadsDirectory.get -> string?
static Xamarin.Chromium.Base.PathUtils.ExternalStorageDirectory.get -> string?
static Xamarin.Chromium.Base.PathUtils.GetAllPrivateDownloadsDirectories() -> string![]?
static Xamarin.Chromium.Base.PathUtils.GetExternalDownloadVolumesNames() -> string![]?
static Xamarin.Chromium.Base.PathUtils.IsPathUnderAppDir(string? path, Android.Content.Context? context) -> bool
static Xamarin.Chromium.Base.PathUtils.ResetForTesting() -> void
static Xamarin.Chromium.Base.PathUtils.SetPrivateDataDirectorySuffix(string? suffix) -> void
static Xamarin.Chromium.Base.PathUtils.SetPrivateDataDirectorySuffix(string? suffix, string? cacheSubDir) -> void
static Xamarin.Chromium.Base.PathUtils.SetPrivateDirectoryPath(string? dataBasePath, string? cacheBasePath, string? dataDirSuffix, string? cacheSubDir) -> void
static Xamarin.Chromium.Base.PathUtils.ThumbnailCacheDirectory.get -> string?
static Xamarin.Chromium.Base.PiiElider.ElideConsole(string? original) -> string?
static Xamarin.Chromium.Base.PiiElider.ElideEmail(string? original) -> string?
static Xamarin.Chromium.Base.PiiElider.ElideIp(string? original) -> string?
static Xamarin.Chromium.Base.PiiElider.ElideMac(string? original) -> string?
static Xamarin.Chromium.Base.PiiElider.ElideUrl(string? original) -> string?
static Xamarin.Chromium.Base.PiiElider.SanitizeStacktrace(string? stacktrace) -> string?
static Xamarin.Chromium.Base.Promise.Fulfilled(Java.Lang.Object? result) -> Xamarin.Chromium.Base.Promise?
static Xamarin.Chromium.Base.Promise.Rejected() -> Xamarin.Chromium.Base.Promise?
static Xamarin.Chromium.Base.ResettersForTesting.AfterClassHooksDidExecute() -> void
static Xamarin.Chromium.Base.ResettersForTesting.AfterHooksDidExecute() -> void
static Xamarin.Chromium.Base.ResettersForTesting.BeforeClassHooksWillExecute() -> void
static Xamarin.Chromium.Base.ResettersForTesting.BeforeHooksWillExecute() -> void
static Xamarin.Chromium.Base.ResettersForTesting.Enable() -> void
static Xamarin.Chromium.Base.ResettersForTesting.Register(Java.Lang.IRunnable? runnable) -> void
static Xamarin.Chromium.Base.ResettersForTesting.Statedata() -> int
static Xamarin.Chromium.Base.StreamUtil.CloseQuietly(Java.IO.ICloseable? closeable) -> void
static Xamarin.Chromium.Base.StrictModeContext.AllowAllThreadPolicies() -> Xamarin.Chromium.Base.StrictModeContext?
static Xamarin.Chromium.Base.StrictModeContext.AllowAllVmPolicies() -> Xamarin.Chromium.Base.StrictModeContext?
static Xamarin.Chromium.Base.StrictModeContext.AllowDiskReads() -> Xamarin.Chromium.Base.StrictModeContext?
static Xamarin.Chromium.Base.StrictModeContext.AllowDiskWrites() -> Xamarin.Chromium.Base.StrictModeContext?
static Xamarin.Chromium.Base.StrictModeContext.AllowSlowCalls() -> Xamarin.Chromium.Base.StrictModeContext?
static Xamarin.Chromium.Base.StrictModeContext.AllowUnbufferedIo() -> Xamarin.Chromium.Base.StrictModeContext?
static Xamarin.Chromium.Base.Supplier.LazyOneshotSupplier.FromSupplier(Xamarin.Chromium.Base.Supplier.ISupplier? supplier) -> Xamarin.Chromium.Base.Supplier.ILazyOneshotSupplier?
static Xamarin.Chromium.Base.Supplier.LazyOneshotSupplier.FromValue(Java.Lang.Object? value) -> Xamarin.Chromium.Base.Supplier.ILazyOneshotSupplier?
static Xamarin.Chromium.Base.Supplier.SupplierUtils.WaitForAll(Java.Lang.IRunnable? callback, params Xamarin.Chromium.Base.Supplier.ISupplier![]? suppliers) -> void
static Xamarin.Chromium.Base.Task.AsyncTask.SerialExecutor.get -> Java.Util.Concurrent.IExecutor?
static Xamarin.Chromium.Base.Task.AsyncTask.TakeOverAndroidThreadPool() -> void
static Xamarin.Chromium.Base.Task.AsyncTask.ThreadPoolExecutor.get -> Java.Util.Concurrent.IExecutor?
static Xamarin.Chromium.Base.Task.PostTask.BackgroundBestEffortExecutor.get -> Xamarin.Chromium.Base.Task.ITaskRunner?
static Xamarin.Chromium.Base.Task.PostTask.BackgroundBestEffortMayBlockExecutor.get -> Xamarin.Chromium.Base.Task.ITaskRunner?
static Xamarin.Chromium.Base.Task.PostTask.BackgroundUserBlockingExecutor.get -> Xamarin.Chromium.Base.Task.ITaskRunner?
static Xamarin.Chromium.Base.Task.PostTask.BackgroundUserBlockingMayBlockExecutor.get -> Xamarin.Chromium.Base.Task.ITaskRunner?
static Xamarin.Chromium.Base.Task.PostTask.BackgroundUserVisibleExecutor.get -> Xamarin.Chromium.Base.Task.ITaskRunner?
static Xamarin.Chromium.Base.Task.PostTask.CanRunTaskImmediately(int taskTraits) -> bool
static Xamarin.Chromium.Base.Task.PostTask.CreateSequencedTaskRunner(int taskTraits) -> Xamarin.Chromium.Base.Task.ISequencedTaskRunner?
static Xamarin.Chromium.Base.Task.PostTask.DisablePreNativeUiTasks(bool disable) -> void
static Xamarin.Chromium.Base.Task.PostTask.FlushJobsAndResetForTesting() -> void
static Xamarin.Chromium.Base.Task.PostTask.GetTaskRunner(int taskTraits) -> Xamarin.Chromium.Base.Task.ITaskRunner?
static Xamarin.Chromium.Base.Task.PostTask.InvokePostTask(int taskTraits, Java.Lang.IRunnable? task) -> void
static Xamarin.Chromium.Base.Task.PostTask.MaybeAddTaskOrigin(Java.Lang.Object? exception) -> Java.Lang.Object?
static Xamarin.Chromium.Base.Task.PostTask.PostDelayedTask(int taskTraits, Java.Lang.IRunnable? task, long delay) -> void
static Xamarin.Chromium.Base.Task.PostTask.ResetUiThreadForTesting() -> void
static Xamarin.Chromium.Base.Task.PostTask.RunOrPostTask(int taskTraits, Java.Lang.IRunnable? task) -> void
static Xamarin.Chromium.Base.Task.PostTask.RunSynchronously(int taskTraits, Java.Lang.IRunnable? r) -> void
static Xamarin.Chromium.Base.Task.PostTask.RunSynchronously(int taskTraits, Java.Util.Concurrent.ICallable? c) -> Java.Lang.Object?
static Xamarin.Chromium.Base.Task.PostTask.SetPrenativeThreadPoolExecutorForTesting(Java.Util.Concurrent.IExecutor? executor) -> void
static Xamarin.Chromium.Base.Task.PostTask.TaskOrigin.get -> Java.Lang.Exception?
static Xamarin.Chromium.Base.Task.PostTask.UiBestEffortExecutor.get -> Xamarin.Chromium.Base.Task.ITaskRunner?
static Xamarin.Chromium.Base.Task.PostTask.UiUserBlockingExecutor.get -> Xamarin.Chromium.Base.Task.ITaskRunner?
static Xamarin.Chromium.Base.Task.PostTask.UiUserVisibleExecutor.get -> Xamarin.Chromium.Base.Task.ITaskRunner?
static Xamarin.Chromium.Base.Test.ClangProfiler.WriteClangProfilingProfile() -> void
static Xamarin.Chromium.Base.ThreadUtils.AssertOnBackgroundThread() -> void
static Xamarin.Chromium.Base.ThreadUtils.AssertOnUiThread() -> void
static Xamarin.Chromium.Base.ThreadUtils.CheckUiThread() -> void
static Xamarin.Chromium.Base.ThreadUtils.ClearUiThreadForTesting() -> void
static Xamarin.Chromium.Base.ThreadUtils.HasSubtleSideEffectsSetThreadAssertsDisabledForTesting(bool disabled) -> void
static Xamarin.Chromium.Base.ThreadUtils.PostOnUiThread(Java.Lang.IRunnable? r) -> void
static Xamarin.Chromium.Base.ThreadUtils.PostOnUiThreadDelayed(Java.Lang.IRunnable? r, long delayMillis) -> void
static Xamarin.Chromium.Base.ThreadUtils.RecordInstrumentationThreadForTesting() -> void
static Xamarin.Chromium.Base.ThreadUtils.RunOnUiThread(Java.Lang.IRunnable? r) -> void
static Xamarin.Chromium.Base.ThreadUtils.RunOnUiThreadBlocking(Java.Lang.IRunnable? r) -> void
static Xamarin.Chromium.Base.ThreadUtils.RunOnUiThreadBlocking(Java.Util.Concurrent.ICallable? c) -> Java.Lang.Object?
static Xamarin.Chromium.Base.ThreadUtils.RunningOnInstrumentationThread() -> bool
static Xamarin.Chromium.Base.ThreadUtils.RunningOnUiThread() -> bool
static Xamarin.Chromium.Base.ThreadUtils.SetThreadAssertsDisabledForTesting(bool disabled) -> void
static Xamarin.Chromium.Base.ThreadUtils.SetThreadPriorityAudio(int tid) -> void
static Xamarin.Chromium.Base.ThreadUtils.SetUiThread(Android.OS.Looper? looper) -> void
static Xamarin.Chromium.Base.ThreadUtils.SetWillOverrideUiThread() -> void
static Xamarin.Chromium.Base.ThreadUtils.UiThreadHandler.get -> Android.OS.Handler?
static Xamarin.Chromium.Base.ThreadUtils.UiThreadLooper.get -> Android.OS.Looper?
static Xamarin.Chromium.Base.TimeUtils.CurrentThreadTimeMillis() -> long
static Xamarin.Chromium.Base.TimeUtils.CurrentTimeMillis() -> long
static Xamarin.Chromium.Base.TimeUtils.ElapsedRealtimeMillis() -> long
static Xamarin.Chromium.Base.TimeUtils.ElapsedRealtimeNanos() -> long
static Xamarin.Chromium.Base.TimeUtils.UptimeMillis() -> long
static Xamarin.Chromium.Base.Token.CreateRandom() -> Xamarin.Chromium.Base.Token?
static Xamarin.Chromium.Base.Token.MaybeCreateFromBundle(Android.OS.Bundle? bundle) -> Xamarin.Chromium.Base.Token?
static Xamarin.Chromium.Base.TokenJni.Get() -> Xamarin.Chromium.Base.Token.INatives?
static Xamarin.Chromium.Base.TokenJni.SetInstanceForTesting(Xamarin.Chromium.Base.Token.INatives? impl) -> void
static Xamarin.Chromium.Base.TraceEvent.Begin(string? name) -> void
static Xamarin.Chromium.Base.TraceEvent.Begin(string? name, int arg) -> void
static Xamarin.Chromium.Base.TraceEvent.Begin(string? name, string? arg) -> void
static Xamarin.Chromium.Base.TraceEvent.DumpViewHierarchy(long dumpProtoPtr, Java.Lang.Object? list) -> void
static Xamarin.Chromium.Base.TraceEvent.Enabled() -> bool
static Xamarin.Chromium.Base.TraceEvent.End(string? name) -> void
static Xamarin.Chromium.Base.TraceEvent.End(string? name, string? arg) -> void
static Xamarin.Chromium.Base.TraceEvent.End(string? name, string? arg, long flow) -> void
static Xamarin.Chromium.Base.TraceEvent.EventNameFilteringEnabled() -> bool
static Xamarin.Chromium.Base.TraceEvent.FinishAsync(string? name, long id) -> void
static Xamarin.Chromium.Base.TraceEvent.Instant(string? name) -> void
static Xamarin.Chromium.Base.TraceEvent.Instant(string? name, string? arg) -> void
static Xamarin.Chromium.Base.TraceEvent.InstantAndroidIPC(string? name, long durMs) -> void
static Xamarin.Chromium.Base.TraceEvent.InstantAndroidToolbar(int blockReason, int allowReason, int snapshotDiff) -> void
static Xamarin.Chromium.Base.TraceEvent.MaybeEnableEarlyTracing(bool readCommandLine) -> void
static Xamarin.Chromium.Base.TraceEvent.OnNativeTracingReady() -> void
static Xamarin.Chromium.Base.TraceEvent.Scoped(string? name) -> Xamarin.Chromium.Base.TraceEvent?
static Xamarin.Chromium.Base.TraceEvent.Scoped(string? name, int arg) -> Xamarin.Chromium.Base.TraceEvent?
static Xamarin.Chromium.Base.TraceEvent.Scoped(string? name, string? arg) -> Xamarin.Chromium.Base.TraceEvent?
static Xamarin.Chromium.Base.TraceEvent.SetEnabled(bool enabled) -> void
static Xamarin.Chromium.Base.TraceEvent.SetEventNameFilteringEnabled(bool enabled) -> void
static Xamarin.Chromium.Base.TraceEvent.SnapshotViewHierarchy() -> void
static Xamarin.Chromium.Base.TraceEvent.SnapshotViewHierarchyState() -> System.Collections.Generic.IList<Xamarin.Chromium.Base.TraceEvent.ActivityInfo!>?
static Xamarin.Chromium.Base.TraceEvent.StartAsync(string? name, long id) -> void
static Xamarin.Chromium.Base.TraceEvent.StartupActivityStart(long activityId, long startTimeMs) -> void
static Xamarin.Chromium.Base.TraceEvent.StartupLaunchCause(long activityId, int launchCause) -> void
static Xamarin.Chromium.Base.TraceEvent.StartupTimeToFirstVisibleContent2(long activityId, long startTimeMs, long durationMs) -> void
static Xamarin.Chromium.Base.TraceEvent.WebViewStartupFirstInstance(long startTimeMs, long durationMs, bool includedGlobalStartup) -> void
static Xamarin.Chromium.Base.TraceEvent.WebViewStartupNotFirstInstance(long startTimeMs, long durationMs) -> void
static Xamarin.Chromium.Base.TraceEvent.WebViewStartupStage1(long startTimeMs, long durationMs) -> void
static Xamarin.Chromium.Base.TraceEvent.WebViewStartupStartChromiumLocked(long startTimeMs, long durationMs, int startCallSite, int finishCallSite, int startupMode) -> void
static Xamarin.Chromium.Base.TraceEvent.WebViewStartupTotalFactoryInit(long startTimeMs, long durationMs) -> void
static Xamarin.Chromium.Base.UnguessableToken.CreateForTesting() -> Xamarin.Chromium.Base.UnguessableToken?
static Xamarin.Chromium.Base.UnguessableToken.Creator.get -> Android.OS.IParcelableCreator?
static Xamarin.Chromium.Base.Version_info.VersionConstantsBridge.Channel.get -> int
static Xamarin.Chromium.Base.Version_info.VersionConstantsBridge.Channel.set -> void
static Xamarin.Chromium.Base.Version_info.VersionInfo.BuildVersion.get -> int
static Xamarin.Chromium.Base.Version_info.VersionInfo.IsBetaBuild.get -> bool
static Xamarin.Chromium.Base.Version_info.VersionInfo.IsCanaryBuild.get -> bool
static Xamarin.Chromium.Base.Version_info.VersionInfo.IsDevBuild.get -> bool
static Xamarin.Chromium.Base.Version_info.VersionInfo.IsLocalBuild.get -> bool
static Xamarin.Chromium.Base.Version_info.VersionInfo.IsOfficialBuild.get -> bool
static Xamarin.Chromium.Base.Version_info.VersionInfo.IsStableBuild.get -> bool
static Xamarin.Chromium.Base.Version_info.VersionInfo.ProductMajorVersion.get -> int
static Xamarin.Chromium.Base.Version_info.VersionInfo.ProductVersion.get -> string?
static Xamarin.Chromium.CroNet.ChromiumNetworkAdapter.OpenConnection(Java.Net.URL? url, Java.Net.Proxy? proxy, Xamarin.Chromium.CroNet.NetworkTrafficAnnotationTag? trafficAnnotation) -> Java.Net.URLConnection?
static Xamarin.Chromium.CroNet.ChromiumNetworkAdapter.OpenConnection(Java.Net.URL? url, Xamarin.Chromium.CroNet.NetworkTrafficAnnotationTag? trafficAnnotation) -> Java.Net.URLConnection?
static Xamarin.Chromium.CroNet.ChromiumNetworkAdapter.OpenStream(Java.Net.URL? url, Xamarin.Chromium.CroNet.NetworkTrafficAnnotationTag? trafficAnnotation) -> System.IO.Stream?
static Xamarin.Chromium.CroNet.ConnectivityManagerShim.RegisterQuicConnectionClosePayload(Android.Net.ConnectivityManager? cm, int socket, byte[]? payload) -> void
static Xamarin.Chromium.CroNet.ConnectivityManagerShim.UnregisterQuicConnectionClosePayload(Android.Net.ConnectivityManager? cm, int socket) -> void
static Xamarin.Chromium.CroNet.GURLUtils.GetOrigin(string? url) -> string?
static Xamarin.Chromium.CroNet.GURLUtilsJni.Get() -> Xamarin.Chromium.CroNet.GURLUtils.INatives?
static Xamarin.Chromium.CroNet.GURLUtilsJni.SetInstanceForTesting(Xamarin.Chromium.CroNet.GURLUtils.INatives? impl) -> void
static Xamarin.Chromium.CroNet.HttpUtil.IsAllowedHeader(string? headerName, string? headerValue) -> bool
static Xamarin.Chromium.CroNet.Impl.AndroidOsBuild.Get() -> Xamarin.Chromium.CroNet.Impl.AndroidOsBuild?
static Xamarin.Chromium.CroNet.Impl.AndroidOsSystemProperties.Get(string? key, string? def) -> string?
static Xamarin.Chromium.CroNet.Impl.CronetLibraryLoader.EnsureInitialized(Android.Content.Context? applicationContext, Xamarin.Chromium.CroNet.Impl.CronetEngineBuilderImpl? builder) -> bool
static Xamarin.Chromium.CroNet.Impl.CronetLibraryLoader.EnsureInitialized(Android.Content.Context? applicationContext, Xamarin.Chromium.CroNet.Impl.CronetEngineBuilderImpl? builder, bool libAlreadyLoaded) -> bool
static Xamarin.Chromium.CroNet.Impl.CronetLibraryLoader.LoadLibrary() -> void
static Xamarin.Chromium.CroNet.Impl.CronetLibraryLoader.PostToInitThread(Java.Lang.IRunnable? r) -> void
static Xamarin.Chromium.CroNet.Impl.CronetLibraryLoader.Preload() -> void
static Xamarin.Chromium.CroNet.Impl.CronetLibraryLoader.SwitchToTestLibrary() -> void
static Xamarin.Chromium.CroNet.Impl.CronetLibraryLoader.Tag.get -> string?
static Xamarin.Chromium.CroNet.Impl.CronetLibraryLoader.TraceNetLogCaptureModeForTesting.get -> int
static Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.CreateNativeUrlRequestContextConfig(Xamarin.Chromium.CroNet.Impl.CronetEngineBuilderImpl? builder) -> long
static Xamarin.Chromium.CroNet.NetworkActiveNotifier.Build(long nativeNetworkActiveNotifier) -> Xamarin.Chromium.CroNet.NetworkActiveNotifier?
static Xamarin.Chromium.CroNet.NetworkChangeNotifier.AddConnectionTypeObserver(Xamarin.Chromium.CroNet.NetworkChangeNotifier.IConnectionTypeObserver? observer) -> void
static Xamarin.Chromium.CroNet.NetworkChangeNotifier.AutoDetectorForTest.get -> Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect?
static Xamarin.Chromium.CroNet.NetworkChangeNotifier.FakeConnectionCostChanged(int connectionCost) -> void
static Xamarin.Chromium.CroNet.NetworkChangeNotifier.FakeConnectionSubtypeChanged(int connectionSubtype) -> void
static Xamarin.Chromium.CroNet.NetworkChangeNotifier.FakeDefaultNetwork(long netId, int connectionType) -> void
static Xamarin.Chromium.CroNet.NetworkChangeNotifier.FakeNetworkConnected(long netId, int connectionType) -> void
static Xamarin.Chromium.CroNet.NetworkChangeNotifier.FakeNetworkDisconnected(long netId) -> void
static Xamarin.Chromium.CroNet.NetworkChangeNotifier.FakeNetworkSoonToBeDisconnected(long netId) -> void
static Xamarin.Chromium.CroNet.NetworkChangeNotifier.FakePurgeActiveNetworkList(long[]? activeNetIds) -> void
static Xamarin.Chromium.CroNet.NetworkChangeNotifier.ForceConnectivityState(bool networkAvailable) -> void
static Xamarin.Chromium.CroNet.NetworkChangeNotifier.Init() -> Xamarin.Chromium.CroNet.NetworkChangeNotifier?
static Xamarin.Chromium.CroNet.NetworkChangeNotifier.Instance.get -> Xamarin.Chromium.CroNet.NetworkChangeNotifier?
static Xamarin.Chromium.CroNet.NetworkChangeNotifier.IsInitialized.get -> bool
static Xamarin.Chromium.CroNet.NetworkChangeNotifier.IsOnline.get -> bool
static Xamarin.Chromium.CroNet.NetworkChangeNotifier.RegisterToReceiveNotificationsAlways() -> void
static Xamarin.Chromium.CroNet.NetworkChangeNotifier.RemoveConnectionTypeObserver(Xamarin.Chromium.CroNet.NetworkChangeNotifier.IConnectionTypeObserver? observer) -> void
static Xamarin.Chromium.CroNet.NetworkChangeNotifier.ResetInstanceForTests() -> void
static Xamarin.Chromium.CroNet.NetworkChangeNotifier.ResetInstanceForTests(Xamarin.Chromium.CroNet.NetworkChangeNotifier? notifier) -> void
static Xamarin.Chromium.CroNet.NetworkChangeNotifier.SetAutoDetectConnectivityState(Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.RegistrationPolicy? policy, bool forceUpdateNetworkState) -> void
static Xamarin.Chromium.CroNet.NetworkChangeNotifier.SetAutoDetectConnectivityState(bool shouldAutoDetect) -> void
static Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.NetworkToNetId(Android.Net.Network? network) -> long
static Xamarin.Chromium.CroNet.NetworkTrafficAnnotationTag.CreateComplete(string? uniqueId, string? proto) -> Xamarin.Chromium.CroNet.NetworkTrafficAnnotationTag?
static Xamarin.Chromium.CroNet.NetworkTrafficAnnotationTag.MissingTrafficAnnotation.get -> Xamarin.Chromium.CroNet.NetworkTrafficAnnotationTag?
static Xamarin.Chromium.CroNet.NetworkTrafficAnnotationTag.NoTrafficAnnotationYet.get -> Xamarin.Chromium.CroNet.NetworkTrafficAnnotationTag?
static Xamarin.Chromium.CroNet.NetworkTrafficAnnotationTag.TrafficAnnotationForTests.get -> Xamarin.Chromium.CroNet.NetworkTrafficAnnotationTag?
static Xamarin.Chromium.CroNet.ProxyChangeListener.Create() -> Xamarin.Chromium.CroNet.ProxyChangeListener?
static Xamarin.Chromium.CroNet.ProxyChangeListener.GetProperty(string? property) -> string?
static Xamarin.Chromium.CroNet.X509Util.AddTestRootCertificate(byte[]? rootCertBytes) -> void
static Xamarin.Chromium.CroNet.X509Util.ClearTestRootCertificates() -> void
static Xamarin.Chromium.CroNet.X509Util.CreateCertificateFromBytes(byte[]? derBytes) -> Java.Security.Cert.X509Certificate?
static Xamarin.Chromium.CroNet.X509Util.GetUserAddedRoots() -> byte[]![]?
static Xamarin.Chromium.CroNet.X509Util.SetTestRootCertificateForBuiltin(byte[]? rootCertBytes) -> void
static Xamarin.Chromium.CroNet.X509Util.VerifyServerCertificates(byte[]![]? certChain, string? authType, string? host, byte[]? ocspResponse, byte[]? sctList) -> Xamarin.Chromium.CroNet.AndroidCertVerifyResult?
virtual Xamarin.Chromium.Base.ActivityLifecycleCallbacksAdapter.OnActivityCreated(Android.App.Activity? activity, Android.OS.Bundle? savedInstanceState) -> void
virtual Xamarin.Chromium.Base.ActivityLifecycleCallbacksAdapter.OnActivityDestroyed(Android.App.Activity? activity) -> void
virtual Xamarin.Chromium.Base.ActivityLifecycleCallbacksAdapter.OnActivityPaused(Android.App.Activity? activity) -> void
virtual Xamarin.Chromium.Base.ActivityLifecycleCallbacksAdapter.OnActivityResumed(Android.App.Activity? activity) -> void
virtual Xamarin.Chromium.Base.ActivityLifecycleCallbacksAdapter.OnActivitySaveInstanceState(Android.App.Activity? activity, Android.OS.Bundle? bundle) -> void
virtual Xamarin.Chromium.Base.ActivityLifecycleCallbacksAdapter.OnActivityStarted(Android.App.Activity? activity) -> void
virtual Xamarin.Chromium.Base.ActivityLifecycleCallbacksAdapter.OnActivityStopped(Android.App.Activity? activity) -> void
virtual Xamarin.Chromium.Base.BinderCallsListener.InstallListener() -> bool
virtual Xamarin.Chromium.Base.BinderCallsListener.TimeSpentInBinderCalls.get -> Java.Lang.Long?
virtual Xamarin.Chromium.Base.BuildInfo.BrowserApplicationInfo.get -> Android.Content.PM.ApplicationInfo?
virtual Xamarin.Chromium.Base.BuildInfo.GmsVersionCode.get -> string?
virtual Xamarin.Chromium.Base.BuildInfo.HostSigningCertSha256.get -> string?
virtual Xamarin.Chromium.Base.CancelableRunnable.Cancel() -> void
virtual Xamarin.Chromium.Base.CancelableRunnable.Run() -> void
virtual Xamarin.Chromium.Base.CommandLine.AppendSwitch(string? switchString) -> void
virtual Xamarin.Chromium.Base.CommandLine.AppendSwitchWithValue(string? switchString, string? value) -> void
virtual Xamarin.Chromium.Base.CommandLine.AppendSwitchesAndArguments(string![]? array) -> void
virtual Xamarin.Chromium.Base.CommandLine.GetSwitchValue(string? switchString) -> string?
virtual Xamarin.Chromium.Base.CommandLine.GetSwitchValue(string? switchString, string? defaultValue) -> string?
virtual Xamarin.Chromium.Base.CommandLine.HasSwitch(string? switchString) -> bool
virtual Xamarin.Chromium.Base.CommandLine.RemoveSwitch(string? switchString) -> void
virtual Xamarin.Chromium.Base.CommandLine.SwitchToNativeImpl() -> void
virtual Xamarin.Chromium.Base.CommandLine.Switches.get -> System.Collections.Generic.IDictionary<string!, string!>?
virtual Xamarin.Chromium.Base.DiscardableReferencePool.DiscardableReference.Get() -> Java.Lang.Object?
virtual Xamarin.Chromium.Base.DiscardableReferencePool.Drain() -> void
virtual Xamarin.Chromium.Base.DiscardableReferencePool.Put(Java.Lang.Object? payload) -> Xamarin.Chromium.Base.DiscardableReferencePool.DiscardableReference?
virtual Xamarin.Chromium.Base.DiscardableReferencePool.Remove(Xamarin.Chromium.Base.DiscardableReferencePool.DiscardableReference? ref) -> void
virtual Xamarin.Chromium.Base.FileUtilsJni.GetAbsoluteFilePath(string? filePath) -> string?
virtual Xamarin.Chromium.Base.Flag.FeatureName.get -> string?
virtual Xamarin.Chromium.Base.IAndroidInfo.DescribeContents() -> int
virtual Xamarin.Chromium.Base.IApkInfo.DescribeContents() -> int
virtual Xamarin.Chromium.Base.IDeviceInfo.DescribeContents() -> int
virtual Xamarin.Chromium.Base.ImportantFileWriterAndroidJni.WriteFileAtomically(string? fileName, byte[]? data) -> bool
virtual Xamarin.Chromium.Base.InputHintCheckerJni.FailedToInitializeForTesting() -> bool
virtual Xamarin.Chromium.Base.InputHintCheckerJni.HasInputForTesting.get -> bool
virtual Xamarin.Chromium.Base.InputHintCheckerJni.HasInputWithThrottlingForTesting.get -> bool
virtual Xamarin.Chromium.Base.InputHintCheckerJni.IsInitializedForTesting.get -> bool
virtual Xamarin.Chromium.Base.InputHintCheckerJni.OnCompositorViewHolderTouchEvent() -> void
virtual Xamarin.Chromium.Base.InputHintCheckerJni.SetIsAfterInputYieldForTesting(bool after) -> void
virtual Xamarin.Chromium.Base.InputHintCheckerJni.SetView(Java.Lang.Object? view) -> void
virtual Xamarin.Chromium.Base.JavaExceptionReporter.UncaughtException(Java.Lang.Thread? t, Java.Lang.Throwable? e) -> void
virtual Xamarin.Chromium.Base.JavaHandlerThread.Looper.get -> Android.OS.Looper?
virtual Xamarin.Chromium.Base.JavaHandlerThread.MaybeStart() -> void
virtual Xamarin.Chromium.Base.Lifetime.DestroyChecker.CheckNotDestroyed() -> void
virtual Xamarin.Chromium.Base.Lifetime.DestroyChecker.Destroy() -> void
virtual Xamarin.Chromium.Base.Lifetime.DestroyChecker.IsDestroyed.get -> bool
virtual Xamarin.Chromium.Base.Memory.MemoryPressureUma.OnConfigurationChanged(Android.Content.Res.Configuration? configuration) -> void
virtual Xamarin.Chromium.Base.Memory.MemoryPressureUma.OnLowMemory() -> void
virtual Xamarin.Chromium.Base.Memory.MemoryPressureUma.OnTrimMemory(Android.Content.TrimMemory level) -> void
virtual Xamarin.Chromium.Base.Metrics.HistogramBucket.Contains(int value) -> bool
virtual Xamarin.Chromium.Base.Metrics.NativeUmaRecorderJni.AddActionCallbackForTesting(Xamarin.Chromium.Base.ICallback? callback) -> long
virtual Xamarin.Chromium.Base.Metrics.NativeUmaRecorderJni.CreateHistogramSnapshotForTesting() -> long
virtual Xamarin.Chromium.Base.Metrics.NativeUmaRecorderJni.DestroyHistogramSnapshotForTesting(long snapshotPtr) -> void
virtual Xamarin.Chromium.Base.Metrics.NativeUmaRecorderJni.GetHistogramSamplesForTesting(string? name) -> long[]?
virtual Xamarin.Chromium.Base.Metrics.NativeUmaRecorderJni.GetHistogramTotalCountForTesting(string? name, long snapshotPtr) -> int
virtual Xamarin.Chromium.Base.Metrics.NativeUmaRecorderJni.GetHistogramValueCountForTesting(string? name, int sample, long snapshotPtr) -> int
virtual Xamarin.Chromium.Base.Metrics.NativeUmaRecorderJni.RecordBooleanHistogram(string? name, long nativeHint, bool sample) -> long
virtual Xamarin.Chromium.Base.Metrics.NativeUmaRecorderJni.RecordExponentialHistogram(string? name, long nativeHint, int sample, int min, int max, int numBuckets) -> long
virtual Xamarin.Chromium.Base.Metrics.NativeUmaRecorderJni.RecordLinearHistogram(string? name, long nativeHint, int sample, int min, int max, int numBuckets) -> long
virtual Xamarin.Chromium.Base.Metrics.NativeUmaRecorderJni.RecordSparseHistogram(string? name, long nativeHint, int sample) -> long
virtual Xamarin.Chromium.Base.Metrics.NativeUmaRecorderJni.RecordUserAction(string? name, long millisSinceEvent) -> void
virtual Xamarin.Chromium.Base.Metrics.NativeUmaRecorderJni.RemoveActionCallbackForTesting(long callbackId) -> void
virtual Xamarin.Chromium.Base.Metrics.TimingMetric.Close() -> void
virtual Xamarin.Chromium.Base.ObserverList.AddObserver(Java.Lang.Object? obs) -> bool
virtual Xamarin.Chromium.Base.ObserverList.Clear() -> void
virtual Xamarin.Chromium.Base.ObserverList.DisableThreadAsserts() -> void
virtual Xamarin.Chromium.Base.ObserverList.HasObserver(Java.Lang.Object? obs) -> bool
virtual Xamarin.Chromium.Base.ObserverList.IsEmpty.get -> bool
virtual Xamarin.Chromium.Base.ObserverList.Iterator() -> Java.Util.IIterator?
virtual Xamarin.Chromium.Base.ObserverList.RemoveObserver(Java.Lang.Object? obs) -> bool
virtual Xamarin.Chromium.Base.ObserverList.RewindableIterator() -> Xamarin.Chromium.Base.ObserverList.IRewindableIterator?
virtual Xamarin.Chromium.Base.ObserverList.Size() -> int
virtual Xamarin.Chromium.Base.Promise.AndFinally(Java.Lang.IRunnable? runnable) -> Xamarin.Chromium.Base.Promise?
virtual Xamarin.Chromium.Base.Promise.Except(Xamarin.Chromium.Base.ICallback? onReject) -> void
virtual Xamarin.Chromium.Base.Promise.Fulfill(Java.Lang.Object? result) -> void
virtual Xamarin.Chromium.Base.Promise.IsFulfilled.get -> bool
virtual Xamarin.Chromium.Base.Promise.IsPending.get -> bool
virtual Xamarin.Chromium.Base.Promise.IsRejected.get -> bool
virtual Xamarin.Chromium.Base.Promise.Reject() -> void
virtual Xamarin.Chromium.Base.Promise.Reject(Java.Lang.Exception? reason) -> void
virtual Xamarin.Chromium.Base.Promise.Result.get -> Java.Lang.Object?
virtual Xamarin.Chromium.Base.Promise.Then(Java.Util.Functions.IFunction? function) -> Xamarin.Chromium.Base.Promise?
virtual Xamarin.Chromium.Base.Promise.Then(Xamarin.Chromium.Base.ICallback? onFulfill) -> void
virtual Xamarin.Chromium.Base.Promise.Then(Xamarin.Chromium.Base.ICallback? onFulfill, Xamarin.Chromium.Base.ICallback? onReject) -> void
virtual Xamarin.Chromium.Base.Promise.Then(Xamarin.Chromium.Base.Promise.IAsyncFunction? function) -> Xamarin.Chromium.Base.Promise?
virtual Xamarin.Chromium.Base.RequiredCallback.OnResult(Java.Lang.Object? result) -> void
virtual Xamarin.Chromium.Base.StrictModeContext.Close() -> void
virtual Xamarin.Chromium.Base.Supplier.LazyOneshotSupplierImpl.Get() -> Java.Lang.Object?
virtual Xamarin.Chromium.Base.Supplier.LazyOneshotSupplierImpl.HasValue.get -> bool
virtual Xamarin.Chromium.Base.Supplier.LazyOneshotSupplierImpl.OnAvailable(Xamarin.Chromium.Base.ICallback? callback) -> void
virtual Xamarin.Chromium.Base.Supplier.LazyOneshotSupplierImpl.Set(Java.Lang.Object? object) -> void
virtual Xamarin.Chromium.Base.Supplier.ObservableSupplierImpl.AddObserver(Xamarin.Chromium.Base.ICallback? obs, int behavior) -> Java.Lang.Object?
virtual Xamarin.Chromium.Base.Supplier.ObservableSupplierImpl.Get() -> Java.Lang.Object?
virtual Xamarin.Chromium.Base.Supplier.ObservableSupplierImpl.HasObservers.get -> bool
virtual Xamarin.Chromium.Base.Supplier.ObservableSupplierImpl.RemoveObserver(Xamarin.Chromium.Base.ICallback? obs) -> void
virtual Xamarin.Chromium.Base.Supplier.ObservableSupplierImpl.Set(Java.Lang.Object? object) -> void
virtual Xamarin.Chromium.Base.Supplier.OneshotSupplierImpl.Get() -> Java.Lang.Object?
virtual Xamarin.Chromium.Base.Supplier.OneshotSupplierImpl.OnAvailable(Xamarin.Chromium.Base.ICallback? callback) -> Java.Lang.Object?
virtual Xamarin.Chromium.Base.Supplier.OneshotSupplierImpl.Set(Java.Lang.Object? object) -> void
virtual Xamarin.Chromium.Base.Supplier.SyncOneshotSupplierImpl.Get() -> Java.Lang.Object?
virtual Xamarin.Chromium.Base.Supplier.SyncOneshotSupplierImpl.OnAvailable(Xamarin.Chromium.Base.ICallback? callback) -> Java.Lang.Object?
virtual Xamarin.Chromium.Base.Supplier.SyncOneshotSupplierImpl.Set(Java.Lang.Object? object) -> void
virtual Xamarin.Chromium.Base.Supplier.TransitiveObservableSupplier.AddObserver(Xamarin.Chromium.Base.ICallback? obs, int behavior) -> Java.Lang.Object?
virtual Xamarin.Chromium.Base.Supplier.TransitiveObservableSupplier.Get() -> Java.Lang.Object?
virtual Xamarin.Chromium.Base.Supplier.TransitiveObservableSupplier.RemoveObserver(Xamarin.Chromium.Base.ICallback? obs) -> void
virtual Xamarin.Chromium.Base.Supplier.UnownedUserDataSupplier.Attach(Xamarin.Chromium.Base.UnownedUserDataHost? host) -> void
virtual Xamarin.Chromium.Base.Supplier.UnownedUserDataSupplier.Destroy() -> void
virtual Xamarin.Chromium.Base.Supplier.UnwrapObservableSupplier.AddObserver(Xamarin.Chromium.Base.ICallback? obs, int behavior) -> Java.Lang.Object?
virtual Xamarin.Chromium.Base.Supplier.UnwrapObservableSupplier.Get() -> Java.Lang.Object?
virtual Xamarin.Chromium.Base.Supplier.UnwrapObservableSupplier.RemoveObserver(Xamarin.Chromium.Base.ICallback? obs) -> void
virtual Xamarin.Chromium.Base.Task.AsyncTask.OnCancelled() -> void
virtual Xamarin.Chromium.Base.Task.AsyncTask.OnCancelled(Java.Lang.Object? result) -> void
virtual Xamarin.Chromium.Base.Task.AsyncTask.OnPreExecute() -> void
virtual Xamarin.Chromium.Base.Task.ChainedTasks.Add(int traits, Java.Lang.IRunnable? task) -> void
virtual Xamarin.Chromium.Base.Task.ChainedTasks.Cancel() -> void
virtual Xamarin.Chromium.Base.Task.ChainedTasks.Start(bool coalesceTasks) -> void
virtual Xamarin.Chromium.Base.Task.TaskRunnerImpl.RunPreNativeTask() -> void
virtual Xamarin.Chromium.Base.Task.TaskRunnerImpl.SchedulePreNativeDelayedTask(Java.Lang.IRunnable? task, long delay) -> bool
virtual Xamarin.Chromium.Base.Task.TaskRunnerImpl.SchedulePreNativeTask() -> void
virtual Xamarin.Chromium.Base.ThreadUtils.ThreadChecker.AssertOnValidOrInstrumentationThread() -> void
virtual Xamarin.Chromium.Base.ThreadUtils.ThreadChecker.AssertOnValidThread() -> void
virtual Xamarin.Chromium.Base.ThreadUtils.ThreadChecker.ResetThreadId() -> void
virtual Xamarin.Chromium.Base.TimeUtils.CurrentThreadTimeMillisTimer.ElapsedMillis.get -> long
virtual Xamarin.Chromium.Base.TimeUtils.ElapsedRealtimeMillisTimer.ElapsedMillis.get -> long
virtual Xamarin.Chromium.Base.TimeUtils.ElapsedRealtimeNanosTimer.ElapsedMicros.get -> long
virtual Xamarin.Chromium.Base.TimeUtils.ElapsedRealtimeNanosTimer.ElapsedNanos.get -> long
virtual Xamarin.Chromium.Base.TimeUtils.UptimeMillisTimer.ElapsedMillis.get -> long
virtual Xamarin.Chromium.Base.TokenJni.CreateRandom() -> Xamarin.Chromium.Base.Token?
virtual Xamarin.Chromium.Base.TraceEvent.Close() -> void
virtual Xamarin.Chromium.Base.ValueChangedCallback.OnResult(Java.Lang.Object? newValue) -> void
virtual Xamarin.Chromium.Base.WrappedClassLoader.FindLibrary(string? name) -> string?
virtual Xamarin.Chromium.CroNet.AndroidCertVerifyResult.GetCertificateChainEncoded() -> byte[]![]?
virtual Xamarin.Chromium.CroNet.AndroidCertVerifyResult.IsIssuedByKnownRoot.get -> bool
virtual Xamarin.Chromium.CroNet.AndroidCertVerifyResult.Status.get -> int
virtual Xamarin.Chromium.CroNet.DnsStatus.GetDnsServers() -> byte[]![]?
virtual Xamarin.Chromium.CroNet.DnsStatus.PrivateDnsActive.get -> bool
virtual Xamarin.Chromium.CroNet.DnsStatus.PrivateDnsServerName.get -> string?
virtual Xamarin.Chromium.CroNet.DnsStatus.SearchDomains.get -> string?
virtual Xamarin.Chromium.CroNet.GURLUtilsJni.GetOrigin(string? url) -> string?
virtual Xamarin.Chromium.CroNet.Impl.CronetBidirectionalStream.FlushDataForTesting.get -> System.Collections.Generic.IList<Java.Nio.ByteBuffer!>?
virtual Xamarin.Chromium.CroNet.Impl.CronetBidirectionalStream.PendingDataForTesting.get -> System.Collections.Generic.IList<Java.Nio.ByteBuffer!>?
virtual Xamarin.Chromium.CroNet.Impl.CronetBidirectionalStream.SetOnDestroyedCallbackForTesting(Java.Lang.IRunnable? onDestroyedCallbackForTesting) -> void
virtual Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.CreateBidirectionalStream(string? url, Xamarin.Chromium.CroNet.BidirectionalStream.Callback? callback, Java.Util.Concurrent.IExecutor? executor, string? httpMethod, System.Collections.Generic.IList<Java.Util.IMapEntry!>? requestHeaders, int priority, bool delayRequestHeadersUntilFirstFlush, System.Collections.Generic.ICollection<Java.Lang.Object!>? requestAnnotations, bool trafficStatsTagSet, int trafficStatsTag, bool trafficStatsUidSet, int trafficStatsUid, long networkHandle) -> Xamarin.Chromium.CroNet.ExperimentalBidirectionalStream?
virtual Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.CreateRequest(string? url, Xamarin.Chromium.CroNet.UrlRequest.Callback? callback, Java.Util.Concurrent.IExecutor? executor, int priority, System.Collections.Generic.ICollection<Java.Lang.Object!>? requestAnnotations, bool disableCache, bool disableConnectionMigration, bool allowDirectExecutor, bool trafficStatsTagSet, int trafficStatsTag, bool trafficStatsUidSet, int trafficStatsUid, Xamarin.Chromium.CroNet.RequestFinishedInfo.Listener? requestFinishedListener, int idempotency, long networkHandle, string? method, System.Collections.Generic.IList<Java.Util.IMapEntry!>? requestHeaders, Xamarin.Chromium.CroNet.UploadDataProvider? uploadDataProvider, Java.Util.Concurrent.IExecutor? uploadDataProviderExecutor, byte[]? sharedDictionaryHash, Java.Nio.ByteBuffer? sharedDictionary, string! sharedDictionaryId) -> Xamarin.Chromium.CroNet.ExperimentalUrlRequest?
virtual Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.FlushWritePropertiesForTesting() -> void
virtual Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.IsNetworkThread(Java.Lang.Thread? thread) -> bool
virtual Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.StopNetLogCompleted() -> void
virtual Xamarin.Chromium.CroNet.Impl.CronetUrlRequestContext.UrlRequestContextAdapter.get -> long
virtual Xamarin.Chromium.CroNet.MimeTypeFilter.Accept(Android.Net.Uri? uri, string? mimeType) -> bool
virtual Xamarin.Chromium.CroNet.MimeTypeFilter.Accept(Java.IO.File? file) -> bool
virtual Xamarin.Chromium.CroNet.NetworkActiveNotifier.DisableNotifications() -> void
virtual Xamarin.Chromium.CroNet.NetworkActiveNotifier.EnableNotifications() -> void
virtual Xamarin.Chromium.CroNet.NetworkActiveNotifier.FakeDefaultNetworkActive() -> void
virtual Xamarin.Chromium.CroNet.NetworkActiveNotifier.IsDefaultNetworkActive.get -> bool
virtual Xamarin.Chromium.CroNet.NetworkActiveNotifier.OnNetworkActive() -> void
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifier.AddNativeObserver(long nativeChangeNotifier) -> void
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifier.CurrentConnectionCost.get -> int
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifier.CurrentConnectionType.get -> int
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifier.CurrentDefaultNetId.get -> long
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifier.GetCurrentConnectionSubtype(bool forceUpdateNetworkState) -> int
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifier.GetCurrentNetworksAndTypes() -> long[]?
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifier.RegisterNetworkCallbackFailed() -> bool
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifier.RemoveNativeObserver(long nativeChangeNotifier) -> void
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.CurrentNetworkState.get -> Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.NetworkState?
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.DefaultNetId.get -> long
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.DefaultNetwork.get -> Android.Net.Network?
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.Destroy() -> void
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.GetNetworksAndTypes() -> long[]?
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.GetNetworksForTesting() -> Android.Net.Network![]?
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.NetworkState.ConnectionCost.get -> int
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.NetworkState.ConnectionSubtype.get -> int
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.NetworkState.ConnectionType.get -> int
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.NetworkState.IsConnected.get -> bool
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.NetworkState.IsMetered.get -> bool
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.NetworkState.IsPrivateDnsActive.get -> bool
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.NetworkState.NetworkIdentifier.get -> string?
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.NetworkState.NetworkSubType.get -> int
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.NetworkState.NetworkType.get -> int
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.NetworkState.PrivateDnsServerName.get -> string?
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.Register() -> void
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.RegisterNetworkCallbackFailed() -> bool
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.RegistrationPolicy.Init(Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect? notifier) -> void
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.Unregister() -> void
virtual Xamarin.Chromium.CroNet.NetworkChangeNotifierAutoDetect.UpdateCurrentNetworkState() -> void
virtual Xamarin.Chromium.CroNet.ProxyChangeListener.SetDelegateForTesting(Xamarin.Chromium.CroNet.ProxyChangeListener.IDelegate? delegate) -> void
virtual Xamarin.Chromium.CroNet.ProxyChangeListener.Start(long nativePtr) -> void
virtual Xamarin.Chromium.CroNet.ProxyChangeListener.Stop() -> void
virtual Xamarin.Chromium.CroNet.RegistrationPolicyApplicationStatus.OnApplicationStateChange(int newState) -> void
virtual Xamarin.Chromium.CroNet.UrlConnection.CronetHttpURLConnection.SetTrafficStatsTag(int tag) -> void
virtual Xamarin.Chromium.CroNet.UrlConnection.CronetHttpURLConnection.SetTrafficStatsUid(int uid) -> void
virtual Xamarin.Chromium.CroNet.UrlConnection.CronetURLStreamHandlerFactory.CreateURLStreamHandler(string? protocol) -> Java.Net.URLStreamHandler?
