#nullable enable
AndroidX.Lifecycle.ComputableLiveData
AndroidX.Lifecycle.ComputableLiveData.ComputableLiveData() -> void
AndroidX.Lifecycle.ComputableLiveData.ComputableLiveData(Java.Util.Concurrent.IExecutor! executor) -> void
AndroidX.Lifecycle.ComputableLiveData.ComputableLiveData(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Lifecycle.CoroutineLiveDataKt
AndroidX.Lifecycle.FlowLiveDataConversions
AndroidX.Lifecycle.ILiveDataScope
AndroidX.Lifecycle.ILiveDataScope.Emit(Java.Lang.Object? value, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
AndroidX.Lifecycle.ILiveDataScope.EmitSource(AndroidX.Lifecycle.LiveData! source, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
AndroidX.Lifecycle.ILiveDataScope.LatestValue.get -> Java.Lang.Object?
AndroidX.Lifecycle.MediatorLiveData
AndroidX.Lifecycle.MediatorLiveData.MediatorLiveData() -> void
AndroidX.Lifecycle.MediatorLiveData.MediatorLiveData(Java.Lang.Object? value) -> void
AndroidX.Lifecycle.MediatorLiveData.MediatorLiveData(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Lifecycle.Transformations
abstract AndroidX.Lifecycle.ComputableLiveData.Compute() -> Java.Lang.Object?
override AndroidX.Lifecycle.ComputableLiveData.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Lifecycle.ComputableLiveData.ThresholdClass.get -> nint
override AndroidX.Lifecycle.ComputableLiveData.ThresholdType.get -> System.Type!
override AndroidX.Lifecycle.CoroutineLiveDataKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Lifecycle.FlowLiveDataConversions.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Lifecycle.MediatorLiveData.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Lifecycle.MediatorLiveData.ThresholdClass.get -> nint
override AndroidX.Lifecycle.MediatorLiveData.ThresholdType.get -> System.Type!
override AndroidX.Lifecycle.Transformations.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
static AndroidX.Lifecycle.CoroutineLiveDataKt.LiveData(Java.Time.Duration! timeout, Kotlin.Coroutines.ICoroutineContext! context, Kotlin.Jvm.Functions.IFunction2! block) -> AndroidX.Lifecycle.LiveData!
static AndroidX.Lifecycle.CoroutineLiveDataKt.LiveData(Java.Time.Duration! timeout, Kotlin.Jvm.Functions.IFunction2! block) -> AndroidX.Lifecycle.LiveData!
static AndroidX.Lifecycle.CoroutineLiveDataKt.LiveData(Kotlin.Coroutines.ICoroutineContext! context, Kotlin.Jvm.Functions.IFunction2! block) -> AndroidX.Lifecycle.LiveData!
static AndroidX.Lifecycle.CoroutineLiveDataKt.LiveData(Kotlin.Coroutines.ICoroutineContext! context, long timeoutInMs, Kotlin.Jvm.Functions.IFunction2! block) -> AndroidX.Lifecycle.LiveData!
static AndroidX.Lifecycle.CoroutineLiveDataKt.LiveData(Kotlin.Jvm.Functions.IFunction2! block) -> AndroidX.Lifecycle.LiveData!
static AndroidX.Lifecycle.FlowLiveDataConversions.AsFlow(AndroidX.Lifecycle.LiveData! obj) -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
static AndroidX.Lifecycle.FlowLiveDataConversions.AsLiveData(Xamarin.KotlinX.Coroutines.Flow.IFlow! obj) -> AndroidX.Lifecycle.LiveData!
static AndroidX.Lifecycle.FlowLiveDataConversions.AsLiveData(Xamarin.KotlinX.Coroutines.Flow.IFlow! obj, Java.Time.Duration! timeout, Kotlin.Coroutines.ICoroutineContext! context) -> AndroidX.Lifecycle.LiveData!
static AndroidX.Lifecycle.FlowLiveDataConversions.AsLiveData(Xamarin.KotlinX.Coroutines.Flow.IFlow! obj, Kotlin.Coroutines.ICoroutineContext! context) -> AndroidX.Lifecycle.LiveData!
static AndroidX.Lifecycle.FlowLiveDataConversions.AsLiveData(Xamarin.KotlinX.Coroutines.Flow.IFlow! obj, Kotlin.Coroutines.ICoroutineContext! context, long timeoutInMs) -> AndroidX.Lifecycle.LiveData!
static AndroidX.Lifecycle.Transformations.DistinctUntilChanged(AndroidX.Lifecycle.LiveData! obj) -> AndroidX.Lifecycle.LiveData!
static AndroidX.Lifecycle.Transformations.Map(AndroidX.Lifecycle.LiveData! obj, Kotlin.Jvm.Functions.IFunction1! transform) -> AndroidX.Lifecycle.LiveData!
static AndroidX.Lifecycle.Transformations.SwitchMap(AndroidX.Lifecycle.LiveData! obj, Kotlin.Jvm.Functions.IFunction1! transform) -> AndroidX.Lifecycle.LiveData!
virtual AndroidX.Lifecycle.ComputableLiveData.Invalidate() -> void
virtual AndroidX.Lifecycle.ComputableLiveData.LiveData.get -> AndroidX.Lifecycle.LiveData!
virtual AndroidX.Lifecycle.MediatorLiveData.AddSource(AndroidX.Lifecycle.LiveData? source, AndroidX.Lifecycle.IObserver? onChanged) -> void
virtual AndroidX.Lifecycle.MediatorLiveData.RemoveSource(AndroidX.Lifecycle.LiveData? toRemote) -> void
