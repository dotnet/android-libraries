#nullable enable
AndroidX.Fragment.App.BackStackRecord
AndroidX.Fragment.App.BackStackRecord.BreadCrumbShortTitle.get -> string?
AndroidX.Fragment.App.BackStackRecord.BreadCrumbShortTitleFormatted.get -> Java.Lang.ICharSequence?
AndroidX.Fragment.App.BackStackRecord.BreadCrumbShortTitleRes.get -> int
AndroidX.Fragment.App.BackStackRecord.BreadCrumbTitle.get -> string?
AndroidX.Fragment.App.BackStackRecord.BreadCrumbTitleFormatted.get -> Java.Lang.ICharSequence?
AndroidX.Fragment.App.BackStackRecord.BreadCrumbTitleRes.get -> int
AndroidX.Fragment.App.BackStackRecord.Dump(string? prefix, Java.IO.PrintWriter? writer) -> void
AndroidX.Fragment.App.BackStackRecord.Dump(string? prefix, Java.IO.PrintWriter? writer, bool full) -> void
AndroidX.Fragment.App.BackStackRecord.GenerateOps(System.Collections.Generic.IList<AndroidX.Fragment.App.BackStackRecord!>! records, System.Collections.Generic.IList<Java.Lang.Boolean!>! isRecordPop) -> bool
AndroidX.Fragment.App.BackStackRecord.Id.get -> int
AndroidX.Fragment.App.BackStackRecord.Name.get -> string?
AndroidX.Fragment.App.BackStackRecord.RunOnCommitRunnables() -> void
AndroidX.Fragment.App.DialogFragment
AndroidX.Fragment.App.DialogFragment.DialogFragment() -> void
AndroidX.Fragment.App.DialogFragment.DialogFragment(int contentLayoutId) -> void
AndroidX.Fragment.App.DialogFragment.DialogFragment(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Fragment.App.DialogFragment.RequireComponentDialog() -> AndroidX.Activity.ComponentDialog!
AndroidX.Fragment.App.DialogFragment.RequireDialog() -> Android.App.Dialog!
AndroidX.Fragment.App.Fragment
AndroidX.Fragment.App.Fragment.Activity.get -> AndroidX.Fragment.App.FragmentActivity?
AndroidX.Fragment.App.Fragment.Arguments.get -> Android.OS.Bundle?
AndroidX.Fragment.App.Fragment.Arguments.set -> void
AndroidX.Fragment.App.Fragment.ChildFragmentManager.get -> AndroidX.Fragment.App.FragmentManager!
AndroidX.Fragment.App.Fragment.Fragment() -> void
AndroidX.Fragment.App.Fragment.Fragment(int contentLayoutId) -> void
AndroidX.Fragment.App.Fragment.Fragment(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Fragment.App.Fragment.FragmentManager.get -> AndroidX.Fragment.App.FragmentManager?
AndroidX.Fragment.App.Fragment.GetString(int resId) -> string!
AndroidX.Fragment.App.Fragment.GetString(int resId, params Java.Lang.Object![]? formatArgs) -> string!
AndroidX.Fragment.App.Fragment.GetText(int resId) -> string!
AndroidX.Fragment.App.Fragment.GetTextFormatted(int resId) -> Java.Lang.ICharSequence!
AndroidX.Fragment.App.Fragment.HasOptionsMenu.get -> bool
AndroidX.Fragment.App.Fragment.HasOptionsMenu.set -> void
AndroidX.Fragment.App.Fragment.Host.get -> Java.Lang.Object?
AndroidX.Fragment.App.Fragment.Id.get -> int
AndroidX.Fragment.App.Fragment.InstantiationException
AndroidX.Fragment.App.Fragment.InstantiationException.InstantiationException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Fragment.App.Fragment.InstantiationException.InstantiationException(string! msg, Java.Lang.Exception? cause) -> void
AndroidX.Fragment.App.Fragment.IsAdded.get -> bool
AndroidX.Fragment.App.Fragment.IsDetached.get -> bool
AndroidX.Fragment.App.Fragment.IsHidden.get -> bool
AndroidX.Fragment.App.Fragment.IsInLayout.get -> bool
AndroidX.Fragment.App.Fragment.IsMenuVisible.get -> bool
AndroidX.Fragment.App.Fragment.IsRemoving.get -> bool
AndroidX.Fragment.App.Fragment.IsResumed.get -> bool
AndroidX.Fragment.App.Fragment.IsStateSaved.get -> bool
AndroidX.Fragment.App.Fragment.IsVisible.get -> bool
AndroidX.Fragment.App.Fragment.LayoutInflater.get -> Android.Views.LayoutInflater!
AndroidX.Fragment.App.Fragment.MPreviousWho.get -> string?
AndroidX.Fragment.App.Fragment.MPreviousWho.set -> void
AndroidX.Fragment.App.Fragment.ParentFragment.get -> AndroidX.Fragment.App.Fragment?
AndroidX.Fragment.App.Fragment.ParentFragmentManager.get -> AndroidX.Fragment.App.FragmentManager!
AndroidX.Fragment.App.Fragment.PostponeEnterTransition(long duration, Java.Util.Concurrent.TimeUnit! timeUnit) -> void
AndroidX.Fragment.App.Fragment.RegisterForActivityResult(AndroidX.Activity.Result.Contract.ActivityResultContract! contract, AndroidX.Activity.Result.ActivityResultRegistry! registry, AndroidX.Activity.Result.IActivityResultCallback! callback) -> AndroidX.Activity.Result.ActivityResultLauncher!
AndroidX.Fragment.App.Fragment.RegisterForActivityResult(AndroidX.Activity.Result.Contract.ActivityResultContract! contract, AndroidX.Activity.Result.IActivityResultCallback! callback) -> AndroidX.Activity.Result.ActivityResultLauncher!
AndroidX.Fragment.App.Fragment.RequestPermissions(string![]! permissions, int requestCode) -> void
AndroidX.Fragment.App.Fragment.RequireActivity() -> AndroidX.Fragment.App.FragmentActivity!
AndroidX.Fragment.App.Fragment.RequireArguments() -> Android.OS.Bundle!
AndroidX.Fragment.App.Fragment.RequireContext() -> Android.Content.Context!
AndroidX.Fragment.App.Fragment.RequireFragmentManager() -> AndroidX.Fragment.App.FragmentManager!
AndroidX.Fragment.App.Fragment.RequireHost() -> Java.Lang.Object!
AndroidX.Fragment.App.Fragment.RequireParentFragment() -> AndroidX.Fragment.App.Fragment!
AndroidX.Fragment.App.Fragment.RequireView() -> Android.Views.View!
AndroidX.Fragment.App.Fragment.Resources.get -> Android.Content.Res.Resources!
AndroidX.Fragment.App.Fragment.RetainInstance.get -> bool
AndroidX.Fragment.App.Fragment.RetainInstance.set -> void
AndroidX.Fragment.App.Fragment.SavedState
AndroidX.Fragment.App.Fragment.SavedState.SavedState(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Fragment.App.Fragment.SavedStateRegistry.get -> AndroidX.SavedState.SavedStateRegistry!
AndroidX.Fragment.App.Fragment.Tag.get -> string?
AndroidX.Fragment.App.Fragment.TargetFragment.get -> AndroidX.Fragment.App.Fragment?
AndroidX.Fragment.App.Fragment.TargetRequestCode.get -> int
AndroidX.Fragment.App.FragmentActivity
AndroidX.Fragment.App.FragmentActivity.FragmentActivity() -> void
AndroidX.Fragment.App.FragmentActivity.FragmentActivity(int contentLayoutId) -> void
AndroidX.Fragment.App.FragmentActivity.FragmentActivity(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Fragment.App.FragmentActivity.ValidateRequestPermissionsRequestCode(int requestCode) -> void
AndroidX.Fragment.App.FragmentContainer
AndroidX.Fragment.App.FragmentContainer.FragmentContainer() -> void
AndroidX.Fragment.App.FragmentContainer.FragmentContainer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Fragment.App.FragmentContainerView
AndroidX.Fragment.App.FragmentContainerView.Fragment.get -> Java.Lang.Object?
AndroidX.Fragment.App.FragmentContainerView.FragmentContainerView(Android.Content.Context! context) -> void
AndroidX.Fragment.App.FragmentContainerView.FragmentContainerView(Android.Content.Context! context, Android.Util.IAttributeSet? attrs) -> void
AndroidX.Fragment.App.FragmentContainerView.FragmentContainerView(Android.Content.Context! context, Android.Util.IAttributeSet? attrs, int defStyleAttr) -> void
AndroidX.Fragment.App.FragmentController
AndroidX.Fragment.App.FragmentController.FragmentController(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Fragment.App.FragmentFactory
AndroidX.Fragment.App.FragmentFactory.FragmentFactory() -> void
AndroidX.Fragment.App.FragmentFactory.FragmentFactory(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Fragment.App.FragmentHostCallback
AndroidX.Fragment.App.FragmentHostCallback.Activity.get -> Android.App.Activity?
AndroidX.Fragment.App.FragmentHostCallback.Context.get -> Android.Content.Context!
AndroidX.Fragment.App.FragmentHostCallback.FragmentHostCallback(Android.Content.Context! context, Android.OS.Handler! handler, int windowAnimations) -> void
AndroidX.Fragment.App.FragmentHostCallback.FragmentHostCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Fragment.App.FragmentHostCallback.FragmentManager.get -> AndroidX.Fragment.App.FragmentManager!
AndroidX.Fragment.App.FragmentHostCallback.Handler.get -> Android.OS.Handler!
AndroidX.Fragment.App.FragmentManager
AndroidX.Fragment.App.FragmentManager.BackStackChangeCancelled -> System.EventHandler!
AndroidX.Fragment.App.FragmentManager.BackStackChangeCommitted -> System.EventHandler<AndroidX.Fragment.App.FragmentManager.BackStackChangeCommittedEventArgs!>!
AndroidX.Fragment.App.FragmentManager.BackStackChangeCommittedEventArgs
AndroidX.Fragment.App.FragmentManager.BackStackChangeCommittedEventArgs.BackStackChangeCommittedEventArgs(AndroidX.Fragment.App.Fragment! fragment, bool pop) -> void
AndroidX.Fragment.App.FragmentManager.BackStackChangeCommittedEventArgs.Fragment.get -> AndroidX.Fragment.App.Fragment!
AndroidX.Fragment.App.FragmentManager.BackStackChangeCommittedEventArgs.Pop.get -> bool
AndroidX.Fragment.App.FragmentManager.BackStackChangeProgressed -> System.EventHandler<AndroidX.Fragment.App.FragmentManager.BackStackChangeProgressedEventArgs!>!
AndroidX.Fragment.App.FragmentManager.BackStackChangeProgressedEventArgs
AndroidX.Fragment.App.FragmentManager.BackStackChangeProgressedEventArgs.BackEventCompat.get -> AndroidX.Activity.BackEventCompat!
AndroidX.Fragment.App.FragmentManager.BackStackChangeProgressedEventArgs.BackStackChangeProgressedEventArgs(AndroidX.Activity.BackEventCompat! backEventCompat) -> void
AndroidX.Fragment.App.FragmentManager.BackStackChangeStarted -> System.EventHandler<AndroidX.Fragment.App.FragmentManager.BackStackChangeStartedEventArgs!>!
AndroidX.Fragment.App.FragmentManager.BackStackChangeStartedEventArgs
AndroidX.Fragment.App.FragmentManager.BackStackChangeStartedEventArgs.BackStackChangeStartedEventArgs(AndroidX.Fragment.App.Fragment! fragment, bool pop) -> void
AndroidX.Fragment.App.FragmentManager.BackStackChangeStartedEventArgs.Fragment.get -> AndroidX.Fragment.App.Fragment!
AndroidX.Fragment.App.FragmentManager.BackStackChangeStartedEventArgs.Pop.get -> bool
AndroidX.Fragment.App.FragmentManager.BackStackChanged -> System.EventHandler!
AndroidX.Fragment.App.FragmentManager.ClearFragmentResult(string! requestKey) -> void
AndroidX.Fragment.App.FragmentManager.ClearFragmentResultListener(string! requestKey) -> void
AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks
AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks.FragmentLifecycleCallbacks() -> void
AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks.FragmentLifecycleCallbacks(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Fragment.App.FragmentManager.FragmentManager() -> void
AndroidX.Fragment.App.FragmentManager.FragmentManager(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Fragment.App.FragmentManager.FragmentOnAttach -> System.EventHandler<AndroidX.Fragment.App.FragmentOnAttachEventArgs!>!
AndroidX.Fragment.App.FragmentManager.IBackStackEntry
AndroidX.Fragment.App.FragmentManager.IBackStackEntry.BreadCrumbShortTitleFormatted.get -> Java.Lang.ICharSequence?
AndroidX.Fragment.App.FragmentManager.IBackStackEntry.BreadCrumbShortTitleRes.get -> int
AndroidX.Fragment.App.FragmentManager.IBackStackEntry.BreadCrumbTitleFormatted.get -> Java.Lang.ICharSequence?
AndroidX.Fragment.App.FragmentManager.IBackStackEntry.BreadCrumbTitleRes.get -> int
AndroidX.Fragment.App.FragmentManager.IBackStackEntry.Id.get -> int
AndroidX.Fragment.App.FragmentManager.IBackStackEntry.Name.get -> string?
AndroidX.Fragment.App.FragmentManager.IOnBackStackChangedListener
AndroidX.Fragment.App.FragmentManager.IOnBackStackChangedListener.OnBackStackChangeCancelled() -> void
AndroidX.Fragment.App.FragmentManager.IOnBackStackChangedListener.OnBackStackChangeCommitted(AndroidX.Fragment.App.Fragment! fragment, bool pop) -> void
AndroidX.Fragment.App.FragmentManager.IOnBackStackChangedListener.OnBackStackChangeProgressed(AndroidX.Activity.BackEventCompat! backEventCompat) -> void
AndroidX.Fragment.App.FragmentManager.IOnBackStackChangedListener.OnBackStackChangeStarted(AndroidX.Fragment.App.Fragment! fragment, bool pop) -> void
AndroidX.Fragment.App.FragmentManager.IOnBackStackChangedListener.OnBackStackChanged() -> void
AndroidX.Fragment.App.FragmentManager.OnContainerAvailable(AndroidX.Fragment.App.FragmentContainerView! container) -> void
AndroidX.Fragment.App.FragmentManager.SetFragmentResult(string! requestKey, Android.OS.Bundle! result) -> void
AndroidX.Fragment.App.FragmentManager.SetFragmentResultListener(string! requestKey, AndroidX.Lifecycle.ILifecycleOwner! lifecycleOwner, AndroidX.Fragment.App.IFragmentResultListener! listener) -> void
AndroidX.Fragment.App.FragmentManagerNonConfig
AndroidX.Fragment.App.FragmentManagerNonConfig.FragmentManagerNonConfig(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Fragment.App.FragmentOnAttachEventArgs
AndroidX.Fragment.App.FragmentOnAttachEventArgs.FragmentOnAttachEventArgs(AndroidX.Fragment.App.FragmentManager! p0, AndroidX.Fragment.App.Fragment! p1) -> void
AndroidX.Fragment.App.FragmentOnAttachEventArgs.P0.get -> AndroidX.Fragment.App.FragmentManager!
AndroidX.Fragment.App.FragmentOnAttachEventArgs.P1.get -> AndroidX.Fragment.App.Fragment!
AndroidX.Fragment.App.FragmentPagerAdapter
AndroidX.Fragment.App.FragmentPagerAdapter.FragmentPagerAdapter(AndroidX.Fragment.App.FragmentManager! fm) -> void
AndroidX.Fragment.App.FragmentPagerAdapter.FragmentPagerAdapter(AndroidX.Fragment.App.FragmentManager! fm, int behavior) -> void
AndroidX.Fragment.App.FragmentPagerAdapter.FragmentPagerAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Fragment.App.FragmentResultEventArgs
AndroidX.Fragment.App.FragmentResultEventArgs.FragmentResultEventArgs(string! p0, Android.OS.Bundle! p1) -> void
AndroidX.Fragment.App.FragmentResultEventArgs.P0.get -> string!
AndroidX.Fragment.App.FragmentResultEventArgs.P1.get -> Android.OS.Bundle!
AndroidX.Fragment.App.FragmentStatePagerAdapter
AndroidX.Fragment.App.FragmentStatePagerAdapter.FragmentStatePagerAdapter(AndroidX.Fragment.App.FragmentManager! fm) -> void
AndroidX.Fragment.App.FragmentStatePagerAdapter.FragmentStatePagerAdapter(AndroidX.Fragment.App.FragmentManager! fm, int behavior) -> void
AndroidX.Fragment.App.FragmentStatePagerAdapter.FragmentStatePagerAdapter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Fragment.App.FragmentTabHost
AndroidX.Fragment.App.FragmentTabHost.FragmentTabHost(Android.Content.Context! context) -> void
AndroidX.Fragment.App.FragmentTabHost.FragmentTabHost(Android.Content.Context! context, Android.Util.IAttributeSet? attrs) -> void
AndroidX.Fragment.App.FragmentTabHost.FragmentTabHost(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Fragment.App.FragmentTransaction
AndroidX.Fragment.App.FragmentTransaction.Add(Android.Views.ViewGroup! container, AndroidX.Fragment.App.Fragment! fragment, string? tag) -> AndroidX.Fragment.App.FragmentTransaction!
AndroidX.Fragment.App.FragmentTransaction.Add(Java.Lang.Class! fragmentClass, Android.OS.Bundle? args, string? tag) -> AndroidX.Fragment.App.FragmentTransaction!
AndroidX.Fragment.App.FragmentTransaction.Add(int containerViewId, Java.Lang.Class! fragmentClass, Android.OS.Bundle? args) -> AndroidX.Fragment.App.FragmentTransaction!
AndroidX.Fragment.App.FragmentTransaction.Add(int containerViewId, Java.Lang.Class! fragmentClass, Android.OS.Bundle? args, string? tag) -> AndroidX.Fragment.App.FragmentTransaction!
AndroidX.Fragment.App.FragmentTransaction.FragmentTransaction() -> void
AndroidX.Fragment.App.FragmentTransaction.FragmentTransaction(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Fragment.App.FragmentTransaction.Replace(int containerViewId, Java.Lang.Class! fragmentClass, Android.OS.Bundle? args) -> AndroidX.Fragment.App.FragmentTransaction!
AndroidX.Fragment.App.FragmentTransaction.Replace(int containerViewId, Java.Lang.Class! fragmentClass, Android.OS.Bundle? args, string? tag) -> AndroidX.Fragment.App.FragmentTransaction!
AndroidX.Fragment.App.FragmentTransaction.SetBreadCrumbShortTitle(string? text) -> AndroidX.Fragment.App.FragmentTransaction!
AndroidX.Fragment.App.FragmentTransaction.SetBreadCrumbTitle(string? text) -> AndroidX.Fragment.App.FragmentTransaction!
AndroidX.Fragment.App.FragmentTransitionImpl
AndroidX.Fragment.App.FragmentTransitionImpl.FragmentTransitionImpl() -> void
AndroidX.Fragment.App.FragmentTransitionImpl.FragmentTransitionImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Fragment.App.IFragmentOnAttachListener
AndroidX.Fragment.App.IFragmentOnAttachListener.OnAttachFragment(AndroidX.Fragment.App.FragmentManager! p0, AndroidX.Fragment.App.Fragment! p1) -> void
AndroidX.Fragment.App.IFragmentResultListener
AndroidX.Fragment.App.IFragmentResultListener.OnFragmentResult(string! p0, Android.OS.Bundle! p1) -> void
AndroidX.Fragment.App.IFragmentResultOwner
AndroidX.Fragment.App.IFragmentResultOwner.ClearFragmentResult(string! p0) -> void
AndroidX.Fragment.App.IFragmentResultOwner.ClearFragmentResultListener(string! p0) -> void
AndroidX.Fragment.App.IFragmentResultOwner.SetFragmentResult(string! p0, Android.OS.Bundle! p1) -> void
AndroidX.Fragment.App.IFragmentResultOwner.SetFragmentResultListener(string! p0, AndroidX.Lifecycle.ILifecycleOwner! p1, AndroidX.Fragment.App.IFragmentResultListener! p2) -> void
AndroidX.Fragment.App.IPredictiveBackControl
AndroidX.Fragment.App.ListFragment
AndroidX.Fragment.App.ListFragment.ListFragment() -> void
AndroidX.Fragment.App.ListFragment.ListFragment(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Fragment.App.ListFragment.RequireListAdapter() -> Android.Widget.IListAdapter!
AndroidX.Fragment.App.ListFragment.SetEmptyText(string? text) -> void
AndroidX.Fragment.App.PredictiveBackControlAttribute
AndroidX.Fragment.App.PredictiveBackControlAttribute.PredictiveBackControlAttribute() -> void
AndroidX.Fragment.App.StrictMode.FragmentReuseViolation
AndroidX.Fragment.App.StrictMode.FragmentReuseViolation.PreviousFragmentId.get -> string!
AndroidX.Fragment.App.StrictMode.FragmentStrictMode
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.DefaultPolicy.get -> AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy!
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.DefaultPolicy.set -> void
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.IOnViolationListener
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.IOnViolationListener.OnViolation(AndroidX.Fragment.App.StrictMode.Violation! violation) -> void
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.OnPolicyViolation(AndroidX.Fragment.App.StrictMode.Violation! violation) -> void
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder.AllowViolation(Java.Lang.Class! fragmentClass, Java.Lang.Class! violationClass) -> AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder!
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder.AllowViolation(string! fragmentClass, Java.Lang.Class! violationClass) -> AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder!
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder.Build() -> AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy!
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder.Builder() -> void
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder.DetectFragmentReuse() -> AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder!
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder.DetectFragmentTagUsage() -> AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder!
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder.DetectRetainInstanceUsage() -> AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder!
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder.DetectSetUserVisibleHint() -> AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder!
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder.DetectTargetFragmentUsage() -> AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder!
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder.DetectWrongFragmentContainer() -> AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder!
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder.DetectWrongNestedHierarchy() -> AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder!
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder.PenaltyDeath() -> AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder!
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder.PenaltyListener(AndroidX.Fragment.App.StrictMode.FragmentStrictMode.IOnViolationListener! listener) -> AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder!
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder.PenaltyLog() -> AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder!
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.ViolationEventArgs
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.ViolationEventArgs.Violation.get -> AndroidX.Fragment.App.StrictMode.Violation!
AndroidX.Fragment.App.StrictMode.FragmentStrictMode.ViolationEventArgs.ViolationEventArgs(AndroidX.Fragment.App.StrictMode.Violation! violation) -> void
AndroidX.Fragment.App.StrictMode.FragmentTagUsageViolation
AndroidX.Fragment.App.StrictMode.FragmentTagUsageViolation.ParentContainer.get -> Android.Views.ViewGroup?
AndroidX.Fragment.App.StrictMode.GetRetainInstanceUsageViolation
AndroidX.Fragment.App.StrictMode.GetTargetFragmentRequestCodeUsageViolation
AndroidX.Fragment.App.StrictMode.GetTargetFragmentUsageViolation
AndroidX.Fragment.App.StrictMode.RetainInstanceUsageViolation
AndroidX.Fragment.App.StrictMode.RetainInstanceUsageViolation.RetainInstanceUsageViolation(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Fragment.App.StrictMode.SetRetainInstanceUsageViolation
AndroidX.Fragment.App.StrictMode.SetTargetFragmentUsageViolation
AndroidX.Fragment.App.StrictMode.SetTargetFragmentUsageViolation.RequestCode.get -> int
AndroidX.Fragment.App.StrictMode.SetTargetFragmentUsageViolation.TargetFragment.get -> AndroidX.Fragment.App.Fragment!
AndroidX.Fragment.App.StrictMode.SetUserVisibleHintViolation
AndroidX.Fragment.App.StrictMode.SetUserVisibleHintViolation.IsVisibleToUser.get -> bool
AndroidX.Fragment.App.StrictMode.TargetFragmentUsageViolation
AndroidX.Fragment.App.StrictMode.TargetFragmentUsageViolation.TargetFragmentUsageViolation(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Fragment.App.StrictMode.Violation
AndroidX.Fragment.App.StrictMode.Violation.Fragment.get -> AndroidX.Fragment.App.Fragment!
AndroidX.Fragment.App.StrictMode.Violation.Violation(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Fragment.App.StrictMode.WrongFragmentContainerViolation
AndroidX.Fragment.App.StrictMode.WrongFragmentContainerViolation.Container.get -> Android.Views.ViewGroup!
AndroidX.Fragment.App.StrictMode.WrongNestedHierarchyViolation
AndroidX.Fragment.App.StrictMode.WrongNestedHierarchyViolation.ContainerId.get -> int
AndroidX.Fragment.App.StrictMode.WrongNestedHierarchyViolation.ExpectedParentFragment.get -> AndroidX.Fragment.App.Fragment!
abstract AndroidX.Fragment.App.FragmentContainer.OnFindViewById(int id) -> Android.Views.View?
abstract AndroidX.Fragment.App.FragmentContainer.OnHasView() -> bool
abstract AndroidX.Fragment.App.FragmentHostCallback.OnGetHost() -> Java.Lang.Object?
abstract AndroidX.Fragment.App.FragmentPagerAdapter.GetItem(int position) -> AndroidX.Fragment.App.Fragment!
abstract AndroidX.Fragment.App.FragmentStatePagerAdapter.GetItem(int position) -> AndroidX.Fragment.App.Fragment!
abstract AndroidX.Fragment.App.FragmentTransaction.Commit() -> int
abstract AndroidX.Fragment.App.FragmentTransaction.CommitAllowingStateLoss() -> int
abstract AndroidX.Fragment.App.FragmentTransaction.CommitNow() -> void
abstract AndroidX.Fragment.App.FragmentTransaction.CommitNowAllowingStateLoss() -> void
abstract AndroidX.Fragment.App.FragmentTransitionImpl.AddTarget(Java.Lang.Object! p0, Android.Views.View! p1) -> void
abstract AndroidX.Fragment.App.FragmentTransitionImpl.AddTargets(Java.Lang.Object! p0, System.Collections.Generic.IList<Android.Views.View!>! p1) -> void
abstract AndroidX.Fragment.App.FragmentTransitionImpl.BeginDelayedTransition(Android.Views.ViewGroup! p0, Java.Lang.Object? p1) -> void
abstract AndroidX.Fragment.App.FragmentTransitionImpl.CanHandle(Java.Lang.Object! p0) -> bool
abstract AndroidX.Fragment.App.FragmentTransitionImpl.CloneTransition(Java.Lang.Object? p0) -> Java.Lang.Object?
abstract AndroidX.Fragment.App.FragmentTransitionImpl.MergeTransitionsInSequence(Java.Lang.Object? p0, Java.Lang.Object? p1, Java.Lang.Object? p2) -> Java.Lang.Object?
abstract AndroidX.Fragment.App.FragmentTransitionImpl.MergeTransitionsTogether(Java.Lang.Object? p0, Java.Lang.Object? p1, Java.Lang.Object? p2) -> Java.Lang.Object?
abstract AndroidX.Fragment.App.FragmentTransitionImpl.RemoveTarget(Java.Lang.Object! p0, Android.Views.View! p1) -> void
abstract AndroidX.Fragment.App.FragmentTransitionImpl.ReplaceTargets(Java.Lang.Object! p0, System.Collections.Generic.IList<Android.Views.View!>? p1, System.Collections.Generic.IList<Android.Views.View!>? p2) -> void
abstract AndroidX.Fragment.App.FragmentTransitionImpl.ScheduleHideFragmentView(Java.Lang.Object! p0, Android.Views.View! p1, System.Collections.Generic.IList<Android.Views.View!>! p2) -> void
abstract AndroidX.Fragment.App.FragmentTransitionImpl.ScheduleRemoveTargets(Java.Lang.Object! p0, Java.Lang.Object? p1, System.Collections.Generic.IList<Android.Views.View!>? p2, Java.Lang.Object? p3, System.Collections.Generic.IList<Android.Views.View!>? p4, Java.Lang.Object? p5, System.Collections.Generic.IList<Android.Views.View!>? p6) -> void
abstract AndroidX.Fragment.App.FragmentTransitionImpl.SetEpicenter(Java.Lang.Object! p0, Android.Graphics.Rect! p1) -> void
abstract AndroidX.Fragment.App.FragmentTransitionImpl.SetEpicenter(Java.Lang.Object! p0, Android.Views.View? p1) -> void
abstract AndroidX.Fragment.App.FragmentTransitionImpl.SetSharedElementTargets(Java.Lang.Object! p0, Android.Views.View! p1, System.Collections.Generic.IList<Android.Views.View!>! p2) -> void
abstract AndroidX.Fragment.App.FragmentTransitionImpl.SwapSharedElementTargets(Java.Lang.Object? p0, System.Collections.Generic.IList<Android.Views.View!>? p1, System.Collections.Generic.IList<Android.Views.View!>? p2) -> void
abstract AndroidX.Fragment.App.FragmentTransitionImpl.WrapTransitionInSet(Java.Lang.Object? p0) -> Java.Lang.Object?
const AndroidX.Fragment.App.DialogFragment.StyleNoFrame = 2 -> int
const AndroidX.Fragment.App.DialogFragment.StyleNoInput = 3 -> int
const AndroidX.Fragment.App.DialogFragment.StyleNoTitle = 1 -> int
const AndroidX.Fragment.App.DialogFragment.StyleNormal = 0 -> int
const AndroidX.Fragment.App.FragmentManager.PopBackStackInclusive = 1 -> int
const AndroidX.Fragment.App.FragmentManager.Tag = "FragmentManager" -> string!
const AndroidX.Fragment.App.FragmentPagerAdapter.BehaviorResumeOnlyCurrentFragment = 1 -> int
const AndroidX.Fragment.App.FragmentPagerAdapter.BehaviorSetUserVisibleHint = 0 -> int
const AndroidX.Fragment.App.FragmentStatePagerAdapter.BehaviorResumeOnlyCurrentFragment = 1 -> int
const AndroidX.Fragment.App.FragmentStatePagerAdapter.BehaviorSetUserVisibleHint = 0 -> int
const AndroidX.Fragment.App.FragmentTransaction.TransitEnterMask = 4096 -> int
const AndroidX.Fragment.App.FragmentTransaction.TransitExitMask = 8192 -> int
const AndroidX.Fragment.App.FragmentTransaction.TransitFragmentClose = 8194 -> int
const AndroidX.Fragment.App.FragmentTransaction.TransitFragmentFade = 4099 -> int
const AndroidX.Fragment.App.FragmentTransaction.TransitFragmentMatchActivityClose = 8197 -> int
const AndroidX.Fragment.App.FragmentTransaction.TransitFragmentMatchActivityOpen = 4100 -> int
const AndroidX.Fragment.App.FragmentTransaction.TransitFragmentOpen = 4097 -> int
const AndroidX.Fragment.App.FragmentTransaction.TransitNone = 0 -> int
const AndroidX.Fragment.App.FragmentTransaction.TransitUnset = -1 -> int
override AndroidX.Fragment.App.BackStackRecord.Commit() -> int
override AndroidX.Fragment.App.BackStackRecord.CommitAllowingStateLoss() -> int
override AndroidX.Fragment.App.BackStackRecord.CommitNow() -> void
override AndroidX.Fragment.App.BackStackRecord.CommitNowAllowingStateLoss() -> void
override AndroidX.Fragment.App.BackStackRecord.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.DialogFragment.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.DialogFragment.ThresholdClass.get -> nint
override AndroidX.Fragment.App.DialogFragment.ThresholdType.get -> System.Type!
override AndroidX.Fragment.App.Fragment.InstantiationException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.Fragment.InstantiationException.ThresholdClass.get -> nint
override AndroidX.Fragment.App.Fragment.InstantiationException.ThresholdType.get -> System.Type!
override AndroidX.Fragment.App.Fragment.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.Fragment.SavedState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.Fragment.SavedState.ThresholdClass.get -> nint
override AndroidX.Fragment.App.Fragment.SavedState.ThresholdType.get -> System.Type!
override AndroidX.Fragment.App.Fragment.ThresholdClass.get -> nint
override AndroidX.Fragment.App.Fragment.ThresholdType.get -> System.Type!
override AndroidX.Fragment.App.FragmentActivity.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.FragmentActivity.Lifecycle.get -> AndroidX.Lifecycle.Lifecycle!
override AndroidX.Fragment.App.FragmentActivity.ThresholdClass.get -> nint
override AndroidX.Fragment.App.FragmentActivity.ThresholdType.get -> System.Type!
override AndroidX.Fragment.App.FragmentContainer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.FragmentContainer.ThresholdClass.get -> nint
override AndroidX.Fragment.App.FragmentContainer.ThresholdType.get -> System.Type!
override AndroidX.Fragment.App.FragmentContainerView.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.FragmentController.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.FragmentController.ThresholdClass.get -> nint
override AndroidX.Fragment.App.FragmentController.ThresholdType.get -> System.Type!
override AndroidX.Fragment.App.FragmentFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.FragmentFactory.ThresholdClass.get -> nint
override AndroidX.Fragment.App.FragmentFactory.ThresholdType.get -> System.Type!
override AndroidX.Fragment.App.FragmentHostCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.FragmentHostCallback.OnFindViewById(int id) -> Android.Views.View?
override AndroidX.Fragment.App.FragmentHostCallback.OnHasView() -> bool
override AndroidX.Fragment.App.FragmentHostCallback.ThresholdClass.get -> nint
override AndroidX.Fragment.App.FragmentHostCallback.ThresholdType.get -> System.Type!
override AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks.ThresholdClass.get -> nint
override AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks.ThresholdType.get -> System.Type!
override AndroidX.Fragment.App.FragmentManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.FragmentManager.ThresholdClass.get -> nint
override AndroidX.Fragment.App.FragmentManager.ThresholdType.get -> System.Type!
override AndroidX.Fragment.App.FragmentManagerNonConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.FragmentManagerNonConfig.ThresholdClass.get -> nint
override AndroidX.Fragment.App.FragmentManagerNonConfig.ThresholdType.get -> System.Type!
override AndroidX.Fragment.App.FragmentPagerAdapter.IsViewFromObject(Android.Views.View! view, Java.Lang.Object! object) -> bool
override AndroidX.Fragment.App.FragmentPagerAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.FragmentPagerAdapter.ThresholdClass.get -> nint
override AndroidX.Fragment.App.FragmentPagerAdapter.ThresholdType.get -> System.Type!
override AndroidX.Fragment.App.FragmentStatePagerAdapter.IsViewFromObject(Android.Views.View! view, Java.Lang.Object! object) -> bool
override AndroidX.Fragment.App.FragmentStatePagerAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.FragmentStatePagerAdapter.ThresholdClass.get -> nint
override AndroidX.Fragment.App.FragmentStatePagerAdapter.ThresholdType.get -> System.Type!
override AndroidX.Fragment.App.FragmentTabHost.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.FragmentTabHost.ThresholdClass.get -> nint
override AndroidX.Fragment.App.FragmentTabHost.ThresholdType.get -> System.Type!
override AndroidX.Fragment.App.FragmentTransaction.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.FragmentTransaction.ThresholdClass.get -> nint
override AndroidX.Fragment.App.FragmentTransaction.ThresholdType.get -> System.Type!
override AndroidX.Fragment.App.FragmentTransitionImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.FragmentTransitionImpl.ThresholdClass.get -> nint
override AndroidX.Fragment.App.FragmentTransitionImpl.ThresholdType.get -> System.Type!
override AndroidX.Fragment.App.ListFragment.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.ListFragment.ThresholdClass.get -> nint
override AndroidX.Fragment.App.ListFragment.ThresholdType.get -> System.Type!
override AndroidX.Fragment.App.StrictMode.FragmentReuseViolation.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.StrictMode.FragmentStrictMode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.StrictMode.FragmentTagUsageViolation.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.StrictMode.GetRetainInstanceUsageViolation.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.StrictMode.GetTargetFragmentRequestCodeUsageViolation.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.StrictMode.GetTargetFragmentUsageViolation.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.StrictMode.RetainInstanceUsageViolation.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.StrictMode.RetainInstanceUsageViolation.ThresholdClass.get -> nint
override AndroidX.Fragment.App.StrictMode.RetainInstanceUsageViolation.ThresholdType.get -> System.Type!
override AndroidX.Fragment.App.StrictMode.SetRetainInstanceUsageViolation.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.StrictMode.SetTargetFragmentUsageViolation.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.StrictMode.SetUserVisibleHintViolation.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.StrictMode.TargetFragmentUsageViolation.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.StrictMode.TargetFragmentUsageViolation.ThresholdClass.get -> nint
override AndroidX.Fragment.App.StrictMode.TargetFragmentUsageViolation.ThresholdType.get -> System.Type!
override AndroidX.Fragment.App.StrictMode.Violation.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.StrictMode.Violation.ThresholdClass.get -> nint
override AndroidX.Fragment.App.StrictMode.Violation.ThresholdType.get -> System.Type!
override AndroidX.Fragment.App.StrictMode.WrongFragmentContainerViolation.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Fragment.App.StrictMode.WrongNestedHierarchyViolation.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override sealed AndroidX.Fragment.App.Fragment.Equals(Java.Lang.Object? o) -> bool
override sealed AndroidX.Fragment.App.Fragment.GetHashCode() -> int
static AndroidX.Fragment.App.Fragment.Instantiate(Android.Content.Context! context, string! fname) -> AndroidX.Fragment.App.Fragment!
static AndroidX.Fragment.App.Fragment.Instantiate(Android.Content.Context! context, string! fname, Android.OS.Bundle? args) -> AndroidX.Fragment.App.Fragment!
static AndroidX.Fragment.App.Fragment.SavedState.Creator.get -> Android.OS.IParcelableCreator!
static AndroidX.Fragment.App.FragmentController.CreateController(AndroidX.Fragment.App.FragmentHostCallback! callbacks) -> AndroidX.Fragment.App.FragmentController!
static AndroidX.Fragment.App.FragmentFactory.LoadFragmentClass(Java.Lang.ClassLoader! classLoader, string! className) -> Java.Lang.Class!
static AndroidX.Fragment.App.FragmentManager.EnableDebugLogging(bool enabled) -> void
static AndroidX.Fragment.App.FragmentManager.EnablePredictiveBack(bool enabled) -> void
static AndroidX.Fragment.App.FragmentManager.FindFragment(Android.Views.View! view) -> Java.Lang.Object!
static AndroidX.Fragment.App.FragmentManager.FindFragmentManager(Android.Views.View! view) -> AndroidX.Fragment.App.FragmentManager!
static AndroidX.Fragment.App.FragmentManager.IsLoggingEnabled(int level) -> bool
static AndroidX.Fragment.App.FragmentTransitionImpl.BfsAddViewChildren(System.Collections.Generic.IList<Android.Views.View!>? views, Android.Views.View? startView) -> void
static AndroidX.Fragment.App.FragmentTransitionImpl.IsNullOrEmpty(System.Collections.IList? list) -> bool
static AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Instance.get -> AndroidX.Fragment.App.StrictMode.FragmentStrictMode!
static AndroidX.Fragment.App.StrictMode.FragmentStrictMode.OnFragmentReuse(AndroidX.Fragment.App.Fragment! fragment, string! previousFragmentId) -> void
static AndroidX.Fragment.App.StrictMode.FragmentStrictMode.OnFragmentTagUsage(AndroidX.Fragment.App.Fragment! fragment, Android.Views.ViewGroup? container) -> void
static AndroidX.Fragment.App.StrictMode.FragmentStrictMode.OnGetRetainInstanceUsage(AndroidX.Fragment.App.Fragment! fragment) -> void
static AndroidX.Fragment.App.StrictMode.FragmentStrictMode.OnGetTargetFragmentRequestCodeUsage(AndroidX.Fragment.App.Fragment! fragment) -> void
static AndroidX.Fragment.App.StrictMode.FragmentStrictMode.OnGetTargetFragmentUsage(AndroidX.Fragment.App.Fragment! fragment) -> void
static AndroidX.Fragment.App.StrictMode.FragmentStrictMode.OnSetRetainInstanceUsage(AndroidX.Fragment.App.Fragment! fragment) -> void
static AndroidX.Fragment.App.StrictMode.FragmentStrictMode.OnSetTargetFragmentUsage(AndroidX.Fragment.App.Fragment! violatingFragment, AndroidX.Fragment.App.Fragment! targetFragment, int requestCode) -> void
static AndroidX.Fragment.App.StrictMode.FragmentStrictMode.OnSetUserVisibleHint(AndroidX.Fragment.App.Fragment! fragment, bool isVisibleToUser) -> void
static AndroidX.Fragment.App.StrictMode.FragmentStrictMode.OnWrongFragmentContainer(AndroidX.Fragment.App.Fragment! fragment, Android.Views.ViewGroup! container) -> void
static AndroidX.Fragment.App.StrictMode.FragmentStrictMode.OnWrongNestedHierarchy(AndroidX.Fragment.App.Fragment! fragment, AndroidX.Fragment.App.Fragment! expectedParentFragment, int containerId) -> void
static AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy.Lax.get -> AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy!
virtual AndroidX.Fragment.App.DialogFragment.Cancelable.get -> bool
virtual AndroidX.Fragment.App.DialogFragment.Cancelable.set -> void
virtual AndroidX.Fragment.App.DialogFragment.Dialog.get -> Android.App.Dialog?
virtual AndroidX.Fragment.App.DialogFragment.Dismiss() -> void
virtual AndroidX.Fragment.App.DialogFragment.DismissAllowingStateLoss() -> void
virtual AndroidX.Fragment.App.DialogFragment.DismissNow() -> void
virtual AndroidX.Fragment.App.DialogFragment.OnCancel(Android.Content.IDialogInterface! dialog) -> void
virtual AndroidX.Fragment.App.DialogFragment.OnCreateDialog(Android.OS.Bundle? savedInstanceState) -> Android.App.Dialog!
virtual AndroidX.Fragment.App.DialogFragment.OnDismiss(Android.Content.IDialogInterface! dialog) -> void
virtual AndroidX.Fragment.App.DialogFragment.SetStyle(int style, int theme) -> void
virtual AndroidX.Fragment.App.DialogFragment.SetupDialog(Android.App.Dialog! dialog, int style) -> void
virtual AndroidX.Fragment.App.DialogFragment.Show(AndroidX.Fragment.App.FragmentManager! manager, string? tag) -> void
virtual AndroidX.Fragment.App.DialogFragment.Show(AndroidX.Fragment.App.FragmentTransaction! transaction, string? tag) -> int
virtual AndroidX.Fragment.App.DialogFragment.ShowNow(AndroidX.Fragment.App.FragmentManager! manager, string? tag) -> void
virtual AndroidX.Fragment.App.DialogFragment.ShowsDialog.get -> bool
virtual AndroidX.Fragment.App.DialogFragment.ShowsDialog.set -> void
virtual AndroidX.Fragment.App.DialogFragment.Theme.get -> int
virtual AndroidX.Fragment.App.Fragment.AllowEnterTransitionOverlap.get -> bool
virtual AndroidX.Fragment.App.Fragment.AllowEnterTransitionOverlap.set -> void
virtual AndroidX.Fragment.App.Fragment.AllowReturnTransitionOverlap.get -> bool
virtual AndroidX.Fragment.App.Fragment.AllowReturnTransitionOverlap.set -> void
virtual AndroidX.Fragment.App.Fragment.Context.get -> Android.Content.Context?
virtual AndroidX.Fragment.App.Fragment.DefaultViewModelCreationExtras.get -> AndroidX.Lifecycle.ViewModels.CreationExtras!
virtual AndroidX.Fragment.App.Fragment.DefaultViewModelProviderFactory.get -> AndroidX.Lifecycle.ViewModelProvider.IFactory!
virtual AndroidX.Fragment.App.Fragment.Dump(string! prefix, Java.IO.FileDescriptor? fd, Java.IO.PrintWriter! writer, string![]? args) -> void
virtual AndroidX.Fragment.App.Fragment.EnterTransition.get -> Java.Lang.Object?
virtual AndroidX.Fragment.App.Fragment.EnterTransition.set -> void
virtual AndroidX.Fragment.App.Fragment.ExitTransition.get -> Java.Lang.Object?
virtual AndroidX.Fragment.App.Fragment.ExitTransition.set -> void
virtual AndroidX.Fragment.App.Fragment.GetLayoutInflater(Android.OS.Bundle? savedFragmentState) -> Android.Views.LayoutInflater!
virtual AndroidX.Fragment.App.Fragment.Lifecycle.get -> AndroidX.Lifecycle.Lifecycle!
virtual AndroidX.Fragment.App.Fragment.LoaderManager.get -> AndroidX.Loader.App.LoaderManager!
virtual AndroidX.Fragment.App.Fragment.OnActivityCreated(Android.OS.Bundle? savedInstanceState) -> void
virtual AndroidX.Fragment.App.Fragment.OnActivityResult(int requestCode, int resultCode, Android.Content.Intent? data) -> void
virtual AndroidX.Fragment.App.Fragment.OnAttach(Android.App.Activity! activity) -> void
virtual AndroidX.Fragment.App.Fragment.OnAttach(Android.Content.Context! context) -> void
virtual AndroidX.Fragment.App.Fragment.OnAttachFragment(AndroidX.Fragment.App.Fragment! childFragment) -> void
virtual AndroidX.Fragment.App.Fragment.OnConfigurationChanged(Android.Content.Res.Configuration! newConfig) -> void
virtual AndroidX.Fragment.App.Fragment.OnContextItemSelected(Android.Views.IMenuItem! item) -> bool
virtual AndroidX.Fragment.App.Fragment.OnCreate(Android.OS.Bundle? savedInstanceState) -> void
virtual AndroidX.Fragment.App.Fragment.OnCreateAnimation(int transit, bool enter, int nextAnim) -> Android.Views.Animations.Animation?
virtual AndroidX.Fragment.App.Fragment.OnCreateAnimator(int transit, bool enter, int nextAnim) -> Android.Animation.Animator?
virtual AndroidX.Fragment.App.Fragment.OnCreateContextMenu(Android.Views.IContextMenu! menu, Android.Views.View! v, Android.Views.IContextMenuContextMenuInfo? menuInfo) -> void
virtual AndroidX.Fragment.App.Fragment.OnCreateOptionsMenu(Android.Views.IMenu! menu, Android.Views.MenuInflater! inflater) -> void
virtual AndroidX.Fragment.App.Fragment.OnCreateView(Android.Views.LayoutInflater! inflater, Android.Views.ViewGroup? container, Android.OS.Bundle? savedInstanceState) -> Android.Views.View?
virtual AndroidX.Fragment.App.Fragment.OnDestroy() -> void
virtual AndroidX.Fragment.App.Fragment.OnDestroyOptionsMenu() -> void
virtual AndroidX.Fragment.App.Fragment.OnDestroyView() -> void
virtual AndroidX.Fragment.App.Fragment.OnDetach() -> void
virtual AndroidX.Fragment.App.Fragment.OnGetLayoutInflater(Android.OS.Bundle? savedInstanceState) -> Android.Views.LayoutInflater!
virtual AndroidX.Fragment.App.Fragment.OnHiddenChanged(bool hidden) -> void
virtual AndroidX.Fragment.App.Fragment.OnInflate(Android.App.Activity! activity, Android.Util.IAttributeSet! attrs, Android.OS.Bundle? savedInstanceState) -> void
virtual AndroidX.Fragment.App.Fragment.OnInflate(Android.Content.Context! context, Android.Util.IAttributeSet! attrs, Android.OS.Bundle? savedInstanceState) -> void
virtual AndroidX.Fragment.App.Fragment.OnLowMemory() -> void
virtual AndroidX.Fragment.App.Fragment.OnMultiWindowModeChanged(bool isInMultiWindowMode) -> void
virtual AndroidX.Fragment.App.Fragment.OnOptionsItemSelected(Android.Views.IMenuItem! item) -> bool
virtual AndroidX.Fragment.App.Fragment.OnOptionsMenuClosed(Android.Views.IMenu! menu) -> void
virtual AndroidX.Fragment.App.Fragment.OnPause() -> void
virtual AndroidX.Fragment.App.Fragment.OnPictureInPictureModeChanged(bool isInPictureInPictureMode) -> void
virtual AndroidX.Fragment.App.Fragment.OnPrepareOptionsMenu(Android.Views.IMenu! menu) -> void
virtual AndroidX.Fragment.App.Fragment.OnPrimaryNavigationFragmentChanged(bool isPrimaryNavigationFragment) -> void
virtual AndroidX.Fragment.App.Fragment.OnRequestPermissionsResult(int requestCode, string![]! permissions, Android.Content.PM.Permission[]! grantResults) -> void
virtual AndroidX.Fragment.App.Fragment.OnResume() -> void
virtual AndroidX.Fragment.App.Fragment.OnSaveInstanceState(Android.OS.Bundle! outState) -> void
virtual AndroidX.Fragment.App.Fragment.OnStart() -> void
virtual AndroidX.Fragment.App.Fragment.OnStop() -> void
virtual AndroidX.Fragment.App.Fragment.OnViewCreated(Android.Views.View! view, Android.OS.Bundle? savedInstanceState) -> void
virtual AndroidX.Fragment.App.Fragment.OnViewStateRestored(Android.OS.Bundle? savedInstanceState) -> void
virtual AndroidX.Fragment.App.Fragment.PostponeEnterTransition() -> void
virtual AndroidX.Fragment.App.Fragment.ReenterTransition.get -> Java.Lang.Object?
virtual AndroidX.Fragment.App.Fragment.ReenterTransition.set -> void
virtual AndroidX.Fragment.App.Fragment.RegisterForContextMenu(Android.Views.View! view) -> void
virtual AndroidX.Fragment.App.Fragment.ReturnTransition.get -> Java.Lang.Object?
virtual AndroidX.Fragment.App.Fragment.ReturnTransition.set -> void
virtual AndroidX.Fragment.App.Fragment.SavedState.DescribeContents() -> int
virtual AndroidX.Fragment.App.Fragment.SavedState.WriteToParcel(Android.OS.Parcel! dest, Android.OS.ParcelableWriteFlags flags) -> void
virtual AndroidX.Fragment.App.Fragment.SetEnterSharedElementCallback(AndroidX.Core.App.SharedElementCallback? callback) -> void
virtual AndroidX.Fragment.App.Fragment.SetExitSharedElementCallback(AndroidX.Core.App.SharedElementCallback? callback) -> void
virtual AndroidX.Fragment.App.Fragment.SetInitialSavedState(AndroidX.Fragment.App.Fragment.SavedState? state) -> void
virtual AndroidX.Fragment.App.Fragment.SetMenuVisibility(bool menuVisible) -> void
virtual AndroidX.Fragment.App.Fragment.SetTargetFragment(AndroidX.Fragment.App.Fragment? fragment, int requestCode) -> void
virtual AndroidX.Fragment.App.Fragment.SharedElementEnterTransition.get -> Java.Lang.Object?
virtual AndroidX.Fragment.App.Fragment.SharedElementEnterTransition.set -> void
virtual AndroidX.Fragment.App.Fragment.SharedElementReturnTransition.get -> Java.Lang.Object?
virtual AndroidX.Fragment.App.Fragment.SharedElementReturnTransition.set -> void
virtual AndroidX.Fragment.App.Fragment.ShouldShowRequestPermissionRationale(string! permission) -> bool
virtual AndroidX.Fragment.App.Fragment.StartActivity(Android.Content.Intent! intent) -> void
virtual AndroidX.Fragment.App.Fragment.StartActivity(Android.Content.Intent! intent, Android.OS.Bundle? options) -> void
virtual AndroidX.Fragment.App.Fragment.StartActivityForResult(Android.Content.Intent! intent, int requestCode) -> void
virtual AndroidX.Fragment.App.Fragment.StartActivityForResult(Android.Content.Intent! intent, int requestCode, Android.OS.Bundle? options) -> void
virtual AndroidX.Fragment.App.Fragment.StartIntentSenderForResult(Android.Content.IntentSender! intent, int requestCode, Android.Content.Intent? fillInIntent, int flagsMask, int flagsValues, int extraFlags, Android.OS.Bundle? options) -> void
virtual AndroidX.Fragment.App.Fragment.StartPostponedEnterTransition() -> void
virtual AndroidX.Fragment.App.Fragment.UnregisterForContextMenu(Android.Views.View! view) -> void
virtual AndroidX.Fragment.App.Fragment.UserVisibleHint.get -> bool
virtual AndroidX.Fragment.App.Fragment.UserVisibleHint.set -> void
virtual AndroidX.Fragment.App.Fragment.View.get -> Android.Views.View?
virtual AndroidX.Fragment.App.Fragment.ViewLifecycleOwner.get -> AndroidX.Lifecycle.ILifecycleOwner!
virtual AndroidX.Fragment.App.Fragment.ViewLifecycleOwnerLiveData.get -> AndroidX.Lifecycle.LiveData!
virtual AndroidX.Fragment.App.Fragment.ViewModelStore.get -> AndroidX.Lifecycle.ViewModelStore!
virtual AndroidX.Fragment.App.FragmentActivity.OnAttachFragment(AndroidX.Fragment.App.Fragment! fragment) -> void
virtual AndroidX.Fragment.App.FragmentActivity.OnResumeFragments() -> void
virtual AndroidX.Fragment.App.FragmentActivity.SetEnterSharedElementCallback(AndroidX.Core.App.SharedElementCallback? callback) -> void
virtual AndroidX.Fragment.App.FragmentActivity.SetExitSharedElementCallback(AndroidX.Core.App.SharedElementCallback? listener) -> void
virtual AndroidX.Fragment.App.FragmentActivity.StartActivityFromFragment(AndroidX.Fragment.App.Fragment! fragment, Android.Content.Intent! intent, int requestCode) -> void
virtual AndroidX.Fragment.App.FragmentActivity.StartActivityFromFragment(AndroidX.Fragment.App.Fragment! fragment, Android.Content.Intent! intent, int requestCode, Android.OS.Bundle? options) -> void
virtual AndroidX.Fragment.App.FragmentActivity.StartIntentSenderFromFragment(AndroidX.Fragment.App.Fragment! fragment, Android.Content.IntentSender! intent, int requestCode, Android.Content.Intent? fillInIntent, int flagsMask, int flagsValues, int extraFlags, Android.OS.Bundle? options) -> void
virtual AndroidX.Fragment.App.FragmentActivity.SupportFinishAfterTransition() -> void
virtual AndroidX.Fragment.App.FragmentActivity.SupportFragmentManager.get -> AndroidX.Fragment.App.FragmentManager!
virtual AndroidX.Fragment.App.FragmentActivity.SupportInvalidateOptionsMenu() -> void
virtual AndroidX.Fragment.App.FragmentActivity.SupportLoaderManager.get -> AndroidX.Loader.App.LoaderManager!
virtual AndroidX.Fragment.App.FragmentActivity.SupportPostponeEnterTransition() -> void
virtual AndroidX.Fragment.App.FragmentActivity.SupportStartPostponedEnterTransition() -> void
virtual AndroidX.Fragment.App.FragmentContainer.Instantiate(Android.Content.Context! context, string! className, Android.OS.Bundle? arguments) -> AndroidX.Fragment.App.Fragment!
virtual AndroidX.Fragment.App.FragmentController.ActiveFragmentsCount.get -> int
virtual AndroidX.Fragment.App.FragmentController.AttachHost(AndroidX.Fragment.App.Fragment? parent) -> void
virtual AndroidX.Fragment.App.FragmentController.DispatchActivityCreated() -> void
virtual AndroidX.Fragment.App.FragmentController.DispatchConfigurationChanged(Android.Content.Res.Configuration! newConfig) -> void
virtual AndroidX.Fragment.App.FragmentController.DispatchContextItemSelected(Android.Views.IMenuItem! item) -> bool
virtual AndroidX.Fragment.App.FragmentController.DispatchCreate() -> void
virtual AndroidX.Fragment.App.FragmentController.DispatchCreateOptionsMenu(Android.Views.IMenu! menu, Android.Views.MenuInflater! inflater) -> bool
virtual AndroidX.Fragment.App.FragmentController.DispatchDestroy() -> void
virtual AndroidX.Fragment.App.FragmentController.DispatchDestroyView() -> void
virtual AndroidX.Fragment.App.FragmentController.DispatchLowMemory() -> void
virtual AndroidX.Fragment.App.FragmentController.DispatchMultiWindowModeChanged(bool isInMultiWindowMode) -> void
virtual AndroidX.Fragment.App.FragmentController.DispatchOptionsItemSelected(Android.Views.IMenuItem! item) -> bool
virtual AndroidX.Fragment.App.FragmentController.DispatchOptionsMenuClosed(Android.Views.IMenu! menu) -> void
virtual AndroidX.Fragment.App.FragmentController.DispatchPause() -> void
virtual AndroidX.Fragment.App.FragmentController.DispatchPictureInPictureModeChanged(bool isInPictureInPictureMode) -> void
virtual AndroidX.Fragment.App.FragmentController.DispatchPrepareOptionsMenu(Android.Views.IMenu! menu) -> bool
virtual AndroidX.Fragment.App.FragmentController.DispatchReallyStop() -> void
virtual AndroidX.Fragment.App.FragmentController.DispatchResume() -> void
virtual AndroidX.Fragment.App.FragmentController.DispatchStart() -> void
virtual AndroidX.Fragment.App.FragmentController.DispatchStop() -> void
virtual AndroidX.Fragment.App.FragmentController.DoLoaderDestroy() -> void
virtual AndroidX.Fragment.App.FragmentController.DoLoaderRetain() -> void
virtual AndroidX.Fragment.App.FragmentController.DoLoaderStart() -> void
virtual AndroidX.Fragment.App.FragmentController.DoLoaderStop(bool retain) -> void
virtual AndroidX.Fragment.App.FragmentController.DumpLoaders(string! prefix, Java.IO.FileDescriptor? fd, Java.IO.PrintWriter! writer, string![]? args) -> void
virtual AndroidX.Fragment.App.FragmentController.ExecPendingActions() -> bool
virtual AndroidX.Fragment.App.FragmentController.FindFragmentByWho(string! who) -> AndroidX.Fragment.App.Fragment?
virtual AndroidX.Fragment.App.FragmentController.GetActiveFragments(System.Collections.Generic.IList<AndroidX.Fragment.App.Fragment!>? actives) -> System.Collections.Generic.IList<AndroidX.Fragment.App.Fragment!>!
virtual AndroidX.Fragment.App.FragmentController.NoteStateNotSaved() -> void
virtual AndroidX.Fragment.App.FragmentController.OnCreateView(Android.Views.View? parent, string! name, Android.Content.Context! context, Android.Util.IAttributeSet! attrs) -> Android.Views.View?
virtual AndroidX.Fragment.App.FragmentController.ReportLoaderStart() -> void
virtual AndroidX.Fragment.App.FragmentController.RestoreAllState(Android.OS.IParcelable? state, AndroidX.Fragment.App.FragmentManagerNonConfig? nonConfig) -> void
virtual AndroidX.Fragment.App.FragmentController.RestoreAllState(Android.OS.IParcelable? state, System.Collections.Generic.IList<AndroidX.Fragment.App.Fragment!>? nonConfigList) -> void
virtual AndroidX.Fragment.App.FragmentController.RestoreLoaderNonConfig(AndroidX.Collection.SimpleArrayMap? loaderManagers) -> void
virtual AndroidX.Fragment.App.FragmentController.RestoreSaveState(Android.OS.IParcelable? state) -> void
virtual AndroidX.Fragment.App.FragmentController.RetainLoaderNonConfig() -> AndroidX.Collection.SimpleArrayMap?
virtual AndroidX.Fragment.App.FragmentController.RetainNestedNonConfig() -> AndroidX.Fragment.App.FragmentManagerNonConfig?
virtual AndroidX.Fragment.App.FragmentController.RetainNonConfig() -> System.Collections.Generic.IList<AndroidX.Fragment.App.Fragment!>?
virtual AndroidX.Fragment.App.FragmentController.SaveAllState() -> Android.OS.IParcelable?
virtual AndroidX.Fragment.App.FragmentController.SupportFragmentManager.get -> AndroidX.Fragment.App.FragmentManager!
virtual AndroidX.Fragment.App.FragmentController.SupportLoaderManager.get -> AndroidX.Loader.App.LoaderManager?
virtual AndroidX.Fragment.App.FragmentFactory.Instantiate(Java.Lang.ClassLoader! classLoader, string! className) -> AndroidX.Fragment.App.Fragment!
virtual AndroidX.Fragment.App.FragmentHostCallback.OnDump(string! prefix, Java.IO.FileDescriptor? fd, Java.IO.PrintWriter! writer, string![]? args) -> void
virtual AndroidX.Fragment.App.FragmentHostCallback.OnGetLayoutInflater() -> Android.Views.LayoutInflater!
virtual AndroidX.Fragment.App.FragmentHostCallback.OnGetWindowAnimations() -> int
virtual AndroidX.Fragment.App.FragmentHostCallback.OnHasWindowAnimations() -> bool
virtual AndroidX.Fragment.App.FragmentHostCallback.OnRequestPermissionsFromFragment(AndroidX.Fragment.App.Fragment! fragment, string![]! permissions, int requestCode) -> void
virtual AndroidX.Fragment.App.FragmentHostCallback.OnShouldSaveFragmentState(AndroidX.Fragment.App.Fragment! fragment) -> bool
virtual AndroidX.Fragment.App.FragmentHostCallback.OnShouldShowRequestPermissionRationale(string! permission) -> bool
virtual AndroidX.Fragment.App.FragmentHostCallback.OnStartActivityFromFragment(AndroidX.Fragment.App.Fragment! fragment, Android.Content.Intent! intent, int requestCode) -> void
virtual AndroidX.Fragment.App.FragmentHostCallback.OnStartActivityFromFragment(AndroidX.Fragment.App.Fragment! fragment, Android.Content.Intent! intent, int requestCode, Android.OS.Bundle? options) -> void
virtual AndroidX.Fragment.App.FragmentHostCallback.OnStartIntentSenderFromFragment(AndroidX.Fragment.App.Fragment! fragment, Android.Content.IntentSender! intent, int requestCode, Android.Content.Intent? fillInIntent, int flagsMask, int flagsValues, int extraFlags, Android.OS.Bundle? options) -> void
virtual AndroidX.Fragment.App.FragmentHostCallback.OnSupportInvalidateOptionsMenu() -> void
virtual AndroidX.Fragment.App.FragmentManager.AddFragmentOnAttachListener(AndroidX.Fragment.App.IFragmentOnAttachListener! listener) -> void
virtual AndroidX.Fragment.App.FragmentManager.AddOnBackStackChangedListener(AndroidX.Fragment.App.FragmentManager.IOnBackStackChangedListener! listener) -> void
virtual AndroidX.Fragment.App.FragmentManager.BackStackEntryCount.get -> int
virtual AndroidX.Fragment.App.FragmentManager.BeginTransaction() -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentManager.ClearBackStack(string! name) -> void
virtual AndroidX.Fragment.App.FragmentManager.Dump(string! prefix, Java.IO.FileDescriptor? fd, Java.IO.PrintWriter! writer, string![]? args) -> void
virtual AndroidX.Fragment.App.FragmentManager.ExecutePendingTransactions() -> bool
virtual AndroidX.Fragment.App.FragmentManager.FindFragmentById(int id) -> AndroidX.Fragment.App.Fragment?
virtual AndroidX.Fragment.App.FragmentManager.FindFragmentByTag(string? tag) -> AndroidX.Fragment.App.Fragment?
virtual AndroidX.Fragment.App.FragmentManager.FragmentFactory.get -> AndroidX.Fragment.App.FragmentFactory!
virtual AndroidX.Fragment.App.FragmentManager.FragmentFactory.set -> void
virtual AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks.OnFragmentActivityCreated(AndroidX.Fragment.App.FragmentManager! fm, AndroidX.Fragment.App.Fragment! f, Android.OS.Bundle? savedInstanceState) -> void
virtual AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks.OnFragmentAttached(AndroidX.Fragment.App.FragmentManager! fm, AndroidX.Fragment.App.Fragment! f, Android.Content.Context! context) -> void
virtual AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks.OnFragmentCreated(AndroidX.Fragment.App.FragmentManager! fm, AndroidX.Fragment.App.Fragment! f, Android.OS.Bundle? savedInstanceState) -> void
virtual AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks.OnFragmentDestroyed(AndroidX.Fragment.App.FragmentManager! fm, AndroidX.Fragment.App.Fragment! f) -> void
virtual AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks.OnFragmentDetached(AndroidX.Fragment.App.FragmentManager! fm, AndroidX.Fragment.App.Fragment! f) -> void
virtual AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks.OnFragmentPaused(AndroidX.Fragment.App.FragmentManager! fm, AndroidX.Fragment.App.Fragment! f) -> void
virtual AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks.OnFragmentPreAttached(AndroidX.Fragment.App.FragmentManager! fm, AndroidX.Fragment.App.Fragment! f, Android.Content.Context! context) -> void
virtual AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks.OnFragmentPreCreated(AndroidX.Fragment.App.FragmentManager! fm, AndroidX.Fragment.App.Fragment! f, Android.OS.Bundle? savedInstanceState) -> void
virtual AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks.OnFragmentResumed(AndroidX.Fragment.App.FragmentManager! fm, AndroidX.Fragment.App.Fragment! f) -> void
virtual AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks.OnFragmentSaveInstanceState(AndroidX.Fragment.App.FragmentManager! fm, AndroidX.Fragment.App.Fragment! f, Android.OS.Bundle! outState) -> void
virtual AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks.OnFragmentStarted(AndroidX.Fragment.App.FragmentManager! fm, AndroidX.Fragment.App.Fragment! f) -> void
virtual AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks.OnFragmentStopped(AndroidX.Fragment.App.FragmentManager! fm, AndroidX.Fragment.App.Fragment! f) -> void
virtual AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks.OnFragmentViewCreated(AndroidX.Fragment.App.FragmentManager! fm, AndroidX.Fragment.App.Fragment! f, Android.Views.View! v, Android.OS.Bundle? savedInstanceState) -> void
virtual AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks.OnFragmentViewDestroyed(AndroidX.Fragment.App.FragmentManager! fm, AndroidX.Fragment.App.Fragment! f) -> void
virtual AndroidX.Fragment.App.FragmentManager.Fragments.get -> System.Collections.Generic.IList<AndroidX.Fragment.App.Fragment!>!
virtual AndroidX.Fragment.App.FragmentManager.GetBackStackEntryAt(int index) -> AndroidX.Fragment.App.FragmentManager.IBackStackEntry!
virtual AndroidX.Fragment.App.FragmentManager.GetFragment(Android.OS.Bundle! bundle, string! key) -> AndroidX.Fragment.App.Fragment?
virtual AndroidX.Fragment.App.FragmentManager.Host.get -> AndroidX.Fragment.App.FragmentHostCallback!
virtual AndroidX.Fragment.App.FragmentManager.IsDestroyed.get -> bool
virtual AndroidX.Fragment.App.FragmentManager.IsStateSaved.get -> bool
virtual AndroidX.Fragment.App.FragmentManager.OpenTransaction() -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentManager.PopBackStack() -> void
virtual AndroidX.Fragment.App.FragmentManager.PopBackStack(int id, int flags) -> void
virtual AndroidX.Fragment.App.FragmentManager.PopBackStack(string? name, int flags) -> void
virtual AndroidX.Fragment.App.FragmentManager.PopBackStackImmediate() -> bool
virtual AndroidX.Fragment.App.FragmentManager.PopBackStackImmediate(int id, int flags) -> bool
virtual AndroidX.Fragment.App.FragmentManager.PopBackStackImmediate(string? name, int flags) -> bool
virtual AndroidX.Fragment.App.FragmentManager.PrimaryNavigationFragment.get -> AndroidX.Fragment.App.Fragment?
virtual AndroidX.Fragment.App.FragmentManager.PutFragment(Android.OS.Bundle! bundle, string! key, AndroidX.Fragment.App.Fragment! fragment) -> void
virtual AndroidX.Fragment.App.FragmentManager.RegisterFragmentLifecycleCallbacks(AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks! cb, bool recursive) -> void
virtual AndroidX.Fragment.App.FragmentManager.RemoveFragmentOnAttachListener(AndroidX.Fragment.App.IFragmentOnAttachListener! listener) -> void
virtual AndroidX.Fragment.App.FragmentManager.RemoveOnBackStackChangedListener(AndroidX.Fragment.App.FragmentManager.IOnBackStackChangedListener! listener) -> void
virtual AndroidX.Fragment.App.FragmentManager.RestoreBackStack(string! name) -> void
virtual AndroidX.Fragment.App.FragmentManager.SaveBackStack(string! name) -> void
virtual AndroidX.Fragment.App.FragmentManager.SaveFragmentInstanceState(AndroidX.Fragment.App.Fragment! f) -> AndroidX.Fragment.App.Fragment.SavedState?
virtual AndroidX.Fragment.App.FragmentManager.StrictModePolicy.get -> AndroidX.Fragment.App.StrictMode.FragmentStrictMode.Policy?
virtual AndroidX.Fragment.App.FragmentManager.StrictModePolicy.set -> void
virtual AndroidX.Fragment.App.FragmentManager.UnregisterFragmentLifecycleCallbacks(AndroidX.Fragment.App.FragmentManager.FragmentLifecycleCallbacks! cb) -> void
virtual AndroidX.Fragment.App.FragmentPagerAdapter.GetItemId(int position) -> long
virtual AndroidX.Fragment.App.FragmentTabHost.AddTab(Android.Widget.TabHost.TabSpec! tabSpec, Java.Lang.Class! clss, Android.OS.Bundle? args) -> void
virtual AndroidX.Fragment.App.FragmentTabHost.OnTabChanged(string? tabId) -> void
virtual AndroidX.Fragment.App.FragmentTabHost.Setup(Android.Content.Context! context, AndroidX.Fragment.App.FragmentManager! manager) -> void
virtual AndroidX.Fragment.App.FragmentTabHost.Setup(Android.Content.Context! context, AndroidX.Fragment.App.FragmentManager! manager, int containerId) -> void
virtual AndroidX.Fragment.App.FragmentTransaction.Add(AndroidX.Fragment.App.Fragment! fragment, string? tag) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.Add(int containerViewId, AndroidX.Fragment.App.Fragment! fragment) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.Add(int containerViewId, AndroidX.Fragment.App.Fragment! fragment, string? tag) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.AddSharedElement(Android.Views.View! sharedElement, string! name) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.AddToBackStack(string? name) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.Attach(AndroidX.Fragment.App.Fragment! fragment) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.Detach(AndroidX.Fragment.App.Fragment! fragment) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.DisallowAddToBackStack() -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.Hide(AndroidX.Fragment.App.Fragment! fragment) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.IsAddToBackStackAllowed.get -> bool
virtual AndroidX.Fragment.App.FragmentTransaction.IsEmpty.get -> bool
virtual AndroidX.Fragment.App.FragmentTransaction.Remove(AndroidX.Fragment.App.Fragment! fragment) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.Replace(int containerViewId, AndroidX.Fragment.App.Fragment! fragment) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.Replace(int containerViewId, AndroidX.Fragment.App.Fragment! fragment, string? tag) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.RunOnCommit(Java.Lang.IRunnable! runnable) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.SetAllowOptimization(bool allowOptimization) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.SetBreadCrumbShortTitle(Java.Lang.ICharSequence? text) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.SetBreadCrumbShortTitle(int res) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.SetBreadCrumbTitle(Java.Lang.ICharSequence? text) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.SetBreadCrumbTitle(int res) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.SetCustomAnimations(int enter, int exit) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.SetCustomAnimations(int enter, int exit, int popEnter, int popExit) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.SetMaxLifecycle(AndroidX.Fragment.App.Fragment! fragment, AndroidX.Lifecycle.Lifecycle.State! state) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.SetPrimaryNavigationFragment(AndroidX.Fragment.App.Fragment? fragment) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.SetReorderingAllowed(bool reorderingAllowed) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.SetTransition(int transit) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.SetTransitionStyle(int styleRes) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransaction.Show(AndroidX.Fragment.App.Fragment! fragment) -> AndroidX.Fragment.App.FragmentTransaction!
virtual AndroidX.Fragment.App.FragmentTransitionImpl.AnimateToEnd(Java.Lang.Object! transitionController) -> void
virtual AndroidX.Fragment.App.FragmentTransitionImpl.AnimateToStart(Java.Lang.Object! transitionController, Java.Lang.IRunnable! completeRunnable) -> void
virtual AndroidX.Fragment.App.FragmentTransitionImpl.ControlDelayedTransition(Android.Views.ViewGroup! sceneRoot, Java.Lang.Object! transition) -> Java.Lang.Object?
virtual AndroidX.Fragment.App.FragmentTransitionImpl.GetBoundsOnScreen(Android.Views.View? view, Android.Graphics.Rect? epicenter) -> void
virtual AndroidX.Fragment.App.FragmentTransitionImpl.InvokeIsSeekingSupported(Java.Lang.Object! transition) -> bool
virtual AndroidX.Fragment.App.FragmentTransitionImpl.IsSeekingSupported.get -> bool
virtual AndroidX.Fragment.App.FragmentTransitionImpl.SetCurrentPlayTime(Java.Lang.Object! transitionController, float progress) -> void
virtual AndroidX.Fragment.App.FragmentTransitionImpl.SetListenerForTransitionEnd(AndroidX.Fragment.App.Fragment! outFragment, Java.Lang.Object! transition, AndroidX.Core.OS.CancellationSignal! signal, Java.Lang.IRunnable! transitionCompleteRunnable) -> void
virtual AndroidX.Fragment.App.FragmentTransitionImpl.SetListenerForTransitionEnd(AndroidX.Fragment.App.Fragment! outFragment, Java.Lang.Object! transition, AndroidX.Core.OS.CancellationSignal! signal, Java.Lang.IRunnable? cancelRunnable, Java.Lang.IRunnable! transitionCompleteRunnable) -> void
virtual AndroidX.Fragment.App.ListFragment.ListAdapter.get -> Android.Widget.IListAdapter?
virtual AndroidX.Fragment.App.ListFragment.ListAdapter.set -> void
virtual AndroidX.Fragment.App.ListFragment.ListView.get -> Android.Widget.ListView!
virtual AndroidX.Fragment.App.ListFragment.OnListItemClick(Android.Widget.ListView! l, Android.Views.View! v, int position, long id) -> void
virtual AndroidX.Fragment.App.ListFragment.SelectedItemId.get -> long
virtual AndroidX.Fragment.App.ListFragment.SelectedItemPosition.get -> int
virtual AndroidX.Fragment.App.ListFragment.SetEmptyText(Java.Lang.ICharSequence? text) -> void
virtual AndroidX.Fragment.App.ListFragment.SetListShown(bool shown) -> void
virtual AndroidX.Fragment.App.ListFragment.SetListShownNoAnimation(bool shown) -> void
virtual AndroidX.Fragment.App.ListFragment.SetSelection(int position) -> void
