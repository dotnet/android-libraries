#nullable enable
AndroidX.Camera.Lifecycle.ExperimentalCameraProviderConfigurationAttribute
AndroidX.Camera.Lifecycle.ExperimentalCameraProviderConfigurationAttribute.ExperimentalCameraProviderConfigurationAttribute() -> void
AndroidX.Camera.Lifecycle.IExperimentalCameraProviderConfiguration
AndroidX.Camera.Lifecycle.ILifecycleCameraProvider
AndroidX.Camera.Lifecycle.ILifecycleCameraProvider.BindToLifecycle(AndroidX.Lifecycle.ILifecycleOwner! lifecycleOwner, AndroidX.Camera.Core.CameraSelector! cameraSelector, AndroidX.Camera.Core.SessionConfig! sessionConfig) -> AndroidX.Camera.Core.ICamera!
AndroidX.Camera.Lifecycle.ILifecycleCameraProvider.BindToLifecycle(AndroidX.Lifecycle.ILifecycleOwner! lifecycleOwner, AndroidX.Camera.Core.CameraSelector! cameraSelector, AndroidX.Camera.Core.UseCaseGroup! useCaseGroup) -> AndroidX.Camera.Core.ICamera!
AndroidX.Camera.Lifecycle.ILifecycleCameraProvider.BindToLifecycle(AndroidX.Lifecycle.ILifecycleOwner! lifecycleOwner, AndroidX.Camera.Core.CameraSelector! cameraSelector, params AndroidX.Camera.Core.UseCase![]! useCases) -> AndroidX.Camera.Core.ICamera!
AndroidX.Camera.Lifecycle.ILifecycleCameraProvider.BindToLifecycle(System.Collections.Generic.IList<AndroidX.Camera.Core.ConcurrentCamera.SingleCameraConfig!>! singleCameraConfigs) -> AndroidX.Camera.Core.ConcurrentCamera!
AndroidX.Camera.Lifecycle.ILifecycleCameraProvider.Companion.get -> AndroidX.Camera.Lifecycle.LifecycleCameraProviderCompanion!
AndroidX.Camera.Lifecycle.ILifecycleCameraProvider.CreateInstance(Android.Content.Context! context, AndroidX.Camera.Core.CameraXConfig? cameraXConfig, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
AndroidX.Camera.Lifecycle.ILifecycleCameraProvider.CreateInstance(Android.Content.Context! context, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
AndroidX.Camera.Lifecycle.ILifecycleCameraProvider.CreateInstanceAsync(Android.Content.Context! context) -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Lifecycle.ILifecycleCameraProvider.CreateInstanceAsync(Android.Content.Context! context, AndroidX.Camera.Core.CameraXConfig? cameraXConfig) -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Lifecycle.ILifecycleCameraProvider.IsBound(AndroidX.Camera.Core.SessionConfig! sessionConfig) -> bool
AndroidX.Camera.Lifecycle.ILifecycleCameraProvider.IsBound(AndroidX.Camera.Core.UseCase! useCase) -> bool
AndroidX.Camera.Lifecycle.ILifecycleCameraProvider.Unbind(AndroidX.Camera.Core.SessionConfig! sessionConfig) -> void
AndroidX.Camera.Lifecycle.ILifecycleCameraProvider.Unbind(params AndroidX.Camera.Core.UseCase![]! useCases) -> void
AndroidX.Camera.Lifecycle.ILifecycleCameraProvider.UnbindAll() -> void
AndroidX.Camera.Lifecycle.LifecycleCamera
AndroidX.Camera.Lifecycle.LifecycleCamera.CameraControl.get -> AndroidX.Camera.Core.ICameraControl?
AndroidX.Camera.Lifecycle.LifecycleCamera.CameraInfo.get -> AndroidX.Camera.Core.ICameraInfo?
AndroidX.Camera.Lifecycle.LifecycleCamera.CameraUseCaseAdapter.get -> AndroidX.Camera.Core.Internal.CameraUseCaseAdapter?
AndroidX.Camera.Lifecycle.LifecycleCamera.ExtendedConfig.get -> AndroidX.Camera.Core.Impl.ICameraConfig?
AndroidX.Camera.Lifecycle.LifecycleCamera.IsActive.get -> bool
AndroidX.Camera.Lifecycle.LifecycleCamera.IsBound(AndroidX.Camera.Core.SessionConfig? sessionConfig) -> bool
AndroidX.Camera.Lifecycle.LifecycleCamera.IsBound(AndroidX.Camera.Core.UseCase? useCase) -> bool
AndroidX.Camera.Lifecycle.LifecycleCamera.IsUseCasesCombinationSupported(bool withStreamSharing, params AndroidX.Camera.Core.UseCase![]? useCases) -> bool
AndroidX.Camera.Lifecycle.LifecycleCamera.LifecycleOwner.get -> AndroidX.Lifecycle.ILifecycleOwner?
AndroidX.Camera.Lifecycle.LifecycleCamera.OnDestroy(AndroidX.Lifecycle.ILifecycleOwner? lifecycleOwner) -> void
AndroidX.Camera.Lifecycle.LifecycleCamera.OnPause(AndroidX.Lifecycle.ILifecycleOwner? lifecycleOwner) -> void
AndroidX.Camera.Lifecycle.LifecycleCamera.OnResume(AndroidX.Lifecycle.ILifecycleOwner? lifecycleOwner) -> void
AndroidX.Camera.Lifecycle.LifecycleCamera.OnStart(AndroidX.Lifecycle.ILifecycleOwner? lifecycleOwner) -> void
AndroidX.Camera.Lifecycle.LifecycleCamera.OnStop(AndroidX.Lifecycle.ILifecycleOwner? lifecycleOwner) -> void
AndroidX.Camera.Lifecycle.LifecycleCamera.Suspend() -> void
AndroidX.Camera.Lifecycle.LifecycleCamera.Unsuspend() -> void
AndroidX.Camera.Lifecycle.LifecycleCamera.UseCases.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.UseCase!>?
AndroidX.Camera.Lifecycle.LifecycleCameraProvider
AndroidX.Camera.Lifecycle.LifecycleCameraProviderCompanion
AndroidX.Camera.Lifecycle.LifecycleCameraProviderCompanion.CreateInstance(Android.Content.Context! context, AndroidX.Camera.Core.CameraXConfig? cameraXConfig, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
AndroidX.Camera.Lifecycle.LifecycleCameraProviderCompanion.CreateInstance(Android.Content.Context! context, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
AndroidX.Camera.Lifecycle.LifecycleCameraProviderCompanion.CreateInstanceAsync(Android.Content.Context! context) -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Lifecycle.LifecycleCameraProviderCompanion.CreateInstanceAsync(Android.Content.Context! context, AndroidX.Camera.Core.CameraXConfig? cameraXConfig) -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Lifecycle.LifecycleCameraProviderConsts
AndroidX.Camera.Lifecycle.ProcessCameraProvider
AndroidX.Camera.Lifecycle.ProcessCameraProvider.AddCameraPresenceListener(Java.Util.Concurrent.IExecutor! executor, AndroidX.Camera.Core.ICameraPresenceListener! listener) -> void
AndroidX.Camera.Lifecycle.ProcessCameraProvider.AvailableCameraInfos.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.ICameraInfo!>!
AndroidX.Camera.Lifecycle.ProcessCameraProvider.AvailableConcurrentCameraInfos.get -> System.Collections.Generic.IList<System.Collections.Generic.IList<AndroidX.Camera.Core.ICameraInfo!>!>!
AndroidX.Camera.Lifecycle.ProcessCameraProvider.BindToLifecycle(AndroidX.Lifecycle.ILifecycleOwner! lifecycleOwner, AndroidX.Camera.Core.CameraSelector! cameraSelector, AndroidX.Camera.Core.SessionConfig! sessionConfig) -> AndroidX.Camera.Core.ICamera!
AndroidX.Camera.Lifecycle.ProcessCameraProvider.BindToLifecycle(AndroidX.Lifecycle.ILifecycleOwner! lifecycleOwner, AndroidX.Camera.Core.CameraSelector! cameraSelector, AndroidX.Camera.Core.UseCaseGroup! useCaseGroup) -> AndroidX.Camera.Core.ICamera!
AndroidX.Camera.Lifecycle.ProcessCameraProvider.BindToLifecycle(AndroidX.Lifecycle.ILifecycleOwner! lifecycleOwner, AndroidX.Camera.Core.CameraSelector! cameraSelector, params AndroidX.Camera.Core.UseCase![]! useCases) -> AndroidX.Camera.Core.ICamera!
AndroidX.Camera.Lifecycle.ProcessCameraProvider.BindToLifecycle(System.Collections.Generic.IList<AndroidX.Camera.Core.ConcurrentCamera.SingleCameraConfig!>! singleCameraConfigs) -> AndroidX.Camera.Core.ConcurrentCamera!
AndroidX.Camera.Lifecycle.ProcessCameraProvider.Companion
AndroidX.Camera.Lifecycle.ProcessCameraProvider.Companion.ClearConfiguration_LRDsOJo(long timeout) -> void
AndroidX.Camera.Lifecycle.ProcessCameraProvider.Companion.ConfigureInstance(AndroidX.Camera.Core.CameraXConfig! cameraXConfig) -> void
AndroidX.Camera.Lifecycle.ProcessCameraProvider.Companion.GetInstance(Android.Content.Context! context) -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Lifecycle.ProcessCameraProvider.Companion.Shutdown() -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Lifecycle.ProcessCameraProvider.ConfigImplType.get -> int
AndroidX.Camera.Lifecycle.ProcessCameraProvider.GetCameraInfo(AndroidX.Camera.Core.CameraSelector! cameraSelector) -> AndroidX.Camera.Core.ICameraInfo!
AndroidX.Camera.Lifecycle.ProcessCameraProvider.HasCamera(AndroidX.Camera.Core.CameraSelector! cameraSelector) -> bool
AndroidX.Camera.Lifecycle.ProcessCameraProvider.IsBound(AndroidX.Camera.Core.SessionConfig! sessionConfig) -> bool
AndroidX.Camera.Lifecycle.ProcessCameraProvider.IsBound(AndroidX.Camera.Core.UseCase! useCase) -> bool
AndroidX.Camera.Lifecycle.ProcessCameraProvider.IsConcurrentCameraModeOn.get -> bool
AndroidX.Camera.Lifecycle.ProcessCameraProvider.RemoveCameraPresenceListener(AndroidX.Camera.Core.ICameraPresenceListener! listener) -> void
AndroidX.Camera.Lifecycle.ProcessCameraProvider.ShutdownAsync() -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Lifecycle.ProcessCameraProvider.Unbind(AndroidX.Camera.Core.SessionConfig! sessionConfig) -> void
AndroidX.Camera.Lifecycle.ProcessCameraProvider.Unbind(params AndroidX.Camera.Core.UseCase![]! useCases) -> void
AndroidX.Camera.Lifecycle.ProcessCameraProvider.UnbindAll() -> void
AndroidX.Camera.Lifecycle.ProcessCameraProviderExtKt
override AndroidX.Camera.Lifecycle.LifecycleCamera.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Lifecycle.LifecycleCameraProviderCompanion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Lifecycle.ProcessCameraProvider.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Lifecycle.ProcessCameraProvider.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Lifecycle.ProcessCameraProviderExtKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
static AndroidX.Camera.Lifecycle.LifecycleCameraProvider.Companion.get -> AndroidX.Camera.Lifecycle.LifecycleCameraProviderCompanion!
static AndroidX.Camera.Lifecycle.LifecycleCameraProvider.CreateInstance(Android.Content.Context! context, AndroidX.Camera.Core.CameraXConfig? cameraXConfig, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Camera.Lifecycle.LifecycleCameraProvider.CreateInstance(Android.Content.Context! context, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Camera.Lifecycle.LifecycleCameraProvider.CreateInstanceAsync(Android.Content.Context! context) -> Google.Common.Util.Concurrent.IListenableFuture!
static AndroidX.Camera.Lifecycle.LifecycleCameraProvider.CreateInstanceAsync(Android.Content.Context! context, AndroidX.Camera.Core.CameraXConfig? cameraXConfig) -> Google.Common.Util.Concurrent.IListenableFuture!
static AndroidX.Camera.Lifecycle.ProcessCameraProvider.ClearConfiguration(long timeout) -> void
static AndroidX.Camera.Lifecycle.ProcessCameraProvider.ConfigureInstance(AndroidX.Camera.Core.CameraXConfig! cameraXConfig) -> void
static AndroidX.Camera.Lifecycle.ProcessCameraProvider.GetInstance(Android.Content.Context! context) -> Google.Common.Util.Concurrent.IListenableFuture!
static AndroidX.Camera.Lifecycle.ProcessCameraProvider.Shutdown() -> Google.Common.Util.Concurrent.IListenableFuture!
static AndroidX.Camera.Lifecycle.ProcessCameraProviderExtKt.AwaitInstance(AndroidX.Camera.Lifecycle.ProcessCameraProvider.Companion! obj, Android.Content.Context! context, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
