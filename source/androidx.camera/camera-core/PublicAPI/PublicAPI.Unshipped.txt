#nullable enable
AndroidX.Camera.Core.AspectRatio
AndroidX.Camera.Core.AspectRatio.AspectRatio(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.AspectRatio.IRatio
AndroidX.Camera.Core.CameraControlOperationCanceledException
AndroidX.Camera.Core.CameraControlOperationCanceledException.CameraControlOperationCanceledException(string! message) -> void
AndroidX.Camera.Core.CameraControlOperationCanceledException.CameraControlOperationCanceledException(string! message, Java.Lang.Throwable! cause) -> void
AndroidX.Camera.Core.CameraEffect
AndroidX.Camera.Core.CameraEffect.CameraEffect(int targets, Java.Util.Concurrent.IExecutor! executor, AndroidX.Camera.Core.IImageProcessor! imageProcessor, AndroidX.Core.Util.IConsumer! errorListener) -> void
AndroidX.Camera.Core.CameraEffect.CameraEffect(int targets, Java.Util.Concurrent.IExecutor! executor, AndroidX.Camera.Core.ISurfaceProcessor! surfaceProcessor, AndroidX.Core.Util.IConsumer! errorListener) -> void
AndroidX.Camera.Core.CameraEffect.CameraEffect(int targets, int outputOption, int transformation, Java.Util.Concurrent.IExecutor! executor, AndroidX.Camera.Core.ISurfaceProcessor! surfaceProcessor, AndroidX.Core.Util.IConsumer! errorListener) -> void
AndroidX.Camera.Core.CameraEffect.CameraEffect(int targets, int transformation, Java.Util.Concurrent.IExecutor! executor, AndroidX.Camera.Core.ISurfaceProcessor! surfaceProcessor, AndroidX.Core.Util.IConsumer! errorListener) -> void
AndroidX.Camera.Core.CameraEffect.CameraEffect(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.CameraEffect.IFormats
AndroidX.Camera.Core.CameraEffect.IOutputOptions
AndroidX.Camera.Core.CameraEffect.ITargets
AndroidX.Camera.Core.CameraEffect.ITransformations
AndroidX.Camera.Core.CameraExecutor
AndroidX.Camera.Core.CameraExecutor.CameraExecutor() -> void
AndroidX.Camera.Core.CameraExecutor.CameraExecutor(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.CameraFilter
AndroidX.Camera.Core.CameraFilterConsts
AndroidX.Camera.Core.CameraInfo
AndroidX.Camera.Core.CameraInfoConsts
AndroidX.Camera.Core.CameraInfoUnavailableException
AndroidX.Camera.Core.CameraInfoUnavailableException.CameraInfoUnavailableException(string? s) -> void
AndroidX.Camera.Core.CameraInfoUnavailableException.CameraInfoUnavailableException(string? s, Java.Lang.Throwable? e) -> void
AndroidX.Camera.Core.CameraSelector
AndroidX.Camera.Core.CameraSelector.Builder
AndroidX.Camera.Core.CameraSelector.Builder.AddCameraFilter(AndroidX.Camera.Core.ICameraFilter! cameraFilter) -> AndroidX.Camera.Core.CameraSelector.Builder!
AndroidX.Camera.Core.CameraSelector.Builder.Build() -> AndroidX.Camera.Core.CameraSelector!
AndroidX.Camera.Core.CameraSelector.Builder.Builder() -> void
AndroidX.Camera.Core.CameraSelector.Builder.RequireLensFacing(int lensFacing) -> AndroidX.Camera.Core.CameraSelector.Builder!
AndroidX.Camera.Core.CameraSelector.Builder.SetPhysicalCameraId(string! physicalCameraId) -> AndroidX.Camera.Core.CameraSelector.Builder!
AndroidX.Camera.Core.CameraSelector.CameraFilterSet.get -> Java.Util.LinkedHashSet!
AndroidX.Camera.Core.CameraSelector.Filter(Java.Util.LinkedHashSet! cameras) -> Java.Util.LinkedHashSet!
AndroidX.Camera.Core.CameraSelector.Filter(System.Collections.Generic.IList<AndroidX.Camera.Core.ICameraInfo!>! cameraInfos) -> System.Collections.Generic.IList<AndroidX.Camera.Core.ICameraInfo!>!
AndroidX.Camera.Core.CameraSelector.ILensFacing
AndroidX.Camera.Core.CameraSelector.LensFacing.get -> Java.Lang.Integer?
AndroidX.Camera.Core.CameraSelector.PhysicalCameraId.get -> string?
AndroidX.Camera.Core.CameraSelector.Select(Java.Util.LinkedHashSet! cameras) -> AndroidX.Camera.Core.Impl.ICameraInternal!
AndroidX.Camera.Core.CameraState
AndroidX.Camera.Core.CameraState.CameraState() -> void
AndroidX.Camera.Core.CameraState.CameraState(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.CameraState.ErrorType
AndroidX.Camera.Core.CameraState.StateError
AndroidX.Camera.Core.CameraState.StateError.StateError() -> void
AndroidX.Camera.Core.CameraState.StateError.StateError(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.CameraState.Type
AndroidX.Camera.Core.CameraUnavailableException
AndroidX.Camera.Core.CameraUnavailableException.CameraUnavailableException(int reason) -> void
AndroidX.Camera.Core.CameraUnavailableException.CameraUnavailableException(int reason, Java.Lang.Throwable? cause) -> void
AndroidX.Camera.Core.CameraUnavailableException.CameraUnavailableException(int reason, string? message) -> void
AndroidX.Camera.Core.CameraUnavailableException.CameraUnavailableException(int reason, string? message, Java.Lang.Throwable? cause) -> void
AndroidX.Camera.Core.CameraUnavailableException.CameraUnavailableException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.CameraUnavailableException.IReason
AndroidX.Camera.Core.CameraX
AndroidX.Camera.Core.CameraX.CameraDeviceSurfaceManager.get -> AndroidX.Camera.Core.Impl.ICameraDeviceSurfaceManager!
AndroidX.Camera.Core.CameraX.CameraFactory.get -> AndroidX.Camera.Core.Impl.ICameraFactory!
AndroidX.Camera.Core.CameraX.CameraRepository.get -> AndroidX.Camera.Core.Impl.CameraRepository!
AndroidX.Camera.Core.CameraX.CameraX(Android.Content.Context! context, AndroidX.Camera.Core.CameraXConfig.IProvider? configProvider) -> void
AndroidX.Camera.Core.CameraX.DefaultConfigFactory.get -> AndroidX.Camera.Core.Impl.IUseCaseConfigFactory!
AndroidX.Camera.Core.CameraX.InitializeFuture.get -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.CameraX.Shutdown() -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.CameraXConfig
AndroidX.Camera.Core.CameraXConfig.Builder
AndroidX.Camera.Core.CameraXConfig.Builder.Build() -> AndroidX.Camera.Core.CameraXConfig!
AndroidX.Camera.Core.CameraXConfig.Builder.Builder() -> void
AndroidX.Camera.Core.CameraXConfig.Builder.SetAvailableCamerasLimiter(AndroidX.Camera.Core.CameraSelector! availableCameraSelector) -> AndroidX.Camera.Core.CameraXConfig.Builder!
AndroidX.Camera.Core.CameraXConfig.Builder.SetCameraExecutor(Java.Util.Concurrent.IExecutor! executor) -> AndroidX.Camera.Core.CameraXConfig.Builder!
AndroidX.Camera.Core.CameraXConfig.Builder.SetCameraFactoryProvider(AndroidX.Camera.Core.Impl.ICameraFactoryProvider! cameraFactory) -> AndroidX.Camera.Core.CameraXConfig.Builder!
AndroidX.Camera.Core.CameraXConfig.Builder.SetCameraOpenRetryMaxTimeoutInMillisWhileResuming(long maxTimeoutInMillis) -> AndroidX.Camera.Core.CameraXConfig.Builder!
AndroidX.Camera.Core.CameraXConfig.Builder.SetCameraProviderInitRetryPolicy(AndroidX.Camera.Core.IRetryPolicy! retryPolicy) -> AndroidX.Camera.Core.CameraXConfig.Builder!
AndroidX.Camera.Core.CameraXConfig.Builder.SetDeviceSurfaceManagerProvider(AndroidX.Camera.Core.Impl.ICameraDeviceSurfaceManagerProvider! surfaceManagerProvider) -> AndroidX.Camera.Core.CameraXConfig.Builder!
AndroidX.Camera.Core.CameraXConfig.Builder.SetMinimumLoggingLevel(int logLevel) -> AndroidX.Camera.Core.CameraXConfig.Builder!
AndroidX.Camera.Core.CameraXConfig.Builder.SetQuirkSettings(AndroidX.Camera.Core.Impl.QuirkSettings! quirkSettings) -> AndroidX.Camera.Core.CameraXConfig.Builder!
AndroidX.Camera.Core.CameraXConfig.Builder.SetSchedulerHandler(Android.OS.Handler! handler) -> AndroidX.Camera.Core.CameraXConfig.Builder!
AndroidX.Camera.Core.CameraXConfig.Builder.SetTargetClass(Java.Lang.Class! targetClass) -> AndroidX.Camera.Core.CameraXConfig.Builder!
AndroidX.Camera.Core.CameraXConfig.Builder.SetTargetName(string! targetName) -> AndroidX.Camera.Core.CameraXConfig.Builder!
AndroidX.Camera.Core.CameraXConfig.Builder.SetUseCaseConfigFactoryProvider(AndroidX.Camera.Core.Impl.IUseCaseConfigFactoryProvider! configFactoryProvider) -> AndroidX.Camera.Core.CameraXConfig.Builder!
AndroidX.Camera.Core.CameraXConfig.CameraOpenRetryMaxTimeoutInMillisWhileResuming.get -> long
AndroidX.Camera.Core.CameraXConfig.CameraProviderInitRetryPolicy.get -> AndroidX.Camera.Core.IRetryPolicy!
AndroidX.Camera.Core.CameraXConfig.Config.get -> AndroidX.Camera.Core.Impl.IConfig!
AndroidX.Camera.Core.CameraXConfig.GetAvailableCamerasLimiter(AndroidX.Camera.Core.CameraSelector? valueIfMissing) -> AndroidX.Camera.Core.CameraSelector?
AndroidX.Camera.Core.CameraXConfig.GetCameraExecutor(Java.Util.Concurrent.IExecutor? valueIfMissing) -> Java.Util.Concurrent.IExecutor?
AndroidX.Camera.Core.CameraXConfig.GetCameraFactoryProvider(AndroidX.Camera.Core.Impl.ICameraFactoryProvider? valueIfMissing) -> AndroidX.Camera.Core.Impl.ICameraFactoryProvider?
AndroidX.Camera.Core.CameraXConfig.GetDeviceSurfaceManagerProvider(AndroidX.Camera.Core.Impl.ICameraDeviceSurfaceManagerProvider? valueIfMissing) -> AndroidX.Camera.Core.Impl.ICameraDeviceSurfaceManagerProvider?
AndroidX.Camera.Core.CameraXConfig.GetSchedulerHandler(Android.OS.Handler? valueIfMissing) -> Android.OS.Handler?
AndroidX.Camera.Core.CameraXConfig.GetUseCaseConfigFactoryProvider(AndroidX.Camera.Core.Impl.IUseCaseConfigFactoryProvider? valueIfMissing) -> AndroidX.Camera.Core.Impl.IUseCaseConfigFactoryProvider?
AndroidX.Camera.Core.CameraXConfig.IProvider
AndroidX.Camera.Core.CameraXConfig.IProvider.CameraXConfig.get -> AndroidX.Camera.Core.CameraXConfig!
AndroidX.Camera.Core.CameraXConfig.MinimumLoggingLevel.get -> int
AndroidX.Camera.Core.CameraXConfig.QuirkSettings.get -> AndroidX.Camera.Core.Impl.QuirkSettings?
AndroidX.Camera.Core.CameraXThreads
AndroidX.Camera.Core.CaptureBundles
AndroidX.Camera.Core.Concurrent.CameraCoordinator
AndroidX.Camera.Core.Concurrent.CameraCoordinatorConcurrentCameraModeEventArgs
AndroidX.Camera.Core.Concurrent.CameraCoordinatorConcurrentCameraModeEventArgs.CameraCoordinatorConcurrentCameraModeEventArgs(int p0, int p1) -> void
AndroidX.Camera.Core.Concurrent.CameraCoordinatorConcurrentCameraModeEventArgs.P0.get -> int
AndroidX.Camera.Core.Concurrent.CameraCoordinatorConcurrentCameraModeEventArgs.P1.get -> int
AndroidX.Camera.Core.Concurrent.CameraCoordinatorConsts
AndroidX.Camera.Core.Concurrent.ICameraCoordinator
AndroidX.Camera.Core.Concurrent.ICameraCoordinator.ActiveConcurrentCameraInfos.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.ICameraInfo!>!
AndroidX.Camera.Core.Concurrent.ICameraCoordinator.ActiveConcurrentCameraInfos.set -> void
AndroidX.Camera.Core.Concurrent.ICameraCoordinator.AddListener(AndroidX.Camera.Core.Concurrent.ICameraCoordinatorConcurrentCameraModeListener! p0) -> void
AndroidX.Camera.Core.Concurrent.ICameraCoordinator.CameraOperatingMode.get -> int
AndroidX.Camera.Core.Concurrent.ICameraCoordinator.CameraOperatingMode.set -> void
AndroidX.Camera.Core.Concurrent.ICameraCoordinator.ConcurrentCameraSelectors.get -> System.Collections.Generic.IList<System.Collections.Generic.IList<AndroidX.Camera.Core.CameraSelector!>!>!
AndroidX.Camera.Core.Concurrent.ICameraCoordinator.GetPairedConcurrentCameraId(string! p0) -> string?
AndroidX.Camera.Core.Concurrent.ICameraCoordinator.RemoveListener(AndroidX.Camera.Core.Concurrent.ICameraCoordinatorConcurrentCameraModeListener! p0) -> void
AndroidX.Camera.Core.Concurrent.ICameraCoordinator.Shutdown() -> void
AndroidX.Camera.Core.Concurrent.ICameraCoordinatorCameraOperatingMode
AndroidX.Camera.Core.Concurrent.ICameraCoordinatorConcurrentCameraModeListener
AndroidX.Camera.Core.Concurrent.ICameraCoordinatorConcurrentCameraModeListener.OnCameraOperatingModeUpdated(int p0, int p1) -> void
AndroidX.Camera.Core.ConcurrentCamera
AndroidX.Camera.Core.ConcurrentCamera.ConcurrentCamera(System.Collections.Generic.IList<AndroidX.Camera.Core.ICamera!>! cameras) -> void
AndroidX.Camera.Core.ConcurrentCamera.ConcurrentCamera(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.ConcurrentCamera.SingleCameraConfig
AndroidX.Camera.Core.ConcurrentCamera.SingleCameraConfig.CameraSelector.get -> AndroidX.Camera.Core.CameraSelector!
AndroidX.Camera.Core.ConcurrentCamera.SingleCameraConfig.LayoutSettings.get -> AndroidX.Camera.Core.LayoutSettings!
AndroidX.Camera.Core.ConcurrentCamera.SingleCameraConfig.LifecycleOwner.get -> AndroidX.Lifecycle.ILifecycleOwner!
AndroidX.Camera.Core.ConcurrentCamera.SingleCameraConfig.SingleCameraConfig(AndroidX.Camera.Core.CameraSelector! cameraSelector, AndroidX.Camera.Core.UseCaseGroup! useCaseGroup, AndroidX.Camera.Core.LayoutSettings! layoutSettings, AndroidX.Lifecycle.ILifecycleOwner! lifecycleOwner) -> void
AndroidX.Camera.Core.ConcurrentCamera.SingleCameraConfig.SingleCameraConfig(AndroidX.Camera.Core.CameraSelector! cameraSelector, AndroidX.Camera.Core.UseCaseGroup! useCaseGroup, AndroidX.Lifecycle.ILifecycleOwner! lifecycleOwner) -> void
AndroidX.Camera.Core.ConcurrentCamera.SingleCameraConfig.UseCaseGroup.get -> AndroidX.Camera.Core.UseCaseGroup!
AndroidX.Camera.Core.DisplayOrientedMeteringPointFactory
AndroidX.Camera.Core.DisplayOrientedMeteringPointFactory.DisplayOrientedMeteringPointFactory(Android.Views.Display! display, AndroidX.Camera.Core.ICameraInfo! cameraInfo, float width, float height) -> void
AndroidX.Camera.Core.DynamicRange
AndroidX.Camera.Core.DynamicRange.BitDepth.get -> int
AndroidX.Camera.Core.DynamicRange.DynamicRange(int encoding, int bitDepth) -> void
AndroidX.Camera.Core.DynamicRange.Encoding.get -> int
AndroidX.Camera.Core.DynamicRange.IBitDepth
AndroidX.Camera.Core.DynamicRange.IDynamicRangeEncoding
AndroidX.Camera.Core.DynamicRange.Is10BitHdr() -> bool
AndroidX.Camera.Core.DynamicRange.IsFullySpecified.get -> bool
AndroidX.Camera.Core.ExperimentalCameraInfoAttribute
AndroidX.Camera.Core.ExperimentalCameraInfoAttribute.ExperimentalCameraInfoAttribute() -> void
AndroidX.Camera.Core.ExperimentalGetImageAttribute
AndroidX.Camera.Core.ExperimentalGetImageAttribute.ExperimentalGetImageAttribute() -> void
AndroidX.Camera.Core.ExperimentalImageCaptureOutputFormatAttribute
AndroidX.Camera.Core.ExperimentalImageCaptureOutputFormatAttribute.ExperimentalImageCaptureOutputFormatAttribute() -> void
AndroidX.Camera.Core.ExperimentalLensFacingAttribute
AndroidX.Camera.Core.ExperimentalLensFacingAttribute.ExperimentalLensFacingAttribute() -> void
AndroidX.Camera.Core.ExperimentalMirrorModeAttribute
AndroidX.Camera.Core.ExperimentalMirrorModeAttribute.ExperimentalMirrorModeAttribute() -> void
AndroidX.Camera.Core.ExperimentalRetryPolicyAttribute
AndroidX.Camera.Core.ExperimentalRetryPolicyAttribute.ExperimentalRetryPolicyAttribute() -> void
AndroidX.Camera.Core.ExperimentalUseCaseApiAttribute
AndroidX.Camera.Core.ExperimentalUseCaseApiAttribute.ExperimentalUseCaseApiAttribute() -> void
AndroidX.Camera.Core.ExperimentalZeroShutterLagAttribute
AndroidX.Camera.Core.ExperimentalZeroShutterLagAttribute.ExperimentalZeroShutterLagAttribute() -> void
AndroidX.Camera.Core.FocusMeteringAction
AndroidX.Camera.Core.FocusMeteringAction.AutoCancelDurationInMillis.get -> long
AndroidX.Camera.Core.FocusMeteringAction.Builder
AndroidX.Camera.Core.FocusMeteringAction.Builder.Builder(AndroidX.Camera.Core.FocusMeteringAction! focusMeteringAction) -> void
AndroidX.Camera.Core.FocusMeteringAction.Builder.Builder(AndroidX.Camera.Core.MeteringPoint! point) -> void
AndroidX.Camera.Core.FocusMeteringAction.Builder.Builder(AndroidX.Camera.Core.MeteringPoint! point, int meteringMode) -> void
AndroidX.Camera.Core.FocusMeteringAction.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.FocusMeteringAction.IMeteringMode
AndroidX.Camera.Core.FocusMeteringAction.IsAutoCancelEnabled.get -> bool
AndroidX.Camera.Core.FocusMeteringAction.MeteringPointsAe.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.MeteringPoint!>!
AndroidX.Camera.Core.FocusMeteringAction.MeteringPointsAf.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.MeteringPoint!>!
AndroidX.Camera.Core.FocusMeteringAction.MeteringPointsAwb.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.MeteringPoint!>!
AndroidX.Camera.Core.FocusMeteringResult
AndroidX.Camera.Core.FocusMeteringResult.IsFocusSuccessful.get -> bool
AndroidX.Camera.Core.ForwardingImageProxy
AndroidX.Camera.Core.ForwardingImageProxy.ForwardingImageProxy(AndroidX.Camera.Core.IImageProxy! image) -> void
AndroidX.Camera.Core.ForwardingImageProxy.ForwardingImageProxy(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.ForwardingImageProxy.IOnImageCloseListener
AndroidX.Camera.Core.ForwardingImageProxy.IOnImageCloseListener.OnImageClose(AndroidX.Camera.Core.IImageProxy! p0) -> void
AndroidX.Camera.Core.ForwardingImageProxy.ImageClose -> System.EventHandler<AndroidX.Camera.Core.ForwardingImageProxy.ImageCloseEventArgs!>!
AndroidX.Camera.Core.ForwardingImageProxy.ImageCloseEventArgs
AndroidX.Camera.Core.ForwardingImageProxy.ImageCloseEventArgs.ImageCloseEventArgs(AndroidX.Camera.Core.IImageProxy! p0) -> void
AndroidX.Camera.Core.ForwardingImageProxy.ImageCloseEventArgs.P0.get -> AndroidX.Camera.Core.IImageProxy!
AndroidX.Camera.Core.ForwardingImageProxy.MImage.get -> AndroidX.Camera.Core.IImageProxy?
AndroidX.Camera.Core.ForwardingImageProxy.MImage.set -> void
AndroidX.Camera.Core.ICamera
AndroidX.Camera.Core.ICamera.CameraControl.get -> AndroidX.Camera.Core.ICameraControl!
AndroidX.Camera.Core.ICamera.CameraInfo.get -> AndroidX.Camera.Core.ICameraInfo!
AndroidX.Camera.Core.ICamera.ExtendedConfig.get -> AndroidX.Camera.Core.Impl.ICameraConfig!
AndroidX.Camera.Core.ICamera.IsUseCasesCombinationSupported(bool withStreamSharing, params AndroidX.Camera.Core.UseCase![]! useCases) -> bool
AndroidX.Camera.Core.ICamera.IsUseCasesCombinationSupported(params AndroidX.Camera.Core.UseCase![]! useCases) -> bool
AndroidX.Camera.Core.ICamera.IsUseCasesCombinationSupportedByFramework(params AndroidX.Camera.Core.UseCase![]! useCases) -> bool
AndroidX.Camera.Core.ICameraControl
AndroidX.Camera.Core.ICameraControl.CancelFocusAndMetering() -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.ICameraControl.EnableTorch(bool p0) -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.ICameraControl.SetExposureCompensationIndex(int p0) -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.ICameraControl.SetLinearZoom(float p0) -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.ICameraControl.SetZoomRatio(float p0) -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.ICameraControl.StartFocusAndMetering(AndroidX.Camera.Core.FocusMeteringAction! p0) -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.ICameraFilter
AndroidX.Camera.Core.ICameraFilter.DefaultId.get -> AndroidX.Camera.Core.Impl.Identifier?
AndroidX.Camera.Core.ICameraFilter.Filter(System.Collections.Generic.IList<AndroidX.Camera.Core.ICameraInfo!>! p0) -> System.Collections.Generic.IList<AndroidX.Camera.Core.ICameraInfo!>!
AndroidX.Camera.Core.ICameraFilter.Identifier.get -> AndroidX.Camera.Core.Impl.Identifier!
AndroidX.Camera.Core.ICameraInfo
AndroidX.Camera.Core.ICameraInfo.CameraSelector.get -> AndroidX.Camera.Core.CameraSelector!
AndroidX.Camera.Core.ICameraInfo.CameraState.get -> AndroidX.Lifecycle.LiveData!
AndroidX.Camera.Core.ICameraInfo.ExposureState.get -> AndroidX.Camera.Core.IExposureState!
AndroidX.Camera.Core.ICameraInfo.GetSensorRotationDegrees(int p0) -> int
AndroidX.Camera.Core.ICameraInfo.HasFlashUnit.get -> bool
AndroidX.Camera.Core.ICameraInfo.ImplementationType.get -> string!
AndroidX.Camera.Core.ICameraInfo.IntrinsicZoomRatio.get -> float
AndroidX.Camera.Core.ICameraInfo.IsFocusMeteringSupported(AndroidX.Camera.Core.FocusMeteringAction! action) -> bool
AndroidX.Camera.Core.ICameraInfo.IsLogicalMultiCameraSupported.get -> bool
AndroidX.Camera.Core.ICameraInfo.IsPrivateReprocessingSupported.get -> bool
AndroidX.Camera.Core.ICameraInfo.IsZslSupported.get -> bool
AndroidX.Camera.Core.ICameraInfo.LensFacing.get -> int
AndroidX.Camera.Core.ICameraInfo.MustPlayShutterSound() -> bool
AndroidX.Camera.Core.ICameraInfo.PhysicalCameraInfos.get -> System.Collections.Generic.ICollection<AndroidX.Camera.Core.ICameraInfo!>!
AndroidX.Camera.Core.ICameraInfo.QuerySupportedDynamicRanges(System.Collections.Generic.ICollection<AndroidX.Camera.Core.DynamicRange!>! candidateDynamicRanges) -> System.Collections.Generic.ICollection<AndroidX.Camera.Core.DynamicRange!>!
AndroidX.Camera.Core.ICameraInfo.SensorRotationDegrees.get -> int
AndroidX.Camera.Core.ICameraInfo.SupportedFrameRateRanges.get -> System.Collections.Generic.ICollection<Android.Util.Range!>!
AndroidX.Camera.Core.ICameraInfo.TorchState.get -> AndroidX.Lifecycle.LiveData!
AndroidX.Camera.Core.ICameraInfo.ZoomState.get -> AndroidX.Lifecycle.LiveData!
AndroidX.Camera.Core.ICameraInfoImplementationType
AndroidX.Camera.Core.ICameraProvider
AndroidX.Camera.Core.ICameraProvider.AvailableCameraInfos.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.ICameraInfo!>!
AndroidX.Camera.Core.ICameraProvider.GetCameraInfo(AndroidX.Camera.Core.CameraSelector! cameraSelector) -> AndroidX.Camera.Core.ICameraInfo!
AndroidX.Camera.Core.ICameraProvider.HasCamera(AndroidX.Camera.Core.CameraSelector! p0) -> bool
AndroidX.Camera.Core.IExperimentalCameraInfo
AndroidX.Camera.Core.IExperimentalGetImage
AndroidX.Camera.Core.IExperimentalImageCaptureOutputFormat
AndroidX.Camera.Core.IExperimentalLensFacing
AndroidX.Camera.Core.IExperimentalMirrorMode
AndroidX.Camera.Core.IExperimentalRetryPolicy
AndroidX.Camera.Core.IExperimentalUseCaseApi
AndroidX.Camera.Core.IExperimentalZeroShutterLag
AndroidX.Camera.Core.IExposureState
AndroidX.Camera.Core.IExposureState.ExposureCompensationIndex.get -> int
AndroidX.Camera.Core.IExposureState.ExposureCompensationRange.get -> Android.Util.Range!
AndroidX.Camera.Core.IExposureState.ExposureCompensationStep.get -> Android.Util.Rational!
AndroidX.Camera.Core.IExposureState.IsExposureCompensationSupported.get -> bool
AndroidX.Camera.Core.IExtendableBuilder
AndroidX.Camera.Core.IExtendableBuilder.Build() -> Java.Lang.Object!
AndroidX.Camera.Core.IExtendableBuilder.MutableConfig.get -> AndroidX.Camera.Core.Impl.IMutableConfig!
AndroidX.Camera.Core.IImageCaptureCapabilities
AndroidX.Camera.Core.IImageCaptureCapabilities.IsCaptureProcessProgressSupported.get -> bool
AndroidX.Camera.Core.IImageCaptureCapabilities.IsPostviewSupported.get -> bool
AndroidX.Camera.Core.IImageCaptureCapabilities.SupportedOutputFormats.get -> System.Collections.Generic.ICollection<Java.Lang.Integer!>!
AndroidX.Camera.Core.IImageInfo
AndroidX.Camera.Core.IImageInfo.PopulateExifData(AndroidX.Camera.Core.Impl.Utils.ExifData.Builder! p0) -> void
AndroidX.Camera.Core.IImageInfo.RotationDegrees.get -> int
AndroidX.Camera.Core.IImageInfo.SensorToBufferTransformMatrix.get -> Android.Graphics.Matrix!
AndroidX.Camera.Core.IImageInfo.TagBundle.get -> AndroidX.Camera.Core.Impl.TagBundle!
AndroidX.Camera.Core.IImageInfo.Timestamp.get -> long
AndroidX.Camera.Core.IImageProcessor
AndroidX.Camera.Core.IImageProcessor.Process(AndroidX.Camera.Core.IImageProcessorRequest! p0) -> AndroidX.Camera.Core.IImageProcessorResponse!
AndroidX.Camera.Core.IImageProcessorOutputFormats
AndroidX.Camera.Core.IImageProcessorRequest
AndroidX.Camera.Core.IImageProcessorRequest.InputImage.get -> AndroidX.Camera.Core.IImageProxy!
AndroidX.Camera.Core.IImageProcessorRequest.OutputFormat.get -> int
AndroidX.Camera.Core.IImageProcessorResponse
AndroidX.Camera.Core.IImageProcessorResponse.OutputImage.get -> AndroidX.Camera.Core.IImageProxy!
AndroidX.Camera.Core.IImageProxy
AndroidX.Camera.Core.IImageProxy.Close() -> void
AndroidX.Camera.Core.IImageProxy.CropRect.get -> Android.Graphics.Rect!
AndroidX.Camera.Core.IImageProxy.CropRect.set -> void
AndroidX.Camera.Core.IImageProxy.Format.get -> int
AndroidX.Camera.Core.IImageProxy.GetPlanes() -> AndroidX.Camera.Core.IImageProxyPlaneProxy![]!
AndroidX.Camera.Core.IImageProxy.Height.get -> int
AndroidX.Camera.Core.IImageProxy.Image.get -> Android.Media.Image?
AndroidX.Camera.Core.IImageProxy.ImageInfo.get -> AndroidX.Camera.Core.IImageInfo!
AndroidX.Camera.Core.IImageProxy.ToBitmap() -> Android.Graphics.Bitmap!
AndroidX.Camera.Core.IImageProxy.Width.get -> int
AndroidX.Camera.Core.IImageProxyPlaneProxy
AndroidX.Camera.Core.IImageProxyPlaneProxy.Buffer.get -> Java.Nio.ByteBuffer!
AndroidX.Camera.Core.IImageProxyPlaneProxy.PixelStride.get -> int
AndroidX.Camera.Core.IImageProxyPlaneProxy.RowStride.get -> int
AndroidX.Camera.Core.IImageReaderProxyProvider
AndroidX.Camera.Core.IImageReaderProxyProvider.NewInstance(int p0, int p1, int p2, int p3, long p4) -> AndroidX.Camera.Core.Impl.IImageReaderProxy!
AndroidX.Camera.Core.IPreviewCapabilities
AndroidX.Camera.Core.IPreviewCapabilities.IsStabilizationSupported.get -> bool
AndroidX.Camera.Core.IRetryPolicy
AndroidX.Camera.Core.IRetryPolicy.Default.get -> AndroidX.Camera.Core.IRetryPolicy!
AndroidX.Camera.Core.IRetryPolicy.DefaultRetryTimeoutInMillis.get -> long
AndroidX.Camera.Core.IRetryPolicy.Never.get -> AndroidX.Camera.Core.IRetryPolicy!
AndroidX.Camera.Core.IRetryPolicy.OnRetryDecisionRequested(AndroidX.Camera.Core.IRetryPolicyExecutionState! p0) -> AndroidX.Camera.Core.RetryPolicyRetryConfig!
AndroidX.Camera.Core.IRetryPolicy.RetryUnavailableCamera.get -> AndroidX.Camera.Core.IRetryPolicy!
AndroidX.Camera.Core.IRetryPolicy.TimeoutInMillis.get -> long
AndroidX.Camera.Core.IRetryPolicyExecutionState
AndroidX.Camera.Core.IRetryPolicyExecutionState.Cause.get -> Java.Lang.Throwable?
AndroidX.Camera.Core.IRetryPolicyExecutionState.ExecutedTimeInMillis.get -> long
AndroidX.Camera.Core.IRetryPolicyExecutionState.NumOfAttempts.get -> int
AndroidX.Camera.Core.IRetryPolicyExecutionState.Status.get -> int
AndroidX.Camera.Core.IRetryPolicyExecutionStateStatus
AndroidX.Camera.Core.ISurfaceOutput
AndroidX.Camera.Core.ISurfaceOutput.Close() -> void
AndroidX.Camera.Core.ISurfaceOutput.Format.get -> int
AndroidX.Camera.Core.ISurfaceOutput.GetSurface(Java.Util.Concurrent.IExecutor! p0, AndroidX.Core.Util.IConsumer! p1) -> Android.Views.Surface!
AndroidX.Camera.Core.ISurfaceOutput.SensorToBufferTransform.get -> Android.Graphics.Matrix!
AndroidX.Camera.Core.ISurfaceOutput.Size.get -> Android.Util.Size!
AndroidX.Camera.Core.ISurfaceOutput.Targets.get -> int
AndroidX.Camera.Core.ISurfaceOutput.UpdateTransformMatrix(float[]! p0, float[]! p1) -> void
AndroidX.Camera.Core.ISurfaceOutput.UpdateTransformMatrix(float[]! updated, float[]! original, bool isPrimary) -> void
AndroidX.Camera.Core.ISurfaceProcessor
AndroidX.Camera.Core.ISurfaceProcessor.OnInputSurface(AndroidX.Camera.Core.SurfaceRequest! p0) -> void
AndroidX.Camera.Core.ISurfaceProcessor.OnOutputSurface(AndroidX.Camera.Core.ISurfaceOutput! p0) -> void
AndroidX.Camera.Core.IZoomState
AndroidX.Camera.Core.IZoomState.LinearZoom.get -> float
AndroidX.Camera.Core.IZoomState.MaxZoomRatio.get -> float
AndroidX.Camera.Core.IZoomState.MinZoomRatio.get -> float
AndroidX.Camera.Core.IZoomState.ZoomRatio.get -> float
AndroidX.Camera.Core.ImageAnalysis
AndroidX.Camera.Core.ImageAnalysis.BackgroundExecutor.get -> Java.Util.Concurrent.IExecutor?
AndroidX.Camera.Core.ImageAnalysis.BackpressureStrategy.get -> int
AndroidX.Camera.Core.ImageAnalysis.Builder
AndroidX.Camera.Core.ImageAnalysis.Builder.Build() -> AndroidX.Camera.Core.ImageAnalysis!
AndroidX.Camera.Core.ImageAnalysis.Builder.Builder() -> void
AndroidX.Camera.Core.ImageAnalysis.Builder.MutableConfig.get -> AndroidX.Camera.Core.Impl.IMutableConfig!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetBackgroundExecutor(Java.Util.Concurrent.IExecutor! executor) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetBackpressureStrategy(int strategy) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetCaptureOptionUnpacker(AndroidX.Camera.Core.Impl.CaptureConfig.IOptionUnpacker! optionUnpacker) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetCaptureType(AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType! captureType) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetCustomOrderedResolutions(System.Collections.Generic.IList<Android.Util.Size!>! resolutions) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetDefaultCaptureConfig(AndroidX.Camera.Core.Impl.CaptureConfig! captureConfig) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetDefaultResolution(Android.Util.Size! resolution) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetDefaultSessionConfig(AndroidX.Camera.Core.Impl.SessionConfig! sessionConfig) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetDynamicRange(AndroidX.Camera.Core.DynamicRange! dynamicRange) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetHighResolutionDisabled(bool disabled) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetImageQueueDepth(int depth) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetImageReaderProxyProvider(AndroidX.Camera.Core.IImageReaderProxyProvider! imageReaderProxyProvider) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetMaxResolution(Android.Util.Size! resolution) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetMirrorMode(int mirrorMode) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetOnePixelShiftEnabled(bool onePixelShiftEnabled) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetOutputImageFormat(int outputImageFormat) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetOutputImageRotationEnabled(bool outputImageRotationEnabled) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetResolutionSelector(AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector! resolutionSelector) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetSessionOptionUnpacker(AndroidX.Camera.Core.Impl.SessionConfig.IOptionUnpacker! optionUnpacker) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetSupportedResolutions(System.Collections.Generic.IList<Android.Util.Pair!>! resolutions) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetSurfaceOccupancyPriority(int priority) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetTargetAspectRatio(int aspectRatio) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetTargetClass(Java.Lang.Class! targetClass) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetTargetName(string! targetName) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetTargetResolution(Android.Util.Size! resolution) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetTargetRotation(int rotation) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.SetZslDisabled(bool disabled) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
AndroidX.Camera.Core.ImageAnalysis.Builder.UseCaseConfig.get -> AndroidX.Camera.Core.Impl.ImageAnalysisConfig!
AndroidX.Camera.Core.ImageAnalysis.ClearAnalyzer() -> void
AndroidX.Camera.Core.ImageAnalysis.Defaults
AndroidX.Camera.Core.ImageAnalysis.Defaults.Config.get -> AndroidX.Camera.Core.Impl.ImageAnalysisConfig!
AndroidX.Camera.Core.ImageAnalysis.Defaults.Defaults() -> void
AndroidX.Camera.Core.ImageAnalysis.IAnalyzer
AndroidX.Camera.Core.ImageAnalysis.IAnalyzer.Analyze(AndroidX.Camera.Core.IImageProxy! p0) -> void
AndroidX.Camera.Core.ImageAnalysis.IAnalyzer.DefaultTargetResolution.get -> Android.Util.Size?
AndroidX.Camera.Core.ImageAnalysis.IAnalyzer.TargetCoordinateSystem.get -> int
AndroidX.Camera.Core.ImageAnalysis.IAnalyzer.UpdateTransform(Android.Graphics.Matrix? matrix) -> void
AndroidX.Camera.Core.ImageAnalysis.IBackpressureStrategy
AndroidX.Camera.Core.ImageAnalysis.IOutputImageFormat
AndroidX.Camera.Core.ImageAnalysis.ImageQueueDepth.get -> int
AndroidX.Camera.Core.ImageAnalysis.IsOutputImageRotationEnabled.get -> bool
AndroidX.Camera.Core.ImageAnalysis.OnePixelShiftEnabled.get -> Java.Lang.Boolean?
AndroidX.Camera.Core.ImageAnalysis.OutputImageFormat.get -> int
AndroidX.Camera.Core.ImageAnalysis.ResolutionInfo.get -> AndroidX.Camera.Core.ResolutionInfo?
AndroidX.Camera.Core.ImageAnalysis.ResolutionSelector.get -> AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector?
AndroidX.Camera.Core.ImageAnalysis.SetAnalyzer(Java.Util.Concurrent.IExecutor! executor, AndroidX.Camera.Core.ImageAnalysis.IAnalyzer! analyzer) -> void
AndroidX.Camera.Core.ImageAnalysis.TargetRotation.get -> int
AndroidX.Camera.Core.ImageAnalysis.TargetRotation.set -> void
AndroidX.Camera.Core.ImageCapture
AndroidX.Camera.Core.ImageCapture.Builder
AndroidX.Camera.Core.ImageCapture.Builder.Build() -> AndroidX.Camera.Core.ImageCapture!
AndroidX.Camera.Core.ImageCapture.Builder.Builder() -> void
AndroidX.Camera.Core.ImageCapture.Builder.MutableConfig.get -> AndroidX.Camera.Core.Impl.IMutableConfig!
AndroidX.Camera.Core.ImageCapture.Builder.SetBufferFormat(int bufferImageFormat) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetCaptureMode(int captureMode) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetCaptureOptionUnpacker(AndroidX.Camera.Core.Impl.CaptureConfig.IOptionUnpacker! optionUnpacker) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetCaptureType(AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType! captureType) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetCustomOrderedResolutions(System.Collections.Generic.IList<Android.Util.Size!>! resolutions) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetDefaultCaptureConfig(AndroidX.Camera.Core.Impl.CaptureConfig! captureConfig) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetDefaultResolution(Android.Util.Size! resolution) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetDefaultSessionConfig(AndroidX.Camera.Core.Impl.SessionConfig! sessionConfig) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetDynamicRange(AndroidX.Camera.Core.DynamicRange! dynamicRange) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetFlashMode(int flashMode) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetFlashType(int flashType) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetHighResolutionDisabled(bool disabled) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetImageReaderProxyProvider(AndroidX.Camera.Core.IImageReaderProxyProvider! imageReaderProxyProvider) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetIoExecutor(Java.Util.Concurrent.IExecutor! executor) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetJpegQuality(int jpegQuality) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetMaxResolution(Android.Util.Size! resolution) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetMirrorMode(int mirrorMode) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetOutputFormat(int outputFormat) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetPostviewEnabled(bool postviewEnabled) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetPostviewResolutionSelector(AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector! resolutionSelector) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetResolutionSelector(AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector! resolutionSelector) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetScreenFlash(AndroidX.Camera.Core.ImageCapture.IScreenFlash! screenFlash) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetSessionOptionUnpacker(AndroidX.Camera.Core.Impl.SessionConfig.IOptionUnpacker! optionUnpacker) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetSoftwareJpegEncoderRequested(bool requestSoftwareJpeg) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetSupportedResolutions(System.Collections.Generic.IList<Android.Util.Pair!>! resolutions) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetSurfaceOccupancyPriority(int priority) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetTargetAspectRatio(int aspectRatio) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetTargetClass(Java.Lang.Class! targetClass) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetTargetName(string! targetName) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetTargetResolution(Android.Util.Size! resolution) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetTargetRotation(int rotation) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.SetZslDisabled(bool disabled) -> AndroidX.Camera.Core.ImageCapture.Builder!
AndroidX.Camera.Core.ImageCapture.Builder.UseCaseConfig.get -> AndroidX.Camera.Core.Impl.ImageCaptureConfig!
AndroidX.Camera.Core.ImageCapture.CaptureMode.get -> int
AndroidX.Camera.Core.ImageCapture.Defaults
AndroidX.Camera.Core.ImageCapture.Defaults.Config.get -> AndroidX.Camera.Core.Impl.ImageCaptureConfig!
AndroidX.Camera.Core.ImageCapture.Defaults.Defaults() -> void
AndroidX.Camera.Core.ImageCapture.FlashMode.get -> int
AndroidX.Camera.Core.ImageCapture.FlashMode.set -> void
AndroidX.Camera.Core.ImageCapture.ICaptureMode
AndroidX.Camera.Core.ImageCapture.IFlashMode
AndroidX.Camera.Core.ImageCapture.IFlashType
AndroidX.Camera.Core.ImageCapture.IImageCaptureError
AndroidX.Camera.Core.ImageCapture.IOnImageSavedCallback
AndroidX.Camera.Core.ImageCapture.IOnImageSavedCallback.OnCaptureProcessProgressed(int progress) -> void
AndroidX.Camera.Core.ImageCapture.IOnImageSavedCallback.OnCaptureStarted() -> void
AndroidX.Camera.Core.ImageCapture.IOnImageSavedCallback.OnError(AndroidX.Camera.Core.ImageCaptureException! p0) -> void
AndroidX.Camera.Core.ImageCapture.IOnImageSavedCallback.OnImageSaved(AndroidX.Camera.Core.ImageCapture.OutputFileResults! p0) -> void
AndroidX.Camera.Core.ImageCapture.IOnImageSavedCallback.OnPostviewBitmapAvailable(Android.Graphics.Bitmap! bitmap) -> void
AndroidX.Camera.Core.ImageCapture.IOutputFormat
AndroidX.Camera.Core.ImageCapture.IScreenFlash
AndroidX.Camera.Core.ImageCapture.IScreenFlash.Apply(long p0, AndroidX.Camera.Core.ImageCapture.IScreenFlashListener! p1) -> void
AndroidX.Camera.Core.ImageCapture.IScreenFlash.Clear() -> void
AndroidX.Camera.Core.ImageCapture.IScreenFlashListener
AndroidX.Camera.Core.ImageCapture.IScreenFlashListener.OnCompleted() -> void
AndroidX.Camera.Core.ImageCapture.IsPostviewEnabled.get -> bool
AndroidX.Camera.Core.ImageCapture.JpegQuality.get -> int
AndroidX.Camera.Core.ImageCapture.Metadata
AndroidX.Camera.Core.ImageCapture.Metadata.IsReversedHorizontalSet.get -> bool
AndroidX.Camera.Core.ImageCapture.Metadata.Location.get -> Android.Locations.Location?
AndroidX.Camera.Core.ImageCapture.Metadata.Location.set -> void
AndroidX.Camera.Core.ImageCapture.Metadata.Metadata() -> void
AndroidX.Camera.Core.ImageCapture.Metadata.ReversedHorizontal.get -> bool
AndroidX.Camera.Core.ImageCapture.Metadata.ReversedHorizontal.set -> void
AndroidX.Camera.Core.ImageCapture.Metadata.ReversedVertical.get -> bool
AndroidX.Camera.Core.ImageCapture.Metadata.ReversedVertical.set -> void
AndroidX.Camera.Core.ImageCapture.OnImageCapturedCallback
AndroidX.Camera.Core.ImageCapture.OnImageCapturedCallback.OnImageCapturedCallback() -> void
AndroidX.Camera.Core.ImageCapture.OnImageCapturedCallback.OnImageCapturedCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.ImageCapture.OutputFileOptions
AndroidX.Camera.Core.ImageCapture.OutputFileOptions.Builder
AndroidX.Camera.Core.ImageCapture.OutputFileOptions.Builder.Build() -> AndroidX.Camera.Core.ImageCapture.OutputFileOptions!
AndroidX.Camera.Core.ImageCapture.OutputFileOptions.Builder.Builder(Android.Content.ContentResolver! contentResolver, Android.Net.Uri! saveCollection, Android.Content.ContentValues! contentValues) -> void
AndroidX.Camera.Core.ImageCapture.OutputFileOptions.Builder.Builder(Java.IO.File! file) -> void
AndroidX.Camera.Core.ImageCapture.OutputFileOptions.Builder.Builder(System.IO.Stream! outputStream) -> void
AndroidX.Camera.Core.ImageCapture.OutputFileOptions.Builder.SetMetadata(AndroidX.Camera.Core.ImageCapture.Metadata! metadata) -> AndroidX.Camera.Core.ImageCapture.OutputFileOptions.Builder!
AndroidX.Camera.Core.ImageCapture.OutputFileOptions.ContentResolver.get -> Android.Content.ContentResolver?
AndroidX.Camera.Core.ImageCapture.OutputFileOptions.ContentValues.get -> Android.Content.ContentValues?
AndroidX.Camera.Core.ImageCapture.OutputFileOptions.File.get -> Java.IO.File?
AndroidX.Camera.Core.ImageCapture.OutputFileOptions.Metadata.get -> AndroidX.Camera.Core.ImageCapture.Metadata!
AndroidX.Camera.Core.ImageCapture.OutputFileOptions.OutputStream.get -> System.IO.Stream?
AndroidX.Camera.Core.ImageCapture.OutputFileOptions.SaveCollection.get -> Android.Net.Uri?
AndroidX.Camera.Core.ImageCapture.OutputFileResults
AndroidX.Camera.Core.ImageCapture.OutputFileResults.OutputFileResults(Android.Net.Uri? savedUri) -> void
AndroidX.Camera.Core.ImageCapture.OutputFileResults.OutputFileResults(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.ImageCapture.OutputFormat.get -> int
AndroidX.Camera.Core.ImageCapture.PostviewResolutionSelector.get -> AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector?
AndroidX.Camera.Core.ImageCapture.RealtimeCaptureLatencyEstimate.get -> AndroidX.Camera.Core.ImageCaptureLatencyEstimate!
AndroidX.Camera.Core.ImageCapture.ResolutionInfo.get -> AndroidX.Camera.Core.ResolutionInfo?
AndroidX.Camera.Core.ImageCapture.ResolutionSelector.get -> AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector?
AndroidX.Camera.Core.ImageCapture.ScreenFlash.get -> AndroidX.Camera.Core.ImageCapture.IScreenFlash?
AndroidX.Camera.Core.ImageCapture.ScreenFlash.set -> void
AndroidX.Camera.Core.ImageCapture.SetCropAspectRatio(Android.Util.Rational! aspectRatio) -> void
AndroidX.Camera.Core.ImageCapture.TakePicture(AndroidX.Camera.Core.ImageCapture.OutputFileOptions! outputFileOptions, Java.Util.Concurrent.IExecutor! executor, AndroidX.Camera.Core.ImageCapture.IOnImageSavedCallback! imageSavedCallback) -> void
AndroidX.Camera.Core.ImageCapture.TakePicture(Java.Util.Concurrent.IExecutor! executor, AndroidX.Camera.Core.ImageCapture.OnImageCapturedCallback! callback) -> void
AndroidX.Camera.Core.ImageCapture.TargetRotation.get -> int
AndroidX.Camera.Core.ImageCapture.TargetRotation.set -> void
AndroidX.Camera.Core.ImageCaptureException
AndroidX.Camera.Core.ImageCaptureException.ImageCaptureException(int imageCaptureError, string! message, Java.Lang.Throwable? cause) -> void
AndroidX.Camera.Core.ImageCaptureException.ImageCaptureException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.ImageCaptureExtKt
AndroidX.Camera.Core.ImageCaptureLatencyEstimate
AndroidX.Camera.Core.ImageCaptureLatencyEstimate.ImageCaptureLatencyEstimate(long captureLatencyMillis, long processingLatencyMillis) -> void
AndroidX.Camera.Core.ImageCaptureLatencyEstimate.ImageCaptureLatencyEstimate(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.ImageCaptures.BitmapEffect
AndroidX.Camera.Core.ImageCaptures.BitmapEffect.BitmapEffect(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.ImageCaptures.CameraRequest
AndroidX.Camera.Core.ImageCaptures.ICameraCapturePipeline
AndroidX.Camera.Core.ImageCaptures.ICameraCapturePipeline.InvokePostCapture() -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.ImageCaptures.ICameraCapturePipeline.InvokePreCapture() -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.ImageCaptures.IImageCaptureControl
AndroidX.Camera.Core.ImageCaptures.IImageCaptureControl.LockFlashMode() -> void
AndroidX.Camera.Core.ImageCaptures.IImageCaptureControl.SubmitStillCaptureRequests(System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.CaptureConfig!>! p0) -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.ImageCaptures.IImageCaptureControl.UnlockFlashMode() -> void
AndroidX.Camera.Core.ImageCaptures.Image2Bitmap
AndroidX.Camera.Core.ImageCaptures.Image2Bitmap.Image2Bitmap() -> void
AndroidX.Camera.Core.ImageCaptures.Image2Bitmap.Image2Bitmap(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.ImageCaptures.ImagePipeline
AndroidX.Camera.Core.ImageCaptures.ImagePipeline.ImageClose -> System.EventHandler<AndroidX.Camera.Core.ForwardingImageProxy.ImageCloseEventArgs!>!
AndroidX.Camera.Core.ImageCaptures.ImagePipeline.ImagePipeline(AndroidX.Camera.Core.Impl.ImageCaptureConfig! useCaseConfig, Android.Util.Size! cameraSurfaceSize) -> void
AndroidX.Camera.Core.ImageCaptures.ImagePipeline.ImagePipeline(AndroidX.Camera.Core.Impl.ImageCaptureConfig! useCaseConfig, Android.Util.Size! cameraSurfaceSize, AndroidX.Camera.Core.CameraEffect? cameraEffect, bool isVirtualCamera) -> void
AndroidX.Camera.Core.ImageCaptures.ImagePipeline.ImagePipeline(AndroidX.Camera.Core.Impl.ImageCaptureConfig! useCaseConfig, Android.Util.Size! cameraSurfaceSize, AndroidX.Camera.Core.CameraEffect? cameraEffect, bool isVirtualCamera, Android.Util.Size? postviewSize, int postviewImageFormat) -> void
AndroidX.Camera.Core.ImageCaptures.ImagePipeline.ImagePipeline(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.ImageCaptures.JpegBytes2Image
AndroidX.Camera.Core.ImageCaptures.JpegBytes2Image.JpegBytes2Image() -> void
AndroidX.Camera.Core.ImageCaptures.JpegBytes2Image.JpegBytes2Image(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.ImageCaptures.JpegImage2Result
AndroidX.Camera.Core.ImageCaptures.JpegImage2Result.JpegImage2Result() -> void
AndroidX.Camera.Core.ImageCaptures.JpegImage2Result.JpegImage2Result(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.ImageCaptures.NoMetadataImageReader
AndroidX.Camera.Core.ImageCaptures.NoMetadataImageReader.NoMetadataImageReader(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.ImageCaptures.ProcessingNode
AndroidX.Camera.Core.ImageCaptures.ProcessingNode.In
AndroidX.Camera.Core.ImageCaptures.ProcessingNode.In.In(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.ImageCaptures.ProcessingNode.ProcessingNode(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.ImageCaptures.RequestWithCallback
AndroidX.Camera.Core.ImageCaptures.RequestWithCallback.RequestWithCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.ImageCaptures.RgbaImageProxy
AndroidX.Camera.Core.ImageCaptures.RgbaImageProxy.Close() -> void
AndroidX.Camera.Core.ImageCaptures.RgbaImageProxy.CreateBitmap() -> Android.Graphics.Bitmap!
AndroidX.Camera.Core.ImageCaptures.RgbaImageProxy.CropRect.get -> Android.Graphics.Rect!
AndroidX.Camera.Core.ImageCaptures.RgbaImageProxy.CropRect.set -> void
AndroidX.Camera.Core.ImageCaptures.RgbaImageProxy.Format.get -> int
AndroidX.Camera.Core.ImageCaptures.RgbaImageProxy.GetPlanes() -> AndroidX.Camera.Core.IImageProxyPlaneProxy![]!
AndroidX.Camera.Core.ImageCaptures.RgbaImageProxy.Height.get -> int
AndroidX.Camera.Core.ImageCaptures.RgbaImageProxy.Image.get -> Android.Media.Image?
AndroidX.Camera.Core.ImageCaptures.RgbaImageProxy.ImageInfo.get -> AndroidX.Camera.Core.IImageInfo!
AndroidX.Camera.Core.ImageCaptures.RgbaImageProxy.RgbaImageProxy(Android.Graphics.Bitmap! bitmap, Android.Graphics.Rect! cropRect, int rotationDegrees, Android.Graphics.Matrix! sensorToBuffer, long timestamp) -> void
AndroidX.Camera.Core.ImageCaptures.RgbaImageProxy.RgbaImageProxy(AndroidX.Camera.Core.Processing.Packet! packet) -> void
AndroidX.Camera.Core.ImageCaptures.RgbaImageProxy.RgbaImageProxy(Java.Nio.ByteBuffer! byteBuffer, int pixelStride, int width, int height, Android.Graphics.Rect! cropRect, int rotationDegrees, Android.Graphics.Matrix! sensorToBuffer, long timestamp) -> void
AndroidX.Camera.Core.ImageCaptures.RgbaImageProxy.Width.get -> int
AndroidX.Camera.Core.ImageCaptures.TakePictureManager
AndroidX.Camera.Core.ImageCaptures.TakePictureManager.TakePictureManager(AndroidX.Camera.Core.ImageCaptures.IImageCaptureControl! imageCaptureControl) -> void
AndroidX.Camera.Core.ImageCaptures.TakePictureManager.TakePictureManager(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.ImageCaptures.TakePictureRequest
AndroidX.Camera.Core.ImageCaptures.TakePictureRequest.TakePictureRequest() -> void
AndroidX.Camera.Core.ImageCaptures.TakePictureRequest.TakePictureRequest(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.ImageProcessingUtil
AndroidX.Camera.Core.ImageReaderProxys
AndroidX.Camera.Core.ImmutableImageInfo
AndroidX.Camera.Core.ImmutableImageInfo.ImmutableImageInfo() -> void
AndroidX.Camera.Core.ImmutableImageInfo.ImmutableImageInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.Annotation.ExecutedByAttribute
AndroidX.Camera.Core.Impl.Annotation.ExecutedByAttribute.ExecutedByAttribute() -> void
AndroidX.Camera.Core.Impl.Annotation.ExecutedByAttribute.Value.get -> string?
AndroidX.Camera.Core.Impl.Annotation.ExecutedByAttribute.Value.set -> void
AndroidX.Camera.Core.Impl.Annotation.IExecutedBy
AndroidX.Camera.Core.Impl.Annotation.IExecutedBy.Value() -> string?
AndroidX.Camera.Core.Impl.AttachedSurfaceInfo
AndroidX.Camera.Core.Impl.AttachedSurfaceInfo.AttachedSurfaceInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.CameraCaptureCallback
AndroidX.Camera.Core.Impl.CameraCaptureCallback.CameraCaptureCallback() -> void
AndroidX.Camera.Core.Impl.CameraCaptureCallback.CameraCaptureCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.CameraCaptureCallbacks
AndroidX.Camera.Core.Impl.CameraCaptureCallbacks.ComboCameraCaptureCallback
AndroidX.Camera.Core.Impl.CameraCaptureCallbacks.ComboCameraCaptureCallback.Callbacks.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.CameraCaptureCallback!>!
AndroidX.Camera.Core.Impl.CameraCaptureFailure
AndroidX.Camera.Core.Impl.CameraCaptureFailure.CameraCaptureFailure(AndroidX.Camera.Core.Impl.CameraCaptureFailure.Reason! reason) -> void
AndroidX.Camera.Core.Impl.CameraCaptureFailure.CameraCaptureFailure(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.CameraCaptureFailure.Reason
AndroidX.Camera.Core.Impl.CameraCaptureMetaData
AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode
AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeState
AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfMode
AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState
AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode
AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbState
AndroidX.Camera.Core.Impl.CameraCaptureMetaData.FlashState
AndroidX.Camera.Core.Impl.CameraCaptureResultEmptyCameraCaptureResult
AndroidX.Camera.Core.Impl.CameraCaptureResultEmptyCameraCaptureResult.AeMode.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode!
AndroidX.Camera.Core.Impl.CameraCaptureResultEmptyCameraCaptureResult.AeState.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeState!
AndroidX.Camera.Core.Impl.CameraCaptureResultEmptyCameraCaptureResult.AfMode.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfMode!
AndroidX.Camera.Core.Impl.CameraCaptureResultEmptyCameraCaptureResult.AfState.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState!
AndroidX.Camera.Core.Impl.CameraCaptureResultEmptyCameraCaptureResult.AwbMode.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode!
AndroidX.Camera.Core.Impl.CameraCaptureResultEmptyCameraCaptureResult.AwbState.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbState!
AndroidX.Camera.Core.Impl.CameraCaptureResultEmptyCameraCaptureResult.CameraCaptureResultEmptyCameraCaptureResult() -> void
AndroidX.Camera.Core.Impl.CameraCaptureResultEmptyCameraCaptureResult.CaptureResult.get -> Android.Hardware.Camera2.CaptureResult?
AndroidX.Camera.Core.Impl.CameraCaptureResultEmptyCameraCaptureResult.FlashState.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.FlashState!
AndroidX.Camera.Core.Impl.CameraCaptureResultEmptyCameraCaptureResult.TagBundle.get -> AndroidX.Camera.Core.Impl.TagBundle!
AndroidX.Camera.Core.Impl.CameraCaptureResultEmptyCameraCaptureResult.Timestamp.get -> long
AndroidX.Camera.Core.Impl.CameraCaptureResults
AndroidX.Camera.Core.Impl.CameraConfig
AndroidX.Camera.Core.Impl.CameraConfigConsts
AndroidX.Camera.Core.Impl.CameraConfigProvider
AndroidX.Camera.Core.Impl.CameraConfigProviderConsts
AndroidX.Camera.Core.Impl.CameraConfigs
AndroidX.Camera.Core.Impl.CameraConfigs.CameraConfigs(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.CameraControlInternal
AndroidX.Camera.Core.Impl.CameraControlInternalCameraControlException
AndroidX.Camera.Core.Impl.CameraControlInternalCameraControlException.CameraCaptureFailure.get -> AndroidX.Camera.Core.Impl.CameraCaptureFailure!
AndroidX.Camera.Core.Impl.CameraControlInternalCameraControlException.CameraControlInternalCameraControlException(AndroidX.Camera.Core.Impl.CameraCaptureFailure! failure) -> void
AndroidX.Camera.Core.Impl.CameraControlInternalCameraControlException.CameraControlInternalCameraControlException(AndroidX.Camera.Core.Impl.CameraCaptureFailure! failure, Java.Lang.Throwable! cause) -> void
AndroidX.Camera.Core.Impl.CameraControlInternalConsts
AndroidX.Camera.Core.Impl.CameraFilters
AndroidX.Camera.Core.Impl.CameraFilters.CameraFilters(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.CameraInternalState
AndroidX.Camera.Core.Impl.CameraMode
AndroidX.Camera.Core.Impl.CameraMode.IMode
AndroidX.Camera.Core.Impl.CameraProviderExecutionState
AndroidX.Camera.Core.Impl.CameraProviderExecutionState.CameraProviderExecutionState(long taskStartTimeInMillis, int attemptCount, Java.Lang.Throwable? throwable) -> void
AndroidX.Camera.Core.Impl.CameraProviderExecutionState.Cause.get -> Java.Lang.Throwable?
AndroidX.Camera.Core.Impl.CameraProviderExecutionState.ExecutedTimeInMillis.get -> long
AndroidX.Camera.Core.Impl.CameraProviderExecutionState.InterfaceConsts
AndroidX.Camera.Core.Impl.CameraProviderExecutionState.NumOfAttempts.get -> int
AndroidX.Camera.Core.Impl.CameraProviderExecutionState.Status.get -> int
AndroidX.Camera.Core.Impl.CameraProviderInitRetryPolicy
AndroidX.Camera.Core.Impl.CameraProviderInitRetryPolicy.CameraProviderInitRetryPolicy(long timeoutInMillis) -> void
AndroidX.Camera.Core.Impl.CameraProviderInitRetryPolicy.Copy(long timeoutInMillis) -> AndroidX.Camera.Core.IRetryPolicy!
AndroidX.Camera.Core.Impl.CameraProviderInitRetryPolicy.InterfaceConsts
AndroidX.Camera.Core.Impl.CameraProviderInitRetryPolicy.Legacy
AndroidX.Camera.Core.Impl.CameraProviderInitRetryPolicy.Legacy.Copy(long timeoutInMillis) -> AndroidX.Camera.Core.IRetryPolicy!
AndroidX.Camera.Core.Impl.CameraProviderInitRetryPolicy.Legacy.InterfaceConsts
AndroidX.Camera.Core.Impl.CameraProviderInitRetryPolicy.Legacy.Legacy(long timeoutInMillis) -> void
AndroidX.Camera.Core.Impl.CameraProviderInitRetryPolicy.Legacy.OnRetryDecisionRequested(AndroidX.Camera.Core.IRetryPolicyExecutionState! executionState) -> AndroidX.Camera.Core.RetryPolicyRetryConfig!
AndroidX.Camera.Core.Impl.CameraProviderInitRetryPolicy.Legacy.TimeoutInMillis.get -> long
AndroidX.Camera.Core.Impl.CameraProviderInitRetryPolicy.OnRetryDecisionRequested(AndroidX.Camera.Core.IRetryPolicyExecutionState! executionState) -> AndroidX.Camera.Core.RetryPolicyRetryConfig!
AndroidX.Camera.Core.Impl.CameraProviderInitRetryPolicy.TimeoutInMillis.get -> long
AndroidX.Camera.Core.Impl.CameraRepository
AndroidX.Camera.Core.Impl.CameraRepository.CameraRepository() -> void
AndroidX.Camera.Core.Impl.CameraRepository.Cameras.get -> Java.Util.LinkedHashSet!
AndroidX.Camera.Core.Impl.CameraRepository.Deinit() -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.Impl.CameraRepository.GetCamera(string! cameraId) -> AndroidX.Camera.Core.Impl.ICameraInternal!
AndroidX.Camera.Core.Impl.CameraRepository.Init(AndroidX.Camera.Core.Impl.ICameraFactory! cameraFactory) -> void
AndroidX.Camera.Core.Impl.CameraStateRegistry
AndroidX.Camera.Core.Impl.CameraStateRegistry.CameraStateRegistry(AndroidX.Camera.Core.Concurrent.ICameraCoordinator! cameraCoordinator, int maxAllowedOpenedCameras) -> void
AndroidX.Camera.Core.Impl.CameraStateRegistry.IOnConfigureAvailableListener
AndroidX.Camera.Core.Impl.CameraStateRegistry.IOnConfigureAvailableListener.OnConfigureAvailable() -> void
AndroidX.Camera.Core.Impl.CameraStateRegistry.IOnOpenAvailableListener
AndroidX.Camera.Core.Impl.CameraStateRegistry.IOnOpenAvailableListener.OnOpenAvailable() -> void
AndroidX.Camera.Core.Impl.CameraStateRegistry.IsCameraClosing.get -> bool
AndroidX.Camera.Core.Impl.CameraStateRegistry.MarkCameraState(AndroidX.Camera.Core.ICamera! camera, AndroidX.Camera.Core.Impl.CameraInternalState! state) -> void
AndroidX.Camera.Core.Impl.CameraStateRegistry.MarkCameraState(AndroidX.Camera.Core.ICamera! camera, AndroidX.Camera.Core.Impl.CameraInternalState! state, bool notifyImmediately) -> void
AndroidX.Camera.Core.Impl.CameraStateRegistry.OnCameraOperatingModeUpdated(int prevMode, int currMode) -> void
AndroidX.Camera.Core.Impl.CameraStateRegistry.RegisterCamera(AndroidX.Camera.Core.ICamera! camera, Java.Util.Concurrent.IExecutor! notifyExecutor, AndroidX.Camera.Core.Impl.CameraStateRegistry.IOnConfigureAvailableListener! onConfigureAvailableListener, AndroidX.Camera.Core.Impl.CameraStateRegistry.IOnOpenAvailableListener! onOpenAvailableListener) -> void
AndroidX.Camera.Core.Impl.CameraStateRegistry.TryOpenCamera(AndroidX.Camera.Core.ICamera! camera) -> bool
AndroidX.Camera.Core.Impl.CameraStateRegistry.TryOpenCaptureSession(string! cameraId, string? pairedCameraId) -> bool
AndroidX.Camera.Core.Impl.CameraThreadConfig
AndroidX.Camera.Core.Impl.CameraThreadConfig.CameraThreadConfig() -> void
AndroidX.Camera.Core.Impl.CameraThreadConfig.CameraThreadConfig(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.CameraValidator
AndroidX.Camera.Core.Impl.CameraValidator.CameraIdListIncorrectException
AndroidX.Camera.Core.Impl.CameraValidator.CameraIdListIncorrectException.CameraIdListIncorrectException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.CameraValidator.CameraIdListIncorrectException.CameraIdListIncorrectException(string? message, int availableCameraCount, Java.Lang.Throwable? cause) -> void
AndroidX.Camera.Core.Impl.Capability.PreviewCapabilitiesImpl
AndroidX.Camera.Core.Impl.Capability.PreviewCapabilitiesImpl.PreviewCapabilitiesImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.CaptureConfig
AndroidX.Camera.Core.Impl.CaptureConfig.Builder
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.AddAllCameraCaptureCallbacks(System.Collections.Generic.ICollection<AndroidX.Camera.Core.Impl.CameraCaptureCallback!>! cameraCaptureCallbacks) -> void
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.AddAllTags(AndroidX.Camera.Core.Impl.TagBundle! bundle) -> void
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.AddCameraCaptureCallback(AndroidX.Camera.Core.Impl.CameraCaptureCallback! cameraCaptureCallback) -> void
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.AddImplementationOption(AndroidX.Camera.Core.Impl.ConfigOption! option, Java.Lang.Object! value) -> void
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.AddImplementationOptions(AndroidX.Camera.Core.Impl.IConfig! config) -> void
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.AddSurface(AndroidX.Camera.Core.Impl.DeferrableSurface! surface) -> void
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.AddTag(string! key, Java.Lang.Object! tag) -> void
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.Build() -> AndroidX.Camera.Core.Impl.CaptureConfig!
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.Builder() -> void
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.ClearSurfaces() -> void
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.ExpectedFrameRateRange.get -> Android.Util.Range?
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.ExpectedFrameRateRange.set -> void
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.GetTag(string! key) -> Java.Lang.Object?
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.ImplementationOptions.get -> AndroidX.Camera.Core.Impl.IConfig!
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.ImplementationOptions.set -> void
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.RemoveCameraCaptureCallback(AndroidX.Camera.Core.Impl.CameraCaptureCallback! cameraCaptureCallback) -> bool
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.RemoveSurface(AndroidX.Camera.Core.Impl.DeferrableSurface! surface) -> void
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.SetCameraCaptureResult(AndroidX.Camera.Core.Impl.ICameraCaptureResult! cameraCaptureResult) -> void
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.SetId(int id) -> void
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.SetPostviewEnabled(bool postviewEnabled) -> void
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.SetPreviewStabilization(int mode) -> void
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.SetVideoStabilization(int mode) -> void
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.Surfaces.get -> System.Collections.Generic.ICollection<AndroidX.Camera.Core.Impl.DeferrableSurface!>!
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.TemplateType.get -> int
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.TemplateType.set -> void
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.UseRepeatingSurface.get -> bool
AndroidX.Camera.Core.Impl.CaptureConfig.Builder.UseRepeatingSurface.set -> void
AndroidX.Camera.Core.Impl.CaptureConfig.CameraCaptureCallbacks.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.CameraCaptureCallback!>!
AndroidX.Camera.Core.Impl.CaptureConfig.CameraCaptureResult.get -> AndroidX.Camera.Core.Impl.ICameraCaptureResult?
AndroidX.Camera.Core.Impl.CaptureConfig.ExpectedFrameRateRange.get -> Android.Util.Range!
AndroidX.Camera.Core.Impl.CaptureConfig.IOptionUnpacker
AndroidX.Camera.Core.Impl.CaptureConfig.IOptionUnpacker.Unpack(AndroidX.Camera.Core.Impl.IUseCaseConfig! p0, AndroidX.Camera.Core.Impl.CaptureConfig.Builder! p1) -> void
AndroidX.Camera.Core.Impl.CaptureConfig.Id.get -> int
AndroidX.Camera.Core.Impl.CaptureConfig.ImplementationOptions.get -> AndroidX.Camera.Core.Impl.IConfig!
AndroidX.Camera.Core.Impl.CaptureConfig.IsPostviewEnabled.get -> bool
AndroidX.Camera.Core.Impl.CaptureConfig.IsUseRepeatingSurface.get -> bool
AndroidX.Camera.Core.Impl.CaptureConfig.PreviewStabilizationMode.get -> int
AndroidX.Camera.Core.Impl.CaptureConfig.Surfaces.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.DeferrableSurface!>!
AndroidX.Camera.Core.Impl.CaptureConfig.TagBundle.get -> AndroidX.Camera.Core.Impl.TagBundle!
AndroidX.Camera.Core.Impl.CaptureConfig.TemplateType.get -> int
AndroidX.Camera.Core.Impl.CaptureConfig.VideoStabilizationMode.get -> int
AndroidX.Camera.Core.Impl.CaptureStageDefaultCaptureStage
AndroidX.Camera.Core.Impl.CaptureStageDefaultCaptureStage.CaptureConfig.get -> AndroidX.Camera.Core.Impl.CaptureConfig!
AndroidX.Camera.Core.Impl.CaptureStageDefaultCaptureStage.CaptureStageDefaultCaptureStage() -> void
AndroidX.Camera.Core.Impl.CaptureStageDefaultCaptureStage.Id.get -> int
AndroidX.Camera.Core.Impl.Compat.EncoderProfilesProxyCompat
AndroidX.Camera.Core.Impl.Config
AndroidX.Camera.Core.Impl.ConfigConsts
AndroidX.Camera.Core.Impl.ConfigOption
AndroidX.Camera.Core.Impl.ConfigOption.ConfigOption(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.ConfigOptionPriority
AndroidX.Camera.Core.Impl.ConstantObservable
AndroidX.Camera.Core.Impl.ConstantObservable.AddObserver(Java.Util.Concurrent.IExecutor! executor, AndroidX.Camera.Core.Impl.IObservableObserver! observer) -> void
AndroidX.Camera.Core.Impl.ConstantObservable.FetchData() -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.Impl.ConstantObservable.RemoveObserver(AndroidX.Camera.Core.Impl.IObservableObserver! observer) -> void
AndroidX.Camera.Core.Impl.ConvergenceUtils
AndroidX.Camera.Core.Impl.ConvergenceUtils.ConvergenceUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.DeferrableSurface
AndroidX.Camera.Core.Impl.DeferrableSurface.DeferrableSurface() -> void
AndroidX.Camera.Core.Impl.DeferrableSurface.DeferrableSurface(Android.Util.Size! size, int format) -> void
AndroidX.Camera.Core.Impl.DeferrableSurface.DeferrableSurface(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.DeferrableSurface.Surface.get -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.Impl.DeferrableSurface.SurfaceClosedException
AndroidX.Camera.Core.Impl.DeferrableSurface.SurfaceClosedException.DeferrableSurface.get -> AndroidX.Camera.Core.Impl.DeferrableSurface!
AndroidX.Camera.Core.Impl.DeferrableSurface.SurfaceClosedException.SurfaceClosedException(string! s, AndroidX.Camera.Core.Impl.DeferrableSurface! surface) -> void
AndroidX.Camera.Core.Impl.DeferrableSurface.SurfaceUnavailableException
AndroidX.Camera.Core.Impl.DeferrableSurface.SurfaceUnavailableException.SurfaceUnavailableException(string! message) -> void
AndroidX.Camera.Core.Impl.DeferrableSurfaces
AndroidX.Camera.Core.Impl.DeviceProperties
AndroidX.Camera.Core.Impl.DeviceProperties.DeviceProperties() -> void
AndroidX.Camera.Core.Impl.DeviceProperties.DeviceProperties(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.DynamicRanges
AndroidX.Camera.Core.Impl.EncoderProfilesProvider
AndroidX.Camera.Core.Impl.EncoderProfilesProviderConsts
AndroidX.Camera.Core.Impl.EncoderProfilesProxy
AndroidX.Camera.Core.Impl.EncoderProfilesProxyAudioProfileProxy
AndroidX.Camera.Core.Impl.EncoderProfilesProxyAudioProfileProxy.EncoderProfilesProxyAudioProfileProxy() -> void
AndroidX.Camera.Core.Impl.EncoderProfilesProxyAudioProfileProxy.EncoderProfilesProxyAudioProfileProxy(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.EncoderProfilesProxyAudioProfileProxy.IAudioEncoder
AndroidX.Camera.Core.Impl.EncoderProfilesProxyConsts
AndroidX.Camera.Core.Impl.EncoderProfilesProxyImmutableEncoderProfilesProxy
AndroidX.Camera.Core.Impl.EncoderProfilesProxyImmutableEncoderProfilesProxy.EncoderProfilesProxyImmutableEncoderProfilesProxy() -> void
AndroidX.Camera.Core.Impl.EncoderProfilesProxyImmutableEncoderProfilesProxy.EncoderProfilesProxyImmutableEncoderProfilesProxy(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.EncoderProfilesProxyImmutableEncoderProfilesProxy.InterfaceConsts
AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy
AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy.EncoderProfilesProxyVideoProfileProxy() -> void
AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy.EncoderProfilesProxyVideoProfileProxy(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy.IVideoEncoder
AndroidX.Camera.Core.Impl.ExtendedCameraConfigProviderStore
AndroidX.Camera.Core.Impl.ForwardingCameraControl
AndroidX.Camera.Core.Impl.ForwardingCameraControl.ForwardingCameraControl(AndroidX.Camera.Core.Impl.ICameraControlInternal! cameraControlInternal) -> void
AndroidX.Camera.Core.Impl.ForwardingCameraControl.ForwardingCameraControl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.ForwardingCameraControl.InterfaceConsts
AndroidX.Camera.Core.Impl.ForwardingCameraInfo
AndroidX.Camera.Core.Impl.ForwardingCameraInfo.ForwardingCameraInfo(AndroidX.Camera.Core.Impl.ICameraInfoInternal! cameraInfoInternal) -> void
AndroidX.Camera.Core.Impl.ForwardingCameraInfo.ForwardingCameraInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.ForwardingCameraInfo.InterfaceConsts
AndroidX.Camera.Core.Impl.ICameraCaptureResult
AndroidX.Camera.Core.Impl.ICameraCaptureResult.AeMode.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode!
AndroidX.Camera.Core.Impl.ICameraCaptureResult.AeState.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeState!
AndroidX.Camera.Core.Impl.ICameraCaptureResult.AfMode.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfMode!
AndroidX.Camera.Core.Impl.ICameraCaptureResult.AfState.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState!
AndroidX.Camera.Core.Impl.ICameraCaptureResult.AwbMode.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode!
AndroidX.Camera.Core.Impl.ICameraCaptureResult.AwbState.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbState!
AndroidX.Camera.Core.Impl.ICameraCaptureResult.CaptureResult.get -> Android.Hardware.Camera2.CaptureResult?
AndroidX.Camera.Core.Impl.ICameraCaptureResult.FlashState.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.FlashState!
AndroidX.Camera.Core.Impl.ICameraCaptureResult.PopulateExifData(AndroidX.Camera.Core.Impl.Utils.ExifData.Builder! exifBuilder) -> void
AndroidX.Camera.Core.Impl.ICameraCaptureResult.TagBundle.get -> AndroidX.Camera.Core.Impl.TagBundle!
AndroidX.Camera.Core.Impl.ICameraCaptureResult.Timestamp.get -> long
AndroidX.Camera.Core.Impl.ICameraConfig
AndroidX.Camera.Core.Impl.ICameraConfig.CompatibilityId.get -> AndroidX.Camera.Core.Impl.Identifier!
AndroidX.Camera.Core.Impl.ICameraConfig.GetSessionProcessor(AndroidX.Camera.Core.Impl.ISessionProcessor? valueIfMissing) -> AndroidX.Camera.Core.Impl.ISessionProcessor?
AndroidX.Camera.Core.Impl.ICameraConfig.IsCaptureProcessProgressSupported.get -> bool
AndroidX.Camera.Core.Impl.ICameraConfig.IsPostviewSupported.get -> bool
AndroidX.Camera.Core.Impl.ICameraConfig.OptionCaptureProcessProgressSupported.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.ICameraConfig.OptionCompatibilityId.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.ICameraConfig.OptionPostviewSupported.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.ICameraConfig.OptionSessionProcessor.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.ICameraConfig.OptionUseCaseCombinationRequiredRule.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.ICameraConfig.OptionUsecaseConfigFactory.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.ICameraConfig.OptionZslDisabled.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.ICameraConfig.SessionProcessor.get -> AndroidX.Camera.Core.Impl.ISessionProcessor!
AndroidX.Camera.Core.Impl.ICameraConfig.UseCaseCombinationRequiredRule.get -> int
AndroidX.Camera.Core.Impl.ICameraConfig.UseCaseConfigFactory.get -> AndroidX.Camera.Core.Impl.IUseCaseConfigFactory!
AndroidX.Camera.Core.Impl.ICameraConfigBuilder
AndroidX.Camera.Core.Impl.ICameraConfigBuilder.SetCaptureProcessProgressSupported(bool p0) -> Java.Lang.Object?
AndroidX.Camera.Core.Impl.ICameraConfigBuilder.SetCompatibilityId(AndroidX.Camera.Core.Impl.Identifier! p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.ICameraConfigBuilder.SetPostviewSupported(bool p0) -> Java.Lang.Object?
AndroidX.Camera.Core.Impl.ICameraConfigBuilder.SetSessionProcessor(AndroidX.Camera.Core.Impl.ISessionProcessor! p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.ICameraConfigBuilder.SetUseCaseCombinationRequiredRule(int p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.ICameraConfigBuilder.SetUseCaseConfigFactory(AndroidX.Camera.Core.Impl.IUseCaseConfigFactory! p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.ICameraConfigBuilder.SetZslDisabled(bool p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.ICameraConfigProvider
AndroidX.Camera.Core.Impl.ICameraConfigProvider.Empty.get -> AndroidX.Camera.Core.Impl.ICameraConfigProvider?
AndroidX.Camera.Core.Impl.ICameraConfigProvider.GetConfig(AndroidX.Camera.Core.ICameraInfo! p0, Android.Content.Context! p1) -> AndroidX.Camera.Core.Impl.ICameraConfig?
AndroidX.Camera.Core.Impl.ICameraConfigRequiredRule
AndroidX.Camera.Core.Impl.ICameraControlInternal
AndroidX.Camera.Core.Impl.ICameraControlInternal.AddInteropConfig(AndroidX.Camera.Core.Impl.IConfig! p0) -> void
AndroidX.Camera.Core.Impl.ICameraControlInternal.AddZslConfig(AndroidX.Camera.Core.Impl.SessionConfig.Builder! p0) -> void
AndroidX.Camera.Core.Impl.ICameraControlInternal.ClearInteropConfig() -> void
AndroidX.Camera.Core.Impl.ICameraControlInternal.DecrementVideoUsage() -> void
AndroidX.Camera.Core.Impl.ICameraControlInternal.DefaultEmptyInstance.get -> AndroidX.Camera.Core.Impl.ICameraControlInternal!
AndroidX.Camera.Core.Impl.ICameraControlInternal.FlashMode.get -> int
AndroidX.Camera.Core.Impl.ICameraControlInternal.FlashMode.set -> void
AndroidX.Camera.Core.Impl.ICameraControlInternal.GetCameraCapturePipelineAsync(int captureMode, int flashType) -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.Impl.ICameraControlInternal.Implementation.get -> AndroidX.Camera.Core.Impl.ICameraControlInternal!
AndroidX.Camera.Core.Impl.ICameraControlInternal.IncrementVideoUsage() -> void
AndroidX.Camera.Core.Impl.ICameraControlInternal.InteropConfig.get -> AndroidX.Camera.Core.Impl.IConfig!
AndroidX.Camera.Core.Impl.ICameraControlInternal.IsInVideoUsage.get -> bool
AndroidX.Camera.Core.Impl.ICameraControlInternal.IsZslDisabledByByUserCaseConfig.get -> bool
AndroidX.Camera.Core.Impl.ICameraControlInternal.SensorRect.get -> Android.Graphics.Rect!
AndroidX.Camera.Core.Impl.ICameraControlInternal.SessionConfig.get -> AndroidX.Camera.Core.Impl.SessionConfig!
AndroidX.Camera.Core.Impl.ICameraControlInternal.SetScreenFlash(AndroidX.Camera.Core.ImageCapture.IScreenFlash? screenFlash) -> void
AndroidX.Camera.Core.Impl.ICameraControlInternal.SetZslDisabledByUserCaseConfig(bool p0) -> void
AndroidX.Camera.Core.Impl.ICameraControlInternal.SubmitStillCaptureRequests(System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.CaptureConfig!>! p0, int p1, int p2) -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.Impl.ICameraControlInternalControlUpdateCallback
AndroidX.Camera.Core.Impl.ICameraControlInternalControlUpdateCallback.OnCameraControlCaptureRequests(System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.CaptureConfig!>! p0) -> void
AndroidX.Camera.Core.Impl.ICameraControlInternalControlUpdateCallback.OnCameraControlUpdateSessionConfig() -> void
AndroidX.Camera.Core.Impl.ICameraDeviceSurfaceManager
AndroidX.Camera.Core.Impl.ICameraDeviceSurfaceManager.GetSuggestedStreamSpecs(int p0, string! p1, System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.AttachedSurfaceInfo!>! p2, System.Collections.Generic.IDictionary<AndroidX.Camera.Core.Impl.IUseCaseConfig!, System.Collections.Generic.IList<Android.Util.Size!>!>! p3, bool p4, bool p5) -> Android.Util.Pair!
AndroidX.Camera.Core.Impl.ICameraDeviceSurfaceManager.TransformSurfaceConfig(int p0, string! p1, int p2, Android.Util.Size! p3) -> AndroidX.Camera.Core.Impl.SurfaceConfig?
AndroidX.Camera.Core.Impl.ICameraDeviceSurfaceManagerProvider
AndroidX.Camera.Core.Impl.ICameraDeviceSurfaceManagerProvider.NewInstance(Android.Content.Context! p0, Java.Lang.Object? p1, System.Collections.Generic.ICollection<string!>! p2) -> AndroidX.Camera.Core.Impl.ICameraDeviceSurfaceManager!
AndroidX.Camera.Core.Impl.ICameraFactory
AndroidX.Camera.Core.Impl.ICameraFactory.AvailableCameraIds.get -> System.Collections.Generic.ICollection<string!>!
AndroidX.Camera.Core.Impl.ICameraFactory.CameraCoordinator.get -> AndroidX.Camera.Core.Concurrent.ICameraCoordinator!
AndroidX.Camera.Core.Impl.ICameraFactory.CameraManager.get -> Java.Lang.Object?
AndroidX.Camera.Core.Impl.ICameraFactory.GetCamera(string! p0) -> AndroidX.Camera.Core.Impl.ICameraInternal!
AndroidX.Camera.Core.Impl.ICameraFactoryProvider
AndroidX.Camera.Core.Impl.ICameraFactoryProvider.NewInstance(Android.Content.Context! p0, AndroidX.Camera.Core.Impl.CameraThreadConfig! p1, AndroidX.Camera.Core.CameraSelector? p2, long p3) -> AndroidX.Camera.Core.Impl.ICameraFactory!
AndroidX.Camera.Core.Impl.ICameraInfoInternal
AndroidX.Camera.Core.Impl.ICameraInfoInternal.AddSessionCaptureCallback(Java.Util.Concurrent.IExecutor! p0, AndroidX.Camera.Core.Impl.CameraCaptureCallback! p1) -> void
AndroidX.Camera.Core.Impl.ICameraInfoInternal.CameraCharacteristics.get -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.ICameraInfoInternal.CameraId.get -> string!
AndroidX.Camera.Core.Impl.ICameraInfoInternal.CameraQuirks.get -> AndroidX.Camera.Core.Impl.Quirks!
AndroidX.Camera.Core.Impl.ICameraInfoInternal.CameraSelector.get -> AndroidX.Camera.Core.CameraSelector!
AndroidX.Camera.Core.Impl.ICameraInfoInternal.EncoderProfilesProvider.get -> AndroidX.Camera.Core.Impl.IEncoderProfilesProvider!
AndroidX.Camera.Core.Impl.ICameraInfoInternal.GetPhysicalCameraCharacteristics(string! p0) -> Java.Lang.Object?
AndroidX.Camera.Core.Impl.ICameraInfoInternal.GetSupportedHighResolutions(int p0) -> System.Collections.Generic.IList<Android.Util.Size!>!
AndroidX.Camera.Core.Impl.ICameraInfoInternal.GetSupportedResolutions(int p0) -> System.Collections.Generic.IList<Android.Util.Size!>!
AndroidX.Camera.Core.Impl.ICameraInfoInternal.Implementation.get -> AndroidX.Camera.Core.Impl.ICameraInfoInternal!
AndroidX.Camera.Core.Impl.ICameraInfoInternal.IsCaptureProcessProgressSupported.get -> bool
AndroidX.Camera.Core.Impl.ICameraInfoInternal.IsPostviewSupported.get -> bool
AndroidX.Camera.Core.Impl.ICameraInfoInternal.IsPreviewStabilizationSupported.get -> bool
AndroidX.Camera.Core.Impl.ICameraInfoInternal.IsVideoStabilizationSupported.get -> bool
AndroidX.Camera.Core.Impl.ICameraInfoInternal.RemoveSessionCaptureCallback(AndroidX.Camera.Core.Impl.CameraCaptureCallback! p0) -> void
AndroidX.Camera.Core.Impl.ICameraInfoInternal.SupportedDynamicRanges.get -> System.Collections.Generic.ICollection<AndroidX.Camera.Core.DynamicRange!>!
AndroidX.Camera.Core.Impl.ICameraInfoInternal.SupportedOutputFormats.get -> System.Collections.Generic.ICollection<Java.Lang.Integer!>!
AndroidX.Camera.Core.Impl.ICameraInfoInternal.Timebase.get -> AndroidX.Camera.Core.Impl.Timebase!
AndroidX.Camera.Core.Impl.ICameraInternal
AndroidX.Camera.Core.Impl.ICameraInternal.AttachUseCases(System.Collections.Generic.ICollection<AndroidX.Camera.Core.UseCase!>! p0) -> void
AndroidX.Camera.Core.Impl.ICameraInternal.CameraControl.get -> AndroidX.Camera.Core.ICameraControl!
AndroidX.Camera.Core.Impl.ICameraInternal.CameraControlInternal.get -> AndroidX.Camera.Core.Impl.ICameraControlInternal!
AndroidX.Camera.Core.Impl.ICameraInternal.CameraInfo.get -> AndroidX.Camera.Core.ICameraInfo!
AndroidX.Camera.Core.Impl.ICameraInternal.CameraInfoInternal.get -> AndroidX.Camera.Core.Impl.ICameraInfoInternal!
AndroidX.Camera.Core.Impl.ICameraInternal.CameraState.get -> AndroidX.Camera.Core.Impl.IObservable!
AndroidX.Camera.Core.Impl.ICameraInternal.Close() -> void
AndroidX.Camera.Core.Impl.ICameraInternal.DetachUseCases(System.Collections.Generic.ICollection<AndroidX.Camera.Core.UseCase!>! p0) -> void
AndroidX.Camera.Core.Impl.ICameraInternal.ExtendedConfig.get -> AndroidX.Camera.Core.Impl.ICameraConfig!
AndroidX.Camera.Core.Impl.ICameraInternal.ExtendedConfig.set -> void
AndroidX.Camera.Core.Impl.ICameraInternal.HasTransform.get -> bool
AndroidX.Camera.Core.Impl.ICameraInternal.IsFrontFacing.get -> bool
AndroidX.Camera.Core.Impl.ICameraInternal.Open() -> void
AndroidX.Camera.Core.Impl.ICameraInternal.Release() -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.Impl.ICameraInternal.SetActiveResumingMode(bool enabled) -> void
AndroidX.Camera.Core.Impl.ICameraInternal.SetPrimary(bool isPrimary) -> void
AndroidX.Camera.Core.Impl.ICaptureBundle
AndroidX.Camera.Core.Impl.ICaptureBundle.CaptureStages.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.ICaptureStage!>?
AndroidX.Camera.Core.Impl.ICaptureStage
AndroidX.Camera.Core.Impl.ICaptureStage.CaptureConfig.get -> AndroidX.Camera.Core.Impl.CaptureConfig!
AndroidX.Camera.Core.Impl.ICaptureStage.Id.get -> int
AndroidX.Camera.Core.Impl.IConfig
AndroidX.Camera.Core.Impl.IConfig.ContainsOption(AndroidX.Camera.Core.Impl.ConfigOption! p0) -> bool
AndroidX.Camera.Core.Impl.IConfig.FindOptions(string! p0, AndroidX.Camera.Core.Impl.IConfigOptionMatcher! p1) -> void
AndroidX.Camera.Core.Impl.IConfig.GetOptionPriority(AndroidX.Camera.Core.Impl.ConfigOption! p0) -> AndroidX.Camera.Core.Impl.ConfigOptionPriority!
AndroidX.Camera.Core.Impl.IConfig.GetPriorities(AndroidX.Camera.Core.Impl.ConfigOption! p0) -> System.Collections.Generic.ICollection<AndroidX.Camera.Core.Impl.ConfigOptionPriority!>!
AndroidX.Camera.Core.Impl.IConfig.HasConflict(AndroidX.Camera.Core.Impl.ConfigOptionPriority! priority1, AndroidX.Camera.Core.Impl.ConfigOptionPriority! priority2) -> bool
AndroidX.Camera.Core.Impl.IConfig.ListOptions() -> System.Collections.Generic.ICollection<AndroidX.Camera.Core.Impl.ConfigOption!>!
AndroidX.Camera.Core.Impl.IConfig.MergeConfigs(AndroidX.Camera.Core.Impl.IConfig? extendedConfig, AndroidX.Camera.Core.Impl.IConfig? baseConfig) -> AndroidX.Camera.Core.Impl.IConfig!
AndroidX.Camera.Core.Impl.IConfig.MergeOptionValue(AndroidX.Camera.Core.Impl.MutableOptionsBundle! mergedConfig, AndroidX.Camera.Core.Impl.IConfig! baseConfig, AndroidX.Camera.Core.Impl.IConfig! extendedConfig, AndroidX.Camera.Core.Impl.ConfigOption! opt) -> void
AndroidX.Camera.Core.Impl.IConfig.RetrieveOption(AndroidX.Camera.Core.Impl.ConfigOption! p0) -> Java.Lang.Object?
AndroidX.Camera.Core.Impl.IConfig.RetrieveOption(AndroidX.Camera.Core.Impl.ConfigOption! p0, Java.Lang.Object? p1) -> Java.Lang.Object?
AndroidX.Camera.Core.Impl.IConfig.RetrieveOptionWithPriority(AndroidX.Camera.Core.Impl.ConfigOption! p0, AndroidX.Camera.Core.Impl.ConfigOptionPriority! p1) -> Java.Lang.Object?
AndroidX.Camera.Core.Impl.IConfigOptionMatcher
AndroidX.Camera.Core.Impl.IConfigOptionMatcher.OnOptionMatched(AndroidX.Camera.Core.Impl.ConfigOption! p0) -> bool
AndroidX.Camera.Core.Impl.IConfigProvider
AndroidX.Camera.Core.Impl.IConfigProvider.Config.get -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.IEncoderProfilesProvider
AndroidX.Camera.Core.Impl.IEncoderProfilesProvider.Empty.get -> AndroidX.Camera.Core.Impl.IEncoderProfilesProvider?
AndroidX.Camera.Core.Impl.IEncoderProfilesProvider.GetAll(int p0) -> AndroidX.Camera.Core.Impl.IEncoderProfilesProxy?
AndroidX.Camera.Core.Impl.IEncoderProfilesProvider.HasProfile(int p0) -> bool
AndroidX.Camera.Core.Impl.IEncoderProfilesProvider.QualityHighToLow.get -> System.Collections.IList?
AndroidX.Camera.Core.Impl.IEncoderProfilesProxy
AndroidX.Camera.Core.Impl.IEncoderProfilesProxy.AudioProfiles.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.EncoderProfilesProxyAudioProfileProxy!>!
AndroidX.Camera.Core.Impl.IEncoderProfilesProxy.DefaultDurationSeconds.get -> int
AndroidX.Camera.Core.Impl.IEncoderProfilesProxy.GetAudioCodecMimeType(int codec) -> string!
AndroidX.Camera.Core.Impl.IEncoderProfilesProxy.GetRequiredAudioProfile(int codec) -> int
AndroidX.Camera.Core.Impl.IEncoderProfilesProxy.GetVideoCodecMimeType(int codec) -> string!
AndroidX.Camera.Core.Impl.IEncoderProfilesProxy.RecommendedFileFormat.get -> int
AndroidX.Camera.Core.Impl.IEncoderProfilesProxy.VideoProfiles.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy!>!
AndroidX.Camera.Core.Impl.IImageInfoProcessor
AndroidX.Camera.Core.Impl.IImageInfoProcessor.CaptureStage.get -> AndroidX.Camera.Core.Impl.ICaptureStage?
AndroidX.Camera.Core.Impl.IImageInfoProcessor.Process(AndroidX.Camera.Core.IImageInfo! p0) -> bool
AndroidX.Camera.Core.Impl.IImageInputConfig
AndroidX.Camera.Core.Impl.IImageInputConfig.DynamicRange.get -> AndroidX.Camera.Core.DynamicRange!
AndroidX.Camera.Core.Impl.IImageInputConfig.HasDynamicRange.get -> bool
AndroidX.Camera.Core.Impl.IImageInputConfig.InputFormat.get -> int
AndroidX.Camera.Core.Impl.IImageInputConfig.OptionInputDynamicRange.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IImageInputConfig.OptionInputFormat.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IImageInputConfigBuilder
AndroidX.Camera.Core.Impl.IImageInputConfigBuilder.SetDynamicRange(AndroidX.Camera.Core.DynamicRange! p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.IImageOutputConfig
AndroidX.Camera.Core.Impl.IImageOutputConfig.CustomOrderedResolutions.get -> System.Collections.Generic.IList<Android.Util.Size!>!
AndroidX.Camera.Core.Impl.IImageOutputConfig.DefaultResolution.get -> Android.Util.Size!
AndroidX.Camera.Core.Impl.IImageOutputConfig.GetAppTargetRotation(int valueIfMissing) -> int
AndroidX.Camera.Core.Impl.IImageOutputConfig.GetCustomOrderedResolutions(System.Collections.Generic.IList<Android.Util.Size!>? valueIfMissing) -> System.Collections.Generic.IList<Android.Util.Size!>?
AndroidX.Camera.Core.Impl.IImageOutputConfig.GetDefaultResolution(Android.Util.Size? valueIfMissing) -> Android.Util.Size?
AndroidX.Camera.Core.Impl.IImageOutputConfig.GetMaxResolution(Android.Util.Size? valueIfMissing) -> Android.Util.Size?
AndroidX.Camera.Core.Impl.IImageOutputConfig.GetMirrorMode(int valueIfMissing) -> int
AndroidX.Camera.Core.Impl.IImageOutputConfig.GetResolutionSelector(AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector? valueIfMissing) -> AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector?
AndroidX.Camera.Core.Impl.IImageOutputConfig.GetSupportedResolutions(System.Collections.Generic.IList<Android.Util.Pair!>? valueIfMissing) -> System.Collections.Generic.IList<Android.Util.Pair!>?
AndroidX.Camera.Core.Impl.IImageOutputConfig.GetTargetResolution(Android.Util.Size? valueIfMissing) -> Android.Util.Size?
AndroidX.Camera.Core.Impl.IImageOutputConfig.GetTargetRotation(int valueIfMissing) -> int
AndroidX.Camera.Core.Impl.IImageOutputConfig.HasTargetAspectRatio.get -> bool
AndroidX.Camera.Core.Impl.IImageOutputConfig.MaxResolution.get -> Android.Util.Size!
AndroidX.Camera.Core.Impl.IImageOutputConfig.OptionAppTargetRotation.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IImageOutputConfig.OptionCustomOrderedResolutions.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IImageOutputConfig.OptionDefaultResolution.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IImageOutputConfig.OptionMaxResolution.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IImageOutputConfig.OptionMirrorMode.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IImageOutputConfig.OptionResolutionSelector.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IImageOutputConfig.OptionSupportedResolutions.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IImageOutputConfig.OptionTargetAspectRatio.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IImageOutputConfig.OptionTargetResolution.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IImageOutputConfig.OptionTargetRotation.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IImageOutputConfig.ResolutionSelector.get -> AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector!
AndroidX.Camera.Core.Impl.IImageOutputConfig.SupportedResolutions.get -> System.Collections.Generic.IList<Android.Util.Pair!>!
AndroidX.Camera.Core.Impl.IImageOutputConfig.TargetAspectRatio.get -> int
AndroidX.Camera.Core.Impl.IImageOutputConfig.TargetResolution.get -> Android.Util.Size!
AndroidX.Camera.Core.Impl.IImageOutputConfig.TargetRotation.get -> int
AndroidX.Camera.Core.Impl.IImageOutputConfig.ValidateConfig(AndroidX.Camera.Core.Impl.IImageOutputConfig! config) -> void
AndroidX.Camera.Core.Impl.IImageOutputConfigBuilder
AndroidX.Camera.Core.Impl.IImageOutputConfigBuilder.SetCustomOrderedResolutions(System.Collections.Generic.IList<Android.Util.Size!>! p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.IImageOutputConfigBuilder.SetDefaultResolution(Android.Util.Size! p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.IImageOutputConfigBuilder.SetMaxResolution(Android.Util.Size! p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.IImageOutputConfigBuilder.SetMirrorMode(int p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.IImageOutputConfigBuilder.SetResolutionSelector(AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector! p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.IImageOutputConfigBuilder.SetSupportedResolutions(System.Collections.Generic.IList<Android.Util.Pair!>! p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.IImageOutputConfigBuilder.SetTargetAspectRatio(int p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.IImageOutputConfigBuilder.SetTargetResolution(Android.Util.Size! p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.IImageOutputConfigBuilder.SetTargetRotation(int p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.IImageOutputConfigOptionalRotationValue
AndroidX.Camera.Core.Impl.IImageOutputConfigRotationDegreesValue
AndroidX.Camera.Core.Impl.IImageOutputConfigRotationValue
AndroidX.Camera.Core.Impl.IImageProxyBundle
AndroidX.Camera.Core.Impl.IImageProxyBundle.CaptureIds.get -> System.Collections.Generic.IList<Java.Lang.Integer!>!
AndroidX.Camera.Core.Impl.IImageProxyBundle.GetImageProxy(int p0) -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.Impl.IImageReaderProxy
AndroidX.Camera.Core.Impl.IImageReaderProxy.AcquireLatestImage() -> AndroidX.Camera.Core.IImageProxy?
AndroidX.Camera.Core.Impl.IImageReaderProxy.AcquireNextImage() -> AndroidX.Camera.Core.IImageProxy?
AndroidX.Camera.Core.Impl.IImageReaderProxy.ClearOnImageAvailableListener() -> void
AndroidX.Camera.Core.Impl.IImageReaderProxy.Close() -> void
AndroidX.Camera.Core.Impl.IImageReaderProxy.Height.get -> int
AndroidX.Camera.Core.Impl.IImageReaderProxy.ImageFormat.get -> int
AndroidX.Camera.Core.Impl.IImageReaderProxy.MaxImages.get -> int
AndroidX.Camera.Core.Impl.IImageReaderProxy.SetOnImageAvailableListener(AndroidX.Camera.Core.Impl.IImageReaderProxyOnImageAvailableListener! p0, Java.Util.Concurrent.IExecutor! p1) -> void
AndroidX.Camera.Core.Impl.IImageReaderProxy.Surface.get -> Android.Views.Surface?
AndroidX.Camera.Core.Impl.IImageReaderProxy.Width.get -> int
AndroidX.Camera.Core.Impl.IImageReaderProxyOnImageAvailableListener
AndroidX.Camera.Core.Impl.IImageReaderProxyOnImageAvailableListener.OnImageAvailable(AndroidX.Camera.Core.Impl.IImageReaderProxy! p0) -> void
AndroidX.Camera.Core.Impl.IMutableConfig
AndroidX.Camera.Core.Impl.IMutableConfig.InsertOption(AndroidX.Camera.Core.Impl.ConfigOption! p0, AndroidX.Camera.Core.Impl.ConfigOptionPriority! p1, Java.Lang.Object? p2) -> void
AndroidX.Camera.Core.Impl.IMutableConfig.InsertOption(AndroidX.Camera.Core.Impl.ConfigOption! p0, Java.Lang.Object? p1) -> void
AndroidX.Camera.Core.Impl.IMutableConfig.RemoveOption(AndroidX.Camera.Core.Impl.ConfigOption! p0) -> Java.Lang.Object?
AndroidX.Camera.Core.Impl.IObservable
AndroidX.Camera.Core.Impl.IObservable.AddObserver(Java.Util.Concurrent.IExecutor! p0, AndroidX.Camera.Core.Impl.IObservableObserver! p1) -> void
AndroidX.Camera.Core.Impl.IObservable.FetchData() -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.Impl.IObservable.RemoveObserver(AndroidX.Camera.Core.Impl.IObservableObserver! p0) -> void
AndroidX.Camera.Core.Impl.IObservableObserver
AndroidX.Camera.Core.Impl.IObservableObserver.OnError(Java.Lang.Throwable! p0) -> void
AndroidX.Camera.Core.Impl.IObservableObserver.OnNewData(Java.Lang.Object? p0) -> void
AndroidX.Camera.Core.Impl.IQuirk
AndroidX.Camera.Core.Impl.IReadableConfig
AndroidX.Camera.Core.Impl.IReadableConfig.Config.get -> AndroidX.Camera.Core.Impl.IConfig!
AndroidX.Camera.Core.Impl.IRequestProcessor
AndroidX.Camera.Core.Impl.IRequestProcessor.AbortCaptures() -> void
AndroidX.Camera.Core.Impl.IRequestProcessor.SetRepeating(AndroidX.Camera.Core.Impl.IRequestProcessorRequest! p0, AndroidX.Camera.Core.Impl.IRequestProcessorCallback! p1) -> int
AndroidX.Camera.Core.Impl.IRequestProcessor.StopRepeating() -> void
AndroidX.Camera.Core.Impl.IRequestProcessor.Submit(AndroidX.Camera.Core.Impl.IRequestProcessorRequest! p0, AndroidX.Camera.Core.Impl.IRequestProcessorCallback! p1) -> int
AndroidX.Camera.Core.Impl.IRequestProcessor.Submit(System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.IRequestProcessorRequest!>! p0, AndroidX.Camera.Core.Impl.IRequestProcessorCallback! p1) -> int
AndroidX.Camera.Core.Impl.IRequestProcessorCallback
AndroidX.Camera.Core.Impl.IRequestProcessorCallback.OnCaptureBufferLost(AndroidX.Camera.Core.Impl.IRequestProcessorRequest! request, long frameNumber, int outputConfigId) -> void
AndroidX.Camera.Core.Impl.IRequestProcessorCallback.OnCaptureCompleted(AndroidX.Camera.Core.Impl.IRequestProcessorRequest! request, AndroidX.Camera.Core.Impl.ICameraCaptureResult! captureResult) -> void
AndroidX.Camera.Core.Impl.IRequestProcessorCallback.OnCaptureFailed(AndroidX.Camera.Core.Impl.IRequestProcessorRequest! request, AndroidX.Camera.Core.Impl.CameraCaptureFailure! captureFailure) -> void
AndroidX.Camera.Core.Impl.IRequestProcessorCallback.OnCaptureProgressed(AndroidX.Camera.Core.Impl.IRequestProcessorRequest! request, AndroidX.Camera.Core.Impl.ICameraCaptureResult! captureResult) -> void
AndroidX.Camera.Core.Impl.IRequestProcessorCallback.OnCaptureSequenceAborted(int sequenceId) -> void
AndroidX.Camera.Core.Impl.IRequestProcessorCallback.OnCaptureSequenceCompleted(int sequenceId, long frameNumber) -> void
AndroidX.Camera.Core.Impl.IRequestProcessorCallback.OnCaptureStarted(AndroidX.Camera.Core.Impl.IRequestProcessorRequest! request, long frameNumber, long timestamp) -> void
AndroidX.Camera.Core.Impl.IRequestProcessorRequest
AndroidX.Camera.Core.Impl.IRequestProcessorRequest.Parameters.get -> AndroidX.Camera.Core.Impl.IConfig!
AndroidX.Camera.Core.Impl.IRequestProcessorRequest.TargetOutputConfigIds.get -> System.Collections.Generic.IList<Java.Lang.Integer!>!
AndroidX.Camera.Core.Impl.IRequestProcessorRequest.TemplateId.get -> int
AndroidX.Camera.Core.Impl.IRetryPolicyInternal
AndroidX.Camera.Core.Impl.IRetryPolicyInternal.Copy(long p0) -> AndroidX.Camera.Core.IRetryPolicy!
AndroidX.Camera.Core.Impl.ISessionProcessor
AndroidX.Camera.Core.Impl.ISessionProcessor.AbortCapture(int p0) -> void
AndroidX.Camera.Core.Impl.ISessionProcessor.DeInitSession() -> void
AndroidX.Camera.Core.Impl.ISessionProcessor.GetSupportedPostviewSize(Android.Util.Size! captureSize) -> System.Collections.Generic.IDictionary<Java.Lang.Integer!, System.Collections.Generic.IList<Android.Util.Size!>!>!
AndroidX.Camera.Core.Impl.ISessionProcessor.InitSession(AndroidX.Camera.Core.ICameraInfo! p0, AndroidX.Camera.Core.Impl.OutputSurfaceConfiguration! p1) -> AndroidX.Camera.Core.Impl.SessionConfig!
AndroidX.Camera.Core.Impl.ISessionProcessor.OnCaptureSessionEnd() -> void
AndroidX.Camera.Core.Impl.ISessionProcessor.OnCaptureSessionStart(AndroidX.Camera.Core.Impl.IRequestProcessor! p0) -> void
AndroidX.Camera.Core.Impl.ISessionProcessor.RealtimeCaptureLatency.get -> Android.Util.Pair?
AndroidX.Camera.Core.Impl.ISessionProcessor.SetParameters(AndroidX.Camera.Core.Impl.IConfig! p0) -> void
AndroidX.Camera.Core.Impl.ISessionProcessor.StartCapture(bool p0, AndroidX.Camera.Core.Impl.TagBundle! p1, AndroidX.Camera.Core.Impl.ISessionProcessorCaptureCallback! p2) -> int
AndroidX.Camera.Core.Impl.ISessionProcessor.StartRepeating(AndroidX.Camera.Core.Impl.TagBundle! p0, AndroidX.Camera.Core.Impl.ISessionProcessorCaptureCallback! p1) -> int
AndroidX.Camera.Core.Impl.ISessionProcessor.StartTrigger(AndroidX.Camera.Core.Impl.IConfig! config, AndroidX.Camera.Core.Impl.TagBundle! tagBundle, AndroidX.Camera.Core.Impl.ISessionProcessorCaptureCallback! callback) -> int
AndroidX.Camera.Core.Impl.ISessionProcessor.StopRepeating() -> void
AndroidX.Camera.Core.Impl.ISessionProcessor.SupportedCameraOperations.get -> System.Collections.Generic.ICollection<Java.Lang.Integer!>!
AndroidX.Camera.Core.Impl.ISessionProcessorCaptureCallback
AndroidX.Camera.Core.Impl.ISessionProcessorCaptureCallback.OnCaptureCompleted(long timestamp, int captureSequenceId, AndroidX.Camera.Core.Impl.ICameraCaptureResult! captureResult) -> void
AndroidX.Camera.Core.Impl.ISessionProcessorCaptureCallback.OnCaptureFailed(int captureSequenceId) -> void
AndroidX.Camera.Core.Impl.ISessionProcessorCaptureCallback.OnCaptureProcessProgressed(int progress) -> void
AndroidX.Camera.Core.Impl.ISessionProcessorCaptureCallback.OnCaptureProcessStarted(int captureSequenceId) -> void
AndroidX.Camera.Core.Impl.ISessionProcessorCaptureCallback.OnCaptureSequenceAborted(int captureSequenceId) -> void
AndroidX.Camera.Core.Impl.ISessionProcessorCaptureCallback.OnCaptureSequenceCompleted(int captureSequenceId) -> void
AndroidX.Camera.Core.Impl.ISessionProcessorCaptureCallback.OnCaptureStarted(int captureSequenceId, long timestamp) -> void
AndroidX.Camera.Core.Impl.IUseCaseConfig
AndroidX.Camera.Core.Impl.IUseCaseConfig.CaptureOptionUnpacker.get -> AndroidX.Camera.Core.Impl.CaptureConfig.IOptionUnpacker!
AndroidX.Camera.Core.Impl.IUseCaseConfig.CaptureType.get -> AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType!
AndroidX.Camera.Core.Impl.IUseCaseConfig.DefaultCaptureConfig.get -> AndroidX.Camera.Core.Impl.CaptureConfig!
AndroidX.Camera.Core.Impl.IUseCaseConfig.DefaultSessionConfig.get -> AndroidX.Camera.Core.Impl.SessionConfig!
AndroidX.Camera.Core.Impl.IUseCaseConfig.GetCaptureOptionUnpacker(AndroidX.Camera.Core.Impl.CaptureConfig.IOptionUnpacker? valueIfMissing) -> AndroidX.Camera.Core.Impl.CaptureConfig.IOptionUnpacker?
AndroidX.Camera.Core.Impl.IUseCaseConfig.GetDefaultCaptureConfig(AndroidX.Camera.Core.Impl.CaptureConfig? valueIfMissing) -> AndroidX.Camera.Core.Impl.CaptureConfig?
AndroidX.Camera.Core.Impl.IUseCaseConfig.GetDefaultSessionConfig(AndroidX.Camera.Core.Impl.SessionConfig? valueIfMissing) -> AndroidX.Camera.Core.Impl.SessionConfig?
AndroidX.Camera.Core.Impl.IUseCaseConfig.GetSessionOptionUnpacker(AndroidX.Camera.Core.Impl.SessionConfig.IOptionUnpacker? valueIfMissing) -> AndroidX.Camera.Core.Impl.SessionConfig.IOptionUnpacker?
AndroidX.Camera.Core.Impl.IUseCaseConfig.GetSurfaceOccupancyPriority(int valueIfMissing) -> int
AndroidX.Camera.Core.Impl.IUseCaseConfig.GetTargetFrameRate(Android.Util.Range? valueIfMissing) -> Android.Util.Range?
AndroidX.Camera.Core.Impl.IUseCaseConfig.IsHighResolutionDisabled(bool valueIfMissing) -> bool
AndroidX.Camera.Core.Impl.IUseCaseConfig.IsZslDisabled(bool valueIfMissing) -> bool
AndroidX.Camera.Core.Impl.IUseCaseConfig.OptionCaptureConfigUnpacker.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IUseCaseConfig.OptionCaptureType.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IUseCaseConfig.OptionDefaultCaptureConfig.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IUseCaseConfig.OptionDefaultSessionConfig.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IUseCaseConfig.OptionHighResolutionDisabled.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IUseCaseConfig.OptionPreviewStabilizationMode.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IUseCaseConfig.OptionSessionConfigUnpacker.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IUseCaseConfig.OptionSurfaceOccupancyPriority.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IUseCaseConfig.OptionTargetFrameRate.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IUseCaseConfig.OptionVideoStabilizationMode.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IUseCaseConfig.OptionZslDisabled.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Impl.IUseCaseConfig.PreviewStabilizationMode.get -> int
AndroidX.Camera.Core.Impl.IUseCaseConfig.SessionOptionUnpacker.get -> AndroidX.Camera.Core.Impl.SessionConfig.IOptionUnpacker!
AndroidX.Camera.Core.Impl.IUseCaseConfig.SurfaceOccupancyPriority.get -> int
AndroidX.Camera.Core.Impl.IUseCaseConfig.TargetFrameRate.get -> Android.Util.Range!
AndroidX.Camera.Core.Impl.IUseCaseConfig.VideoStabilizationMode.get -> int
AndroidX.Camera.Core.Impl.IUseCaseConfigBuilder
AndroidX.Camera.Core.Impl.IUseCaseConfigBuilder.SetCaptureOptionUnpacker(AndroidX.Camera.Core.Impl.CaptureConfig.IOptionUnpacker! p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.IUseCaseConfigBuilder.SetCaptureType(AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType! p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.IUseCaseConfigBuilder.SetDefaultCaptureConfig(AndroidX.Camera.Core.Impl.CaptureConfig! p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.IUseCaseConfigBuilder.SetDefaultSessionConfig(AndroidX.Camera.Core.Impl.SessionConfig! p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.IUseCaseConfigBuilder.SetHighResolutionDisabled(bool p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.IUseCaseConfigBuilder.SetSessionOptionUnpacker(AndroidX.Camera.Core.Impl.SessionConfig.IOptionUnpacker! p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.IUseCaseConfigBuilder.SetSurfaceOccupancyPriority(int p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.IUseCaseConfigBuilder.SetZslDisabled(bool p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.IUseCaseConfigBuilder.UseCaseConfig.get -> Java.Lang.Object!
AndroidX.Camera.Core.Impl.IUseCaseConfigFactory
AndroidX.Camera.Core.Impl.IUseCaseConfigFactory.EmptyInstance.get -> AndroidX.Camera.Core.Impl.IUseCaseConfigFactory?
AndroidX.Camera.Core.Impl.IUseCaseConfigFactory.GetConfig(AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType! p0, int p1) -> AndroidX.Camera.Core.Impl.IConfig?
AndroidX.Camera.Core.Impl.IUseCaseConfigFactoryProvider
AndroidX.Camera.Core.Impl.IUseCaseConfigFactoryProvider.NewInstance(Android.Content.Context! p0) -> AndroidX.Camera.Core.Impl.IUseCaseConfigFactory!
AndroidX.Camera.Core.Impl.Identifier
AndroidX.Camera.Core.Impl.Identifier.Identifier() -> void
AndroidX.Camera.Core.Impl.Identifier.Identifier(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.ImageAnalysisConfig
AndroidX.Camera.Core.Impl.ImageAnalysisConfig.BackpressureStrategy.get -> int
AndroidX.Camera.Core.Impl.ImageAnalysisConfig.Config.get -> AndroidX.Camera.Core.Impl.IConfig!
AndroidX.Camera.Core.Impl.ImageAnalysisConfig.GetBackpressureStrategy(int valueIfMissing) -> int
AndroidX.Camera.Core.Impl.ImageAnalysisConfig.GetImageQueueDepth(int valueIfMissing) -> int
AndroidX.Camera.Core.Impl.ImageAnalysisConfig.GetOnePixelShiftEnabled(Java.Lang.Boolean? valueIfMissing) -> Java.Lang.Boolean?
AndroidX.Camera.Core.Impl.ImageAnalysisConfig.GetOutputImageFormat(int valueIfMissing) -> int
AndroidX.Camera.Core.Impl.ImageAnalysisConfig.ImageAnalysisConfig(AndroidX.Camera.Core.Impl.OptionsBundle! config) -> void
AndroidX.Camera.Core.Impl.ImageAnalysisConfig.ImageQueueDepth.get -> int
AndroidX.Camera.Core.Impl.ImageAnalysisConfig.ImageReaderProxyProvider.get -> AndroidX.Camera.Core.IImageReaderProxyProvider?
AndroidX.Camera.Core.Impl.ImageAnalysisConfig.InputFormat.get -> int
AndroidX.Camera.Core.Impl.ImageAnalysisConfig.IsOutputImageRotationEnabled(Java.Lang.Boolean? valueIfMissing) -> Java.Lang.Boolean?
AndroidX.Camera.Core.Impl.ImageCaptureConfig
AndroidX.Camera.Core.Impl.ImageCaptureConfig.BufferFormat.get -> Java.Lang.Integer!
AndroidX.Camera.Core.Impl.ImageCaptureConfig.CaptureBundle.get -> AndroidX.Camera.Core.Impl.ICaptureBundle!
AndroidX.Camera.Core.Impl.ImageCaptureConfig.CaptureMode.get -> int
AndroidX.Camera.Core.Impl.ImageCaptureConfig.Config.get -> AndroidX.Camera.Core.Impl.IConfig!
AndroidX.Camera.Core.Impl.ImageCaptureConfig.FlashMode.get -> int
AndroidX.Camera.Core.Impl.ImageCaptureConfig.FlashType.get -> int
AndroidX.Camera.Core.Impl.ImageCaptureConfig.GetBufferFormat(Java.Lang.Integer? valueIfMissing) -> Java.Lang.Integer?
AndroidX.Camera.Core.Impl.ImageCaptureConfig.GetCaptureBundle(AndroidX.Camera.Core.Impl.ICaptureBundle? valueIfMissing) -> AndroidX.Camera.Core.Impl.ICaptureBundle?
AndroidX.Camera.Core.Impl.ImageCaptureConfig.GetFlashMode(int valueIfMissing) -> int
AndroidX.Camera.Core.Impl.ImageCaptureConfig.GetFlashType(int valueIfMissing) -> int
AndroidX.Camera.Core.Impl.ImageCaptureConfig.GetIoExecutor(Java.Util.Concurrent.IExecutor? valueIfMissing) -> Java.Util.Concurrent.IExecutor?
AndroidX.Camera.Core.Impl.ImageCaptureConfig.GetJpegQuality(int valueIfMissing) -> int
AndroidX.Camera.Core.Impl.ImageCaptureConfig.GetMaxCaptureStages(int valueIfMissing) -> int
AndroidX.Camera.Core.Impl.ImageCaptureConfig.HasCaptureMode.get -> bool
AndroidX.Camera.Core.Impl.ImageCaptureConfig.ImageCaptureConfig(AndroidX.Camera.Core.Impl.OptionsBundle! config) -> void
AndroidX.Camera.Core.Impl.ImageCaptureConfig.ImageReaderProxyProvider.get -> AndroidX.Camera.Core.IImageReaderProxyProvider?
AndroidX.Camera.Core.Impl.ImageCaptureConfig.InputFormat.get -> int
AndroidX.Camera.Core.Impl.ImageCaptureConfig.IoExecutor.get -> Java.Util.Concurrent.IExecutor!
AndroidX.Camera.Core.Impl.ImageCaptureConfig.IsPostviewEnabled.get -> bool
AndroidX.Camera.Core.Impl.ImageCaptureConfig.IsSoftwareJpegEncoderRequested.get -> bool
AndroidX.Camera.Core.Impl.ImageCaptureConfig.JpegQuality.get -> int
AndroidX.Camera.Core.Impl.ImageCaptureConfig.MaxCaptureStages.get -> int
AndroidX.Camera.Core.Impl.ImageCaptureConfig.PostviewResolutionSelector.get -> AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector?
AndroidX.Camera.Core.Impl.ImageCaptureConfig.ScreenFlash.get -> AndroidX.Camera.Core.ImageCapture.IScreenFlash?
AndroidX.Camera.Core.Impl.ImageFormatConstants
AndroidX.Camera.Core.Impl.ImageInputConfig
AndroidX.Camera.Core.Impl.ImageInputConfigConsts
AndroidX.Camera.Core.Impl.ImageOutputConfig
AndroidX.Camera.Core.Impl.ImageOutputConfigConsts
AndroidX.Camera.Core.Impl.ImageReaderProxyOnImageAvailableEventArgs
AndroidX.Camera.Core.Impl.ImageReaderProxyOnImageAvailableEventArgs.ImageReaderProxyOnImageAvailableEventArgs(AndroidX.Camera.Core.Impl.IImageReaderProxy! p0) -> void
AndroidX.Camera.Core.Impl.ImageReaderProxyOnImageAvailableEventArgs.P0.get -> AndroidX.Camera.Core.Impl.IImageReaderProxy!
AndroidX.Camera.Core.Impl.ImmediateSurface
AndroidX.Camera.Core.Impl.ImmediateSurface.ImmediateSurface(Android.Views.Surface! surface) -> void
AndroidX.Camera.Core.Impl.ImmediateSurface.ImmediateSurface(Android.Views.Surface! surface, Android.Util.Size! size, int format) -> void
AndroidX.Camera.Core.Impl.LensFacingCameraFilter
AndroidX.Camera.Core.Impl.LensFacingCameraFilter.InterfaceConsts
AndroidX.Camera.Core.Impl.LensFacingCameraFilter.LensFacingCameraFilter(int lensFacing) -> void
AndroidX.Camera.Core.Impl.LensFacingCameraFilter.LensFacingCameraFilter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.LiveDataObservable
AndroidX.Camera.Core.Impl.LiveDataObservable.AddObserver(Java.Util.Concurrent.IExecutor! executor, AndroidX.Camera.Core.Impl.IObservableObserver! observer) -> void
AndroidX.Camera.Core.Impl.LiveDataObservable.FetchData() -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.Impl.LiveDataObservable.LiveData.get -> AndroidX.Lifecycle.LiveData!
AndroidX.Camera.Core.Impl.LiveDataObservable.LiveDataObservable() -> void
AndroidX.Camera.Core.Impl.LiveDataObservable.PostError(Java.Lang.Throwable! error) -> void
AndroidX.Camera.Core.Impl.LiveDataObservable.PostValue(Java.Lang.Object? value) -> void
AndroidX.Camera.Core.Impl.LiveDataObservable.RemoveObserver(AndroidX.Camera.Core.Impl.IObservableObserver! observer) -> void
AndroidX.Camera.Core.Impl.LiveDataObservable.Result
AndroidX.Camera.Core.Impl.LiveDataObservable.Result.CompletedSuccessfully() -> bool
AndroidX.Camera.Core.Impl.LiveDataObservable.Result.Error.get -> Java.Lang.Throwable?
AndroidX.Camera.Core.Impl.LiveDataObservable.Result.Value.get -> Java.Lang.Object?
AndroidX.Camera.Core.Impl.MetadataHolderService
AndroidX.Camera.Core.Impl.MetadataHolderService.MetadataHolderService(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.MultiValueSet
AndroidX.Camera.Core.Impl.MultiValueSet.MultiValueSet() -> void
AndroidX.Camera.Core.Impl.MultiValueSet.MultiValueSet(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.MutableOptionsBundle
AndroidX.Camera.Core.Impl.MutableOptionsBundle.InsertOption(AndroidX.Camera.Core.Impl.ConfigOption! opt, AndroidX.Camera.Core.Impl.ConfigOptionPriority! priority, Java.Lang.Object? value) -> void
AndroidX.Camera.Core.Impl.MutableOptionsBundle.InsertOption(AndroidX.Camera.Core.Impl.ConfigOption! opt, Java.Lang.Object? value) -> void
AndroidX.Camera.Core.Impl.MutableOptionsBundle.RemoveOption(AndroidX.Camera.Core.Impl.ConfigOption! opt) -> Java.Lang.Object?
AndroidX.Camera.Core.Impl.MutableStateObservable
AndroidX.Camera.Core.Impl.MutableStateObservable.MutableStateObservable(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.MutableTagBundle
AndroidX.Camera.Core.Impl.MutableTagBundle.MutableTagBundle(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.OptionsBundle
AndroidX.Camera.Core.Impl.OptionsBundle.MOptions.get -> Java.Util.TreeMap?
AndroidX.Camera.Core.Impl.OptionsBundle.MOptions.set -> void
AndroidX.Camera.Core.Impl.OptionsBundle.OptionsBundle(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.OutputSurface
AndroidX.Camera.Core.Impl.OutputSurface.OutputSurface() -> void
AndroidX.Camera.Core.Impl.OutputSurface.OutputSurface(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.OutputSurfaceConfiguration
AndroidX.Camera.Core.Impl.OutputSurfaceConfiguration.OutputSurfaceConfiguration() -> void
AndroidX.Camera.Core.Impl.OutputSurfaceConfiguration.OutputSurfaceConfiguration(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.PreviewConfig
AndroidX.Camera.Core.Impl.PreviewConfig.Config.get -> AndroidX.Camera.Core.Impl.IConfig!
AndroidX.Camera.Core.Impl.PreviewConfig.InputFormat.get -> int
AndroidX.Camera.Core.Impl.PreviewConfig.PreviewConfig(AndroidX.Camera.Core.Impl.OptionsBundle! config) -> void
AndroidX.Camera.Core.Impl.QuirkSettings
AndroidX.Camera.Core.Impl.QuirkSettings.Builder
AndroidX.Camera.Core.Impl.QuirkSettings.Builder.Builder() -> void
AndroidX.Camera.Core.Impl.QuirkSettings.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.QuirkSettings.QuirkSettings(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.QuirkSettingsHolder
AndroidX.Camera.Core.Impl.QuirkSettingsHolder.Get() -> AndroidX.Camera.Core.Impl.QuirkSettings!
AndroidX.Camera.Core.Impl.QuirkSettingsHolder.Observe(Java.Util.Concurrent.IExecutor! executor, AndroidX.Core.Util.IConsumer! listener) -> void
AndroidX.Camera.Core.Impl.QuirkSettingsHolder.QuirkSettingsHolder() -> void
AndroidX.Camera.Core.Impl.QuirkSettingsHolder.Reset() -> void
AndroidX.Camera.Core.Impl.QuirkSettingsHolder.Set(AndroidX.Camera.Core.Impl.QuirkSettings! settings) -> void
AndroidX.Camera.Core.Impl.QuirkSettingsLoader
AndroidX.Camera.Core.Impl.QuirkSettingsLoader.MetadataHolderService
AndroidX.Camera.Core.Impl.QuirkSettingsLoader.MetadataHolderService.MetadataHolderService(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.QuirkSettingsLoader.QuirkSettingsLoader() -> void
AndroidX.Camera.Core.Impl.QuirkSettingsLoader.QuirkSettingsLoader(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.Quirks
AndroidX.Camera.Core.Impl.Quirks.Quirks(System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.IQuirk!>! quirks) -> void
AndroidX.Camera.Core.Impl.Quirks.Quirks(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.RestrictedCameraControl
AndroidX.Camera.Core.Impl.RestrictedCameraControl.RestrictedCameraControl(AndroidX.Camera.Core.Impl.ICameraControlInternal! cameraControl, AndroidX.Camera.Core.Impl.ISessionProcessor? sessionProcessor) -> void
AndroidX.Camera.Core.Impl.RestrictedCameraControl.RestrictedCameraControl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.RestrictedCameraInfo
AndroidX.Camera.Core.Impl.RestrictedCameraInfo.ICameraOperation
AndroidX.Camera.Core.Impl.RestrictedCameraInfo.RestrictedCameraInfo(AndroidX.Camera.Core.Impl.ICameraInfoInternal! cameraInfo, AndroidX.Camera.Core.Impl.ICameraConfig! cameraConfig) -> void
AndroidX.Camera.Core.Impl.RestrictedCameraInfo.RestrictedCameraInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.SessionConfig
AndroidX.Camera.Core.Impl.SessionConfig.Builder
AndroidX.Camera.Core.Impl.SessionConfig.Builder.Builder() -> void
AndroidX.Camera.Core.Impl.SessionConfig.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.SessionConfig.CloseableErrorListener
AndroidX.Camera.Core.Impl.SessionConfig.CloseableErrorListener.Close() -> void
AndroidX.Camera.Core.Impl.SessionConfig.CloseableErrorListener.CloseableErrorListener(AndroidX.Camera.Core.Impl.SessionConfig.IErrorListener! errorListener) -> void
AndroidX.Camera.Core.Impl.SessionConfig.CloseableErrorListener.OnError(AndroidX.Camera.Core.Impl.SessionConfig! sessionConfig, AndroidX.Camera.Core.Impl.SessionConfig.SessionError! error) -> void
AndroidX.Camera.Core.Impl.SessionConfig.DeviceStateCallbacks.get -> System.Collections.Generic.IList<Android.Hardware.Camera2.CameraDevice.StateCallback!>!
AndroidX.Camera.Core.Impl.SessionConfig.ErrorEventArgs
AndroidX.Camera.Core.Impl.SessionConfig.ErrorEventArgs.ErrorEventArgs(AndroidX.Camera.Core.Impl.SessionConfig! p0, AndroidX.Camera.Core.Impl.SessionConfig.SessionError! p1) -> void
AndroidX.Camera.Core.Impl.SessionConfig.ErrorEventArgs.P0.get -> AndroidX.Camera.Core.Impl.SessionConfig!
AndroidX.Camera.Core.Impl.SessionConfig.ErrorEventArgs.P1.get -> AndroidX.Camera.Core.Impl.SessionConfig.SessionError!
AndroidX.Camera.Core.Impl.SessionConfig.ErrorListener.get -> AndroidX.Camera.Core.Impl.SessionConfig.IErrorListener?
AndroidX.Camera.Core.Impl.SessionConfig.ExpectedFrameRateRange.get -> Android.Util.Range!
AndroidX.Camera.Core.Impl.SessionConfig.IErrorListener
AndroidX.Camera.Core.Impl.SessionConfig.IErrorListener.OnError(AndroidX.Camera.Core.Impl.SessionConfig! p0, AndroidX.Camera.Core.Impl.SessionConfig.SessionError! p1) -> void
AndroidX.Camera.Core.Impl.SessionConfig.IOptionUnpacker
AndroidX.Camera.Core.Impl.SessionConfig.IOptionUnpacker.Unpack(Android.Util.Size! p0, AndroidX.Camera.Core.Impl.IUseCaseConfig! p1, AndroidX.Camera.Core.Impl.SessionConfig.Builder! p2) -> void
AndroidX.Camera.Core.Impl.SessionConfig.ImplementationOptions.get -> AndroidX.Camera.Core.Impl.IConfig!
AndroidX.Camera.Core.Impl.SessionConfig.InputConfiguration.get -> Android.Hardware.Camera2.Params.InputConfiguration?
AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig
AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.Builder
AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.Builder.Builder() -> void
AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.OutputConfig() -> void
AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.OutputConfig(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.SessionConfig.OutputConfigs.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig!>!
AndroidX.Camera.Core.Impl.SessionConfig.PostviewOutputConfig.get -> AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig?
AndroidX.Camera.Core.Impl.SessionConfig.RepeatingCameraCaptureCallbacks.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.CameraCaptureCallback!>!
AndroidX.Camera.Core.Impl.SessionConfig.RepeatingCaptureConfig.get -> AndroidX.Camera.Core.Impl.CaptureConfig!
AndroidX.Camera.Core.Impl.SessionConfig.SessionError
AndroidX.Camera.Core.Impl.SessionConfig.SessionStateCallbacks.get -> System.Collections.Generic.IList<Android.Hardware.Camera2.CameraCaptureSession.StateCallback!>!
AndroidX.Camera.Core.Impl.SessionConfig.SessionType.get -> int
AndroidX.Camera.Core.Impl.SessionConfig.SingleCameraCaptureCallbacks.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.CameraCaptureCallback!>!
AndroidX.Camera.Core.Impl.SessionConfig.Surfaces.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.DeferrableSurface!>!
AndroidX.Camera.Core.Impl.SessionConfig.TemplateType.get -> int
AndroidX.Camera.Core.Impl.SessionConfig.ValidatingBuilder
AndroidX.Camera.Core.Impl.SessionConfig.ValidatingBuilder.Add(AndroidX.Camera.Core.Impl.SessionConfig! sessionConfig) -> void
AndroidX.Camera.Core.Impl.SessionConfig.ValidatingBuilder.AddImplementationOption(AndroidX.Camera.Core.Impl.ConfigOption! option, Java.Lang.Object! value) -> void
AndroidX.Camera.Core.Impl.SessionConfig.ValidatingBuilder.Build() -> AndroidX.Camera.Core.Impl.SessionConfig!
AndroidX.Camera.Core.Impl.SessionConfig.ValidatingBuilder.ClearSurfaces() -> void
AndroidX.Camera.Core.Impl.SessionConfig.ValidatingBuilder.IsValid.get -> bool
AndroidX.Camera.Core.Impl.SessionConfig.ValidatingBuilder.ValidatingBuilder() -> void
AndroidX.Camera.Core.Impl.SessionProcessorSurface
AndroidX.Camera.Core.Impl.SessionProcessorSurface.OutputConfigId.get -> int
AndroidX.Camera.Core.Impl.SessionProcessorSurface.SessionProcessorSurface(Android.Views.Surface! surface, int outputConfigId) -> void
AndroidX.Camera.Core.Impl.SingleImageProxyBundle
AndroidX.Camera.Core.Impl.SingleImageProxyBundle.CaptureIds.get -> System.Collections.Generic.IList<Java.Lang.Integer!>!
AndroidX.Camera.Core.Impl.SingleImageProxyBundle.Close() -> void
AndroidX.Camera.Core.Impl.SingleImageProxyBundle.GetImageProxy(int captureId) -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.Impl.SingleImageProxyBundle.SingleImageProxyBundle(AndroidX.Camera.Core.IImageProxy! imageProxy, string! tagBundleKey) -> void
AndroidX.Camera.Core.Impl.Stabilization.StabilizationMode
AndroidX.Camera.Core.Impl.Stabilization.StabilizationMode.IMode
AndroidX.Camera.Core.Impl.Stabilization.StabilizationMode.StabilizationMode(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.StateObservable
AndroidX.Camera.Core.Impl.StateObservable.StateObservable(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.StreamSpec
AndroidX.Camera.Core.Impl.StreamSpec.Builder
AndroidX.Camera.Core.Impl.StreamSpec.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.StreamSpec.StreamSpec() -> void
AndroidX.Camera.Core.Impl.StreamSpec.StreamSpec(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.SurfaceCombination
AndroidX.Camera.Core.Impl.SurfaceCombination.AddSurfaceConfig(AndroidX.Camera.Core.Impl.SurfaceConfig! surfaceConfig) -> bool
AndroidX.Camera.Core.Impl.SurfaceCombination.GetOrderedSupportedSurfaceConfigList(System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.SurfaceConfig!>! configList) -> System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.SurfaceConfig!>?
AndroidX.Camera.Core.Impl.SurfaceCombination.RemoveSurfaceConfig(AndroidX.Camera.Core.Impl.SurfaceConfig! surfaceConfig) -> bool
AndroidX.Camera.Core.Impl.SurfaceCombination.SurfaceCombination() -> void
AndroidX.Camera.Core.Impl.SurfaceCombination.SurfaceConfigList.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.SurfaceConfig!>!
AndroidX.Camera.Core.Impl.SurfaceConfig
AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize
AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigType
AndroidX.Camera.Core.Impl.SurfaceConfig.IsSupported(AndroidX.Camera.Core.Impl.SurfaceConfig! surfaceConfig) -> bool
AndroidX.Camera.Core.Impl.SurfaceConfig.SurfaceConfig(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.SurfaceSizeDefinition
AndroidX.Camera.Core.Impl.SurfaceSizeDefinition.SurfaceSizeDefinition(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.TagBundle
AndroidX.Camera.Core.Impl.TagBundle.MTagMap.get -> System.Collections.IDictionary?
AndroidX.Camera.Core.Impl.TagBundle.MTagMap.set -> void
AndroidX.Camera.Core.Impl.TagBundle.TagBundle(System.Collections.Generic.IDictionary<string!, Java.Lang.Object!>! tagMap) -> void
AndroidX.Camera.Core.Impl.TagBundle.TagBundle(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.Timebase
AndroidX.Camera.Core.Impl.TimeoutRetryPolicy
AndroidX.Camera.Core.Impl.TimeoutRetryPolicy.InterfaceConsts
AndroidX.Camera.Core.Impl.TimeoutRetryPolicy.OnRetryDecisionRequested(AndroidX.Camera.Core.IRetryPolicyExecutionState! executionState) -> AndroidX.Camera.Core.RetryPolicyRetryConfig!
AndroidX.Camera.Core.Impl.TimeoutRetryPolicy.TimeoutInMillis.get -> long
AndroidX.Camera.Core.Impl.TimeoutRetryPolicy.TimeoutRetryPolicy(long timeoutInMillis, AndroidX.Camera.Core.IRetryPolicy! delegatePolicy) -> void
AndroidX.Camera.Core.Impl.UseCaseAttachState
AndroidX.Camera.Core.Impl.UseCaseAttachState.ActiveAndAttachedBuilder.get -> AndroidX.Camera.Core.Impl.SessionConfig.ValidatingBuilder!
AndroidX.Camera.Core.Impl.UseCaseAttachState.ActiveAndAttachedSessionConfigs.get -> System.Collections.Generic.ICollection<AndroidX.Camera.Core.Impl.SessionConfig!>!
AndroidX.Camera.Core.Impl.UseCaseAttachState.AttachedBuilder.get -> AndroidX.Camera.Core.Impl.SessionConfig.ValidatingBuilder!
AndroidX.Camera.Core.Impl.UseCaseAttachState.AttachedSessionConfigs.get -> System.Collections.Generic.ICollection<AndroidX.Camera.Core.Impl.SessionConfig!>!
AndroidX.Camera.Core.Impl.UseCaseAttachState.AttachedUseCaseConfigs.get -> System.Collections.Generic.ICollection<AndroidX.Camera.Core.Impl.IUseCaseConfig!>!
AndroidX.Camera.Core.Impl.UseCaseAttachState.AttachedUseCaseInfo.get -> System.Collections.Generic.ICollection<AndroidX.Camera.Core.Impl.UseCaseAttachState.UseCaseAttachInfo!>!
AndroidX.Camera.Core.Impl.UseCaseAttachState.IsUseCaseAttached(string! useCaseId) -> bool
AndroidX.Camera.Core.Impl.UseCaseAttachState.RemoveUseCase(string! useCaseId) -> void
AndroidX.Camera.Core.Impl.UseCaseAttachState.SetUseCaseActive(string! useCaseId, AndroidX.Camera.Core.Impl.SessionConfig! sessionConfig, AndroidX.Camera.Core.Impl.IUseCaseConfig! useCaseConfig, AndroidX.Camera.Core.Impl.StreamSpec? streamSpec, System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType!>? captureTypes) -> void
AndroidX.Camera.Core.Impl.UseCaseAttachState.SetUseCaseAttached(string! useCaseId, AndroidX.Camera.Core.Impl.SessionConfig! sessionConfig, AndroidX.Camera.Core.Impl.IUseCaseConfig! useCaseConfig, AndroidX.Camera.Core.Impl.StreamSpec? streamSpec, System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType!>? captureTypes) -> void
AndroidX.Camera.Core.Impl.UseCaseAttachState.SetUseCaseDetached(string! useCaseId) -> void
AndroidX.Camera.Core.Impl.UseCaseAttachState.SetUseCaseInactive(string! useCaseId) -> void
AndroidX.Camera.Core.Impl.UseCaseAttachState.UpdateUseCase(string! useCaseId, AndroidX.Camera.Core.Impl.SessionConfig! sessionConfig, AndroidX.Camera.Core.Impl.IUseCaseConfig! useCaseConfig, AndroidX.Camera.Core.Impl.StreamSpec? streamSpec, System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType!>? captureTypes) -> void
AndroidX.Camera.Core.Impl.UseCaseAttachState.UseCaseAttachInfo
AndroidX.Camera.Core.Impl.UseCaseAttachState.UseCaseAttachInfo.CaptureTypes.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType!>?
AndroidX.Camera.Core.Impl.UseCaseAttachState.UseCaseAttachInfo.SessionConfig.get -> AndroidX.Camera.Core.Impl.SessionConfig!
AndroidX.Camera.Core.Impl.UseCaseAttachState.UseCaseAttachInfo.StreamSpec.get -> AndroidX.Camera.Core.Impl.StreamSpec?
AndroidX.Camera.Core.Impl.UseCaseAttachState.UseCaseAttachInfo.UseCaseConfig.get -> AndroidX.Camera.Core.Impl.IUseCaseConfig!
AndroidX.Camera.Core.Impl.UseCaseAttachState.UseCaseAttachState(string! cameraId) -> void
AndroidX.Camera.Core.Impl.UseCaseConfig
AndroidX.Camera.Core.Impl.UseCaseConfigConsts
AndroidX.Camera.Core.Impl.UseCaseConfigFactory
AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType
AndroidX.Camera.Core.Impl.UseCaseConfigFactoryConsts
AndroidX.Camera.Core.Impl.Utils.AspectRatioUtil
AndroidX.Camera.Core.Impl.Utils.AspectRatioUtil.CompareAspectRatiosByMappingAreaInFullFovAspectRatioSpace
AndroidX.Camera.Core.Impl.Utils.AspectRatioUtil.CompareAspectRatiosByMappingAreaInFullFovAspectRatioSpace.Compare(Java.Lang.Object? lhs, Java.Lang.Object? rhs) -> int
AndroidX.Camera.Core.Impl.Utils.AspectRatioUtil.CompareAspectRatiosByMappingAreaInFullFovAspectRatioSpace.CompareAspectRatiosByMappingAreaInFullFovAspectRatioSpace(Android.Util.Rational! targetRatio, Android.Util.Rational? fullFovRatio) -> void
AndroidX.Camera.Core.Impl.Utils.CameraOrientationUtil
AndroidX.Camera.Core.Impl.Utils.CloseGuardHelper
AndroidX.Camera.Core.Impl.Utils.CloseGuardHelper.Close() -> void
AndroidX.Camera.Core.Impl.Utils.CloseGuardHelper.Open(string! closeMethodName) -> void
AndroidX.Camera.Core.Impl.Utils.CloseGuardHelper.WarnIfOpen() -> void
AndroidX.Camera.Core.Impl.Utils.CompareSizesByArea
AndroidX.Camera.Core.Impl.Utils.CompareSizesByArea.Compare(Java.Lang.Object! lhs, Java.Lang.Object! rhs) -> int
AndroidX.Camera.Core.Impl.Utils.CompareSizesByArea.CompareSizesByArea() -> void
AndroidX.Camera.Core.Impl.Utils.CompareSizesByArea.CompareSizesByArea(bool reverse) -> void
AndroidX.Camera.Core.Impl.Utils.ContextUtil
AndroidX.Camera.Core.Impl.Utils.Executors.AudioExecutor
AndroidX.Camera.Core.Impl.Utils.Executors.AudioExecutor.AudioExecutor() -> void
AndroidX.Camera.Core.Impl.Utils.Executors.AudioExecutor.AudioExecutor(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.Utils.Executors.CameraXExecutors
AndroidX.Camera.Core.Impl.Utils.Exif
AndroidX.Camera.Core.Impl.Utils.Exif.AttachLocation(Android.Locations.Location! location) -> void
AndroidX.Camera.Core.Impl.Utils.Exif.AttachTimestamp() -> void
AndroidX.Camera.Core.Impl.Utils.Exif.CopyToCroppedImage(AndroidX.Camera.Core.Impl.Utils.Exif! croppedExif) -> void
AndroidX.Camera.Core.Impl.Utils.Exif.Description.get -> string?
AndroidX.Camera.Core.Impl.Utils.Exif.Description.set -> void
AndroidX.Camera.Core.Impl.Utils.Exif.ExifInterface.get -> AndroidX.ExifInterface.Media.ExifInterface!
AndroidX.Camera.Core.Impl.Utils.Exif.FlipHorizontally() -> void
AndroidX.Camera.Core.Impl.Utils.Exif.FlipVertically() -> void
AndroidX.Camera.Core.Impl.Utils.Exif.Height.get -> int
AndroidX.Camera.Core.Impl.Utils.Exif.IsFlippedHorizontally.get -> bool
AndroidX.Camera.Core.Impl.Utils.Exif.IsFlippedVertically.get -> bool
AndroidX.Camera.Core.Impl.Utils.Exif.LastModifiedTimestamp.get -> long
AndroidX.Camera.Core.Impl.Utils.Exif.Location.get -> Android.Locations.Location?
AndroidX.Camera.Core.Impl.Utils.Exif.Metadata.get -> string?
AndroidX.Camera.Core.Impl.Utils.Exif.Orientation.get -> int
AndroidX.Camera.Core.Impl.Utils.Exif.Orientation.set -> void
AndroidX.Camera.Core.Impl.Utils.Exif.RemoveLocation() -> void
AndroidX.Camera.Core.Impl.Utils.Exif.RemoveTimestamp() -> void
AndroidX.Camera.Core.Impl.Utils.Exif.Rotate(int degrees) -> void
AndroidX.Camera.Core.Impl.Utils.Exif.Rotation.get -> int
AndroidX.Camera.Core.Impl.Utils.Exif.Save() -> void
AndroidX.Camera.Core.Impl.Utils.Exif.Timestamp.get -> long
AndroidX.Camera.Core.Impl.Utils.Exif.Width.get -> int
AndroidX.Camera.Core.Impl.Utils.ExifData
AndroidX.Camera.Core.Impl.Utils.ExifData.Builder
AndroidX.Camera.Core.Impl.Utils.ExifData.Builder.Build() -> AndroidX.Camera.Core.Impl.Utils.ExifData!
AndroidX.Camera.Core.Impl.Utils.ExifData.Builder.RemoveAttribute(string! tag) -> AndroidX.Camera.Core.Impl.Utils.ExifData.Builder!
AndroidX.Camera.Core.Impl.Utils.ExifData.Builder.SetAttribute(string! tag, string! value) -> AndroidX.Camera.Core.Impl.Utils.ExifData.Builder!
AndroidX.Camera.Core.Impl.Utils.ExifData.Builder.SetExposureTimeNanos(long exposureTimeNs) -> AndroidX.Camera.Core.Impl.Utils.ExifData.Builder!
AndroidX.Camera.Core.Impl.Utils.ExifData.Builder.SetFlashState(AndroidX.Camera.Core.Impl.CameraCaptureMetaData.FlashState! flashState) -> AndroidX.Camera.Core.Impl.Utils.ExifData.Builder!
AndroidX.Camera.Core.Impl.Utils.ExifData.Builder.SetFocalLength(float focalLength) -> AndroidX.Camera.Core.Impl.Utils.ExifData.Builder!
AndroidX.Camera.Core.Impl.Utils.ExifData.Builder.SetImageHeight(int height) -> AndroidX.Camera.Core.Impl.Utils.ExifData.Builder!
AndroidX.Camera.Core.Impl.Utils.ExifData.Builder.SetImageWidth(int width) -> AndroidX.Camera.Core.Impl.Utils.ExifData.Builder!
AndroidX.Camera.Core.Impl.Utils.ExifData.Builder.SetIso(int iso) -> AndroidX.Camera.Core.Impl.Utils.ExifData.Builder!
AndroidX.Camera.Core.Impl.Utils.ExifData.Builder.SetLensFNumber(float fNumber) -> AndroidX.Camera.Core.Impl.Utils.ExifData.Builder!
AndroidX.Camera.Core.Impl.Utils.ExifData.Builder.SetOrientationDegrees(int orientationDegrees) -> AndroidX.Camera.Core.Impl.Utils.ExifData.Builder!
AndroidX.Camera.Core.Impl.Utils.ExifData.Builder.SetWhiteBalanceMode(AndroidX.Camera.Core.Impl.Utils.ExifData.WhiteBalanceMode! whiteBalanceMode) -> AndroidX.Camera.Core.Impl.Utils.ExifData.Builder!
AndroidX.Camera.Core.Impl.Utils.ExifData.ExifData(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.Utils.ExifData.WhiteBalanceMode
AndroidX.Camera.Core.Impl.Utils.ExifOutputStream
AndroidX.Camera.Core.Impl.Utils.ExifOutputStream.ExifOutputStream(System.IO.Stream! ou, AndroidX.Camera.Core.Impl.Utils.ExifData! exifData) -> void
AndroidX.Camera.Core.Impl.Utils.Futures.FutureChain
AndroidX.Camera.Core.Impl.Utils.Futures.FutureChain.AddCallback(AndroidX.Camera.Core.Impl.Utils.Futures.IFutureCallback! callback, Java.Util.Concurrent.IExecutor! executor) -> void
AndroidX.Camera.Core.Impl.Utils.Futures.FutureChain.FutureChain(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.Utils.Futures.FutureChain.Transform(AndroidX.Arch.Core.Util.IFunction! function, Java.Util.Concurrent.IExecutor! executor) -> AndroidX.Camera.Core.Impl.Utils.Futures.FutureChain!
AndroidX.Camera.Core.Impl.Utils.Futures.FutureChain.TransformAsync(AndroidX.Camera.Core.Impl.Utils.Futures.IAsyncFunction! function, Java.Util.Concurrent.IExecutor! executor) -> AndroidX.Camera.Core.Impl.Utils.Futures.FutureChain!
AndroidX.Camera.Core.Impl.Utils.Futures.Futures
AndroidX.Camera.Core.Impl.Utils.Futures.IAsyncFunction
AndroidX.Camera.Core.Impl.Utils.Futures.IAsyncFunction.Apply(Java.Lang.Object? p0) -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.Impl.Utils.Futures.IFutureCallback
AndroidX.Camera.Core.Impl.Utils.Futures.IFutureCallback.OnFailure(Java.Lang.Throwable! p0) -> void
AndroidX.Camera.Core.Impl.Utils.Futures.IFutureCallback.OnSuccess(Java.Lang.Object? p0) -> void
AndroidX.Camera.Core.Impl.Utils.InterruptedRuntimeException
AndroidX.Camera.Core.Impl.Utils.InterruptedRuntimeException.InterruptedRuntimeException() -> void
AndroidX.Camera.Core.Impl.Utils.InterruptedRuntimeException.InterruptedRuntimeException(Java.Lang.Throwable! cause) -> void
AndroidX.Camera.Core.Impl.Utils.InterruptedRuntimeException.InterruptedRuntimeException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.Utils.InterruptedRuntimeException.InterruptedRuntimeException(string! message) -> void
AndroidX.Camera.Core.Impl.Utils.InterruptedRuntimeException.InterruptedRuntimeException(string! message, Java.Lang.Throwable! cause) -> void
AndroidX.Camera.Core.Impl.Utils.MainThreadAsyncHandler
AndroidX.Camera.Core.Impl.Utils.MatrixExt
AndroidX.Camera.Core.Impl.Utils.Optional
AndroidX.Camera.Core.Impl.Utils.Optional.Optional(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.Utils.ResolutionSelectorUtil
AndroidX.Camera.Core.Impl.Utils.ResolutionSelectorUtil.ResolutionSelectorUtil(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.Utils.SessionProcessorUtil
AndroidX.Camera.Core.Impl.Utils.SurfaceUtil
AndroidX.Camera.Core.Impl.Utils.SurfaceUtil.SurfaceInfo
AndroidX.Camera.Core.Impl.Utils.SurfaceUtil.SurfaceInfo.Format.get -> int
AndroidX.Camera.Core.Impl.Utils.SurfaceUtil.SurfaceInfo.Format.set -> void
AndroidX.Camera.Core.Impl.Utils.SurfaceUtil.SurfaceInfo.Height.get -> int
AndroidX.Camera.Core.Impl.Utils.SurfaceUtil.SurfaceInfo.Height.set -> void
AndroidX.Camera.Core.Impl.Utils.SurfaceUtil.SurfaceInfo.SurfaceInfo() -> void
AndroidX.Camera.Core.Impl.Utils.SurfaceUtil.SurfaceInfo.SurfaceInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.Utils.SurfaceUtil.SurfaceInfo.Width.get -> int
AndroidX.Camera.Core.Impl.Utils.SurfaceUtil.SurfaceInfo.Width.set -> void
AndroidX.Camera.Core.Impl.Utils.SurfaceUtil.SurfaceUtil(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Impl.Utils.Threads
AndroidX.Camera.Core.Impl.Utils.TransformUtils
AndroidX.Camera.Core.Impl.Utils.TransformUtils.TransformUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.InitializationException
AndroidX.Camera.Core.InitializationException.InitializationException(Java.Lang.Throwable? cause) -> void
AndroidX.Camera.Core.InitializationException.InitializationException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.InitializationException.InitializationException(string? message) -> void
AndroidX.Camera.Core.InitializationException.InitializationException(string? message, Java.Lang.Throwable? cause) -> void
AndroidX.Camera.Core.Internal.ByteBufferOutputStream
AndroidX.Camera.Core.Internal.ByteBufferOutputStream.ByteBufferOutputStream(Java.Nio.ByteBuffer! buf) -> void
AndroidX.Camera.Core.Internal.CameraCaptureResultImageInfo
AndroidX.Camera.Core.Internal.CameraCaptureResultImageInfo.CameraCaptureResult.get -> AndroidX.Camera.Core.Impl.ICameraCaptureResult!
AndroidX.Camera.Core.Internal.CameraCaptureResultImageInfo.CameraCaptureResultImageInfo(AndroidX.Camera.Core.Impl.ICameraCaptureResult! cameraCaptureResult) -> void
AndroidX.Camera.Core.Internal.CameraCaptureResultImageInfo.PopulateExifData(AndroidX.Camera.Core.Impl.Utils.ExifData.Builder! exifBuilder) -> void
AndroidX.Camera.Core.Internal.CameraCaptureResultImageInfo.RotationDegrees.get -> int
AndroidX.Camera.Core.Internal.CameraCaptureResultImageInfo.SensorToBufferTransformMatrix.get -> Android.Graphics.Matrix!
AndroidX.Camera.Core.Internal.CameraCaptureResultImageInfo.TagBundle.get -> AndroidX.Camera.Core.Impl.TagBundle!
AndroidX.Camera.Core.Internal.CameraCaptureResultImageInfo.Timestamp.get -> long
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.AddUseCases(System.Collections.Generic.ICollection<AndroidX.Camera.Core.UseCase!>! appUseCasesToAdd) -> void
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.AttachUseCases() -> void
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraControl.get -> AndroidX.Camera.Core.ICameraControl!
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraException
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraException.CameraException() -> void
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraException.CameraException(Java.Lang.Throwable! cause) -> void
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraException.CameraException(string! message) -> void
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraId
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraId.CameraId() -> void
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraId.CameraId(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraInfo.get -> AndroidX.Camera.Core.ICameraInfo!
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraUseCaseAdapter(AndroidX.Camera.Core.Impl.ICameraInternal! camera, AndroidX.Camera.Core.Concurrent.ICameraCoordinator! cameraCoordinator, AndroidX.Camera.Core.Impl.ICameraDeviceSurfaceManager! cameraDeviceSurfaceManager, AndroidX.Camera.Core.Impl.IUseCaseConfigFactory! useCaseConfigFactory) -> void
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraUseCaseAdapter(AndroidX.Camera.Core.Impl.ICameraInternal! camera, AndroidX.Camera.Core.Impl.ICameraInternal? secondaryCamera, AndroidX.Camera.Core.Impl.RestrictedCameraInfo! restrictedCameraInfo, AndroidX.Camera.Core.Impl.RestrictedCameraInfo? secondaryRestrictedCameraInfo, AndroidX.Camera.Core.LayoutSettings! layoutSettings, AndroidX.Camera.Core.LayoutSettings! secondaryLayoutSettings, AndroidX.Camera.Core.Concurrent.ICameraCoordinator! cameraCoordinator, AndroidX.Camera.Core.Impl.ICameraDeviceSurfaceManager! cameraDeviceSurfaceManager, AndroidX.Camera.Core.Impl.IUseCaseConfigFactory! useCaseConfigFactory) -> void
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraUseCases.get -> System.Collections.Generic.ICollection<AndroidX.Camera.Core.UseCase!>!
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.DetachUseCases() -> void
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.ExtendedConfig.get -> AndroidX.Camera.Core.Impl.ICameraConfig!
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.GetCameraId() -> AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraId!
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.IsEquivalent(AndroidX.Camera.Core.Internal.CameraUseCaseAdapter! cameraUseCaseAdapter) -> bool
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.IsUseCasesCombinationSupported(bool withStreamSharing, params AndroidX.Camera.Core.UseCase![]! useCases) -> bool
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.RemoveUseCases(System.Collections.Generic.ICollection<AndroidX.Camera.Core.UseCase!>! useCasesToRemove) -> void
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.SecondaryCameraInfo.get -> AndroidX.Camera.Core.ICameraInfo?
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.SetActiveResumingMode(bool enabled) -> void
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.SetEffects(System.Collections.Generic.IList<AndroidX.Camera.Core.CameraEffect!>? effects) -> void
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.SetViewPort(AndroidX.Camera.Core.ViewPort? viewPort) -> void
AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.UseCases.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.UseCase!>!
AndroidX.Camera.Core.Internal.Compat.Quirk.CaptureFailedRetryQuirk
AndroidX.Camera.Core.Internal.Compat.Quirk.CaptureFailedRetryQuirk.CaptureFailedRetryQuirk() -> void
AndroidX.Camera.Core.Internal.Compat.Quirk.CaptureFailedRetryQuirk.CaptureFailedRetryQuirk(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Internal.Compat.Quirk.DeviceQuirks
AndroidX.Camera.Core.Internal.Compat.Quirk.DeviceQuirks.DeviceQuirks(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Internal.Compat.Quirk.DeviceQuirksLoader
AndroidX.Camera.Core.Internal.Compat.Quirk.DeviceQuirksLoader.DeviceQuirksLoader(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Internal.Compat.Quirk.IOnePixelShiftQuirk
AndroidX.Camera.Core.Internal.Compat.Quirk.ISoftwareJpegEncodingPreferredQuirk
AndroidX.Camera.Core.Internal.Compat.Quirk.ISurfaceProcessingQuirk
AndroidX.Camera.Core.Internal.Compat.Quirk.ISurfaceProcessingQuirk.WorkaroundBySurfaceProcessing() -> bool
AndroidX.Camera.Core.Internal.Compat.Quirk.ISurfaceProcessingQuirk.WorkaroundBySurfaceProcessing(AndroidX.Camera.Core.Impl.Quirks! quirks) -> bool
AndroidX.Camera.Core.Internal.Compat.Quirk.ImageCaptureRotationOptionQuirk
AndroidX.Camera.Core.Internal.Compat.Quirk.ImageCaptureRotationOptionQuirk.ImageCaptureRotationOptionQuirk() -> void
AndroidX.Camera.Core.Internal.Compat.Quirk.ImageCaptureRotationOptionQuirk.IsSupported(AndroidX.Camera.Core.Impl.ConfigOption! option) -> bool
AndroidX.Camera.Core.Internal.Compat.Quirk.IncorrectJpegMetadataQuirk
AndroidX.Camera.Core.Internal.Compat.Quirk.IncorrectJpegMetadataQuirk.IncorrectJpegMetadataQuirk() -> void
AndroidX.Camera.Core.Internal.Compat.Quirk.IncorrectJpegMetadataQuirk.JpegImageToJpegByteArray(AndroidX.Camera.Core.IImageProxy! imageProxy) -> byte[]!
AndroidX.Camera.Core.Internal.Compat.Quirk.LargeJpegImageQuirk
AndroidX.Camera.Core.Internal.Compat.Quirk.LargeJpegImageQuirk.LargeJpegImageQuirk() -> void
AndroidX.Camera.Core.Internal.Compat.Quirk.LargeJpegImageQuirk.ShouldCheckInvalidJpegData(byte[]! bytes) -> bool
AndroidX.Camera.Core.Internal.Compat.Quirk.LowMemoryQuirk
AndroidX.Camera.Core.Internal.Compat.Quirk.LowMemoryQuirk.LowMemoryQuirk() -> void
AndroidX.Camera.Core.Internal.Compat.Quirk.LowMemoryQuirk.LowMemoryQuirk(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Internal.Compat.Quirk.SurfaceOrderQuirk
AndroidX.Camera.Core.Internal.Compat.Quirk.SurfaceOrderQuirk.SurfaceOrderQuirk() -> void
AndroidX.Camera.Core.Internal.Compat.Quirk.SurfaceOrderQuirk.SurfaceOrderQuirk(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Internal.Compat.Quirk.SurfaceProcessingQuirk
AndroidX.Camera.Core.Internal.Compat.Quirk.SurfaceProcessingQuirkConsts
AndroidX.Camera.Core.Internal.Compat.Workaround.CaptureFailedRetryEnabler
AndroidX.Camera.Core.Internal.Compat.Workaround.CaptureFailedRetryEnabler.CaptureFailedRetryEnabler() -> void
AndroidX.Camera.Core.Internal.Compat.Workaround.CaptureFailedRetryEnabler.CaptureFailedRetryEnabler(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Internal.Compat.Workaround.ExifRotationAvailability
AndroidX.Camera.Core.Internal.Compat.Workaround.ExifRotationAvailability.ExifRotationAvailability() -> void
AndroidX.Camera.Core.Internal.Compat.Workaround.ExifRotationAvailability.ExifRotationAvailability(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Internal.Compat.Workaround.InvalidJpegDataParser
AndroidX.Camera.Core.Internal.Compat.Workaround.InvalidJpegDataParser.InvalidJpegDataParser() -> void
AndroidX.Camera.Core.Internal.Compat.Workaround.InvalidJpegDataParser.InvalidJpegDataParser(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Internal.Compat.Workaround.JpegMetadataCorrector
AndroidX.Camera.Core.Internal.Compat.Workaround.JpegMetadataCorrector.JpegMetadataCorrector(AndroidX.Camera.Core.Impl.Quirks! quirks) -> void
AndroidX.Camera.Core.Internal.Compat.Workaround.JpegMetadataCorrector.JpegMetadataCorrector(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Internal.Compat.Workaround.SurfaceSorter
AndroidX.Camera.Core.Internal.Compat.Workaround.SurfaceSorter.SurfaceSorter() -> void
AndroidX.Camera.Core.Internal.Compat.Workaround.SurfaceSorter.SurfaceSorter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Internal.IIoConfig
AndroidX.Camera.Core.Internal.IIoConfig.GetIoExecutor(Java.Util.Concurrent.IExecutor? valueIfMissing) -> Java.Util.Concurrent.IExecutor?
AndroidX.Camera.Core.Internal.IIoConfig.IoExecutor.get -> Java.Util.Concurrent.IExecutor!
AndroidX.Camera.Core.Internal.IIoConfig.OptionIoExecutor.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Internal.IIoConfigBuilder
AndroidX.Camera.Core.Internal.IIoConfigBuilder.SetIoExecutor(Java.Util.Concurrent.IExecutor! p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Internal.ITargetConfig
AndroidX.Camera.Core.Internal.ITargetConfig.GetTargetClass(Java.Lang.Class? valueIfMissing) -> Java.Lang.Class?
AndroidX.Camera.Core.Internal.ITargetConfig.GetTargetName(string? valueIfMissing) -> string?
AndroidX.Camera.Core.Internal.ITargetConfig.OptionTargetClass.get -> AndroidX.Camera.Core.Impl.ConfigOption!
AndroidX.Camera.Core.Internal.ITargetConfig.OptionTargetName.get -> AndroidX.Camera.Core.Impl.ConfigOption!
AndroidX.Camera.Core.Internal.ITargetConfig.TargetClass.get -> Java.Lang.Class!
AndroidX.Camera.Core.Internal.ITargetConfig.TargetName.get -> string!
AndroidX.Camera.Core.Internal.ITargetConfigBuilder
AndroidX.Camera.Core.Internal.ITargetConfigBuilder.SetTargetClass(Java.Lang.Class! p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Internal.ITargetConfigBuilder.SetTargetName(string! p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Internal.IThreadConfig
AndroidX.Camera.Core.Internal.IThreadConfig.BackgroundExecutor.get -> Java.Util.Concurrent.IExecutor!
AndroidX.Camera.Core.Internal.IThreadConfig.GetBackgroundExecutor(Java.Util.Concurrent.IExecutor? valueIfMissing) -> Java.Util.Concurrent.IExecutor?
AndroidX.Camera.Core.Internal.IThreadConfig.OptionBackgroundExecutor.get -> AndroidX.Camera.Core.Impl.ConfigOption?
AndroidX.Camera.Core.Internal.IThreadConfigBuilder
AndroidX.Camera.Core.Internal.IThreadConfigBuilder.SetBackgroundExecutor(Java.Util.Concurrent.IExecutor! p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Internal.ImmutableZoomState
AndroidX.Camera.Core.Internal.ImmutableZoomState.ImmutableZoomState() -> void
AndroidX.Camera.Core.Internal.ImmutableZoomState.ImmutableZoomState(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Internal.IoConfig
AndroidX.Camera.Core.Internal.IoConfigConsts
AndroidX.Camera.Core.Internal.ScreenFlashWrapper
AndroidX.Camera.Core.Internal.ScreenFlashWrapper.Apply(long expirationTimeMillis, AndroidX.Camera.Core.ImageCapture.IScreenFlashListener! screenFlashListener) -> void
AndroidX.Camera.Core.Internal.ScreenFlashWrapper.BaseScreenFlash.get -> AndroidX.Camera.Core.ImageCapture.IScreenFlash?
AndroidX.Camera.Core.Internal.ScreenFlashWrapper.Clear() -> void
AndroidX.Camera.Core.Internal.ScreenFlashWrapper.Companion
AndroidX.Camera.Core.Internal.ScreenFlashWrapper.Companion.From(AndroidX.Camera.Core.ImageCapture.IScreenFlash? screenFlash) -> AndroidX.Camera.Core.Internal.ScreenFlashWrapper!
AndroidX.Camera.Core.Internal.ScreenFlashWrapper.CompletePendingTasks() -> void
AndroidX.Camera.Core.Internal.SupportedOutputSizesSorter
AndroidX.Camera.Core.Internal.SupportedOutputSizesSorter.SupportedOutputSizesSorter(AndroidX.Camera.Core.Impl.ICameraInfoInternal! cameraInfoInternal, Android.Util.Size? activeArraySize) -> void
AndroidX.Camera.Core.Internal.SupportedOutputSizesSorter.SupportedOutputSizesSorter(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Internal.TargetConfig
AndroidX.Camera.Core.Internal.TargetConfigConsts
AndroidX.Camera.Core.Internal.ThreadConfig
AndroidX.Camera.Core.Internal.ThreadConfigConsts
AndroidX.Camera.Core.Internal.Utils.ArrayRingBuffer
AndroidX.Camera.Core.Internal.Utils.ArrayRingBuffer.ArrayRingBuffer(int ringBufferCapacity) -> void
AndroidX.Camera.Core.Internal.Utils.ArrayRingBuffer.ArrayRingBuffer(int ringBufferCapacity, AndroidX.Camera.Core.Internal.Utils.IRingBufferOnRemoveCallback? onRemoveCallback) -> void
AndroidX.Camera.Core.Internal.Utils.ArrayRingBuffer.ArrayRingBuffer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Internal.Utils.IRingBuffer
AndroidX.Camera.Core.Internal.Utils.IRingBuffer.Dequeue() -> Java.Lang.Object!
AndroidX.Camera.Core.Internal.Utils.IRingBuffer.Enqueue(Java.Lang.Object! p0) -> void
AndroidX.Camera.Core.Internal.Utils.IRingBuffer.IsEmpty.get -> bool
AndroidX.Camera.Core.Internal.Utils.IRingBuffer.MaxCapacity.get -> int
AndroidX.Camera.Core.Internal.Utils.IRingBufferOnRemoveCallback
AndroidX.Camera.Core.Internal.Utils.IRingBufferOnRemoveCallback.OnRemove(Java.Lang.Object! p0) -> void
AndroidX.Camera.Core.Internal.Utils.ImageUtil
AndroidX.Camera.Core.Internal.Utils.ImageUtil.CodecFailedException
AndroidX.Camera.Core.Internal.Utils.ImageUtil.CodecFailedException.FailureType
AndroidX.Camera.Core.Internal.Utils.ImageUtil.CodecFailedException.GetFailureType() -> AndroidX.Camera.Core.Internal.Utils.ImageUtil.CodecFailedException.FailureType!
AndroidX.Camera.Core.Internal.Utils.ImageWriterCompat
AndroidX.Camera.Core.Internal.Utils.MediaActionSoundCompat
AndroidX.Camera.Core.Internal.Utils.SizeUtil
AndroidX.Camera.Core.Internal.Utils.UseCaseConfigUtil
AndroidX.Camera.Core.Internal.Utils.VideoUtil
AndroidX.Camera.Core.Internal.Utils.ZslRingBuffer
AndroidX.Camera.Core.Internal.Utils.ZslRingBuffer.Enqueue(AndroidX.Camera.Core.IImageProxy! imageProxy) -> void
AndroidX.Camera.Core.Internal.Utils.ZslRingBuffer.ZslRingBuffer(int ringBufferCapacity, AndroidX.Camera.Core.Internal.Utils.IRingBufferOnRemoveCallback! onRemoveCallback) -> void
AndroidX.Camera.Core.Internal.ViewPorts
AndroidX.Camera.Core.Internal.ViewPorts.ViewPorts(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.LayoutSettings
AndroidX.Camera.Core.LayoutSettings.Builder
AndroidX.Camera.Core.LayoutSettings.Builder.Build() -> AndroidX.Camera.Core.LayoutSettings!
AndroidX.Camera.Core.LayoutSettings.Builder.Builder() -> void
AndroidX.Camera.Core.LayoutSettings.Builder.SetAlpha(float alpha) -> AndroidX.Camera.Core.LayoutSettings.Builder!
AndroidX.Camera.Core.LayoutSettings.Builder.SetHeight(float height) -> AndroidX.Camera.Core.LayoutSettings.Builder!
AndroidX.Camera.Core.LayoutSettings.Builder.SetOffsetX(float offsetX) -> AndroidX.Camera.Core.LayoutSettings.Builder!
AndroidX.Camera.Core.LayoutSettings.Builder.SetOffsetY(float offsetY) -> AndroidX.Camera.Core.LayoutSettings.Builder!
AndroidX.Camera.Core.LayoutSettings.Builder.SetWidth(float width) -> AndroidX.Camera.Core.LayoutSettings.Builder!
AndroidX.Camera.Core.LayoutSettings.LayoutSettings(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Logger
AndroidX.Camera.Core.MetadataImageReader
AndroidX.Camera.Core.MetadataImageReader.MetadataImageReader(int width, int height, int format, int maxImages) -> void
AndroidX.Camera.Core.MetadataImageReader.MetadataImageReader(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.MeteringPoint
AndroidX.Camera.Core.MeteringPoint.MeteringPoint(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.MeteringPointFactory
AndroidX.Camera.Core.MeteringPointFactory.CreatePoint(float x, float y) -> AndroidX.Camera.Core.MeteringPoint!
AndroidX.Camera.Core.MeteringPointFactory.CreatePoint(float x, float y, float size) -> AndroidX.Camera.Core.MeteringPoint!
AndroidX.Camera.Core.MeteringPointFactory.MeteringPointFactory() -> void
AndroidX.Camera.Core.MeteringPointFactory.MeteringPointFactory(Android.Util.Rational? surfaceAspectRatio) -> void
AndroidX.Camera.Core.MeteringPointFactory.MeteringPointFactory(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.MirrorMode
AndroidX.Camera.Core.MirrorMode.IMirror
AndroidX.Camera.Core.MirrorMode.MirrorMode(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Preview
AndroidX.Camera.Core.Preview.Builder
AndroidX.Camera.Core.Preview.Builder.Build() -> AndroidX.Camera.Core.Preview!
AndroidX.Camera.Core.Preview.Builder.Builder() -> void
AndroidX.Camera.Core.Preview.Builder.MutableConfig.get -> AndroidX.Camera.Core.Impl.IMutableConfig!
AndroidX.Camera.Core.Preview.Builder.SetBackgroundExecutor(Java.Util.Concurrent.IExecutor! executor) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetCaptureOptionUnpacker(AndroidX.Camera.Core.Impl.CaptureConfig.IOptionUnpacker! optionUnpacker) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetCaptureType(AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType! captureType) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetCustomOrderedResolutions(System.Collections.Generic.IList<Android.Util.Size!>! resolutions) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetDefaultCaptureConfig(AndroidX.Camera.Core.Impl.CaptureConfig! captureConfig) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetDefaultResolution(Android.Util.Size! resolution) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetDefaultSessionConfig(AndroidX.Camera.Core.Impl.SessionConfig! sessionConfig) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetDynamicRange(AndroidX.Camera.Core.DynamicRange! dynamicRange) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetHighResolutionDisabled(bool disabled) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetMaxResolution(Android.Util.Size! resolution) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetMirrorMode(int mirrorMode) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetPreviewStabilizationEnabled(bool enabled) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetResolutionSelector(AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector! resolutionSelector) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetSessionOptionUnpacker(AndroidX.Camera.Core.Impl.SessionConfig.IOptionUnpacker! optionUnpacker) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetSupportedResolutions(System.Collections.Generic.IList<Android.Util.Pair!>! resolutions) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetSurfaceOccupancyPriority(int priority) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetTargetAspectRatio(int aspectRatio) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetTargetClass(Java.Lang.Class! targetClass) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetTargetFrameRate(Android.Util.Range! targetFrameRate) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetTargetName(string! targetName) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetTargetResolution(Android.Util.Size! resolution) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetTargetRotation(int rotation) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.SetZslDisabled(bool disabled) -> AndroidX.Camera.Core.Preview.Builder!
AndroidX.Camera.Core.Preview.Builder.UseCaseConfig.get -> AndroidX.Camera.Core.Impl.PreviewConfig!
AndroidX.Camera.Core.Preview.CameraEdge.get -> AndroidX.Camera.Core.Processing.SurfaceEdge!
AndroidX.Camera.Core.Preview.Defaults
AndroidX.Camera.Core.Preview.Defaults.Config.get -> AndroidX.Camera.Core.Impl.PreviewConfig!
AndroidX.Camera.Core.Preview.Defaults.Defaults() -> void
AndroidX.Camera.Core.Preview.DynamicRange.get -> AndroidX.Camera.Core.DynamicRange!
AndroidX.Camera.Core.Preview.ISurfaceProvider
AndroidX.Camera.Core.Preview.ISurfaceProvider.OnSurfaceRequested(AndroidX.Camera.Core.SurfaceRequest! p0) -> void
AndroidX.Camera.Core.Preview.IsPreviewStabilizationEnabled.get -> bool
AndroidX.Camera.Core.Preview.ResolutionInfo.get -> AndroidX.Camera.Core.ResolutionInfo?
AndroidX.Camera.Core.Preview.ResolutionSelector.get -> AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector?
AndroidX.Camera.Core.Preview.SetSurfaceProvider(Java.Util.Concurrent.IExecutor! executor, AndroidX.Camera.Core.Preview.ISurfaceProvider? surfaceProvider) -> void
AndroidX.Camera.Core.Preview.SurfaceProvider.get -> AndroidX.Camera.Core.Preview.ISurfaceProvider?
AndroidX.Camera.Core.Preview.SurfaceProvider.set -> void
AndroidX.Camera.Core.Preview.TargetFrameRate.get -> Android.Util.Range!
AndroidX.Camera.Core.Preview.TargetRotation.get -> int
AndroidX.Camera.Core.Preview.TargetRotation.set -> void
AndroidX.Camera.Core.Processing.Concurrent.DualOpenGlRenderer
AndroidX.Camera.Core.Processing.Concurrent.DualOpenGlRenderer.DualOpenGlRenderer(AndroidX.Camera.Core.LayoutSettings! primaryLayoutSettings, AndroidX.Camera.Core.LayoutSettings! secondaryLayoutSettings) -> void
AndroidX.Camera.Core.Processing.Concurrent.DualOpenGlRenderer.GetTextureName(bool isPrimary) -> int
AndroidX.Camera.Core.Processing.Concurrent.DualOpenGlRenderer.Render(long timestampNs, Android.Views.Surface! surface, AndroidX.Camera.Core.ISurfaceOutput! surfaceOutput, Android.Graphics.SurfaceTexture! primarySurfaceTexture, Android.Graphics.SurfaceTexture! secondarySurfaceTexture) -> void
AndroidX.Camera.Core.Processing.Concurrent.DualOutConfig
AndroidX.Camera.Core.Processing.Concurrent.DualOutConfig.DualOutConfig() -> void
AndroidX.Camera.Core.Processing.Concurrent.DualOutConfig.DualOutConfig(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessor
AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessor.DualSurfaceProcessor(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessor.Factory
AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessor.Factory.Factory(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode
AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.DualSurfaceProcessorNode(AndroidX.Camera.Core.Impl.ICameraInternal! primaryCameraInternal, AndroidX.Camera.Core.Impl.ICameraInternal! secondaryCameraInternal, AndroidX.Camera.Core.Processing.ISurfaceProcessorInternal! surfaceProcessor) -> void
AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.DualSurfaceProcessorNode(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.In
AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.In.In() -> void
AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.In.In(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.Out
AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.Out.Out() -> void
AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.Out.Out(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.DefaultSurfaceProcessor
AndroidX.Camera.Core.Processing.DefaultSurfaceProcessor.DefaultSurfaceProcessor(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.DefaultSurfaceProcessor.Factory
AndroidX.Camera.Core.Processing.DefaultSurfaceProcessor.Factory.Factory(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.Edge
AndroidX.Camera.Core.Processing.Edge.Edge() -> void
AndroidX.Camera.Core.Processing.Edge.Edge(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.IOperation
AndroidX.Camera.Core.Processing.IOperation.Apply(Java.Lang.Object! p0) -> Java.Lang.Object!
AndroidX.Camera.Core.Processing.IShaderProvider
AndroidX.Camera.Core.Processing.IShaderProvider.CreateFragmentShader(string! samplerVarName, string! fragCoordsVarName) -> string?
AndroidX.Camera.Core.Processing.ISurfaceProcessorInternal
AndroidX.Camera.Core.Processing.ISurfaceProcessorInternal.Release() -> void
AndroidX.Camera.Core.Processing.ISurfaceProcessorInternal.Snapshot(int jpegQuality, int rotationDegrees) -> Google.Common.Util.Concurrent.IListenableFuture!
AndroidX.Camera.Core.Processing.ImageProcessorRequest
AndroidX.Camera.Core.Processing.ImageProcessorRequest.ImageProcessorRequest(AndroidX.Camera.Core.IImageProxy! imageProxy, int outputFormat) -> void
AndroidX.Camera.Core.Processing.ImageProcessorRequest.ImageProcessorRequest(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.InternalImageProcessor
AndroidX.Camera.Core.Processing.InternalImageProcessor.InternalImageProcessor(AndroidX.Camera.Core.CameraEffect! cameraEffect) -> void
AndroidX.Camera.Core.Processing.InternalImageProcessor.InternalImageProcessor(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.OpenGlRenderer
AndroidX.Camera.Core.Processing.OpenGlRenderer.MCurrentInputformat.get -> AndroidX.Camera.Core.Processing.Util.GLUtils.InputFormat!
AndroidX.Camera.Core.Processing.OpenGlRenderer.MCurrentInputformat.set -> void
AndroidX.Camera.Core.Processing.OpenGlRenderer.MCurrentProgram.get -> AndroidX.Camera.Core.Processing.Util.GLUtils.Program2D?
AndroidX.Camera.Core.Processing.OpenGlRenderer.MCurrentProgram.set -> void
AndroidX.Camera.Core.Processing.OpenGlRenderer.MCurrentSurface.get -> Android.Views.Surface?
AndroidX.Camera.Core.Processing.OpenGlRenderer.MCurrentSurface.set -> void
AndroidX.Camera.Core.Processing.OpenGlRenderer.MEglConfig.get -> Android.Opengl.EGLConfig?
AndroidX.Camera.Core.Processing.OpenGlRenderer.MEglConfig.set -> void
AndroidX.Camera.Core.Processing.OpenGlRenderer.MEglContext.get -> Android.Opengl.EGLContext!
AndroidX.Camera.Core.Processing.OpenGlRenderer.MEglContext.set -> void
AndroidX.Camera.Core.Processing.OpenGlRenderer.MEglDisplay.get -> Android.Opengl.EGLDisplay!
AndroidX.Camera.Core.Processing.OpenGlRenderer.MEglDisplay.set -> void
AndroidX.Camera.Core.Processing.OpenGlRenderer.MGlThread.get -> Java.Lang.Thread?
AndroidX.Camera.Core.Processing.OpenGlRenderer.MGlThread.set -> void
AndroidX.Camera.Core.Processing.OpenGlRenderer.MInitialized.get -> Java.Util.Concurrent.Atomic.AtomicBoolean?
AndroidX.Camera.Core.Processing.OpenGlRenderer.MInitialized.set -> void
AndroidX.Camera.Core.Processing.OpenGlRenderer.MOutputSurfaceMap.get -> System.Collections.IDictionary?
AndroidX.Camera.Core.Processing.OpenGlRenderer.MOutputSurfaceMap.set -> void
AndroidX.Camera.Core.Processing.OpenGlRenderer.MProgramHandles.get -> System.Collections.IDictionary!
AndroidX.Camera.Core.Processing.OpenGlRenderer.MProgramHandles.set -> void
AndroidX.Camera.Core.Processing.OpenGlRenderer.MSurfaceAttrib.get -> System.Collections.Generic.IList<int>?
AndroidX.Camera.Core.Processing.OpenGlRenderer.MSurfaceAttrib.set -> void
AndroidX.Camera.Core.Processing.OpenGlRenderer.MTempSurface.get -> Android.Opengl.EGLSurface!
AndroidX.Camera.Core.Processing.OpenGlRenderer.MTempSurface.set -> void
AndroidX.Camera.Core.Processing.OpenGlRenderer.OpenGlRenderer() -> void
AndroidX.Camera.Core.Processing.OpenGlRenderer.OpenGlRenderer(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.Packet
AndroidX.Camera.Core.Processing.Packet.Packet() -> void
AndroidX.Camera.Core.Processing.Packet.Packet(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.SurfaceEdge
AndroidX.Camera.Core.Processing.SurfaceEdge.Close() -> void
AndroidX.Camera.Core.Processing.SurfaceEdge.Disconnect() -> void
AndroidX.Camera.Core.Processing.SurfaceEdge.SurfaceEdge(int targets, int format, AndroidX.Camera.Core.Impl.StreamSpec! streamSpec, Android.Graphics.Matrix! sensorToBufferTransform, bool hasCameraTransform, Android.Graphics.Rect! cropRect, int rotationDegrees, int targetRotation, bool mirroring) -> void
AndroidX.Camera.Core.Processing.SurfaceEdge.SurfaceEdge(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.SurfaceProcessorNode
AndroidX.Camera.Core.Processing.SurfaceProcessorNode.In
AndroidX.Camera.Core.Processing.SurfaceProcessorNode.In.In() -> void
AndroidX.Camera.Core.Processing.SurfaceProcessorNode.In.In(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.SurfaceProcessorNode.Out
AndroidX.Camera.Core.Processing.SurfaceProcessorNode.Out.Out() -> void
AndroidX.Camera.Core.Processing.SurfaceProcessorNode.Out.Out(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.SurfaceProcessorNode.SurfaceProcessorNode(AndroidX.Camera.Core.Impl.ICameraInternal! cameraInternal, AndroidX.Camera.Core.Processing.ISurfaceProcessorInternal! surfaceProcessor) -> void
AndroidX.Camera.Core.Processing.SurfaceProcessorNode.SurfaceProcessorNode(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.SurfaceProcessorWithExecutor
AndroidX.Camera.Core.Processing.SurfaceProcessorWithExecutor.SurfaceProcessorWithExecutor(AndroidX.Camera.Core.CameraEffect! cameraEffect) -> void
AndroidX.Camera.Core.Processing.SurfaceProcessorWithExecutor.SurfaceProcessorWithExecutor(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.TargetUtils
AndroidX.Camera.Core.Processing.TargetUtils.TargetUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.Util.GLUtils
AndroidX.Camera.Core.Processing.Util.GLUtils.BlankShaderProgram
AndroidX.Camera.Core.Processing.Util.GLUtils.BlankShaderProgram.BlankShaderProgram() -> void
AndroidX.Camera.Core.Processing.Util.GLUtils.BlankShaderProgram.BlankShaderProgram(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.Util.GLUtils.InputFormat
AndroidX.Camera.Core.Processing.Util.GLUtils.Program2D
AndroidX.Camera.Core.Processing.Util.GLUtils.Program2D.MAlphaScaleLoc.get -> int
AndroidX.Camera.Core.Processing.Util.GLUtils.Program2D.MAlphaScaleLoc.set -> void
AndroidX.Camera.Core.Processing.Util.GLUtils.Program2D.MPositionLoc.get -> int
AndroidX.Camera.Core.Processing.Util.GLUtils.Program2D.MPositionLoc.set -> void
AndroidX.Camera.Core.Processing.Util.GLUtils.Program2D.MProgramHandle.get -> int
AndroidX.Camera.Core.Processing.Util.GLUtils.Program2D.MProgramHandle.set -> void
AndroidX.Camera.Core.Processing.Util.GLUtils.Program2D.MTransMatrixLoc.get -> int
AndroidX.Camera.Core.Processing.Util.GLUtils.Program2D.MTransMatrixLoc.set -> void
AndroidX.Camera.Core.Processing.Util.GLUtils.Program2D.Program2D(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.Util.GLUtils.Program2D.Program2D(string! vertexShaderSource, string! fragmentShaderSource) -> void
AndroidX.Camera.Core.Processing.Util.GLUtils.SamplerShaderProgram
AndroidX.Camera.Core.Processing.Util.GLUtils.SamplerShaderProgram.SamplerShaderProgram(AndroidX.Camera.Core.DynamicRange! dynamicRange, AndroidX.Camera.Core.Processing.IShaderProvider! shaderProvider) -> void
AndroidX.Camera.Core.Processing.Util.GLUtils.SamplerShaderProgram.SamplerShaderProgram(AndroidX.Camera.Core.DynamicRange! dynamicRange, AndroidX.Camera.Core.Processing.Util.GLUtils.InputFormat! inputFormat) -> void
AndroidX.Camera.Core.Processing.Util.GLUtils.SamplerShaderProgram.SamplerShaderProgram(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo
AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.Builder
AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.Builder.Builder() -> void
AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.GraphicDeviceInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.Util.OutConfig
AndroidX.Camera.Core.Processing.Util.OutConfig.OutConfig() -> void
AndroidX.Camera.Core.Processing.Util.OutConfig.OutConfig(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.Processing.Util.OutputSurface
AndroidX.Camera.Core.Processing.Util.OutputSurface.OutputSurface() -> void
AndroidX.Camera.Core.Processing.Util.OutputSurface.OutputSurface(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.ProcessingException
AndroidX.Camera.Core.ProcessingException.ProcessingException() -> void
AndroidX.Camera.Core.ProcessingException.ProcessingException(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.ResolutionInfo
AndroidX.Camera.Core.ResolutionInfo.ResolutionInfo(Android.Util.Size! resolution, Android.Graphics.Rect! cropRect, int rotationDegrees) -> void
AndroidX.Camera.Core.ResolutionInfo.ResolutionInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.ResolutionSelector.AspectRatioStrategy
AndroidX.Camera.Core.ResolutionSelector.AspectRatioStrategy.AspectRatioStrategy(int preferredAspectRatio, int fallbackRule) -> void
AndroidX.Camera.Core.ResolutionSelector.AspectRatioStrategy.FallbackRule.get -> int
AndroidX.Camera.Core.ResolutionSelector.AspectRatioStrategy.IAspectRatioFallbackRule
AndroidX.Camera.Core.ResolutionSelector.AspectRatioStrategy.PreferredAspectRatio.get -> int
AndroidX.Camera.Core.ResolutionSelector.IResolutionFilter
AndroidX.Camera.Core.ResolutionSelector.IResolutionFilter.Filter(System.Collections.Generic.IList<Android.Util.Size!>! p0, int p1) -> System.Collections.Generic.IList<Android.Util.Size!>!
AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector
AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.AllowedResolutionMode.get -> int
AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.AspectRatioStrategy.get -> AndroidX.Camera.Core.ResolutionSelector.AspectRatioStrategy!
AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.Builder
AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.Builder.Build() -> AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector!
AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.Builder.Builder() -> void
AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.Builder.SetAllowedResolutionMode(int mode) -> AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.Builder!
AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.Builder.SetAspectRatioStrategy(AndroidX.Camera.Core.ResolutionSelector.AspectRatioStrategy! aspectRatioStrategy) -> AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.Builder!
AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.Builder.SetResolutionFilter(AndroidX.Camera.Core.ResolutionSelector.IResolutionFilter! resolutionFilter) -> AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.Builder!
AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.Builder.SetResolutionStrategy(AndroidX.Camera.Core.ResolutionSelector.ResolutionStrategy! resolutionStrategy) -> AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.Builder!
AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.IAllowedResolutionMode
AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.ResolutionFilter.get -> AndroidX.Camera.Core.ResolutionSelector.IResolutionFilter?
AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.ResolutionStrategy.get -> AndroidX.Camera.Core.ResolutionSelector.ResolutionStrategy?
AndroidX.Camera.Core.ResolutionSelector.ResolutionStrategy
AndroidX.Camera.Core.ResolutionSelector.ResolutionStrategy.BoundSize.get -> Android.Util.Size?
AndroidX.Camera.Core.ResolutionSelector.ResolutionStrategy.FallbackRule.get -> int
AndroidX.Camera.Core.ResolutionSelector.ResolutionStrategy.IResolutionFallbackRule
AndroidX.Camera.Core.ResolutionSelector.ResolutionStrategy.ResolutionStrategy(Android.Util.Size! boundSize, int fallbackRule) -> void
AndroidX.Camera.Core.RetryPolicy
AndroidX.Camera.Core.RetryPolicyBuilder
AndroidX.Camera.Core.RetryPolicyBuilder.Build() -> AndroidX.Camera.Core.IRetryPolicy!
AndroidX.Camera.Core.RetryPolicyBuilder.RetryPolicyBuilder(AndroidX.Camera.Core.IRetryPolicy! basePolicy) -> void
AndroidX.Camera.Core.RetryPolicyBuilder.SetTimeoutInMillis(long timeoutInMillis) -> AndroidX.Camera.Core.RetryPolicyBuilder!
AndroidX.Camera.Core.RetryPolicyConsts
AndroidX.Camera.Core.RetryPolicyExecutionState
AndroidX.Camera.Core.RetryPolicyExecutionStateConsts
AndroidX.Camera.Core.RetryPolicyRetryConfig
AndroidX.Camera.Core.RetryPolicyRetryConfig.Builder
AndroidX.Camera.Core.RetryPolicyRetryConfig.Builder.Build() -> AndroidX.Camera.Core.RetryPolicyRetryConfig!
AndroidX.Camera.Core.RetryPolicyRetryConfig.Builder.Builder() -> void
AndroidX.Camera.Core.RetryPolicyRetryConfig.Builder.SetRetryDelayInMillis(long timeoutInMillis) -> AndroidX.Camera.Core.RetryPolicyRetryConfig.Builder!
AndroidX.Camera.Core.RetryPolicyRetryConfig.Builder.SetShouldRetry(bool shouldRetry) -> AndroidX.Camera.Core.RetryPolicyRetryConfig.Builder!
AndroidX.Camera.Core.RetryPolicyRetryConfig.RetryDelayInMillis.get -> long
AndroidX.Camera.Core.RetryPolicyRetryConfig.ShouldCompleteWithoutFailure() -> bool
AndroidX.Camera.Core.RetryPolicyRetryConfig.ShouldRetry() -> bool
AndroidX.Camera.Core.SafeCloseImageReaderProxy
AndroidX.Camera.Core.SafeCloseImageReaderProxy.ImageClose -> System.EventHandler<AndroidX.Camera.Core.ForwardingImageProxy.ImageCloseEventArgs!>!
AndroidX.Camera.Core.SafeCloseImageReaderProxy.SafeCloseImageReaderProxy(AndroidX.Camera.Core.Impl.IImageReaderProxy! imageReaderProxy) -> void
AndroidX.Camera.Core.SafeCloseImageReaderProxy.SafeCloseImageReaderProxy(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.SettableImageProxy
AndroidX.Camera.Core.SettableImageProxy.SettableImageProxy(AndroidX.Camera.Core.IImageProxy! imageProxy, Android.Util.Size? resolution, AndroidX.Camera.Core.IImageInfo! imageInfo) -> void
AndroidX.Camera.Core.StreamSharing.DynamicRangeUtils
AndroidX.Camera.Core.StreamSharing.DynamicRangeUtils.DynamicRangeUtils(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.StreamSharing.ResolutionsMerger
AndroidX.Camera.Core.StreamSharing.ResolutionsMerger.ResolutionsMerger(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.StreamSharing.StreamSharing
AndroidX.Camera.Core.StreamSharing.StreamSharing.StreamSharing(AndroidX.Camera.Core.Impl.ICameraInternal! camera, AndroidX.Camera.Core.Impl.ICameraInternal? secondaryCamera, AndroidX.Camera.Core.LayoutSettings! layoutSettings, AndroidX.Camera.Core.LayoutSettings! secondaryLayoutSettings, System.Collections.Generic.ICollection<AndroidX.Camera.Core.UseCase!>! children, AndroidX.Camera.Core.Impl.IUseCaseConfigFactory! useCaseConfigFactory) -> void
AndroidX.Camera.Core.StreamSharing.StreamSharing.StreamSharing(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.StreamSharing.StreamSharingConfig
AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts
AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.StreamSharingConfig(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.StreamSharing.VirtualCameraCaptureResult
AndroidX.Camera.Core.StreamSharing.VirtualCameraCaptureResult.VirtualCameraCaptureResult(AndroidX.Camera.Core.Impl.TagBundle! tagBundle, AndroidX.Camera.Core.Impl.ICameraCaptureResult? baseCameraCaptureResult) -> void
AndroidX.Camera.Core.StreamSharing.VirtualCameraCaptureResult.VirtualCameraCaptureResult(AndroidX.Camera.Core.Impl.TagBundle! tagBundle, long timestamp) -> void
AndroidX.Camera.Core.StreamSharing.VirtualCameraCaptureResult.VirtualCameraCaptureResult(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.StreamSharing.VirtualCameraControl
AndroidX.Camera.Core.StreamSharing.VirtualCameraControl.VirtualCameraControl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.StreamSharing.VirtualCameraInfo
AndroidX.Camera.Core.StreamSharing.VirtualCameraInfo.VirtualCameraInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.SurfaceOrientedMeteringPointFactory
AndroidX.Camera.Core.SurfaceOrientedMeteringPointFactory.SurfaceOrientedMeteringPointFactory(float width, float height) -> void
AndroidX.Camera.Core.SurfaceOrientedMeteringPointFactory.SurfaceOrientedMeteringPointFactory(float width, float height, AndroidX.Camera.Core.UseCase! useCaseForAspectRatio) -> void
AndroidX.Camera.Core.SurfaceOrientedMeteringPointFactory.SurfaceOrientedMeteringPointFactory(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.SurfaceOutputCameraInputInfo
AndroidX.Camera.Core.SurfaceOutputCameraInputInfo.SurfaceOutputCameraInputInfo() -> void
AndroidX.Camera.Core.SurfaceOutputCameraInputInfo.SurfaceOutputCameraInputInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.SurfaceOutputEvent
AndroidX.Camera.Core.SurfaceOutputEvent.IEventCode
AndroidX.Camera.Core.SurfaceOutputEvent.SurfaceOutputEvent(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.SurfaceRequest
AndroidX.Camera.Core.SurfaceRequest.AddRequestCancellationListener(Java.Util.Concurrent.IExecutor! executor, Java.Lang.IRunnable! listener) -> void
AndroidX.Camera.Core.SurfaceRequest.Camera.get -> AndroidX.Camera.Core.Impl.ICameraInternal!
AndroidX.Camera.Core.SurfaceRequest.ClearTransformationInfoListener() -> void
AndroidX.Camera.Core.SurfaceRequest.DeferrableSurface.get -> AndroidX.Camera.Core.Impl.DeferrableSurface!
AndroidX.Camera.Core.SurfaceRequest.DynamicRange.get -> AndroidX.Camera.Core.DynamicRange!
AndroidX.Camera.Core.SurfaceRequest.ExpectedFrameRate.get -> Android.Util.Range!
AndroidX.Camera.Core.SurfaceRequest.ITransformationInfoListener
AndroidX.Camera.Core.SurfaceRequest.ITransformationInfoListener.OnTransformationInfoUpdate(AndroidX.Camera.Core.SurfaceRequest.TransformationInfo! p0) -> void
AndroidX.Camera.Core.SurfaceRequest.Invalidate() -> bool
AndroidX.Camera.Core.SurfaceRequest.IsPrimary.get -> bool
AndroidX.Camera.Core.SurfaceRequest.IsServiced.get -> bool
AndroidX.Camera.Core.SurfaceRequest.ProvideSurface(Android.Views.Surface! surface, Java.Util.Concurrent.IExecutor! executor, AndroidX.Core.Util.IConsumer! resultListener) -> void
AndroidX.Camera.Core.SurfaceRequest.Resolution.get -> Android.Util.Size!
AndroidX.Camera.Core.SurfaceRequest.Result
AndroidX.Camera.Core.SurfaceRequest.Result.IResultCode
AndroidX.Camera.Core.SurfaceRequest.Result.Result(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.SurfaceRequest.SetTransformationInfoListener(Java.Util.Concurrent.IExecutor! executor, AndroidX.Camera.Core.SurfaceRequest.ITransformationInfoListener! listener) -> void
AndroidX.Camera.Core.SurfaceRequest.SurfaceRequest(Android.Util.Size! resolution, AndroidX.Camera.Core.Impl.ICameraInternal! camera, AndroidX.Camera.Core.DynamicRange! dynamicRange, Android.Util.Range! expectedFrameRate, Java.Lang.IRunnable! onInvalidated) -> void
AndroidX.Camera.Core.SurfaceRequest.SurfaceRequest(Android.Util.Size! resolution, AndroidX.Camera.Core.Impl.ICameraInternal! camera, Java.Lang.IRunnable! onInvalidated) -> void
AndroidX.Camera.Core.SurfaceRequest.SurfaceRequest(Android.Util.Size! resolution, AndroidX.Camera.Core.Impl.ICameraInternal! camera, bool isPrimary, AndroidX.Camera.Core.DynamicRange! dynamicRange, Android.Util.Range! expectedFrameRate, Java.Lang.IRunnable! onInvalidated) -> void
AndroidX.Camera.Core.SurfaceRequest.TransformationInfo
AndroidX.Camera.Core.SurfaceRequest.TransformationInfo.TransformationInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.SurfaceRequest.TransformationInfoEventArgs
AndroidX.Camera.Core.SurfaceRequest.TransformationInfoEventArgs.P0.get -> AndroidX.Camera.Core.SurfaceRequest.TransformationInfo!
AndroidX.Camera.Core.SurfaceRequest.TransformationInfoEventArgs.TransformationInfoEventArgs(AndroidX.Camera.Core.SurfaceRequest.TransformationInfo! p0) -> void
AndroidX.Camera.Core.SurfaceRequest.UpdateTransformationInfo(AndroidX.Camera.Core.SurfaceRequest.TransformationInfo! transformationInfo) -> void
AndroidX.Camera.Core.SurfaceRequest.WillNotProvideSurface() -> bool
AndroidX.Camera.Core.TorchState
AndroidX.Camera.Core.TorchState.IState
AndroidX.Camera.Core.TorchState.TorchState(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.UseCase
AndroidX.Camera.Core.UseCase.BindToCamera(AndroidX.Camera.Core.Impl.ICameraInternal! camera, AndroidX.Camera.Core.Impl.ICameraInternal? secondaryCamera, AndroidX.Camera.Core.Impl.IUseCaseConfig? extendedConfig, AndroidX.Camera.Core.Impl.IUseCaseConfig? cameraConfig) -> void
AndroidX.Camera.Core.UseCase.IStateChangeCallback
AndroidX.Camera.Core.UseCase.IStateChangeCallback.OnUseCaseActive(AndroidX.Camera.Core.UseCase! p0) -> void
AndroidX.Camera.Core.UseCase.IStateChangeCallback.OnUseCaseInactive(AndroidX.Camera.Core.UseCase! p0) -> void
AndroidX.Camera.Core.UseCase.IStateChangeCallback.OnUseCaseReset(AndroidX.Camera.Core.UseCase! p0) -> void
AndroidX.Camera.Core.UseCase.IStateChangeCallback.OnUseCaseUpdated(AndroidX.Camera.Core.UseCase! p0) -> void
AndroidX.Camera.Core.UseCase.NotifyActive() -> void
AndroidX.Camera.Core.UseCase.NotifyInactive() -> void
AndroidX.Camera.Core.UseCase.NotifyReset() -> void
AndroidX.Camera.Core.UseCase.NotifyState() -> void
AndroidX.Camera.Core.UseCase.NotifyUpdated() -> void
AndroidX.Camera.Core.UseCase.UnbindFromCamera(AndroidX.Camera.Core.Impl.ICameraInternal! camera) -> void
AndroidX.Camera.Core.UseCase.UseCase(AndroidX.Camera.Core.Impl.IUseCaseConfig! currentConfig) -> void
AndroidX.Camera.Core.UseCase.UseCase(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Camera.Core.UseCaseGroup
AndroidX.Camera.Core.UseCaseGroup.Builder
AndroidX.Camera.Core.UseCaseGroup.Builder.AddEffect(AndroidX.Camera.Core.CameraEffect! cameraEffect) -> AndroidX.Camera.Core.UseCaseGroup.Builder!
AndroidX.Camera.Core.UseCaseGroup.Builder.AddUseCase(AndroidX.Camera.Core.UseCase! useCase) -> AndroidX.Camera.Core.UseCaseGroup.Builder!
AndroidX.Camera.Core.UseCaseGroup.Builder.Build() -> AndroidX.Camera.Core.UseCaseGroup!
AndroidX.Camera.Core.UseCaseGroup.Builder.Builder() -> void
AndroidX.Camera.Core.UseCaseGroup.Builder.SetViewPort(AndroidX.Camera.Core.ViewPort! viewPort) -> AndroidX.Camera.Core.UseCaseGroup.Builder!
AndroidX.Camera.Core.UseCaseGroup.Effects.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.CameraEffect!>!
AndroidX.Camera.Core.UseCaseGroup.UseCases.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.UseCase!>!
AndroidX.Camera.Core.UseCaseGroup.ViewPort.get -> AndroidX.Camera.Core.ViewPort?
AndroidX.Camera.Core.ViewPort
AndroidX.Camera.Core.ViewPort.AspectRatio.get -> Android.Util.Rational!
AndroidX.Camera.Core.ViewPort.Builder
AndroidX.Camera.Core.ViewPort.Builder.Build() -> AndroidX.Camera.Core.ViewPort!
AndroidX.Camera.Core.ViewPort.Builder.Builder(Android.Util.Rational! aspectRatio, int rotation) -> void
AndroidX.Camera.Core.ViewPort.Builder.SetLayoutDirection(int layoutDirection) -> AndroidX.Camera.Core.ViewPort.Builder!
AndroidX.Camera.Core.ViewPort.Builder.SetScaleType(int scaleType) -> AndroidX.Camera.Core.ViewPort.Builder!
AndroidX.Camera.Core.ViewPort.ILayoutDirection
AndroidX.Camera.Core.ViewPort.IScaleType
AndroidX.Camera.Core.ViewPort.LayoutDirection.get -> int
AndroidX.Camera.Core.ViewPort.Rotation.get -> int
AndroidX.Camera.Core.ViewPort.ScaleType.get -> int
abstract AndroidX.Camera.Core.CameraState.Error.get -> AndroidX.Camera.Core.CameraState.StateError?
abstract AndroidX.Camera.Core.CameraState.GetType() -> AndroidX.Camera.Core.CameraState.Type!
abstract AndroidX.Camera.Core.CameraState.StateError.Cause.get -> Java.Lang.Throwable?
abstract AndroidX.Camera.Core.CameraState.StateError.Code.get -> int
abstract AndroidX.Camera.Core.ImageCaptures.TakePictureRequest.InMemoryCallback.get -> AndroidX.Camera.Core.ImageCapture.OnImageCapturedCallback?
abstract AndroidX.Camera.Core.ImageCaptures.TakePictureRequest.OnDiskCallback.get -> AndroidX.Camera.Core.ImageCapture.IOnImageSavedCallback?
abstract AndroidX.Camera.Core.ImmutableImageInfo.RotationDegrees.get -> int
abstract AndroidX.Camera.Core.ImmutableImageInfo.SensorToBufferTransformMatrix.get -> Android.Graphics.Matrix!
abstract AndroidX.Camera.Core.ImmutableImageInfo.TagBundle.get -> AndroidX.Camera.Core.Impl.TagBundle!
abstract AndroidX.Camera.Core.ImmutableImageInfo.Timestamp.get -> long
abstract AndroidX.Camera.Core.Impl.AttachedSurfaceInfo.CaptureTypes.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType!>!
abstract AndroidX.Camera.Core.Impl.AttachedSurfaceInfo.DynamicRange.get -> AndroidX.Camera.Core.DynamicRange!
abstract AndroidX.Camera.Core.Impl.AttachedSurfaceInfo.ImageFormat.get -> int
abstract AndroidX.Camera.Core.Impl.AttachedSurfaceInfo.ImplementationOptions.get -> AndroidX.Camera.Core.Impl.IConfig?
abstract AndroidX.Camera.Core.Impl.AttachedSurfaceInfo.Size.get -> Android.Util.Size!
abstract AndroidX.Camera.Core.Impl.AttachedSurfaceInfo.SurfaceConfig.get -> AndroidX.Camera.Core.Impl.SurfaceConfig!
abstract AndroidX.Camera.Core.Impl.AttachedSurfaceInfo.TargetFrameRate.get -> Android.Util.Range?
abstract AndroidX.Camera.Core.Impl.CameraThreadConfig.CameraExecutor.get -> Java.Util.Concurrent.IExecutor!
abstract AndroidX.Camera.Core.Impl.CameraThreadConfig.SchedulerHandler.get -> Android.OS.Handler!
abstract AndroidX.Camera.Core.Impl.ConfigOption.Id.get -> string!
abstract AndroidX.Camera.Core.Impl.ConfigOption.Token.get -> Java.Lang.Object?
abstract AndroidX.Camera.Core.Impl.ConfigOption.ValueClass.get -> Java.Lang.Class!
abstract AndroidX.Camera.Core.Impl.DeferrableSurface.ProvideSurface() -> Google.Common.Util.Concurrent.IListenableFuture!
abstract AndroidX.Camera.Core.Impl.DeviceProperties.Manufacturer() -> string!
abstract AndroidX.Camera.Core.Impl.DeviceProperties.Model() -> string!
abstract AndroidX.Camera.Core.Impl.DeviceProperties.SdkVersion() -> int
abstract AndroidX.Camera.Core.Impl.EncoderProfilesProxyAudioProfileProxy.Bitrate.get -> int
abstract AndroidX.Camera.Core.Impl.EncoderProfilesProxyAudioProfileProxy.Channels.get -> int
abstract AndroidX.Camera.Core.Impl.EncoderProfilesProxyAudioProfileProxy.Codec.get -> int
abstract AndroidX.Camera.Core.Impl.EncoderProfilesProxyAudioProfileProxy.MediaType.get -> string!
abstract AndroidX.Camera.Core.Impl.EncoderProfilesProxyAudioProfileProxy.Profile.get -> int
abstract AndroidX.Camera.Core.Impl.EncoderProfilesProxyAudioProfileProxy.SampleRate.get -> int
abstract AndroidX.Camera.Core.Impl.EncoderProfilesProxyImmutableEncoderProfilesProxy.AudioProfiles.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.EncoderProfilesProxyAudioProfileProxy!>!
abstract AndroidX.Camera.Core.Impl.EncoderProfilesProxyImmutableEncoderProfilesProxy.DefaultDurationSeconds.get -> int
abstract AndroidX.Camera.Core.Impl.EncoderProfilesProxyImmutableEncoderProfilesProxy.RecommendedFileFormat.get -> int
abstract AndroidX.Camera.Core.Impl.EncoderProfilesProxyImmutableEncoderProfilesProxy.VideoProfiles.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy!>!
abstract AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy.BitDepth.get -> int
abstract AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy.Bitrate.get -> int
abstract AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy.ChromaSubsampling.get -> int
abstract AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy.Codec.get -> int
abstract AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy.FrameRate.get -> int
abstract AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy.HdrFormat.get -> int
abstract AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy.Height.get -> int
abstract AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy.MediaType.get -> string!
abstract AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy.Profile.get -> int
abstract AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy.Width.get -> int
abstract AndroidX.Camera.Core.Impl.Identifier.Value.get -> Java.Lang.Object!
abstract AndroidX.Camera.Core.Impl.MultiValueSet.Clone() -> AndroidX.Camera.Core.Impl.MultiValueSet!
abstract AndroidX.Camera.Core.Impl.OutputSurface.ImageFormat.get -> int
abstract AndroidX.Camera.Core.Impl.OutputSurface.Size.get -> Android.Util.Size!
abstract AndroidX.Camera.Core.Impl.OutputSurface.Surface.get -> Android.Views.Surface!
abstract AndroidX.Camera.Core.Impl.OutputSurfaceConfiguration.ImageAnalysisOutputSurface.get -> AndroidX.Camera.Core.Impl.OutputSurface?
abstract AndroidX.Camera.Core.Impl.OutputSurfaceConfiguration.ImageCaptureOutputSurface.get -> AndroidX.Camera.Core.Impl.OutputSurface!
abstract AndroidX.Camera.Core.Impl.OutputSurfaceConfiguration.PostviewOutputSurface.get -> AndroidX.Camera.Core.Impl.OutputSurface?
abstract AndroidX.Camera.Core.Impl.OutputSurfaceConfiguration.PreviewOutputSurface.get -> AndroidX.Camera.Core.Impl.OutputSurface!
abstract AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.Builder.Build() -> AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig!
abstract AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.Builder.SetDynamicRange(AndroidX.Camera.Core.DynamicRange! p0) -> AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.Builder!
abstract AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.Builder.SetMirrorMode(int p0) -> AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.Builder!
abstract AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.Builder.SetPhysicalCameraId(string? p0) -> AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.Builder!
abstract AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.Builder.SetSharedSurfaces(System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.DeferrableSurface!>! p0) -> AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.Builder!
abstract AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.Builder.SetSurface(AndroidX.Camera.Core.Impl.DeferrableSurface! p0) -> AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.Builder!
abstract AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.Builder.SetSurfaceGroupId(int p0) -> AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.Builder!
abstract AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.DynamicRange.get -> AndroidX.Camera.Core.DynamicRange!
abstract AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.MirrorMode.get -> int
abstract AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.PhysicalCameraId.get -> string?
abstract AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.SharedSurfaces.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.DeferrableSurface!>!
abstract AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.Surface.get -> AndroidX.Camera.Core.Impl.DeferrableSurface!
abstract AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.SurfaceGroupId.get -> int
abstract AndroidX.Camera.Core.Impl.StreamSpec.Builder.Build() -> AndroidX.Camera.Core.Impl.StreamSpec!
abstract AndroidX.Camera.Core.Impl.StreamSpec.Builder.SetDynamicRange(AndroidX.Camera.Core.DynamicRange! p0) -> AndroidX.Camera.Core.Impl.StreamSpec.Builder!
abstract AndroidX.Camera.Core.Impl.StreamSpec.Builder.SetExpectedFrameRateRange(Android.Util.Range! p0) -> AndroidX.Camera.Core.Impl.StreamSpec.Builder!
abstract AndroidX.Camera.Core.Impl.StreamSpec.Builder.SetImplementationOptions(AndroidX.Camera.Core.Impl.IConfig! p0) -> AndroidX.Camera.Core.Impl.StreamSpec.Builder!
abstract AndroidX.Camera.Core.Impl.StreamSpec.Builder.SetResolution(Android.Util.Size! p0) -> AndroidX.Camera.Core.Impl.StreamSpec.Builder!
abstract AndroidX.Camera.Core.Impl.StreamSpec.Builder.SetZslDisabled(bool p0) -> AndroidX.Camera.Core.Impl.StreamSpec.Builder!
abstract AndroidX.Camera.Core.Impl.StreamSpec.DynamicRange.get -> AndroidX.Camera.Core.DynamicRange!
abstract AndroidX.Camera.Core.Impl.StreamSpec.ExpectedFrameRateRange.get -> Android.Util.Range!
abstract AndroidX.Camera.Core.Impl.StreamSpec.ImplementationOptions.get -> AndroidX.Camera.Core.Impl.IConfig?
abstract AndroidX.Camera.Core.Impl.StreamSpec.Resolution.get -> Android.Util.Size!
abstract AndroidX.Camera.Core.Impl.StreamSpec.ToBuilder() -> AndroidX.Camera.Core.Impl.StreamSpec.Builder!
abstract AndroidX.Camera.Core.Impl.StreamSpec.ZslDisabled.get -> bool
abstract AndroidX.Camera.Core.Impl.SurfaceConfig.GetConfigSize() -> AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize!
abstract AndroidX.Camera.Core.Impl.SurfaceConfig.GetConfigType() -> AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigType!
abstract AndroidX.Camera.Core.Impl.SurfaceConfig.StreamUseCase.get -> long
abstract AndroidX.Camera.Core.Impl.SurfaceSizeDefinition.AnalysisSize.get -> Android.Util.Size!
abstract AndroidX.Camera.Core.Impl.SurfaceSizeDefinition.MaximumSizeMap.get -> System.Collections.Generic.IDictionary<Java.Lang.Integer!, Android.Util.Size!>!
abstract AndroidX.Camera.Core.Impl.SurfaceSizeDefinition.PreviewSize.get -> Android.Util.Size!
abstract AndroidX.Camera.Core.Impl.SurfaceSizeDefinition.RecordSize.get -> Android.Util.Size!
abstract AndroidX.Camera.Core.Impl.SurfaceSizeDefinition.S1440pSizeMap.get -> System.Collections.Generic.IDictionary<Java.Lang.Integer!, Android.Util.Size!>!
abstract AndroidX.Camera.Core.Impl.SurfaceSizeDefinition.S720pSizeMap.get -> System.Collections.Generic.IDictionary<Java.Lang.Integer!, Android.Util.Size!>!
abstract AndroidX.Camera.Core.Impl.SurfaceSizeDefinition.UltraMaximumSizeMap.get -> System.Collections.Generic.IDictionary<Java.Lang.Integer!, Android.Util.Size!>!
abstract AndroidX.Camera.Core.Impl.Utils.Optional.Equals(Java.Lang.Object? p0) -> bool
abstract AndroidX.Camera.Core.Impl.Utils.Optional.Get() -> Java.Lang.Object!
abstract AndroidX.Camera.Core.Impl.Utils.Optional.GetHashCode() -> int
abstract AndroidX.Camera.Core.Impl.Utils.Optional.IsPresent.get -> bool
abstract AndroidX.Camera.Core.Impl.Utils.Optional.Or(AndroidX.Camera.Core.Impl.Utils.Optional! p0) -> AndroidX.Camera.Core.Impl.Utils.Optional!
abstract AndroidX.Camera.Core.Impl.Utils.Optional.Or(AndroidX.Core.Util.ISupplier! p0) -> Java.Lang.Object!
abstract AndroidX.Camera.Core.Impl.Utils.Optional.Or(Java.Lang.Object! p0) -> Java.Lang.Object!
abstract AndroidX.Camera.Core.Impl.Utils.Optional.OrNull() -> Java.Lang.Object?
abstract AndroidX.Camera.Core.Impl.Utils.Optional.ToString() -> string!
abstract AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraId.CameraConfigId.get -> AndroidX.Camera.Core.Impl.Identifier!
abstract AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraId.CameraIdString.get -> string!
abstract AndroidX.Camera.Core.Internal.ImmutableZoomState.LinearZoom.get -> float
abstract AndroidX.Camera.Core.Internal.ImmutableZoomState.MaxZoomRatio.get -> float
abstract AndroidX.Camera.Core.Internal.ImmutableZoomState.MinZoomRatio.get -> float
abstract AndroidX.Camera.Core.Internal.ImmutableZoomState.ZoomRatio.get -> float
abstract AndroidX.Camera.Core.MeteringPointFactory.ConvertPoint(float p0, float p1) -> Android.Graphics.PointF!
abstract AndroidX.Camera.Core.Processing.Concurrent.DualOutConfig.PrimaryOutConfig.get -> AndroidX.Camera.Core.Processing.Util.OutConfig!
abstract AndroidX.Camera.Core.Processing.Concurrent.DualOutConfig.SecondaryOutConfig.get -> AndroidX.Camera.Core.Processing.Util.OutConfig!
abstract AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.In.OutConfigs.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.Processing.Concurrent.DualOutConfig!>!
abstract AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.In.PrimarySurfaceEdge.get -> AndroidX.Camera.Core.Processing.SurfaceEdge!
abstract AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.In.SecondarySurfaceEdge.get -> AndroidX.Camera.Core.Processing.SurfaceEdge!
abstract AndroidX.Camera.Core.Processing.Packet.CameraCaptureResult.get -> AndroidX.Camera.Core.Impl.ICameraCaptureResult!
abstract AndroidX.Camera.Core.Processing.Packet.CropRect.get -> Android.Graphics.Rect!
abstract AndroidX.Camera.Core.Processing.Packet.Exif.get -> AndroidX.Camera.Core.Impl.Utils.Exif?
abstract AndroidX.Camera.Core.Processing.Packet.Format.get -> int
abstract AndroidX.Camera.Core.Processing.Packet.RawData.get -> Java.Lang.Object!
abstract AndroidX.Camera.Core.Processing.Packet.RotationDegrees.get -> int
abstract AndroidX.Camera.Core.Processing.Packet.SensorToBufferTransform.get -> Android.Graphics.Matrix!
abstract AndroidX.Camera.Core.Processing.Packet.Size.get -> Android.Util.Size!
abstract AndroidX.Camera.Core.Processing.SurfaceProcessorNode.In.OutConfigs.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.Processing.Util.OutConfig!>!
abstract AndroidX.Camera.Core.Processing.SurfaceProcessorNode.In.SurfaceEdge.get -> AndroidX.Camera.Core.Processing.SurfaceEdge!
abstract AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.Builder.Build() -> AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo!
abstract AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.Builder.SetEglExtensions(string! p0) -> AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.Builder!
abstract AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.Builder.SetEglVersion(string! p0) -> AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.Builder!
abstract AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.Builder.SetGlExtensions(string! p0) -> AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.Builder!
abstract AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.Builder.SetGlVersion(string! p0) -> AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.Builder!
abstract AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.EglExtensions.get -> string!
abstract AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.EglVersion.get -> string!
abstract AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.GlExtensions.get -> string!
abstract AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.GlVersion.get -> string!
abstract AndroidX.Camera.Core.Processing.Util.OutConfig.CropRect.get -> Android.Graphics.Rect!
abstract AndroidX.Camera.Core.Processing.Util.OutConfig.Format.get -> int
abstract AndroidX.Camera.Core.Processing.Util.OutConfig.IsMirroring.get -> bool
abstract AndroidX.Camera.Core.Processing.Util.OutConfig.RotationDegrees.get -> int
abstract AndroidX.Camera.Core.Processing.Util.OutConfig.ShouldRespectInputCropRect() -> bool
abstract AndroidX.Camera.Core.Processing.Util.OutConfig.Size.get -> Android.Util.Size!
abstract AndroidX.Camera.Core.Processing.Util.OutConfig.Targets.get -> int
abstract AndroidX.Camera.Core.Processing.Util.OutputSurface.EglSurface.get -> Android.Opengl.EGLSurface!
abstract AndroidX.Camera.Core.Processing.Util.OutputSurface.Height.get -> int
abstract AndroidX.Camera.Core.Processing.Util.OutputSurface.Width.get -> int
abstract AndroidX.Camera.Core.SurfaceOutputCameraInputInfo.CameraInternal.get -> AndroidX.Camera.Core.Impl.ICameraInternal?
abstract AndroidX.Camera.Core.SurfaceOutputCameraInputInfo.InputCropRect.get -> Android.Graphics.Rect!
abstract AndroidX.Camera.Core.SurfaceOutputCameraInputInfo.InputSize.get -> Android.Util.Size!
abstract AndroidX.Camera.Core.SurfaceOutputCameraInputInfo.Mirroring.get -> bool
abstract AndroidX.Camera.Core.SurfaceOutputCameraInputInfo.RotationDegrees.get -> int
abstract AndroidX.Camera.Core.SurfaceOutputEvent.EventCode.get -> int
abstract AndroidX.Camera.Core.SurfaceOutputEvent.SurfaceOutput.get -> AndroidX.Camera.Core.ISurfaceOutput!
abstract AndroidX.Camera.Core.SurfaceRequest.Result.ResultCode.get -> int
abstract AndroidX.Camera.Core.SurfaceRequest.Result.Surface.get -> Android.Views.Surface!
abstract AndroidX.Camera.Core.SurfaceRequest.TransformationInfo.CropRect.get -> Android.Graphics.Rect!
abstract AndroidX.Camera.Core.SurfaceRequest.TransformationInfo.HasCameraTransform.get -> bool
abstract AndroidX.Camera.Core.SurfaceRequest.TransformationInfo.IsMirroring.get -> bool
abstract AndroidX.Camera.Core.SurfaceRequest.TransformationInfo.RotationDegrees.get -> int
abstract AndroidX.Camera.Core.SurfaceRequest.TransformationInfo.SensorToBufferTransform.get -> Android.Graphics.Matrix!
abstract AndroidX.Camera.Core.SurfaceRequest.TransformationInfo.TargetRotation.get -> int
abstract AndroidX.Camera.Core.UseCase.GetDefaultConfig(bool p0, AndroidX.Camera.Core.Impl.IUseCaseConfigFactory! p1) -> AndroidX.Camera.Core.Impl.IUseCaseConfig?
abstract AndroidX.Camera.Core.UseCase.GetUseCaseConfigBuilder(AndroidX.Camera.Core.Impl.IConfig! p0) -> AndroidX.Camera.Core.Impl.IUseCaseConfigBuilder!
const AndroidX.Camera.Core.AspectRatio.Ratio169 = 1 -> int
const AndroidX.Camera.Core.AspectRatio.Ratio43 = 0 -> int
const AndroidX.Camera.Core.AspectRatio.RatioDefault = -1 -> int
const AndroidX.Camera.Core.CameraEffect.ImageCapture = 4 -> int
const AndroidX.Camera.Core.CameraEffect.OutputOptionOneForAllTargets = 0 -> int
const AndroidX.Camera.Core.CameraEffect.OutputOptionOneForEachTarget = 1 -> int
const AndroidX.Camera.Core.CameraEffect.Preview = 1 -> int
const AndroidX.Camera.Core.CameraEffect.TransformationArbitrary = 0 -> int
const AndroidX.Camera.Core.CameraEffect.TransformationCameraAndSurfaceRotation = 1 -> int
const AndroidX.Camera.Core.CameraEffect.TransformationPassthrough = 2 -> int
const AndroidX.Camera.Core.CameraEffect.VideoCapture = 2 -> int
const AndroidX.Camera.Core.CameraInfo.ImplementationTypeCamera2 = "androidx.camera.camera2" -> string!
const AndroidX.Camera.Core.CameraInfo.ImplementationTypeCamera2Legacy = "androidx.camera.camera2.legacy" -> string!
const AndroidX.Camera.Core.CameraInfo.ImplementationTypeFake = "androidx.camera.fake" -> string!
const AndroidX.Camera.Core.CameraInfo.ImplementationTypeUnknown = "<unknown>" -> string!
const AndroidX.Camera.Core.CameraInfo.IntrinsicZoomRatioUnknown = 1 -> float
const AndroidX.Camera.Core.CameraSelector.LensFacingBack = 1 -> int
const AndroidX.Camera.Core.CameraSelector.LensFacingExternal = 2 -> int
const AndroidX.Camera.Core.CameraSelector.LensFacingFront = 0 -> int
const AndroidX.Camera.Core.CameraSelector.LensFacingUnknown = -1 -> int
const AndroidX.Camera.Core.CameraState.ErrorCameraDisabled = 5 -> int
const AndroidX.Camera.Core.CameraState.ErrorCameraFatalError = 6 -> int
const AndroidX.Camera.Core.CameraState.ErrorCameraInUse = 2 -> int
const AndroidX.Camera.Core.CameraState.ErrorDoNotDisturbModeEnabled = 7 -> int
const AndroidX.Camera.Core.CameraState.ErrorMaxCamerasInUse = 1 -> int
const AndroidX.Camera.Core.CameraState.ErrorOtherRecoverableError = 3 -> int
const AndroidX.Camera.Core.CameraState.ErrorStreamConfig = 4 -> int
const AndroidX.Camera.Core.CameraUnavailableException.CameraDisabled = 1 -> int
const AndroidX.Camera.Core.CameraUnavailableException.CameraDisconnected = 2 -> int
const AndroidX.Camera.Core.CameraUnavailableException.CameraError = 3 -> int
const AndroidX.Camera.Core.CameraUnavailableException.CameraInUse = 4 -> int
const AndroidX.Camera.Core.CameraUnavailableException.CameraMaxInUse = 5 -> int
const AndroidX.Camera.Core.CameraUnavailableException.CameraUnavailableDoNotDisturb = 6 -> int
const AndroidX.Camera.Core.CameraUnavailableException.CameraUnknownError = 0 -> int
const AndroidX.Camera.Core.CameraXThreads.Tag = "CameraX-" -> string!
const AndroidX.Camera.Core.Concurrent.CameraCoordinator.CameraOperatingModeConcurrent = 2 -> int
const AndroidX.Camera.Core.Concurrent.CameraCoordinator.CameraOperatingModeSingle = 1 -> int
const AndroidX.Camera.Core.Concurrent.CameraCoordinator.CameraOperatingModeUnspecified = 0 -> int
const AndroidX.Camera.Core.DynamicRange.BitDepth10Bit = 10 -> int
const AndroidX.Camera.Core.DynamicRange.BitDepth8Bit = 8 -> int
const AndroidX.Camera.Core.DynamicRange.BitDepthUnspecified = 0 -> int
const AndroidX.Camera.Core.DynamicRange.EncodingDolbyVision = 6 -> int
const AndroidX.Camera.Core.DynamicRange.EncodingHdr10 = 4 -> int
const AndroidX.Camera.Core.DynamicRange.EncodingHdr10Plus = 5 -> int
const AndroidX.Camera.Core.DynamicRange.EncodingHdrUnspecified = 2 -> int
const AndroidX.Camera.Core.DynamicRange.EncodingHlg = 3 -> int
const AndroidX.Camera.Core.DynamicRange.EncodingSdr = 1 -> int
const AndroidX.Camera.Core.DynamicRange.EncodingUnspecified = 0 -> int
const AndroidX.Camera.Core.FocusMeteringAction.FlagAe = 2 -> int
const AndroidX.Camera.Core.FocusMeteringAction.FlagAf = 1 -> int
const AndroidX.Camera.Core.FocusMeteringAction.FlagAwb = 4 -> int
const AndroidX.Camera.Core.ImageAnalysis.CoordinateSystemOriginal = 0 -> int
const AndroidX.Camera.Core.ImageAnalysis.CoordinateSystemSensor = 2 -> int
const AndroidX.Camera.Core.ImageAnalysis.CoordinateSystemViewReferenced = 1 -> int
const AndroidX.Camera.Core.ImageAnalysis.OutputImageFormatRgba8888 = 2 -> int
const AndroidX.Camera.Core.ImageAnalysis.OutputImageFormatYuv420888 = 1 -> int
const AndroidX.Camera.Core.ImageAnalysis.StrategyBlockProducer = 1 -> int
const AndroidX.Camera.Core.ImageAnalysis.StrategyKeepOnlyLatest = 0 -> int
const AndroidX.Camera.Core.ImageCapture.CaptureModeMaximizeQuality = 0 -> int
const AndroidX.Camera.Core.ImageCapture.CaptureModeMinimizeLatency = 1 -> int
const AndroidX.Camera.Core.ImageCapture.CaptureModeZeroShutterLag = 2 -> int
const AndroidX.Camera.Core.ImageCapture.ErrorCameraClosed = 3 -> int
const AndroidX.Camera.Core.ImageCapture.ErrorCaptureFailed = 2 -> int
const AndroidX.Camera.Core.ImageCapture.ErrorFileIo = 1 -> int
const AndroidX.Camera.Core.ImageCapture.ErrorInvalidCamera = 4 -> int
const AndroidX.Camera.Core.ImageCapture.ErrorUnknown = 0 -> int
const AndroidX.Camera.Core.ImageCapture.FlashModeAuto = 0 -> int
const AndroidX.Camera.Core.ImageCapture.FlashModeOff = 2 -> int
const AndroidX.Camera.Core.ImageCapture.FlashModeOn = 1 -> int
const AndroidX.Camera.Core.ImageCapture.FlashModeScreen = 3 -> int
const AndroidX.Camera.Core.ImageCapture.FlashTypeOneShotFlash = 0 -> int
const AndroidX.Camera.Core.ImageCapture.FlashTypeUseTorchAsFlash = 1 -> int
const AndroidX.Camera.Core.ImageCapture.OutputFormatJpeg = 0 -> int
const AndroidX.Camera.Core.ImageCapture.OutputFormatJpegUltraHdr = 1 -> int
const AndroidX.Camera.Core.ImageCapture.ScreenFlashUiApplyTimeoutSeconds = 3 -> long
const AndroidX.Camera.Core.ImageCaptureLatencyEstimate.UndefinedCaptureLatency = -1 -> long
const AndroidX.Camera.Core.ImageCaptureLatencyEstimate.UndefinedProcessingLatency = -1 -> long
const AndroidX.Camera.Core.Impl.CameraConfig.RequiredRuleCoexistingPreviewAndImageCapture = 1 -> int
const AndroidX.Camera.Core.Impl.CameraConfig.RequiredRuleNone = 0 -> int
const AndroidX.Camera.Core.Impl.CameraMode.ConcurrentCamera = 1 -> int
const AndroidX.Camera.Core.Impl.CameraMode.Default = 0 -> int
const AndroidX.Camera.Core.Impl.CameraMode.UltraHighResolutionCamera = 2 -> int
const AndroidX.Camera.Core.Impl.CameraProviderExecutionState.InterfaceConsts.StatusCameraUnavailable = 2 -> int
const AndroidX.Camera.Core.Impl.CameraProviderExecutionState.InterfaceConsts.StatusConfigurationFail = 1 -> int
const AndroidX.Camera.Core.Impl.CameraProviderExecutionState.InterfaceConsts.StatusUnknownError = 0 -> int
const AndroidX.Camera.Core.Impl.CaptureConfig.CaptureConfigIdTagKey = "CAPTURE_CONFIG_ID_KEY" -> string!
const AndroidX.Camera.Core.Impl.CaptureConfig.DefaultId = -1 -> int
const AndroidX.Camera.Core.Impl.CaptureConfig.TemplateTypeNone = -1 -> int
const AndroidX.Camera.Core.Impl.EncoderProfilesProxy.CodecProfileNone = -1 -> int
const AndroidX.Camera.Core.Impl.EncoderProfilesProxyAudioProfileProxy.MediaTypeNone = "audio/none" -> string!
const AndroidX.Camera.Core.Impl.EncoderProfilesProxyImmutableEncoderProfilesProxy.InterfaceConsts.CodecProfileNone = -1 -> int
const AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy.BitDepth10 = 10 -> int
const AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy.BitDepth8 = 8 -> int
const AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy.MediaTypeNone = "video/none" -> string!
const AndroidX.Camera.Core.Impl.ForwardingCameraInfo.InterfaceConsts.ImplementationTypeCamera2 = "androidx.camera.camera2" -> string!
const AndroidX.Camera.Core.Impl.ForwardingCameraInfo.InterfaceConsts.ImplementationTypeCamera2Legacy = "androidx.camera.camera2.legacy" -> string!
const AndroidX.Camera.Core.Impl.ForwardingCameraInfo.InterfaceConsts.ImplementationTypeFake = "androidx.camera.fake" -> string!
const AndroidX.Camera.Core.Impl.ForwardingCameraInfo.InterfaceConsts.ImplementationTypeUnknown = "<unknown>" -> string!
const AndroidX.Camera.Core.Impl.ForwardingCameraInfo.InterfaceConsts.IntrinsicZoomRatioUnknown = 1 -> float
const AndroidX.Camera.Core.Impl.ImageFormatConstants.InternalDefinedImageFormatJpeg = 33 -> int
const AndroidX.Camera.Core.Impl.ImageFormatConstants.InternalDefinedImageFormatPrivate = 34 -> int
const AndroidX.Camera.Core.Impl.ImageOutputConfig.InvalidRotation = -1 -> int
const AndroidX.Camera.Core.Impl.ImageOutputConfig.RotationNotSpecified = -1 -> int
const AndroidX.Camera.Core.Impl.QuirkSettingsLoader.KeyDefaultQuirkEnabled = "androidx.camera.core.quirks.DEFAULT_QUIRK_ENABLED" -> string!
const AndroidX.Camera.Core.Impl.QuirkSettingsLoader.KeyQuirkForceDisabled = "androidx.camera.core.quirks.FORCE_DISABLED" -> string!
const AndroidX.Camera.Core.Impl.QuirkSettingsLoader.KeyQuirkForceEnabled = "androidx.camera.core.quirks.FORCE_ENABLED" -> string!
const AndroidX.Camera.Core.Impl.RestrictedCameraInfo.CameraOperationAeRegion = 3 -> int
const AndroidX.Camera.Core.Impl.RestrictedCameraInfo.CameraOperationAfRegion = 2 -> int
const AndroidX.Camera.Core.Impl.RestrictedCameraInfo.CameraOperationAutoFocus = 1 -> int
const AndroidX.Camera.Core.Impl.RestrictedCameraInfo.CameraOperationAwbRegion = 4 -> int
const AndroidX.Camera.Core.Impl.RestrictedCameraInfo.CameraOperationExposureCompensation = 7 -> int
const AndroidX.Camera.Core.Impl.RestrictedCameraInfo.CameraOperationExtensionStrength = 8 -> int
const AndroidX.Camera.Core.Impl.RestrictedCameraInfo.CameraOperationFlash = 5 -> int
const AndroidX.Camera.Core.Impl.RestrictedCameraInfo.CameraOperationTorch = 6 -> int
const AndroidX.Camera.Core.Impl.RestrictedCameraInfo.CameraOperationZoom = 0 -> int
const AndroidX.Camera.Core.Impl.SessionConfig.DefaultSessionType = 0 -> int
const AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.SurfaceGroupIdNone = -1 -> int
const AndroidX.Camera.Core.Impl.Stabilization.StabilizationMode.Off = 1 -> int
const AndroidX.Camera.Core.Impl.Stabilization.StabilizationMode.On = 2 -> int
const AndroidX.Camera.Core.Impl.Stabilization.StabilizationMode.Unspecified = 0 -> int
const AndroidX.Camera.Core.Impl.SurfaceConfig.DefaultStreamUseCaseValue = 0 -> long
const AndroidX.Camera.Core.Impl.Utils.Exif.InvalidTimestamp = -1 -> long
const AndroidX.Camera.Core.Impl.Utils.Exif.TagThumbnailOrientation = "ThumbnailOrientation" -> string!
const AndroidX.Camera.Core.Impl.Utils.SurfaceUtil.JniLibName = "surface_util_jni" -> string!
const AndroidX.Camera.Core.Internal.Utils.ImageUtil.DefaultRgbaPixelStride = 4 -> int
const AndroidX.Camera.Core.MirrorMode.MirrorModeOff = 0 -> int
const AndroidX.Camera.Core.MirrorMode.MirrorModeOn = 1 -> int
const AndroidX.Camera.Core.MirrorMode.MirrorModeOnFrontOnly = 2 -> int
const AndroidX.Camera.Core.MirrorMode.MirrorModeUnspecified = -1 -> int
const AndroidX.Camera.Core.Processing.Util.GLUtils.BlankFragmentShader = "precision mediump float;\nuniform float uAlphaScale;\nvoid main() {\n    gl_FragColor = vec4(0.0, 0.0, 0.0, uAlphaScale);\n}\n" -> string!
const AndroidX.Camera.Core.Processing.Util.GLUtils.BlankVertexShader = "uniform mat4 uTransMatrix;\nattribute vec4 aPosition;\nvoid main() {\n    gl_Position = uTransMatrix * aPosition;\n}\n" -> string!
const AndroidX.Camera.Core.Processing.Util.GLUtils.EglGlColorspaceBt2020HlgExt = 13632 -> int
const AndroidX.Camera.Core.Processing.Util.GLUtils.EglGlColorspaceKhr = 12445 -> int
const AndroidX.Camera.Core.Processing.Util.GLUtils.PixelStride = 4 -> int
const AndroidX.Camera.Core.Processing.Util.GLUtils.SizeofFloat = 4 -> int
const AndroidX.Camera.Core.Processing.Util.GLUtils.Tag = "GLUtils" -> string!
const AndroidX.Camera.Core.Processing.Util.GLUtils.VarTexture = "sTexture" -> string!
const AndroidX.Camera.Core.Processing.Util.GLUtils.VarTextureCoord = "vTextureCoord" -> string!
const AndroidX.Camera.Core.Processing.Util.GLUtils.VersionUnknown = "0.0" -> string!
const AndroidX.Camera.Core.ResolutionSelector.AspectRatioStrategy.FallbackRuleAuto = 1 -> int
const AndroidX.Camera.Core.ResolutionSelector.AspectRatioStrategy.FallbackRuleNone = 0 -> int
const AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.PreferCaptureRateOverHigherResolution = 0 -> int
const AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.PreferHigherResolutionOverCaptureRate = 1 -> int
const AndroidX.Camera.Core.ResolutionSelector.ResolutionStrategy.FallbackRuleClosestHigher = 2 -> int
const AndroidX.Camera.Core.ResolutionSelector.ResolutionStrategy.FallbackRuleClosestHigherThenLower = 1 -> int
const AndroidX.Camera.Core.ResolutionSelector.ResolutionStrategy.FallbackRuleClosestLower = 4 -> int
const AndroidX.Camera.Core.ResolutionSelector.ResolutionStrategy.FallbackRuleClosestLowerThenHigher = 3 -> int
const AndroidX.Camera.Core.ResolutionSelector.ResolutionStrategy.FallbackRuleNone = 0 -> int
const AndroidX.Camera.Core.RetryPolicyExecutionState.StatusCameraUnavailable = 2 -> int
const AndroidX.Camera.Core.RetryPolicyExecutionState.StatusConfigurationFail = 1 -> int
const AndroidX.Camera.Core.RetryPolicyExecutionState.StatusUnknownError = 0 -> int
const AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.InvalidRotation = -1 -> int
const AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.RotationNotSpecified = -1 -> int
const AndroidX.Camera.Core.SurfaceOutputEvent.EventRequestClose = 0 -> int
const AndroidX.Camera.Core.SurfaceRequest.Result.ResultInvalidSurface = 2 -> int
const AndroidX.Camera.Core.SurfaceRequest.Result.ResultRequestCancelled = 1 -> int
const AndroidX.Camera.Core.SurfaceRequest.Result.ResultSurfaceAlreadyProvided = 3 -> int
const AndroidX.Camera.Core.SurfaceRequest.Result.ResultSurfaceUsedSuccessfully = 0 -> int
const AndroidX.Camera.Core.SurfaceRequest.Result.ResultWillNotProvideSurface = 4 -> int
const AndroidX.Camera.Core.TorchState.Off = 0 -> int
const AndroidX.Camera.Core.TorchState.On = 1 -> int
const AndroidX.Camera.Core.ViewPort.FillCenter = 1 -> int
const AndroidX.Camera.Core.ViewPort.FillEnd = 2 -> int
const AndroidX.Camera.Core.ViewPort.FillStart = 0 -> int
const AndroidX.Camera.Core.ViewPort.Fit = 3 -> int
override AndroidX.Camera.Core.AspectRatio.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.AspectRatio.ThresholdClass.get -> nint
override AndroidX.Camera.Core.AspectRatio.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.CameraControlOperationCanceledException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.CameraEffect.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.CameraEffect.ThresholdClass.get -> nint
override AndroidX.Camera.Core.CameraEffect.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.CameraExecutor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.CameraExecutor.ThresholdClass.get -> nint
override AndroidX.Camera.Core.CameraExecutor.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.CameraInfoUnavailableException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.CameraSelector.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.CameraSelector.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.CameraState.ErrorType.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.CameraState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.CameraState.StateError.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.CameraState.StateError.ThresholdClass.get -> nint
override AndroidX.Camera.Core.CameraState.StateError.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.CameraState.ThresholdClass.get -> nint
override AndroidX.Camera.Core.CameraState.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.CameraState.Type.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.CameraUnavailableException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.CameraUnavailableException.ThresholdClass.get -> nint
override AndroidX.Camera.Core.CameraUnavailableException.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.CameraX.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.CameraXConfig.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.CameraXConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.CameraXThreads.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.CaptureBundles.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ConcurrentCamera.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ConcurrentCamera.SingleCameraConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ConcurrentCamera.ThresholdClass.get -> nint
override AndroidX.Camera.Core.ConcurrentCamera.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.DisplayOrientedMeteringPointFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.DynamicRange.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.FocusMeteringAction.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.FocusMeteringAction.Builder.ThresholdClass.get -> nint
override AndroidX.Camera.Core.FocusMeteringAction.Builder.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.FocusMeteringAction.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.FocusMeteringResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ForwardingImageProxy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ForwardingImageProxy.ThresholdClass.get -> nint
override AndroidX.Camera.Core.ForwardingImageProxy.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.ImageAnalysis.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageAnalysis.Defaults.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageAnalysis.GetDefaultConfig(bool applyDefaultConfig, AndroidX.Camera.Core.Impl.IUseCaseConfigFactory! factory) -> AndroidX.Camera.Core.Impl.IUseCaseConfig?
override AndroidX.Camera.Core.ImageAnalysis.GetUseCaseConfigBuilder(AndroidX.Camera.Core.Impl.IConfig! config) -> AndroidX.Camera.Core.Impl.IUseCaseConfigBuilder!
override AndroidX.Camera.Core.ImageAnalysis.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCapture.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCapture.Defaults.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCapture.GetDefaultConfig(bool applyDefaultConfig, AndroidX.Camera.Core.Impl.IUseCaseConfigFactory! factory) -> AndroidX.Camera.Core.Impl.IUseCaseConfig?
override AndroidX.Camera.Core.ImageCapture.GetUseCaseConfigBuilder(AndroidX.Camera.Core.Impl.IConfig! config) -> AndroidX.Camera.Core.Impl.IUseCaseConfigBuilder!
override AndroidX.Camera.Core.ImageCapture.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCapture.Metadata.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCapture.OnImageCapturedCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCapture.OnImageCapturedCallback.ThresholdClass.get -> nint
override AndroidX.Camera.Core.ImageCapture.OnImageCapturedCallback.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.ImageCapture.OutputFileOptions.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCapture.OutputFileOptions.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCapture.OutputFileResults.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCapture.OutputFileResults.ThresholdClass.get -> nint
override AndroidX.Camera.Core.ImageCapture.OutputFileResults.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.ImageCaptureException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCaptureException.ThresholdClass.get -> nint
override AndroidX.Camera.Core.ImageCaptureException.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.ImageCaptureExtKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCaptureLatencyEstimate.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCaptureLatencyEstimate.ThresholdClass.get -> nint
override AndroidX.Camera.Core.ImageCaptureLatencyEstimate.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.ImageCaptures.BitmapEffect.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCaptures.BitmapEffect.ThresholdClass.get -> nint
override AndroidX.Camera.Core.ImageCaptures.BitmapEffect.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.ImageCaptures.CameraRequest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCaptures.Image2Bitmap.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCaptures.Image2Bitmap.ThresholdClass.get -> nint
override AndroidX.Camera.Core.ImageCaptures.Image2Bitmap.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.ImageCaptures.ImagePipeline.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCaptures.ImagePipeline.ThresholdClass.get -> nint
override AndroidX.Camera.Core.ImageCaptures.ImagePipeline.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.ImageCaptures.JpegBytes2Image.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCaptures.JpegBytes2Image.ThresholdClass.get -> nint
override AndroidX.Camera.Core.ImageCaptures.JpegBytes2Image.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.ImageCaptures.JpegImage2Result.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCaptures.JpegImage2Result.ThresholdClass.get -> nint
override AndroidX.Camera.Core.ImageCaptures.JpegImage2Result.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.ImageCaptures.NoMetadataImageReader.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCaptures.NoMetadataImageReader.ThresholdClass.get -> nint
override AndroidX.Camera.Core.ImageCaptures.NoMetadataImageReader.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.ImageCaptures.ProcessingNode.In.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCaptures.ProcessingNode.In.ThresholdClass.get -> nint
override AndroidX.Camera.Core.ImageCaptures.ProcessingNode.In.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.ImageCaptures.ProcessingNode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCaptures.ProcessingNode.ThresholdClass.get -> nint
override AndroidX.Camera.Core.ImageCaptures.ProcessingNode.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.ImageCaptures.RequestWithCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCaptures.RequestWithCallback.ThresholdClass.get -> nint
override AndroidX.Camera.Core.ImageCaptures.RequestWithCallback.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.ImageCaptures.RgbaImageProxy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCaptures.TakePictureManager.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCaptures.TakePictureManager.ThresholdClass.get -> nint
override AndroidX.Camera.Core.ImageCaptures.TakePictureManager.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.ImageCaptures.TakePictureRequest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageCaptures.TakePictureRequest.ThresholdClass.get -> nint
override AndroidX.Camera.Core.ImageCaptures.TakePictureRequest.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.ImageProcessingUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImageReaderProxys.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImmutableImageInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ImmutableImageInfo.ThresholdClass.get -> nint
override AndroidX.Camera.Core.ImmutableImageInfo.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.AttachedSurfaceInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.AttachedSurfaceInfo.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.AttachedSurfaceInfo.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.CameraCaptureCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraCaptureCallback.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.CameraCaptureCallback.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.CameraCaptureCallbacks.ComboCameraCaptureCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraCaptureCallbacks.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraCaptureFailure.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraCaptureFailure.Reason.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraCaptureFailure.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.CameraCaptureFailure.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfMode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraCaptureMetaData.FlashState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraCaptureMetaData.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraCaptureResultEmptyCameraCaptureResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraCaptureResults.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraConfigs.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraConfigs.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.CameraConfigs.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.CameraControlInternalCameraControlException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraFilters.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraFilters.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.CameraFilters.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.CameraInternalState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraMode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraProviderExecutionState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraProviderInitRetryPolicy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraProviderInitRetryPolicy.Legacy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraRepository.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraStateRegistry.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraThreadConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraThreadConfig.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.CameraThreadConfig.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.CameraValidator.CameraIdListIncorrectException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CameraValidator.CameraIdListIncorrectException.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.CameraValidator.CameraIdListIncorrectException.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.CameraValidator.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Capability.PreviewCapabilitiesImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Capability.PreviewCapabilitiesImpl.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.Capability.PreviewCapabilitiesImpl.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.CaptureConfig.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CaptureConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.CaptureStageDefaultCaptureStage.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Compat.EncoderProfilesProxyCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.ConfigOption.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.ConfigOption.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.ConfigOption.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.ConfigOptionPriority.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.ConstantObservable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.ConvergenceUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.ConvergenceUtils.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.ConvergenceUtils.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.DeferrableSurface.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.DeferrableSurface.SurfaceClosedException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.DeferrableSurface.SurfaceUnavailableException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.DeferrableSurface.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.DeferrableSurface.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.DeferrableSurfaces.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.DeviceProperties.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.DeviceProperties.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.DeviceProperties.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.DynamicRanges.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.EncoderProfilesProxyAudioProfileProxy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.EncoderProfilesProxyAudioProfileProxy.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.EncoderProfilesProxyAudioProfileProxy.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.EncoderProfilesProxyImmutableEncoderProfilesProxy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.EncoderProfilesProxyImmutableEncoderProfilesProxy.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.EncoderProfilesProxyImmutableEncoderProfilesProxy.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.ExtendedCameraConfigProviderStore.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.ForwardingCameraControl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.ForwardingCameraControl.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.ForwardingCameraControl.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.ForwardingCameraInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.ForwardingCameraInfo.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.ForwardingCameraInfo.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.Identifier.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Identifier.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.Identifier.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.ImageAnalysisConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.ImageCaptureConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.ImageFormatConstants.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.ImmediateSurface.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.LensFacingCameraFilter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.LensFacingCameraFilter.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.LensFacingCameraFilter.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.LiveDataObservable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.LiveDataObservable.Result.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.MetadataHolderService.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.MetadataHolderService.OnBind(Android.Content.Intent! intent) -> Android.OS.IBinder?
override AndroidX.Camera.Core.Impl.MetadataHolderService.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.MetadataHolderService.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.MultiValueSet.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.MultiValueSet.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.MultiValueSet.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.MutableOptionsBundle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.MutableStateObservable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.MutableStateObservable.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.MutableStateObservable.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.MutableTagBundle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.MutableTagBundle.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.MutableTagBundle.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.OptionsBundle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.OptionsBundle.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.OptionsBundle.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.OutputSurface.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.OutputSurface.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.OutputSurface.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.OutputSurfaceConfiguration.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.OutputSurfaceConfiguration.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.OutputSurfaceConfiguration.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.PreviewConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.QuirkSettings.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.QuirkSettings.Builder.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.QuirkSettings.Builder.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.QuirkSettings.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.QuirkSettings.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.QuirkSettings.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.QuirkSettingsHolder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.QuirkSettingsLoader.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.QuirkSettingsLoader.MetadataHolderService.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.QuirkSettingsLoader.MetadataHolderService.OnBind(Android.Content.Intent? intent) -> Android.OS.IBinder?
override AndroidX.Camera.Core.Impl.QuirkSettingsLoader.MetadataHolderService.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.QuirkSettingsLoader.MetadataHolderService.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.QuirkSettingsLoader.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.QuirkSettingsLoader.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.Quirks.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Quirks.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.Quirks.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.RestrictedCameraControl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.RestrictedCameraControl.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.RestrictedCameraControl.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.RestrictedCameraInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.RestrictedCameraInfo.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.RestrictedCameraInfo.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.SessionConfig.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.SessionConfig.Builder.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.SessionConfig.Builder.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.SessionConfig.CloseableErrorListener.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.SessionConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.Builder.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.Builder.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.SessionConfig.SessionError.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.SessionConfig.ValidatingBuilder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.SessionProcessorSurface.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.SingleImageProxyBundle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Stabilization.StabilizationMode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Stabilization.StabilizationMode.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.Stabilization.StabilizationMode.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.StateObservable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.StateObservable.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.StateObservable.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.StreamSpec.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.StreamSpec.Builder.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.StreamSpec.Builder.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.StreamSpec.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.StreamSpec.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.StreamSpec.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.SurfaceCombination.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigType.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.SurfaceConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.SurfaceConfig.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.SurfaceConfig.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.SurfaceSizeDefinition.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.SurfaceSizeDefinition.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.SurfaceSizeDefinition.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.TagBundle.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.TagBundle.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.TagBundle.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.Timebase.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.TimeoutRetryPolicy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.UseCaseAttachState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.UseCaseAttachState.UseCaseAttachInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.AspectRatioUtil.CompareAspectRatiosByMappingAreaInFullFovAspectRatioSpace.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.AspectRatioUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.CameraOrientationUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.CloseGuardHelper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.CompareSizesByArea.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.ContextUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.Executors.AudioExecutor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.Executors.AudioExecutor.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.Utils.Executors.AudioExecutor.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.Utils.Executors.CameraXExecutors.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.Exif.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.ExifData.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.ExifData.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.ExifData.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.Utils.ExifData.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.Utils.ExifData.WhiteBalanceMode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.ExifOutputStream.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.Futures.FutureChain.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.Futures.FutureChain.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.Utils.Futures.FutureChain.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.Utils.Futures.Futures.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.InterruptedRuntimeException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.InterruptedRuntimeException.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.Utils.InterruptedRuntimeException.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.Utils.MainThreadAsyncHandler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.MatrixExt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.Optional.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.Optional.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.Utils.Optional.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.Utils.ResolutionSelectorUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.ResolutionSelectorUtil.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.Utils.ResolutionSelectorUtil.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.Utils.SessionProcessorUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.SurfaceUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.SurfaceUtil.SurfaceInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.SurfaceUtil.SurfaceInfo.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.Utils.SurfaceUtil.SurfaceInfo.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.Utils.SurfaceUtil.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.Utils.SurfaceUtil.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Impl.Utils.Threads.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.TransformUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Impl.Utils.TransformUtils.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Impl.Utils.TransformUtils.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.InitializationException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.InitializationException.ThresholdClass.get -> nint
override AndroidX.Camera.Core.InitializationException.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Internal.ByteBufferOutputStream.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.ByteBufferOutputStream.Write(int b) -> void
override AndroidX.Camera.Core.Internal.CameraCaptureResultImageInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraId.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraId.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraId.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Compat.Quirk.CaptureFailedRetryQuirk.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Compat.Quirk.CaptureFailedRetryQuirk.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Internal.Compat.Quirk.CaptureFailedRetryQuirk.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Internal.Compat.Quirk.DeviceQuirks.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Compat.Quirk.DeviceQuirks.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Internal.Compat.Quirk.DeviceQuirks.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Internal.Compat.Quirk.DeviceQuirksLoader.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Compat.Quirk.DeviceQuirksLoader.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Internal.Compat.Quirk.DeviceQuirksLoader.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Internal.Compat.Quirk.ImageCaptureRotationOptionQuirk.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Compat.Quirk.IncorrectJpegMetadataQuirk.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Compat.Quirk.LargeJpegImageQuirk.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Compat.Quirk.LowMemoryQuirk.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Compat.Quirk.LowMemoryQuirk.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Internal.Compat.Quirk.LowMemoryQuirk.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Internal.Compat.Quirk.SurfaceOrderQuirk.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Compat.Quirk.SurfaceOrderQuirk.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Internal.Compat.Quirk.SurfaceOrderQuirk.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Internal.Compat.Workaround.CaptureFailedRetryEnabler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Compat.Workaround.CaptureFailedRetryEnabler.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Internal.Compat.Workaround.CaptureFailedRetryEnabler.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Internal.Compat.Workaround.ExifRotationAvailability.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Compat.Workaround.ExifRotationAvailability.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Internal.Compat.Workaround.ExifRotationAvailability.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Internal.Compat.Workaround.InvalidJpegDataParser.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Compat.Workaround.InvalidJpegDataParser.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Internal.Compat.Workaround.InvalidJpegDataParser.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Internal.Compat.Workaround.JpegMetadataCorrector.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Compat.Workaround.JpegMetadataCorrector.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Internal.Compat.Workaround.JpegMetadataCorrector.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Internal.Compat.Workaround.SurfaceSorter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Compat.Workaround.SurfaceSorter.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Internal.Compat.Workaround.SurfaceSorter.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Internal.ImmutableZoomState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.ImmutableZoomState.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Internal.ImmutableZoomState.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Internal.ScreenFlashWrapper.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.ScreenFlashWrapper.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.SupportedOutputSizesSorter.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.SupportedOutputSizesSorter.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Internal.SupportedOutputSizesSorter.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Internal.Utils.ArrayRingBuffer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Utils.ArrayRingBuffer.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Internal.Utils.ArrayRingBuffer.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Internal.Utils.ImageUtil.CodecFailedException.FailureType.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Utils.ImageUtil.CodecFailedException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Utils.ImageUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Utils.ImageWriterCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Utils.MediaActionSoundCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Utils.SizeUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Utils.UseCaseConfigUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Utils.VideoUtil.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.Utils.ZslRingBuffer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.ViewPorts.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Internal.ViewPorts.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Internal.ViewPorts.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.LayoutSettings.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.LayoutSettings.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.LayoutSettings.ThresholdClass.get -> nint
override AndroidX.Camera.Core.LayoutSettings.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Logger.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.MetadataImageReader.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.MetadataImageReader.ThresholdClass.get -> nint
override AndroidX.Camera.Core.MetadataImageReader.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.MeteringPoint.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.MeteringPoint.ThresholdClass.get -> nint
override AndroidX.Camera.Core.MeteringPoint.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.MeteringPointFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.MeteringPointFactory.ThresholdClass.get -> nint
override AndroidX.Camera.Core.MeteringPointFactory.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.MirrorMode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.MirrorMode.ThresholdClass.get -> nint
override AndroidX.Camera.Core.MirrorMode.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Preview.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Preview.Defaults.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Preview.GetDefaultConfig(bool applyDefaultConfig, AndroidX.Camera.Core.Impl.IUseCaseConfigFactory! factory) -> AndroidX.Camera.Core.Impl.IUseCaseConfig?
override AndroidX.Camera.Core.Preview.GetUseCaseConfigBuilder(AndroidX.Camera.Core.Impl.IConfig! config) -> AndroidX.Camera.Core.Impl.IUseCaseConfigBuilder!
override AndroidX.Camera.Core.Preview.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.Concurrent.DualOpenGlRenderer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.Concurrent.DualOutConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.Concurrent.DualOutConfig.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.Concurrent.DualOutConfig.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessor.Factory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessor.Factory.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessor.Factory.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessor.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessor.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.In.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.In.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.In.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.Out.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.Out.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.Out.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.DefaultSurfaceProcessor.Factory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.DefaultSurfaceProcessor.Factory.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.DefaultSurfaceProcessor.Factory.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.DefaultSurfaceProcessor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.DefaultSurfaceProcessor.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.DefaultSurfaceProcessor.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.Edge.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.Edge.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.Edge.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.ImageProcessorRequest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.ImageProcessorRequest.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.ImageProcessorRequest.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.InternalImageProcessor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.InternalImageProcessor.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.InternalImageProcessor.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.OpenGlRenderer.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.OpenGlRenderer.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.OpenGlRenderer.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.Packet.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.Packet.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.Packet.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.SurfaceEdge.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.SurfaceEdge.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.SurfaceEdge.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.SurfaceProcessorNode.In.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.SurfaceProcessorNode.In.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.SurfaceProcessorNode.In.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.SurfaceProcessorNode.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.SurfaceProcessorNode.Out.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.SurfaceProcessorNode.Out.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.SurfaceProcessorNode.Out.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.SurfaceProcessorNode.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.SurfaceProcessorNode.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.SurfaceProcessorWithExecutor.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.SurfaceProcessorWithExecutor.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.SurfaceProcessorWithExecutor.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.TargetUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.TargetUtils.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.TargetUtils.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.Util.GLUtils.BlankShaderProgram.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.Util.GLUtils.BlankShaderProgram.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.Util.GLUtils.BlankShaderProgram.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.Util.GLUtils.InputFormat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.Util.GLUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.Util.GLUtils.Program2D.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.Util.GLUtils.Program2D.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.Util.GLUtils.Program2D.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.Util.GLUtils.SamplerShaderProgram.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.Util.GLUtils.SamplerShaderProgram.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.Util.GLUtils.SamplerShaderProgram.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.Builder.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.Builder.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.Util.OutConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.Util.OutConfig.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.Util.OutConfig.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.Processing.Util.OutputSurface.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.Processing.Util.OutputSurface.ThresholdClass.get -> nint
override AndroidX.Camera.Core.Processing.Util.OutputSurface.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.ProcessingException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ProcessingException.ThresholdClass.get -> nint
override AndroidX.Camera.Core.ProcessingException.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.ResolutionInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ResolutionInfo.ThresholdClass.get -> nint
override AndroidX.Camera.Core.ResolutionInfo.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.ResolutionSelector.AspectRatioStrategy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ResolutionSelector.ResolutionStrategy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.RetryPolicyBuilder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.RetryPolicyRetryConfig.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.RetryPolicyRetryConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.SafeCloseImageReaderProxy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.SafeCloseImageReaderProxy.ThresholdClass.get -> nint
override AndroidX.Camera.Core.SafeCloseImageReaderProxy.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.SettableImageProxy.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.StreamSharing.DynamicRangeUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.StreamSharing.DynamicRangeUtils.ThresholdClass.get -> nint
override AndroidX.Camera.Core.StreamSharing.DynamicRangeUtils.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.StreamSharing.ResolutionsMerger.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.StreamSharing.ResolutionsMerger.ThresholdClass.get -> nint
override AndroidX.Camera.Core.StreamSharing.ResolutionsMerger.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.StreamSharing.StreamSharing.GetDefaultConfig(bool applyDefaultConfig, AndroidX.Camera.Core.Impl.IUseCaseConfigFactory! factory) -> AndroidX.Camera.Core.Impl.IUseCaseConfig?
override AndroidX.Camera.Core.StreamSharing.StreamSharing.GetUseCaseConfigBuilder(AndroidX.Camera.Core.Impl.IConfig! config) -> AndroidX.Camera.Core.Impl.IUseCaseConfigBuilder!
override AndroidX.Camera.Core.StreamSharing.StreamSharing.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.StreamSharing.StreamSharing.SupportedEffectTargets.get -> System.Collections.Generic.ICollection<Java.Lang.Integer!>!
override AndroidX.Camera.Core.StreamSharing.StreamSharing.ThresholdClass.get -> nint
override AndroidX.Camera.Core.StreamSharing.StreamSharing.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.ThresholdClass.get -> nint
override AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.StreamSharing.VirtualCameraCaptureResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.StreamSharing.VirtualCameraCaptureResult.ThresholdClass.get -> nint
override AndroidX.Camera.Core.StreamSharing.VirtualCameraCaptureResult.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.StreamSharing.VirtualCameraControl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.StreamSharing.VirtualCameraControl.ThresholdClass.get -> nint
override AndroidX.Camera.Core.StreamSharing.VirtualCameraControl.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.StreamSharing.VirtualCameraInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.StreamSharing.VirtualCameraInfo.ThresholdClass.get -> nint
override AndroidX.Camera.Core.StreamSharing.VirtualCameraInfo.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.SurfaceOrientedMeteringPointFactory.ConvertPoint(float x, float y) -> Android.Graphics.PointF!
override AndroidX.Camera.Core.SurfaceOrientedMeteringPointFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.SurfaceOrientedMeteringPointFactory.ThresholdClass.get -> nint
override AndroidX.Camera.Core.SurfaceOrientedMeteringPointFactory.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.SurfaceOutputCameraInputInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.SurfaceOutputCameraInputInfo.ThresholdClass.get -> nint
override AndroidX.Camera.Core.SurfaceOutputCameraInputInfo.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.SurfaceOutputEvent.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.SurfaceOutputEvent.ThresholdClass.get -> nint
override AndroidX.Camera.Core.SurfaceOutputEvent.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.SurfaceRequest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.SurfaceRequest.Result.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.SurfaceRequest.Result.ThresholdClass.get -> nint
override AndroidX.Camera.Core.SurfaceRequest.Result.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.SurfaceRequest.TransformationInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.SurfaceRequest.TransformationInfo.ThresholdClass.get -> nint
override AndroidX.Camera.Core.SurfaceRequest.TransformationInfo.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.TorchState.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.TorchState.ThresholdClass.get -> nint
override AndroidX.Camera.Core.TorchState.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.UseCase.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.UseCase.ThresholdClass.get -> nint
override AndroidX.Camera.Core.UseCase.ThresholdType.get -> System.Type!
override AndroidX.Camera.Core.UseCaseGroup.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.UseCaseGroup.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ViewPort.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Camera.Core.ViewPort.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override sealed AndroidX.Camera.Core.Impl.TagBundle.ToString() -> string!
static AndroidX.Camera.Core.CameraFilter.DefaultId.get -> AndroidX.Camera.Core.Impl.Identifier?
static AndroidX.Camera.Core.CameraInfo.MustPlayShutterSound() -> bool
static AndroidX.Camera.Core.CameraSelector.Builder.FromSelector(AndroidX.Camera.Core.CameraSelector! cameraSelector) -> AndroidX.Camera.Core.CameraSelector.Builder!
static AndroidX.Camera.Core.CameraSelector.DefaultBackCamera.get -> AndroidX.Camera.Core.CameraSelector!
static AndroidX.Camera.Core.CameraSelector.DefaultFrontCamera.get -> AndroidX.Camera.Core.CameraSelector!
static AndroidX.Camera.Core.CameraState.Create(AndroidX.Camera.Core.CameraState.Type! type) -> AndroidX.Camera.Core.CameraState!
static AndroidX.Camera.Core.CameraState.Create(AndroidX.Camera.Core.CameraState.Type! type, AndroidX.Camera.Core.CameraState.StateError? error) -> AndroidX.Camera.Core.CameraState!
static AndroidX.Camera.Core.CameraState.ErrorType.Critical.get -> AndroidX.Camera.Core.CameraState.ErrorType?
static AndroidX.Camera.Core.CameraState.ErrorType.Recoverable.get -> AndroidX.Camera.Core.CameraState.ErrorType?
static AndroidX.Camera.Core.CameraState.ErrorType.ValueOf(string? name) -> AndroidX.Camera.Core.CameraState.ErrorType?
static AndroidX.Camera.Core.CameraState.ErrorType.Values() -> AndroidX.Camera.Core.CameraState.ErrorType![]?
static AndroidX.Camera.Core.CameraState.StateError.Create(int error) -> AndroidX.Camera.Core.CameraState.StateError!
static AndroidX.Camera.Core.CameraState.StateError.Create(int error, Java.Lang.Throwable? cause) -> AndroidX.Camera.Core.CameraState.StateError!
static AndroidX.Camera.Core.CameraState.Type.Closed.get -> AndroidX.Camera.Core.CameraState.Type?
static AndroidX.Camera.Core.CameraState.Type.Closing.get -> AndroidX.Camera.Core.CameraState.Type?
static AndroidX.Camera.Core.CameraState.Type.Open.get -> AndroidX.Camera.Core.CameraState.Type?
static AndroidX.Camera.Core.CameraState.Type.Opening.get -> AndroidX.Camera.Core.CameraState.Type?
static AndroidX.Camera.Core.CameraState.Type.PendingOpen.get -> AndroidX.Camera.Core.CameraState.Type?
static AndroidX.Camera.Core.CameraState.Type.ValueOf(string? name) -> AndroidX.Camera.Core.CameraState.Type?
static AndroidX.Camera.Core.CameraState.Type.Values() -> AndroidX.Camera.Core.CameraState.Type![]?
static AndroidX.Camera.Core.CameraXConfig.Builder.FromConfig(AndroidX.Camera.Core.CameraXConfig! configuration) -> AndroidX.Camera.Core.CameraXConfig.Builder!
static AndroidX.Camera.Core.CaptureBundles.SingleDefaultCaptureBundle() -> AndroidX.Camera.Core.Impl.ICaptureBundle!
static AndroidX.Camera.Core.DynamicRange.DolbyVision10Bit.get -> AndroidX.Camera.Core.DynamicRange!
static AndroidX.Camera.Core.DynamicRange.DolbyVision8Bit.get -> AndroidX.Camera.Core.DynamicRange!
static AndroidX.Camera.Core.DynamicRange.Hdr1010Bit.get -> AndroidX.Camera.Core.DynamicRange!
static AndroidX.Camera.Core.DynamicRange.Hdr10Plus10Bit.get -> AndroidX.Camera.Core.DynamicRange!
static AndroidX.Camera.Core.DynamicRange.HdrUnspecified10Bit.get -> AndroidX.Camera.Core.DynamicRange!
static AndroidX.Camera.Core.DynamicRange.Hlg10Bit.get -> AndroidX.Camera.Core.DynamicRange!
static AndroidX.Camera.Core.DynamicRange.Sdr.get -> AndroidX.Camera.Core.DynamicRange!
static AndroidX.Camera.Core.DynamicRange.Unspecified.get -> AndroidX.Camera.Core.DynamicRange!
static AndroidX.Camera.Core.FocusMeteringResult.Create(bool isFocusSuccess) -> AndroidX.Camera.Core.FocusMeteringResult!
static AndroidX.Camera.Core.FocusMeteringResult.EmptyInstance() -> AndroidX.Camera.Core.FocusMeteringResult!
static AndroidX.Camera.Core.ImageAnalysis.Builder.FromConfig(AndroidX.Camera.Core.Impl.ImageAnalysisConfig! configuration) -> AndroidX.Camera.Core.ImageAnalysis.Builder!
static AndroidX.Camera.Core.ImageAnalysis.DefaultConfig.get -> AndroidX.Camera.Core.ImageAnalysis.Defaults?
static AndroidX.Camera.Core.ImageCapture.Builder.FromConfig(AndroidX.Camera.Core.Impl.IConfig! configuration) -> AndroidX.Camera.Core.ImageCapture.Builder!
static AndroidX.Camera.Core.ImageCapture.DefaultConfig.get -> AndroidX.Camera.Core.ImageCapture.Defaults?
static AndroidX.Camera.Core.ImageCapture.GetImageCaptureCapabilities(AndroidX.Camera.Core.ICameraInfo! cameraInfo) -> AndroidX.Camera.Core.IImageCaptureCapabilities!
static AndroidX.Camera.Core.ImageCaptureExtKt.TakePicture(AndroidX.Camera.Core.ImageCapture! obj, AndroidX.Camera.Core.ImageCapture.OutputFileOptions! outputFileOptions, Kotlin.Jvm.Functions.IFunction0? onCaptureStarted, Kotlin.Jvm.Functions.IFunction1? onCaptureProcessProgressed, Kotlin.Jvm.Functions.IFunction1? onPostviewBitmapAvailable, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Camera.Core.ImageCaptureExtKt.TakePicture(AndroidX.Camera.Core.ImageCapture! obj, Kotlin.Jvm.Functions.IFunction0? onCaptureStarted, Kotlin.Jvm.Functions.IFunction1? onCaptureProcessProgressed, Kotlin.Jvm.Functions.IFunction1? onPostviewBitmapAvailable, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.Camera.Core.ImageCaptureLatencyEstimate.UndefinedImageCaptureLatency.get -> AndroidX.Camera.Core.ImageCaptureLatencyEstimate!
static AndroidX.Camera.Core.ImageCaptures.TakePictureRequest.Of(Java.Util.Concurrent.IExecutor! appExecutor, AndroidX.Camera.Core.ImageCapture.OnImageCapturedCallback? inMemoryCallback, AndroidX.Camera.Core.ImageCapture.IOnImageSavedCallback? onDiskCallback, AndroidX.Camera.Core.ImageCapture.OutputFileOptions? outputFileOptions, Android.Graphics.Rect! cropRect, Android.Graphics.Matrix! sensorToBufferTransform, int rotationDegrees, int jpegQuality, int captureMode, System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.CameraCaptureCallback!>! sessionConfigCameraCaptureCallbacks) -> AndroidX.Camera.Core.ImageCaptures.TakePictureRequest!
static AndroidX.Camera.Core.ImageProcessingUtil.ApplyPixelShiftForYUV(AndroidX.Camera.Core.IImageProxy! imageProxy) -> bool
static AndroidX.Camera.Core.ImageProcessingUtil.ConvertJpegBytesToImage(AndroidX.Camera.Core.Impl.IImageReaderProxy! jpegImageReaderProxy, byte[]! jpegBytes) -> AndroidX.Camera.Core.IImageProxy?
static AndroidX.Camera.Core.ImageProcessingUtil.ConvertYUVToBitmap(AndroidX.Camera.Core.IImageProxy! imageProxy) -> Android.Graphics.Bitmap!
static AndroidX.Camera.Core.ImageProcessingUtil.ConvertYUVToRGB(AndroidX.Camera.Core.IImageProxy! imageProxy, AndroidX.Camera.Core.Impl.IImageReaderProxy! rgbImageReaderProxy, Java.Nio.ByteBuffer? rgbConvertedBuffer, int rotationDegrees, bool onePixelShiftEnabled) -> AndroidX.Camera.Core.IImageProxy?
static AndroidX.Camera.Core.ImageProcessingUtil.ConvertYuvToJpegBytesIntoSurface(Android.Media.Image! image, int jpegQuality, int rotationDegrees, Android.Views.Surface! outputSurface) -> bool
static AndroidX.Camera.Core.ImageProcessingUtil.ConvertYuvToJpegBytesIntoSurface(AndroidX.Camera.Core.IImageProxy! imageProxy, int jpegQuality, int rotationDegrees, Android.Views.Surface! outputSurface) -> bool
static AndroidX.Camera.Core.ImageProcessingUtil.CopyBitmapToByteBuffer(Android.Graphics.Bitmap! bitmap, Java.Nio.ByteBuffer! byteBuffer, int bufferStride) -> void
static AndroidX.Camera.Core.ImageProcessingUtil.CopyByteBufferToBitmap(Android.Graphics.Bitmap! bitmap, Java.Nio.ByteBuffer! byteBuffer, int bufferStride) -> void
static AndroidX.Camera.Core.ImageProcessingUtil.RotateYUV(AndroidX.Camera.Core.IImageProxy! imageProxy, AndroidX.Camera.Core.Impl.IImageReaderProxy! rotatedImageReaderProxy, Android.Media.ImageWriter! rotatedImageWriter, Java.Nio.ByteBuffer! yRotatedBuffer, Java.Nio.ByteBuffer! uRotatedBuffer, Java.Nio.ByteBuffer! vRotatedBuffer, int rotationDegrees) -> AndroidX.Camera.Core.IImageProxy?
static AndroidX.Camera.Core.ImageProcessingUtil.WriteJpegBytesToSurface(Android.Views.Surface! surface, byte[]! jpegBytes) -> bool
static AndroidX.Camera.Core.ImageReaderProxys.CreateIsolatedReader(int width, int height, int format, int maxImages) -> AndroidX.Camera.Core.Impl.IImageReaderProxy!
static AndroidX.Camera.Core.ImmutableImageInfo.Create(AndroidX.Camera.Core.Impl.TagBundle! tag, long timestamp, int rotationDegrees, Android.Graphics.Matrix! sensorToBufferTransformMatrix) -> AndroidX.Camera.Core.IImageInfo!
static AndroidX.Camera.Core.Impl.AttachedSurfaceInfo.Create(AndroidX.Camera.Core.Impl.SurfaceConfig! surfaceConfig, int imageFormat, Android.Util.Size! size, AndroidX.Camera.Core.DynamicRange! dynamicRange, System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType!>! captureTypes, AndroidX.Camera.Core.Impl.IConfig? implementationOptions, Android.Util.Range? targetFrameRate) -> AndroidX.Camera.Core.Impl.AttachedSurfaceInfo!
static AndroidX.Camera.Core.Impl.CameraCaptureCallbacks.CreateComboCallback(params AndroidX.Camera.Core.Impl.CameraCaptureCallback![]! callbacks) -> AndroidX.Camera.Core.Impl.CameraCaptureCallback!
static AndroidX.Camera.Core.Impl.CameraCaptureCallbacks.CreateNoOpCallback() -> AndroidX.Camera.Core.Impl.CameraCaptureCallback!
static AndroidX.Camera.Core.Impl.CameraCaptureFailure.Reason.Error.get -> AndroidX.Camera.Core.Impl.CameraCaptureFailure.Reason?
static AndroidX.Camera.Core.Impl.CameraCaptureFailure.Reason.ValueOf(string? name) -> AndroidX.Camera.Core.Impl.CameraCaptureFailure.Reason?
static AndroidX.Camera.Core.Impl.CameraCaptureFailure.Reason.Values() -> AndroidX.Camera.Core.Impl.CameraCaptureFailure.Reason![]?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode.Off.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode.On.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode.OnAlwaysFlash.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode.OnAutoFlash.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode.OnAutoFlashRedeye.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode.OnExternalFlash.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode.Unknown.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode.ValueOf(string? name) -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode.Values() -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode![]?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeState.Converged.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeState.FlashRequired.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeState.Inactive.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeState.Locked.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeState.Searching.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeState.Unknown.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeState.ValueOf(string? name) -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeState.Values() -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeState![]?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfMode.Off.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfMode.OnContinuousAuto.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfMode.OnManualAuto.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfMode.Unknown.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfMode.ValueOf(string? name) -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfMode.Values() -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfMode![]?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState.Inactive.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState.LockedFocused.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState.LockedNotFocused.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState.PassiveFocused.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState.PassiveNotFocused.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState.Scanning.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState.Unknown.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState.ValueOf(string? name) -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState.Values() -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState![]?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode.Auto.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode.CloudyDaylight.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode.Daylight.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode.Fluorescent.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode.Incandescent.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode.Off.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode.Shade.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode.Twilight.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode.Unknown.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode.ValueOf(string? name) -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode.Values() -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode![]?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode.WarmFluorescent.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbState.Converged.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbState.Inactive.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbState.Locked.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbState.Metering.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbState.Unknown.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbState.ValueOf(string? name) -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbState.Values() -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbState![]?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.FlashState.Fired.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.FlashState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.FlashState.None.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.FlashState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.FlashState.Ready.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.FlashState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.FlashState.Unknown.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.FlashState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.FlashState.ValueOf(string? name) -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.FlashState?
static AndroidX.Camera.Core.Impl.CameraCaptureMetaData.FlashState.Values() -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.FlashState![]?
static AndroidX.Camera.Core.Impl.CameraCaptureResultEmptyCameraCaptureResult.Create() -> AndroidX.Camera.Core.Impl.ICameraCaptureResult!
static AndroidX.Camera.Core.Impl.CameraCaptureResults.RetrieveCameraCaptureResult(AndroidX.Camera.Core.IImageInfo! imageInfo) -> AndroidX.Camera.Core.Impl.ICameraCaptureResult?
static AndroidX.Camera.Core.Impl.CameraConfig.OptionCaptureProcessProgressSupported.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.CameraConfig.OptionCompatibilityId.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.CameraConfig.OptionPostviewSupported.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.CameraConfig.OptionSessionProcessor.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.CameraConfig.OptionUseCaseCombinationRequiredRule.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.CameraConfig.OptionUsecaseConfigFactory.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.CameraConfig.OptionZslDisabled.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.CameraConfigProvider.Empty.get -> AndroidX.Camera.Core.Impl.ICameraConfigProvider?
static AndroidX.Camera.Core.Impl.CameraConfigs.DefaultConfig() -> AndroidX.Camera.Core.Impl.ICameraConfig!
static AndroidX.Camera.Core.Impl.CameraControlInternal.DefaultEmptyInstance.get -> AndroidX.Camera.Core.Impl.ICameraControlInternal!
static AndroidX.Camera.Core.Impl.CameraFilters.Any.get -> AndroidX.Camera.Core.ICameraFilter?
static AndroidX.Camera.Core.Impl.CameraFilters.None.get -> AndroidX.Camera.Core.ICameraFilter?
static AndroidX.Camera.Core.Impl.CameraInternalState.Closed.get -> AndroidX.Camera.Core.Impl.CameraInternalState?
static AndroidX.Camera.Core.Impl.CameraInternalState.Closing.get -> AndroidX.Camera.Core.Impl.CameraInternalState?
static AndroidX.Camera.Core.Impl.CameraInternalState.Configured.get -> AndroidX.Camera.Core.Impl.CameraInternalState?
static AndroidX.Camera.Core.Impl.CameraInternalState.Open.get -> AndroidX.Camera.Core.Impl.CameraInternalState?
static AndroidX.Camera.Core.Impl.CameraInternalState.Opening.get -> AndroidX.Camera.Core.Impl.CameraInternalState?
static AndroidX.Camera.Core.Impl.CameraInternalState.PendingOpen.get -> AndroidX.Camera.Core.Impl.CameraInternalState?
static AndroidX.Camera.Core.Impl.CameraInternalState.Released.get -> AndroidX.Camera.Core.Impl.CameraInternalState?
static AndroidX.Camera.Core.Impl.CameraInternalState.Releasing.get -> AndroidX.Camera.Core.Impl.CameraInternalState?
static AndroidX.Camera.Core.Impl.CameraInternalState.ValueOf(string? name) -> AndroidX.Camera.Core.Impl.CameraInternalState?
static AndroidX.Camera.Core.Impl.CameraInternalState.Values() -> AndroidX.Camera.Core.Impl.CameraInternalState![]?
static AndroidX.Camera.Core.Impl.CameraMode.ToLabelString(int mode) -> string!
static AndroidX.Camera.Core.Impl.CameraProviderInitRetryPolicy.InterfaceConsts.Default.get -> AndroidX.Camera.Core.IRetryPolicy!
static AndroidX.Camera.Core.Impl.CameraProviderInitRetryPolicy.InterfaceConsts.Never.get -> AndroidX.Camera.Core.IRetryPolicy!
static AndroidX.Camera.Core.Impl.CameraProviderInitRetryPolicy.InterfaceConsts.RetryUnavailableCamera.get -> AndroidX.Camera.Core.IRetryPolicy!
static AndroidX.Camera.Core.Impl.CameraProviderInitRetryPolicy.Legacy.InterfaceConsts.Default.get -> AndroidX.Camera.Core.IRetryPolicy!
static AndroidX.Camera.Core.Impl.CameraProviderInitRetryPolicy.Legacy.InterfaceConsts.Never.get -> AndroidX.Camera.Core.IRetryPolicy!
static AndroidX.Camera.Core.Impl.CameraProviderInitRetryPolicy.Legacy.InterfaceConsts.RetryUnavailableCamera.get -> AndroidX.Camera.Core.IRetryPolicy!
static AndroidX.Camera.Core.Impl.CameraThreadConfig.Create(Java.Util.Concurrent.IExecutor! cameraExecutor, Android.OS.Handler! schedulerHandler) -> AndroidX.Camera.Core.Impl.CameraThreadConfig!
static AndroidX.Camera.Core.Impl.CameraValidator.ValidateCameras(Android.Content.Context! context, AndroidX.Camera.Core.Impl.CameraRepository! cameraRepository, AndroidX.Camera.Core.CameraSelector? availableCamerasSelector) -> void
static AndroidX.Camera.Core.Impl.Capability.PreviewCapabilitiesImpl.From(AndroidX.Camera.Core.ICameraInfo! cameraInfo) -> AndroidX.Camera.Core.IPreviewCapabilities!
static AndroidX.Camera.Core.Impl.CaptureConfig.Builder.CreateFrom(AndroidX.Camera.Core.Impl.IUseCaseConfig! config) -> AndroidX.Camera.Core.Impl.CaptureConfig.Builder!
static AndroidX.Camera.Core.Impl.CaptureConfig.Builder.From(AndroidX.Camera.Core.Impl.CaptureConfig! base) -> AndroidX.Camera.Core.Impl.CaptureConfig.Builder!
static AndroidX.Camera.Core.Impl.CaptureConfig.DefaultEmptyCaptureConfig() -> AndroidX.Camera.Core.Impl.CaptureConfig!
static AndroidX.Camera.Core.Impl.CaptureConfig.OptionJpegQuality.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.CaptureConfig.OptionRotation.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.Compat.EncoderProfilesProxyCompat.From(Android.Media.CamcorderProfile! camcorderProfile) -> AndroidX.Camera.Core.Impl.IEncoderProfilesProxy!
static AndroidX.Camera.Core.Impl.Compat.EncoderProfilesProxyCompat.From(Android.Media.EncoderProfiles! encoderProfiles) -> AndroidX.Camera.Core.Impl.IEncoderProfilesProxy!
static AndroidX.Camera.Core.Impl.Config.HasConflict(AndroidX.Camera.Core.Impl.ConfigOptionPriority! priority1, AndroidX.Camera.Core.Impl.ConfigOptionPriority! priority2) -> bool
static AndroidX.Camera.Core.Impl.Config.MergeConfigs(AndroidX.Camera.Core.Impl.IConfig? extendedConfig, AndroidX.Camera.Core.Impl.IConfig? baseConfig) -> AndroidX.Camera.Core.Impl.IConfig!
static AndroidX.Camera.Core.Impl.Config.MergeOptionValue(AndroidX.Camera.Core.Impl.MutableOptionsBundle! mergedConfig, AndroidX.Camera.Core.Impl.IConfig! baseConfig, AndroidX.Camera.Core.Impl.IConfig! extendedConfig, AndroidX.Camera.Core.Impl.ConfigOption! opt) -> void
static AndroidX.Camera.Core.Impl.ConfigOption.Create(string! id, Java.Lang.Class! valueClass) -> AndroidX.Camera.Core.Impl.ConfigOption!
static AndroidX.Camera.Core.Impl.ConfigOption.Create(string! id, Java.Lang.Class! valueClass, Java.Lang.Object? token) -> AndroidX.Camera.Core.Impl.ConfigOption!
static AndroidX.Camera.Core.Impl.ConfigOptionPriority.AlwaysOverride.get -> AndroidX.Camera.Core.Impl.ConfigOptionPriority?
static AndroidX.Camera.Core.Impl.ConfigOptionPriority.HighPriorityRequired.get -> AndroidX.Camera.Core.Impl.ConfigOptionPriority?
static AndroidX.Camera.Core.Impl.ConfigOptionPriority.Optional.get -> AndroidX.Camera.Core.Impl.ConfigOptionPriority?
static AndroidX.Camera.Core.Impl.ConfigOptionPriority.Required.get -> AndroidX.Camera.Core.Impl.ConfigOptionPriority?
static AndroidX.Camera.Core.Impl.ConfigOptionPriority.ValueOf(string? name) -> AndroidX.Camera.Core.Impl.ConfigOptionPriority?
static AndroidX.Camera.Core.Impl.ConfigOptionPriority.Values() -> AndroidX.Camera.Core.Impl.ConfigOptionPriority![]?
static AndroidX.Camera.Core.Impl.ConstantObservable.WithValue(Java.Lang.Object? value) -> AndroidX.Camera.Core.Impl.IObservable!
static AndroidX.Camera.Core.Impl.ConvergenceUtils.Is3AConverged(AndroidX.Camera.Core.Impl.ICameraCaptureResult! captureResult, bool isTorchAsFlash) -> bool
static AndroidX.Camera.Core.Impl.DeferrableSurface.SizeUndefined.get -> Android.Util.Size?
static AndroidX.Camera.Core.Impl.DeferrableSurfaces.DecrementAll(System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.DeferrableSurface!>! surfaceList) -> void
static AndroidX.Camera.Core.Impl.DeferrableSurfaces.IncrementAll(System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.DeferrableSurface!>! surfaceList) -> void
static AndroidX.Camera.Core.Impl.DeferrableSurfaces.SurfaceListWithTimeout(System.Collections.Generic.ICollection<AndroidX.Camera.Core.Impl.DeferrableSurface!>! deferrableSurfaces, bool removeNullSurfaces, long timeoutMillis, Java.Util.Concurrent.IExecutor! executor, Java.Util.Concurrent.IScheduledExecutorService! scheduledExecutorService) -> Google.Common.Util.Concurrent.IListenableFuture!
static AndroidX.Camera.Core.Impl.DeferrableSurfaces.TryIncrementAll(System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.DeferrableSurface!>! surfaceList) -> bool
static AndroidX.Camera.Core.Impl.DeviceProperties.Create() -> AndroidX.Camera.Core.Impl.DeviceProperties!
static AndroidX.Camera.Core.Impl.DeviceProperties.Create(string! manufacturer, string! model, int sdkVersion) -> AndroidX.Camera.Core.Impl.DeviceProperties!
static AndroidX.Camera.Core.Impl.DynamicRanges.CanResolve(AndroidX.Camera.Core.DynamicRange! dynamicRangeToTest, System.Collections.Generic.ICollection<AndroidX.Camera.Core.DynamicRange!>! fullySpecifiedDynamicRanges) -> bool
static AndroidX.Camera.Core.Impl.DynamicRanges.FindAllPossibleMatches(System.Collections.Generic.ICollection<AndroidX.Camera.Core.DynamicRange!>! dynamicRangesToTest, System.Collections.Generic.ICollection<AndroidX.Camera.Core.DynamicRange!>! fullySpecifiedDynamicRanges) -> System.Collections.Generic.ICollection<AndroidX.Camera.Core.DynamicRange!>!
static AndroidX.Camera.Core.Impl.DynamicRanges.Instance.get -> AndroidX.Camera.Core.Impl.DynamicRanges!
static AndroidX.Camera.Core.Impl.EncoderProfilesProvider.Empty.get -> AndroidX.Camera.Core.Impl.IEncoderProfilesProvider?
static AndroidX.Camera.Core.Impl.EncoderProfilesProvider.QualityHighToLow.get -> System.Collections.IList?
static AndroidX.Camera.Core.Impl.EncoderProfilesProxy.GetAudioCodecMimeType(int codec) -> string!
static AndroidX.Camera.Core.Impl.EncoderProfilesProxy.GetRequiredAudioProfile(int codec) -> int
static AndroidX.Camera.Core.Impl.EncoderProfilesProxy.GetVideoCodecMimeType(int codec) -> string!
static AndroidX.Camera.Core.Impl.EncoderProfilesProxyAudioProfileProxy.Create(int codec, string! mediaType, int bitRate, int sampleRate, int channels, int profile) -> AndroidX.Camera.Core.Impl.EncoderProfilesProxyAudioProfileProxy!
static AndroidX.Camera.Core.Impl.EncoderProfilesProxyImmutableEncoderProfilesProxy.Create(int defaultDurationSeconds, int recommendedFileFormat, System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.EncoderProfilesProxyAudioProfileProxy!>! audioProfiles, System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy!>! videoProfiles) -> AndroidX.Camera.Core.Impl.EncoderProfilesProxyImmutableEncoderProfilesProxy!
static AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy.Create(int codec, string! mediaType, int bitrate, int frameRate, int width, int height, int profile, int bitDepth, int chromaSubsampling, int hdrFormat) -> AndroidX.Camera.Core.Impl.EncoderProfilesProxyVideoProfileProxy!
static AndroidX.Camera.Core.Impl.ExtendedCameraConfigProviderStore.AddConfig(Java.Lang.Object! key, AndroidX.Camera.Core.Impl.ICameraConfigProvider! provider) -> void
static AndroidX.Camera.Core.Impl.ExtendedCameraConfigProviderStore.Clear() -> void
static AndroidX.Camera.Core.Impl.ExtendedCameraConfigProviderStore.GetConfigProvider(Java.Lang.Object! key) -> AndroidX.Camera.Core.Impl.ICameraConfigProvider!
static AndroidX.Camera.Core.Impl.ForwardingCameraControl.InterfaceConsts.DefaultEmptyInstance.get -> AndroidX.Camera.Core.Impl.ICameraControlInternal!
static AndroidX.Camera.Core.Impl.Identifier.Create(Java.Lang.Object! value) -> AndroidX.Camera.Core.Impl.Identifier!
static AndroidX.Camera.Core.Impl.ImageAnalysisConfig.OptionBackpressureStrategy.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageAnalysisConfig.OptionImageQueueDepth.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageAnalysisConfig.OptionImageReaderProxyProvider.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageAnalysisConfig.OptionOnePixelShiftEnabled.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageAnalysisConfig.OptionOutputImageFormat.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageAnalysisConfig.OptionOutputImageRotationEnabled.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageCaptureConfig.OptionBufferFormat.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageCaptureConfig.OptionCaptureBundle.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageCaptureConfig.OptionFlashMode.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageCaptureConfig.OptionFlashType.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageCaptureConfig.OptionImageCaptureMode.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageCaptureConfig.OptionImageReaderProxyProvider.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageCaptureConfig.OptionJpegCompressionQuality.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageCaptureConfig.OptionMaxCaptureStages.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageCaptureConfig.OptionOutputFormat.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageCaptureConfig.OptionPostviewEnabled.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageCaptureConfig.OptionPostviewResolutionSelector.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageCaptureConfig.OptionScreenFlash.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageCaptureConfig.OptionUseSoftwareJpegEncoder.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageInputConfig.OptionInputDynamicRange.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageInputConfig.OptionInputFormat.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageOutputConfig.OptionAppTargetRotation.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageOutputConfig.OptionCustomOrderedResolutions.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageOutputConfig.OptionDefaultResolution.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageOutputConfig.OptionMaxResolution.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageOutputConfig.OptionMirrorMode.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageOutputConfig.OptionResolutionSelector.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageOutputConfig.OptionSupportedResolutions.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageOutputConfig.OptionTargetAspectRatio.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageOutputConfig.OptionTargetResolution.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageOutputConfig.OptionTargetRotation.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.ImageOutputConfig.ValidateConfig(AndroidX.Camera.Core.Impl.IImageOutputConfig! config) -> void
static AndroidX.Camera.Core.Impl.LensFacingCameraFilter.InterfaceConsts.DefaultId.get -> AndroidX.Camera.Core.Impl.Identifier?
static AndroidX.Camera.Core.Impl.MutableOptionsBundle.Create() -> AndroidX.Camera.Core.Impl.MutableOptionsBundle!
static AndroidX.Camera.Core.Impl.MutableOptionsBundle.From(AndroidX.Camera.Core.Impl.IConfig! otherConfig) -> AndroidX.Camera.Core.Impl.MutableOptionsBundle!
static AndroidX.Camera.Core.Impl.MutableStateObservable.WithInitialError(Java.Lang.Throwable! initialError) -> AndroidX.Camera.Core.Impl.MutableStateObservable!
static AndroidX.Camera.Core.Impl.MutableStateObservable.WithInitialState(Java.Lang.Object? initialState) -> AndroidX.Camera.Core.Impl.MutableStateObservable!
static AndroidX.Camera.Core.Impl.MutableTagBundle.Create() -> AndroidX.Camera.Core.Impl.MutableTagBundle!
static AndroidX.Camera.Core.Impl.MutableTagBundle.From(AndroidX.Camera.Core.Impl.TagBundle! otherTagBundle) -> AndroidX.Camera.Core.Impl.MutableTagBundle!
static AndroidX.Camera.Core.Impl.OptionsBundle.EmptyBundle() -> AndroidX.Camera.Core.Impl.OptionsBundle!
static AndroidX.Camera.Core.Impl.OptionsBundle.From(AndroidX.Camera.Core.Impl.IConfig! otherConfig) -> AndroidX.Camera.Core.Impl.OptionsBundle!
static AndroidX.Camera.Core.Impl.OptionsBundle.IdCompare.get -> Java.Util.IComparator?
static AndroidX.Camera.Core.Impl.OutputSurface.Create(Android.Views.Surface! surface, Android.Util.Size! size, int imageFormat) -> AndroidX.Camera.Core.Impl.OutputSurface!
static AndroidX.Camera.Core.Impl.OutputSurfaceConfiguration.Create(AndroidX.Camera.Core.Impl.OutputSurface! previewOutputSurface, AndroidX.Camera.Core.Impl.OutputSurface! imageCaptureOutputSurface, AndroidX.Camera.Core.Impl.OutputSurface? imageAnalysisOutputSurface, AndroidX.Camera.Core.Impl.OutputSurface? postviewOutputSurface) -> AndroidX.Camera.Core.Impl.OutputSurfaceConfiguration!
static AndroidX.Camera.Core.Impl.QuirkSettings.WithAllQuirksDisabled() -> AndroidX.Camera.Core.Impl.QuirkSettings!
static AndroidX.Camera.Core.Impl.QuirkSettings.WithDefaultBehavior() -> AndroidX.Camera.Core.Impl.QuirkSettings!
static AndroidX.Camera.Core.Impl.QuirkSettings.WithQuirksForceDisabled(System.Collections.Generic.ICollection<Java.Lang.Class!>! quirks) -> AndroidX.Camera.Core.Impl.QuirkSettings!
static AndroidX.Camera.Core.Impl.QuirkSettings.WithQuirksForceEnabled(System.Collections.Generic.ICollection<Java.Lang.Class!>! quirks) -> AndroidX.Camera.Core.Impl.QuirkSettings!
static AndroidX.Camera.Core.Impl.QuirkSettingsHolder.Default.get -> AndroidX.Camera.Core.Impl.QuirkSettings?
static AndroidX.Camera.Core.Impl.QuirkSettingsHolder.Instance() -> AndroidX.Camera.Core.Impl.QuirkSettingsHolder!
static AndroidX.Camera.Core.Impl.Quirks.ToString(AndroidX.Camera.Core.Impl.Quirks! quirks) -> string!
static AndroidX.Camera.Core.Impl.SessionConfig.Builder.CreateFrom(AndroidX.Camera.Core.Impl.IUseCaseConfig! config, Android.Util.Size! resolution) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
static AndroidX.Camera.Core.Impl.SessionConfig.DefaultEmptySessionConfig() -> AndroidX.Camera.Core.Impl.SessionConfig!
static AndroidX.Camera.Core.Impl.SessionConfig.GetHigherPriorityTemplateType(int type1, int type2) -> int
static AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.InvokeBuilder(AndroidX.Camera.Core.Impl.DeferrableSurface! surface) -> AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig.Builder!
static AndroidX.Camera.Core.Impl.SessionConfig.SessionError.SessionErrorSurfaceNeedsReset.get -> AndroidX.Camera.Core.Impl.SessionConfig.SessionError?
static AndroidX.Camera.Core.Impl.SessionConfig.SessionError.SessionErrorUnknown.get -> AndroidX.Camera.Core.Impl.SessionConfig.SessionError?
static AndroidX.Camera.Core.Impl.SessionConfig.SessionError.ValueOf(string? name) -> AndroidX.Camera.Core.Impl.SessionConfig.SessionError?
static AndroidX.Camera.Core.Impl.SessionConfig.SessionError.Values() -> AndroidX.Camera.Core.Impl.SessionConfig.SessionError![]?
static AndroidX.Camera.Core.Impl.StreamSpec.FrameRateRangeUnspecified.get -> Android.Util.Range?
static AndroidX.Camera.Core.Impl.StreamSpec.InvokeBuilder(Android.Util.Size! resolution) -> AndroidX.Camera.Core.Impl.StreamSpec.Builder!
static AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize.Maximum.get -> AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize?
static AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize.NotSupport.get -> AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize?
static AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize.Preview.get -> AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize?
static AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize.Record.get -> AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize?
static AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize.S1440p.get -> AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize?
static AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize.S720p.get -> AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize?
static AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize.UltraMaximum.get -> AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize?
static AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize.ValueOf(string? name) -> AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize?
static AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize.Values() -> AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize![]?
static AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize.Vga.get -> AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize?
static AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigType.Jpeg.get -> AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigType?
static AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigType.JpegR.get -> AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigType?
static AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigType.Priv.get -> AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigType?
static AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigType.Raw.get -> AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigType?
static AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigType.ValueOf(string? name) -> AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigType?
static AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigType.Values() -> AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigType![]?
static AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigType.Yuv.get -> AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigType?
static AndroidX.Camera.Core.Impl.SurfaceConfig.Create(AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigType! type, AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize! size) -> AndroidX.Camera.Core.Impl.SurfaceConfig!
static AndroidX.Camera.Core.Impl.SurfaceConfig.Create(AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigType! type, AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigSize! size, long streamUseCase) -> AndroidX.Camera.Core.Impl.SurfaceConfig!
static AndroidX.Camera.Core.Impl.SurfaceConfig.GetConfigType(int imageFormat) -> AndroidX.Camera.Core.Impl.SurfaceConfig.ConfigType!
static AndroidX.Camera.Core.Impl.SurfaceConfig.TransformSurfaceConfig(int cameraMode, int imageFormat, Android.Util.Size! size, AndroidX.Camera.Core.Impl.SurfaceSizeDefinition! surfaceSizeDefinition) -> AndroidX.Camera.Core.Impl.SurfaceConfig!
static AndroidX.Camera.Core.Impl.SurfaceSizeDefinition.Create(Android.Util.Size! analysisSize, System.Collections.Generic.IDictionary<Java.Lang.Integer!, Android.Util.Size!>! s720pSizeMap, Android.Util.Size! previewSize, System.Collections.Generic.IDictionary<Java.Lang.Integer!, Android.Util.Size!>! s1440pSizeMap, Android.Util.Size! recordSize, System.Collections.Generic.IDictionary<Java.Lang.Integer!, Android.Util.Size!>! maximumSizeMap, System.Collections.Generic.IDictionary<Java.Lang.Integer!, Android.Util.Size!>! ultraMaximumSizeMap) -> AndroidX.Camera.Core.Impl.SurfaceSizeDefinition!
static AndroidX.Camera.Core.Impl.TagBundle.Create(Android.Util.Pair! source) -> AndroidX.Camera.Core.Impl.TagBundle!
static AndroidX.Camera.Core.Impl.TagBundle.EmptyBundle() -> AndroidX.Camera.Core.Impl.TagBundle!
static AndroidX.Camera.Core.Impl.TagBundle.From(AndroidX.Camera.Core.Impl.TagBundle! otherTagBundle) -> AndroidX.Camera.Core.Impl.TagBundle!
static AndroidX.Camera.Core.Impl.Timebase.Realtime.get -> AndroidX.Camera.Core.Impl.Timebase?
static AndroidX.Camera.Core.Impl.Timebase.Uptime.get -> AndroidX.Camera.Core.Impl.Timebase?
static AndroidX.Camera.Core.Impl.Timebase.ValueOf(string? name) -> AndroidX.Camera.Core.Impl.Timebase?
static AndroidX.Camera.Core.Impl.Timebase.Values() -> AndroidX.Camera.Core.Impl.Timebase![]?
static AndroidX.Camera.Core.Impl.TimeoutRetryPolicy.InterfaceConsts.Default.get -> AndroidX.Camera.Core.IRetryPolicy!
static AndroidX.Camera.Core.Impl.TimeoutRetryPolicy.InterfaceConsts.Never.get -> AndroidX.Camera.Core.IRetryPolicy!
static AndroidX.Camera.Core.Impl.TimeoutRetryPolicy.InterfaceConsts.RetryUnavailableCamera.get -> AndroidX.Camera.Core.IRetryPolicy!
static AndroidX.Camera.Core.Impl.UseCaseConfig.OptionCaptureConfigUnpacker.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.UseCaseConfig.OptionCaptureType.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.UseCaseConfig.OptionDefaultCaptureConfig.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.UseCaseConfig.OptionDefaultSessionConfig.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.UseCaseConfig.OptionHighResolutionDisabled.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.UseCaseConfig.OptionInputDynamicRange.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.UseCaseConfig.OptionInputFormat.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.UseCaseConfig.OptionPreviewStabilizationMode.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.UseCaseConfig.OptionSessionConfigUnpacker.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.UseCaseConfig.OptionSurfaceOccupancyPriority.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.UseCaseConfig.OptionTargetClass.get -> AndroidX.Camera.Core.Impl.ConfigOption!
static AndroidX.Camera.Core.Impl.UseCaseConfig.OptionTargetFrameRate.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.UseCaseConfig.OptionTargetName.get -> AndroidX.Camera.Core.Impl.ConfigOption!
static AndroidX.Camera.Core.Impl.UseCaseConfig.OptionVideoStabilizationMode.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.UseCaseConfig.OptionZslDisabled.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Impl.UseCaseConfigFactory.EmptyInstance.get -> AndroidX.Camera.Core.Impl.IUseCaseConfigFactory?
static AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType.ImageAnalysis.get -> AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType?
static AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType.ImageCapture.get -> AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType?
static AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType.MeteringRepeating.get -> AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType?
static AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType.Preview.get -> AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType?
static AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType.StreamSharing.get -> AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType?
static AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType.ValueOf(string? name) -> AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType?
static AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType.Values() -> AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType![]?
static AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType.VideoCapture.get -> AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType?
static AndroidX.Camera.Core.Impl.Utils.AspectRatioUtil.AspectRatio169.get -> Android.Util.Rational?
static AndroidX.Camera.Core.Impl.Utils.AspectRatioUtil.AspectRatio34.get -> Android.Util.Rational?
static AndroidX.Camera.Core.Impl.Utils.AspectRatioUtil.AspectRatio43.get -> Android.Util.Rational?
static AndroidX.Camera.Core.Impl.Utils.AspectRatioUtil.AspectRatio916.get -> Android.Util.Rational?
static AndroidX.Camera.Core.Impl.Utils.AspectRatioUtil.HasMatchingAspectRatio(Android.Util.Size! resolution, Android.Util.Rational? aspectRatio) -> bool
static AndroidX.Camera.Core.Impl.Utils.AspectRatioUtil.HasMatchingAspectRatio(Android.Util.Size! resolution, Android.Util.Rational? aspectRatio, Android.Util.Size! mod16ResolutionLowerBound) -> bool
static AndroidX.Camera.Core.Impl.Utils.CameraOrientationUtil.DegreesToSurfaceRotation(int degrees) -> int
static AndroidX.Camera.Core.Impl.Utils.CameraOrientationUtil.GetRelativeImageRotation(int destRotationDegrees, int sourceRotationDegrees, bool isOppositeFacing) -> int
static AndroidX.Camera.Core.Impl.Utils.CameraOrientationUtil.SurfaceRotationToDegrees(int rotation) -> int
static AndroidX.Camera.Core.Impl.Utils.CloseGuardHelper.Create() -> AndroidX.Camera.Core.Impl.Utils.CloseGuardHelper!
static AndroidX.Camera.Core.Impl.Utils.ContextUtil.GetApplicationContext(Android.Content.Context! context) -> Android.Content.Context!
static AndroidX.Camera.Core.Impl.Utils.ContextUtil.GetApplicationFromContext(Android.Content.Context! context) -> Android.App.Application?
static AndroidX.Camera.Core.Impl.Utils.Executors.CameraXExecutors.AudioExecutor() -> Java.Util.Concurrent.IExecutor!
static AndroidX.Camera.Core.Impl.Utils.Executors.CameraXExecutors.DirectExecutor() -> Java.Util.Concurrent.IExecutor!
static AndroidX.Camera.Core.Impl.Utils.Executors.CameraXExecutors.HighPriorityExecutor() -> Java.Util.Concurrent.IExecutor!
static AndroidX.Camera.Core.Impl.Utils.Executors.CameraXExecutors.IoExecutor() -> Java.Util.Concurrent.IExecutor!
static AndroidX.Camera.Core.Impl.Utils.Executors.CameraXExecutors.IsSequentialExecutor(Java.Util.Concurrent.IExecutor! executor) -> bool
static AndroidX.Camera.Core.Impl.Utils.Executors.CameraXExecutors.MainThreadExecutor() -> Java.Util.Concurrent.IScheduledExecutorService!
static AndroidX.Camera.Core.Impl.Utils.Executors.CameraXExecutors.MyLooperExecutor() -> Java.Util.Concurrent.IScheduledExecutorService!
static AndroidX.Camera.Core.Impl.Utils.Executors.CameraXExecutors.NewHandlerExecutor(Android.OS.Handler! handler) -> Java.Util.Concurrent.IScheduledExecutorService!
static AndroidX.Camera.Core.Impl.Utils.Executors.CameraXExecutors.NewSequentialExecutor(Java.Util.Concurrent.IExecutor! delegate) -> Java.Util.Concurrent.IExecutor!
static AndroidX.Camera.Core.Impl.Utils.Exif.AllExifTags.get -> System.Collections.Generic.IList<string!>!
static AndroidX.Camera.Core.Impl.Utils.Exif.CreateFromFile(Java.IO.File! file) -> AndroidX.Camera.Core.Impl.Utils.Exif!
static AndroidX.Camera.Core.Impl.Utils.Exif.CreateFromFileString(string! filePath) -> AndroidX.Camera.Core.Impl.Utils.Exif!
static AndroidX.Camera.Core.Impl.Utils.Exif.CreateFromImageProxy(AndroidX.Camera.Core.IImageProxy! imageProxy) -> AndroidX.Camera.Core.Impl.Utils.Exif!
static AndroidX.Camera.Core.Impl.Utils.Exif.CreateFromInputStream(System.IO.Stream! is) -> AndroidX.Camera.Core.Impl.Utils.Exif!
static AndroidX.Camera.Core.Impl.Utils.ExifData.BuilderForDevice() -> AndroidX.Camera.Core.Impl.Utils.ExifData.Builder!
static AndroidX.Camera.Core.Impl.Utils.ExifData.Create(AndroidX.Camera.Core.IImageProxy! imageProxy, int rotationDegrees) -> AndroidX.Camera.Core.Impl.Utils.ExifData!
static AndroidX.Camera.Core.Impl.Utils.ExifData.WhiteBalanceMode.Auto.get -> AndroidX.Camera.Core.Impl.Utils.ExifData.WhiteBalanceMode?
static AndroidX.Camera.Core.Impl.Utils.ExifData.WhiteBalanceMode.Manual.get -> AndroidX.Camera.Core.Impl.Utils.ExifData.WhiteBalanceMode?
static AndroidX.Camera.Core.Impl.Utils.ExifData.WhiteBalanceMode.ValueOf(string? name) -> AndroidX.Camera.Core.Impl.Utils.ExifData.WhiteBalanceMode?
static AndroidX.Camera.Core.Impl.Utils.ExifData.WhiteBalanceMode.Values() -> AndroidX.Camera.Core.Impl.Utils.ExifData.WhiteBalanceMode![]?
static AndroidX.Camera.Core.Impl.Utils.Futures.FutureChain.From(Google.Common.Util.Concurrent.IListenableFuture! future) -> AndroidX.Camera.Core.Impl.Utils.Futures.FutureChain!
static AndroidX.Camera.Core.Impl.Utils.Futures.Futures.AddCallback(Google.Common.Util.Concurrent.IListenableFuture! future, AndroidX.Camera.Core.Impl.Utils.Futures.IFutureCallback! callback, Java.Util.Concurrent.IExecutor! executor) -> void
static AndroidX.Camera.Core.Impl.Utils.Futures.Futures.AllAsList(System.Collections.Generic.ICollection<Google.Common.Util.Concurrent.IListenableFuture!>! futures) -> Google.Common.Util.Concurrent.IListenableFuture!
static AndroidX.Camera.Core.Impl.Utils.Futures.Futures.GetDone(Java.Util.Concurrent.IFuture! future) -> Java.Lang.Object?
static AndroidX.Camera.Core.Impl.Utils.Futures.Futures.GetUninterruptibly(Java.Util.Concurrent.IFuture! future) -> Java.Lang.Object?
static AndroidX.Camera.Core.Impl.Utils.Futures.Futures.ImmediateFailedFuture(Java.Lang.Throwable! cause) -> Google.Common.Util.Concurrent.IListenableFuture!
static AndroidX.Camera.Core.Impl.Utils.Futures.Futures.ImmediateFailedScheduledFuture(Java.Lang.Throwable! cause) -> Java.Util.Concurrent.IScheduledFuture!
static AndroidX.Camera.Core.Impl.Utils.Futures.Futures.ImmediateFuture(Java.Lang.Object? value) -> Google.Common.Util.Concurrent.IListenableFuture!
static AndroidX.Camera.Core.Impl.Utils.Futures.Futures.MakeTimeoutFuture(long timeoutMillis, Java.Util.Concurrent.IScheduledExecutorService! scheduledExecutor, Google.Common.Util.Concurrent.IListenableFuture! input) -> Google.Common.Util.Concurrent.IListenableFuture!
static AndroidX.Camera.Core.Impl.Utils.Futures.Futures.MakeTimeoutFuture(long timeoutMillis, Java.Util.Concurrent.IScheduledExecutorService! scheduledExecutor, Java.Lang.Object? defaultValue, bool cancelInputAtTimeout, Google.Common.Util.Concurrent.IListenableFuture! input) -> Google.Common.Util.Concurrent.IListenableFuture!
static AndroidX.Camera.Core.Impl.Utils.Futures.Futures.NonCancellationPropagating(Google.Common.Util.Concurrent.IListenableFuture! future) -> Google.Common.Util.Concurrent.IListenableFuture!
static AndroidX.Camera.Core.Impl.Utils.Futures.Futures.Propagate(Google.Common.Util.Concurrent.IListenableFuture! input, AndroidX.Concurrent.Futures.CallbackToFutureAdapter.Completer! completer) -> void
static AndroidX.Camera.Core.Impl.Utils.Futures.Futures.PropagateTransform(Google.Common.Util.Concurrent.IListenableFuture! input, AndroidX.Arch.Core.Util.IFunction! function, AndroidX.Concurrent.Futures.CallbackToFutureAdapter.Completer! completer, Java.Util.Concurrent.IExecutor! executor) -> void
static AndroidX.Camera.Core.Impl.Utils.Futures.Futures.SuccessfulAsList(System.Collections.Generic.ICollection<Google.Common.Util.Concurrent.IListenableFuture!>! futures) -> Google.Common.Util.Concurrent.IListenableFuture!
static AndroidX.Camera.Core.Impl.Utils.Futures.Futures.Transform(Google.Common.Util.Concurrent.IListenableFuture! input, AndroidX.Arch.Core.Util.IFunction! function, Java.Util.Concurrent.IExecutor! executor) -> Google.Common.Util.Concurrent.IListenableFuture!
static AndroidX.Camera.Core.Impl.Utils.Futures.Futures.TransformAsync(Google.Common.Util.Concurrent.IListenableFuture! input, AndroidX.Camera.Core.Impl.Utils.Futures.IAsyncFunction! function, Java.Util.Concurrent.IExecutor! executor) -> Google.Common.Util.Concurrent.IListenableFuture!
static AndroidX.Camera.Core.Impl.Utils.Futures.Futures.TransformAsyncOnCompletion(Google.Common.Util.Concurrent.IListenableFuture! input) -> Google.Common.Util.Concurrent.IListenableFuture!
static AndroidX.Camera.Core.Impl.Utils.MainThreadAsyncHandler.Instance.get -> Android.OS.Handler!
static AndroidX.Camera.Core.Impl.Utils.MatrixExt.PostRotate(float[]! matrix, float degrees, float px, float py) -> void
static AndroidX.Camera.Core.Impl.Utils.MatrixExt.PreRotate(float[]! matrix, float degrees, float px, float py) -> void
static AndroidX.Camera.Core.Impl.Utils.MatrixExt.PreVerticalFlip(float[]! matrix, float y) -> void
static AndroidX.Camera.Core.Impl.Utils.MatrixExt.SetRotate(float[]! matrix, float degrees, float px, float py) -> void
static AndroidX.Camera.Core.Impl.Utils.MatrixExt.ToString(float[]! matrix, int offset) -> string!
static AndroidX.Camera.Core.Impl.Utils.Optional.Absent() -> AndroidX.Camera.Core.Impl.Utils.Optional!
static AndroidX.Camera.Core.Impl.Utils.Optional.FromNullable(Java.Lang.Object? nullableReference) -> AndroidX.Camera.Core.Impl.Utils.Optional!
static AndroidX.Camera.Core.Impl.Utils.Optional.Of(Java.Lang.Object! reference) -> AndroidX.Camera.Core.Impl.Utils.Optional!
static AndroidX.Camera.Core.Impl.Utils.ResolutionSelectorUtil.OverrideResolutionSelectors(AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector? baseResolutionSelector, AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector? resolutionSelectorToOverride) -> AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector?
static AndroidX.Camera.Core.Impl.Utils.SessionProcessorUtil.GetModifiedFocusMeteringAction(AndroidX.Camera.Core.Impl.ISessionProcessor? sessionProcessor, AndroidX.Camera.Core.FocusMeteringAction! action) -> AndroidX.Camera.Core.FocusMeteringAction?
static AndroidX.Camera.Core.Impl.Utils.SessionProcessorUtil.IsOperationSupported(AndroidX.Camera.Core.Impl.ISessionProcessor? sessionProcessor, params int[]! operations) -> bool
static AndroidX.Camera.Core.Impl.Utils.SurfaceUtil.GetSurfaceInfo(Android.Views.Surface! surface) -> AndroidX.Camera.Core.Impl.Utils.SurfaceUtil.SurfaceInfo!
static AndroidX.Camera.Core.Impl.Utils.Threads.CheckBackgroundThread() -> void
static AndroidX.Camera.Core.Impl.Utils.Threads.CheckMainThread() -> void
static AndroidX.Camera.Core.Impl.Utils.Threads.IsBackgroundThread.get -> bool
static AndroidX.Camera.Core.Impl.Utils.Threads.IsMainThread.get -> bool
static AndroidX.Camera.Core.Impl.Utils.Threads.RunOnMain(Java.Lang.IRunnable! runnable) -> void
static AndroidX.Camera.Core.Impl.Utils.Threads.RunOnMainSync(Java.Lang.IRunnable! runnable) -> void
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.CalculateSignedAngle(float v1x, float v1y, float v2x, float v2y) -> float
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.GetExifTransform(int exifOrientation, int width, int height) -> Android.Graphics.Matrix!
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.GetNormalizedToBuffer(Android.Graphics.Rect! viewPortRect) -> Android.Graphics.Matrix!
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.GetNormalizedToBuffer(Android.Graphics.RectF! viewPortRect) -> Android.Graphics.Matrix!
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.GetRectToRect(Android.Graphics.RectF! source, Android.Graphics.RectF! target, int rotationDegrees) -> Android.Graphics.Matrix!
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.GetRectToRect(Android.Graphics.RectF! source, Android.Graphics.RectF! target, int rotationDegrees, bool mirroring) -> Android.Graphics.Matrix!
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.GetRotatedSize(Android.Graphics.Rect! cropRect, int rotationDegrees) -> Android.Util.Size!
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.GetRotationDegrees(Android.Graphics.Matrix! matrix) -> int
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.HasCropping(Android.Graphics.Rect! cropRect, Android.Util.Size! size) -> bool
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.Is90or270(int rotationDegrees) -> bool
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.IsAspectRatioMatchingWithRoundingError(Android.Util.Size! size1, Android.Util.Size! size2) -> bool
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.IsAspectRatioMatchingWithRoundingError(Android.Util.Size! size1, bool isAccurate1, Android.Util.Size! size2, bool isAccurate2) -> bool
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.IsMirrored(Android.Graphics.Matrix! matrix) -> bool
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.Max(float value1, float value2, float value3, float value4) -> float
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.Min(float value1, float value2, float value3, float value4) -> float
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.NormalizedRect.get -> Android.Graphics.RectF?
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.RectToSize(Android.Graphics.Rect! rect) -> Android.Util.Size!
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.RectToString(Android.Graphics.Rect! rect) -> string!
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.RectToVertices(Android.Graphics.RectF! rectF) -> float[]!
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.ReverseSize(Android.Util.Size! size) -> Android.Util.Size!
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.ReverseSizeF(Android.Util.SizeF! sizeF) -> Android.Util.SizeF!
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.RotateRect(Android.Graphics.RectF! rect, int rotationDegrees) -> Android.Graphics.RectF!
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.RotateSize(Android.Util.Size! size, int rotationDegrees) -> Android.Util.Size!
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.SizeToRect(Android.Util.Size! size) -> Android.Graphics.Rect!
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.SizeToRect(Android.Util.Size! size, int left, int top) -> Android.Graphics.Rect!
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.SizeToRectF(Android.Util.Size! size) -> Android.Graphics.RectF!
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.SizeToRectF(Android.Util.Size! size, int left, int top) -> Android.Graphics.RectF!
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.SizeToVertices(Android.Util.Size! size) -> float[]!
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.UpdateSensorToBufferTransform(Android.Graphics.Matrix! original, Android.Graphics.Rect! cropRect) -> Android.Graphics.Matrix!
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.VerticesToRect(float[]! vertices) -> Android.Graphics.RectF!
static AndroidX.Camera.Core.Impl.Utils.TransformUtils.Within360(int degrees) -> int
static AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraId.Create(string! cameraIdString, AndroidX.Camera.Core.Impl.Identifier! cameraConfigId) -> AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraId!
static AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.GenerateCameraId(AndroidX.Camera.Core.Impl.RestrictedCameraInfo! primaryCameraInfo, AndroidX.Camera.Core.Impl.RestrictedCameraInfo? secondaryCameraInfo) -> AndroidX.Camera.Core.Internal.CameraUseCaseAdapter.CameraId!
static AndroidX.Camera.Core.Internal.Compat.Quirk.DeviceQuirks.All.get -> AndroidX.Camera.Core.Impl.Quirks!
static AndroidX.Camera.Core.Internal.Compat.Quirk.DeviceQuirks.Get(Java.Lang.Class! quirkClass) -> Java.Lang.Object?
static AndroidX.Camera.Core.Internal.Compat.Quirk.SurfaceProcessingQuirk.WorkaroundBySurfaceProcessing(AndroidX.Camera.Core.Impl.Quirks! quirks) -> bool
static AndroidX.Camera.Core.Internal.Compat.Workaround.InvalidJpegDataParser.GetJfifEoiMarkEndPosition(byte[]! bytes) -> int
static AndroidX.Camera.Core.Internal.ImmutableZoomState.Create(AndroidX.Camera.Core.IZoomState! zoomState) -> AndroidX.Camera.Core.IZoomState!
static AndroidX.Camera.Core.Internal.ImmutableZoomState.Create(float zoomRatio, float maxZoomRatio, float minZoomRatio, float linearZoom) -> AndroidX.Camera.Core.IZoomState!
static AndroidX.Camera.Core.Internal.IoConfig.OptionIoExecutor.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Internal.ScreenFlashWrapper.From(AndroidX.Camera.Core.ImageCapture.IScreenFlash? screenFlash) -> AndroidX.Camera.Core.Internal.ScreenFlashWrapper!
static AndroidX.Camera.Core.Internal.SupportedOutputSizesSorter.SortSupportedOutputSizesByResolutionSelector(AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector! resolutionSelector, System.Collections.Generic.IList<Android.Util.Size!>! candidateSizes, Android.Util.Size? maxResolution, int targetRotation, Android.Util.Rational! fullFovRatio, int sensorOrientation, int lensFacing) -> System.Collections.Generic.IList<Android.Util.Size!>!
static AndroidX.Camera.Core.Internal.TargetConfig.OptionTargetClass.get -> AndroidX.Camera.Core.Impl.ConfigOption!
static AndroidX.Camera.Core.Internal.TargetConfig.OptionTargetName.get -> AndroidX.Camera.Core.Impl.ConfigOption!
static AndroidX.Camera.Core.Internal.ThreadConfig.OptionBackgroundExecutor.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.CodecFailedException.FailureType.DecodeFailed.get -> AndroidX.Camera.Core.Internal.Utils.ImageUtil.CodecFailedException.FailureType?
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.CodecFailedException.FailureType.EncodeFailed.get -> AndroidX.Camera.Core.Internal.Utils.ImageUtil.CodecFailedException.FailureType?
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.CodecFailedException.FailureType.Unknown.get -> AndroidX.Camera.Core.Internal.Utils.ImageUtil.CodecFailedException.FailureType?
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.CodecFailedException.FailureType.ValueOf(string? name) -> AndroidX.Camera.Core.Internal.Utils.ImageUtil.CodecFailedException.FailureType?
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.CodecFailedException.FailureType.Values() -> AndroidX.Camera.Core.Internal.Utils.ImageUtil.CodecFailedException.FailureType![]?
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.ComputeCropRectFromAspectRatio(Android.Util.Size! sourceSize, Android.Util.Rational! aspectRatio) -> Android.Graphics.Rect?
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.ComputeCropRectFromDispatchInfo(Android.Graphics.Rect! surfaceCropRect, int surfaceToOutputDegrees, Android.Util.Size! dispatchResolution, int dispatchToOutputDegrees) -> Android.Graphics.Rect!
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.CreateBitmapFromImageProxy(AndroidX.Camera.Core.IImageProxy! imageProxy) -> Android.Graphics.Bitmap!
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.CreateBitmapFromPlane(AndroidX.Camera.Core.IImageProxyPlaneProxy![]! planes, int width, int height) -> Android.Graphics.Bitmap!
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.CreateDirectByteBuffer(Android.Graphics.Bitmap! bitmap) -> Java.Nio.ByteBuffer!
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.GetRotatedAspectRatio(int rotationDegrees, Android.Util.Rational! aspectRatio) -> Android.Util.Rational!
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.IsAspectRatioValid(Android.Util.Rational? aspectRatio) -> bool
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.IsAspectRatioValid(Android.Util.Size! sourceSize, Android.Util.Rational? aspectRatio) -> bool
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.IsJpegFormats(int imageFormat) -> bool
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.JpegImageToJpegByteArray(AndroidX.Camera.Core.IImageProxy! image) -> byte[]!
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.JpegImageToJpegByteArray(AndroidX.Camera.Core.IImageProxy! image, Android.Graphics.Rect! cropRect, int jpegQuality) -> byte[]!
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.Min(float value1, float value2, float value3, float value4) -> float
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.RotateBitmap(Android.Graphics.Bitmap! bitmap, int rotationDegrees) -> Android.Graphics.Bitmap!
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.ShouldCropImage(AndroidX.Camera.Core.IImageProxy! image) -> bool
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.ShouldCropImage(int sourceWidth, int sourceHeight, int cropRectWidth, int cropRectHeight) -> bool
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.SizeToVertexes(Android.Util.Size! size) -> float[]!
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.YuvImageToJpegByteArray(AndroidX.Camera.Core.IImageProxy! image, Android.Graphics.Rect? cropRect, int jpegQuality, int rotationDegrees) -> byte[]!
static AndroidX.Camera.Core.Internal.Utils.ImageUtil.Yuv_420_888toNv21(AndroidX.Camera.Core.IImageProxy! image) -> byte[]!
static AndroidX.Camera.Core.Internal.Utils.ImageWriterCompat.Close(Android.Media.ImageWriter! imageWriter) -> void
static AndroidX.Camera.Core.Internal.Utils.ImageWriterCompat.DequeueInputImage(Android.Media.ImageWriter! imageWriter) -> Android.Media.Image!
static AndroidX.Camera.Core.Internal.Utils.ImageWriterCompat.NewInstance(Android.Views.Surface! surface, int maxImages) -> Android.Media.ImageWriter!
static AndroidX.Camera.Core.Internal.Utils.ImageWriterCompat.NewInstance(Android.Views.Surface! surface, int maxImages, int format) -> Android.Media.ImageWriter!
static AndroidX.Camera.Core.Internal.Utils.ImageWriterCompat.QueueInputImage(Android.Media.ImageWriter! imageWriter, Android.Media.Image! image) -> void
static AndroidX.Camera.Core.Internal.Utils.MediaActionSoundCompat.MustPlayShutterSound() -> bool
static AndroidX.Camera.Core.Internal.Utils.SizeUtil.FindNearestHigherFor(Android.Util.Size! size, Java.Util.TreeMap! areaSortedSizeMap) -> Java.Lang.Object?
static AndroidX.Camera.Core.Internal.Utils.SizeUtil.GetArea(Android.Util.Size! size) -> int
static AndroidX.Camera.Core.Internal.Utils.SizeUtil.GetArea(int width, int height) -> int
static AndroidX.Camera.Core.Internal.Utils.SizeUtil.GetMaxSize(System.Collections.Generic.IList<Android.Util.Size!>! sizeList) -> Android.Util.Size?
static AndroidX.Camera.Core.Internal.Utils.SizeUtil.IsLongerInAnyEdge(Android.Util.Size! sourceSize, Android.Util.Size! targetSize) -> bool
static AndroidX.Camera.Core.Internal.Utils.SizeUtil.IsSmallerByArea(Android.Util.Size! sourceSize, Android.Util.Size! targetSize) -> bool
static AndroidX.Camera.Core.Internal.Utils.SizeUtil.Resolution1080p.get -> Android.Util.Size?
static AndroidX.Camera.Core.Internal.Utils.SizeUtil.Resolution1440p.get -> Android.Util.Size?
static AndroidX.Camera.Core.Internal.Utils.SizeUtil.Resolution480p.get -> Android.Util.Size?
static AndroidX.Camera.Core.Internal.Utils.SizeUtil.Resolution720p.get -> Android.Util.Size?
static AndroidX.Camera.Core.Internal.Utils.SizeUtil.ResolutionQvga.get -> Android.Util.Size?
static AndroidX.Camera.Core.Internal.Utils.SizeUtil.ResolutionVga.get -> Android.Util.Size?
static AndroidX.Camera.Core.Internal.Utils.SizeUtil.ResolutionZero.get -> Android.Util.Size?
static AndroidX.Camera.Core.Internal.Utils.UseCaseConfigUtil.UpdateTargetRotationAndRelatedConfigs(AndroidX.Camera.Core.Impl.IUseCaseConfigBuilder! builder, int newRotation) -> void
static AndroidX.Camera.Core.Internal.Utils.VideoUtil.GetAbsolutePathFromUri(Android.Content.ContentResolver! resolver, Android.Net.Uri! contentUri) -> string?
static AndroidX.Camera.Core.Internal.ViewPorts.CalculateViewPortRects(Android.Graphics.Rect! fullSensorRect, bool isFrontCamera, Android.Util.Rational! viewPortAspectRatio, int outputRotationDegrees, int scaleType, int layoutDirection, System.Collections.Generic.IDictionary<AndroidX.Camera.Core.UseCase!, AndroidX.Camera.Core.Impl.StreamSpec!>! useCaseStreamSpecs) -> System.Collections.Generic.IDictionary<AndroidX.Camera.Core.UseCase!, Android.Graphics.Rect!>!
static AndroidX.Camera.Core.Internal.ViewPorts.GetScaledRect(Android.Graphics.RectF! fittingRect, Android.Util.Rational! containerAspectRatio, int scaleType, bool isFrontCamera, int layoutDirection, int rotationDegrees) -> Android.Graphics.RectF!
static AndroidX.Camera.Core.LayoutSettings.Default.get -> AndroidX.Camera.Core.LayoutSettings?
static AndroidX.Camera.Core.Logger.D(string! tag, string! message) -> void
static AndroidX.Camera.Core.Logger.D(string! tag, string! message, Java.Lang.Throwable! throwable) -> void
static AndroidX.Camera.Core.Logger.E(string! tag, string! message) -> void
static AndroidX.Camera.Core.Logger.E(string! tag, string! message, Java.Lang.Throwable! throwable) -> void
static AndroidX.Camera.Core.Logger.I(string! tag, string! message) -> void
static AndroidX.Camera.Core.Logger.I(string! tag, string! message, Java.Lang.Throwable! throwable) -> void
static AndroidX.Camera.Core.Logger.IsDebugEnabled(string! tag) -> bool
static AndroidX.Camera.Core.Logger.IsErrorEnabled(string! tag) -> bool
static AndroidX.Camera.Core.Logger.IsInfoEnabled(string! tag) -> bool
static AndroidX.Camera.Core.Logger.IsVerboseEnabled(string! tag) -> bool
static AndroidX.Camera.Core.Logger.IsWarnEnabled(string! tag) -> bool
static AndroidX.Camera.Core.Logger.W(string! tag, string! message) -> void
static AndroidX.Camera.Core.Logger.W(string! tag, string! message, Java.Lang.Throwable! throwable) -> void
static AndroidX.Camera.Core.MeteringPointFactory.DefaultPointSize.get -> float
static AndroidX.Camera.Core.Preview.Builder.FromConfig(AndroidX.Camera.Core.Impl.PreviewConfig! configuration) -> AndroidX.Camera.Core.Preview.Builder!
static AndroidX.Camera.Core.Preview.DefaultConfig.get -> AndroidX.Camera.Core.Preview.Defaults?
static AndroidX.Camera.Core.Preview.GetPreviewCapabilities(AndroidX.Camera.Core.ICameraInfo! cameraInfo) -> AndroidX.Camera.Core.IPreviewCapabilities!
static AndroidX.Camera.Core.Processing.Concurrent.DualOutConfig.Of(AndroidX.Camera.Core.Processing.Util.OutConfig! primaryOutConfig, AndroidX.Camera.Core.Processing.Util.OutConfig! secondaryOutConfig) -> AndroidX.Camera.Core.Processing.Concurrent.DualOutConfig!
static AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessor.Factory.NewInstance(AndroidX.Camera.Core.DynamicRange! dynamicRange, AndroidX.Camera.Core.LayoutSettings! primaryLayoutSettings, AndroidX.Camera.Core.LayoutSettings! secondaryLayoutSettings) -> AndroidX.Camera.Core.Processing.ISurfaceProcessorInternal!
static AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessor.Factory.SetSupplier(Kotlin.Jvm.Functions.IFunction3! supplier) -> void
static AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.In.Of(AndroidX.Camera.Core.Processing.SurfaceEdge! primaryEdge, AndroidX.Camera.Core.Processing.SurfaceEdge! secondaryEdge, System.Collections.Generic.IList<AndroidX.Camera.Core.Processing.Concurrent.DualOutConfig!>! configs) -> AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.In!
static AndroidX.Camera.Core.Processing.DefaultSurfaceProcessor.Factory.NewInstance(AndroidX.Camera.Core.DynamicRange! dynamicRange) -> AndroidX.Camera.Core.Processing.ISurfaceProcessorInternal!
static AndroidX.Camera.Core.Processing.DefaultSurfaceProcessor.Factory.SetSupplier(AndroidX.Arch.Core.Util.IFunction! supplier) -> void
static AndroidX.Camera.Core.Processing.Packet.Of(Android.Graphics.Bitmap! data, AndroidX.Camera.Core.Impl.Utils.Exif! exif, Android.Graphics.Rect! cropRect, int rotationDegrees, Android.Graphics.Matrix! sensorToBufferTransform, AndroidX.Camera.Core.Impl.ICameraCaptureResult! cameraCaptureResult) -> AndroidX.Camera.Core.Processing.Packet!
static AndroidX.Camera.Core.Processing.Packet.Of(AndroidX.Camera.Core.IImageProxy! data, AndroidX.Camera.Core.Impl.Utils.Exif? exif, Android.Graphics.Rect! cropRect, int rotationDegrees, Android.Graphics.Matrix! sensorToBufferTransform, AndroidX.Camera.Core.Impl.ICameraCaptureResult! cameraCaptureResult) -> AndroidX.Camera.Core.Processing.Packet!
static AndroidX.Camera.Core.Processing.Packet.Of(AndroidX.Camera.Core.IImageProxy! data, AndroidX.Camera.Core.Impl.Utils.Exif? exif, Android.Util.Size! size, Android.Graphics.Rect! cropRect, int rotationDegrees, Android.Graphics.Matrix! sensorToBufferTransform, AndroidX.Camera.Core.Impl.ICameraCaptureResult! cameraCaptureResult) -> AndroidX.Camera.Core.Processing.Packet!
static AndroidX.Camera.Core.Processing.Packet.Of(byte[]! data, AndroidX.Camera.Core.Impl.Utils.Exif! exif, int format, Android.Util.Size! size, Android.Graphics.Rect! cropRect, int rotationDegrees, Android.Graphics.Matrix! sensorToBufferTransform, AndroidX.Camera.Core.Impl.ICameraCaptureResult! cameraCaptureResult) -> AndroidX.Camera.Core.Processing.Packet!
static AndroidX.Camera.Core.Processing.SurfaceProcessorNode.In.Of(AndroidX.Camera.Core.Processing.SurfaceEdge! edge, System.Collections.Generic.IList<AndroidX.Camera.Core.Processing.Util.OutConfig!>! configs) -> AndroidX.Camera.Core.Processing.SurfaceProcessorNode.In!
static AndroidX.Camera.Core.Processing.TargetUtils.CheckSupportedTargets(System.Collections.Generic.ICollection<Java.Lang.Integer!>! supportedTargets, int targets) -> void
static AndroidX.Camera.Core.Processing.TargetUtils.GetHumanReadableName(int target) -> string!
static AndroidX.Camera.Core.Processing.TargetUtils.GetNumberOfTargets(int targets) -> int
static AndroidX.Camera.Core.Processing.TargetUtils.IsSuperset(int superset, int subset) -> bool
static AndroidX.Camera.Core.Processing.Util.GLUtils.CheckEglErrorOrLog(string! op) -> void
static AndroidX.Camera.Core.Processing.Util.GLUtils.CheckEglErrorOrThrow(string! op) -> void
static AndroidX.Camera.Core.Processing.Util.GLUtils.CheckGlErrorOrThrow(string! op) -> void
static AndroidX.Camera.Core.Processing.Util.GLUtils.CheckGlThreadOrThrow(Java.Lang.Thread? thread) -> void
static AndroidX.Camera.Core.Processing.Util.GLUtils.CheckInitializedOrThrow(Java.Util.Concurrent.Atomic.AtomicBoolean! initialized, bool shouldInitialized) -> void
static AndroidX.Camera.Core.Processing.Util.GLUtils.CheckLocationOrThrow(int location, string! label) -> void
static AndroidX.Camera.Core.Processing.Util.GLUtils.ChooseSurfaceAttrib(string! eglExtensions, AndroidX.Camera.Core.DynamicRange! dynamicRange) -> int[]!
static AndroidX.Camera.Core.Processing.Util.GLUtils.Create4x4IdentityMatrix() -> float[]!
static AndroidX.Camera.Core.Processing.Util.GLUtils.CreateFloatBuffer(float[]! coords) -> Java.Nio.FloatBuffer!
static AndroidX.Camera.Core.Processing.Util.GLUtils.CreatePBufferSurface(Android.Opengl.EGLDisplay! eglDisplay, Android.Opengl.EGLConfig! eglConfig, int width, int height) -> Android.Opengl.EGLSurface!
static AndroidX.Camera.Core.Processing.Util.GLUtils.CreatePrograms(AndroidX.Camera.Core.DynamicRange! dynamicRange, System.Collections.Generic.IDictionary<AndroidX.Camera.Core.Processing.Util.GLUtils.InputFormat!, AndroidX.Camera.Core.Processing.IShaderProvider!>! shaderProviderOverrides) -> System.Collections.Generic.IDictionary<AndroidX.Camera.Core.Processing.Util.GLUtils.InputFormat!, AndroidX.Camera.Core.Processing.Util.GLUtils.Program2D!>!
static AndroidX.Camera.Core.Processing.Util.GLUtils.CreateTexture() -> int
static AndroidX.Camera.Core.Processing.Util.GLUtils.CreateWindowSurface(Android.Opengl.EGLDisplay! eglDisplay, Android.Opengl.EGLConfig! eglConfig, Android.Views.Surface! surface, int[]! surfaceAttrib) -> Android.Opengl.EGLSurface!
static AndroidX.Camera.Core.Processing.Util.GLUtils.DefaultVertexShader.get -> string?
static AndroidX.Camera.Core.Processing.Util.GLUtils.DeleteFbo(int fbo) -> void
static AndroidX.Camera.Core.Processing.Util.GLUtils.DeleteTexture(int texture) -> void
static AndroidX.Camera.Core.Processing.Util.GLUtils.EmptyAttribs.get -> System.Collections.Generic.IList<int>?
static AndroidX.Camera.Core.Processing.Util.GLUtils.GenerateFbo() -> int
static AndroidX.Camera.Core.Processing.Util.GLUtils.GenerateTexture() -> int
static AndroidX.Camera.Core.Processing.Util.GLUtils.GetSurfaceSize(Android.Opengl.EGLDisplay! eglDisplay, Android.Opengl.EGLSurface! eglSurface) -> Android.Util.Size!
static AndroidX.Camera.Core.Processing.Util.GLUtils.GlVersionNumber.get -> string!
static AndroidX.Camera.Core.Processing.Util.GLUtils.HdrVertexShader.get -> string?
static AndroidX.Camera.Core.Processing.Util.GLUtils.HlgSurfaceAttribs.get -> System.Collections.Generic.IList<int>?
static AndroidX.Camera.Core.Processing.Util.GLUtils.InputFormat.Default.get -> AndroidX.Camera.Core.Processing.Util.GLUtils.InputFormat?
static AndroidX.Camera.Core.Processing.Util.GLUtils.InputFormat.Unknown.get -> AndroidX.Camera.Core.Processing.Util.GLUtils.InputFormat?
static AndroidX.Camera.Core.Processing.Util.GLUtils.InputFormat.ValueOf(string? name) -> AndroidX.Camera.Core.Processing.Util.GLUtils.InputFormat?
static AndroidX.Camera.Core.Processing.Util.GLUtils.InputFormat.Values() -> AndroidX.Camera.Core.Processing.Util.GLUtils.InputFormat![]?
static AndroidX.Camera.Core.Processing.Util.GLUtils.InputFormat.Yuv.get -> AndroidX.Camera.Core.Processing.Util.GLUtils.InputFormat?
static AndroidX.Camera.Core.Processing.Util.GLUtils.LoadShader(int shaderType, string! source) -> int
static AndroidX.Camera.Core.Processing.Util.GLUtils.NoOutputSurface.get -> AndroidX.Camera.Core.Processing.Util.OutputSurface?
static AndroidX.Camera.Core.Processing.Util.GLUtils.QuerySurface(Android.Opengl.EGLDisplay! eglDisplay, Android.Opengl.EGLSurface! eglSurface, int what) -> int
static AndroidX.Camera.Core.Processing.Util.GLUtils.TexBuf.get -> Java.Nio.FloatBuffer?
static AndroidX.Camera.Core.Processing.Util.GLUtils.TexCoords.get -> System.Collections.Generic.IList<float>?
static AndroidX.Camera.Core.Processing.Util.GLUtils.VertexBuf.get -> Java.Nio.FloatBuffer?
static AndroidX.Camera.Core.Processing.Util.GLUtils.VertexCoords.get -> System.Collections.Generic.IList<float>?
static AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.InvokeBuilder() -> AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo.Builder!
static AndroidX.Camera.Core.Processing.Util.OutConfig.Of(AndroidX.Camera.Core.Processing.SurfaceEdge! inputEdge) -> AndroidX.Camera.Core.Processing.Util.OutConfig!
static AndroidX.Camera.Core.Processing.Util.OutConfig.Of(int targets, int format, Android.Graphics.Rect! cropRect, Android.Util.Size! size, int rotationDegrees, bool mirroring) -> AndroidX.Camera.Core.Processing.Util.OutConfig!
static AndroidX.Camera.Core.Processing.Util.OutConfig.Of(int targets, int format, Android.Graphics.Rect! cropRect, Android.Util.Size! size, int rotationDegrees, bool mirroring, bool shouldRespectInputCropRect) -> AndroidX.Camera.Core.Processing.Util.OutConfig!
static AndroidX.Camera.Core.Processing.Util.OutputSurface.Of(Android.Opengl.EGLSurface! eglSurface, int width, int height) -> AndroidX.Camera.Core.Processing.Util.OutputSurface!
static AndroidX.Camera.Core.ResolutionSelector.AspectRatioStrategy.Ratio169FallbackAutoStrategy.get -> AndroidX.Camera.Core.ResolutionSelector.AspectRatioStrategy!
static AndroidX.Camera.Core.ResolutionSelector.AspectRatioStrategy.Ratio43FallbackAutoStrategy.get -> AndroidX.Camera.Core.ResolutionSelector.AspectRatioStrategy!
static AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.Builder.FromResolutionSelector(AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector! resolutionSelector) -> AndroidX.Camera.Core.ResolutionSelector.ResolutionSelector.Builder!
static AndroidX.Camera.Core.ResolutionSelector.ResolutionStrategy.HighestAvailableStrategy.get -> AndroidX.Camera.Core.ResolutionSelector.ResolutionStrategy!
static AndroidX.Camera.Core.RetryPolicy.Default.get -> AndroidX.Camera.Core.IRetryPolicy!
static AndroidX.Camera.Core.RetryPolicy.Never.get -> AndroidX.Camera.Core.IRetryPolicy!
static AndroidX.Camera.Core.RetryPolicy.RetryUnavailableCamera.get -> AndroidX.Camera.Core.IRetryPolicy!
static AndroidX.Camera.Core.RetryPolicyRetryConfig.CompleteWithoutFailure.get -> AndroidX.Camera.Core.RetryPolicyRetryConfig!
static AndroidX.Camera.Core.RetryPolicyRetryConfig.CompleteWithoutFailure.set -> void
static AndroidX.Camera.Core.RetryPolicyRetryConfig.DefaultDelayRetry.get -> AndroidX.Camera.Core.RetryPolicyRetryConfig!
static AndroidX.Camera.Core.RetryPolicyRetryConfig.DefaultRetryDelayInMillis.get -> long
static AndroidX.Camera.Core.RetryPolicyRetryConfig.MiniDelayRetry.get -> AndroidX.Camera.Core.RetryPolicyRetryConfig!
static AndroidX.Camera.Core.RetryPolicyRetryConfig.NotRetry.get -> AndroidX.Camera.Core.RetryPolicyRetryConfig!
static AndroidX.Camera.Core.StreamSharing.DynamicRangeUtils.ResolveDynamicRange(System.Collections.Generic.ICollection<AndroidX.Camera.Core.Impl.IUseCaseConfig!>! useCaseConfigs) -> AndroidX.Camera.Core.DynamicRange?
static AndroidX.Camera.Core.StreamSharing.StreamSharing.GetCaptureTypes(AndroidX.Camera.Core.UseCase! useCase) -> System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType!>!
static AndroidX.Camera.Core.StreamSharing.StreamSharing.IsStreamSharing(AndroidX.Camera.Core.UseCase? useCase) -> bool
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionAppTargetRotation.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionBackgroundExecutor.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionCaptureConfigUnpacker.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionCaptureType.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionCustomOrderedResolutions.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionDefaultCaptureConfig.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionDefaultResolution.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionDefaultSessionConfig.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionHighResolutionDisabled.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionMaxResolution.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionMirrorMode.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionPreviewStabilizationMode.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionResolutionSelector.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionSessionConfigUnpacker.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionSupportedResolutions.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionSurfaceOccupancyPriority.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionTargetAspectRatio.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionTargetFrameRate.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionTargetResolution.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionTargetRotation.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionVideoStabilizationMode.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.InterfaceConsts.OptionZslDisabled.get -> AndroidX.Camera.Core.Impl.ConfigOption?
static AndroidX.Camera.Core.SurfaceOutputCameraInputInfo.Of(Android.Util.Size! inputSize, Android.Graphics.Rect! inputCropRect, AndroidX.Camera.Core.Impl.ICameraInternal? cameraInternal, int rotationDegrees, bool mirroring) -> AndroidX.Camera.Core.SurfaceOutputCameraInputInfo!
static AndroidX.Camera.Core.SurfaceOutputEvent.Of(int code, AndroidX.Camera.Core.ISurfaceOutput! surfaceOutput) -> AndroidX.Camera.Core.SurfaceOutputEvent!
static AndroidX.Camera.Core.SurfaceRequest.FrameRateRangeUnspecified.get -> Android.Util.Range?
static AndroidX.Camera.Core.SurfaceRequest.TransformationInfo.Of(Android.Graphics.Rect! cropRect, int rotationDegrees, int targetRotation, bool hasCameraTransform, Android.Graphics.Matrix! sensorToBufferTransform, bool mirroring) -> AndroidX.Camera.Core.SurfaceRequest.TransformationInfo!
static AndroidX.Camera.Core.UseCase.SnapToSurfaceRotation(int orientation) -> int
virtual AndroidX.Camera.Core.CameraEffect.CreateSurfaceProcessorInternal() -> AndroidX.Camera.Core.Processing.ISurfaceProcessorInternal!
virtual AndroidX.Camera.Core.CameraEffect.ErrorListener.get -> AndroidX.Core.Util.IConsumer!
virtual AndroidX.Camera.Core.CameraEffect.Executor.get -> Java.Util.Concurrent.IExecutor!
virtual AndroidX.Camera.Core.CameraEffect.ImageProcessor.get -> AndroidX.Camera.Core.IImageProcessor?
virtual AndroidX.Camera.Core.CameraEffect.OutputOption.get -> int
virtual AndroidX.Camera.Core.CameraEffect.SurfaceProcessor.get -> AndroidX.Camera.Core.ISurfaceProcessor?
virtual AndroidX.Camera.Core.CameraEffect.Targets.get -> int
virtual AndroidX.Camera.Core.CameraEffect.Transformation.get -> int
virtual AndroidX.Camera.Core.CameraExecutor.Execute(Java.Lang.IRunnable! runnable) -> void
virtual AndroidX.Camera.Core.CameraState.StateError.Type.get -> AndroidX.Camera.Core.CameraState.ErrorType!
virtual AndroidX.Camera.Core.CameraUnavailableException.Reason.get -> int
virtual AndroidX.Camera.Core.ConcurrentCamera.Cameras.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.ICamera!>!
virtual AndroidX.Camera.Core.FocusMeteringAction.Builder.AddPoint(AndroidX.Camera.Core.MeteringPoint! point) -> AndroidX.Camera.Core.FocusMeteringAction.Builder!
virtual AndroidX.Camera.Core.FocusMeteringAction.Builder.AddPoint(AndroidX.Camera.Core.MeteringPoint! point, int meteringMode) -> AndroidX.Camera.Core.FocusMeteringAction.Builder!
virtual AndroidX.Camera.Core.FocusMeteringAction.Builder.Build() -> AndroidX.Camera.Core.FocusMeteringAction!
virtual AndroidX.Camera.Core.FocusMeteringAction.Builder.DisableAutoCancel() -> AndroidX.Camera.Core.FocusMeteringAction.Builder!
virtual AndroidX.Camera.Core.FocusMeteringAction.Builder.RemovePoints(int meteringMode) -> AndroidX.Camera.Core.FocusMeteringAction.Builder!
virtual AndroidX.Camera.Core.FocusMeteringAction.Builder.SetAutoCancelDuration(long duration, Java.Util.Concurrent.TimeUnit! timeUnit) -> AndroidX.Camera.Core.FocusMeteringAction.Builder!
virtual AndroidX.Camera.Core.ForwardingImageProxy.AddOnImageCloseListener(AndroidX.Camera.Core.ForwardingImageProxy.IOnImageCloseListener! listener) -> void
virtual AndroidX.Camera.Core.ForwardingImageProxy.Close() -> void
virtual AndroidX.Camera.Core.ForwardingImageProxy.CropRect.get -> Android.Graphics.Rect!
virtual AndroidX.Camera.Core.ForwardingImageProxy.CropRect.set -> void
virtual AndroidX.Camera.Core.ForwardingImageProxy.Format.get -> int
virtual AndroidX.Camera.Core.ForwardingImageProxy.GetPlanes() -> AndroidX.Camera.Core.IImageProxyPlaneProxy![]!
virtual AndroidX.Camera.Core.ForwardingImageProxy.Height.get -> int
virtual AndroidX.Camera.Core.ForwardingImageProxy.Image.get -> Android.Media.Image?
virtual AndroidX.Camera.Core.ForwardingImageProxy.ImageInfo.get -> AndroidX.Camera.Core.IImageInfo!
virtual AndroidX.Camera.Core.ForwardingImageProxy.NotifyOnImageCloseListeners() -> void
virtual AndroidX.Camera.Core.ForwardingImageProxy.Width.get -> int
virtual AndroidX.Camera.Core.ImageCapture.OnImageCapturedCallback.OnCaptureProcessProgressed(int progress) -> void
virtual AndroidX.Camera.Core.ImageCapture.OnImageCapturedCallback.OnCaptureStarted() -> void
virtual AndroidX.Camera.Core.ImageCapture.OnImageCapturedCallback.OnCaptureSuccess(AndroidX.Camera.Core.IImageProxy! image) -> void
virtual AndroidX.Camera.Core.ImageCapture.OnImageCapturedCallback.OnError(AndroidX.Camera.Core.ImageCaptureException! exception) -> void
virtual AndroidX.Camera.Core.ImageCapture.OnImageCapturedCallback.OnPostviewBitmapAvailable(Android.Graphics.Bitmap! bitmap) -> void
virtual AndroidX.Camera.Core.ImageCapture.OutputFileResults.SavedUri.get -> Android.Net.Uri?
virtual AndroidX.Camera.Core.ImageCaptureException.ImageCaptureError.get -> int
virtual AndroidX.Camera.Core.ImageCaptureLatencyEstimate.CaptureLatencyMillis.get -> long
virtual AndroidX.Camera.Core.ImageCaptureLatencyEstimate.ProcessingLatencyMillis.get -> long
virtual AndroidX.Camera.Core.ImageCaptureLatencyEstimate.TotalCaptureLatencyMillis.get -> long
virtual AndroidX.Camera.Core.ImageCaptures.BitmapEffect.Apply(AndroidX.Camera.Core.Processing.Packet! packet) -> AndroidX.Camera.Core.Processing.Packet!
virtual AndroidX.Camera.Core.ImageCaptures.Image2Bitmap.Apply(AndroidX.Camera.Core.Processing.Packet! imageProxyPacket) -> Android.Graphics.Bitmap!
virtual AndroidX.Camera.Core.ImageCaptures.ImagePipeline.Capacity.get -> int
virtual AndroidX.Camera.Core.ImageCaptures.ImagePipeline.Close() -> void
virtual AndroidX.Camera.Core.ImageCaptures.ImagePipeline.CreateSessionConfigBuilder(Android.Util.Size! resolution) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.ImageCaptures.ImagePipeline.ExpectsMetadata() -> bool
virtual AndroidX.Camera.Core.ImageCaptures.ImagePipeline.PostviewSize.get -> Android.Util.Size?
virtual AndroidX.Camera.Core.ImageCaptures.ImagePipeline.SetOnImageCloseListener(AndroidX.Camera.Core.ForwardingImageProxy.IOnImageCloseListener! listener) -> void
virtual AndroidX.Camera.Core.ImageCaptures.JpegBytes2Image.Apply(AndroidX.Camera.Core.Processing.Packet! packet) -> AndroidX.Camera.Core.Processing.Packet!
virtual AndroidX.Camera.Core.ImageCaptures.JpegImage2Result.Apply(AndroidX.Camera.Core.Processing.Packet! input) -> AndroidX.Camera.Core.IImageProxy!
virtual AndroidX.Camera.Core.ImageCaptures.NoMetadataImageReader.AcquireLatestImage() -> AndroidX.Camera.Core.IImageProxy?
virtual AndroidX.Camera.Core.ImageCaptures.NoMetadataImageReader.AcquireNextImage() -> AndroidX.Camera.Core.IImageProxy?
virtual AndroidX.Camera.Core.ImageCaptures.NoMetadataImageReader.ClearOnImageAvailableListener() -> void
virtual AndroidX.Camera.Core.ImageCaptures.NoMetadataImageReader.Close() -> void
virtual AndroidX.Camera.Core.ImageCaptures.NoMetadataImageReader.Height.get -> int
virtual AndroidX.Camera.Core.ImageCaptures.NoMetadataImageReader.ImageFormat.get -> int
virtual AndroidX.Camera.Core.ImageCaptures.NoMetadataImageReader.MaxImages.get -> int
virtual AndroidX.Camera.Core.ImageCaptures.NoMetadataImageReader.SetOnImageAvailableListener(AndroidX.Camera.Core.Impl.IImageReaderProxyOnImageAvailableListener! listener, Java.Util.Concurrent.IExecutor! executor) -> void
virtual AndroidX.Camera.Core.ImageCaptures.NoMetadataImageReader.Surface.get -> Android.Views.Surface?
virtual AndroidX.Camera.Core.ImageCaptures.NoMetadataImageReader.Width.get -> int
virtual AndroidX.Camera.Core.ImageCaptures.ProcessingNode.Release() -> void
virtual AndroidX.Camera.Core.ImageCaptures.RequestWithCallback.IsAborted.get -> bool
virtual AndroidX.Camera.Core.ImageCaptures.RequestWithCallback.OnCaptureFailure(AndroidX.Camera.Core.ImageCaptureException! imageCaptureException) -> void
virtual AndroidX.Camera.Core.ImageCaptures.RequestWithCallback.OnCaptureProcessProgressed(int progress) -> void
virtual AndroidX.Camera.Core.ImageCaptures.RequestWithCallback.OnCaptureStarted() -> void
virtual AndroidX.Camera.Core.ImageCaptures.RequestWithCallback.OnFinalResult(AndroidX.Camera.Core.IImageProxy! imageProxy) -> void
virtual AndroidX.Camera.Core.ImageCaptures.RequestWithCallback.OnFinalResult(AndroidX.Camera.Core.ImageCapture.OutputFileResults! outputFileResults) -> void
virtual AndroidX.Camera.Core.ImageCaptures.RequestWithCallback.OnImageCaptured() -> void
virtual AndroidX.Camera.Core.ImageCaptures.RequestWithCallback.OnPostviewBitmapAvailable(Android.Graphics.Bitmap! bitmap) -> void
virtual AndroidX.Camera.Core.ImageCaptures.RequestWithCallback.OnProcessFailure(AndroidX.Camera.Core.ImageCaptureException! imageCaptureException) -> void
virtual AndroidX.Camera.Core.ImageCaptures.RequestWithCallback.SetCaptureRequestFuture(Google.Common.Util.Concurrent.IListenableFuture! captureRequestFuture) -> void
virtual AndroidX.Camera.Core.ImageCaptures.RequestWithCallback.TakePictureRequest.get -> AndroidX.Camera.Core.ImageCaptures.TakePictureRequest!
virtual AndroidX.Camera.Core.ImageCaptures.TakePictureManager.AbortRequests() -> void
virtual AndroidX.Camera.Core.ImageCaptures.TakePictureManager.CapturingRequest.get -> AndroidX.Camera.Core.ImageCaptures.RequestWithCallback?
virtual AndroidX.Camera.Core.ImageCaptures.TakePictureManager.ImagePipeline.get -> AndroidX.Camera.Core.ImageCaptures.ImagePipeline!
virtual AndroidX.Camera.Core.ImageCaptures.TakePictureManager.ImagePipeline.set -> void
virtual AndroidX.Camera.Core.ImageCaptures.TakePictureManager.OfferRequest(AndroidX.Camera.Core.ImageCaptures.TakePictureRequest! takePictureRequest) -> void
virtual AndroidX.Camera.Core.ImageCaptures.TakePictureManager.OnImageClose(AndroidX.Camera.Core.IImageProxy! image) -> void
virtual AndroidX.Camera.Core.ImageCaptures.TakePictureManager.Pause() -> void
virtual AndroidX.Camera.Core.ImageCaptures.TakePictureManager.Resume() -> void
virtual AndroidX.Camera.Core.ImageCaptures.TakePictureManager.RetryRequest(AndroidX.Camera.Core.ImageCaptures.TakePictureRequest! request) -> void
virtual AndroidX.Camera.Core.ImmutableImageInfo.PopulateExifData(AndroidX.Camera.Core.Impl.Utils.ExifData.Builder! exifBuilder) -> void
virtual AndroidX.Camera.Core.Impl.AttachedSurfaceInfo.ToStreamSpec(AndroidX.Camera.Core.Impl.IConfig! implementationOptions) -> AndroidX.Camera.Core.Impl.StreamSpec!
virtual AndroidX.Camera.Core.Impl.CameraCaptureCallback.OnCaptureCancelled(int captureConfigId) -> void
virtual AndroidX.Camera.Core.Impl.CameraCaptureCallback.OnCaptureCompleted(int captureConfigId, AndroidX.Camera.Core.Impl.ICameraCaptureResult! cameraCaptureResult) -> void
virtual AndroidX.Camera.Core.Impl.CameraCaptureCallback.OnCaptureFailed(int captureConfigId, AndroidX.Camera.Core.Impl.CameraCaptureFailure! failure) -> void
virtual AndroidX.Camera.Core.Impl.CameraCaptureCallback.OnCaptureProcessProgressed(int captureConfigId, int progress) -> void
virtual AndroidX.Camera.Core.Impl.CameraCaptureCallback.OnCaptureStarted(int captureConfigId) -> void
virtual AndroidX.Camera.Core.Impl.CameraCaptureFailure.CaptureFailure.get -> Java.Lang.Object?
virtual AndroidX.Camera.Core.Impl.CameraCaptureFailure.GetReason() -> AndroidX.Camera.Core.Impl.CameraCaptureFailure.Reason!
virtual AndroidX.Camera.Core.Impl.CameraValidator.CameraIdListIncorrectException.AvailableCameraCount.get -> int
virtual AndroidX.Camera.Core.Impl.Capability.PreviewCapabilitiesImpl.IsStabilizationSupported.get -> bool
virtual AndroidX.Camera.Core.Impl.DeferrableSurface.Close() -> void
virtual AndroidX.Camera.Core.Impl.DeferrableSurface.CloseFuture.get -> Google.Common.Util.Concurrent.IListenableFuture!
virtual AndroidX.Camera.Core.Impl.DeferrableSurface.ContainerClass.get -> Java.Lang.Class?
virtual AndroidX.Camera.Core.Impl.DeferrableSurface.ContainerClass.set -> void
virtual AndroidX.Camera.Core.Impl.DeferrableSurface.DecrementUseCount() -> void
virtual AndroidX.Camera.Core.Impl.DeferrableSurface.IncrementUseCount() -> void
virtual AndroidX.Camera.Core.Impl.DeferrableSurface.IsClosed.get -> bool
virtual AndroidX.Camera.Core.Impl.DeferrableSurface.PrescribedSize.get -> Android.Util.Size!
virtual AndroidX.Camera.Core.Impl.DeferrableSurface.PrescribedStreamFormat.get -> int
virtual AndroidX.Camera.Core.Impl.DeferrableSurface.TerminationFuture.get -> Google.Common.Util.Concurrent.IListenableFuture!
virtual AndroidX.Camera.Core.Impl.DeferrableSurface.UseCount.get -> int
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.AddInteropConfig(AndroidX.Camera.Core.Impl.IConfig! config) -> void
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.AddZslConfig(AndroidX.Camera.Core.Impl.SessionConfig.Builder! sessionConfigBuilder) -> void
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.CancelFocusAndMetering() -> Google.Common.Util.Concurrent.IListenableFuture!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.ClearInteropConfig() -> void
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.DecrementVideoUsage() -> void
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.EnableTorch(bool torch) -> Google.Common.Util.Concurrent.IListenableFuture!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.FlashMode.get -> int
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.FlashMode.set -> void
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.GetCameraCapturePipelineAsync(int captureMode, int flashType) -> Google.Common.Util.Concurrent.IListenableFuture!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.Implementation.get -> AndroidX.Camera.Core.Impl.ICameraControlInternal!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.IncrementVideoUsage() -> void
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.InteropConfig.get -> AndroidX.Camera.Core.Impl.IConfig!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.IsInVideoUsage.get -> bool
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.IsZslDisabledByByUserCaseConfig.get -> bool
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.SensorRect.get -> Android.Graphics.Rect!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.SessionConfig.get -> AndroidX.Camera.Core.Impl.SessionConfig!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.SetExposureCompensationIndex(int value) -> Google.Common.Util.Concurrent.IListenableFuture!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.SetLinearZoom(float linearZoom) -> Google.Common.Util.Concurrent.IListenableFuture!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.SetScreenFlash(AndroidX.Camera.Core.ImageCapture.IScreenFlash? screenFlash) -> void
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.SetZoomRatio(float ratio) -> Google.Common.Util.Concurrent.IListenableFuture!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.SetZslDisabledByUserCaseConfig(bool disabled) -> void
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.StartFocusAndMetering(AndroidX.Camera.Core.FocusMeteringAction! action) -> Google.Common.Util.Concurrent.IListenableFuture!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraControl.SubmitStillCaptureRequests(System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.CaptureConfig!>! captureConfigs, int captureMode, int flashType) -> Google.Common.Util.Concurrent.IListenableFuture!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.AddSessionCaptureCallback(Java.Util.Concurrent.IExecutor! executor, AndroidX.Camera.Core.Impl.CameraCaptureCallback! callback) -> void
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.CameraCharacteristics.get -> Java.Lang.Object!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.CameraId.get -> string!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.CameraQuirks.get -> AndroidX.Camera.Core.Impl.Quirks!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.CameraSelector.get -> AndroidX.Camera.Core.CameraSelector!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.CameraState.get -> AndroidX.Lifecycle.LiveData!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.EncoderProfilesProvider.get -> AndroidX.Camera.Core.Impl.IEncoderProfilesProvider!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.ExposureState.get -> AndroidX.Camera.Core.IExposureState!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.GetPhysicalCameraCharacteristics(string! physicalCameraId) -> Java.Lang.Object?
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.GetSensorRotationDegrees(int relativeRotation) -> int
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.GetSupportedHighResolutions(int format) -> System.Collections.Generic.IList<Android.Util.Size!>!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.GetSupportedResolutions(int format) -> System.Collections.Generic.IList<Android.Util.Size!>!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.HasFlashUnit.get -> bool
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.Implementation.get -> AndroidX.Camera.Core.Impl.ICameraInfoInternal!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.ImplementationType.get -> string!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.IntrinsicZoomRatio.get -> float
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.IsFocusMeteringSupported(AndroidX.Camera.Core.FocusMeteringAction! action) -> bool
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.IsLogicalMultiCameraSupported.get -> bool
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.IsPreviewStabilizationSupported.get -> bool
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.IsPrivateReprocessingSupported.get -> bool
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.IsVideoStabilizationSupported.get -> bool
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.IsZslSupported.get -> bool
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.LensFacing.get -> int
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.PhysicalCameraInfos.get -> System.Collections.Generic.ICollection<AndroidX.Camera.Core.ICameraInfo!>!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.QuerySupportedDynamicRanges(System.Collections.Generic.ICollection<AndroidX.Camera.Core.DynamicRange!>! candidateDynamicRanges) -> System.Collections.Generic.ICollection<AndroidX.Camera.Core.DynamicRange!>!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.RemoveSessionCaptureCallback(AndroidX.Camera.Core.Impl.CameraCaptureCallback! callback) -> void
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.SensorRotationDegrees.get -> int
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.SupportedDynamicRanges.get -> System.Collections.Generic.ICollection<AndroidX.Camera.Core.DynamicRange!>!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.SupportedFrameRateRanges.get -> System.Collections.Generic.ICollection<Android.Util.Range!>!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.SupportedOutputFormats.get -> System.Collections.Generic.ICollection<Java.Lang.Integer!>!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.Timebase.get -> AndroidX.Camera.Core.Impl.Timebase!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.TorchState.get -> AndroidX.Lifecycle.LiveData!
virtual AndroidX.Camera.Core.Impl.ForwardingCameraInfo.ZoomState.get -> AndroidX.Lifecycle.LiveData!
virtual AndroidX.Camera.Core.Impl.LensFacingCameraFilter.Filter(System.Collections.Generic.IList<AndroidX.Camera.Core.ICameraInfo!>! cameraInfos) -> System.Collections.Generic.IList<AndroidX.Camera.Core.ICameraInfo!>!
virtual AndroidX.Camera.Core.Impl.LensFacingCameraFilter.LensFacing.get -> int
virtual AndroidX.Camera.Core.Impl.MultiValueSet.AddAll(System.Collections.IList! value) -> void
virtual AndroidX.Camera.Core.Impl.MultiValueSet.AllItems.get -> System.Collections.IList!
virtual AndroidX.Camera.Core.Impl.MutableStateObservable.SetError(Java.Lang.Throwable! error) -> void
virtual AndroidX.Camera.Core.Impl.MutableStateObservable.SetState(Java.Lang.Object? state) -> void
virtual AndroidX.Camera.Core.Impl.MutableTagBundle.AddTagBundle(AndroidX.Camera.Core.Impl.TagBundle! bundle) -> void
virtual AndroidX.Camera.Core.Impl.MutableTagBundle.PutTag(string! key, Java.Lang.Object! value) -> void
virtual AndroidX.Camera.Core.Impl.OptionsBundle.ContainsOption(AndroidX.Camera.Core.Impl.ConfigOption! id) -> bool
virtual AndroidX.Camera.Core.Impl.OptionsBundle.FindOptions(string! idSearchString, AndroidX.Camera.Core.Impl.IConfigOptionMatcher! matcher) -> void
virtual AndroidX.Camera.Core.Impl.OptionsBundle.GetOptionPriority(AndroidX.Camera.Core.Impl.ConfigOption! opt) -> AndroidX.Camera.Core.Impl.ConfigOptionPriority!
virtual AndroidX.Camera.Core.Impl.OptionsBundle.GetPriorities(AndroidX.Camera.Core.Impl.ConfigOption! opt) -> System.Collections.Generic.ICollection<AndroidX.Camera.Core.Impl.ConfigOptionPriority!>!
virtual AndroidX.Camera.Core.Impl.OptionsBundle.ListOptions() -> System.Collections.Generic.ICollection<AndroidX.Camera.Core.Impl.ConfigOption!>!
virtual AndroidX.Camera.Core.Impl.OptionsBundle.RetrieveOption(AndroidX.Camera.Core.Impl.ConfigOption! id) -> Java.Lang.Object?
virtual AndroidX.Camera.Core.Impl.OptionsBundle.RetrieveOption(AndroidX.Camera.Core.Impl.ConfigOption! id, Java.Lang.Object? valueIfMissing) -> Java.Lang.Object?
virtual AndroidX.Camera.Core.Impl.OptionsBundle.RetrieveOptionWithPriority(AndroidX.Camera.Core.Impl.ConfigOption! id, AndroidX.Camera.Core.Impl.ConfigOptionPriority! priority) -> Java.Lang.Object?
virtual AndroidX.Camera.Core.Impl.QuirkSettings.Builder.Build() -> AndroidX.Camera.Core.Impl.QuirkSettings!
virtual AndroidX.Camera.Core.Impl.QuirkSettings.Builder.ForceDisableQuirks(System.Collections.Generic.ICollection<Java.Lang.Class!>! quirks) -> AndroidX.Camera.Core.Impl.QuirkSettings.Builder!
virtual AndroidX.Camera.Core.Impl.QuirkSettings.Builder.ForceEnableQuirks(System.Collections.Generic.ICollection<Java.Lang.Class!>! quirks) -> AndroidX.Camera.Core.Impl.QuirkSettings.Builder!
virtual AndroidX.Camera.Core.Impl.QuirkSettings.Builder.SetEnabledWhenDeviceHasQuirk(bool enabled) -> AndroidX.Camera.Core.Impl.QuirkSettings.Builder!
virtual AndroidX.Camera.Core.Impl.QuirkSettings.ForceDisabledQuirks.get -> System.Collections.Generic.ICollection<Java.Lang.Class!>!
virtual AndroidX.Camera.Core.Impl.QuirkSettings.ForceEnabledQuirks.get -> System.Collections.Generic.ICollection<Java.Lang.Class!>!
virtual AndroidX.Camera.Core.Impl.QuirkSettings.IsEnabledWhenDeviceHasQuirk.get -> bool
virtual AndroidX.Camera.Core.Impl.QuirkSettings.ShouldEnableQuirk(Java.Lang.Class! quirk, bool deviceHasQuirk) -> bool
virtual AndroidX.Camera.Core.Impl.QuirkSettingsLoader.Apply(Java.Lang.Object! context) -> Java.Lang.Object?
virtual AndroidX.Camera.Core.Impl.Quirks.AddQuirkForTesting(AndroidX.Camera.Core.Impl.IQuirk! quirk) -> void
virtual AndroidX.Camera.Core.Impl.Quirks.Contains(Java.Lang.Class! quirkClass) -> bool
virtual AndroidX.Camera.Core.Impl.Quirks.Get(Java.Lang.Class! quirkClass) -> Java.Lang.Object?
virtual AndroidX.Camera.Core.Impl.Quirks.GetAll(Java.Lang.Class! quirkClass) -> System.Collections.IList!
virtual AndroidX.Camera.Core.Impl.RestrictedCameraControl.SessionProcessor.get -> AndroidX.Camera.Core.Impl.ISessionProcessor?
virtual AndroidX.Camera.Core.Impl.RestrictedCameraInfo.CameraConfig.get -> AndroidX.Camera.Core.Impl.ICameraConfig!
virtual AndroidX.Camera.Core.Impl.RestrictedCameraInfo.CaptureProcessProgressSupported.get -> bool
virtual AndroidX.Camera.Core.Impl.RestrictedCameraInfo.CaptureProcessProgressSupported.set -> void
virtual AndroidX.Camera.Core.Impl.RestrictedCameraInfo.PostviewSupported.get -> bool
virtual AndroidX.Camera.Core.Impl.RestrictedCameraInfo.PostviewSupported.set -> void
virtual AndroidX.Camera.Core.Impl.RestrictedCameraInfo.SessionProcessor.get -> AndroidX.Camera.Core.Impl.ISessionProcessor?
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.AddAllCameraCaptureCallbacks(System.Collections.Generic.ICollection<AndroidX.Camera.Core.Impl.CameraCaptureCallback!>! cameraCaptureCallbacks) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.AddAllDeviceStateCallbacks(System.Collections.Generic.ICollection<Android.Hardware.Camera2.CameraDevice.StateCallback!>! deviceStateCallbacks) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.AddAllRepeatingCameraCaptureCallbacks(System.Collections.Generic.ICollection<AndroidX.Camera.Core.Impl.CameraCaptureCallback!>! cameraCaptureCallbacks) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.AddAllSessionStateCallbacks(System.Collections.Generic.IList<Android.Hardware.Camera2.CameraCaptureSession.StateCallback!>! sessionStateCallbacks) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.AddCameraCaptureCallback(AndroidX.Camera.Core.Impl.CameraCaptureCallback! cameraCaptureCallback) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.AddDeviceStateCallback(Android.Hardware.Camera2.CameraDevice.StateCallback! deviceStateCallback) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.AddImplementationOptions(AndroidX.Camera.Core.Impl.IConfig! config) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.AddNonRepeatingSurface(AndroidX.Camera.Core.Impl.DeferrableSurface! surface) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.AddNonRepeatingSurface(AndroidX.Camera.Core.Impl.DeferrableSurface! surface, AndroidX.Camera.Core.DynamicRange! dynamicRange) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.AddOutputConfig(AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig! outputConfig) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.AddRepeatingCameraCaptureCallback(AndroidX.Camera.Core.Impl.CameraCaptureCallback! cameraCaptureCallback) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.AddSessionStateCallback(Android.Hardware.Camera2.CameraCaptureSession.StateCallback! sessionStateCallback) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.AddSurface(AndroidX.Camera.Core.Impl.DeferrableSurface! surface) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.AddSurface(AndroidX.Camera.Core.Impl.DeferrableSurface! surface, AndroidX.Camera.Core.DynamicRange! dynamicRange, string? physicalCameraId, int mirrorMode) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.AddTag(string! key, Java.Lang.Object! tag) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.Build() -> AndroidX.Camera.Core.Impl.SessionConfig!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.ClearSurfaces() -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.RemoveCameraCaptureCallback(AndroidX.Camera.Core.Impl.CameraCaptureCallback! cameraCaptureCallback) -> bool
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.RemoveSurface(AndroidX.Camera.Core.Impl.DeferrableSurface! surface) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.SetErrorListener(AndroidX.Camera.Core.Impl.SessionConfig.IErrorListener! errorListener) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.SetExpectedFrameRateRange(Android.Util.Range! expectedFrameRateRange) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.SetImplementationOptions(AndroidX.Camera.Core.Impl.IConfig! config) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.SetInputConfiguration(Android.Hardware.Camera2.Params.InputConfiguration? inputConfiguration) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.SetPostviewSurface(AndroidX.Camera.Core.Impl.DeferrableSurface! surface) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.SetPreviewStabilization(int mode) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.SetSessionType(int sessionType) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.SetTemplateType(int templateType) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.SetVideoStabilization(int mode) -> AndroidX.Camera.Core.Impl.SessionConfig.Builder!
virtual AndroidX.Camera.Core.Impl.SessionConfig.Builder.SingleCameraCaptureCallbacks.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.CameraCaptureCallback!>!
virtual AndroidX.Camera.Core.Impl.StateObservable.AddObserver(Java.Util.Concurrent.IExecutor! executor, AndroidX.Camera.Core.Impl.IObservableObserver! observer) -> void
virtual AndroidX.Camera.Core.Impl.StateObservable.FetchData() -> Google.Common.Util.Concurrent.IListenableFuture!
virtual AndroidX.Camera.Core.Impl.StateObservable.RemoveObserver(AndroidX.Camera.Core.Impl.IObservableObserver! observer) -> void
virtual AndroidX.Camera.Core.Impl.StateObservable.RemoveObservers() -> void
virtual AndroidX.Camera.Core.Impl.SurfaceSizeDefinition.GetMaximumSize(int format) -> Android.Util.Size!
virtual AndroidX.Camera.Core.Impl.SurfaceSizeDefinition.GetS1440pSize(int format) -> Android.Util.Size!
virtual AndroidX.Camera.Core.Impl.SurfaceSizeDefinition.GetS720pSize(int format) -> Android.Util.Size!
virtual AndroidX.Camera.Core.Impl.SurfaceSizeDefinition.GetUltraMaximumSize(int format) -> Android.Util.Size?
virtual AndroidX.Camera.Core.Impl.TagBundle.GetTag(string! key) -> Java.Lang.Object?
virtual AndroidX.Camera.Core.Impl.TagBundle.ListKeys() -> System.Collections.Generic.ICollection<string!>!
virtual AndroidX.Camera.Core.Impl.Utils.Executors.AudioExecutor.Execute(Java.Lang.IRunnable! command) -> void
virtual AndroidX.Camera.Core.Impl.Utils.ExifData.ByteOrder.get -> Java.Nio.ByteOrder!
virtual AndroidX.Camera.Core.Impl.Utils.ExifData.GetAttribute(string! tag) -> string?
virtual AndroidX.Camera.Core.Impl.Utils.Futures.FutureChain.AddListener(Java.Lang.IRunnable! listener, Java.Util.Concurrent.IExecutor! executor) -> void
virtual AndroidX.Camera.Core.Impl.Utils.Futures.FutureChain.Cancel(bool mayInterruptIfRunning) -> bool
virtual AndroidX.Camera.Core.Impl.Utils.Futures.FutureChain.Get() -> Java.Lang.Object?
virtual AndroidX.Camera.Core.Impl.Utils.Futures.FutureChain.Get(long timeout, Java.Util.Concurrent.TimeUnit! unit) -> Java.Lang.Object?
virtual AndroidX.Camera.Core.Impl.Utils.Futures.FutureChain.IsCancelled.get -> bool
virtual AndroidX.Camera.Core.Impl.Utils.Futures.FutureChain.IsDone.get -> bool
virtual AndroidX.Camera.Core.Internal.Compat.Quirk.CaptureFailedRetryQuirk.RetryCount.get -> int
virtual AndroidX.Camera.Core.Internal.Compat.Workaround.CaptureFailedRetryEnabler.RetryCount.get -> int
virtual AndroidX.Camera.Core.Internal.Compat.Workaround.ExifRotationAvailability.IsRotationOptionSupported.get -> bool
virtual AndroidX.Camera.Core.Internal.Compat.Workaround.ExifRotationAvailability.ShouldUseExifOrientation(AndroidX.Camera.Core.IImageProxy! image) -> bool
virtual AndroidX.Camera.Core.Internal.Compat.Workaround.InvalidJpegDataParser.GetValidDataLength(byte[]! bytes) -> int
virtual AndroidX.Camera.Core.Internal.Compat.Workaround.JpegMetadataCorrector.JpegImageToJpegByteArray(AndroidX.Camera.Core.IImageProxy! image) -> byte[]!
virtual AndroidX.Camera.Core.Internal.Compat.Workaround.JpegMetadataCorrector.NeedCorrectJpegMetadata() -> bool
virtual AndroidX.Camera.Core.Internal.Compat.Workaround.SurfaceSorter.Sort(System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.SessionConfig.OutputConfig!>! outputConfigs) -> void
virtual AndroidX.Camera.Core.Internal.SupportedOutputSizesSorter.GetSortedSupportedOutputSizes(AndroidX.Camera.Core.Impl.IUseCaseConfig! useCaseConfig) -> System.Collections.Generic.IList<Android.Util.Size!>!
virtual AndroidX.Camera.Core.Internal.Utils.ArrayRingBuffer.Dequeue() -> Java.Lang.Object!
virtual AndroidX.Camera.Core.Internal.Utils.ArrayRingBuffer.Enqueue(Java.Lang.Object! element) -> void
virtual AndroidX.Camera.Core.Internal.Utils.ArrayRingBuffer.IsEmpty.get -> bool
virtual AndroidX.Camera.Core.Internal.Utils.ArrayRingBuffer.MaxCapacity.get -> int
virtual AndroidX.Camera.Core.LayoutSettings.Alpha.get -> float
virtual AndroidX.Camera.Core.LayoutSettings.Height.get -> float
virtual AndroidX.Camera.Core.LayoutSettings.OffsetX.get -> float
virtual AndroidX.Camera.Core.LayoutSettings.OffsetY.get -> float
virtual AndroidX.Camera.Core.LayoutSettings.Width.get -> float
virtual AndroidX.Camera.Core.MetadataImageReader.AcquireLatestImage() -> AndroidX.Camera.Core.IImageProxy?
virtual AndroidX.Camera.Core.MetadataImageReader.AcquireNextImage() -> AndroidX.Camera.Core.IImageProxy?
virtual AndroidX.Camera.Core.MetadataImageReader.CameraCaptureCallback.get -> AndroidX.Camera.Core.Impl.CameraCaptureCallback!
virtual AndroidX.Camera.Core.MetadataImageReader.ClearOnImageAvailableListener() -> void
virtual AndroidX.Camera.Core.MetadataImageReader.Close() -> void
virtual AndroidX.Camera.Core.MetadataImageReader.Height.get -> int
virtual AndroidX.Camera.Core.MetadataImageReader.ImageFormat.get -> int
virtual AndroidX.Camera.Core.MetadataImageReader.MaxImages.get -> int
virtual AndroidX.Camera.Core.MetadataImageReader.OnImageClose(AndroidX.Camera.Core.IImageProxy! image) -> void
virtual AndroidX.Camera.Core.MetadataImageReader.SetOnImageAvailableListener(AndroidX.Camera.Core.Impl.IImageReaderProxyOnImageAvailableListener! listener, Java.Util.Concurrent.IExecutor! executor) -> void
virtual AndroidX.Camera.Core.MetadataImageReader.Surface.get -> Android.Views.Surface?
virtual AndroidX.Camera.Core.MetadataImageReader.Width.get -> int
virtual AndroidX.Camera.Core.MeteringPoint.GetX() -> float
virtual AndroidX.Camera.Core.MeteringPoint.GetY() -> float
virtual AndroidX.Camera.Core.MeteringPoint.Size.get -> float
virtual AndroidX.Camera.Core.MeteringPoint.SurfaceAspectRatio.get -> Android.Util.Rational?
virtual AndroidX.Camera.Core.MeteringPointFactory.SetSurfaceAspectRatio(Android.Util.Rational! surfaceAspectRatio) -> void
virtual AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessor.OnFrameAvailable(Android.Graphics.SurfaceTexture? surfaceTexture) -> void
virtual AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessor.OnInputSurface(AndroidX.Camera.Core.SurfaceRequest! surfaceRequest) -> void
virtual AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessor.OnOutputSurface(AndroidX.Camera.Core.ISurfaceOutput! surfaceOutput) -> void
virtual AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessor.Release() -> void
virtual AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.Release() -> void
virtual AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.Transform(AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.In! in) -> AndroidX.Camera.Core.Processing.Concurrent.DualSurfaceProcessorNode.Out!
virtual AndroidX.Camera.Core.Processing.DefaultSurfaceProcessor.OnFrameAvailable(Android.Graphics.SurfaceTexture! surfaceTexture) -> void
virtual AndroidX.Camera.Core.Processing.DefaultSurfaceProcessor.OnInputSurface(AndroidX.Camera.Core.SurfaceRequest! surfaceRequest) -> void
virtual AndroidX.Camera.Core.Processing.DefaultSurfaceProcessor.OnOutputSurface(AndroidX.Camera.Core.ISurfaceOutput! surfaceOutput) -> void
virtual AndroidX.Camera.Core.Processing.DefaultSurfaceProcessor.Release() -> void
virtual AndroidX.Camera.Core.Processing.DefaultSurfaceProcessor.Snapshot(int jpegQuality, int rotationDegrees) -> Google.Common.Util.Concurrent.IListenableFuture!
virtual AndroidX.Camera.Core.Processing.Edge.Accept(Java.Lang.Object! t) -> void
virtual AndroidX.Camera.Core.Processing.Edge.SetListener(AndroidX.Core.Util.IConsumer! listener) -> void
virtual AndroidX.Camera.Core.Processing.ImageProcessorRequest.InputImage.get -> AndroidX.Camera.Core.IImageProxy!
virtual AndroidX.Camera.Core.Processing.ImageProcessorRequest.OutputFormat.get -> int
virtual AndroidX.Camera.Core.Processing.InternalImageProcessor.SafeProcess(AndroidX.Camera.Core.IImageProcessorRequest! request) -> AndroidX.Camera.Core.IImageProcessorResponse!
virtual AndroidX.Camera.Core.Processing.OpenGlRenderer.CreateOutputSurfaceInternal(Android.Views.Surface! surface) -> AndroidX.Camera.Core.Processing.Util.OutputSurface?
virtual AndroidX.Camera.Core.Processing.OpenGlRenderer.GetOutSurfaceOrThrow(Android.Views.Surface! surface) -> AndroidX.Camera.Core.Processing.Util.OutputSurface!
virtual AndroidX.Camera.Core.Processing.OpenGlRenderer.Init(AndroidX.Camera.Core.DynamicRange! dynamicRange) -> AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo!
virtual AndroidX.Camera.Core.Processing.OpenGlRenderer.Init(AndroidX.Camera.Core.DynamicRange! dynamicRange, System.Collections.Generic.IDictionary<AndroidX.Camera.Core.Processing.Util.GLUtils.InputFormat!, AndroidX.Camera.Core.Processing.IShaderProvider!>! shaderOverrides) -> AndroidX.Camera.Core.Processing.Util.GraphicDeviceInfo!
virtual AndroidX.Camera.Core.Processing.OpenGlRenderer.MakeCurrent(Android.Opengl.EGLSurface! eglSurface) -> void
virtual AndroidX.Camera.Core.Processing.OpenGlRenderer.RegisterOutputSurface(Android.Views.Surface! surface) -> void
virtual AndroidX.Camera.Core.Processing.OpenGlRenderer.Release() -> void
virtual AndroidX.Camera.Core.Processing.OpenGlRenderer.RemoveOutputSurfaceInternal(Android.Views.Surface! surface, bool unregister) -> void
virtual AndroidX.Camera.Core.Processing.OpenGlRenderer.Render(long timestampNs, float[]! textureTransform, Android.Views.Surface! surface) -> void
virtual AndroidX.Camera.Core.Processing.OpenGlRenderer.SetInputFormat(AndroidX.Camera.Core.Processing.Util.GLUtils.InputFormat! inputFormat) -> void
virtual AndroidX.Camera.Core.Processing.OpenGlRenderer.Snapshot(Android.Util.Size! size, float[]! textureTransform) -> Android.Graphics.Bitmap!
virtual AndroidX.Camera.Core.Processing.OpenGlRenderer.TextureName.get -> int
virtual AndroidX.Camera.Core.Processing.OpenGlRenderer.UnregisterOutputSurface(Android.Views.Surface! surface) -> void
virtual AndroidX.Camera.Core.Processing.OpenGlRenderer.UseAndConfigureProgramWithTexture(int textureId) -> void
virtual AndroidX.Camera.Core.Processing.Packet.HasCropping.get -> bool
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.AddOnInvalidatedListener(Java.Lang.IRunnable! onInvalidated) -> void
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.AddTransformationUpdateListener(AndroidX.Core.Util.IConsumer! consumer) -> void
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.CreateSurfaceOutputFuture(int format, AndroidX.Camera.Core.SurfaceOutputCameraInputInfo! cameraInputInfo, AndroidX.Camera.Core.SurfaceOutputCameraInputInfo? secondaryCameraInputInfo) -> Google.Common.Util.Concurrent.IListenableFuture!
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.CreateSurfaceRequest(AndroidX.Camera.Core.Impl.ICameraInternal! cameraInternal) -> AndroidX.Camera.Core.SurfaceRequest!
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.CreateSurfaceRequest(AndroidX.Camera.Core.Impl.ICameraInternal! cameraInternal, bool isPrimary) -> AndroidX.Camera.Core.SurfaceRequest!
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.CropRect.get -> Android.Graphics.Rect!
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.DeferrableSurface.get -> AndroidX.Camera.Core.Impl.DeferrableSurface!
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.DeferrableSurfaceForTesting.get -> AndroidX.Camera.Core.Impl.DeferrableSurface!
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.Format.get -> int
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.HasCameraTransform.get -> bool
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.HasProvider.get -> bool
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.Invalidate() -> void
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.IsClosed.get -> bool
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.IsMirroring.get -> bool
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.RemoveTransformationUpdateListener(AndroidX.Core.Util.IConsumer! consumer) -> void
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.RotationDegrees.get -> int
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.SensorToBufferTransform.get -> Android.Graphics.Matrix!
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.SetProvider(AndroidX.Camera.Core.Impl.DeferrableSurface! provider) -> void
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.StreamSpec.get -> AndroidX.Camera.Core.Impl.StreamSpec!
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.Targets.get -> int
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.UpdateTransformation(int rotationDegrees) -> void
virtual AndroidX.Camera.Core.Processing.SurfaceEdge.UpdateTransformation(int rotationDegrees, int targetRotation) -> void
virtual AndroidX.Camera.Core.Processing.SurfaceProcessorNode.Release() -> void
virtual AndroidX.Camera.Core.Processing.SurfaceProcessorNode.SurfaceProcessor.get -> AndroidX.Camera.Core.Processing.ISurfaceProcessorInternal!
virtual AndroidX.Camera.Core.Processing.SurfaceProcessorNode.Transform(AndroidX.Camera.Core.Processing.SurfaceProcessorNode.In! input) -> AndroidX.Camera.Core.Processing.SurfaceProcessorNode.Out!
virtual AndroidX.Camera.Core.Processing.SurfaceProcessorWithExecutor.Executor.get -> Java.Util.Concurrent.IExecutor!
virtual AndroidX.Camera.Core.Processing.SurfaceProcessorWithExecutor.OnInputSurface(AndroidX.Camera.Core.SurfaceRequest! request) -> void
virtual AndroidX.Camera.Core.Processing.SurfaceProcessorWithExecutor.OnOutputSurface(AndroidX.Camera.Core.ISurfaceOutput! surfaceOutput) -> void
virtual AndroidX.Camera.Core.Processing.SurfaceProcessorWithExecutor.Processor.get -> AndroidX.Camera.Core.ISurfaceProcessor!
virtual AndroidX.Camera.Core.Processing.SurfaceProcessorWithExecutor.Release() -> void
virtual AndroidX.Camera.Core.Processing.SurfaceProcessorWithExecutor.Snapshot(int jpegQuality, int rotationDegrees) -> Google.Common.Util.Concurrent.IListenableFuture!
virtual AndroidX.Camera.Core.Processing.Util.GLUtils.Program2D.Delete() -> void
virtual AndroidX.Camera.Core.Processing.Util.GLUtils.Program2D.UpdateAlpha(float alpha) -> void
virtual AndroidX.Camera.Core.Processing.Util.GLUtils.Program2D.UpdateTransformMatrix(float[]! transformMat) -> void
virtual AndroidX.Camera.Core.Processing.Util.GLUtils.Program2D.Use() -> void
virtual AndroidX.Camera.Core.Processing.Util.GLUtils.SamplerShaderProgram.UpdateTextureMatrix(float[]! textureMat) -> void
virtual AndroidX.Camera.Core.ResolutionInfo.CropRect.get -> Android.Graphics.Rect!
virtual AndroidX.Camera.Core.ResolutionInfo.Resolution.get -> Android.Util.Size!
virtual AndroidX.Camera.Core.ResolutionInfo.RotationDegrees.get -> int
virtual AndroidX.Camera.Core.SafeCloseImageReaderProxy.AcquireLatestImage() -> AndroidX.Camera.Core.IImageProxy?
virtual AndroidX.Camera.Core.SafeCloseImageReaderProxy.AcquireNextImage() -> AndroidX.Camera.Core.IImageProxy?
virtual AndroidX.Camera.Core.SafeCloseImageReaderProxy.Capacity.get -> int
virtual AndroidX.Camera.Core.SafeCloseImageReaderProxy.ClearOnImageAvailableListener() -> void
virtual AndroidX.Camera.Core.SafeCloseImageReaderProxy.Close() -> void
virtual AndroidX.Camera.Core.SafeCloseImageReaderProxy.Height.get -> int
virtual AndroidX.Camera.Core.SafeCloseImageReaderProxy.ImageFormat.get -> int
virtual AndroidX.Camera.Core.SafeCloseImageReaderProxy.ImageReaderProxy.get -> AndroidX.Camera.Core.Impl.IImageReaderProxy!
virtual AndroidX.Camera.Core.SafeCloseImageReaderProxy.IsClosed.get -> bool
virtual AndroidX.Camera.Core.SafeCloseImageReaderProxy.MaxImages.get -> int
virtual AndroidX.Camera.Core.SafeCloseImageReaderProxy.SafeClose() -> void
virtual AndroidX.Camera.Core.SafeCloseImageReaderProxy.SetOnImageAvailableListener(AndroidX.Camera.Core.Impl.IImageReaderProxyOnImageAvailableListener! listener, Java.Util.Concurrent.IExecutor! executor) -> void
virtual AndroidX.Camera.Core.SafeCloseImageReaderProxy.SetOnImageCloseListener(AndroidX.Camera.Core.ForwardingImageProxy.IOnImageCloseListener! listener) -> void
virtual AndroidX.Camera.Core.SafeCloseImageReaderProxy.Surface.get -> Android.Views.Surface?
virtual AndroidX.Camera.Core.SafeCloseImageReaderProxy.Width.get -> int
virtual AndroidX.Camera.Core.StreamSharing.StreamSharing.Children.get -> System.Collections.Generic.ICollection<AndroidX.Camera.Core.UseCase!>!
virtual AndroidX.Camera.Core.StreamSharing.StreamSharing.SharingInputEdge.get -> AndroidX.Camera.Core.Processing.SurfaceEdge?
virtual AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.CaptureTypes.get -> System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.UseCaseConfigFactoryCaptureType!>!
virtual AndroidX.Camera.Core.StreamSharing.StreamSharingConfig.Config.get -> AndroidX.Camera.Core.Impl.IConfig!
virtual AndroidX.Camera.Core.StreamSharing.VirtualCameraCaptureResult.AeMode.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeMode!
virtual AndroidX.Camera.Core.StreamSharing.VirtualCameraCaptureResult.AeState.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AeState!
virtual AndroidX.Camera.Core.StreamSharing.VirtualCameraCaptureResult.AfMode.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfMode!
virtual AndroidX.Camera.Core.StreamSharing.VirtualCameraCaptureResult.AfState.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AfState!
virtual AndroidX.Camera.Core.StreamSharing.VirtualCameraCaptureResult.AwbMode.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbMode!
virtual AndroidX.Camera.Core.StreamSharing.VirtualCameraCaptureResult.AwbState.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.AwbState!
virtual AndroidX.Camera.Core.StreamSharing.VirtualCameraCaptureResult.FlashState.get -> AndroidX.Camera.Core.Impl.CameraCaptureMetaData.FlashState!
virtual AndroidX.Camera.Core.StreamSharing.VirtualCameraCaptureResult.TagBundle.get -> AndroidX.Camera.Core.Impl.TagBundle!
virtual AndroidX.Camera.Core.StreamSharing.VirtualCameraCaptureResult.Timestamp.get -> long
virtual AndroidX.Camera.Core.UseCase.AppConfig.get -> AndroidX.Camera.Core.Impl.IUseCaseConfig!
virtual AndroidX.Camera.Core.UseCase.AppTargetRotation.get -> int
virtual AndroidX.Camera.Core.UseCase.AttachedStreamSpec.get -> AndroidX.Camera.Core.Impl.StreamSpec?
virtual AndroidX.Camera.Core.UseCase.AttachedSurfaceResolution.get -> Android.Util.Size?
virtual AndroidX.Camera.Core.UseCase.Camera.get -> AndroidX.Camera.Core.Impl.ICameraInternal?
virtual AndroidX.Camera.Core.UseCase.CameraControl.get -> AndroidX.Camera.Core.Impl.ICameraControlInternal!
virtual AndroidX.Camera.Core.UseCase.CameraId.get -> string!
virtual AndroidX.Camera.Core.UseCase.CurrentConfig.get -> AndroidX.Camera.Core.Impl.IUseCaseConfig!
virtual AndroidX.Camera.Core.UseCase.Effect.get -> AndroidX.Camera.Core.CameraEffect?
virtual AndroidX.Camera.Core.UseCase.Effect.set -> void
virtual AndroidX.Camera.Core.UseCase.GetRelativeRotation(AndroidX.Camera.Core.Impl.ICameraInternal! cameraInternal) -> int
virtual AndroidX.Camera.Core.UseCase.GetRelativeRotation(AndroidX.Camera.Core.Impl.ICameraInternal! cameraInternal, bool requireMirroring) -> int
virtual AndroidX.Camera.Core.UseCase.ImageFormat.get -> int
virtual AndroidX.Camera.Core.UseCase.IsCurrentCamera(string! cameraId) -> bool
virtual AndroidX.Camera.Core.UseCase.IsEffectTargetsSupported(int effectTargets) -> bool
virtual AndroidX.Camera.Core.UseCase.IsMirroringRequired(AndroidX.Camera.Core.Impl.ICameraInternal! camera) -> bool
virtual AndroidX.Camera.Core.UseCase.MergeConfigs(AndroidX.Camera.Core.Impl.ICameraInfoInternal! cameraInfo, AndroidX.Camera.Core.Impl.IUseCaseConfig? extendedConfig, AndroidX.Camera.Core.Impl.IUseCaseConfig? cameraDefaultConfig) -> AndroidX.Camera.Core.Impl.IUseCaseConfig!
virtual AndroidX.Camera.Core.UseCase.MirrorModeInternal.get -> int
virtual AndroidX.Camera.Core.UseCase.Name.get -> string!
virtual AndroidX.Camera.Core.UseCase.OnBind() -> void
virtual AndroidX.Camera.Core.UseCase.OnCameraControlReady() -> void
virtual AndroidX.Camera.Core.UseCase.OnMergeConfig(AndroidX.Camera.Core.Impl.ICameraInfoInternal! cameraInfo, AndroidX.Camera.Core.Impl.IUseCaseConfigBuilder! builder) -> AndroidX.Camera.Core.Impl.IUseCaseConfig!
virtual AndroidX.Camera.Core.UseCase.OnStateAttached() -> void
virtual AndroidX.Camera.Core.UseCase.OnStateDetached() -> void
virtual AndroidX.Camera.Core.UseCase.OnSuggestedStreamSpecImplementationOptionsUpdated(AndroidX.Camera.Core.Impl.IConfig! config) -> AndroidX.Camera.Core.Impl.StreamSpec!
virtual AndroidX.Camera.Core.UseCase.OnSuggestedStreamSpecUpdated(AndroidX.Camera.Core.Impl.StreamSpec! primaryStreamSpec, AndroidX.Camera.Core.Impl.StreamSpec? secondaryStreamSpec) -> AndroidX.Camera.Core.Impl.StreamSpec!
virtual AndroidX.Camera.Core.UseCase.OnUnbind() -> void
virtual AndroidX.Camera.Core.UseCase.PhysicalCameraId.get -> string?
virtual AndroidX.Camera.Core.UseCase.PhysicalCameraId.set -> void
virtual AndroidX.Camera.Core.UseCase.ResolutionInfoInternal.get -> AndroidX.Camera.Core.ResolutionInfo?
virtual AndroidX.Camera.Core.UseCase.SecondaryCamera.get -> AndroidX.Camera.Core.Impl.ICameraInternal?
virtual AndroidX.Camera.Core.UseCase.SecondaryCameraId.get -> string?
virtual AndroidX.Camera.Core.UseCase.SecondarySessionConfig.get -> AndroidX.Camera.Core.Impl.SessionConfig!
virtual AndroidX.Camera.Core.UseCase.SensorToBufferTransformMatrix.get -> Android.Graphics.Matrix!
virtual AndroidX.Camera.Core.UseCase.SensorToBufferTransformMatrix.set -> void
virtual AndroidX.Camera.Core.UseCase.SessionConfig.get -> AndroidX.Camera.Core.Impl.SessionConfig!
virtual AndroidX.Camera.Core.UseCase.SetTargetRotationInternal(int targetRotation) -> bool
virtual AndroidX.Camera.Core.UseCase.SupportedEffectTargets.get -> System.Collections.Generic.ICollection<Java.Lang.Integer!>!
virtual AndroidX.Camera.Core.UseCase.TargetFrameRateInternal.get -> Android.Util.Range!
virtual AndroidX.Camera.Core.UseCase.TargetRotationInternal.get -> int
virtual AndroidX.Camera.Core.UseCase.UpdateSessionConfig(System.Collections.Generic.IList<AndroidX.Camera.Core.Impl.SessionConfig!>! sessionConfigs) -> void
virtual AndroidX.Camera.Core.UseCase.UpdateSuggestedStreamSpec(AndroidX.Camera.Core.Impl.StreamSpec! primaryStreamSpec, AndroidX.Camera.Core.Impl.StreamSpec? secondaryStreamSpec) -> void
virtual AndroidX.Camera.Core.UseCase.UpdateSuggestedStreamSpecImplementationOptions(AndroidX.Camera.Core.Impl.IConfig! config) -> void
virtual AndroidX.Camera.Core.UseCase.ViewPortCropRect.get -> Android.Graphics.Rect?
virtual AndroidX.Camera.Core.UseCase.ViewPortCropRect.set -> void
