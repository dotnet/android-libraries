#nullable enable
AndroidX.Sqlite.DataTypeAttribute
AndroidX.Sqlite.DataTypeAttribute.DataTypeAttribute() -> void
AndroidX.Sqlite.Db.ISupportSQLiteDatabase
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.AttachedDbs.get -> System.Collections.Generic.IList<Android.Util.Pair!>?
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.BeginTransaction() -> void
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.BeginTransactionNonExclusive() -> void
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.BeginTransactionReadOnly() -> void
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.BeginTransactionWithListener(Android.Database.Sqlite.ISQLiteTransactionListener! transactionListener) -> void
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.BeginTransactionWithListenerNonExclusive(Android.Database.Sqlite.ISQLiteTransactionListener! transactionListener) -> void
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.BeginTransactionWithListenerReadOnly(Android.Database.Sqlite.ISQLiteTransactionListener! transactionListener) -> void
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.CompileStatement(string! sql) -> AndroidX.Sqlite.Db.ISupportSQLiteStatement!
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.Delete(string! table, string? whereClause, Java.Lang.Object![]? whereArgs) -> int
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.DisableWriteAheadLogging() -> void
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.EnableWriteAheadLogging() -> bool
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.EndTransaction() -> void
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.ExecPerConnectionSQL(string! sql, Java.Lang.Object![]? bindArgs) -> void
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.ExecSQL(string! sql) -> void
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.ExecSQL(string! sql, Java.Lang.Object![]! bindArgs) -> void
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.InTransaction() -> bool
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.Insert(string! table, int conflictAlgorithm, Android.Content.ContentValues! values) -> long
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.IsDatabaseIntegrityOk.get -> bool
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.IsDbLockedByCurrentThread.get -> bool
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.IsExecPerConnectionSQLSupported.get -> bool
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.IsOpen.get -> bool
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.IsReadOnly.get -> bool
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.IsWriteAheadLoggingEnabled.get -> bool
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.MaximumSize.get -> long
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.NeedUpgrade(int newVersion) -> bool
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.PageSize.get -> long
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.PageSize.set -> void
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.Path.get -> string?
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.Query(AndroidX.Sqlite.Db.ISupportSQLiteQuery! query) -> Android.Database.ICursor!
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.Query(AndroidX.Sqlite.Db.ISupportSQLiteQuery! query, Android.OS.CancellationSignal? cancellationSignal) -> Android.Database.ICursor!
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.Query(string! query) -> Android.Database.ICursor!
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.Query(string! query, Java.Lang.Object![]! bindArgs) -> Android.Database.ICursor!
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.SetForeignKeyConstraintsEnabled(bool enabled) -> void
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.SetLocale(Java.Util.Locale! locale) -> void
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.SetMaxSqlCacheSize(int cacheSize) -> void
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.SetMaximumSize(long numBytes) -> long
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.SetTransactionSuccessful() -> void
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.Update(string! table, int conflictAlgorithm, Android.Content.ContentValues! values, string? whereClause, Java.Lang.Object![]? whereArgs) -> int
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.Version.get -> int
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.Version.set -> void
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.YieldIfContendedSafely() -> bool
AndroidX.Sqlite.Db.ISupportSQLiteDatabase.YieldIfContendedSafely(long sleepAfterYieldDelayMillis) -> bool
AndroidX.Sqlite.Db.ISupportSQLiteOpenHelper
AndroidX.Sqlite.Db.ISupportSQLiteOpenHelper.Close() -> void
AndroidX.Sqlite.Db.ISupportSQLiteOpenHelper.DatabaseName.get -> string?
AndroidX.Sqlite.Db.ISupportSQLiteOpenHelper.ReadableDatabase.get -> AndroidX.Sqlite.Db.ISupportSQLiteDatabase!
AndroidX.Sqlite.Db.ISupportSQLiteOpenHelper.SetWriteAheadLoggingEnabled(bool enabled) -> void
AndroidX.Sqlite.Db.ISupportSQLiteOpenHelper.WritableDatabase.get -> AndroidX.Sqlite.Db.ISupportSQLiteDatabase!
AndroidX.Sqlite.Db.ISupportSQLiteOpenHelperFactory
AndroidX.Sqlite.Db.ISupportSQLiteOpenHelperFactory.Create(AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration! configuration) -> AndroidX.Sqlite.Db.ISupportSQLiteOpenHelper!
AndroidX.Sqlite.Db.ISupportSQLiteProgram
AndroidX.Sqlite.Db.ISupportSQLiteProgram.BindBlob(int index, byte[]! value) -> void
AndroidX.Sqlite.Db.ISupportSQLiteProgram.BindDouble(int index, double value) -> void
AndroidX.Sqlite.Db.ISupportSQLiteProgram.BindLong(int index, long value) -> void
AndroidX.Sqlite.Db.ISupportSQLiteProgram.BindNull(int index) -> void
AndroidX.Sqlite.Db.ISupportSQLiteProgram.BindString(int index, string! value) -> void
AndroidX.Sqlite.Db.ISupportSQLiteProgram.ClearBindings() -> void
AndroidX.Sqlite.Db.ISupportSQLiteQuery
AndroidX.Sqlite.Db.ISupportSQLiteQuery.ArgCount.get -> int
AndroidX.Sqlite.Db.ISupportSQLiteQuery.BindTo(AndroidX.Sqlite.Db.ISupportSQLiteProgram! statement) -> void
AndroidX.Sqlite.Db.ISupportSQLiteQuery.Sql.get -> string!
AndroidX.Sqlite.Db.ISupportSQLiteStatement
AndroidX.Sqlite.Db.ISupportSQLiteStatement.Execute() -> void
AndroidX.Sqlite.Db.ISupportSQLiteStatement.ExecuteInsert() -> long
AndroidX.Sqlite.Db.ISupportSQLiteStatement.ExecuteUpdateDelete() -> int
AndroidX.Sqlite.Db.ISupportSQLiteStatement.SimpleQueryForLong() -> long
AndroidX.Sqlite.Db.ISupportSQLiteStatement.SimpleQueryForString() -> string?
AndroidX.Sqlite.Db.SimpleSQLiteQuery
AndroidX.Sqlite.Db.SimpleSQLiteQuery.ArgCount.get -> int
AndroidX.Sqlite.Db.SimpleSQLiteQuery.BindTo(AndroidX.Sqlite.Db.ISupportSQLiteProgram! statement) -> void
AndroidX.Sqlite.Db.SimpleSQLiteQuery.Companion
AndroidX.Sqlite.Db.SimpleSQLiteQuery.Companion.Bind(AndroidX.Sqlite.Db.ISupportSQLiteProgram! statement, Java.Lang.Object![]? bindArgs) -> void
AndroidX.Sqlite.Db.SimpleSQLiteQuery.SimpleSQLiteQuery(string! query) -> void
AndroidX.Sqlite.Db.SimpleSQLiteQuery.SimpleSQLiteQuery(string! query, Java.Lang.Object![]? bindArgs) -> void
AndroidX.Sqlite.Db.SimpleSQLiteQuery.Sql.get -> string!
AndroidX.Sqlite.Db.SupportSQLiteCompat
AndroidX.Sqlite.Db.SupportSQLiteOpenHelperCallback
AndroidX.Sqlite.Db.SupportSQLiteOpenHelperCallback.SupportSQLiteOpenHelperCallback(int version) -> void
AndroidX.Sqlite.Db.SupportSQLiteOpenHelperCallback.SupportSQLiteOpenHelperCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Sqlite.Db.SupportSQLiteOpenHelperCallback.Version.get -> int
AndroidX.Sqlite.Db.SupportSQLiteOpenHelperCallback.Version.set -> void
AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration
AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.AllowDataLossOnRecovery.get -> bool
AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.AllowDataLossOnRecovery.set -> void
AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Builder
AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Builder.Builder(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Callback.get -> AndroidX.Sqlite.Db.SupportSQLiteOpenHelperCallback!
AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Callback.set -> void
AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Companion
AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Companion.Builder(Android.Content.Context! context) -> AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Builder!
AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Context.get -> Android.Content.Context!
AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Context.set -> void
AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Name.get -> string?
AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Name.set -> void
AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.SupportSQLiteOpenHelperConfiguration(Android.Content.Context! context, string? name, AndroidX.Sqlite.Db.SupportSQLiteOpenHelperCallback! callback, bool useNoBackupDirectory, bool allowDataLossOnRecovery) -> void
AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.UseNoBackupDirectory.get -> bool
AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.UseNoBackupDirectory.set -> void
AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder
AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder.Columns(string![]? columns) -> AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder!
AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder.Companion
AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder.Companion.Builder(string! tableName) -> AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder!
AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder.Create() -> AndroidX.Sqlite.Db.ISupportSQLiteQuery!
AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder.Distinct() -> AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder!
AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder.GroupBy(string? groupBy) -> AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder!
AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder.Having(string? having) -> AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder!
AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder.Limit(string! limit) -> AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder!
AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder.OrderBy(string? orderBy) -> AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder!
AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder.Selection(string? selection, Java.Lang.Object![]? bindArgs) -> AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder!
AndroidX.Sqlite.IDataType
AndroidX.Sqlite.ISQLiteConnection
AndroidX.Sqlite.ISQLiteConnection.Close() -> void
AndroidX.Sqlite.ISQLiteConnection.InTransaction() -> bool
AndroidX.Sqlite.ISQLiteConnection.Prepare(string! sql) -> AndroidX.Sqlite.ISQLiteStatement!
AndroidX.Sqlite.ISQLiteDriver
AndroidX.Sqlite.ISQLiteDriver.HasConnectionPool.get -> bool
AndroidX.Sqlite.ISQLiteDriver.Open(string! fileName) -> AndroidX.Sqlite.ISQLiteConnection!
AndroidX.Sqlite.ISQLiteStatement
AndroidX.Sqlite.ISQLiteStatement.BindBlob(int index, byte[]! value) -> void
AndroidX.Sqlite.ISQLiteStatement.BindBoolean(int index, bool value) -> void
AndroidX.Sqlite.ISQLiteStatement.BindDouble(int index, double value) -> void
AndroidX.Sqlite.ISQLiteStatement.BindFloat(int index, float value) -> void
AndroidX.Sqlite.ISQLiteStatement.BindInt(int index, int value) -> void
AndroidX.Sqlite.ISQLiteStatement.BindLong(int index, long value) -> void
AndroidX.Sqlite.ISQLiteStatement.BindNull(int index) -> void
AndroidX.Sqlite.ISQLiteStatement.BindText(int index, string! value) -> void
AndroidX.Sqlite.ISQLiteStatement.ClearBindings() -> void
AndroidX.Sqlite.ISQLiteStatement.Close() -> void
AndroidX.Sqlite.ISQLiteStatement.ColumnCount.get -> int
AndroidX.Sqlite.ISQLiteStatement.ColumnNames.get -> System.Collections.Generic.IList<string!>!
AndroidX.Sqlite.ISQLiteStatement.GetBlob(int index) -> byte[]!
AndroidX.Sqlite.ISQLiteStatement.GetBoolean(int index) -> bool
AndroidX.Sqlite.ISQLiteStatement.GetColumnName(int index) -> string!
AndroidX.Sqlite.ISQLiteStatement.GetColumnType(int index) -> int
AndroidX.Sqlite.ISQLiteStatement.GetDouble(int index) -> double
AndroidX.Sqlite.ISQLiteStatement.GetFloat(int index) -> float
AndroidX.Sqlite.ISQLiteStatement.GetInt(int index) -> int
AndroidX.Sqlite.ISQLiteStatement.GetLong(int index) -> long
AndroidX.Sqlite.ISQLiteStatement.GetText(int index) -> string!
AndroidX.Sqlite.ISQLiteStatement.IsNull(int index) -> bool
AndroidX.Sqlite.ISQLiteStatement.Reset() -> void
AndroidX.Sqlite.ISQLiteStatement.Step() -> bool
AndroidX.Sqlite.SQLite
AndroidX.Sqlite.SQLiteException_androidKt
abstract AndroidX.Sqlite.Db.SupportSQLiteOpenHelperCallback.OnCreate(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> void
abstract AndroidX.Sqlite.Db.SupportSQLiteOpenHelperCallback.OnUpgrade(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db, int oldVersion, int newVersion) -> void
const AndroidX.Sqlite.SQLite.SqliteDataBlob = 4 -> int
const AndroidX.Sqlite.SQLite.SqliteDataFloat = 2 -> int
const AndroidX.Sqlite.SQLite.SqliteDataInteger = 1 -> int
const AndroidX.Sqlite.SQLite.SqliteDataNull = 5 -> int
const AndroidX.Sqlite.SQLite.SqliteDataText = 3 -> int
override AndroidX.Sqlite.Db.SimpleSQLiteQuery.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Sqlite.Db.SimpleSQLiteQuery.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Sqlite.Db.SupportSQLiteCompat.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Sqlite.Db.SupportSQLiteOpenHelperCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Sqlite.Db.SupportSQLiteOpenHelperCallback.ThresholdClass.get -> nint
override AndroidX.Sqlite.Db.SupportSQLiteOpenHelperCallback.ThresholdType.get -> System.Type!
override AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Builder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Builder.ThresholdClass.get -> nint
override AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Builder.ThresholdType.get -> System.Type!
override AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Sqlite.SQLite.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Sqlite.SQLiteException_androidKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
static AndroidX.Sqlite.Db.SimpleSQLiteQuery.Bind(AndroidX.Sqlite.Db.ISupportSQLiteProgram! statement, Java.Lang.Object![]? bindArgs) -> void
static AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.InvokeBuilder(Android.Content.Context! context) -> AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Builder!
static AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder.Builder(string! tableName) -> AndroidX.Sqlite.Db.SupportSQLiteQueryBuilder!
static AndroidX.Sqlite.SQLite.ExecSQL(AndroidX.Sqlite.ISQLiteConnection! obj, string! sql) -> void
static AndroidX.Sqlite.SQLite.ThrowSQLiteException(int errorCode, string? errorMsg) -> Java.Lang.Void!
virtual AndroidX.Sqlite.Db.SupportSQLiteOpenHelperCallback.OnConfigure(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> void
virtual AndroidX.Sqlite.Db.SupportSQLiteOpenHelperCallback.OnCorruption(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> void
virtual AndroidX.Sqlite.Db.SupportSQLiteOpenHelperCallback.OnDowngrade(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db, int oldVersion, int newVersion) -> void
virtual AndroidX.Sqlite.Db.SupportSQLiteOpenHelperCallback.OnOpen(AndroidX.Sqlite.Db.ISupportSQLiteDatabase! db) -> void
virtual AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Builder.AllowDataLossOnRecovery(bool allowDataLossOnRecovery) -> AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Builder!
virtual AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Builder.Build() -> AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration!
virtual AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Builder.Callback(AndroidX.Sqlite.Db.SupportSQLiteOpenHelperCallback! callback) -> AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Builder!
virtual AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Builder.Name(string? name) -> AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Builder!
virtual AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Builder.NoBackupDirectory(bool useNoBackupDirectory) -> AndroidX.Sqlite.Db.SupportSQLiteOpenHelperConfiguration.Builder!
