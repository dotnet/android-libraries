#nullable enable
AndroidX.DataStore.Core.Actual_jvmKt
AndroidX.DataStore.Core.CloseableKt
AndroidX.DataStore.Core.CorruptionException
AndroidX.DataStore.Core.CorruptionException.CorruptionException(string! message, Java.Lang.Throwable? cause) -> void
AndroidX.DataStore.Core.DataStoreFactory
AndroidX.DataStore.Core.DataStoreFactory.Create(AndroidX.DataStore.Core.ISerializer! serializer, AndroidX.DataStore.Core.Handlers.ReplaceFileCorruptionHandler? corruptionHandler, Kotlin.Jvm.Functions.IFunction0! produceFile) -> AndroidX.DataStore.Core.IDataStore!
AndroidX.DataStore.Core.DataStoreFactory.Create(AndroidX.DataStore.Core.ISerializer! serializer, AndroidX.DataStore.Core.Handlers.ReplaceFileCorruptionHandler? corruptionHandler, System.Collections.IList! migrations, Kotlin.Jvm.Functions.IFunction0! produceFile) -> AndroidX.DataStore.Core.IDataStore!
AndroidX.DataStore.Core.DataStoreFactory.Create(AndroidX.DataStore.Core.ISerializer! serializer, AndroidX.DataStore.Core.Handlers.ReplaceFileCorruptionHandler? corruptionHandler, System.Collections.IList! migrations, Xamarin.KotlinX.Coroutines.ICoroutineScope! scope, Kotlin.Jvm.Functions.IFunction0! produceFile) -> AndroidX.DataStore.Core.IDataStore!
AndroidX.DataStore.Core.DataStoreFactory.Create(AndroidX.DataStore.Core.ISerializer! serializer, Kotlin.Jvm.Functions.IFunction0! produceFile) -> AndroidX.DataStore.Core.IDataStore!
AndroidX.DataStore.Core.DataStoreFactory.Create(AndroidX.DataStore.Core.IStorage! storage) -> AndroidX.DataStore.Core.IDataStore!
AndroidX.DataStore.Core.DataStoreFactory.Create(AndroidX.DataStore.Core.IStorage! storage, AndroidX.DataStore.Core.Handlers.ReplaceFileCorruptionHandler? corruptionHandler) -> AndroidX.DataStore.Core.IDataStore!
AndroidX.DataStore.Core.DataStoreFactory.Create(AndroidX.DataStore.Core.IStorage! storage, AndroidX.DataStore.Core.Handlers.ReplaceFileCorruptionHandler? corruptionHandler, System.Collections.IList! migrations) -> AndroidX.DataStore.Core.IDataStore!
AndroidX.DataStore.Core.DataStoreFactory.Create(AndroidX.DataStore.Core.IStorage! storage, AndroidX.DataStore.Core.Handlers.ReplaceFileCorruptionHandler? corruptionHandler, System.Collections.IList! migrations, Xamarin.KotlinX.Coroutines.ICoroutineScope! scope) -> AndroidX.DataStore.Core.IDataStore!
AndroidX.DataStore.Core.FileMoves_androidKt
AndroidX.DataStore.Core.FileStorage
AndroidX.DataStore.Core.FileStorage.CreateConnection() -> AndroidX.DataStore.Core.IStorageConnection!
AndroidX.DataStore.Core.FileStorage.FileStorage(AndroidX.DataStore.Core.ISerializer! serializer, Kotlin.Jvm.Functions.IFunction1! coordinatorProducer, Kotlin.Jvm.Functions.IFunction0! produceFile) -> void
AndroidX.DataStore.Core.Handlers.ReplaceFileCorruptionHandler
AndroidX.DataStore.Core.Handlers.ReplaceFileCorruptionHandler.HandleCorruption(AndroidX.DataStore.Core.CorruptionException! ex, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
AndroidX.DataStore.Core.Handlers.ReplaceFileCorruptionHandler.ReplaceFileCorruptionHandler(Kotlin.Jvm.Functions.IFunction1! produceNewData) -> void
AndroidX.DataStore.Core.ICloseable
AndroidX.DataStore.Core.ICloseable.Close() -> void
AndroidX.DataStore.Core.IDataMigration
AndroidX.DataStore.Core.IDataMigration.CleanUp(Kotlin.Coroutines.IContinuation! p0) -> Java.Lang.Object?
AndroidX.DataStore.Core.IDataMigration.Migrate(Java.Lang.Object? currentData, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
AndroidX.DataStore.Core.IDataMigration.ShouldMigrate(Java.Lang.Object? currentData, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
AndroidX.DataStore.Core.IDataStore
AndroidX.DataStore.Core.IDataStore.Data.get -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
AndroidX.DataStore.Core.IDataStore.UpdateData(Kotlin.Jvm.Functions.IFunction2! transform, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
AndroidX.DataStore.Core.IInterProcessCoordinator
AndroidX.DataStore.Core.IInterProcessCoordinator.GetVersion(Kotlin.Coroutines.IContinuation! p0) -> Java.Lang.Object?
AndroidX.DataStore.Core.IInterProcessCoordinator.IncrementAndGetVersion(Kotlin.Coroutines.IContinuation! p0) -> Java.Lang.Object?
AndroidX.DataStore.Core.IInterProcessCoordinator.Lock(Kotlin.Jvm.Functions.IFunction1! block, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
AndroidX.DataStore.Core.IInterProcessCoordinator.TryLock(Kotlin.Jvm.Functions.IFunction2! block, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
AndroidX.DataStore.Core.IInterProcessCoordinator.UpdateNotifications.get -> Xamarin.KotlinX.Coroutines.Flow.IFlow!
AndroidX.DataStore.Core.IReadScope
AndroidX.DataStore.Core.IReadScope.ReadData(Kotlin.Coroutines.IContinuation! p0) -> Java.Lang.Object?
AndroidX.DataStore.Core.ISerializer
AndroidX.DataStore.Core.ISerializer.DefaultValue.get -> Java.Lang.Object?
AndroidX.DataStore.Core.ISerializer.ReadFrom(System.IO.Stream! input, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
AndroidX.DataStore.Core.ISerializer.WriteTo(Java.Lang.Object? t, System.IO.Stream! output, Kotlin.Coroutines.IContinuation! p2) -> Java.Lang.Object?
AndroidX.DataStore.Core.IStorage
AndroidX.DataStore.Core.IStorage.CreateConnection() -> AndroidX.DataStore.Core.IStorageConnection!
AndroidX.DataStore.Core.IStorageConnection
AndroidX.DataStore.Core.IStorageConnection.Coordinator.get -> AndroidX.DataStore.Core.IInterProcessCoordinator!
AndroidX.DataStore.Core.IStorageConnection.ReadScope(Kotlin.Jvm.Functions.IFunction3! block, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
AndroidX.DataStore.Core.IStorageConnection.WriteScope(Kotlin.Jvm.Functions.IFunction2! block, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
AndroidX.DataStore.Core.IWriteScope
AndroidX.DataStore.Core.IWriteScope.WriteData(Java.Lang.Object? value, Kotlin.Coroutines.IContinuation! p1) -> Java.Lang.Object?
AndroidX.DataStore.Core.InterProcessCoordinatorKt
AndroidX.DataStore.Core.InterProcessCoordinator_jvmKt
AndroidX.DataStore.Core.MultiProcessCoordinatorKt
AndroidX.DataStore.Core.MultiProcessDataStoreFactory
AndroidX.DataStore.Core.MultiProcessDataStoreFactory.Create(AndroidX.DataStore.Core.ISerializer! serializer, AndroidX.DataStore.Core.Handlers.ReplaceFileCorruptionHandler? corruptionHandler, Kotlin.Jvm.Functions.IFunction0! produceFile) -> AndroidX.DataStore.Core.IDataStore!
AndroidX.DataStore.Core.MultiProcessDataStoreFactory.Create(AndroidX.DataStore.Core.ISerializer! serializer, AndroidX.DataStore.Core.Handlers.ReplaceFileCorruptionHandler? corruptionHandler, System.Collections.IList! migrations, Kotlin.Jvm.Functions.IFunction0! produceFile) -> AndroidX.DataStore.Core.IDataStore!
AndroidX.DataStore.Core.MultiProcessDataStoreFactory.Create(AndroidX.DataStore.Core.ISerializer! serializer, AndroidX.DataStore.Core.Handlers.ReplaceFileCorruptionHandler? corruptionHandler, System.Collections.IList! migrations, Xamarin.KotlinX.Coroutines.ICoroutineScope! scope, Kotlin.Jvm.Functions.IFunction0! produceFile) -> AndroidX.DataStore.Core.IDataStore!
AndroidX.DataStore.Core.MultiProcessDataStoreFactory.Create(AndroidX.DataStore.Core.ISerializer! serializer, Kotlin.Jvm.Functions.IFunction0! produceFile) -> AndroidX.DataStore.Core.IDataStore!
AndroidX.DataStore.Core.MultiProcessDataStoreFactory.Create(AndroidX.DataStore.Core.IStorage! storage) -> AndroidX.DataStore.Core.IDataStore!
AndroidX.DataStore.Core.MultiProcessDataStoreFactory.Create(AndroidX.DataStore.Core.IStorage! storage, AndroidX.DataStore.Core.Handlers.ReplaceFileCorruptionHandler? corruptionHandler) -> AndroidX.DataStore.Core.IDataStore!
AndroidX.DataStore.Core.MultiProcessDataStoreFactory.Create(AndroidX.DataStore.Core.IStorage! storage, AndroidX.DataStore.Core.Handlers.ReplaceFileCorruptionHandler? corruptionHandler, System.Collections.IList! migrations) -> AndroidX.DataStore.Core.IDataStore!
AndroidX.DataStore.Core.MultiProcessDataStoreFactory.Create(AndroidX.DataStore.Core.IStorage! storage, AndroidX.DataStore.Core.Handlers.ReplaceFileCorruptionHandler? corruptionHandler, System.Collections.IList! migrations, Xamarin.KotlinX.Coroutines.ICoroutineScope! scope) -> AndroidX.DataStore.Core.IDataStore!
AndroidX.DataStore.Core.MulticastFileObserver_androidKt
AndroidX.DataStore.Core.MutexUtilsKt
AndroidX.DataStore.Core.StorageConnectionKt
override AndroidX.DataStore.Core.Actual_jvmKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.DataStore.Core.CloseableKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.DataStore.Core.CorruptionException.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.DataStore.Core.DataStoreFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.DataStore.Core.FileMoves_androidKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.DataStore.Core.FileStorage.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.DataStore.Core.Handlers.ReplaceFileCorruptionHandler.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.DataStore.Core.InterProcessCoordinatorKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.DataStore.Core.InterProcessCoordinator_jvmKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.DataStore.Core.MultiProcessCoordinatorKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.DataStore.Core.MultiProcessDataStoreFactory.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.DataStore.Core.MulticastFileObserver_androidKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.DataStore.Core.MutexUtilsKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.DataStore.Core.StorageConnectionKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
static AndroidX.DataStore.Core.CloseableKt.Use(Java.Lang.Object! obj, Kotlin.Jvm.Functions.IFunction1! block) -> Java.Lang.Object?
static AndroidX.DataStore.Core.DataStoreFactory.Instance.get -> AndroidX.DataStore.Core.DataStoreFactory!
static AndroidX.DataStore.Core.InterProcessCoordinatorKt.CreateSingleProcessCoordinator(string! filePath) -> AndroidX.DataStore.Core.IInterProcessCoordinator!
static AndroidX.DataStore.Core.InterProcessCoordinator_jvmKt.CreateSingleProcessCoordinator(Java.IO.File! file) -> AndroidX.DataStore.Core.IInterProcessCoordinator!
static AndroidX.DataStore.Core.MultiProcessCoordinatorKt.CreateMultiProcessCoordinator(Kotlin.Coroutines.ICoroutineContext! context, Java.IO.File! file) -> AndroidX.DataStore.Core.IInterProcessCoordinator!
static AndroidX.DataStore.Core.MultiProcessDataStoreFactory.Instance.get -> AndroidX.DataStore.Core.MultiProcessDataStoreFactory!
static AndroidX.DataStore.Core.StorageConnectionKt.ReadData(AndroidX.DataStore.Core.IStorageConnection! obj, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
static AndroidX.DataStore.Core.StorageConnectionKt.WriteData(AndroidX.DataStore.Core.IStorageConnection! obj, Java.Lang.Object? value, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
