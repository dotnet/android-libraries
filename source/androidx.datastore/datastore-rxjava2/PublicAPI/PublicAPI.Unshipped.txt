#nullable enable
AndroidX.DataStore.RxJava2.IRxDataMigration
AndroidX.DataStore.RxJava2.IRxDataMigration.CleanUp() -> ReactiveX.Completable!
AndroidX.DataStore.RxJava2.IRxDataMigration.Migrate(Java.Lang.Object? p0) -> ReactiveX.Single!
AndroidX.DataStore.RxJava2.IRxDataMigration.ShouldMigrate(Java.Lang.Object? p0) -> ReactiveX.Single!
AndroidX.DataStore.RxJava2.IRxSharedPreferencesMigration
AndroidX.DataStore.RxJava2.IRxSharedPreferencesMigration.Migrate(AndroidX.DataStore.Migrations.SharedPreferencesView! sharedPreferencesView, Java.Lang.Object? currentData) -> ReactiveX.Single!
AndroidX.DataStore.RxJava2.IRxSharedPreferencesMigration.ShouldMigrate(Java.Lang.Object? currentData) -> ReactiveX.Single!
AndroidX.DataStore.RxJava2.RxDataStore
AndroidX.DataStore.RxJava2.RxDataStore.Companion
AndroidX.DataStore.RxJava2.RxDataStore.Companion.Create(AndroidX.DataStore.Core.IDataStore! delegateDs, Xamarin.KotlinX.Coroutines.ICoroutineScope! scope) -> AndroidX.DataStore.RxJava2.RxDataStore!
AndroidX.DataStore.RxJava2.RxDataStore.Data() -> ReactiveX.Flowable!
AndroidX.DataStore.RxJava2.RxDataStore.Dispose() -> void
AndroidX.DataStore.RxJava2.RxDataStore.IsDisposed.get -> bool
AndroidX.DataStore.RxJava2.RxDataStore.ShutdownComplete() -> ReactiveX.Completable!
AndroidX.DataStore.RxJava2.RxDataStore.UpdateDataAsync(ReactiveX.Functions.IFunction! transform) -> ReactiveX.Single!
AndroidX.DataStore.RxJava2.RxDataStoreBuilder
AndroidX.DataStore.RxJava2.RxDataStoreBuilder.AddDataMigration(AndroidX.DataStore.Core.IDataMigration! dataMigration) -> AndroidX.DataStore.RxJava2.RxDataStoreBuilder!
AndroidX.DataStore.RxJava2.RxDataStoreBuilder.AddRxDataMigration(AndroidX.DataStore.RxJava2.IRxDataMigration! rxDataMigration) -> AndroidX.DataStore.RxJava2.RxDataStoreBuilder!
AndroidX.DataStore.RxJava2.RxDataStoreBuilder.Build() -> AndroidX.DataStore.RxJava2.RxDataStore!
AndroidX.DataStore.RxJava2.RxDataStoreBuilder.RxDataStoreBuilder(Android.Content.Context! context, string! fileName, AndroidX.DataStore.Core.ISerializer! serializer) -> void
AndroidX.DataStore.RxJava2.RxDataStoreBuilder.RxDataStoreBuilder(Java.Util.Concurrent.ICallable! produceFile, AndroidX.DataStore.Core.ISerializer! serializer) -> void
AndroidX.DataStore.RxJava2.RxDataStoreBuilder.SetCorruptionHandler(AndroidX.DataStore.Core.Handlers.ReplaceFileCorruptionHandler! corruptionHandler) -> AndroidX.DataStore.RxJava2.RxDataStoreBuilder!
AndroidX.DataStore.RxJava2.RxDataStoreBuilder.SetIoScheduler(ReactiveX.Scheduler! ioScheduler) -> AndroidX.DataStore.RxJava2.RxDataStoreBuilder!
AndroidX.DataStore.RxJava2.RxDataStoreDelegateKt
AndroidX.DataStore.RxJava2.RxSharedPreferencesMigrationBuilder
AndroidX.DataStore.RxJava2.RxSharedPreferencesMigrationBuilder.Build() -> AndroidX.DataStore.Core.IDataMigration!
AndroidX.DataStore.RxJava2.RxSharedPreferencesMigrationBuilder.RxSharedPreferencesMigrationBuilder(Android.Content.Context! context, string! sharedPreferencesName, AndroidX.DataStore.RxJava2.IRxSharedPreferencesMigration! rxSharedPreferencesMigration) -> void
AndroidX.DataStore.RxJava2.RxSharedPreferencesMigrationBuilder.SetKeysToMigrate(params string![]! keys) -> AndroidX.DataStore.RxJava2.RxSharedPreferencesMigrationBuilder!
AndroidX.DataStore.RxJava2.RxSharedPreferencesMigrationDefaultImpls
override AndroidX.DataStore.RxJava2.RxDataStore.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.DataStore.RxJava2.RxDataStore.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.DataStore.RxJava2.RxDataStoreBuilder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.DataStore.RxJava2.RxDataStoreDelegateKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.DataStore.RxJava2.RxSharedPreferencesMigrationBuilder.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.DataStore.RxJava2.RxSharedPreferencesMigrationDefaultImpls.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
static AndroidX.DataStore.RxJava2.RxDataStoreDelegateKt.RxDataStore(string! fileName, AndroidX.DataStore.Core.ISerializer! serializer, AndroidX.DataStore.Core.Handlers.ReplaceFileCorruptionHandler? corruptionHandler, Kotlin.Jvm.Functions.IFunction1! produceMigrations, ReactiveX.Scheduler! scheduler) -> Kotlin.Properties.IReadOnlyProperty!
static AndroidX.DataStore.RxJava2.RxSharedPreferencesMigrationDefaultImpls.ShouldMigrate(AndroidX.DataStore.RxJava2.IRxSharedPreferencesMigration! _this, Java.Lang.Object? currentData) -> ReactiveX.Single!
