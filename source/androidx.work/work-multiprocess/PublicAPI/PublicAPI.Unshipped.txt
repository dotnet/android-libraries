#nullable enable
AndroidX.Work.MultiProcess.IRemoteDispatcher
AndroidX.Work.MultiProcess.IRemoteDispatcher.Execute(Java.Lang.Object! p0, AndroidX.Work.MultiProcess.IWorkManagerImplCallback! p1) -> void
AndroidX.Work.MultiProcess.ListenableCallback
AndroidX.Work.MultiProcess.ListenableCallback.ListenableCallback(Java.Util.Concurrent.IExecutor! executor, AndroidX.Work.MultiProcess.IWorkManagerImplCallback! callback, Google.Common.Util.Concurrent.IListenableFuture! future) -> void
AndroidX.Work.MultiProcess.ListenableCallback.ListenableCallback(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.ListenableCallback.ListenableCallbackRunnable
AndroidX.Work.MultiProcess.ListenableCallback.ListenableCallbackRunnable.ListenableCallbackRunnable(AndroidX.Work.MultiProcess.ListenableCallback! callback) -> void
AndroidX.Work.MultiProcess.ListenableCallback.ListenableCallbackRunnable.ListenableCallbackRunnable(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.ListenableWorkerImpl
AndroidX.Work.MultiProcess.ListenableWorkerImpl.ListenableWorkerImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.ListenableWorkerImplClient
AndroidX.Work.MultiProcess.ListenableWorkerImplClient.Connection
AndroidX.Work.MultiProcess.ListenableWorkerImplClient.Connection.Connection() -> void
AndroidX.Work.MultiProcess.ListenableWorkerImplClient.Connection.Connection(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.ListenableWorkerImplClient.ListenableWorkerImplClient(Android.Content.Context! context, Java.Util.Concurrent.IExecutor! executor) -> void
AndroidX.Work.MultiProcess.ListenableWorkerImplClient.ListenableWorkerImplClient(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelConverters
AndroidX.Work.MultiProcess.Parcelable.ParcelUtils
AndroidX.Work.MultiProcess.Parcelable.ParcelableConstraints
AndroidX.Work.MultiProcess.Parcelable.ParcelableConstraints.ParcelableConstraints(Android.OS.Parcel! in) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableConstraints.ParcelableConstraints(AndroidX.Work.Constraints! constraints) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableConstraints.ParcelableConstraints(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableData
AndroidX.Work.MultiProcess.Parcelable.ParcelableData.Companion
AndroidX.Work.MultiProcess.Parcelable.ParcelableData.Data.get -> AndroidX.Work.Data!
AndroidX.Work.MultiProcess.Parcelable.ParcelableData.DescribeContents() -> int
AndroidX.Work.MultiProcess.Parcelable.ParcelableData.ParcelableData(Android.OS.Parcel! inParcel) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableData.ParcelableData(AndroidX.Work.Data! data) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableData.WriteToParcel(Android.OS.Parcel! parcel, Android.OS.ParcelableWriteFlags flags) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableForegroundRequestInfo
AndroidX.Work.MultiProcess.Parcelable.ParcelableForegroundRequestInfo.ParcelableForegroundRequestInfo(Android.OS.Parcel! in) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableForegroundRequestInfo.ParcelableForegroundRequestInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableForegroundRequestInfo.ParcelableForegroundRequestInfo(string! id, AndroidX.Work.ForegroundInfo! foregroundInfo) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableInterruptRequest
AndroidX.Work.MultiProcess.Parcelable.ParcelableInterruptRequest.Companion
AndroidX.Work.MultiProcess.Parcelable.ParcelableInterruptRequest.Component1() -> string!
AndroidX.Work.MultiProcess.Parcelable.ParcelableInterruptRequest.Component2() -> int
AndroidX.Work.MultiProcess.Parcelable.ParcelableInterruptRequest.Copy(string! id, int stopReason) -> AndroidX.Work.MultiProcess.Parcelable.ParcelableInterruptRequest!
AndroidX.Work.MultiProcess.Parcelable.ParcelableInterruptRequest.DescribeContents() -> int
AndroidX.Work.MultiProcess.Parcelable.ParcelableInterruptRequest.Id.get -> string!
AndroidX.Work.MultiProcess.Parcelable.ParcelableInterruptRequest.ParcelableInterruptRequest(string! id, int stopReason) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableInterruptRequest.StopReason.get -> int
AndroidX.Work.MultiProcess.Parcelable.ParcelableInterruptRequest.WriteToParcel(Android.OS.Parcel! parcel, Android.OS.ParcelableWriteFlags flags) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableRemoteWorkRequest
AndroidX.Work.MultiProcess.Parcelable.ParcelableRemoteWorkRequest.ParcelableRemoteWorkRequest(Android.OS.Parcel! in) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableRemoteWorkRequest.ParcelableRemoteWorkRequest(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableRemoteWorkRequest.ParcelableRemoteWorkRequest(string! workerClassName, AndroidX.Work.WorkerParameters! workerParameters) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableResult
AndroidX.Work.MultiProcess.Parcelable.ParcelableResult.ParcelableResult(Android.OS.Parcel! in) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableResult.ParcelableResult(AndroidX.Work.ListenableWorker.Result! result) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableResult.ParcelableResult(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableRuntimeExtras
AndroidX.Work.MultiProcess.Parcelable.ParcelableRuntimeExtras.ParcelableRuntimeExtras(Android.OS.Parcel! in) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableRuntimeExtras.ParcelableRuntimeExtras(AndroidX.Work.WorkerParameters.RuntimeExtras! runtimeExtras) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableRuntimeExtras.ParcelableRuntimeExtras(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableUpdateRequest
AndroidX.Work.MultiProcess.Parcelable.ParcelableUpdateRequest.ParcelableUpdateRequest(Android.OS.Parcel! in) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableUpdateRequest.ParcelableUpdateRequest(Java.Util.UUID! id, AndroidX.Work.Data! data) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableUpdateRequest.ParcelableUpdateRequest(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.ParcelableWorkContinuationImpl(Android.OS.Parcel! parcel) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.ParcelableWorkContinuationImpl(AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.WorkContinuationImplInfo! info) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.ParcelableWorkContinuationImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.WorkContinuationImplInfo
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.WorkContinuationImplInfo.WorkContinuationImplInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.WorkContinuationImplInfo.WorkContinuationImplInfo(string? name, AndroidX.Work.ExistingWorkPolicy! workPolicy, System.Collections.Generic.IList<AndroidX.Work.WorkRequest!>! requests, System.Collections.Generic.IList<AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.WorkContinuationImplInfo!>? parents) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfo
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfo.ParcelableWorkInfo(Android.OS.Parcel! parcel) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfo.ParcelableWorkInfo(AndroidX.Work.WorkInfo! workInfo) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfo.ParcelableWorkInfo(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfos
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfos.ParcelableWorkInfos(Android.OS.Parcel! parcel) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfos.ParcelableWorkInfos(System.Collections.Generic.IList<AndroidX.Work.WorkInfo!>! infos) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfos.ParcelableWorkInfos(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkQuery
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkQuery.ParcelableWorkQuery(Android.OS.Parcel! parcel) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkQuery.ParcelableWorkQuery(AndroidX.Work.WorkQuery! workQuery) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkQuery.ParcelableWorkQuery(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequest
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequest.ParcelableWorkRequest(Android.OS.Parcel! in) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequest.ParcelableWorkRequest(AndroidX.Work.WorkRequest! workRequest) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequest.ParcelableWorkRequest(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequests
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequests.ParcelableWorkRequests(Android.OS.Parcel! in) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequests.ParcelableWorkRequests(System.Collections.Generic.IList<AndroidX.Work.WorkRequest!>! requests) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequests.ParcelableWorkRequests(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkerParameters
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkerParameters.ParcelableWorkerParameters(Android.OS.Parcel! in) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkerParameters.ParcelableWorkerParameters(AndroidX.Work.WorkerParameters! parameters) -> void
AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkerParameters.ParcelableWorkerParameters(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.RemoteClientUtilsKt
AndroidX.Work.MultiProcess.RemoteCoroutineWorker
AndroidX.Work.MultiProcess.RemoteCoroutineWorker.RemoteCoroutineWorker(Android.Content.Context! context, AndroidX.Work.WorkerParameters! parameters) -> void
AndroidX.Work.MultiProcess.RemoteCoroutineWorker.RemoteCoroutineWorker(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.RemoteCoroutineWorker.SetProgress(AndroidX.Work.Data! data, Kotlin.Coroutines.IContinuation! _completion) -> Java.Lang.Object?
AndroidX.Work.MultiProcess.RemoteExecuteKt
AndroidX.Work.MultiProcess.RemoteForegroundUpdater
AndroidX.Work.MultiProcess.RemoteForegroundUpdater.RemoteForegroundUpdater() -> void
AndroidX.Work.MultiProcess.RemoteForegroundUpdater.RemoteForegroundUpdater(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.RemoteListenableDelegatingWorker
AndroidX.Work.MultiProcess.RemoteListenableDelegatingWorker.Companion
AndroidX.Work.MultiProcess.RemoteListenableDelegatingWorker.RemoteListenableDelegatingWorker(Android.Content.Context! context, AndroidX.Work.WorkerParameters! workerParameters) -> void
AndroidX.Work.MultiProcess.RemoteListenableWorker
AndroidX.Work.MultiProcess.RemoteListenableWorker.RemoteListenableWorker(Android.Content.Context! appContext, AndroidX.Work.WorkerParameters! workerParams) -> void
AndroidX.Work.MultiProcess.RemoteListenableWorker.RemoteListenableWorker(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.RemoteProgressUpdater
AndroidX.Work.MultiProcess.RemoteProgressUpdater.RemoteProgressUpdater() -> void
AndroidX.Work.MultiProcess.RemoteProgressUpdater.RemoteProgressUpdater(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.RemoteWorkContinuationImpl
AndroidX.Work.MultiProcess.RemoteWorkContinuationImpl.RemoteWorkContinuationImpl(AndroidX.Work.MultiProcess.RemoteWorkManagerClient! client, AndroidX.Work.WorkContinuation! continuation) -> void
AndroidX.Work.MultiProcess.RemoteWorkContinuationImpl.RemoteWorkContinuationImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.RemoteWorkManagerClient
AndroidX.Work.MultiProcess.RemoteWorkManagerClient.RemoteWorkManagerClient(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.RemoteWorkManagerClient.Session
AndroidX.Work.MultiProcess.RemoteWorkManagerClient.Session.Session(AndroidX.Work.MultiProcess.RemoteWorkManagerClient! client) -> void
AndroidX.Work.MultiProcess.RemoteWorkManagerClient.Session.Session(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.RemoteWorkManagerClient.SessionTracker
AndroidX.Work.MultiProcess.RemoteWorkManagerClient.SessionTracker.SessionTracker(AndroidX.Work.MultiProcess.RemoteWorkManagerClient! client) -> void
AndroidX.Work.MultiProcess.RemoteWorkManagerClient.SessionTracker.SessionTracker(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.RemoteWorkManagerImpl
AndroidX.Work.MultiProcess.RemoteWorkManagerImpl.RemoteWorkManagerImpl(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.RemoteWorkManagerInfo
AndroidX.Work.MultiProcess.RemoteWorkManagerInfo.Configuration.get -> AndroidX.Work.Configuration!
AndroidX.Work.MultiProcess.RemoteWorkManagerInfo.ForegroundUpdater.get -> AndroidX.Work.IForegroundUpdater!
AndroidX.Work.MultiProcess.RemoteWorkManagerInfo.ProgressUpdater.get -> AndroidX.Work.IProgressUpdater!
AndroidX.Work.MultiProcess.RemoteWorkManagerInfo.TaskExecutor.get -> AndroidX.Work.Impl.Utils.TaskExecutor.ITaskExecutor!
AndroidX.Work.MultiProcess.RemoteWorkManagerService
AndroidX.Work.MultiProcess.RemoteWorkManagerService.RemoteWorkManagerService() -> void
AndroidX.Work.MultiProcess.RemoteWorkManagerService.RemoteWorkManagerService(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.RemoteWorkerService
AndroidX.Work.MultiProcess.RemoteWorkerService.RemoteWorkerService() -> void
AndroidX.Work.MultiProcess.RemoteWorkerService.RemoteWorkerService(nint javaReference, Android.Runtime.JniHandleOwnership transfer) -> void
AndroidX.Work.MultiProcess.RemoteWorkerWrapperKt
abstract AndroidX.Work.MultiProcess.ListenableCallback.ToByteArray(Java.Lang.Object! p0) -> byte[]!
abstract AndroidX.Work.MultiProcess.RemoteCoroutineWorker.DoRemoteWork(Kotlin.Coroutines.IContinuation! p0) -> Java.Lang.Object?
abstract AndroidX.Work.MultiProcess.RemoteListenableWorker.StartRemoteWork() -> Google.Common.Util.Concurrent.IListenableFuture!
const AndroidX.Work.MultiProcess.RemoteListenableDelegatingWorker.ArgumentRemoteListenableWorkerName = "androidx.work.multiprocess.RemoteListenableDelegatingWorker.ARGUMENT_REMOTE_LISTENABLE_WORKER_NAME" -> string!
const AndroidX.Work.MultiProcess.RemoteListenableWorker.ArgumentClassName = "androidx.work.impl.workers.RemoteListenableWorker.ARGUMENT_CLASS_NAME" -> string!
const AndroidX.Work.MultiProcess.RemoteListenableWorker.ArgumentPackageName = "androidx.work.impl.workers.RemoteListenableWorker.ARGUMENT_PACKAGE_NAME" -> string!
override AndroidX.Work.MultiProcess.ListenableCallback.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.ListenableCallback.ListenableCallbackRunnable.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.ListenableCallback.ListenableCallbackRunnable.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.ListenableCallback.ListenableCallbackRunnable.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.ListenableCallback.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.ListenableCallback.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.ListenableWorkerImpl.Interrupt(byte[]! request, AndroidX.Work.MultiProcess.IWorkManagerImplCallback! callback) -> void
override AndroidX.Work.MultiProcess.ListenableWorkerImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.ListenableWorkerImpl.StartWork(byte[]! request, AndroidX.Work.MultiProcess.IWorkManagerImplCallback! callback) -> void
override AndroidX.Work.MultiProcess.ListenableWorkerImpl.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.ListenableWorkerImpl.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.ListenableWorkerImplClient.Connection.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.ListenableWorkerImplClient.Connection.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.ListenableWorkerImplClient.Connection.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.ListenableWorkerImplClient.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.ListenableWorkerImplClient.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.ListenableWorkerImplClient.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.Parcelable.ParcelConverters.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.Parcelable.ParcelUtils.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableConstraints.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableConstraints.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.Parcelable.ParcelableConstraints.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableData.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableData.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableForegroundRequestInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableForegroundRequestInfo.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.Parcelable.ParcelableForegroundRequestInfo.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableInterruptRequest.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableInterruptRequest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableRemoteWorkRequest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableRemoteWorkRequest.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.Parcelable.ParcelableRemoteWorkRequest.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableResult.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableResult.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.Parcelable.ParcelableResult.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableRuntimeExtras.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableRuntimeExtras.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.Parcelable.ParcelableRuntimeExtras.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableUpdateRequest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableUpdateRequest.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.Parcelable.ParcelableUpdateRequest.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.WorkContinuationImplInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.WorkContinuationImplInfo.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.WorkContinuationImplInfo.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfo.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfo.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfos.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfos.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfos.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkQuery.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkQuery.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkQuery.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequest.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequest.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequest.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequests.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequests.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequests.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkerParameters.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkerParameters.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkerParameters.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.RemoteClientUtilsKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.RemoteCoroutineWorker.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.RemoteCoroutineWorker.StartRemoteWork() -> Google.Common.Util.Concurrent.IListenableFuture!
override AndroidX.Work.MultiProcess.RemoteCoroutineWorker.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.RemoteCoroutineWorker.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.RemoteExecuteKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.RemoteForegroundUpdater.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.RemoteForegroundUpdater.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.RemoteForegroundUpdater.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.RemoteListenableDelegatingWorker.Companion.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.RemoteListenableDelegatingWorker.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.RemoteListenableDelegatingWorker.StartWork() -> Google.Common.Util.Concurrent.IListenableFuture!
override AndroidX.Work.MultiProcess.RemoteListenableWorker.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.RemoteListenableWorker.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.RemoteListenableWorker.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.RemoteProgressUpdater.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.RemoteProgressUpdater.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.RemoteProgressUpdater.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.RemoteWorkContinuationImpl.CombineInternal(System.Collections.Generic.IList<AndroidX.Work.MultiProcess.RemoteWorkContinuation!>! continuations) -> AndroidX.Work.MultiProcess.RemoteWorkContinuation!
override AndroidX.Work.MultiProcess.RemoteWorkContinuationImpl.Enqueue() -> Google.Common.Util.Concurrent.IListenableFuture!
override AndroidX.Work.MultiProcess.RemoteWorkContinuationImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.RemoteWorkContinuationImpl.Then(System.Collections.Generic.IList<AndroidX.Work.OneTimeWorkRequest!>! work) -> AndroidX.Work.MultiProcess.RemoteWorkContinuation!
override AndroidX.Work.MultiProcess.RemoteWorkContinuationImpl.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.RemoteWorkContinuationImpl.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.BeginUniqueWork(string! uniqueWorkName, AndroidX.Work.ExistingWorkPolicy! existingWorkPolicy, System.Collections.Generic.IList<AndroidX.Work.OneTimeWorkRequest!>! work) -> AndroidX.Work.MultiProcess.RemoteWorkContinuation!
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.BeginWith(System.Collections.Generic.IList<AndroidX.Work.OneTimeWorkRequest!>! work) -> AndroidX.Work.MultiProcess.RemoteWorkContinuation!
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.CancelAllWork() -> Google.Common.Util.Concurrent.IListenableFuture!
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.CancelAllWorkByTag(string! tag) -> Google.Common.Util.Concurrent.IListenableFuture!
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.CancelUniqueWork(string! uniqueWorkName) -> Google.Common.Util.Concurrent.IListenableFuture!
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.CancelWorkById(Java.Util.UUID! id) -> Google.Common.Util.Concurrent.IListenableFuture!
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.Enqueue(AndroidX.Work.WorkContinuation! continuation) -> Google.Common.Util.Concurrent.IListenableFuture!
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.Enqueue(AndroidX.Work.WorkRequest! request) -> Google.Common.Util.Concurrent.IListenableFuture!
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.Enqueue(System.Collections.Generic.IList<AndroidX.Work.WorkRequest!>! requests) -> Google.Common.Util.Concurrent.IListenableFuture!
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.EnqueueUniquePeriodicWork(string! uniqueWorkName, AndroidX.Work.ExistingPeriodicWorkPolicy! existingPeriodicWorkPolicy, AndroidX.Work.PeriodicWorkRequest! periodicWork) -> Google.Common.Util.Concurrent.IListenableFuture!
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.EnqueueUniqueWork(string! uniqueWorkName, AndroidX.Work.ExistingWorkPolicy! existingWorkPolicy, System.Collections.Generic.IList<AndroidX.Work.OneTimeWorkRequest!>! work) -> Google.Common.Util.Concurrent.IListenableFuture!
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.GetWorkInfos(AndroidX.Work.WorkQuery! workQuery) -> Google.Common.Util.Concurrent.IListenableFuture!
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.Session.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.Session.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.Session.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.SessionTracker.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.SessionTracker.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.SessionTracker.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.SetForegroundAsync(string! id, AndroidX.Work.ForegroundInfo! foregroundInfo) -> Google.Common.Util.Concurrent.IListenableFuture!
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.SetProgress(Java.Util.UUID! id, AndroidX.Work.Data! data) -> Google.Common.Util.Concurrent.IListenableFuture!
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.RemoteWorkManagerClient.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.RemoteWorkManagerImpl.CancelAllWork(AndroidX.Work.MultiProcess.IWorkManagerImplCallback! callback) -> void
override AndroidX.Work.MultiProcess.RemoteWorkManagerImpl.CancelAllWorkByTag(string! tag, AndroidX.Work.MultiProcess.IWorkManagerImplCallback! callback) -> void
override AndroidX.Work.MultiProcess.RemoteWorkManagerImpl.CancelUniqueWork(string! name, AndroidX.Work.MultiProcess.IWorkManagerImplCallback! callback) -> void
override AndroidX.Work.MultiProcess.RemoteWorkManagerImpl.CancelWorkById(string! id, AndroidX.Work.MultiProcess.IWorkManagerImplCallback! callback) -> void
override AndroidX.Work.MultiProcess.RemoteWorkManagerImpl.EnqueueContinuation(byte[]! request, AndroidX.Work.MultiProcess.IWorkManagerImplCallback! callback) -> void
override AndroidX.Work.MultiProcess.RemoteWorkManagerImpl.EnqueueWorkRequests(byte[]! request, AndroidX.Work.MultiProcess.IWorkManagerImplCallback! callback) -> void
override AndroidX.Work.MultiProcess.RemoteWorkManagerImpl.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.RemoteWorkManagerImpl.QueryWorkInfo(byte[]! request, AndroidX.Work.MultiProcess.IWorkManagerImplCallback! callback) -> void
override AndroidX.Work.MultiProcess.RemoteWorkManagerImpl.SetForegroundAsync(byte[]! request, AndroidX.Work.MultiProcess.IWorkManagerImplCallback! callback) -> void
override AndroidX.Work.MultiProcess.RemoteWorkManagerImpl.SetProgress(byte[]! request, AndroidX.Work.MultiProcess.IWorkManagerImplCallback! callback) -> void
override AndroidX.Work.MultiProcess.RemoteWorkManagerImpl.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.RemoteWorkManagerImpl.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.RemoteWorkManagerImpl.UpdateUniquePeriodicWorkRequest(string! name, byte[]! request, AndroidX.Work.MultiProcess.IWorkManagerImplCallback! callback) -> void
override AndroidX.Work.MultiProcess.RemoteWorkManagerInfo.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.RemoteWorkManagerService.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.RemoteWorkManagerService.OnBind(Android.Content.Intent! intent) -> Android.OS.IBinder?
override AndroidX.Work.MultiProcess.RemoteWorkManagerService.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.RemoteWorkManagerService.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.RemoteWorkerService.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override AndroidX.Work.MultiProcess.RemoteWorkerService.OnBind(Android.Content.Intent! intent) -> Android.OS.IBinder?
override AndroidX.Work.MultiProcess.RemoteWorkerService.ThresholdClass.get -> nint
override AndroidX.Work.MultiProcess.RemoteWorkerService.ThresholdType.get -> System.Type!
override AndroidX.Work.MultiProcess.RemoteWorkerWrapperKt.JniPeerMembers.get -> Java.Interop.JniPeerMembers!
override sealed AndroidX.Work.MultiProcess.RemoteCoroutineWorker.OnStopped() -> void
override sealed AndroidX.Work.MultiProcess.RemoteListenableWorker.StartWork() -> Google.Common.Util.Concurrent.IListenableFuture!
static AndroidX.Work.MultiProcess.ListenableCallback.ListenableCallbackRunnable.ReportFailure(AndroidX.Work.MultiProcess.IWorkManagerImplCallback! callback, Java.Lang.Throwable! throwable) -> void
static AndroidX.Work.MultiProcess.ListenableCallback.ListenableCallbackRunnable.ReportSuccess(AndroidX.Work.MultiProcess.IWorkManagerImplCallback! callback, byte[]! response) -> void
static AndroidX.Work.MultiProcess.Parcelable.ParcelConverters.Marshall(Android.OS.IParcelable! parcelable) -> byte[]!
static AndroidX.Work.MultiProcess.Parcelable.ParcelConverters.Unmarshall(byte[]! array, Android.OS.IParcelableCreator! creator) -> Java.Lang.Object!
static AndroidX.Work.MultiProcess.Parcelable.ParcelUtils.ReadBooleanValue(Android.OS.Parcel! parcel) -> bool
static AndroidX.Work.MultiProcess.Parcelable.ParcelUtils.WriteBooleanValue(Android.OS.Parcel! parcel, bool value) -> void
static AndroidX.Work.MultiProcess.Parcelable.ParcelableConstraints.Creator.get -> Android.OS.IParcelableCreator?
static AndroidX.Work.MultiProcess.Parcelable.ParcelableData.Creator.get -> Android.OS.IParcelableCreator!
static AndroidX.Work.MultiProcess.Parcelable.ParcelableForegroundRequestInfo.Creator.get -> Android.OS.IParcelableCreator?
static AndroidX.Work.MultiProcess.Parcelable.ParcelableInterruptRequest.Creator.get -> Android.OS.IParcelableCreator!
static AndroidX.Work.MultiProcess.Parcelable.ParcelableRemoteWorkRequest.Creator.get -> Android.OS.IParcelableCreator?
static AndroidX.Work.MultiProcess.Parcelable.ParcelableResult.Creator.get -> Android.OS.IParcelableCreator?
static AndroidX.Work.MultiProcess.Parcelable.ParcelableRuntimeExtras.Creator.get -> Android.OS.IParcelableCreator?
static AndroidX.Work.MultiProcess.Parcelable.ParcelableUpdateRequest.Creator.get -> Android.OS.IParcelableCreator?
static AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.Creator.get -> Android.OS.IParcelableCreator?
static AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfo.Creator.get -> Android.OS.IParcelableCreator?
static AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfos.Creator.get -> Android.OS.IParcelableCreator?
static AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkQuery.Creator.get -> Android.OS.IParcelableCreator?
static AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequest.Creator.get -> Android.OS.IParcelableCreator?
static AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequests.Creator.get -> Android.OS.IParcelableCreator?
static AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkerParameters.Creator.get -> Android.OS.IParcelableCreator?
static AndroidX.Work.MultiProcess.RemoteWorkManagerClient.SVoidMapper.get -> AndroidX.Arch.Core.Util.IFunction?
static AndroidX.Work.MultiProcess.RemoteWorkManagerInfo.ClearInstance() -> void
static AndroidX.Work.MultiProcess.RemoteWorkManagerInfo.GetInstance(Android.Content.Context! context) -> AndroidX.Work.MultiProcess.RemoteWorkManagerInfo!
virtual AndroidX.Work.MultiProcess.ListenableCallback.DispatchCallbackSafely() -> void
virtual AndroidX.Work.MultiProcess.ListenableCallback.ListenableCallbackRunnable.Run() -> void
virtual AndroidX.Work.MultiProcess.ListenableWorkerImplClient.Connection.OnBindingDied(Android.Content.ComponentName! name) -> void
virtual AndroidX.Work.MultiProcess.ListenableWorkerImplClient.Connection.OnNullBinding(Android.Content.ComponentName! name) -> void
virtual AndroidX.Work.MultiProcess.ListenableWorkerImplClient.Connection.OnServiceConnected(Android.Content.ComponentName! componentName, Android.OS.IBinder! iBinder) -> void
virtual AndroidX.Work.MultiProcess.ListenableWorkerImplClient.Connection.OnServiceDisconnected(Android.Content.ComponentName! componentName) -> void
virtual AndroidX.Work.MultiProcess.ListenableWorkerImplClient.Execute(Android.Content.ComponentName! componentName, AndroidX.Work.MultiProcess.IRemoteDispatcher! dispatcher) -> Google.Common.Util.Concurrent.IListenableFuture!
virtual AndroidX.Work.MultiProcess.ListenableWorkerImplClient.Execute(Google.Common.Util.Concurrent.IListenableFuture! session, AndroidX.Work.MultiProcess.IRemoteDispatcher! dispatcher) -> Google.Common.Util.Concurrent.IListenableFuture!
virtual AndroidX.Work.MultiProcess.ListenableWorkerImplClient.GetConnection() -> AndroidX.Work.MultiProcess.ListenableWorkerImplClient.Connection?
virtual AndroidX.Work.MultiProcess.ListenableWorkerImplClient.GetListenableWorkerImpl(Android.Content.ComponentName! component) -> Google.Common.Util.Concurrent.IListenableFuture!
virtual AndroidX.Work.MultiProcess.ListenableWorkerImplClient.UnbindService() -> void
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableConstraints.Constraints.get -> AndroidX.Work.Constraints!
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableConstraints.DescribeContents() -> int
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableConstraints.WriteToParcel(Android.OS.Parcel! parcel, Android.OS.ParcelableWriteFlags flags) -> void
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableForegroundRequestInfo.DescribeContents() -> int
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableForegroundRequestInfo.ForegroundInfo.get -> AndroidX.Work.ForegroundInfo!
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableForegroundRequestInfo.Id.get -> string!
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableForegroundRequestInfo.WriteToParcel(Android.OS.Parcel! parcel, Android.OS.ParcelableWriteFlags flags) -> void
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableRemoteWorkRequest.DescribeContents() -> int
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableRemoteWorkRequest.ParcelableWorkerParameters.get -> AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkerParameters!
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableRemoteWorkRequest.WorkerClassName.get -> string!
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableRemoteWorkRequest.WriteToParcel(Android.OS.Parcel! parcel, Android.OS.ParcelableWriteFlags flags) -> void
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableResult.DescribeContents() -> int
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableResult.Result.get -> AndroidX.Work.ListenableWorker.Result!
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableResult.WriteToParcel(Android.OS.Parcel! parcel, Android.OS.ParcelableWriteFlags flags) -> void
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableRuntimeExtras.DescribeContents() -> int
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableRuntimeExtras.RuntimeExtras.get -> AndroidX.Work.WorkerParameters.RuntimeExtras!
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableRuntimeExtras.WriteToParcel(Android.OS.Parcel! parcel, Android.OS.ParcelableWriteFlags flags) -> void
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableUpdateRequest.Data.get -> AndroidX.Work.Data!
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableUpdateRequest.DescribeContents() -> int
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableUpdateRequest.Id.get -> string!
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableUpdateRequest.WriteToParcel(Android.OS.Parcel! parcel, Android.OS.ParcelableWriteFlags flags) -> void
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.DescribeContents() -> int
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.Info.get -> AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.WorkContinuationImplInfo!
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.WorkContinuationImplInfo.ExistingWorkPolicy.get -> AndroidX.Work.ExistingWorkPolicy!
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.WorkContinuationImplInfo.Name.get -> string?
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.WorkContinuationImplInfo.ParentInfos.get -> System.Collections.Generic.IList<AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.WorkContinuationImplInfo!>?
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.WorkContinuationImplInfo.Work.get -> System.Collections.Generic.IList<AndroidX.Work.WorkRequest!>!
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkContinuationImpl.WriteToParcel(Android.OS.Parcel! parcel, Android.OS.ParcelableWriteFlags flags) -> void
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfo.DescribeContents() -> int
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfo.WorkInfo.get -> AndroidX.Work.WorkInfo!
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfo.WriteToParcel(Android.OS.Parcel! parcel, Android.OS.ParcelableWriteFlags flags) -> void
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfos.DescribeContents() -> int
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfos.WorkInfos.get -> System.Collections.Generic.IList<AndroidX.Work.WorkInfo!>!
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkInfos.WriteToParcel(Android.OS.Parcel! parcel, Android.OS.ParcelableWriteFlags flags) -> void
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkQuery.DescribeContents() -> int
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkQuery.WorkQuery.get -> AndroidX.Work.WorkQuery!
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkQuery.WriteToParcel(Android.OS.Parcel! parcel, Android.OS.ParcelableWriteFlags flags) -> void
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequest.DescribeContents() -> int
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequest.WorkRequest.get -> AndroidX.Work.WorkRequest!
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequest.WriteToParcel(Android.OS.Parcel! parcel, Android.OS.ParcelableWriteFlags flags) -> void
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequests.DescribeContents() -> int
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequests.Requests.get -> System.Collections.Generic.IList<AndroidX.Work.WorkRequest!>!
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkRequests.WriteToParcel(Android.OS.Parcel! parcel, Android.OS.ParcelableWriteFlags flags) -> void
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkerParameters.Data.get -> AndroidX.Work.Data!
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkerParameters.DescribeContents() -> int
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkerParameters.Id.get -> Java.Util.UUID!
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkerParameters.RunAttemptCount.get -> int
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkerParameters.Tags.get -> System.Collections.Generic.ICollection<string!>!
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkerParameters.ToWorkerParameters(AndroidX.Work.Configuration! configuration, AndroidX.Work.Impl.Utils.TaskExecutor.ITaskExecutor! taskExecutor, AndroidX.Work.IProgressUpdater! progressUpdater, AndroidX.Work.IForegroundUpdater! foregroundUpdater) -> AndroidX.Work.WorkerParameters!
virtual AndroidX.Work.MultiProcess.Parcelable.ParcelableWorkerParameters.WriteToParcel(Android.OS.Parcel! parcel, Android.OS.ParcelableWriteFlags flags) -> void
virtual AndroidX.Work.MultiProcess.RemoteForegroundUpdater.SetForegroundAsync(Android.Content.Context! context, Java.Util.UUID! id, AndroidX.Work.ForegroundInfo! foregroundInfo) -> Google.Common.Util.Concurrent.IListenableFuture!
virtual AndroidX.Work.MultiProcess.RemoteProgressUpdater.UpdateProgress(Android.Content.Context! context, Java.Util.UUID! id, AndroidX.Work.Data! data) -> Google.Common.Util.Concurrent.IListenableFuture!
virtual AndroidX.Work.MultiProcess.RemoteWorkManagerClient.CleanUp() -> void
virtual AndroidX.Work.MultiProcess.RemoteWorkManagerClient.Context.get -> Android.Content.Context!
virtual AndroidX.Work.MultiProcess.RemoteWorkManagerClient.CurrentSession.get -> AndroidX.Work.MultiProcess.RemoteWorkManagerClient.Session?
virtual AndroidX.Work.MultiProcess.RemoteWorkManagerClient.Execute(AndroidX.Work.MultiProcess.IRemoteDispatcher! dispatcher) -> Google.Common.Util.Concurrent.IListenableFuture!
virtual AndroidX.Work.MultiProcess.RemoteWorkManagerClient.Executor.get -> Java.Util.Concurrent.IExecutor!
virtual AndroidX.Work.MultiProcess.RemoteWorkManagerClient.GetSession() -> Google.Common.Util.Concurrent.IListenableFuture!
virtual AndroidX.Work.MultiProcess.RemoteWorkManagerClient.GetSessionTracker() -> AndroidX.Work.MultiProcess.RemoteWorkManagerClient.SessionTracker!
virtual AndroidX.Work.MultiProcess.RemoteWorkManagerClient.Session.OnBindingDied() -> void
virtual AndroidX.Work.MultiProcess.RemoteWorkManagerClient.Session.OnBindingDied(Android.Content.ComponentName! name) -> void
virtual AndroidX.Work.MultiProcess.RemoteWorkManagerClient.Session.OnNullBinding(Android.Content.ComponentName! name) -> void
virtual AndroidX.Work.MultiProcess.RemoteWorkManagerClient.Session.OnServiceConnected(Android.Content.ComponentName! componentName, Android.OS.IBinder! iBinder) -> void
virtual AndroidX.Work.MultiProcess.RemoteWorkManagerClient.Session.OnServiceDisconnected(Android.Content.ComponentName! componentName) -> void
virtual AndroidX.Work.MultiProcess.RemoteWorkManagerClient.SessionIndex.get -> long
virtual AndroidX.Work.MultiProcess.RemoteWorkManagerClient.SessionLock.get -> Java.Lang.Object!
virtual AndroidX.Work.MultiProcess.RemoteWorkManagerClient.SessionTimeout.get -> long
virtual AndroidX.Work.MultiProcess.RemoteWorkManagerClient.SessionTracker.Run() -> void
