parameters:
  # Environment Parameters
  name: 'build'                                             # the name of the build job for dependency purposes
  timeoutInMinutes: 150                                     # the timeout in minutes
  mainBranchName: 'main'                                    # the "main" branch that should be used - can be something other than "main"
  macosAgentPoolName: 'Azure Pipelines'                     # the name of the macOS VM pool
  macosImage: internal-macos12                              # macOS VM image name, must be "internal" locked down image
  windowsAgentPoolName: android-win-2022                    # the name of the Windows VM pool
  windowsImage: 'windows-latest'                            # the name of the Windows VM image

  # Tool Parameters
  dotnetVersion: '6.0.403'                                  # the version of .NET to use
  dotnetWorkloadRollbackFile: ''
  dotnetWorkloadSource: ''
  dotnetNuGetOrgSource: ''
  tools: []                                                 # a list of any additional .NET Core tools needed
  
  # Build Parameters
  verbosity: 'normal'                                       # the build verbosity: 'minimal', 'normal', 'diagnostic'
  configuration: 'Release'                                  # the build configuration: 'Debug', 'Release'
  
  # Reporting/Analysis Parameters
  areaPath: ''                                              # the areaPath to log any issues
  publishJob: ''                                            # the job to use as the source of the 'nuget' artifact: '', 'windows', 'macos', 'linux'
  publishOutputSuffix: ''                                   # the artifact suffix to use when publishing the output folder
  signListPath: 'SignList.xml'                              # the path to the SignList.xml to copy into the nuget artifact for signing
  validPackagePrefixes: []                                  # any NuGet prefixes that should pass validation
  artifactsPath: 'output'                                   # the path to the NuGet packages that need to be signed, verified and published

jobs:
  - job: ${{ parameters.name }}
    strategy:
      matrix:
        ${{ if ne(parameters.macosImage, '') }}:
          macos:
            poolName: ${{ parameters.macosAgentPoolName }}
            imageName: ${{ parameters.macosImage }}
            classicInstallerUrl: $(LegacyXamarinAndroidPkg)
            runCodeQL: false
        ${{ if ne(parameters.windowsImage, '') }}:
          windows:
            poolName: ${{ parameters.windowsAgentPoolName }}
            imageName: ${{ parameters.windowsImage }}
            classicInstallerUrl: $(LegacyXamarinAndroidVsix)
            runCodeQL: true
    displayName: Build
    timeoutInMinutes: ${{ parameters.timeoutInMinutes }}
    variables:
      Codeql.Enabled: $(runCodeQL)
    pool:
      name: $(poolName)
      vmImage: $(imageName)

    steps:
      - template: setup-environment.yml
        parameters:
          dotnetVersion: ${{ parameters.dotnetVersion }}
          dotnetWorkloadRollbackFile: ${{ parameters.dotnetWorkloadRollbackFile }}
          dotnetWorkloadSource: ${{ parameters.dotnetWorkloadSource }}
          dotnetNuGetOrgSource: ${{ parameters.dotnetNuGetOrgSource }}
          dotnetTools: ${{ parameters.tools }}
          classicInstallerUrl: $(classicInstallerUrl)

      - template: build-and-test.yml
        parameters:
          validPackagePrefixes: ${{ parameters.validPackagePrefixes }}
          artifactsPath: ${{ parameters.artifactsPath }}
          verbosity: ${{ parameters.verbosity }}
          configuration: ${{ parameters.configuration }}

      # after the build is complete
      - pwsh: |
          $srcExists = (Test-Path "${{ parameters.signListPath }}")
          $dstExists = (Test-Path "${{ parameters.artifactsPath }}\SignList.xml")
          if ($srcExists -and !$dstExists) {
            Copy-Item "${{ parameters.signListPath }}" "${{ parameters.artifactsPath }}\SignList.xml"
            Write-Host "Copied ${{ parameters.signListPath }} to ${{ parameters.artifactsPath }}\SignList.xml"
          } elseif (!$srcExists) {
            Write-Host "${{ parameters.signListPath }} did not exist, nothing copied."
          } elseif ($dstExists) {
            Write-Host "${{ parameters.artifactsPath }}\SignList.xml already existed, nothing copied."
          }
        displayName: 'Copy SignList.xml to the nuget artifact'
      - task: PublishBuildArtifacts@1
        displayName: 'Publish artifacts'
        condition: or(eq('${{ parameters.publishJob }}', ''), eq('${{ parameters.publishJob }}', variables['System.JobName']))
        inputs:
          PathToPublish: ${{ parameters.artifactsPath }}
          ArtifactName: nuget
      - task: PublishBuildArtifacts@1
        displayName: 'Publish platform artifacts'
        condition: always()
        inputs:
          PathToPublish: output
          ArtifactName: output-$(System.JobName)${{ parameters.publishOutputSuffix }}
      # run any required checks
      - ${{ if eq(variables['System.TeamProject'], 'devdiv') }}:
        - task: ComponentGovernanceComponentDetection@0
          displayName: 'Run component detection'
          condition: and(always(), eq('refs/heads/${{ parameters.mainBranchName }}', variables['Build.SourceBranch']))
          inputs:
            scanType: 'Register'
            verbosity: 'Verbose'
            alertWarningLevel: 'High'

  - template: code-analysis.yml
    parameters:
      name: ${{ parameters.name }}
      mainBranchName: ${{ parameters.mainBranchName }}
      areaPath: ${{ parameters.areaPath }}
      configuration: ${{ parameters.configuration }}
