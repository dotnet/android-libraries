parameters:
  dotnetTools: []
  runDotnetNextTest: false
  downloadAndInstallJdk: false
  downloadAndInstallAndroidSdk: true

steps:
  - pwsh: |
      $url = "https://aka.ms/download-jdk/microsoft-jdk-17.0.14-windows-x64.zip"
      $fileName = [System.IO.Path]::GetFileName($url)
      Invoke-WebRequest -Uri $url -OutFile $fileName
    displayName: Download Java 17 SDK (Windows)
    condition: and(eq( variables['Agent.OS'], 'Windows_NT' ), eq(${{ parameters.downloadAndInstallJdk }}, true))
    workingDirectory: $(Build.StagingDirectory)

  - task: JavaToolInstaller@0
    displayName: Use Java 17 SDK (Windows)
    condition: and(eq( variables['Agent.OS'], 'Windows_NT' ), eq(${{ parameters.downloadAndInstallJdk }}, true))
    inputs:
      versionSpec: '17'
      jdkArchitectureOption: 'x64'
      jdkSourceOption: LocalDirectory
      jdkFile: $(Build.StagingDirectory)\microsoft-jdk-17.0.14-windows-x64.zip
      jdkDestinationDirectory: $(Agent.ToolsDirectory)/jdk11

  - ${{ if eq(parameters.downloadAndInstallAndroidSdk, true) }}:
    - pwsh: |
        $installDir = "C:\Android\android-sdk"
        $tempDir = "C:\Android\android-sdk\temp"
        if (-Not (Test-Path -Path $tempDir)) {
            New-Item -ItemType Directory -Path $tempDir
        } else {
          Remove-Item -Path $tempDir\* -Recurse -Force
        }
        $cmdlineToolsUrl = "https://dl.google.com/android/repository/commandlinetools-win-11379558_latest.zip"
        $cmdlineToolsZip = "$tempDir\cmdline-tools.zip"
        $cmdlineToolsDestination = "$installDir\cmdline-tools\12.0"
        Invoke-WebRequest -Uri $cmdlineToolsUrl -OutFile $cmdlineToolsZip
        Expand-Archive -Path $cmdlineToolsZip -DestinationPath $tempDir
        if (-Not (Test-Path -Path $cmdlineToolsDestination)) {
          New-Item -ItemType Directory -Path $cmdlineToolsDestination
        }
        Move-Item -Path "$tempDir\cmdline-tools\*" -Destination $cmdlineToolsDestination -Force
        $sdkManagerTool = "$cmdlineToolsDestination\bin\sdkmanager.bat"
        & $sdkManagerTool --sdk_root=$installDir --licenses
        & $sdkManagerTool --sdk_root=$installDir "platform-tools" "build-tools;35.0.0" "platforms;android-35" "platforms;android-34" "platforms;android-33"
        Remove-Item -Path $tempDir
      displayName: Install Android SDK (Windows)

  # before the build starts, make sure the tooling is as expected
  - task: UseDotNet@2
    displayName: 'Use dotnet $(dotnetVersion)'
    inputs:
      version: $(dotnetVersion)
      performMultiLevelLookup: true
      includePreviewVersions: true
    condition: ne('$(dotnetVersion)', '')

  - ${{ if eq(parameters.runDotnetNextTest, true) }}:
    - task: UseDotNet@2
      displayName: 'Use dotnet $(dotnetNextVersion)'
      inputs:
        version: $(dotnetNextVersion)
        performMultiLevelLookup: true
        includePreviewVersions: true
      
  - ${{ each tool in parameters.dotnetTools }}:
    - ${{ each pair in tool }}:
      - pwsh: dotnet tool update -g ${{ pair.key }} --version ${{ pair.value }}
        displayName: 'Install tool: ${{ pair.key }}'

  - ${{ if eq(parameters.runDotnetNextTest, true) }}:
    - pwsh: |
        dotnet cake -t=dotnet-next `
          --dotnet-version="$(dotnetNextVersion)" `
          --framework-version="$(dotnetNextFrameworkVersion)" `
          --api-level-version="$(dotnetNextApiLevel)"
      displayName: Set up dotnet-next test changes

  - ${{ if eq(parameters.runDotnetNextTest, false) }}:
    - pwsh: |
        dotnet workload install maui --verbosity diag --from-rollback-file $(dotnetWorkloadRollbackFile) --source $(dotnetWorkloadSource) --source $(dotnetNuGetOrgSource)
        if ($LASTEXITCODE -ne 0) {
            Write-Host "##vso[task.logissue type=error]Failed to install workloads."
            Write-Host "##vso[task.complete result=Failed;]"
            exit 0
        }
      displayName: Install .NET Workloads

  - ${{ if eq(parameters.runDotnetNextTest, true) }}:
    - pwsh: |
        dotnet workload install maui --verbosity diag
        if ($LASTEXITCODE -ne 0) {
            Write-Host "##vso[task.logissue type=error]Failed to install workloads."
            Write-Host "##vso[task.complete result=Failed;]"
            exit 0
        }
      displayName: Install Preview .NET Workloads

  - bash: |
      echo "##vso[task.setvariable variable=JAVA_HOME]/Library/Java/JavaVirtualMachines/microsoft-11.jdk/Contents/Home"
    displayName: Use Java 11 SDK (Mac)
    condition: eq( variables['Agent.OS'], 'Darwin' )

  - task: JavaToolInstaller@0
    displayName: Use Java 11 SDK (Windows)
    condition: and(eq( variables['Agent.OS'], 'Windows_NT' ), ne(${{ parameters.downloadAndInstallJdk }}, true))
    inputs:
      versionSpec: '11'
      jdkArchitectureOption: 'x64'
      jdkSourceOption: 'PreInstalled'
