parameters:
  jdkVersion: '21.0.8'
  jdkDestinationDirectory: $(Agent.ToolsDirectory)\jdk21

steps:
  - pwsh: |
      $jdkVersion = "${{ parameters.jdkVersion }}"
      $destinationDir = "${{ parameters.jdkDestinationDirectory }}"
      
      # Download JDK
      if ($IsMacOS) {
          $url = "https://aka.ms/download-jdk/microsoft-jdk-$jdkVersion-macos-x64.tar.gz"
      } else {
          $url = "https://aka.ms/download-jdk/microsoft-jdk-$jdkVersion-windows-x64.zip"
      }
      
      $fileName = [System.IO.Path]::GetFileName($url)
      Write-Host "Downloading JDK from: $url"
      Invoke-WebRequest -Uri $url -OutFile $fileName
      
      # Clean and create destination directory
      if (Test-Path $destinationDir) {
          Write-Host "Cleaning existing directory: $destinationDir"
          Remove-Item $destinationDir -Recurse -Force
      }
      New-Item -ItemType Directory -Path $destinationDir -Force | Out-Null
      
      # Extract archive
      Write-Host "Extracting JDK to: $destinationDir"
      if ($IsWindows) {
          Expand-Archive -Path $fileName -DestinationPath $destinationDir -Force
      } else {
          & tar -xzf $fileName -C $destinationDir
      }
      
      # Find JAVA_HOME - look for directory with bin folder or Contents/Home
      $jdkDir = Get-ChildItem -Path $destinationDir -Directory | Select-Object -First 1
      
      # Check for macOS structure (jdk-version/Contents/Home)
      $contentsHome = Join-Path $jdkDir.FullName "Contents" "Home"
      if (Test-Path $contentsHome) {
          $javaHome = $contentsHome
      }
      # Check for directory with bin folder
      elseif (Test-Path (Join-Path $jdkDir.FullName "bin")) {
          $javaHome = $jdkDir.FullName
      }
      # Fallback to destination directory
      else {
          $javaHome = $destinationDir
      }
      
      # Verify bin directory exists
      $binPath = Join-Path $javaHome "bin"
      if (-not (Test-Path $binPath)) {
          Write-Host "##vso[task.logissue type=error]JDK bin directory not found at: $binPath"
          exit 1
      }
      
      Write-Host "JDK installed at: $javaHome"
      Write-Host "Bin directory: $binPath"
      
      # Set environment variables
      Write-Host "##vso[task.setvariable variable=JAVA_HOME]$javaHome"
      Write-Host "##vso[task.setvariable variable=JAVA_HOME_21_X64]$javaHome"
      Write-Host "##vso[task.prependpath]$binPath"
      
      # Verify installation
      $javaExe = Join-Path $binPath "java"
      if ($IsWindows) {
          $javaExe += ".exe"
      }
      
      if (Test-Path $javaExe) {
          Write-Host "Java version:"
          & $javaExe -version
      } else {
          Write-Host "##vso[task.logissue type=error]Java executable not found at: $javaExe"
          exit 1
      }
    displayName: Install Java ${{ parameters.jdkVersion }} SDK
    workingDirectory: $(Build.StagingDirectory)
